2025-04-15T07:51:54.3476324Z ##[group]Run reviewdog/action-setup@3f401fe1d58fe77e10d665ab713057375e39b887
2025-04-15T07:51:54.3476753Z with:
2025-04-15T07:51:54.3476957Z   reviewdog_version: v0.20.2
2025-04-15T07:51:54.3477193Z env:
2025-04-15T07:51:54.3477380Z   CARGO_NET_GIT_FETCH_WITH_CLI: true
2025-04-15T07:51:54.3477639Z ##[endgroup]
2025-04-15T07:51:54.3558485Z ##[group]Run set -eu
2025-04-15T07:51:54.3559098Z [36;1mset -eu[0m
2025-04-15T07:51:54.3559366Z [36;1m"$GITHUB_ACTION_PATH/install.sh"[0m
2025-04-15T07:51:54.3587830Z shell: /usr/bin/sh -e {0}
2025-04-15T07:51:54.3588107Z env:
2025-04-15T07:51:54.3588312Z   CARGO_NET_GIT_FETCH_WITH_CLI: true
2025-04-15T07:51:54.3588598Z   REVIEWDOG_VERSION: v0.20.2
2025-04-15T07:51:54.3589147Z   REVIEWDOG_TEMPDIR: /home/runner/work/_temp
2025-04-15T07:51:54.3589445Z ##[endgroup]
2025-04-15T07:51:54.3664189Z ##[group]üê∂ Installing reviewdog ... https://github.com/reviewdog/reviewdog
2025-04-15T07:51:54.4101820Z reviewdog/reviewdog info checking GitHub for tag 'v0.20.2'
2025-04-15T07:51:54.7108132Z reviewdog/reviewdog info found version: 0.20.2 for v0.20.2/Linux/x86_64
2025-04-15T07:51:55.8943466Z reviewdog/reviewdog info installed /home/runner/work/_temp/reviewdog/bin/reviewdog
2025-04-15T07:51:55.8996935Z ##[endgroup]
2025-04-15T07:51:55.9047223Z ##[group]Run set -eu
2025-04-15T07:51:55.9047496Z [36;1mset -eu[0m
2025-04-15T07:51:55.9047780Z [36;1m"$GITHUB_ACTION_PATH/check-installed.sh"[0m
2025-04-15T07:51:55.9073785Z shell: /usr/bin/sh -e {0}
2025-04-15T07:51:55.9074042Z env:
2025-04-15T07:51:55.9074246Z   CARGO_NET_GIT_FETCH_WITH_CLI: true
2025-04-15T07:51:55.9074515Z ##[endgroup]
2025-04-15T07:51:55.9117334Z ##[group]üìñ reviewdog -h
2025-04-15T07:51:55.9137708Z Usage:	reviewdog [flags]
2025-04-15T07:51:55.9138325Z 	reviewdog accepts any compiler or linter results from stdin and filters
2025-04-15T07:51:55.9139505Z 	them by diff for review. reviewdog also can posts the results as a comment to
2025-04-15T07:51:55.9140199Z 	GitHub if you use reviewdog in CI service.
2025-04-15T07:51:55.9140673Z Flags:
2025-04-15T07:51:55.9141020Z   -conf string
2025-04-15T07:51:55.9141348Z     	config file path
2025-04-15T07:51:55.9141696Z   -diff string
2025-04-15T07:51:55.9142299Z     	diff command (e.g. "git diff") for local reporters. Do not use --relative flag for git command.
2025-04-15T07:51:55.9142988Z   -efm value
2025-04-15T07:51:55.9143673Z     	list of supported machine-readable format and errorformat (https://github.com/reviewdog/errorformat)
2025-04-15T07:51:55.9144460Z   -f string
2025-04-15T07:51:55.9144991Z     	format name (run -list to see supported format name) for input. It's also used as tool name in review comment if -name is empty
2025-04-15T07:51:55.9145856Z   -f.diff.strip int
2025-04-15T07:51:55.9146444Z     	option for -f=diff: strip NUM leading components from diff file names (equivalent to 'patch -p') (default is 1 for git diff) (default 1)
2025-04-15T07:51:55.9147400Z   -fail-level value
2025-04-15T07:51:55.9148313Z     	reviewdog will exit with code 1 if it finds at least 1 issue with severity greater than or equal to the given level. [none(default),any,info,warning,error]
2025-04-15T07:51:55.9149177Z   -fail-on-error
2025-04-15T07:51:55.9149415Z     	[DEPRECATED] use -fail-level instead
2025-04-15T07:51:55.9149688Z   -filter-mode value
2025-04-15T07:51:55.9149995Z     	how to filter checks results. [added, diff_context, file, nofilter].
2025-04-15T07:51:55.9150345Z     			"added" (default)
2025-04-15T07:51:55.9150589Z     				Filter by added/modified diff lines.
2025-04-15T07:51:55.9150855Z     			"diff_context"
2025-04-15T07:51:55.9151134Z     				Filter by diff context, which can include unchanged lines.
2025-04-15T07:51:55.9151533Z     				i.e. changed lines +-N lines (e.g. N=3 for default git diff).
2025-04-15T07:51:55.9151846Z     			"file"
2025-04-15T07:51:55.9152051Z     				Filter by added/modified file.
2025-04-15T07:51:55.9152301Z     			"nofilter"
2025-04-15T07:51:55.9152505Z     				Do not filter any results.
2025-04-15T07:51:55.9152730Z     	
2025-04-15T07:51:55.9153257Z   -guess
2025-04-15T07:51:55.9153500Z     	guess Pull Request ID by branch name and commit SHA
2025-04-15T07:51:55.9153797Z   -level string
2025-04-15T07:51:55.9154105Z     	default report level for supported reporters ("info","warning","error").
2025-04-15T07:51:55.9154460Z   -list
2025-04-15T07:51:55.9154742Z     	list supported pre-defined format names which can be used as -f arg
2025-04-15T07:51:55.9155089Z   -log-level string
2025-04-15T07:51:55.9155412Z     	log level for reviewdog itself. (debug, info, warning, error) (default "info")
2025-04-15T07:51:55.9155779Z   -name string
2025-04-15T07:51:55.9156089Z     	tool name in review comment. -f is used as tool name if -name is empty
2025-04-15T07:51:55.9156433Z   -reporter string
2025-04-15T07:51:55.9156650Z     	reporter of reviewdog results.
2025-04-15T07:51:55.9156901Z     		"local" (default)
2025-04-15T07:51:55.9157124Z     			Report results to stdout.
2025-04-15T07:51:55.9157350Z     	
2025-04-15T07:51:55.9157516Z     		"rdjson"
2025-04-15T07:51:55.9157745Z     			Report results to stdout in rdjson format.
2025-04-15T07:51:55.9158008Z     	
2025-04-15T07:51:55.9158176Z     		"rdjsonl"
2025-04-15T07:51:55.9158397Z     			Report results to stdout in rdjsonl format.
2025-04-15T07:51:55.9158658Z     	
2025-04-15T07:51:55.9159092Z     		"sarif"
2025-04-15T07:51:55.9159327Z     			Report results to stdout in SARIF format.
2025-04-15T07:51:55.9159595Z     	
2025-04-15T07:51:55.9159776Z     		"github-check"
2025-04-15T07:51:55.9160102Z     			Report results to GitHub Check. It works both for Pull Requests and commits.
2025-04-15T07:51:55.9160593Z     			For Pull Request, you can see report results in GitHub PullRequest Check
2025-04-15T07:51:55.9161004Z     			tab and can control filtering mode by -filter-mode flag.
2025-04-15T07:51:55.9161300Z     	
2025-04-15T07:51:55.9161507Z     			There are two options to use this reporter.
2025-04-15T07:51:55.9161775Z     	
2025-04-15T07:51:55.9162038Z     			Option 1) Run reviewdog from GitHub Actions w/ secrets.GITHUB_TOKEN
2025-04-15T07:51:55.9162470Z     				Note that it reports result to GitHub Actions log console for Pull
2025-04-15T07:51:55.9162882Z     				Requests from fork repository due to GitHub Actions restriction.
2025-04-15T07:51:55.9163432Z     				https://help.github.com/en/articles/virtual-environments-for-github-actions#github_token-secret
2025-04-15T07:51:55.9163891Z     	
2025-04-15T07:51:55.9164152Z     				Set REVIEWDOG_GITHUB_API_TOKEN with secrets.GITHUB_TOKEN. e.g.
2025-04-15T07:51:55.9164548Z     						REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
2025-04-15T07:51:55.9164851Z     	
2025-04-15T07:51:55.9165055Z     			Option 2) Install reviewdog GitHub Apps
2025-04-15T07:51:55.9165406Z     				1. Install reviewdog Apps. https://github.com/apps/reviewdog
2025-04-15T07:51:55.9165815Z     				2. Set REVIEWDOG_TOKEN or run reviewdog CLI in trusted CI providers.
2025-04-15T07:51:55.9166259Z     				You can get token from https://reviewdog.app/gh/<owner>/<repo-name>.
2025-04-15T07:51:55.9166632Z     				$ export REVIEWDOG_TOKEN="xxxxx"
2025-04-15T07:51:55.9166879Z     	
2025-04-15T07:51:55.9167120Z     				Note: Token is not required if you run reviewdog in Travis CI.
2025-04-15T07:51:55.9167426Z     	
2025-04-15T07:51:55.9167604Z     		"github-pr-check"
2025-04-15T07:51:55.9167906Z     			Same as github-check reporter but it only supports Pull Requests.
2025-04-15T07:51:55.9168230Z     	
2025-04-15T07:51:55.9168410Z     		"github-pr-review"
2025-04-15T07:51:55.9168663Z     			Report results to GitHub review comments.
2025-04-15T07:51:55.9169108Z     	
2025-04-15T07:51:55.9169343Z     			1. Set REVIEWDOG_GITHUB_API_TOKEN environment variable.
2025-04-15T07:51:55.9169829Z     			Go to https://github.com/settings/tokens and create new Personal access token with repo scope.
2025-04-15T07:51:55.9170246Z     	
2025-04-15T07:51:55.9170427Z     			For GitHub Enterprise:
2025-04-15T07:51:55.9170760Z     				$ export GITHUB_API="https://example.githubenterprise.com/api/v3"
2025-04-15T07:51:55.9171239Z     	
2025-04-15T07:51:55.9171541Z     		"gitlab-mr-discussion"
2025-04-15T07:51:55.9171820Z     			Report results to GitLab MergeRequest discussion.
2025-04-15T07:51:55.9172099Z     	
2025-04-15T07:51:55.9172326Z     			1. Set REVIEWDOG_GITLAB_API_TOKEN environment variable.
2025-04-15T07:51:55.9172677Z     			Go to https://gitlab.com/profile/personal_access_tokens
2025-04-15T07:51:55.9172965Z     	
2025-04-15T07:51:55.9173266Z     			CI_API_V4_URL (defined by Gitlab CI) as the base URL for the Gitlab API automatically.
2025-04-15T07:51:55.9173802Z     			Alternatively, GITLAB_API can also be defined, and it will take precedence over the former:
2025-04-15T07:51:55.9174276Z     				$ export GITLAB_API="https://example.gitlab.com/api/v4"
2025-04-15T07:51:55.9174576Z     	
2025-04-15T07:51:55.9174748Z     		"gitlab-mr-commit"
2025-04-15T07:51:55.9175072Z     			Same as gitlab-mr-discussion, but report results to GitLab comments for
2025-04-15T07:51:55.9175439Z     			each commits in Merge Requests.
2025-04-15T07:51:55.9175695Z     	
2025-04-15T07:51:55.9175879Z     		"gerrit-change-review"
2025-04-15T07:51:55.9176135Z     			Report results to Gerrit Change comments.
2025-04-15T07:51:55.9176400Z     	
2025-04-15T07:51:55.9176682Z     			1. Set GERRIT_USERNAME and GERRIT_PASSWORD for basic authentication or
2025-04-15T07:51:55.9177079Z     			GIT_GITCOOKIE_PATH for git cookie based authentication.
2025-04-15T07:51:55.9177482Z     			2. Set GERRIT_CHANGE_ID, GERRIT_REVISION_ID GERRIT_BRANCH and GERRIT_ADDRESS
2025-04-15T07:51:55.9177825Z     	
2025-04-15T07:51:55.9177998Z     			For example:
2025-04-15T07:51:55.9178267Z     				$ export GERRIT_CHANGE_ID=myproject~master~I1293efab014de2
2025-04-15T07:51:55.9178600Z     				$ export GERRIT_REVISION_ID=ed318bf9a3c
2025-04-15T07:51:55.9179044Z     				$ export GERRIT_BRANCH=master
2025-04-15T07:51:55.9179356Z     				$ export GERRIT_ADDRESS=http://localhost:8080
2025-04-15T07:51:55.9179637Z     	
2025-04-15T07:51:55.9179826Z     		"bitbucket-code-report"
2025-04-15T07:51:55.9180106Z     			Create Bitbucket Code Report via Code Insights
2025-04-15T07:51:55.9180500Z     			(https://confluence.atlassian.com/display/BITBUCKET/Code+insights).
2025-04-15T07:51:55.9180874Z     			You can set custom report name with:
2025-04-15T07:51:55.9181125Z     	
2025-04-15T07:51:55.9181435Z     			If running as part of Bitbucket Pipelines no additional configurations is needed.
2025-04-15T07:51:55.9181919Z     			If running outside of Bitbucket Pipelines you need to provide git repo data
2025-04-15T07:51:55.9182382Z     			(see documentation below for local reporters) and BitBucket credentials:
2025-04-15T07:51:55.9182799Z     			- For Basic Auth you need to set following env variables:
2025-04-15T07:51:55.9183127Z     				  BITBUCKET_USER and BITBUCKET_PASSWORD
2025-04-15T07:51:55.9183458Z     			- For AccessToken Auth you need to set BITBUCKET_ACCESS_TOKEN
2025-04-15T07:51:55.9183763Z     	
2025-04-15T07:51:55.9184018Z     			To post results to Bitbucket Server specify BITBUCKET_SERVER_URL.
2025-04-15T07:51:55.9184343Z     	
2025-04-15T07:51:55.9184524Z     		"gitea-pr-review"
2025-04-15T07:51:55.9184766Z     			Report results to Gitea review comments.
2025-04-15T07:51:55.9185020Z     	
2025-04-15T07:51:55.9185244Z     			1. Set REVIEWDOG_GITEA_API_TOKEN environment variable.
2025-04-15T07:51:55.9185771Z     			Go to https://<gitea-server>/user/settings/applications and create new Access Token token with repo scope.
2025-04-15T07:51:55.9186348Z     			2. Set GITEA_ADDRESS environment variable to your Gitea server base address.
2025-04-15T07:51:55.9186708Z     			For example:
2025-04-15T07:51:55.9186940Z     				$ export GITEA_ADDRESS=http://localhost:3000
2025-04-15T07:51:55.9187211Z     	
2025-04-15T07:51:55.9187454Z     		For GitHub Enterprise and self hosted GitLab or Gitea, set
2025-04-15T07:51:55.9187915Z     		REVIEWDOG_INSECURE_SKIP_VERIFY to skip verifying SSL (please use this at your own risk)
2025-04-15T07:51:55.9188345Z     			$ export REVIEWDOG_INSECURE_SKIP_VERIFY=true
2025-04-15T07:51:55.9189046Z     	
2025-04-15T07:51:55.9189349Z     		For non-local reporters, reviewdog automatically get necessary data from
2025-04-15T07:51:55.9189947Z     		environment variable in CI service (GitHub Actions, Travis CI, Circle CI, drone.io, GitLab CI, Bitbucket Pipelines).
2025-04-15T07:51:55.9190531Z     		You can set necessary data with following environment variable manually if
2025-04-15T07:51:55.9190907Z     		you want (e.g. run reviewdog in Jenkins).
2025-04-15T07:51:55.9191164Z     	
2025-04-15T07:51:55.9191405Z     			$ export CI_PULL_REQUEST=14 # Pull Request number (e.g. 14)
2025-04-15T07:51:55.9191798Z     			$ export CI_COMMIT="$(git rev-parse @)" # SHA1 for the current build
2025-04-15T07:51:55.9192177Z     			$ export CI_REPO_OWNER="haya14busa" # repository owner
2025-04-15T07:51:55.9192519Z     			$ export CI_REPO_NAME="reviewdog" # repository name
2025-04-15T07:51:55.9192809Z     	 (default "local")
2025-04-15T07:51:55.9193024Z   -runners string
2025-04-15T07:51:55.9193354Z     	comma separated runners name to run in config file. default: run all runners
2025-04-15T07:51:55.9193741Z   -strip int
2025-04-15T07:51:55.9194170Z     	strip NUM leading components from diff file names (equivalent to 'patch -p') (default is 1 for git diff) (default 1)
2025-04-15T07:51:55.9194639Z   -tee
2025-04-15T07:51:55.9195073Z     	enable "tee"-like mode which outputs tools's output as is while reporting results to -reporter. Useful for debugging as well.
2025-04-15T07:51:55.9195566Z   -version
2025-04-15T07:51:55.9195745Z     	print version
2025-04-15T07:51:55.9195872Z 
2025-04-15T07:51:55.9196030Z See https://github.com/reviewdog/reviewdog for more detail.
2025-04-15T07:51:55.9196565Z ##[endgroup]
