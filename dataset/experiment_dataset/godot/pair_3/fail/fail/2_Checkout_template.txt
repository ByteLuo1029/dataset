##[group]Run <:*:>
with:
fetch-depth: <:NUM:>
repository: <:*:>
token: ***
ssh-strict: true
ssh-user: git
persist-credentials: <:*:>
clean: true
sparse-checkout-cone-mode: true
fetch-tags: false
show-progress: true
lfs: false
submodules: <:*:>
set-safe-directory: true
##[endgroup]
Syncing repository: <:*:>
##[group]Getting Git version info
Working directory is <:*:>
[command]/usr/bin/git version
git version <:NUM:>.<:NUM:>.<:NUM:>
##[endgroup]
Temporarily overriding HOME='/home/runner/work/_temp/c230375e-8ae7-4bf0-94fb-13e2ed349374' before making global git config changes
Adding repository directory to the temporary git global config as a safe directory
[command]/usr/bin/git config --global --add safe.directory /home/runner/work/godot/godot
Deleting the contents of <:*:>
##[group]Initializing the repository
[command]/usr/bin/git init <:*:>
hint: Using 'master' as the name for the initial branch. This default branch name
hint: is subject to change. To configure the initial branch name to use in all
hint: of your new repositories, which will suppress this warning, call:
hint:
hint: git config --global init.defaultBranch <name>
hint:
hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
hint: 'development'. The just-created branch can be renamed via this command:
hint:
hint: git branch -m <name>
Initialized empty Git repository in <:*:>
[command]/usr/bin/git remote add origin <:*:>
##[endgroup]
##[group]Disabling automatic garbage collection
[command]/usr/bin/git config --local gc.auto 0
##[endgroup]
##[group]Setting up auth
[command]/usr/bin/git config --local --name-only --get-regexp <:*:>
[command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp <:*:> && git config --local --unset-all <:*:> || :"
[command]/usr/bin/git config --local --name-only --get-regexp <:*:>
[command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp <:*:> && git config --local --unset-all <:*:> || :"
[command]/usr/bin/git config <:*:> http.https://github.com/.extraheader AUTHORIZATION: basic ***
##[endgroup]
##[group]Fetching the repository
[command]/usr/bin/git -c protocol.version=<:NUM:> fetch <:*:> <:*:> <:*:> <:*:> <:*:> <:*:>
From <:*:>
* [new ref] <:SEQ:>-> <:*:>
##[endgroup]
##[group]Determining the checkout info
##[endgroup]
[command]/usr/bin/git sparse-checkout disable
[command]/usr/bin/git config --local --unset-all extensions.worktreeConfig
##[group]Checking out the ref
[command]/usr/bin/git checkout --progress --force refs/remotes/pull/<:NUM:>/merge
Updating files:  83% (10560/12578)
Updating files:  84% (10566/12578)
Updating files:  85% (10692/12578)
Updating files:  86% (10818/12578)
Updating files:  87% (10943/12578)
Updating files:  88% (11069/12578)
Updating files:  89% (11195/12578)
Updating files:  90% (11321/12578)
Updating files:  91% (11446/12578)
Updating files:  92% (11572/12578)
Updating files:  93% (11698/12578)
Updating files:  94% (11824/12578)
Updating files:  95% (11950/12578)
Updating files:  96% (12075/12578)
Updating files:  97% (12201/12578)
Updating files:  98% (12327/12578)
Updating files:  99% (12453/12578)
Updating files: 100% (12578/12578)
Updating files: 100% (12578/12578), done.
Note: switching to 'refs/remotes/pull/<:NUM:>/merge'.
2025-04-15T06:54:32.3926819Z
You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.
2025-04-15T06:54:32.3929281Z
If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:
2025-04-15T06:54:32.3930737Z
git switch -c <new-branch-name>
2025-04-15T06:54:32.3931206Z
Or undo this operation with:
2025-04-15T06:54:32.3931849Z
git switch -
2025-04-15T06:54:32.3932197Z
Turn off this advice by setting config variable advice.detachedHead to false
2025-04-15T06:54:32.3933045Z
HEAD is now at <:*:> Merge <:SEQ:> into <:SEQ:>
##[endgroup]
[command]/usr/bin/git log <:NUM:> <:*:>
<:SEQ:>
