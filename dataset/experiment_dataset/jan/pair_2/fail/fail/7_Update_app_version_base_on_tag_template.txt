##[group]Run echo "Version: 0.5.16-1268"
[36;1mecho "Version: 0.5.16-1268"[0m
[36;1m# Update the version in electron/package.json[0m
[36;1mjq --arg version "0.5.16-1268" '.version = $version' electron/package.json > /tmp/package.json[0m
[36;1mmv /tmp/package.json electron/package.json[0m
[36;1m[0m
[36;1mjq --arg version "0.5.16-1268" '.version = $version' web/package.json > /tmp/package.json[0m
[36;1mmv /tmp/package.json web/package.json[0m
[36;1m[0m
[36;1mjq '.build.publish = [{"provider": "generic", "url": "https://delta.jan.ai/nightly", "channel": "latest"}, {"provider": "s3", "acl": null, "bucket": "***", "region": "***", "path": "temp-nightly", "channel": "latest"}]' electron/package.json > /tmp/package.json[0m
[36;1mmv /tmp/package.json electron/package.json[0m
[36;1m[0m
[36;1mjq '.build.win.sign = "./sign.js"' electron/package.json > /tmp/package.json[0m
[36;1mmv /tmp/package.json electron/package.json[0m
[36;1mcat electron/package.json[0m
[36;1m[0m
[36;1mchmod +x .github/scripts/rename-app.sh[0m
[36;1m.github/scripts/rename-app.sh ./electron/package.json nightly[0m
[36;1mchmod +x .github/scripts/rename-workspace.sh[0m
[36;1m.github/scripts/rename-workspace.sh ./package.json nightly[0m
[36;1mchmod +x .github/scripts/rename-uninstaller.sh[0m
[36;1m.github/scripts/rename-uninstaller.sh nightly[0m
[<:NUM:>;1mecho <:*:>
[36;1mcat ./electron/package.json[0m
[<:NUM:>;1mecho <:*:>
[36;1mcat ./package.json[0m
[<:NUM:>;1mecho <:*:>
shell: C:\Program Files\Git\bin\bash.EXE --noprofile --norc -e -o pipefail {0}
##[endgroup]
Version: 0.5.16-1268
{
"name": "jan",
"version": "0.5.16-1268",
"main": "./build/main.js",
"author": "Jan <service@jan.ai>",
"license": "MIT",
"productName": "Jan",
"homepage": "https://github.com/menloresearch/jan/tree/main/electron",
"description": "Use offline LLMs with your own data. Run open source models like Llama2 or Falcon on your internal computers/servers.",
"build": {
"appId": "jan.ai.app",
"productName": "Jan",
"files": [
"renderer/**/*",
"build/**/*.{js,map}",
"pre-install",
"themes",
"scripts/**/*",
"icons/**/*",
"themes",
"shared"
],
"asarUnpack": [
"pre-install",
"themes",
"docs",
"scripts",
"icons",
"themes",
"shared"
],
"publish": [
{
"provider": "generic",
"url": "https://delta.jan.ai/nightly",
"channel": "latest"
},
{
"provider": "s3",
"acl": null,
"bucket": "***",
"region": "***",
"path": "temp-nightly",
"channel": "latest"
}
],
"extends": null,
"mac": {
"type": "distribution",
"entitlements": "./entitlements.mac.plist",
"entitlementsInherit": "./entitlements.mac.plist",
"notarize": {
"teamId": "F8AH6NHVY5"
},
"icon": "icons/icon.png"
},
"linux": {
"target": [
"deb"
],
"category": "Utility",
"icon": "icons/"
},
"win": {
"icon": "icons/icon.png",
"target": [
"nsis"
],
"sign": "./sign.js"
},
"nsis": {
"oneClick": true,
"installerIcon": "icons/icon.ico",
"uninstallerIcon": "icons/icon.ico",
"include": "scripts/uninstaller.nsh",
<:*:> true
},
"protocols": [
{
"name": "Jan",
"schemes": [
"jan"
]
}
],
"artifactName": "jan-${os}-${arch}-${version}.${ext}"
},
"scripts": {
"lint": "eslint . --ext \".js,.jsx,.ts,.tsx\"",
"test:e2e": "DEBUG=pw:browser xvfb-maybe -- playwright test --workers=1",
"copy:assets": "rimraf --glob \"./pre-install/*.tgz\" && cpx \"../pre-install/*.tgz\" \"./pre-install\"",
"version-patch": "run-script-os",
"version-patch:darwin:linux": "jq '.version' package.json | tr -d '\"' > .version.bak && jq --arg ver \"0.1.$(date +%s)\" '.version = $ver' package.json > package.tmp && mv package.tmp package.json",
"version-patch:win32": "node -e \"const fs=require('fs');const pkg=require('./package.json');const bak=pkg.version;fs.writeFileSync('.version.bak',bak);pkg.version='0.1.'+Math.floor(Date.now()/1000);fs.writeFileSync('package.json',JSON.stringify(pkg,null,2));\"",
"version-restore": "run-script-os",
"version-restore:darwin:linux": "jq --arg ver $(cat .version.bak) '.version = $ver' package.json > package.tmp && mv package.tmp package.json && rm .version.bak",
"version-restore:win32": "node -e \"const fs=require('fs');const pkg=require('./package.json');const bak=fs.readFileSync('.version.bak','utf8');pkg.version=bak;fs.writeFileSync('package.json',JSON.stringify(pkg,null,2));\"",
"dev:darwin:linux": "yarn copy:assets && tsc -p . && yarn version-patch && electron . && yarn version-restore",
"dev:windows": "yarn copy:assets && tsc -p . && electron .",
"dev": "run-script-os",
"compile": "tsc -p .",
"start": "electron .",
"build": "yarn copy:assets && run-script-os",
"build:test": "yarn copy:assets && run-script-os",
"build:test:darwin": "tsc -p . && electron-builder -p never -m --dir",
"build:test:win32": "tsc -p . && electron-builder -p never -w --dir",
"build:test:linux": "tsc -p . && electron-builder -p never -l --dir",
"build:darwin": "tsc -p . && electron-builder -p never -m --universal",
"build:win32": "tsc -p . && electron-builder -p never -w",
"build:linux": "tsc -p . && electron-builder -p never -l deb -l AppImage",
"build:publish": "yarn copy:assets && run-script-os",
"build:publish:darwin": "tsc -p . && electron-builder -p always -m --universal",
"build:publish:win32": "tsc -p . && electron-builder -p always -w",
"build:publish:linux": "tsc -p . && electron-builder -p always -l deb -l AppImage"
},
"dependencies": {
"@alumna/reflect": "^1.1.3",
"@janhq/core": "link:../core",
"@janhq/server": "link:../server",
"@kirillvakalov/nut-tree__nut-js": "4.2.1-2",
"@npmcli/arborist": "^7.1.0",
"electron-store": "^8.1.0",
"electron-updater": "^6.1.7",
"fs-extra": "^11.2.0",
"pacote": "^21.0.0",
"request": "^2.88.2",
"request-progress": "^3.0.0",
"ulidx": "^2.3.0"
},
"devDependencies": {
"@electron/notarize": "^2.5.0",
"@playwright/test": "^1.38.1",
"@reportportal/agent-js-playwright": "^5.1.7",
"@types/npmcli__arborist": "^5.6.4",
"@types/pacote": "^11.1.7",
"@types/request": "^2.48.12",
"@typescript-eslint/eslint-plugin": "^6.7.3",
"@typescript-eslint/parser": "^6.7.3",
"electron": "30.0.6",
"electron-builder": "^24.13.3",
"electron-builder-squirrel-windows": "^24.13.3",
"electron-devtools-installer": "^3.2.0",
"electron-playwright-helpers": "^1.6.0",
"eslint": "8.57.0",
"eslint-plugin-react": "^7.34.0",
"rimraf": "^5.0.5",
"run-script-os": "^1.1.6",
"typescript": "^5.3.3",
"xvfb-maybe": "^0.2.1"
},
"installConfig": {
"hoistingLimits": "workspaces"
},
"packageManager": "yarn@4.5.3"
}
{
"name": "jan-nightly",
"version": "0.5.16-1268",
"main": "./build/main.js",
"author": "Jan <service@jan.ai>",
"license": "MIT",
"productName": "Jan-nightly",
"homepage": "https://github.com/menloresearch/jan/tree/main/electron",
"description": "Use offline LLMs with your own data. Run open source models like Llama2 or Falcon on your internal computers/servers.",
"build": {
"appId": "jan-nightly.ai.app",
"productName": "Jan-nightly",
"files": [
"renderer/**/*",
"build/**/*.{js,map}",
"pre-install",
"themes",
"scripts/**/*",
"icons/**/*",
"themes",
"shared"
],
"asarUnpack": [
"pre-install",
"themes",
"docs",
"scripts",
"icons",
"themes",
"shared"
],
"publish": [
{
"provider": "generic",
"url": "https://delta.jan.ai/nightly",
"channel": "latest"
},
{
"provider": "s3",
"acl": null,
"bucket": "***",
"region": "***",
"path": "temp-nightly",
"channel": "latest"
}
],
"extends": null,
"mac": {
"type": "distribution",
"entitlements": "./entitlements.mac.plist",
"entitlementsInherit": "./entitlements.mac.plist",
"notarize": {
"teamId": "F8AH6NHVY5"
},
"icon": "icons/icon.png"
},
"linux": {
"target": [
"deb"
],
"category": "Utility",
"icon": "icons/"
},
"win": {
"icon": "icons/icon.png",
"target": [
"nsis"
],
"sign": "./sign.js"
},
"nsis": {
"oneClick": true,
"installerIcon": "icons/icon.ico",
"uninstallerIcon": "icons/icon.ico",
"include": "scripts/uninstaller.nsh",
<:*:> true
},
"protocols": [
{
"name": "Jan-nightly",
"schemes": [
"jan-nightly"
]
}
],
"artifactName": "jan-nightly-${os}-${arch}-${version}.${ext}"
},
"scripts": {
"lint": "eslint . --ext \".js,.jsx,.ts,.tsx\"",
"test:e2e": "DEBUG=pw:browser xvfb-maybe -- playwright test --workers=1",
"copy:assets": "rimraf --glob \"./pre-install/*.tgz\" && cpx \"../pre-install/*.tgz\" \"./pre-install\"",
"version-patch": "run-script-os",
"version-patch:darwin:linux": "jq '.version' package.json | tr -d '\"' > .version.bak && jq --arg ver \"0.1.$(date +%s)\" '.version = $ver' package.json > package.tmp && mv package.tmp package.json",
"version-patch:win32": "node -e \"const fs=require('fs');const pkg=require('./package.json');const bak=pkg.version;fs.writeFileSync('.version.bak',bak);pkg.version='0.1.'+Math.floor(Date.now()/1000);fs.writeFileSync('package.json',JSON.stringify(pkg,null,2));\"",
"version-restore": "run-script-os",
"version-restore:darwin:linux": "jq --arg ver $(cat .version.bak) '.version = $ver' package.json > package.tmp && mv package.tmp package.json && rm .version.bak",
"version-restore:win32": "node -e \"const fs=require('fs');const pkg=require('./package.json');const bak=fs.readFileSync('.version.bak','utf8');pkg.version=bak;fs.writeFileSync('package.json',JSON.stringify(pkg,null,2));\"",
"dev:darwin:linux": "yarn copy:assets && tsc -p . && yarn version-patch && electron . && yarn version-restore",
"dev:windows": "yarn copy:assets && tsc -p . && electron .",
"dev": "run-script-os",
"compile": "tsc -p .",
"start": "electron .",
"build": "yarn copy:assets && run-script-os",
"build:test": "yarn copy:assets && run-script-os",
"build:test:darwin": "tsc -p . && electron-builder -p never -m --dir",
"build:test:win32": "tsc -p . && electron-builder -p never -w --dir",
"build:test:linux": "tsc -p . && electron-builder -p never -l --dir",
"build:darwin": "tsc -p . && electron-builder -p never -m --universal",
"build:win32": "tsc -p . && electron-builder -p never -w",
"build:linux": "tsc -p . && electron-builder -p never -l deb -l AppImage",
"build:publish": "yarn copy:assets && run-script-os",
"build:publish:darwin": "tsc -p . && electron-builder -p always -m --universal",
"build:publish:win32": "tsc -p . && electron-builder -p always -w",
"build:publish:linux": "tsc -p . && electron-builder -p always -l deb -l AppImage"
},
"dependencies": {
"@alumna/reflect": "^1.1.3",
"@janhq/core": "link:../core",
"@janhq/server": "link:../server",
"@kirillvakalov/nut-tree__nut-js": "4.2.1-2",
"@npmcli/arborist": "^7.1.0",
"electron-store": "^8.1.0",
"electron-updater": "^6.1.7",
"fs-extra": "^11.2.0",
"pacote": "^21.0.0",
"request": "^2.88.2",
"request-progress": "^3.0.0",
"ulidx": "^2.3.0"
},
"devDependencies": {
"@electron/notarize": "^2.5.0",
"@playwright/test": "^1.38.1",
"@reportportal/agent-js-playwright": "^5.1.7",
"@types/npmcli__arborist": "^5.6.4",
"@types/pacote": "^11.1.7",
"@types/request": "^2.48.12",
"@typescript-eslint/eslint-plugin": "^6.7.3",
"@typescript-eslint/parser": "^6.7.3",
"electron": "30.0.6",
"electron-builder": "^24.13.3",
"electron-builder-squirrel-windows": "^24.13.3",
"electron-devtools-installer": "^3.2.0",
"electron-playwright-helpers": "^1.6.0",
"eslint": "8.57.0",
"eslint-plugin-react": "^7.34.0",
"rimraf": "^5.0.5",
"run-script-os": "^1.1.6",
"typescript": "^5.3.3",
"xvfb-maybe": "^0.2.1"
},
"installConfig": {
"hoistingLimits": "workspaces"
},
"packageManager": "yarn@4.5.3"
}
File has been updated: web/app/layout.tsx
File has been updated: ./package.json
File has been updated: electron/scripts/uninstaller.nsh
------------------------
{
"name": "jan-nightly",
"version": "0.5.16-1268",
"main": "./build/main.js",
"author": "Jan <service@jan.ai>",
"license": "MIT",
"productName": "Jan-nightly",
"homepage": "https://github.com/menloresearch/jan/tree/main/electron",
"description": "Use offline LLMs with your own data. Run open source models like Llama2 or Falcon on your internal computers/servers.",
"build": {
"appId": "jan-nightly.ai.app",
"productName": "Jan-nightly",
"files": [
"renderer/**/*",
"build/**/*.{js,map}",
"pre-install",
"themes",
"scripts/**/*",
"icons/**/*",
"themes",
"shared"
],
"asarUnpack": [
"pre-install",
"themes",
"docs",
"scripts",
"icons",
"themes",
"shared"
],
"publish": [
{
"provider": "generic",
"url": "https://delta.jan.ai/nightly",
"channel": "latest"
},
{
"provider": "s3",
"acl": null,
"bucket": "***",
"region": "***",
"path": "temp-nightly",
"channel": "latest"
}
],
"extends": null,
"mac": {
"type": "distribution",
"entitlements": "./entitlements.mac.plist",
"entitlementsInherit": "./entitlements.mac.plist",
"notarize": {
"teamId": "F8AH6NHVY5"
},
"icon": "icons/icon.png"
},
"linux": {
"target": [
"deb"
],
"category": "Utility",
"icon": "icons/"
},
"win": {
"icon": "icons/icon.png",
"target": [
"nsis"
],
"sign": "./sign.js"
},
"nsis": {
"oneClick": true,
"installerIcon": "icons/icon.ico",
"uninstallerIcon": "icons/icon.ico",
"include": "scripts/uninstaller.nsh",
<:*:> true
},
"protocols": [
{
"name": "Jan-nightly",
"schemes": [
"jan-nightly"
]
}
],
"artifactName": "jan-nightly-${os}-${arch}-${version}.${ext}"
},
"scripts": {
"lint": "eslint . --ext \".js,.jsx,.ts,.tsx\"",
"test:e2e": "DEBUG=pw:browser xvfb-maybe -- playwright test --workers=1",
"copy:assets": "rimraf --glob \"./pre-install/*.tgz\" && cpx \"../pre-install/*.tgz\" \"./pre-install\"",
"version-patch": "run-script-os",
"version-patch:darwin:linux": "jq '.version' package.json | tr -d '\"' > .version.bak && jq --arg ver \"0.1.$(date +%s)\" '.version = $ver' package.json > package.tmp && mv package.tmp package.json",
"version-patch:win32": "node -e \"const fs=require('fs');const pkg=require('./package.json');const bak=pkg.version;fs.writeFileSync('.version.bak',bak);pkg.version='0.1.'+Math.floor(Date.now()/1000);fs.writeFileSync('package.json',JSON.stringify(pkg,null,2));\"",
"version-restore": "run-script-os",
"version-restore:darwin:linux": "jq --arg ver $(cat .version.bak) '.version = $ver' package.json > package.tmp && mv package.tmp package.json && rm .version.bak",
"version-restore:win32": "node -e \"const fs=require('fs');const pkg=require('./package.json');const bak=fs.readFileSync('.version.bak','utf8');pkg.version=bak;fs.writeFileSync('package.json',JSON.stringify(pkg,null,2));\"",
"dev:darwin:linux": "yarn copy:assets && tsc -p . && yarn version-patch && electron . && yarn version-restore",
"dev:windows": "yarn copy:assets && tsc -p . && electron .",
"dev": "run-script-os",
"compile": "tsc -p .",
"start": "electron .",
"build": "yarn copy:assets && run-script-os",
"build:test": "yarn copy:assets && run-script-os",
"build:test:darwin": "tsc -p . && electron-builder -p never -m --dir",
"build:test:win32": "tsc -p . && electron-builder -p never -w --dir",
"build:test:linux": "tsc -p . && electron-builder -p never -l --dir",
"build:darwin": "tsc -p . && electron-builder -p never -m --universal",
"build:win32": "tsc -p . && electron-builder -p never -w",
"build:linux": "tsc -p . && electron-builder -p never -l deb -l AppImage",
"build:publish": "yarn copy:assets && run-script-os",
"build:publish:darwin": "tsc -p . && electron-builder -p always -m --universal",
"build:publish:win32": "tsc -p . && electron-builder -p always -w",
"build:publish:linux": "tsc -p . && electron-builder -p always -l deb -l AppImage"
},
"dependencies": {
"@alumna/reflect": "^1.1.3",
"@janhq/core": "link:../core",
"@janhq/server": "link:../server",
"@kirillvakalov/nut-tree__nut-js": "4.2.1-2",
"@npmcli/arborist": "^7.1.0",
"electron-store": "^8.1.0",
"electron-updater": "^6.1.7",
"fs-extra": "^11.2.0",
"pacote": "^21.0.0",
"request": "^2.88.2",
"request-progress": "^3.0.0",
"ulidx": "^2.3.0"
},
"devDependencies": {
"@electron/notarize": "^2.5.0",
"@playwright/test": "^1.38.1",
"@reportportal/agent-js-playwright": "^5.1.7",
"@types/npmcli__arborist": "^5.6.4",
"@types/pacote": "^11.1.7",
"@types/request": "^2.48.12",
"@typescript-eslint/eslint-plugin": "^6.7.3",
"@typescript-eslint/parser": "^6.7.3",
"electron": "30.0.6",
"electron-builder": "^24.13.3",
"electron-builder-squirrel-windows": "^24.13.3",
"electron-devtools-installer": "^3.2.0",
"electron-playwright-helpers": "^1.6.0",
"eslint": "8.57.0",
"eslint-plugin-react": "^7.34.0",
"rimraf": "^5.0.5",
"run-script-os": "^1.1.6",
"typescript": "^5.3.3",
"xvfb-maybe": "^0.2.1"
},
"installConfig": {
"hoistingLimits": "workspaces"
},
"packageManager": "yarn@4.5.3"
}
------------------------
{
"name": "jan-app",
"private": true,
"workspaces": {
"packages": [
"joi",
"core",
"electron",
"web",
"server"
]
},
"scripts": {
"lint": "yarn workspace jan-nightly lint && yarn workspace @janhq/web lint",
"test:unit": "jest",
"test:coverage": "jest --coverage",
"test": "yarn workspace jan-nightly test:e2e",
"test-local": "yarn lint && yarn build:test && yarn test",
"copy:assets": "cpx \"pre-install/*.tgz\" \"electron/pre-install/\" && cpx \"themes/**\" \"electron/themes\"",
"copy:assets:tauri": "cpx \"pre-install/*.tgz\" \"src-tauri/resources/pre-install/\" && cpx \"themes/**\" \"src-tauri/resources/themes\"",
"dev:electron": "yarn copy:assets && yarn workspace jan-nightly dev",
"dev:web:standalone": "concurrently \"yarn workspace @janhq/web dev\" \"wait-on http://localhost:3000 && rsync -av --prune-empty-dirs --include '*/' --include 'dist/***' --include 'package.json' --include 'tsconfig.json' --exclude '*' ./extensions/ web/.next/static/extensions/\"",
"dev:web": "yarn workspace @janhq/web dev",
"dev:server": "yarn workspace @janhq/server dev",
"dev": "concurrently -n \"NEXT,ELECTRON\" -c \"yellow,blue\" --kill-others \"yarn dev:web\" \"yarn dev:electron\"",
"install:cortex:linux:darwin": "cd src-tauri/binaries && ./download.sh",
"install:cortex:win32": "cd src-tauri/binaries && download.bat",
"install:cortex": "run-script-os",
"dev:tauri": "yarn build:icon && yarn copy:assets:tauri && tauri dev",
"build:tauri": "yarn install:cortex && yarn build:icon && yarn copy:assets:tauri && yarn tauri build",
"build:icon": "tauri icon ./src-tauri/icons/icon.png",
"build:server": "cd server && yarn build",
"build:core": "cd core && yarn build && yarn pack",
"build:web": "yarn workspace @janhq/web build && cpx \"web/out/**\" \"electron/renderer/\"",
"build:electron": "yarn copy:assets && yarn workspace jan-nightly build",
"build:electron:test": "yarn workspace jan-nightly build:test",
"build:extensions": "rimraf ./pre-install/*.tgz || true && yarn workspace @janhq/core build && cd extensions && yarn install && yarn workspaces foreach -Apt run build:publish",
"build:test": "yarn copy:assets && yarn workspace @janhq/web build && cpx \"web/out/**\" \"electron/renderer/\" && yarn workspace jan-nightly build:test",
"build": "yarn build:web && yarn build:tauri",
"build:publish": "yarn copy:assets && yarn build:web && yarn workspace jan-nightly build:publish",
"dev:joi": "yarn workspace @janhq/joi install && yarn workspace @janhq/joi dev",
"build:joi": "yarn workspace @janhq/joi build",
"prepare": "husky"
},
"devDependencies": {
"@tauri-apps/cli": "^2.2.5",
"concurrently": "^9.1.0",
"cpx": "^1.5.0",
"husky": "^9.1.5",
"jest": "^29.7.0",
"jest-environment-jsdom": "^29.7.0",
"rimraf": "^3.0.2",
"run-script-os": "^1.1.6",
"wait-on": "^7.0.1"
},
"version": "0.0.0",
"installConfig": {
"hoistingLimits": "workspaces"
},
"resolutions": {
"yallist": "4.0.0"
},
"packageManager": "yarn@4.5.3"
}
------------------------
