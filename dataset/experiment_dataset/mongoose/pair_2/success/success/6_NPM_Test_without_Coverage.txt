2025-04-03T23:44:05.0414386Z ##[group]Run npm test
2025-04-03T23:44:05.0414775Z [36;1mnpm test[0m
2025-04-03T23:44:05.0485658Z shell: /usr/bin/bash -e {0}
2025-04-03T23:44:05.0485899Z env:
2025-04-03T23:44:05.0486081Z   MONGOMS_VERSION: 7.0.12
2025-04-03T23:44:05.0486314Z   MONGOMS_PREFER_GLOBAL_PATH: 1
2025-04-03T23:44:05.0486541Z   FORCE_COLOR: true
2025-04-03T23:44:05.0486723Z ##[endgroup]
2025-04-03T23:44:05.2027577Z 
2025-04-03T23:44:05.2027955Z > mongoose@8.13.2 test
2025-04-03T23:44:05.2028629Z > mocha --exit ./test/*.test.js
2025-04-03T23:44:05.2028924Z 
2025-04-03T23:44:05.8583564Z [31m
2025-04-03T23:44:05.8584116Z You're not testing shards!
2025-04-03T23:44:05.8584823Z Please set the MONGOOSE_SHARD_TEST_URI env variable.
2025-04-03T23:44:05.8585984Z e.g: `mongodb://127.0.0.1:27017/database
2025-04-03T23:44:05.8586716Z Sharding must already be enabled on your database
2025-04-03T23:44:05.8587345Z [39m
2025-04-03T23:44:06.1547348Z 
2025-04-03T23:44:06.1596823Z [0m[0m
2025-04-03T23:44:06.2298467Z [0m  aggregate: [0m
2025-04-03T23:44:06.2542713Z   [32m  [32mâœ”[39m[0m[90m cursor (gh-3160)[0m
2025-04-03T23:44:06.2693576Z   [32m  [32mâœ”[39m[0m[90m catch() (gh-7267)[0m
2025-04-03T23:44:06.2777340Z   [32m  [32mâœ”[39m[0m[90m cursor() without options (gh-3855)[0m
2025-04-03T23:44:06.2861736Z   [32m  [32mâœ”[39m[0m[90m cursor() with useMongooseAggCursor (gh-5145)[0m
2025-04-03T23:44:06.3049860Z   [32m  [32mâœ”[39m[0m[90m cursor() with useMongooseAggCursor works (gh-5145) (gh-5394)[0m
2025-04-03T23:44:06.4352234Z   [32m  [32mâœ”[39m[0m[90m cursor() eachAsync (gh-4300)[0m[31m (121ms)[0m
2025-04-03T23:44:06.5607935Z   [32m  [32mâœ”[39m[0m[90m cursor() eachAsync with options (parallel)[0m[31m (123ms)[0m
2025-04-03T23:44:06.5640927Z   [32m  [32mâœ”[39m[0m[90m is now a proper aggregate cursor vs what it was before gh-10410[0m
2025-04-03T23:44:06.5869963Z   [32m  [32mâœ”[39m[0m[90m query by document (gh-4866)[0m
2025-04-03T23:44:06.6040807Z   [32m  [32mâœ”[39m[0m[90m sort by text score (gh-5258)[0m
2025-04-03T23:44:06.6284806Z   [32m  [32mâœ”[39m[0m[90m cursor supports transform option (gh-14331)[0m
2025-04-03T23:44:06.6427984Z   [32m  [32mâœ”[39m[0m[90m should not throw error if database connection has not been established (gh-13125)[0m
2025-04-03T23:44:06.6492443Z   [32m  [32mâœ”[39m[0m[90m throws error if calling near() with empty coordinates (gh-15188)[0m
2025-04-03T23:44:06.6769292Z   [32m  [32mâœ”[39m[0m[90m cursor() errors out if schema pre aggregate hook throws an error (gh-15279)[0m
2025-04-03T23:44:06.6862977Z [0m    append[0m
2025-04-03T23:44:06.6866888Z     [32m  [32mâœ”[39m[0m[90m (pipeline)[0m
2025-04-03T23:44:06.6895833Z     [32m  [32mâœ”[39m[0m[90m supports array as single argument[0m
2025-04-03T23:44:06.6919262Z     [32m  [32mâœ”[39m[0m[90m throws if non-operator parameter is passed[0m
2025-04-03T23:44:06.6945559Z     [32m  [32mâœ”[39m[0m[90m does not throw when 0 args passed[0m
2025-04-03T23:44:06.6969100Z     [32m  [32mâœ”[39m[0m[90m does not throw when empty array is passed as single argument[0m
2025-04-03T23:44:06.6991937Z [0m    project[0m
2025-04-03T23:44:06.6996011Z     [32m  [32mâœ”[39m[0m[90m (object)[0m
2025-04-03T23:44:06.7021050Z     [32m  [32mâœ”[39m[0m[90m (string)[0m
2025-04-03T23:44:06.7047013Z     [32m  [32mâœ”[39m[0m[90m ("a","b","c")[0m
2025-04-03T23:44:06.7073452Z     [32m  [32mâœ”[39m[0m[90m ["a","b","c"][0m
2025-04-03T23:44:06.7096760Z [0m    group[0m
2025-04-03T23:44:06.7099826Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:06.7120898Z [0m    skip[0m
2025-04-03T23:44:06.7123314Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:06.7144581Z [0m    limit[0m
2025-04-03T23:44:06.7147124Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:06.7170782Z [0m    unwind[0m
2025-04-03T23:44:06.7174765Z     [32m  [32mâœ”[39m[0m[90m ("field")[0m
2025-04-03T23:44:06.7195910Z [0m    match[0m
2025-04-03T23:44:06.7198261Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:06.7219526Z [0m    sort[0m
2025-04-03T23:44:06.7222716Z     [32m  [32mâœ”[39m[0m[90m (object)[0m
2025-04-03T23:44:06.7247147Z     [32m  [32mâœ”[39m[0m[90m (string)[0m
2025-04-03T23:44:06.7269818Z     [32m  [32mâœ”[39m[0m[90m ("a","b","c")[0m
2025-04-03T23:44:06.7300406Z     [32m  [32mâœ”[39m[0m[90m ["a","b","c"][0m
2025-04-03T23:44:06.7327294Z [0m    near[0m
2025-04-03T23:44:06.7331187Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:06.7355606Z     [32m  [32mâœ”[39m[0m[90m works with discriminators (gh-3304)[0m
2025-04-03T23:44:06.7377020Z [0m    lookup[0m
2025-04-03T23:44:06.7380276Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:06.7401510Z [0m    unionWith[0m
2025-04-03T23:44:06.7403554Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:06.7430764Z [0m    sample[0m
2025-04-03T23:44:06.7433098Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:06.7457438Z [0m    densify[0m
2025-04-03T23:44:06.7460004Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:06.7481535Z [0m    fill[0m
2025-04-03T23:44:06.7484094Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:06.7508094Z [0m    model()[0m
2025-04-03T23:44:06.7510348Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:06.7531213Z [0m    redact[0m
2025-04-03T23:44:06.7534179Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:06.7557967Z     [32m  [32mâœ”[39m[0m[90m works with (condition, string, string)[0m
2025-04-03T23:44:06.7581506Z [0m    Mongo 3.4 operators[0m
2025-04-03T23:44:06.7784331Z [0m      graphLookup[0m
2025-04-03T23:44:06.7788398Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:06.7814066Z       [32m  [32mâœ”[39m[0m[90m automatically prepends $ to the startWith field[0m
2025-04-03T23:44:06.7838982Z       [32m  [32mâœ”[39m[0m[90m Throws if no options are passed to graphLookup[0m
2025-04-03T23:44:06.7867585Z [0m      addFields[0m
2025-04-03T23:44:06.7870526Z       [32m  [32mâœ”[39m[0m[90m should throw if passed a non object[0m
2025-04-03T23:44:06.7891507Z       [32m  [32mâœ”[39m[0m[90m should throw if passed null[0m
2025-04-03T23:44:06.7912207Z       [32m  [32mâœ”[39m[0m[90m should throw if passed an Array[0m
2025-04-03T23:44:06.7934842Z       [32m  [32mâœ”[39m[0m[90m (object)[0m
2025-04-03T23:44:06.7954742Z [0m      facet[0m
2025-04-03T23:44:06.7961014Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:06.7984627Z [0m      replaceRoot[0m
2025-04-03T23:44:06.7987182Z       [32m  [32mâœ”[39m[0m[90m works with a string[0m
2025-04-03T23:44:06.8005323Z       [32m  [32mâœ”[39m[0m[90m works with an object (gh-6474)[0m
2025-04-03T23:44:06.8021764Z [0m      count[0m
2025-04-03T23:44:06.8023826Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:06.8045302Z [0m      sortByCount[0m
2025-04-03T23:44:06.8047977Z       [32m  [32mâœ”[39m[0m[90m works with a string argument[0m
2025-04-03T23:44:06.8070267Z       [32m  [32mâœ”[39m[0m[90m works with an object argument[0m
2025-04-03T23:44:06.8088452Z       [32m  [32mâœ”[39m[0m[90m throws if the argument is neither a string or object[0m
2025-04-03T23:44:06.8107954Z [0m    exec[0m
2025-04-03T23:44:06.8321433Z     [32m  [32mâœ”[39m[0m[90m project[0m
2025-04-03T23:44:06.8745330Z     [32m  [32mâœ”[39m[0m[90m group[0m
2025-04-03T23:44:06.9073353Z     [32m  [32mâœ”[39m[0m[90m skip[0m
2025-04-03T23:44:06.9371298Z     [32m  [32mâœ”[39m[0m[90m limit[0m
2025-04-03T23:44:06.9677987Z     [32m  [32mâœ”[39m[0m[90m unwind[0m
2025-04-03T23:44:06.9925425Z     [32m  [32mâœ”[39m[0m[90m unwind with obj[0m
2025-04-03T23:44:07.0188003Z     [32m  [32mâœ”[39m[0m[90m unwind throws with bad arg[0m
2025-04-03T23:44:07.0464269Z     [32m  [32mâœ”[39m[0m[90m match[0m
2025-04-03T23:44:07.0765777Z     [32m  [32mâœ”[39m[0m[90m sort[0m
2025-04-03T23:44:07.1211429Z     [32m  [32mâœ”[39m[0m[90m graphLookup[0m
2025-04-03T23:44:07.1653429Z     [32m  [32mâœ”[39m[0m[90m facet[0m
2025-04-03T23:44:07.1921275Z     [32m  [32mâœ”[39m[0m[90m complex pipeline[0m
2025-04-03T23:44:07.2181412Z     [32m  [32mâœ”[39m[0m[90m pipeline() (gh-5825)[0m
2025-04-03T23:44:07.2547855Z     [32m  [32mâœ”[39m[0m[90m explain()[0m
2025-04-03T23:44:07.3943953Z     [32m  [32mâœ”[39m[0m[90m handles aggregation options[0m
2025-04-03T23:44:07.4229360Z     [32m  [32mâœ”[39m[0m[90m readPref from schema (gh-5522)[0m
2025-04-03T23:44:07.4300109Z [0m      error when empty pipeline[0m
2025-04-03T23:44:07.4547185Z       [32m  [32mâœ”[39m[0m[90m without a callback[0m
2025-04-03T23:44:07.4568549Z [0m      error when not bound to a model[0m
2025-04-03T23:44:07.4870408Z       [32m  [32mâœ”[39m[0m[90m with callback[0m
2025-04-03T23:44:07.4892382Z [0m      middleware (gh-5251)[0m
2025-04-03T23:44:07.5135224Z       [32m  [32mâœ”[39m[0m[90m pre[0m
2025-04-03T23:44:07.5593339Z       [32m  [32mâœ”[39m[0m[90m setting option in pre (gh-7606)[0m
2025-04-03T23:44:07.6017885Z       [32m  [32mâœ”[39m[0m[90m adding to pipeline in pre (gh-8017)[0m
2025-04-03T23:44:07.6309444Z       [32m  [32mâœ”[39m[0m[90m post[0m
2025-04-03T23:44:07.6603693Z       [32m  [32mâœ”[39m[0m[90m error handler with agg error[0m
2025-04-03T23:44:07.6990608Z       [32m  [32mâœ”[39m[0m[90m error handler with pre error[0m
2025-04-03T23:44:07.7385741Z       [32m  [32mâœ”[39m[0m[90m with agg cursor[0m
2025-04-03T23:44:07.7753757Z       [32m  [32mâœ”[39m[0m[90m with explain() (gh-5887)[0m
2025-04-03T23:44:07.7814086Z [0m    Mongo 3.6 options[0m
2025-04-03T23:44:07.8012109Z     [32m  [32mâœ”[39m[0m[90m adds hint option[0m
2025-04-03T23:44:07.8062589Z 
2025-04-03T23:44:07.8063267Z [0m  BigInt[0m
2025-04-03T23:44:07.8078198Z   [32m  [32mâœ”[39m[0m[90m is a valid schema type[0m
2025-04-03T23:44:07.8086164Z   [32m  [32mâœ”[39m[0m[90m casting from strings and numbers[0m
2025-04-03T23:44:07.8109523Z   [32m  [32mâœ”[39m[0m[90m handles cast errors[0m
2025-04-03T23:44:07.8128563Z   [32m  [32mâœ”[39m[0m[90m supports required[0m
2025-04-03T23:44:07.8129485Z [0m    MongoDB integration[0m
2025-04-03T23:44:07.8339976Z     [32m  [32mâœ”[39m[0m[90m is stored as a long in MongoDB[0m
2025-04-03T23:44:07.8366404Z     [32m  [32mâœ”[39m[0m[90m becomes a bigint with lean using useBigInt64[0m
2025-04-03T23:44:07.8429794Z     [32m  [32mâœ”[39m[0m[90m can query with comparison operators[0m
2025-04-03T23:44:07.8679249Z     [32m  [32mâœ”[39m[0m[90m supports populate()[0m
2025-04-03T23:44:07.8688576Z 
2025-04-03T23:44:07.8688989Z [0m  browser[0m
2025-04-03T23:44:07.9771203Z   [32m  [32mâœ”[39m[0m[90m require() works with no other require calls (gh-5842)[0m[31m (108ms)[0m
2025-04-03T23:44:08.0872124Z   [32m  [32mâœ”[39m[0m[90m using schema (gh-7170)[0m[31m (109ms)[0m
2025-04-03T23:44:08.0882034Z   [32m  [32mâœ”[39m[0m[90m document works (gh-4987)[0m
2025-04-03T23:44:08.0925624Z   [32m  [32mâœ”[39m[0m[90m document validation with arrays (gh-6175)[0m
2025-04-03T23:44:08.0940693Z 
2025-04-03T23:44:08.0941724Z [0m  cast: [0m
2025-04-03T23:44:08.0949405Z   [32m  [32mâœ”[39m[0m[90m uses nested schema strict by default (gh-11291)[0m
2025-04-03T23:44:08.0963640Z   [32m  [32mâœ”[39m[0m[90m casts $comment (gh-14576)[0m
2025-04-03T23:44:08.0968069Z   [32m  [32mâœ”[39m[0m[90m avoids setting stripped out nested schema values to undefined (gh-11291)[0m
2025-04-03T23:44:08.0970246Z   [32m  [32mâœ”[39m[0m[90m uses schema-level strictQuery over schema-level strict (gh-12508)[0m
2025-04-03T23:44:08.0990685Z   [32m  [32mâœ”[39m[0m[90m handles $in with discriminators if $in has exactly 1 element (gh-13492)[0m
2025-04-03T23:44:08.0994190Z   [32m  [32mâœ”[39m[0m[90m treats unknown operators as passthrough (gh-15170)[0m
2025-04-03T23:44:08.0995313Z [0m    when casting an array[0m
2025-04-03T23:44:08.0998489Z     [32m  [32mâœ”[39m[0m[90m casts array with ObjectIds to $in query[0m
2025-04-03T23:44:08.1003263Z     [32m  [32mâœ”[39m[0m[90m casts array with ObjectIds to $in query when values are strings[0m
2025-04-03T23:44:08.1007670Z     [32m  [32mâœ”[39m[0m[90m throws when ObjectIds not valid[0m
2025-04-03T23:44:08.1010486Z     [32m  [32mâœ”[39m[0m[90m casts array with Strings to $in query[0m
2025-04-03T23:44:08.1013182Z     [32m  [32mâœ”[39m[0m[90m casts array with Strings when necessary[0m
2025-04-03T23:44:08.1016034Z     [32m  [32mâœ”[39m[0m[90m casts array with Numbers to $in query[0m
2025-04-03T23:44:08.1020405Z     [32m  [32mâœ”[39m[0m[90m casts $in and $nin with empty array (gh-5913) (gh-7806)[0m
2025-04-03T23:44:08.1023245Z     [32m  [32mâœ”[39m[0m[90m casts array with Numbers to $in query when values are strings[0m
2025-04-03T23:44:08.1094102Z     [32m  [32mâœ”[39m[0m[90m throws when Numbers are not valid[0m
2025-04-03T23:44:08.1094801Z [0m    $all[0m
2025-04-03T23:44:08.1102349Z     [32m  [32mâœ”[39m[0m[90m casts $elemMatch (gh-11314)[0m
2025-04-03T23:44:08.1103176Z [0m    bitwise query operators: [0m
2025-04-03T23:44:08.1107653Z     [32m  [32mâœ”[39m[0m[90m with a number[0m
2025-04-03T23:44:08.1110674Z     [32m  [32mâœ”[39m[0m[90m with an array[0m
2025-04-03T23:44:08.1113506Z     [32m  [32mâœ”[39m[0m[90m with a buffer[0m
2025-04-03T23:44:08.1117343Z     [32m  [32mâœ”[39m[0m[90m with int32 (gh-15170)[0m
2025-04-03T23:44:08.1120635Z     [32m  [32mâœ”[39m[0m[90m throws when invalid[0m
2025-04-03T23:44:08.1121289Z [0m    $expr[0m
2025-04-03T23:44:08.1127610Z     [32m  [32mâœ”[39m[0m[90m does not get filtered out (gh-10662)[0m
2025-04-03T23:44:08.1128017Z 
2025-04-03T23:44:08.1128766Z [0m  collections: capped:[0m
2025-04-03T23:44:08.1131647Z   [32m  [32mâœ”[39m[0m[90m schemas should have option size[0m
2025-04-03T23:44:08.2255979Z   [32m  [32mâœ”[39m[0m[90m creation[0m[31m (112ms)[0m
2025-04-03T23:44:08.2399639Z   [32m  [32mâœ”[39m[0m[90m skips when setting autoCreate to false (gh-8566)[0m
2025-04-03T23:44:08.2417426Z 
2025-04-03T23:44:08.2417898Z [0m  collections:[0m
2025-04-03T23:44:08.2522727Z   [32m  [32mâœ”[39m[0m[90m should buffer commands until connection is established[0m
2025-04-03T23:44:08.2625245Z   [32m  [32mâœ”[39m[0m[90m returns a promise if buffering and no callback (gh-7676)[0m
2025-04-03T23:44:08.3631991Z   [32m  [32mâœ”[39m[0m[90m returns a promise if buffering and callback with find() (gh-14184)[0m[31m (100ms)[0m
2025-04-03T23:44:08.4639992Z   [32m  [32mâœ”[39m[0m[90m handles bufferTimeoutMS in schemaUserProvidedOptions[0m[31m (100ms)[0m
2025-04-03T23:44:08.4646467Z   [32m  [32mâœ”[39m[0m[90m methods should that throw (unimplemented)[0m
2025-04-03T23:44:08.4669040Z   [32m  [32mâœ”[39m[0m[90m buffers for sync methods (gh-10610)[0m
2025-04-03T23:44:08.4693164Z 
2025-04-03T23:44:08.4695668Z [0m  connections:[0m
2025-04-03T23:44:08.4698249Z   [32m  [32mâœ”[39m[0m[90m should allow closing a closed connection[0m
2025-04-03T23:44:08.4702556Z   [32m  [32mâœ”[39m[0m[90m should return an error if malformed uri passed[0m
2025-04-03T23:44:08.5728487Z   [32m  [32mâœ”[39m[0m[90m force close (gh-5664)[0m[31m (102ms)[0m
2025-04-03T23:44:08.5767121Z   [32m  [32mâœ”[39m[0m[90m destroy connection and remove it permanently[0m
2025-04-03T23:44:08.5797422Z   [32m  [32mâœ”[39m[0m[90m verify that attempt to re-open destroyed connection throws error, via promise[0m
2025-04-03T23:44:08.5827784Z   [32m  [32mâœ”[39m[0m[90m verify that attempt to re-open destroyed connection throws error, via callback[0m
2025-04-03T23:44:08.6852542Z   [32m  [32mâœ”[39m[0m[90m force close with connection created after close (gh-5664)[0m[31m (102ms)[0m
2025-04-03T23:44:08.6948691Z   [32m  [32mâœ”[39m[0m[90m bufferCommands (gh-5720)[0m
2025-04-03T23:44:08.6969982Z   [32m  [32mâœ”[39m[0m[90m dbName option (gh-6106)[0m
2025-04-03T23:44:08.6988241Z   [32m  [32mâœ”[39m[0m[90m uses default database in uri if options.dbName is not provided[0m
2025-04-03T23:44:08.7060842Z   [32m  [32mâœ”[39m[0m[90m startSession() (gh-6653)[0m
2025-04-03T23:44:08.7215218Z   [32m  [32mâœ”[39m[0m[90m deleteModel()[0m
2025-04-03T23:44:08.8247329Z   [32m  [32mâœ”[39m[0m[90m throws a MongooseServerSelectionError on server selection timeout (gh-8451)[0m[31m (103ms)[0m
2025-04-03T23:44:08.9269548Z   [32m  [32mâœ”[39m[0m[90m avoids unhandled error on createConnection() if error handler registered (gh-14377)[0m[31m (102ms)[0m
2025-04-03T23:44:08.9274573Z   [36m  - `watch()` on a whole collection (gh-8425)[0m
2025-04-03T23:44:08.9297457Z   [32m  [32mâœ”[39m[0m[90m useDB inherits config from default connection (gh-8267)[0m
2025-04-03T23:44:09.0150103Z   [32m  [32mâœ”[39m[0m[90m allows setting client on a disconnected connection (gh-9164)[0m[31m (85ms)[0m
2025-04-03T23:44:09.0169859Z   [32m  [32mâœ”[39m[0m[90m connection.asPromise() resolves to a connection instance (gh-9496)[0m
2025-04-03T23:44:09.0192532Z   [32m  [32mâœ”[39m[0m[90m allows overwriting models (gh-9406)[0m
2025-04-03T23:44:09.0205964Z   [32m  [32mâœ”[39m[0m[90m allows setting `overwriteModels` globally (gh-9406)[0m
2025-04-03T23:44:09.0208614Z   [32m  [32mâœ”[39m[0m[90m Connection id should be scoped per Mongoose Instance (gh-10025)[0m
2025-04-03T23:44:09.0218071Z   [32m  [32mâœ”[39m[0m[90m model() works with 1 argument and overwriteModels set to true (gh-12359)[0m
2025-04-03T23:44:09.0279415Z   [32m  [32mâœ”[39m[0m[90m creates collection if creating model while connection is disconnected with bufferCommands=false[0m
2025-04-03T23:44:09.0281711Z   [32m  [32mâœ”[39m[0m[90m should create connections with unique IDs also if one has been destroyed (gh-12966)[0m
2025-04-03T23:44:09.0283629Z   [32m  [32mâœ”[39m[0m[90m should not create default connection with createInitialConnection = false (gh-12965)[0m
2025-04-03T23:44:09.0327974Z   [32m  [32mâœ”[39m[0m[90m with autoCreate = false after schema create (gh-12940)[0m
2025-04-03T23:44:09.0334904Z   [32m  [32mâœ”[39m[0m[90m does not wait for buffering if autoCreate: false (gh-15241)[0m
2025-04-03T23:44:09.0337315Z   [32m  [32mâœ”[39m[0m[90m should not create default connection with createInitialConnection = false (gh-12965)[0m
2025-04-03T23:44:09.0339105Z   [36m  - should demonstrate the withSession() function (gh-14330)[0m
2025-04-03T23:44:09.0381932Z   [32m  [32mâœ”[39m[0m[90m listDatabases() should return a list of database objects with a name property (gh-9048)[0m
2025-04-03T23:44:09.0532873Z   [36m  - connection bulkWrite() ordered (gh-15028)[0m
2025-04-03T23:44:09.0671562Z   [36m  - connection bulkWrite() unordered (gh-15028)[0m
2025-04-03T23:44:09.1733691Z   [32m  [32mâœ”[39m[0m[90m buffers connection helpers[0m[31m (106ms)[0m
2025-04-03T23:44:09.2733430Z   [32m  [32mâœ”[39m[0m[90m connection helpers buffering times out[0m[31m (100ms)[0m
2025-04-03T23:44:09.2840085Z   [32m  [32mâœ”[39m[0m[90m supports db-level aggregate on connection (gh-15118)[0m
2025-04-03T23:44:09.2840980Z [0m    openUri (gh-5304)[0m
2025-04-03T23:44:09.2900609Z     [32m  [32mâœ”[39m[0m[90m with mongoose.createConnection()[0m
2025-04-03T23:44:09.2931564Z     [32m  [32mâœ”[39m[0m[90m with autoIndex (gh-5423)[0m
2025-04-03T23:44:09.3332004Z     [32m  [32mâœ”[39m[0m[90m with autoCreate (gh-6489)[0m[33m (40ms)[0m
2025-04-03T23:44:09.3380181Z     [32m  [32mâœ”[39m[0m[90m with autoCreate = false (gh-8814)[0m
2025-04-03T23:44:09.3523945Z     [32m  [32mâœ”[39m[0m[90m autoCreate when collection already exists does not fail (gh-7122)[0m
2025-04-03T23:44:09.3527143Z     [32m  [32mâœ”[39m[0m[90m throws helpful error with undefined uri (gh-6763)[0m
2025-04-03T23:44:09.3570285Z     [32m  [32mâœ”[39m[0m[90m resolving with q (gh-5714)[0m
2025-04-03T23:44:09.3644301Z     [32m  [32mâœ”[39m[0m[90m connection plugins (gh-7378)[0m
2025-04-03T23:44:09.3647248Z [0m    helpers[0m
2025-04-03T23:44:09.3671205Z     [32m  [32mâœ”[39m[0m[90m dropDatabase()[0m
2025-04-03T23:44:09.3740297Z     [32m  [32mâœ”[39m[0m[90m dropCollection()[0m
2025-04-03T23:44:09.3888721Z     [32m  [32mâœ”[39m[0m[90m createCollection()[0m
2025-04-03T23:44:09.4029910Z     [32m  [32mâœ”[39m[0m[90m listCollections()[0m
2025-04-03T23:44:09.4037245Z [0m    events[0m
2025-04-03T23:44:09.4138984Z     [32m  [32mâœ”[39m[0m[90m operation-start[0m
2025-04-03T23:44:09.4151985Z     [32m  [32mâœ”[39m[0m[90m operation-end[0m
2025-04-03T23:44:09.4166763Z     [32m  [32mâœ”[39m[0m[90m commandStarted, commandFailed, commandSucceeded (gh-14611)[0m
2025-04-03T23:44:09.4185674Z [0m    errors[0m
2025-04-03T23:44:09.4188849Z     [32m  [32mâœ”[39m[0m[90m .catch() means error does not get thrown (gh-5229)[0m
2025-04-03T23:44:09.4203544Z     [32m  [32mâœ”[39m[0m[90m promise is rejected even if there is an error event listener (gh-7850)[0m
2025-04-03T23:44:09.4206451Z     [32m  [32mâœ”[39m[0m[90m readyState is disconnected if initial connection fails (gh-6244)[0m
2025-04-03T23:44:09.4207372Z [0m    .model()[0m
2025-04-03T23:44:09.4228623Z     [32m  [32mâœ”[39m[0m[90m allows passing a schema[0m
2025-04-03T23:44:09.4235991Z     [32m  [32mâœ”[39m[0m[90m should properly assign the db[0m
2025-04-03T23:44:09.4241679Z     [32m  [32mâœ”[39m[0m[90m prevents overwriting pre-existing models[0m
2025-04-03T23:44:09.4255977Z     [32m  [32mâœ”[39m[0m[90m allows passing identical name + schema args[0m
2025-04-03T23:44:09.4260196Z     [32m  [32mâœ”[39m[0m[90m throws on unknown model name[0m
2025-04-03T23:44:09.4262533Z [0m      passing collection name[0m
2025-04-03T23:44:09.4263310Z [0m        when model name already exists[0m
2025-04-03T23:44:09.4272430Z         [32m  [32mâœ”[39m[0m[90m returns a new uncached model[0m
2025-04-03T23:44:09.4275811Z [0m      passing object literal schemas[0m
2025-04-03T23:44:09.4397705Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:09.4414864Z [0m    modelNames()[0m
2025-04-03T23:44:09.4437057Z     [32m  [32mâœ”[39m[0m[90m returns names of all models registered on it[0m
2025-04-03T23:44:09.4437829Z [0m    connection pool sharing: [0m
2025-04-03T23:44:09.4468690Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:09.4664291Z     [32m  [32mâœ”[39m[0m[90m saves correctly[0m
2025-04-03T23:44:09.4676261Z     [32m  [32mâœ”[39m[0m[90m emits connecting events on both[0m
2025-04-03T23:44:09.4692926Z     [32m  [32mâœ”[39m[0m[90m emits connected events on both[0m
2025-04-03T23:44:09.4712655Z     [32m  [32mâœ”[39m[0m[90m emits open events on both[0m
2025-04-03T23:44:09.4740913Z     [32m  [32mâœ”[39m[0m[90m emits disconnecting events on both, closing initial db[0m
2025-04-03T23:44:09.4759847Z     [32m  [32mâœ”[39m[0m[90m emits disconnecting events on both, closing secondary db[0m
2025-04-03T23:44:09.4792110Z     [32m  [32mâœ”[39m[0m[90m emits disconnected events on both, closing initial db[0m
2025-04-03T23:44:09.4821324Z     [32m  [32mâœ”[39m[0m[90m emits disconnected events on both, closing secondary db[0m
2025-04-03T23:44:09.4853641Z     [32m  [32mâœ”[39m[0m[90m closes correctly for all dbs, closing initial db[0m
2025-04-03T23:44:09.4906981Z     [32m  [32mâœ”[39m[0m[90m handles re-opening base connection (gh-11240)[0m
2025-04-03T23:44:09.4935209Z     [32m  [32mâœ”[39m[0m[90m closes correctly for all dbs, closing secondary db[0m
2025-04-03T23:44:09.4963425Z     [32m  [32mâœ”[39m[0m[90m cache connections to the same db[0m
2025-04-03T23:44:09.5042739Z     [32m  [32mâœ”[39m[0m[90m supports removing db (gh-11821)[0m
2025-04-03T23:44:09.5043483Z [0m    shouldAuthenticate()[0m
2025-04-03T23:44:09.5044110Z [0m      when using standard authentication[0m
2025-04-03T23:44:09.5044830Z [0m        when username and password are undefined[0m
2025-04-03T23:44:09.5073177Z         [32m  [32mâœ”[39m[0m[90m should return false[0m
2025-04-03T23:44:09.5073992Z [0m        when username and password are empty strings[0m
2025-04-03T23:44:09.5102293Z         [32m  [32mâœ”[39m[0m[90m should return false[0m
2025-04-03T23:44:09.5103073Z [0m        when both username and password are defined[0m
2025-04-03T23:44:09.5155802Z         [32m  [32mâœ”[39m[0m[90m should return true[0m
2025-04-03T23:44:09.5157482Z [0m      when using MONGODB-X509 authentication[0m
2025-04-03T23:44:09.5158242Z [0m        when username and password are undefined[0m
2025-04-03T23:44:09.5188437Z         [32m  [32mâœ”[39m[0m[90m should return false[0m
2025-04-03T23:44:09.5189124Z [0m        when only username is defined[0m
2025-04-03T23:44:09.5223034Z         [32m  [32mâœ”[39m[0m[90m should return false[0m
2025-04-03T23:44:09.5224746Z [0m        when both username and password are defined[0m
2025-04-03T23:44:09.5257879Z         [32m  [32mâœ”[39m[0m[90m should return false[0m
2025-04-03T23:44:09.5259574Z [0m    passing a function into createConnection[0m
2025-04-03T23:44:09.5362195Z     [32m  [32mâœ”[39m[0m[90m should store the name of the function (gh-6517)[0m
2025-04-03T23:44:09.5363195Z [0m    when connecting with a secondary read preference(gh-9374)[0m
2025-04-03T23:44:09.5363823Z [0m      mongoose.connect[0m
2025-04-03T23:44:09.5394337Z       [32m  [32mâœ”[39m[0m[90m forces autoIndex & autoCreate to be false if read preference is secondary or secondaryPreferred[0m
2025-04-03T23:44:09.5397431Z       [32m  [32mâœ”[39m[0m[90m throws if options try to set autoIndex to true[0m
2025-04-03T23:44:09.5401309Z       [32m  [32mâœ”[39m[0m[90m throws if options.config.autoIndex is true, even if options.autoIndex is false[0m
2025-04-03T23:44:09.5402252Z [0m      mongoose.createConnection[0m
2025-04-03T23:44:09.5452234Z       [32m  [32mâœ”[39m[0m[90m forces autoIndex & autoCreate to be false if read preference is secondary or secondaryPreferred (gh-9374)[0m
2025-04-03T23:44:09.5480975Z       [32m  [32mâœ”[39m[0m[90m keeps autoIndex & autoCreate as true by default if read preference is primaryPreferred (gh-9374)[0m
2025-04-03T23:44:09.5483679Z       [32m  [32mâœ”[39m[0m[90m throws if options try to set autoIndex to true[0m
2025-04-03T23:44:09.5486809Z       [32m  [32mâœ”[39m[0m[90m throws if options.config.autoIndex is true, even if options.autoIndex is false[0m
2025-04-03T23:44:09.5487692Z [0m    Automatic init[0m
2025-04-03T23:44:09.5830123Z     [32m  [32mâœ”[39m[0m[90m re-runs init() if connecting after disconnecting (gh-12047)[0m
2025-04-03T23:44:09.6047704Z     [32m  [32mâœ”[39m[0m[90m re-runs init() if running setClient() after disconnecting (gh-12047)[0m
2025-04-03T23:44:09.6065557Z [0m    Connection#syncIndexes() (gh-10893) (gh-11039)[0m
2025-04-03T23:44:09.6329975Z     [32m  [32mâœ”[39m[0m[90m Allows a syncIndexes option with connection mongoose.connection.syncIndexes (gh-10893)[0m
2025-04-03T23:44:09.6626174Z     [32m  [32mâœ”[39m[0m[90m does not sync indexes automatically when `autoIndex: true` (gh-11039)[0m
2025-04-03T23:44:09.7321849Z     [32m  [32mâœ”[39m[0m[90m stops as soon as one model fails with `continueOnError: false` (gh-11039)[0m[33m (55ms)[0m
2025-04-03T23:44:09.7544118Z     [32m  [32mâœ”[39m[0m[90m error includes a property with all the errors when `continueOnError: false`[0m
2025-04-03T23:44:09.7754439Z     [32m  [32mâœ”[39m[0m[90m `continueOnError` is false by default[0m
2025-04-03T23:44:09.8271033Z     [32m  [32mâœ”[39m[0m[90m when `continueOnError: true` it will continue to sync indexes even if one model fails[0m[33m (50ms)[0m
2025-04-03T23:44:09.8712315Z     [32m  [32mâœ”[39m[0m[90m when `continueOnError: true` it will return a map of modelNames and their sync results/errors[0m[33m (44ms)[0m
2025-04-03T23:44:09.9217903Z     [32m  [32mâœ”[39m[0m[90m mongoose.syncIndexes(...) accepts `continueOnError`[0m[33m (50ms)[0m
2025-04-03T23:44:09.9237067Z [0m    createCollections()[0m
2025-04-03T23:44:09.9492126Z     [32m  [32mâœ”[39m[0m[90m should create collections for all models on the connection with the createCollections() function (gh-13300)[0m
2025-04-03T23:44:09.9492905Z [0m    processConnectionOptions[0m
2025-04-03T23:44:09.9508702Z     [32m  [32mâœ”[39m[0m[90m should not throw an error when attempting to mutate unmutable options object gh-13335[0m
2025-04-03T23:44:09.9522904Z 
2025-04-03T23:44:09.9523431Z [0m  document[0m
2025-04-03T23:44:09.9552207Z   [32m  [32mâœ”[39m[0m[90m isSelected()[0m
2025-04-03T23:44:09.9556896Z   [32m  [32mâœ”[39m[0m[90m isDirectSelected (gh-5063)[0m
2025-04-03T23:44:09.9557254Z 
2025-04-03T23:44:09.9558819Z [0m  document modified[0m
2025-04-03T23:44:09.9567537Z [0m    modified states[0m
2025-04-03T23:44:09.9748412Z     [32m  [32mâœ”[39m[0m[90m reset after save[0m
2025-04-03T23:44:09.9901959Z     [32m  [32mâœ”[39m[0m[90m of embedded docs reset after save[0m
2025-04-03T23:44:09.9923615Z [0m    isDefault[0m
2025-04-03T23:44:09.9943402Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:10.0060178Z [0m    isModified[0m
2025-04-03T23:44:10.0077038Z     [32m  [32mâœ”[39m[0m[90m should not throw with no argument[0m
2025-04-03T23:44:10.0174517Z     [32m  [32mâœ”[39m[0m[90m when modifying keys[0m
2025-04-03T23:44:10.0301730Z     [32m  [32mâœ”[39m[0m[90m setting a key identically to its current value should not dirty the key[0m
2025-04-03T23:44:10.0405186Z     [32m  [32mâœ”[39m[0m[90m should support passing a string of keys separated by a blank space as the first argument[0m
2025-04-03T23:44:10.0648617Z     [32m  [32mâœ”[39m[0m[90m on entire document[0m
2025-04-03T23:44:10.0965721Z     [32m  [32mâœ”[39m[0m[90m should let you set ref paths (gh-1530)[0m
2025-04-03T23:44:10.1009806Z     [32m  [32mâœ”[39m[0m[90m properly sets populated for gh-1530 (gh-2678)[0m
2025-04-03T23:44:10.1332804Z     [32m  [32mâœ”[39m[0m[90m should support setting mixed paths by string (gh-1418)[0m
2025-04-03T23:44:10.1574537Z     [32m  [32mâœ”[39m[0m[90m should mark multi-level nested schemas as modified (gh-1754)[0m
2025-04-03T23:44:10.1768985Z     [32m  [32mâœ”[39m[0m[90m should reset the modified state after calling unmarkModified[0m
2025-04-03T23:44:10.1789446Z [0m      on DocumentArray[0m
2025-04-03T23:44:10.1809622Z       [32m  [32mâœ”[39m[0m[90m work[0m
2025-04-03T23:44:10.1890499Z       [32m  [32mâœ”[39m[0m[90m with push (gh-14024)[0m
2025-04-03T23:44:10.2002597Z       [32m  [32mâœ”[39m[0m[90m with push and set (gh-14024)[0m
2025-04-03T23:44:10.2092092Z       [32m  [32mâœ”[39m[0m[90m with accessors[0m
2025-04-03T23:44:10.2176092Z [0m      on MongooseArray[0m
2025-04-03T23:44:10.2192335Z       [32m  [32mâœ”[39m[0m[90m atomic methods[0m
2025-04-03T23:44:10.2271199Z       [32m  [32mâœ”[39m[0m[90m native methods[0m
2025-04-03T23:44:10.2341945Z [0m      manually populating arrays[0m
2025-04-03T23:44:10.2385243Z       [32m  [32mâœ”[39m[0m[90m gh-1530 for arrays (gh-3575)[0m
2025-04-03T23:44:10.2735269Z       [32m  [32mâœ”[39m[0m[90m setting nested arrays (gh-3721)[0m
2025-04-03T23:44:10.2805796Z       [32m  [32mâœ”[39m[0m[90m with discriminators (gh-3575)[0m
2025-04-03T23:44:10.3194519Z       [32m  [32mâœ”[39m[0m[90m updates embedded doc parents upon direct assignment (gh-5189)[0m
2025-04-03T23:44:10.3314073Z 
2025-04-03T23:44:10.3315881Z [0m  document.populate[0m
2025-04-03T23:44:10.3635349Z   [32m  [32mâœ”[39m[0m[90m works with await[0m
2025-04-03T23:44:10.3944713Z   [32m  [32mâœ”[39m[0m[90m populating using space delimited paths with options[0m
2025-04-03T23:44:10.4236100Z   [32m  [32mâœ”[39m[0m[90m using multiple populate calls[0m
2025-04-03T23:44:10.4533731Z   [32m  [32mâœ”[39m[0m[90m with custom model selection[0m
2025-04-03T23:44:10.4830064Z   [32m  [32mâœ”[39m[0m[90m one path, model selection as second argument[0m
2025-04-03T23:44:10.5130438Z   [32m  [32mâœ”[39m[0m[90m multiple paths, model selection as second argument[0m
2025-04-03T23:44:10.5419793Z   [32m  [32mâœ”[39m[0m[90m multiple paths, mixed argument types[0m
2025-04-03T23:44:10.5716438Z   [32m  [32mâœ”[39m[0m[90m multiple paths, multiple options[0m
2025-04-03T23:44:10.5988559Z   [32m  [32mâœ”[39m[0m[90m a property not in schema[0m
2025-04-03T23:44:10.6287996Z   [32m  [32mâœ”[39m[0m[90m of empty array[0m
2025-04-03T23:44:10.6584285Z   [32m  [32mâœ”[39m[0m[90m of array of null/undefined[0m
2025-04-03T23:44:10.6859834Z   [32m  [32mâœ”[39m[0m[90m of null property[0m
2025-04-03T23:44:10.7168284Z   [32m  [32mâœ”[39m[0m[90m String _ids[0m
2025-04-03T23:44:10.7593875Z   [32m  [32mâœ”[39m[0m[90m Buffer _ids[0m
2025-04-03T23:44:10.7875741Z   [32m  [32mâœ”[39m[0m[90m Number _ids[0m
2025-04-03T23:44:10.8194555Z   [32m  [32mâœ”[39m[0m[90m depopulates when setting `_id` (gh-3308)[0m
2025-04-03T23:44:10.8583803Z   [32m  [32mâœ”[39m[0m[90m does not allow you to call populate() on nested docs (gh-4552)[0m
2025-04-03T23:44:10.9201054Z   [32m  [32mâœ”[39m[0m[90m handles pulling from populated array (gh-3579)[0m
2025-04-03T23:44:10.9735422Z   [32m  [32mâœ”[39m[0m[90m populated() works with nested subdocs (gh-7685)[0m
2025-04-03T23:44:11.0423388Z   [32m  [32mâœ”[39m[0m[90m works with single strings (gh-11160)[0m[33m (43ms)[0m
2025-04-03T23:44:11.0931410Z   [32m  [32mâœ”[39m[0m[90m works when populating a nested document inside an array parent (gh-14435)[0m
2025-04-03T23:44:11.1499097Z   [32m  [32mâœ”[39m[0m[90m supports populate with ordered option (gh-15231)[0m
2025-04-03T23:44:11.2090996Z   [32m  [32mâœ”[39m[0m[90m handles re-populating map of array of refs (gh-9359)[0m
2025-04-03T23:44:11.2114247Z [0m    populating two paths[0m
2025-04-03T23:44:11.2386132Z     [32m  [32mâœ”[39m[0m[90m with space delmited string works[0m
2025-04-03T23:44:11.2403665Z [0m    sub-level properties[0m
2025-04-03T23:44:11.2675285Z     [32m  [32mâœ”[39m[0m[90m with string arg[0m
2025-04-03T23:44:11.2693093Z [0m    of new document[0m
2025-04-03T23:44:11.2943810Z     [32m  [32mâœ”[39m[0m[90m should save just the populated _id (gh-1442)[0m
2025-04-03T23:44:11.2961671Z [0m    gh-2214[0m
2025-04-03T23:44:11.3460619Z     [32m  [32mâœ”[39m[0m[90m should return a real document array when populating[0m
2025-04-03T23:44:11.3480221Z [0m    gh-7889[0m
2025-04-03T23:44:11.4043296Z     [32m  [32mâœ”[39m[0m[90m should save item added to array after populating the array[0m
2025-04-03T23:44:11.4066365Z [0m    depopulate[0m
2025-04-03T23:44:11.4625352Z     [32m  [32mâœ”[39m[0m[90m can depopulate specific path (gh-2509)[0m
2025-04-03T23:44:11.5187472Z     [32m  [32mâœ”[39m[0m[90m depopulates all (gh-6073)[0m
2025-04-03T23:44:11.5543914Z     [32m  [32mâœ”[39m[0m[90m doesn't throw when called on a doc that is not populated (gh-6075)[0m
2025-04-03T23:44:11.6180350Z     [32m  [32mâœ”[39m[0m[90m depopulates virtuals (gh-6075)[0m
2025-04-03T23:44:11.6530119Z     [32m  [32mâœ”[39m[0m[90m depopulates field with empty array (gh-7740)[0m
2025-04-03T23:44:11.7304643Z     [32m  [32mâœ”[39m[0m[90m depopulates after pushing manually populated (gh-2509)[0m[33m (39ms)[0m
2025-04-03T23:44:11.7323214Z [0m    #populated() with virtuals (gh-7440)[0m
2025-04-03T23:44:11.7745934Z     [32m  [32mâœ”[39m[0m[90m works with justOne: false[0m
2025-04-03T23:44:11.8089472Z     [32m  [32mâœ”[39m[0m[90m works with justOne: true[0m
2025-04-03T23:44:11.8174986Z [0m    #populated() with getters on embedded schema (gh-7521)[0m
2025-04-03T23:44:11.8549073Z     [32m  [32mâœ”[39m[0m[90m works with populate[0m
2025-04-03T23:44:11.8591719Z 
2025-04-03T23:44:11.8592703Z [0m  document: strict mode:[0m
2025-04-03T23:44:11.8620796Z   [32m  [32mâœ”[39m[0m[90m nested doc[0m
2025-04-03T23:44:11.8861007Z   [32m  [32mâœ”[39m[0m[90m sub doc[0m
2025-04-03T23:44:11.8965843Z   [32m  [32mâœ”[39m[0m[90m virtuals[0m
2025-04-03T23:44:11.9121743Z   [32m  [32mâœ”[39m[0m[90m can be overridden during set()[0m
2025-04-03T23:44:11.9271876Z   [32m  [32mâœ”[39m[0m[90m can be overridden during update()[0m
2025-04-03T23:44:11.9424375Z   [32m  [32mâœ”[39m[0m[90m can be overwritten with findOneAndUpdate (gh-1967)[0m
2025-04-03T23:44:11.9464483Z   [32m  [32mâœ”[39m[0m[90m handles setting `schema.options.strict` (gh-7103)[0m
2025-04-03T23:44:11.9555923Z [0m    should work[0m
2025-04-03T23:44:11.9690032Z     [32m  [32mâœ”[39m[0m[90m when creating models with non-strict schemas (gh-4274)[0m
2025-04-03T23:44:11.9806465Z     [32m  [32mâœ”[39m[0m[90m when creating models with strict schemas[0m
2025-04-03T23:44:11.9940645Z     [32m  [32mâœ”[39m[0m[90m when overriding strictness[0m
2025-04-03T23:44:12.0184384Z     [32m  [32mâœ”[39m[0m[90m when using Model#create[0m
2025-04-03T23:44:12.0304867Z [0m    "throws" mode[0m
2025-04-03T23:44:12.0332886Z     [32m  [32mâœ”[39m[0m[90m throws on set() of unknown property[0m
2025-04-03T23:44:12.0442941Z     [32m  [32mâœ”[39m[0m[90m fails with extra fields[0m
2025-04-03T23:44:12.0532070Z     [32m  [32mâœ”[39m[0m[90m doesnt throw with refs (gh-2665)[0m
2025-04-03T23:44:12.0611303Z     [32m  [32mâœ”[39m[0m[90m set nested to num throws ObjectExpectedError (gh-3735)[0m
2025-04-03T23:44:12.0696718Z 
2025-04-03T23:44:12.0702852Z [0m  document[0m
2025-04-03T23:44:12.0724123Z   [32m  [32mâœ”[39m[0m[90m test shortcut setters[0m
2025-04-03T23:44:12.0749613Z   [32m  [32mâœ”[39m[0m[90m test accessor of id[0m
2025-04-03T23:44:12.0765229Z   [32m  [32mâœ”[39m[0m[90m test shortcut of id hexString[0m
2025-04-03T23:44:12.0800739Z   [32m  [32mâœ”[39m[0m[90m toObject options[0m
2025-04-03T23:44:12.1137786Z   [32m  [32mâœ”[39m[0m[90m toObject transform[0m
2025-04-03T23:44:12.1172936Z   [32m  [32mâœ”[39m[0m[90m propagates toObject transform function to all subdocuments (gh-14589)[0m
2025-04-03T23:44:12.1247210Z   [32m  [32mâœ”[39m[0m[90m disabling aliases in toObject options (gh-7548)[0m
2025-04-03T23:44:12.1461945Z   [32m  [32mâœ”[39m[0m[90m can save multiple times with changes to complex subdocuments (gh-8531)[0m
2025-04-03T23:44:12.1717406Z   [32m  [32mâœ”[39m[0m[90m saves even if `_id` is null (gh-6406)[0m
2025-04-03T23:44:12.1830577Z   [32m  [32mâœ”[39m[0m[90m allows you to skip validation on save (gh-2981)[0m
2025-04-03T23:44:12.2063162Z   [32m  [32mâœ”[39m[0m[90m doesnt use custom toObject options on save[0m
2025-04-03T23:44:12.2088855Z   [32m  [32mâœ”[39m[0m[90m toObject should not set undefined values to null[0m
2025-04-03T23:44:12.2129394Z   [32m  [32mâœ”[39m[0m[90m methods on embedded docs should work[0m
2025-04-03T23:44:12.2264101Z   [32m  [32mâœ”[39m[0m[90m setting a positional path does not cast value to array[0m
2025-04-03T23:44:12.2302063Z   [32m  [32mâœ”[39m[0m[90m no maxListeners warning should occur[0m
2025-04-03T23:44:12.2552898Z   [32m  [32mâœ”[39m[0m[90m unselected required fields should pass validation[0m
2025-04-03T23:44:12.2696090Z   [32m  [32mâœ”[39m[0m[90m #invalidate[0m
2025-04-03T23:44:12.2718184Z   [32m  [32mâœ”[39m[0m[90m properly calls queue functions (gh-2856)[0m
2025-04-03T23:44:12.2901506Z   [32m  [32mâœ”[39m[0m[90m does not save duplicate items after two saves (gh-6900)[0m
2025-04-03T23:44:12.2936964Z   [32m  [32mâœ”[39m[0m[90m validateSync() on embedded doc (gh-6931)[0m
2025-04-03T23:44:12.3012263Z   [32m  [32mâœ”[39m[0m[90m retains user-defined key order with nested docs (gh-6944)[0m
2025-04-03T23:44:12.3171583Z   [32m  [32mâœ”[39m[0m[90m does not mark modified if setting nested subdoc to same value (gh-7048)[0m
2025-04-03T23:44:12.3378957Z   [32m  [32mâœ”[39m[0m[90m allow saving validation error in db (gh-7127)[0m
2025-04-03T23:44:12.3403477Z   [32m  [32mâœ”[39m[0m[90m handles mixed arrays with all syntaxes (gh-7109)[0m
2025-04-03T23:44:12.3476830Z   [32m  [32mâœ”[39m[0m[90m propsParameter option (gh-7145)[0m
2025-04-03T23:44:12.3567511Z   [32m  [32mâœ”[39m[0m[90m surfaces errors in subdoc pre validate (gh-7187)[0m
2025-04-03T23:44:12.3646129Z   [32m  [32mâœ”[39m[0m[90m runs setter only once when doing .set() underneath single nested (gh-7196)[0m
2025-04-03T23:44:12.3850284Z   [32m  [32mâœ”[39m[0m[90m should enable key with dot(.) on mixed types with checkKeys (gh-7144)[0m
2025-04-03T23:44:12.3969908Z   [32m  [32mâœ”[39m[0m[90m doesnt mark array as modified on init if embedded schema has default (gh-7227)[0m
2025-04-03T23:44:12.4148145Z   [32m  [32mâœ”[39m[0m[90m casts defaults for doc arrays (gh-7337)[0m
2025-04-03T23:44:12.4343853Z   [32m  [32mâœ”[39m[0m[90m updateOne() hooks (gh-7133) (gh-7423)[0m
2025-04-03T23:44:12.4538856Z   [32m  [32mâœ”[39m[0m[90m doesnt mark single nested doc date as modified if setting with string (gh-7264)[0m
2025-04-03T23:44:12.4565816Z   [32m  [32mâœ”[39m[0m[90m handles null `fields` param to constructor (gh-7271)[0m
2025-04-03T23:44:12.4651591Z   [32m  [32mâœ”[39m[0m[90m flattenMaps option for toObject() (gh-10872) (gh-7274) (gh-10486)[0m
2025-04-03T23:44:12.4844944Z   [32m  [32mâœ”[39m[0m[90m flattenObjectIds option for toObject() (gh-13341) (gh-2790)[0m
2025-04-03T23:44:12.5030339Z   [32m  [32mâœ”[39m[0m[90m `collection` property with strict: false (gh-7276)[0m
2025-04-03T23:44:12.5131597Z   [32m  [32mâœ”[39m[0m[90m should validateSync() all elements in doc array (gh-6746)[0m
2025-04-03T23:44:12.5235207Z   [32m  [32mâœ”[39m[0m[90m handles fake constructor (gh-7290)[0m
2025-04-03T23:44:12.5317868Z   [32m  [32mâœ”[39m[0m[90m handles fake __proto__ (gh-7290)[0m
2025-04-03T23:44:12.5504304Z   [32m  [32mâœ”[39m[0m[90m cast error with string path set to array in db (gh-7619)[0m
2025-04-03T23:44:12.5623173Z   [32m  [32mâœ”[39m[0m[90m doesnt crash if nested path with `get()` (gh-7316)[0m
2025-04-03T23:44:12.5904186Z   [32m  [32mâœ”[39m[0m[90m copies atomics from existing document array when setting doc array (gh-7472)[0m
2025-04-03T23:44:12.6048185Z   [32m  [32mâœ”[39m[0m[90m doesnt fail with custom update function (gh-7342)[0m
2025-04-03T23:44:12.6153168Z   [32m  [32mâœ”[39m[0m[90m setters that modify `this` should work on single nested when overwriting (gh-7585)[0m
2025-04-03T23:44:12.6244689Z   [32m  [32mâœ”[39m[0m[90m handles setting embedded doc to Object.assign() from another doc (gh-7645)[0m
2025-04-03T23:44:12.6553822Z   [32m  [32mâœ”[39m[0m[90m setting single nested subdoc with custom date types and getters/setters (gh-7601)[0m
2025-04-03T23:44:12.6673955Z   [32m  [32mâœ”[39m[0m[90m get() and set() underneath alias (gh-7592)[0m
2025-04-03T23:44:12.6782655Z   [32m  [32mâœ”[39m[0m[90m get() with getters: false (gh-7233)[0m
2025-04-03T23:44:12.6866591Z   [32m  [32mâœ”[39m[0m[90m overwriting single nested (gh-7660)[0m
2025-04-03T23:44:12.6950071Z   [32m  [32mâœ”[39m[0m[90m setting path to non-POJO object (gh-7639)[0m
2025-04-03T23:44:12.7036331Z   [32m  [32mâœ”[39m[0m[90m supports setting date properties with strict: false (gh-7907)[0m
2025-04-03T23:44:12.7298552Z   [32m  [32mâœ”[39m[0m[90m supports setting values to undefined with strict: false (gh-15192)[0m
2025-04-03T23:44:12.7352240Z   [32m  [32mâœ”[39m[0m[90m handles .set() on doc array within embedded discriminator (gh-7656)[0m
2025-04-03T23:44:12.7459080Z   [32m  [32mâœ”[39m[0m[90m $isEmpty() (gh-5369)[0m
2025-04-03T23:44:12.7561640Z   [32m  [32mâœ”[39m[0m[90m push() onto discriminator doc array (gh-7704)[0m
2025-04-03T23:44:12.7861343Z   [32m  [32mâœ”[39m[0m[90m doesnt call getter when saving (gh-7719)[0m
2025-04-03T23:44:12.7882471Z   [32m  [32mâœ”[39m[0m[90m skips malformed validators property (gh-7720)[0m
2025-04-03T23:44:12.8090893Z   [32m  [32mâœ”[39m[0m[90m nested set on subdocs works (gh-7748)[0m
2025-04-03T23:44:12.8208586Z   [32m  [32mâœ”[39m[0m[90m does not convert array to object with strict: false (gh-7733)[0m
2025-04-03T23:44:12.8436406Z   [32m  [32mâœ”[39m[0m[90m does not crash with array property named "undefined" (gh-7756)[0m
2025-04-03T23:44:12.8632403Z   [32m  [32mâœ”[39m[0m[90m fires pre save hooks on nested child schemas (gh-7792)[0m
2025-04-03T23:44:12.8740601Z   [32m  [32mâœ”[39m[0m[90m takes message from async custom validator promise rejection (gh-4913)[0m
2025-04-03T23:44:12.8898961Z   [32m  [32mâœ”[39m[0m[90m handles nested properties named `schema` (gh-7831)[0m
2025-04-03T23:44:12.9089752Z   [32m  [32mâœ”[39m[0m[90m handles nested properties named `on` (gh-11656)[0m
2025-04-03T23:44:12.9207558Z   [32m  [32mâœ”[39m[0m[90m copies virtuals from array subdocs when casting array of docs with same schema (gh-7898)[0m
2025-04-03T23:44:12.9474590Z   [32m  [32mâœ”[39m[0m[90m consistent post order traversal for array subdocs (gh-7929)[0m
2025-04-03T23:44:12.9607058Z   [32m  [32mâœ”[39m[0m[90m respects projection for getters (gh-7940)[0m
2025-04-03T23:44:12.9808951Z   [32m  [32mâœ”[39m[0m[90m loads doc with a `once` property successfully (gh-7958)[0m
2025-04-03T23:44:12.9993410Z   [32m  [32mâœ”[39m[0m[90m caster that converts to Number class works (gh-8150)[0m
2025-04-03T23:44:13.0213982Z   [32m  [32mâœ”[39m[0m[90m handles objectids and decimals with strict: false (gh-7973)[0m
2025-04-03T23:44:13.0319245Z   [32m  [32mâœ”[39m[0m[90m allows enum on array of array of strings (gh-7926)[0m
2025-04-03T23:44:13.0666372Z   [32m  [32mâœ”[39m[0m[90m allows saving an unchanged document if required populated path is null (gh-8018)[0m
2025-04-03T23:44:13.0705815Z   [32m  [32mâœ”[39m[0m[90m only calls validator once on mixed validator (gh-8067)[0m
2025-04-03T23:44:13.0791890Z   [32m  [32mâœ”[39m[0m[90m only calls validator once on nested mixed validator (gh-8117)[0m
2025-04-03T23:44:13.1100185Z   [32m  [32mâœ”[39m[0m[90m handles populate() with custom type that does not cast to doc (gh-8062)[0m
2025-04-03T23:44:13.1128839Z   [32m  [32mâœ”[39m[0m[90m can inspect() on a document array (gh-8037)[0m
2025-04-03T23:44:13.1385306Z   [32m  [32mâœ”[39m[0m[90m always passes unpopulated paths to validators (gh-8042)[0m
2025-04-03T23:44:13.1514429Z   [32m  [32mâœ”[39m[0m[90m set() merge option with single nested (gh-8201)[0m
2025-04-03T23:44:13.1726121Z   [32m  [32mâœ”[39m[0m[90m set() merge option with double nested[0m
2025-04-03T23:44:13.1975358Z   [32m  [32mâœ”[39m[0m[90m setting single nested subdoc with timestamps (gh-8251)[0m
2025-04-03T23:44:13.2158949Z   [32m  [32mâœ”[39m[0m[90m passing an object with toBSON() into `save()` (gh-8299)[0m
2025-04-03T23:44:13.2189401Z   [32m  [32mâœ”[39m[0m[90m handles getter setting virtual on manually populated doc when calling toJSON (gh-8295)[0m
2025-04-03T23:44:13.2345619Z   [32m  [32mâœ”[39m[0m[90m enum validator for number (gh-8139)[0m
2025-04-03T23:44:13.2466780Z   [32m  [32mâœ”[39m[0m[90m enum object syntax for number (gh-10648) (gh-8139)[0m
2025-04-03T23:44:13.2563220Z   [32m  [32mâœ”[39m[0m[90m support `pathsToValidate()` option for `validate()` (gh-7587)[0m
2025-04-03T23:44:13.2770242Z   [32m  [32mâœ”[39m[0m[90m array push with $position (gh-14244) (gh-4322)[0m
2025-04-03T23:44:13.2896909Z   [32m  [32mâœ”[39m[0m[90m setting a path to a single nested document should update the single nested doc parent (gh-8400)[0m
2025-04-03T23:44:13.3193770Z   [32m  [32mâœ”[39m[0m[90m setting an array to an array with some populated documents depopulates the whole array (gh-8443)[0m
2025-04-03T23:44:13.3227981Z   [32m  [32mâœ”[39m[0m[90m handles errors with name set to "ValidationError" (gh-8466)[0m
2025-04-03T23:44:13.3327177Z   [32m  [32mâœ”[39m[0m[90m throws an error if running validate() multiple times in parallel (gh-8468)[0m
2025-04-03T23:44:13.3574046Z   [32m  [32mâœ”[39m[0m[90m avoids parallel validate error when validating nested path with double nested subdocs (gh-8486)[0m
2025-04-03T23:44:13.3659539Z   [32m  [32mâœ”[39m[0m[90m supports function for date min/max validator error (gh-8512)[0m
2025-04-03T23:44:13.3825207Z   [32m  [32mâœ”[39m[0m[90m sets parent and ownerDocument correctly with document array default (gh-8509)[0m
2025-04-03T23:44:13.4042635Z   [32m  [32mâœ”[39m[0m[90m doesnt add `null` if property is undefined with minimize false (gh-8504)[0m
2025-04-03T23:44:13.4136247Z   [32m  [32mâœ”[39m[0m[90m creates document array defaults in forward order, not reverse (gh-8514)[0m
2025-04-03T23:44:13.4214507Z   [32m  [32mâœ”[39m[0m[90m can call subdocument validate multiple times in parallel (gh-8539)[0m
2025-04-03T23:44:13.4296696Z   [32m  [32mâœ”[39m[0m[90m sets `Document#op` when calling `validate()` (gh-8439)[0m
2025-04-03T23:44:13.4386321Z   [32m  [32mâœ”[39m[0m[90m schema-level transform (gh-8403)[0m
2025-04-03T23:44:13.4464149Z   [32m  [32mâœ”[39m[0m[90m transforms nested paths (gh-9543)[0m
2025-04-03T23:44:13.4662877Z   [32m  [32mâœ”[39m[0m[90m handles setting numeric paths with single nested subdocs (gh-8583)[0m
2025-04-03T23:44:13.4740382Z   [32m  [32mâœ”[39m[0m[90m setting nested array path to non-nested array wraps values top-down (gh-8544)[0m
2025-04-03T23:44:13.4820232Z   [32m  [32mâœ”[39m[0m[90m doesnt wrap empty nested array with insufficient depth[0m
2025-04-03T23:44:13.4907905Z   [32m  [32mâœ”[39m[0m[90m doesnt wipe out nested keys when setting nested key to empty object with minimize (gh-8565)[0m
2025-04-03T23:44:13.5056686Z   [32m  [32mâœ”[39m[0m[90m allows calling `validate()` in post validate hook without causing parallel validation error (gh-8597)[0m
2025-04-03T23:44:13.5198679Z   [32m  [32mâœ”[39m[0m[90m sets defaults when setting single nested subdoc (gh-8603)[0m
2025-04-03T23:44:13.5225869Z   [32m  [32mâœ”[39m[0m[90m handles validating single nested paths when specified in `pathsToValidate` (gh-8626)[0m
2025-04-03T23:44:13.5247518Z   [32m  [32mâœ”[39m[0m[90m copies immutable fields when constructing new doc from old doc (gh-8642)[0m
2025-04-03T23:44:13.5438203Z   [32m  [32mâœ”[39m[0m[90m can save nested array after setting (gh-8689)[0m
2025-04-03T23:44:13.5532637Z   [32m  [32mâœ”[39m[0m[90m handles validator errors on subdoc paths (gh-5226)[0m
2025-04-03T23:44:13.5604806Z   [32m  [32mâœ”[39m[0m[90m reports array cast error with index (gh-8888)[0m
2025-04-03T23:44:13.5721828Z   [32m  [32mâœ”[39m[0m[90m sets defaults if setting nested path to empty object with minimize false (gh-8829)[0m
2025-04-03T23:44:13.5818321Z   [32m  [32mâœ”[39m[0m[90m clears cast errors when setting an array subpath (gh-9080)[0m
2025-04-03T23:44:13.6025923Z   [32m  [32mâœ”[39m[0m[90m saves successfully if you splice() a sliced array (gh-9011)[0m
2025-04-03T23:44:13.6262363Z   [32m  [32mâœ”[39m[0m[90m handles modifying a subpath of a nested array of documents (gh-8926)[0m
2025-04-03T23:44:13.6393541Z   [32m  [32mâœ”[39m[0m[90m Document#save accepts `timestamps` option (gh-8947) for update[0m
2025-04-03T23:44:13.6548570Z   [32m  [32mâœ”[39m[0m[90m Document#save accepts `timestamps` option (gh-8947) on inserting a new document[0m
2025-04-03T23:44:13.6767774Z   [32m  [32mâœ”[39m[0m[90m Sets default when passing undefined as value for a key in a nested subdoc (gh-12102) (gh-9039)[0m
2025-04-03T23:44:13.6789172Z   [32m  [32mâœ”[39m[0m[90m allows accessing $locals when initializing (gh-9098)[0m
2025-04-03T23:44:13.6869607Z   [32m  [32mâœ”[39m[0m[90m supports skipping defaults on a document (gh-8271)[0m
2025-04-03T23:44:13.6951225Z   [32m  [32mâœ”[39m[0m[90m throws an error when `transform` returns a promise (gh-9163)[0m
2025-04-03T23:44:13.7139744Z   [32m  [32mâœ”[39m[0m[90m uses strict equality when checking mixed paths for modifications (gh-9165)[0m
2025-04-03T23:44:13.7257612Z   [32m  [32mâœ”[39m[0m[90m supports `useProjection` option for `toObject()` (gh-9118)[0m
2025-04-03T23:44:13.7446547Z   [32m  [32mâœ”[39m[0m[90m clears out priorDoc after overwriting single nested subdoc (gh-9208)[0m
2025-04-03T23:44:13.7606504Z   [32m  [32mâœ”[39m[0m[90m handles immutable properties underneath single nested subdocs when overwriting (gh-9281)[0m
2025-04-03T23:44:13.7717945Z   [32m  [32mâœ”[39m[0m[90m allows removing boolean key by setting it to `undefined` (gh-9275)[0m
2025-04-03T23:44:13.8174393Z   [32m  [32mâœ”[39m[0m[90m keeps manually populated paths when setting a nested path to itself (gh-9293)[0m[33m (38ms)[0m
2025-04-03T23:44:13.8302687Z   [32m  [32mâœ”[39m[0m[90m doesnt wipe out nested paths when setting a nested path to itself (gh-9313)[0m
2025-04-03T23:44:13.8516506Z   [32m  [32mâœ”[39m[0m[90m allows saving after setting document array to itself (gh-9266)[0m
2025-04-03T23:44:13.8804039Z   [32m  [32mâœ”[39m[0m[90m allows accessing document values from function default on array (gh-9351) (gh-6155)[0m
2025-04-03T23:44:13.9855772Z   [32m  [32mâœ”[39m[0m[90m handles pulling array subdocs when _id is an alias (gh-9319)[0m
2025-04-03T23:44:13.9886961Z   [32m  [32mâœ”[39m[0m[90m allows setting nested path to instance of model (gh-9392)[0m
2025-04-03T23:44:14.0078563Z   [32m  [32mâœ”[39m[0m[90m unmarks modified if setting a value to the same value as it was previously (gh-9396)[0m
2025-04-03T23:44:14.0281219Z   [32m  [32mâœ”[39m[0m[90m unmarks modified if setting a value to the same subdoc as it was previously (gh-9396)[0m
2025-04-03T23:44:14.0528442Z   [32m  [32mâœ”[39m[0m[90m does not unmark modified if there is no initial value (gh-9396)[0m
2025-04-03T23:44:14.0670690Z   [32m  [32mâœ”[39m[0m[90m correctly tracks saved state for deeply nested objects (gh-10773) (gh-9396)[0m
2025-04-03T23:44:14.0772376Z   [32m  [32mâœ”[39m[0m[90m marks path as errored if default function throws (gh-9408)[0m
2025-04-03T23:44:14.0860561Z   [32m  [32mâœ”[39m[0m[90m passes subdoc with initial values set to default function when init-ing (gh-9408)[0m
2025-04-03T23:44:14.0934616Z   [32m  [32mâœ”[39m[0m[90m passes document as an argument for `required` function in schema definition (gh-9433)[0m
2025-04-03T23:44:14.1015262Z   [32m  [32mâœ”[39m[0m[90m works with path named isSelected (gh-9438)[0m
2025-04-03T23:44:14.1089774Z   [32m  [32mâœ”[39m[0m[90m init tracks cast error reason (gh-9448)[0m
2025-04-03T23:44:14.1169285Z   [32m  [32mâœ”[39m[0m[90m correctly handles setting nested path underneath single nested subdocs (gh-9459)[0m
2025-04-03T23:44:14.1253718Z   [32m  [32mâœ”[39m[0m[90m $isValid() with space-delimited and array syntax (gh-9474)[0m
2025-04-03T23:44:14.1483029Z   [32m  [32mâœ”[39m[0m[90m avoids overwriting array subdocument when setting dotted path that is not selected (gh-9427)[0m
2025-04-03T23:44:14.1615850Z   [32m  [32mâœ”[39m[0m[90m ignore getters when diffing objects for change tracking (gh-9501)[0m
2025-04-03T23:44:14.1860242Z   [32m  [32mâœ”[39m[0m[90m allows defining middleware for all document hooks using regexp (gh-9190)[0m
2025-04-03T23:44:14.2023426Z   [32m  [32mâœ”[39m[0m[90m correctly handles setting nested props to other nested props (gh-9519)[0m
2025-04-03T23:44:14.2137141Z   [32m  [32mâœ”[39m[0m[90m sets fields after an undefined field (gh-9585)[0m
2025-04-03T23:44:14.2198931Z   [32m  [32mâœ”[39m[0m[90m passes document to `default` functions (gh-9633)[0m
2025-04-03T23:44:14.2287129Z   [32m  [32mâœ”[39m[0m[90m handles pre hook throwing a sync error (gh-9659)[0m
2025-04-03T23:44:14.2356089Z   [32m  [32mâœ”[39m[0m[90m returns undefined rather than entire object when calling `get()` with empty string (gh-9681)[0m
2025-04-03T23:44:14.2568118Z   [32m  [32mâœ”[39m[0m[90m keeps atomics when assigning array to filtered array (gh-9651)[0m
2025-04-03T23:44:14.2592359Z   [32m  [32mâœ”[39m[0m[90m does not pass doc to ObjectId or Date.now (gh-9633) (gh-9636)[0m
2025-04-03T23:44:14.2922857Z   [32m  [32mâœ”[39m[0m[90m supports getting a list of populated docs (gh-9702)[0m
2025-04-03T23:44:14.3173421Z   [32m  [32mâœ”[39m[0m[90m with virtual populate (gh-10148)[0m
2025-04-03T23:44:14.3297177Z   [32m  [32mâœ”[39m[0m[90m handles paths named `db` (gh-9798)[0m
2025-04-03T23:44:14.3523738Z   [32m  [32mâœ”[39m[0m[90m handles paths named `schema` gh-8798[0m
2025-04-03T23:44:14.3656227Z   [32m  [32mâœ”[39m[0m[90m handles nested paths named `schema` gh-8798[0m
2025-04-03T23:44:14.3955573Z   [32m  [32mâœ”[39m[0m[90m object setters will be applied for each object in array after populate (gh-9838)[0m
2025-04-03T23:44:14.4090791Z   [32m  [32mâœ”[39m[0m[90m gh9884[0m
2025-04-03T23:44:14.4324064Z   [32m  [32mâœ”[39m[0m[90m Makes sure pre deleteOne hook is executed (gh-9885)[0m
2025-04-03T23:44:14.4476376Z   [32m  [32mâœ”[39m[0m[90m gh9880[0m
2025-04-03T23:44:14.4609024Z   [32m  [32mâœ”[39m[0m[90m handles directly setting embedded document array element with projection (gh-9909)[0m
2025-04-03T23:44:14.4957676Z   [32m  [32mâœ”[39m[0m[90m toObject() uses child schema `flattenMaps` option by default (gh-9995)[0m
2025-04-03T23:44:14.5091581Z   [32m  [32mâœ”[39m[0m[90m does not double validate paths under mixed objects (gh-10141)[0m
2025-04-03T23:44:14.5340091Z   [32m  [32mâœ”[39m[0m[90m clears child document modified when setting map path underneath single nested (gh-10295)[0m
2025-04-03T23:44:14.5471720Z   [32m  [32mâœ”[39m[0m[90m avoids infinite recursion when setting single nested subdoc to array (gh-10351)[0m
2025-04-03T23:44:14.5579631Z   [32m  [32mâœ”[39m[0m[90m skips recursive merging (gh-9121)[0m
2025-04-03T23:44:14.5598216Z   [32m  [32mâœ”[39m[0m[90m does not pull non-schema paths from parent documents into nested paths (gh-10449)[0m
2025-04-03T23:44:14.5783857Z   [32m  [32mâœ”[39m[0m[90m sets properties in the order they are defined in the schema (gh-4665)[0m
2025-04-03T23:44:14.6149977Z   [32m  [32mâœ”[39m[0m[90m depopulate all should depopulate nested array population (gh-10592)[0m
2025-04-03T23:44:14.6334947Z   [32m  [32mâœ”[39m[0m[90m should allow dashes in the path name (gh-10677)[0m
2025-04-03T23:44:14.6359611Z   [32m  [32mâœ”[39m[0m[90m inits non-schema values if strict is false (gh-10828)[0m
2025-04-03T23:44:14.6445797Z   [32m  [32mâœ”[39m[0m[90m avoids depopulating when setting array of subdocs from different doc (gh-10819)[0m
2025-04-03T23:44:14.6724292Z   [32m  [32mâœ”[39m[0m[90m allows validating doc again if pre validate errors out (gh-10830)[0m
2025-04-03T23:44:14.6747691Z   [32m  [32mâœ”[39m[0m[90m ensures that doc.ownerDocument() and doc.parent() by default return this on the root document (gh-10884)[0m
2025-04-03T23:44:14.6834779Z   [32m  [32mâœ”[39m[0m[90m catches errors in `required` functions (gh-10968)[0m
2025-04-03T23:44:14.7034529Z   [32m  [32mâœ”[39m[0m[90m does not allow overwriting schema methods with strict: false (gh-11001)[0m
2025-04-03T23:44:14.7141385Z   [32m  [32mâœ”[39m[0m[90m allows setting nested to instance of document (gh-11011)[0m
2025-04-03T23:44:14.7410673Z   [32m  [32mâœ”[39m[0m[90m cleans modified paths on deeply nested subdocuments (gh-11060)[0m
2025-04-03T23:44:14.7768555Z   [32m  [32mâœ”[39m[0m[90m can manually populate subdocument refs (gh-10856)[0m
2025-04-03T23:44:14.7966170Z   [32m  [32mâœ”[39m[0m[90m can manually populate subdocument refs in `create()` (gh-10856)[0m
2025-04-03T23:44:14.8224631Z   [32m  [32mâœ”[39m[0m[90m populating subdocument refs underneath maps throws (gh-12494) (gh-10856)[0m
2025-04-03T23:44:14.8359100Z   [32m  [32mâœ”[39m[0m[90m handles save with undefined nested doc under subdoc (gh-11110)[0m
2025-04-03T23:44:14.8611489Z   [32m  [32mâœ”[39m[0m[90m correctly handles modifying array subdoc after setting array subdoc to same value (gh-11172)[0m
2025-04-03T23:44:14.8633417Z   [32m  [32mâœ”[39m[0m[90m handles `String` with `type` (gh-11199)[0m
2025-04-03T23:44:14.8944797Z   [32m  [32mâœ”[39m[0m[90m applies subdocument defaults when projecting dotted subdocument fields[0m
2025-04-03T23:44:14.9132968Z   [32m  [32mâœ”[39m[0m[90m handles initing nested properties in non-strict documents (gh-11309)[0m
2025-04-03T23:44:14.9269282Z   [32m  [32mâœ”[39m[0m[90m saves changes when setting a nested path to itself (gh-11395)[0m
2025-04-03T23:44:14.9364903Z   [32m  [32mâœ”[39m[0m[90m avoids setting nested properties on top-level document when init-ing with strict: false (gh-11526) (gh-11309)[0m
2025-04-03T23:44:14.9528399Z   [32m  [32mâœ”[39m[0m[90m handles deeply nested subdocuments when getting paths to validate (gh-11501)[0m
2025-04-03T23:44:14.9641576Z   [32m  [32mâœ”[39m[0m[90m handles casting array of spread documents (gh-11522)[0m
2025-04-03T23:44:14.9864335Z   [32m  [32mâœ”[39m[0m[90m avoids setting modified on subdocument defaults (gh-11528)[0m
2025-04-03T23:44:14.9991492Z   [32m  [32mâœ”[39m[0m[90m works when passing dot notation to mixed property (gh-1946)[0m
2025-04-03T23:44:15.0184876Z   [32m  [32mâœ”[39m[0m[90m correctly validates deeply nested document arrays (gh-11564)[0m
2025-04-03T23:44:15.0412611Z   [32m  [32mâœ”[39m[0m[90m reruns validation when modifying a document array path under a nested path after save (gh-11672)[0m
2025-04-03T23:44:15.0543415Z   [32m  [32mâœ”[39m[0m[90m avoids setting nested paths to null when they are set to `undefined` (gh-11723)[0m
2025-04-03T23:44:15.0757860Z   [32m  [32mâœ”[39m[0m[90m cleans modified subpaths when setting nested path under array to null when subpaths are modified (gh-11764)[0m
2025-04-03T23:44:15.1105463Z   [32m  [32mâœ”[39m[0m[90m avoids manually populating document that is manually populated in another doc with different unpopulatedValue (gh-11442) (gh-11008)[0m
2025-04-03T23:44:15.1140624Z   [32m  [32mâœ”[39m[0m[90m $getAllSubdocs gets document arrays underneath a nested path (gh-11917)[0m
2025-04-03T23:44:15.1228486Z   [32m  [32mâœ”[39m[0m[90m handles validation errors on deeply nested subdocuments underneath a nested path (gh-12021)[0m
2025-04-03T23:44:15.1363937Z   [32m  [32mâœ”[39m[0m[90m supports virtuals named `isValid` (gh-12124) (gh-6262)[0m
2025-04-03T23:44:15.1513727Z   [32m  [32mâœ”[39m[0m[90m handles maps when applying defaults to nested paths (gh-12220)[0m
2025-04-03T23:44:15.1699729Z   [32m  [32mâœ”[39m[0m[90m correct context for default functions in subdocuments with init (gh-12328)[0m
2025-04-03T23:44:15.1897446Z   [32m  [32mâœ”[39m[0m[90m applies defaults to pushed subdocs after initing document (gh-12515)[0m
2025-04-03T23:44:15.2014960Z   [32m  [32mâœ”[39m[0m[90m If the field does not exist, $inc should create it and set is value to the specified one (gh-12435)[0m
2025-04-03T23:44:15.2229354Z   [32m  [32mâœ”[39m[0m[90m avoids overwriting array if saving with no changes with array deselected (gh-12414)[0m
2025-04-03T23:44:15.2364263Z   [32m  [32mâœ”[39m[0m[90m $clone() (gh-11849)[0m
2025-04-03T23:44:15.2497240Z   [32m  [32mâœ”[39m[0m[90m $clone() with single nested and doc array (gh-14353) (gh-11849)[0m
2025-04-03T23:44:15.2658113Z   [32m  [32mâœ”[39m[0m[90m can create document with document array and top-level key named `schema` (gh-12480)[0m
2025-04-03T23:44:15.2951659Z   [32m  [32mâœ”[39m[0m[90m handles setting array to itself after saving and pushing a new value (gh-12656)[0m
2025-04-03T23:44:15.3070035Z   [32m  [32mâœ”[39m[0m[90m should not trigger isModified when setting a nested boolean to the same value as previously  (gh-12992)[0m
2025-04-03T23:44:15.3253111Z   [32m  [32mâœ”[39m[0m[90m saves single nested subdoc defaults (gh-12905)[0m
2025-04-03T23:44:15.3345190Z   [32m  [32mâœ”[39m[0m[90m $shift() triggers $pop[0m
2025-04-03T23:44:15.3369325Z   [32m  [32mâœ”[39m[0m[90m avoids setting array default if document array projected out by sibling projection (gh-13003)[0m
2025-04-03T23:44:15.3573700Z   [32m  [32mâœ”[39m[0m[90m avoids overwriting array with sibling projection (gh-13043)[0m
2025-04-03T23:44:15.3693943Z   [32m  [32mâœ”[39m[0m[90m can set() from top-level on nested schema with strict: false (gh-13327)[0m
2025-04-03T23:44:15.3882614Z   [32m  [32mâœ”[39m[0m[90m can set() from top-level on path underneath map of mixed (gh-13327)[0m
2025-04-03T23:44:15.4097359Z   [32m  [32mâœ”[39m[0m[90m should allow storing keys with dots in name in mixed under nested (gh-13530)[0m
2025-04-03T23:44:15.4286961Z   [32m  [32mâœ”[39m[0m[90m cleans up all array subdocs modified state on save (gh-13582)[0m
2025-04-03T23:44:15.4528855Z   [32m  [32mâœ”[39m[0m[90m cleans up all nested subdocs modified state on save (gh-13609)[0m
2025-04-03T23:44:15.4669534Z   [32m  [32mâœ”[39m[0m[90m avoids prototype pollution on init[0m
2025-04-03T23:44:15.4797111Z   [32m  [32mâœ”[39m[0m[90m does not modify array when calling getters (gh-13748)[0m
2025-04-03T23:44:15.5035459Z   [32m  [32mâœ”[39m[0m[90m sets defaults on subdocs with subdoc projection (gh-13720)[0m
2025-04-03T23:44:15.5207104Z   [32m  [32mâœ”[39m[0m[90m handles bigint (gh-13791)[0m
2025-04-03T23:44:15.5406282Z   [32m  [32mâœ”[39m[0m[90m should allow null values in list in self assignment (gh-13859)[0m
2025-04-03T23:44:15.5664060Z   [32m  [32mâœ”[39m[0m[90m bulkSave() picks up changes in pre("save") middleware (gh-13799)[0m
2025-04-03T23:44:15.5804517Z   [32m  [32mâœ”[39m[0m[90m bulkSave() allows skipping validation with validateBeforeSave (gh-15156)[0m
2025-04-03T23:44:15.5841553Z   [32m  [32mâœ”[39m[0m[90m handles default embedded discriminator values (gh-13835)[0m
2025-04-03T23:44:15.6041519Z   [32m  [32mâœ”[39m[0m[90m avoids saving changes to deselected paths (gh-13145) (gh-13062)[0m
2025-04-03T23:44:15.6427201Z   [32m  [32mâœ”[39m[0m[90m fires pre validate hooks on 4 level single nested subdocs (gh-13876)[0m
2025-04-03T23:44:15.6691357Z   [32m  [32mâœ”[39m[0m[90m fires pre validate hooks on 5 level deep single nested subdoc when modifying after save() (gh-14591)[0m
2025-04-03T23:44:15.6716942Z   [32m  [32mâœ”[39m[0m[90m returns constructor if using $model() with no args (gh-13878)[0m
2025-04-03T23:44:15.6983396Z   [32m  [32mâœ”[39m[0m[90m avoids creating separate subpaths entry for every element in array (gh-13874)[0m
2025-04-03T23:44:15.7129446Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators defined using Schema.prototype.discriminator (gh-13898)[0m
2025-04-03T23:44:15.7343572Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators defined using Schema.prototype.discriminator after defining schema (gh-14109) (gh-13898)[0m
2025-04-03T23:44:15.7619786Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators on nested path defined using Schema.prototype.discriminator (gh-14109) (gh-13898)[0m
2025-04-03T23:44:15.7739928Z   [32m  [32mâœ”[39m[0m[90m handles middleware on embedded discriminators on nested path defined using Schema.prototype.discriminator (gh-14961)[0m
2025-04-03T23:44:15.8108121Z   [32m  [32mâœ”[39m[0m[90m handles reusing schema with embedded discriminators defined using Schema.prototype.discriminator (gh-14162)[0m
2025-04-03T23:44:15.8246035Z   [32m  [32mâœ”[39m[0m[90m handles embedded recursive discriminators on nested path defined using Schema.prototype.discriminator (gh-14245)[0m
2025-04-03T23:44:15.8352462Z (node:1798) [MONGOOSE] Warning: `collection` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
2025-04-03T23:44:15.8353688Z (Use `node --trace-warnings ...` to show where the warning was created)
2025-04-03T23:44:15.8455656Z   [32m  [32mâœ”[39m[0m[90m can use `collection` as schema name (gh-13956)[0m
2025-04-03T23:44:15.8632778Z   [32m  [32mâœ”[39m[0m[90m avoids adding nested paths to markModified() output if adding a new field (gh-14024)[0m
2025-04-03T23:44:15.8856616Z   [32m  [32mâœ”[39m[0m[90m should allow null values in list in self assignment (gh-14172) (gh-13859)[0m
2025-04-03T23:44:15.9044672Z   [32m  [32mâœ”[39m[0m[90m avoids overwriting dotted paths in mixed path underneath nested path (gh-14178)[0m
2025-04-03T23:44:15.9123032Z   [32m  [32mâœ”[39m[0m[90m handles setting nested path to null (gh-14205)[0m
2025-04-03T23:44:15.9199058Z   [32m  [32mâœ”[39m[0m[90m handles setting nested path to undefined (gh-14205)[0m
2025-04-03T23:44:15.9372130Z   [32m  [32mâœ”[39m[0m[90m handles setting nested path to spread doc with extra properties (gh-14269)[0m
2025-04-03T23:44:15.9501849Z   [32m  [32mâœ”[39m[0m[90m includes virtuals in doc array toString() output if virtuals enabled on toObject (gh-14315)[0m
2025-04-03T23:44:15.9744752Z   [32m  [32mâœ”[39m[0m[90m minimizes when updating existing documents (gh-13782)[0m
2025-04-03T23:44:15.9961645Z   [32m  [32mâœ”[39m[0m[90m saves when setting subdocument to empty object (gh-14420) (gh-13782)[0m
2025-04-03T23:44:16.0172886Z   [32m  [32mâœ”[39m[0m[90m validate supports validateAllPaths[0m
2025-04-03T23:44:16.0380983Z   [32m  [32mâœ”[39m[0m[90m validateSync() supports validateAllPaths[0m
2025-04-03T23:44:16.0594898Z   [32m  [32mâœ”[39m[0m[90m minimize unsets property rather than setting to null (gh-14445)[0m
2025-04-03T23:44:16.1020784Z   [32m  [32mâœ”[39m[0m[90m avoids depopulating populated subdocs underneath document arrays when copying to another document (gh-14418)[0m
2025-04-03T23:44:16.1278864Z   [32m  [32mâœ”[39m[0m[90m handles virtuals that are stored as objects but getter returns string with toJSON (gh-14446)[0m
2025-04-03T23:44:16.1313944Z   [32m  [32mâœ”[39m[0m[90m isDirectModified on paths underneath direct modified subdoc (gh-14502)[0m
2025-04-03T23:44:16.1536348Z   [32m  [32mâœ”[39m[0m[90m avoids leaving subdoc _id in default state when setting subdocument to same value (gh-14722)[0m
2025-04-03T23:44:16.1777500Z   [32m  [32mâœ”[39m[0m[90m $clearModifiedPaths (gh-14268)[0m
2025-04-03T23:44:16.1922422Z   [32m  [32mâœ”[39m[0m[90m $createModifiedPathsSnapshot and $restoreModifiedPathsSnapshot (gh-14268)[0m
2025-04-03T23:44:16.2059063Z   [32m  [32mâœ”[39m[0m[90m post deleteOne hook (gh-9885)[0m
2025-04-03T23:44:16.2089277Z   [32m  [32mâœ”[39m[0m[90m applies virtuals to subschemas if top-level schema has virtuals: true (gh-14771)[0m
2025-04-03T23:44:16.2176499Z   [32m  [32mâœ”[39m[0m[90m calls required with correct context on single nested properties (gh-14788)[0m
2025-04-03T23:44:16.2408056Z   [32m  [32mâœ”[39m[0m[90m applies toObject() getters to 3 level deep subdocuments (gh-14840) (gh-14835)[0m
2025-04-03T23:44:16.5680135Z   [32m  [32mâœ”[39m[0m[90m handles inserting and saving large document with 10-level deep subdocs (gh-14897)[0m[31m (325ms)[0m
2025-04-03T23:44:16.5864195Z   [32m  [32mâœ”[39m[0m[90m avoids flattening objectids on insertMany (gh-14935)[0m
2025-04-03T23:44:16.6073661Z   [32m  [32mâœ”[39m[0m[90m handles buffers stored as EJSON POJO (gh-14911)[0m
2025-04-03T23:44:16.6336578Z   [32m  [32mâœ”[39m[0m[90m clears modified subpaths when setting deeply nested subdoc to null (gh-14952)[0m
2025-04-03T23:44:16.6476150Z   [32m  [32mâœ”[39m[0m[90m handles custom error message for duplicate key errors (gh-12844)[0m
2025-04-03T23:44:16.6502062Z   [32m  [32mâœ”[39m[0m[90m supports global transforms per schematype (gh-15084)[0m
2025-04-03T23:44:16.6743844Z   [32m  [32mâœ”[39m[0m[90m supports schemaFieldsOnly option for toObject() (gh-15258)[0m
2025-04-03T23:44:16.7267091Z   [32m  [32mâœ”[39m[0m[90m supports schemaFieldsOnly on nested paths, subdocuments, and arrays (gh-15258)[0m
2025-04-03T23:44:17.3925259Z   [32m  [32mâœ”[39m[0m[90m handles undoReset() on deep recursive subdocuments (gh-15255)[0m[31m (664ms)[0m
2025-04-03T23:44:17.4097552Z   [32m  [32mâœ”[39m[0m[90m handles selected paths on root discriminator (gh-15308)[0m
2025-04-03T23:44:17.4404867Z   [32m  [32mâœ”[39m[0m[90m avoids double validating document arrays underneath single nested (gh-15335)[0m
2025-04-03T23:44:17.4488408Z [0m    constructor[0m
2025-04-03T23:44:17.4493310Z     [32m  [32mâœ”[39m[0m[90m supports passing in schema directly (gh-8237)[0m
2025-04-03T23:44:17.4506258Z [0m    deleteOne[0m
2025-04-03T23:44:17.4601490Z     [32m  [32mâœ”[39m[0m[90m deletes the document[0m
2025-04-03T23:44:17.4676834Z [0m    updateOne[0m
2025-04-03T23:44:17.4787389Z     [32m  [32mâœ”[39m[0m[90m updates the document[0m
2025-04-03T23:44:17.4804604Z     [32m  [32mâœ”[39m[0m[90m returns a query[0m
2025-04-03T23:44:17.4911472Z     [32m  [32mâœ”[39m[0m[90m middleware (gh-8262)[0m
2025-04-03T23:44:17.5012410Z [0m    replaceOne[0m
2025-04-03T23:44:17.5135863Z     [32m  [32mâœ”[39m[0m[90m replaces the document[0m
2025-04-03T23:44:17.5155541Z [0m    shortcut getters[0m
2025-04-03T23:44:17.5159754Z     [32m  [32mâœ”[39m[0m[90m return undefined for properties with a null/undefined parent object (gh-1326)[0m
2025-04-03T23:44:17.5184086Z     [32m  [32mâœ”[39m[0m[90m work[0m
2025-04-03T23:44:17.5200597Z [0m    toObject[0m
2025-04-03T23:44:17.5344149Z     [32m  [32mâœ”[39m[0m[90m does not apply toObject functions of subdocuments to root document[0m
2025-04-03T23:44:17.5372451Z     [32m  [32mâœ”[39m[0m[90m handles child schema transforms[0m
2025-04-03T23:44:17.5658949Z     [32m  [32mâœ”[39m[0m[90m doesnt clobber child schema options when called with no params (gh-2035)[0m
2025-04-03T23:44:17.5685836Z     [32m  [32mâœ”[39m[0m[90m respects child schemas minimize (gh-9405)[0m
2025-04-03T23:44:17.5918242Z     [32m  [32mâœ”[39m[0m[90m minimizes single nested subdocs (gh-11247)[0m
2025-04-03T23:44:17.6064620Z     [32m  [32mâœ”[39m[0m[90m does not minimize single nested subdocs if they are required (gh-14058) (gh-11247)[0m
2025-04-03T23:44:17.6091132Z     [32m  [32mâœ”[39m[0m[90m should propagate toObject to implicitly created schemas (gh-13599) (gh-13325)[0m
2025-04-03T23:44:17.6160771Z [0m    toJSON[0m
2025-04-03T23:44:17.6172882Z     [32m  [32mâœ”[39m[0m[90m toJSON options[0m
2025-04-03T23:44:17.6188924Z     [32m  [32mâœ”[39m[0m[90m jsonifying an object[0m
2025-04-03T23:44:17.6474044Z     [32m  [32mâœ”[39m[0m[90m jsonifying an object's populated items works (gh-1376)[0m
2025-04-03T23:44:17.6582636Z     [32m  [32mâœ”[39m[0m[90m jsonifying with undefined path (gh-11922)[0m
2025-04-03T23:44:17.6680337Z     [32m  [32mâœ”[39m[0m[90m should propagate toJSON to implicitly created schemas (gh-13599) (gh-13325)[0m
2025-04-03T23:44:17.6743977Z [0m    inspect[0m
2025-04-03T23:44:17.6842107Z     [32m  [32mâœ”[39m[0m[90m inspect inherits schema options (gh-4001)[0m
2025-04-03T23:44:17.7187695Z     [32m  [32mâœ”[39m[0m[90m does not apply transform to populated docs (gh-4213)[0m
2025-04-03T23:44:17.7220287Z     [32m  [32mâœ”[39m[0m[90m handles infinite recursion (gh-11756)[0m
2025-04-03T23:44:17.7558535Z     [32m  [32mâœ”[39m[0m[90m populate on nested path (gh-5703)[0m
2025-04-03T23:44:17.7578608Z [0m    #update[0m
2025-04-03T23:44:17.7579548Z     [36m  - returns a Query[0m
2025-04-03T23:44:17.7580457Z     [36m  - calling update on document should relay to its model (gh-794)[0m
2025-04-03T23:44:17.7581260Z [0m    Errors[0m
2025-04-03T23:44:17.7583897Z     [32m  [32mâœ”[39m[0m[90m MongooseErrors should be instances of Error (gh-209)[0m
2025-04-03T23:44:17.7599188Z     [32m  [32mâœ”[39m[0m[90m ValidationErrors should be instances of Error[0m
2025-04-03T23:44:17.7612391Z [0m    #validate[0m
2025-04-03T23:44:17.7753482Z     [32m  [32mâœ”[39m[0m[90m works (gh-891)[0m
2025-04-03T23:44:17.7777944Z     [32m  [32mâœ”[39m[0m[90m can return a promise[0m
2025-04-03T23:44:17.7854283Z     [32m  [32mâœ”[39m[0m[90m doesnt have stale cast errors (gh-2766)[0m
2025-04-03T23:44:17.7960140Z     [32m  [32mâœ”[39m[0m[90m cast errors persist across validate() calls (gh-2766)[0m
2025-04-03T23:44:17.7978213Z     [32m  [32mâœ”[39m[0m[90m returns a promise when there are no validators[0m
2025-04-03T23:44:17.8146467Z     [32m  [32mâœ”[39m[0m[90m validator should run only once gh-1743[0m
2025-04-03T23:44:17.8386095Z     [32m  [32mâœ”[39m[0m[90m validator should run only once per sub-doc gh-1743[0m
2025-04-03T23:44:17.8470609Z [0m      works on arrays[0m
2025-04-03T23:44:17.8611219Z       [32m  [32mâœ”[39m[0m[90m with required[0m
2025-04-03T23:44:17.8757547Z       [32m  [32mâœ”[39m[0m[90m with custom validator[0m
2025-04-03T23:44:17.8896904Z       [32m  [32mâœ”[39m[0m[90m with both required + custom validator[0m
2025-04-03T23:44:17.8912453Z [0m    #equals[0m
2025-04-03T23:44:17.8913006Z [0m      should work[0m
2025-04-03T23:44:17.8933980Z       [32m  [32mâœ”[39m[0m[90m with string _ids[0m
2025-04-03T23:44:17.9181366Z       [32m  [32mâœ”[39m[0m[90m with number _ids[0m
2025-04-03T23:44:17.9198665Z       [32m  [32mâœ”[39m[0m[90m with ObjectId _ids[0m
2025-04-03T23:44:17.9216240Z       [32m  [32mâœ”[39m[0m[90m with Buffer _ids[0m
2025-04-03T23:44:17.9231951Z       [32m  [32mâœ”[39m[0m[90m with _id disabled (gh-1687)[0m
2025-04-03T23:44:17.9247368Z [0m    setter[0m
2025-04-03T23:44:17.9253416Z     [32m  [32mâœ”[39m[0m[90m works with undefined (gh-1892)[0m
2025-04-03T23:44:17.9277424Z     [32m  [32mâœ”[39m[0m[90m passes priorVal (gh-8629)[0m
2025-04-03T23:44:17.9346189Z [0m      order[0m
2025-04-03T23:44:17.9349436Z       [32m  [32mâœ”[39m[0m[90m is applied correctly[0m
2025-04-03T23:44:17.9362457Z [0m      on nested paths[0m
2025-04-03T23:44:17.9363162Z [0m        using set(path, object)[0m
2025-04-03T23:44:17.9367266Z         [32m  [32mâœ”[39m[0m[90m overwrites the entire object[0m
2025-04-03T23:44:17.9386849Z         [32m  [32mâœ”[39m[0m[90m allows positional syntax on mixed nested paths (gh-6738)[0m
2025-04-03T23:44:17.9461176Z         [32m  [32mâœ”[39m[0m[90m gh-1954[0m
2025-04-03T23:44:17.9526375Z [0m        when overwriting with a document instance[0m
2025-04-03T23:44:17.9530508Z         [32m  [32mâœ”[39m[0m[90m does not cause StackOverflows (gh-1234)[0m
2025-04-03T23:44:17.9543272Z [0m    virtual[0m
2025-04-03T23:44:17.9551607Z     [32m  [32mâœ”[39m[0m[90m passes doc as third param for arrow functions (gh-4143)[0m
2025-04-03T23:44:17.9619375Z [0m      setter[0m
2025-04-03T23:44:17.9626139Z       [32m  [32mâœ”[39m[0m[90m works with objects[0m
2025-04-03T23:44:17.9710170Z       [32m  [32mâœ”[39m[0m[90m works with arrays[0m
2025-04-03T23:44:17.9789363Z       [32m  [32mâœ”[39m[0m[90m works with numbers[0m
2025-04-03T23:44:17.9861083Z       [32m  [32mâœ”[39m[0m[90m works with strings[0m
2025-04-03T23:44:17.9934489Z [0m    gh-2082[0m
2025-04-03T23:44:18.0074707Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:18.0091037Z [0m    gh-1933[0m
2025-04-03T23:44:18.0217716Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:18.0237793Z [0m    gh-1638[0m
2025-04-03T23:44:18.0392543Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:18.0502576Z [0m    gh-2434[0m
2025-04-03T23:44:18.0620527Z     [32m  [32mâœ”[39m[0m[90m will save the new value[0m
2025-04-03T23:44:18.0638729Z [0m    gh-8371[0m
2025-04-03T23:44:18.0850331Z     [32m  [32mâœ”[39m[0m[90m setting isNew to true makes save tries to insert a new document (gh-8371)[0m
2025-04-03T23:44:18.1031827Z     [32m  [32mâœ”[39m[0m[90m setting isNew to true throws an error when a document already exists (gh-8371)[0m
2025-04-03T23:44:18.1236526Z     [32m  [32mâœ”[39m[0m[90m saving a document with no changes, throws an error when document is not found[0m
2025-04-03T23:44:18.1469039Z     [32m  [32mâœ”[39m[0m[90m saving a document when version bump required, throws a VersionError when document is not found (gh-10974)[0m
2025-04-03T23:44:18.1682505Z     [32m  [32mâœ”[39m[0m[90m saving a document with changes, throws an error when document is not found[0m
2025-04-03T23:44:18.1699830Z [0m    bug fixes[0m
2025-04-03T23:44:18.1962309Z     [32m  [32mâœ”[39m[0m[90m applies toJSON transform correctly for populated docs (gh-2910) (gh-2990)[0m
2025-04-03T23:44:18.2102605Z     [32m  [32mâœ”[39m[0m[90m single nested schema transform with save() (gh-5807)[0m
2025-04-03T23:44:18.2194895Z     [32m  [32mâœ”[39m[0m[90m setters firing with objects on real paths (gh-2943)[0m
2025-04-03T23:44:18.2269868Z     [32m  [32mâœ”[39m[0m[90m set data from subdoc keys (gh-3346)[0m
2025-04-03T23:44:18.2352248Z     [32m  [32mâœ”[39m[0m[90m doesnt attempt to cast generic objects as strings (gh-3030)[0m
2025-04-03T23:44:18.2537582Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas 1 (gh-2689)[0m
2025-04-03T23:44:18.2638018Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas with validation (gh-2689)[0m
2025-04-03T23:44:18.2713362Z     [32m  [32mâœ”[39m[0m[90m single embedded parent() (gh-5134)[0m
2025-04-03T23:44:18.2919741Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas with markmodified (gh-2689)[0m
2025-04-03T23:44:18.3163376Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas + update validators (gh-2689)[0m
2025-04-03T23:44:18.3290470Z     [32m  [32mâœ”[39m[0m[90m single embedded schema update validators ignore _id (gh-6269)[0m
2025-04-03T23:44:18.3391697Z [0m      gh-2782[0m
2025-04-03T23:44:18.3401451Z       [32m  [32mâœ”[39m[0m[90m should set data from a sub doc[0m
2025-04-03T23:44:18.3532535Z [0m    error processing (gh-2284)[0m
2025-04-03T23:44:18.3542315Z     [32m  [32mâœ”[39m[0m[90m save errors[0m
2025-04-03T23:44:18.3625347Z     [32m  [32mâœ”[39m[0m[90m validate errors (gh-4885)[0m
2025-04-03T23:44:18.3804773Z     [32m  [32mâœ”[39m[0m[90m does not filter validation on unmodified paths when validateModifiedOnly not set (gh-7421)[0m
2025-04-03T23:44:18.4009257Z     [32m  [32mâœ”[39m[0m[90m filters out validation on unmodified paths when validateModifiedOnly set (gh-7421) (gh-9963)[0m
2025-04-03T23:44:18.4189736Z     [32m  [32mâœ”[39m[0m[90m does not filter validation on modified paths when validateModifiedOnly set (gh-7421)[0m
2025-04-03T23:44:18.4380787Z     [32m  [32mâœ”[39m[0m[90m validateModifiedOnly with pre existing validation error (gh-8091)[0m
2025-04-03T23:44:18.4550959Z     [32m  [32mâœ”[39m[0m[90m should use schema-level validateModifiedOnly option if not in options[0m
2025-04-03T23:44:18.4710248Z     [32m  [32mâœ”[39m[0m[90m handles non-errors[0m
2025-04-03T23:44:18.4918119Z     [32m  [32mâœ”[39m[0m[90m fully validates modified subdocs (gh-14677)[0m
2025-04-03T23:44:18.5163272Z     [32m  [32mâœ”[39m[0m[90m fully validates modified single nested subdocs (gh-14677)[0m
2025-04-03T23:44:18.5183023Z [0m    bug fixes[0m
2025-04-03T23:44:18.5472675Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas with populate (gh-3501)[0m
2025-04-03T23:44:18.5497757Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas with methods (gh-3534)[0m
2025-04-03T23:44:18.5711846Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas with models (gh-3535)[0m
2025-04-03T23:44:18.5835193Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas with indexes (gh-3594)[0m
2025-04-03T23:44:18.5948974Z     [32m  [32mâœ”[39m[0m[90m removing single embedded docs (gh-3596)[0m
2025-04-03T23:44:18.6150443Z     [32m  [32mâœ”[39m[0m[90m setting single embedded docs (gh-3601)[0m
2025-04-03T23:44:18.6277422Z     [32m  [32mâœ”[39m[0m[90m single embedded docs init obeys strict mode (gh-3642)[0m
2025-04-03T23:44:18.6478838Z     [32m  [32mâœ”[39m[0m[90m single embedded docs post hooks (gh-3679)[0m
2025-04-03T23:44:18.6664379Z     [32m  [32mâœ”[39m[0m[90m single embedded docs .set() (gh-3686)[0m
2025-04-03T23:44:18.6848717Z     [32m  [32mâœ”[39m[0m[90m single embedded docs with arrays pre hooks (gh-3680)[0m
2025-04-03T23:44:18.6951824Z     [32m  [32mâœ”[39m[0m[90m nested single embedded doc validation (gh-3702)[0m
2025-04-03T23:44:18.7032540Z     [32m  [32mâœ”[39m[0m[90m handles virtuals with dots correctly (gh-3618)[0m
2025-04-03T23:44:18.7228200Z     [32m  [32mâœ”[39m[0m[90m handles pushing with numeric keys (gh-3623)[0m
2025-04-03T23:44:18.7485555Z     [32m  [32mâœ”[39m[0m[90m handles 0 for numeric subdoc ids (gh-3776)[0m
2025-04-03T23:44:18.7512111Z     [32m  [32mâœ”[39m[0m[90m handles conflicting names (gh-3867)[0m
2025-04-03T23:44:18.7839520Z     [32m  [32mâœ”[39m[0m[90m populate with lean (gh-3873)[0m
2025-04-03T23:44:18.7965889Z     [32m  [32mâœ”[39m[0m[90m init single nested subdoc with select (gh-3880)[0m
2025-04-03T23:44:18.8136650Z     [32m  [32mâœ”[39m[0m[90m single nested subdoc isModified() (gh-3910)[0m
2025-04-03T23:44:18.8312060Z     [32m  [32mâœ”[39m[0m[90m pre and post as schema keys (gh-3902)[0m
2025-04-03T23:44:18.8688232Z     [32m  [32mâœ”[39m[0m[90m manual population and isNew (gh-3982)[0m
2025-04-03T23:44:18.8965898Z     [32m  [32mâœ”[39m[0m[90m manual populattion with ref function (gh-15138)[0m
2025-04-03T23:44:18.9207282Z     [32m  [32mâœ”[39m[0m[90m manual population with refPath (gh-7070)[0m
2025-04-03T23:44:18.9314306Z     [32m  [32mâœ”[39m[0m[90m doesnt skipId for single nested subdocs (gh-4008)[0m
2025-04-03T23:44:18.9517807Z     [32m  [32mâœ”[39m[0m[90m single embedded docs with $near (gh-4014)[0m
2025-04-03T23:44:18.9540079Z     [32m  [32mâœ”[39m[0m[90m skip validation if required returns false (gh-4094)[0m
2025-04-03T23:44:18.9689965Z     [32m  [32mâœ”[39m[0m[90m ability to overwrite array default (gh-4109)[0m
2025-04-03T23:44:19.0263210Z     [32m  [32mâœ”[39m[0m[90m can set array default to null (gh-14717)[0m
2025-04-03T23:44:19.0465653Z     [32m  [32mâœ”[39m[0m[90m validation works when setting array index (gh-3816)[0m
2025-04-03T23:44:19.0660115Z     [32m  [32mâœ”[39m[0m[90m validateSync works when setting array index nested (gh-5389)[0m
2025-04-03T23:44:19.0684174Z     [32m  [32mâœ”[39m[0m[90m single embedded with defaults have $parent (gh-4115)[0m
2025-04-03T23:44:19.0849686Z     [32m  [32mâœ”[39m[0m[90m removing parent doc calls deleteOne hooks on subdocs (gh-2348) (gh-4566)[0m
2025-04-03T23:44:19.1036893Z     [32m  [32mâœ”[39m[0m[90m set() empty obj unmodifies subpaths (gh-4182)[0m
2025-04-03T23:44:19.1219437Z     [32m  [32mâœ”[39m[0m[90m clears subpaths when removing single nested (gh-4216)[0m
2025-04-03T23:44:19.1466553Z     [32m  [32mâœ”[39m[0m[90m setting path to empty object works (gh-4218)[0m
2025-04-03T23:44:19.1617406Z     [32m  [32mâœ”[39m[0m[90m setting path to object with strict and no paths in the schema (gh-6436) (gh-4218)[0m
2025-04-03T23:44:19.1721713Z     [32m  [32mâœ”[39m[0m[90m minimize + empty object (gh-4337)[0m
2025-04-03T23:44:19.1898086Z     [32m  [32mâœ”[39m[0m[90m directModifiedPaths() (gh-7373)[0m
2025-04-03T23:44:19.2196951Z     [32m  [32mâœ”[39m[0m[90m single nested isNew (gh-4369)[0m
2025-04-03T23:44:19.2222854Z     [32m  [32mâœ”[39m[0m[90m deep default array values (gh-4540)[0m
2025-04-03T23:44:19.2391502Z     [32m  [32mâœ”[39m[0m[90m default values with subdoc array (gh-4390)[0m
2025-04-03T23:44:19.2500499Z     [32m  [32mâœ”[39m[0m[90m handles invalid dates (gh-4404)[0m
2025-04-03T23:44:19.2587165Z     [32m  [32mâœ”[39m[0m[90m setting array subpath (gh-4472)[0m
2025-04-03T23:44:19.2827957Z     [32m  [32mâœ”[39m[0m[90m ignore paths (gh-4480)[0m
2025-04-03T23:44:19.2996860Z     [32m  [32mâœ”[39m[0m[90m ignore subdocs paths (gh-4480) (gh-6152)[0m
2025-04-03T23:44:19.3137021Z     [32m  [32mâœ”[39m[0m[90m composite _ids (gh-4542)[0m
2025-04-03T23:44:19.3240706Z     [32m  [32mâœ”[39m[0m[90m validateSync with undefined and conditional required (gh-4607)[0m
2025-04-03T23:44:19.3332443Z     [32m  [32mâœ”[39m[0m[90m conditional required on single nested (gh-4663)[0m
2025-04-03T23:44:19.3512380Z     [32m  [32mâœ”[39m[0m[90m setting full path under single nested schema works (gh-4578) (gh-4528)[0m
2025-04-03T23:44:19.3720115Z     [32m  [32mâœ”[39m[0m[90m setting a nested path retains nested modified paths (gh-5206)[0m
2025-04-03T23:44:19.3837798Z     [32m  [32mâœ”[39m[0m[90m toObject() does not depopulate top level (gh-3057)[0m
2025-04-03T23:44:19.3976317Z     [32m  [32mâœ”[39m[0m[90m toObject() respects schema-level depopulate (gh-6313)[0m
2025-04-03T23:44:19.4097962Z     [32m  [32mâœ”[39m[0m[90m single nested doc conditional required (gh-4654)[0m
2025-04-03T23:44:19.4317582Z     [32m  [32mâœ”[39m[0m[90m handles setting single nested schema to equal value (gh-4676)[0m
2025-04-03T23:44:19.4463545Z     [32m  [32mâœ”[39m[0m[90m handles setting single nested doc to null after setting (gh-4766)[0m
2025-04-03T23:44:19.4606089Z     [32m  [32mâœ”[39m[0m[90m buffers with subtypes as ids (gh-4506)[0m
2025-04-03T23:44:19.4695367Z     [32m  [32mâœ”[39m[0m[90m embedded docs dont mark parent as invalid (gh-4681)[0m
2025-04-03T23:44:19.5024223Z     [32m  [32mâœ”[39m[0m[90m should depopulate the shard key when saving (gh-4658)[0m
2025-04-03T23:44:19.5053645Z     [32m  [32mâœ”[39m[0m[90m handles setting virtual subpaths (gh-4716)[0m
2025-04-03T23:44:19.5253861Z     [32m  [32mâœ”[39m[0m[90m handles selected nested elements with defaults (gh-4739) (gh-11376)[0m
2025-04-03T23:44:19.5350098Z     [32m  [32mâœ”[39m[0m[90m handles mark valid in subdocs correctly (gh-4778)[0m
2025-04-03T23:44:19.5545675Z     [32m  [32mâœ”[39m[0m[90m timestamps set to false works (gh-7074)[0m
2025-04-03T23:44:19.5720778Z     [32m  [32mâœ”[39m[0m[90m timestamps with nested paths (gh-5051)[0m
2025-04-03T23:44:19.5828420Z     [32m  [32mâœ”[39m[0m[90m Declaring defaults in your schema with timestamps defined (gh-6024)[0m
2025-04-03T23:44:19.6054952Z     [32m  [32mâœ”[39m[0m[90m supports $where in pre save hook (gh-4004)[0m
2025-04-03T23:44:19.6180323Z     [32m  [32mâœ”[39m[0m[90m toObject() with buffer and minimize (gh-4800)[0m
2025-04-03T23:44:19.6278565Z     [32m  [32mâœ”[39m[0m[90m buffer subtype prop (gh-5530)[0m
2025-04-03T23:44:19.6469690Z     [32m  [32mâœ”[39m[0m[90m runs validate hooks on single nested subdocs if not directly modified (gh-3884)[0m
2025-04-03T23:44:19.6711011Z     [32m  [32mâœ”[39m[0m[90m runs validate hooks on arrays subdocs if not directly modified (gh-5861)[0m
2025-04-03T23:44:19.6832700Z     [32m  [32mâœ”[39m[0m[90m does not run schema type validator on single nested if not direct modified (gh-5885)[0m
2025-04-03T23:44:19.6959160Z     [32m  [32mâœ”[39m[0m[90m runs schema type validator on single nested if parent has default (gh-7493)[0m
2025-04-03T23:44:19.7045339Z     [32m  [32mâœ”[39m[0m[90m does not overwrite when setting nested (gh-4793)[0m
2025-04-03T23:44:19.7227764Z     [32m  [32mâœ”[39m[0m[90m hooks/middleware for custom methods (gh-6385) (gh-7456)[0m
2025-04-03T23:44:19.7308068Z     [32m  [32mâœ”[39m[0m[90m custom methods with promises (gh-6385)[0m
2025-04-03T23:44:19.7373968Z     [32m  [32mâœ”[39m[0m[90m toString() as custom method (gh-6538)[0m
2025-04-03T23:44:19.7450947Z     [32m  [32mâœ”[39m[0m[90m setting to discriminator (gh-4935)[0m
2025-04-03T23:44:19.7710520Z     [32m  [32mâœ”[39m[0m[90m handles errors in sync validators (gh-2185)[0m
2025-04-03T23:44:19.7866289Z     [32m  [32mâœ”[39m[0m[90m allows hook as a schema key (gh-5047)[0m
2025-04-03T23:44:19.8109727Z     [32m  [32mâœ”[39m[0m[90m save errors with callback and promise work (gh-5216)[0m
2025-04-03T23:44:19.8229892Z     [32m  [32mâœ”[39m[0m[90m post hooks on child subdocs run after save (gh-5085)[0m
2025-04-03T23:44:19.8451818Z     [32m  [32mâœ”[39m[0m[90m post hooks on array child subdocs run after save (gh-5085) (gh-6926)[0m
2025-04-03T23:44:19.8481063Z     [32m  [32mâœ”[39m[0m[90m nested docs toObject() clones (gh-5008)[0m
2025-04-03T23:44:19.8556494Z     [32m  [32mâœ”[39m[0m[90m toObject() with null (gh-5143)[0m
2025-04-03T23:44:19.8639153Z     [32m  [32mâœ”[39m[0m[90m handles array subdocs with single nested subdoc default (gh-5162)[0m
2025-04-03T23:44:19.8711759Z     [32m  [32mâœ”[39m[0m[90m iterating through nested doc keys (gh-5078)[0m
2025-04-03T23:44:19.8806926Z     [32m  [32mâœ”[39m[0m[90m deeply nested virtual paths (gh-5250)[0m
2025-04-03T23:44:19.9134195Z     [32m  [32mâœ”[39m[0m[90m nested virtual when populating with parent projected out (gh-7491)[0m
2025-04-03T23:44:19.9175767Z     [32m  [32mâœ”[39m[0m[90m JSON.stringify nested errors (gh-5208)[0m
2025-04-03T23:44:19.9268275Z     [32m  [32mâœ”[39m[0m[90m handles errors in subdoc pre validate (gh-5215)[0m
2025-04-03T23:44:19.9348975Z     [32m  [32mâœ”[39m[0m[90m custom error types (gh-4009)[0m
2025-04-03T23:44:19.9540343Z     [32m  [32mâœ”[39m[0m[90m saving a doc with nested string array (gh-5282)[0m
2025-04-03T23:44:19.9677992Z     [32m  [32mâœ”[39m[0m[90m push() onto a nested doc array (gh-6398)[0m
2025-04-03T23:44:19.9820275Z     [32m  [32mâœ”[39m[0m[90m push() onto a triple nested doc array (gh-6602) (gh-6398)[0m
2025-04-03T23:44:19.9988148Z     [32m  [32mâœ”[39m[0m[90m null _id (gh-5236)[0m
2025-04-03T23:44:20.0102586Z     [32m  [32mâœ”[39m[0m[90m setting populated path with typeKey (gh-5313)[0m
2025-04-03T23:44:20.0357450Z     [32m  [32mâœ”[39m[0m[90m save twice with write concern (gh-5294)[0m
2025-04-03T23:44:20.0469310Z     [32m  [32mâœ”[39m[0m[90m undefined field with conditional required (gh-5296)[0m
2025-04-03T23:44:20.0576053Z     [32m  [32mâœ”[39m[0m[90m dotted virtuals in toObject (gh-5473)[0m
2025-04-03T23:44:20.0790232Z     [32m  [32mâœ”[39m[0m[90m dotted virtuals in toObject (gh-5506)[0m
2025-04-03T23:44:20.0878449Z     [32m  [32mâœ”[39m[0m[90m parent props not in child (gh-5470)[0m
2025-04-03T23:44:20.1124508Z     [32m  [32mâœ”[39m[0m[90m modifying array with existing ids (gh-5523)[0m
2025-04-03T23:44:20.1246347Z     [32m  [32mâœ”[39m[0m[90m consistent setter context for single nested (gh-5363)[0m
2025-04-03T23:44:20.1464519Z     [32m  [32mâœ”[39m[0m[90m deeply nested subdocs and markModified (gh-5406)[0m
2025-04-03T23:44:20.1636607Z     [32m  [32mâœ”[39m[0m[90m single nested subdoc post deleteOne hooks (gh-5388)[0m
2025-04-03T23:44:20.1671705Z     [32m  [32mâœ”[39m[0m[90m push populated doc onto empty array triggers manual population (gh-5504)[0m
2025-04-03T23:44:20.1857951Z     [32m  [32mâœ”[39m[0m[90m single nested conditional required scope (gh-5569)[0m
2025-04-03T23:44:20.1959707Z     [32m  [32mâœ”[39m[0m[90m single nested setters only get called once (gh-5601)[0m
2025-04-03T23:44:20.2037536Z     [32m  [32mâœ”[39m[0m[90m single getters only get called once (gh-7442)[0m
2025-04-03T23:44:20.2113745Z     [32m  [32mâœ”[39m[0m[90m calls subdocument getters if child schema has getters: true (gh-12105)[0m
2025-04-03T23:44:20.2418899Z     [32m  [32mâœ”[39m[0m[90m setting doc array to array of top-level docs works (gh-5632)[0m
2025-04-03T23:44:20.2528779Z     [32m  [32mâœ”[39m[0m[90m Using set as a schema path (gh-1939)[0m
2025-04-03T23:44:20.2619039Z     [32m  [32mâœ”[39m[0m[90m handles array defaults correctly (gh-5780)[0m
2025-04-03T23:44:20.2797388Z     [32m  [32mâœ”[39m[0m[90m sets path to the empty string on save after query (gh-6477)[0m
2025-04-03T23:44:20.2962538Z     [32m  [32mâœ”[39m[0m[90m sets path to the default boolean on save after query (gh-6477)[0m
2025-04-03T23:44:20.3040495Z     [32m  [32mâœ”[39m[0m[90m virtuals with no getters return undefined (gh-6223)[0m
2025-04-03T23:44:20.3104222Z     [32m  [32mâœ”[39m[0m[90m add default getter/setter (gh-6262)[0m
2025-04-03T23:44:20.3182769Z     [32m  [32mâœ”[39m[0m[90m calls array getters (gh-9889)[0m
2025-04-03T23:44:20.3370319Z     [32m  [32mâœ”[39m[0m[90m doesnt call setters when init-ing an array (gh-9889)[0m
2025-04-03T23:44:20.3465321Z     [32m  [32mâœ”[39m[0m[90m nested virtuals + nested toJSON (gh-6294)[0m
2025-04-03T23:44:20.3545714Z     [32m  [32mâœ”[39m[0m[90m Disallows writing to __proto__ and other special properties[0m
2025-04-03T23:44:20.3856049Z     [32m  [32mâœ”[39m[0m[90m save() depopulates pushed arrays (gh-6048)[0m
2025-04-03T23:44:20.4106153Z     [32m  [32mâœ”[39m[0m[90m Handles setting populated path set via `Document#populate()` (gh-7302)[0m
2025-04-03T23:44:20.4216945Z     [32m  [32mâœ”[39m[0m[90m Single nested subdocs using discriminator can be modified (gh-5693)[0m
2025-04-03T23:44:20.4366485Z     [32m  [32mâœ”[39m[0m[90m required function only gets called once (gh-6801)[0m
2025-04-03T23:44:20.4590214Z     [32m  [32mâœ”[39m[0m[90m required function called again after save() (gh-6892)[0m
2025-04-03T23:44:20.4772980Z     [32m  [32mâœ”[39m[0m[90m doc array: set then remove (gh-3511)[0m
2025-04-03T23:44:20.4966555Z     [32m  [32mâœ”[39m[0m[90m doc array: modify then sort (gh-7556)[0m
2025-04-03T23:44:20.5151411Z     [32m  [32mâœ”[39m[0m[90m modifying unselected nested object (gh-5800)[0m
2025-04-03T23:44:20.5321958Z     [32m  [32mâœ”[39m[0m[90m set() underneath embedded discriminator (gh-6482)[0m
2025-04-03T23:44:20.5476555Z     [32m  [32mâœ”[39m[0m[90m set() underneath array embedded discriminator (gh-6526)[0m
2025-04-03T23:44:20.5596167Z     [32m  [32mâœ”[39m[0m[90m consistent context for nested docs (gh-5347)[0m
2025-04-03T23:44:20.5689687Z     [32m  [32mâœ”[39m[0m[90m accessing arrays in setters on initial document creation (gh-6155)[0m
2025-04-03T23:44:20.5765410Z     [32m  [32mâœ”[39m[0m[90m handles 2nd level nested field with null child (gh-6187)[0m
2025-04-03T23:44:20.5929168Z     [32m  [32mâœ”[39m[0m[90m does not call default function on init if value set (gh-6410)[0m
2025-04-03T23:44:20.6025697Z     [32m  [32mâœ”[39m[0m[90m doesnt double-call getters when using get() (gh-6779)[0m
2025-04-03T23:44:20.6100081Z     [32m  [32mâœ”[39m[0m[90m returns doubly nested field in inline sub schema when using get() (gh-6925)[0m
2025-04-03T23:44:20.6257846Z     [32m  [32mâœ”[39m[0m[90m defaults should see correct isNew (gh-3793)[0m
2025-04-03T23:44:20.6475740Z     [32m  [32mâœ”[39m[0m[90m modify multiple subdoc paths (gh-4405)[0m
2025-04-03T23:44:20.6699795Z     [32m  [32mâœ”[39m[0m[90m doesnt try to cast populated embedded docs (gh-6390)[0m
2025-04-03T23:44:20.6715855Z [0m      modifiedPaths[0m
2025-04-03T23:44:20.6852308Z       [32m  [32mâœ”[39m[0m[90m doesnt markModified child paths if parent is modified (gh-4224)[0m
2025-04-03T23:44:20.6876864Z       [32m  [32mâœ”[39m[0m[90m includeChildren option (gh-6134)[0m
2025-04-03T23:44:20.6958543Z       [32m  [32mâœ”[39m[0m[90m includeChildren option with arrays (gh-5904)[0m
2025-04-03T23:44:20.7039674Z       [32m  [32mâœ”[39m[0m[90m 1 level down nested paths get marked modified on initial set (gh-7313) (gh-6944)[0m
2025-04-03T23:44:20.7117530Z [0m      convertToFalse and convertToTrue (gh-6758)[0m
2025-04-03T23:44:20.7218787Z       [32m  [32mâœ”[39m[0m[90m lets you add custom strings that get converted to true/false[0m
2025-04-03T23:44:20.7304895Z       [32m  [32mâœ”[39m[0m[90m allows adding `null` to list of values that convert to false (gh-9223)[0m
2025-04-03T23:44:20.7368797Z [0m    clobbered Array.prototype[0m
2025-04-03T23:44:20.7387979Z     [32m  [32mâœ”[39m[0m[90m handles clobbered Array.prototype.remove (gh-6431)[0m
2025-04-03T23:44:20.7605757Z     [32m  [32mâœ”[39m[0m[90m calls array validators again after save (gh-6818)[0m
2025-04-03T23:44:20.7667767Z     [32m  [32mâœ”[39m[0m[90m set single nested to num throws ObjectExpectedError (gh-6710) (gh-6753)[0m
2025-04-03T23:44:20.7750227Z     [32m  [32mâœ”[39m[0m[90m set array to false throws ObjectExpectedError (gh-7242)[0m
2025-04-03T23:44:20.7823759Z [0m    overwrite() (gh-7830)[0m
2025-04-03T23:44:20.7920997Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:20.8133238Z     [32m  [32mâœ”[39m[0m[90m skips version key[0m
2025-04-03T23:44:20.8351834Z     [32m  [32mâœ”[39m[0m[90m skips discriminator key[0m
2025-04-03T23:44:20.8770124Z     [32m  [32mâœ”[39m[0m[90m overwrites maps (gh-9549)[0m
2025-04-03T23:44:20.8998705Z [0m    immutable properties (gh-7671)[0m
2025-04-03T23:44:20.9007822Z     [32m  [32mâœ”[39m[0m[90m SchemaType#immutable()[0m
2025-04-03T23:44:20.9339860Z     [32m  [32mâœ”[39m[0m[90m with save()[0m
2025-04-03T23:44:20.9461327Z     [32m  [32mâœ”[39m[0m[90m with update[0m
2025-04-03T23:44:20.9710927Z     [32m  [32mâœ”[39m[0m[90m conditional immutable (gh-8001)[0m
2025-04-03T23:44:20.9964231Z     [32m  [32mâœ”[39m[0m[90m immutable with strict mode (gh-8149)[0m
2025-04-03T23:44:21.0113643Z [0m    Document#getChanges(...) (gh-9096)[0m
2025-04-03T23:44:21.0202637Z     [32m  [32mâœ”[39m[0m[90m returns an empty object when there are no changes[0m
2025-04-03T23:44:21.0433221Z     [32m  [32mâœ”[39m[0m[90m returns only the changed paths[0m
2025-04-03T23:44:21.0451564Z [0m    reserved keywords can be used optionally (gh-9010)[0m
2025-04-03T23:44:21.0452033Z [0m      Document#validate(...)[0m
2025-04-03T23:44:21.0460358Z       [32m  [32mâœ”[39m[0m[90m is available as `$validate`[0m
2025-04-03T23:44:21.0538505Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-03T23:44:21.0540821Z (node:1798) [MONGOOSE] Warning: `validate` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
2025-04-03T23:44:21.0608707Z [0m      Document#save(...)[0m
2025-04-03T23:44:21.0698553Z       [32m  [32mâœ”[39m[0m[90m is available as `$save`[0m
2025-04-03T23:44:21.0797251Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-03T23:44:21.0799466Z (node:1798) [MONGOOSE] Warning: `save` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
2025-04-03T23:44:21.0871734Z [0m      Document#isModified(...)[0m
2025-04-03T23:44:21.0949263Z       [32m  [32mâœ”[39m[0m[90m is available as `$isModified`[0m
2025-04-03T23:44:21.1060105Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-03T23:44:21.1061357Z (node:1798) [MONGOOSE] Warning: `isModified` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
2025-04-03T23:44:21.1147645Z [0m      Document#isNew[0m
2025-04-03T23:44:21.1226665Z       [32m  [32mâœ”[39m[0m[90m is available as `$isNew`[0m
2025-04-03T23:44:21.1350827Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-03T23:44:21.1352091Z (node:1798) [MONGOOSE] Warning: `isNew` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
2025-04-03T23:44:21.1424225Z [0m      Document#populated(...)[0m
2025-04-03T23:44:21.1668027Z       [32m  [32mâœ”[39m[0m[90m is available as `$populated`[0m
2025-04-03T23:44:21.1697372Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-03T23:44:21.1698909Z (node:1798) [MONGOOSE] Warning: `populated` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
2025-04-03T23:44:21.1771643Z [0m      Document#toObject(...)[0m
2025-04-03T23:44:21.1880392Z       [32m  [32mâœ”[39m[0m[90m is available as `$toObject`[0m
2025-04-03T23:44:21.1907436Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-03T23:44:21.1909703Z (node:1798) [MONGOOSE] Warning: `toObject` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
2025-04-03T23:44:21.1976102Z [0m      Document#init(...)[0m
2025-04-03T23:44:21.1982409Z       [32m  [32mâœ”[39m[0m[90m is available as `$init`[0m
2025-04-03T23:44:21.2074737Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-03T23:44:21.2077270Z (node:1798) [MONGOOSE] Warning: `init` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
2025-04-03T23:44:21.2138895Z [0m      Document#collection[0m
2025-04-03T23:44:21.2139612Z       [36m  - is available as `$collection`[0m
2025-04-03T23:44:21.2140398Z       [36m  - can be used as a property in documents[0m
2025-04-03T23:44:21.2141084Z [0m      Document#errors[0m
2025-04-03T23:44:21.2147465Z       [32m  [32mâœ”[39m[0m[90m is available as `$errors`[0m
2025-04-03T23:44:21.2219161Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-03T23:44:21.2221558Z (node:1798) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
2025-04-03T23:44:21.2298083Z [0m      Document#removeListener[0m
2025-04-03T23:44:21.2304088Z       [32m  [32mâœ”[39m[0m[90m is available as `$removeListener`[0m
2025-04-03T23:44:21.2371842Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-03T23:44:21.2373265Z (node:1798) [MONGOOSE] Warning: `removeListener` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
2025-04-03T23:44:21.2434616Z [0m      Document#listeners[0m
2025-04-03T23:44:21.2440538Z       [32m  [32mâœ”[39m[0m[90m is available as `$listeners`[0m
2025-04-03T23:44:21.2510826Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-03T23:44:21.2512380Z (node:1798) [MONGOOSE] Warning: `listeners` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
2025-04-03T23:44:21.2574350Z [0m      Document#on[0m
2025-04-03T23:44:21.2579901Z       [32m  [32mâœ”[39m[0m[90m is available as `$on`[0m
2025-04-03T23:44:21.2646318Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-03T23:44:21.2708544Z [0m      Document#emit[0m
2025-04-03T23:44:21.2713679Z       [32m  [32mâœ”[39m[0m[90m is available as `$emit`[0m
2025-04-03T23:44:21.2784293Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-03T23:44:21.2786594Z (node:1798) [MONGOOSE] Warning: `emit` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
2025-04-03T23:44:21.2849350Z [0m      Document#get[0m
2025-04-03T23:44:21.2854598Z       [32m  [32mâœ”[39m[0m[90m is available as `$get`[0m
2025-04-03T23:44:21.2922667Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-03T23:44:21.2923936Z (node:1798) [MONGOOSE] Warning: `get` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
2025-04-03T23:44:21.2988323Z [0m    virtuals `pathsToSkip` (gh-10120)[0m
2025-04-03T23:44:21.2997655Z     [32m  [32mâœ”[39m[0m[90m adds support for `pathsToSkip` for virtuals feat-10120[0m
2025-04-03T23:44:21.3069206Z     [32m  [32mâœ”[39m[0m[90m supports passing a list of virtuals to `toObject()` (gh-10120)[0m
2025-04-03T23:44:21.3131332Z [0m    validation `pathsToSkip` (gh-10230)[0m
2025-04-03T23:44:21.3141867Z     [32m  [32mâœ”[39m[0m[90m support `pathsToSkip` option for `Document#validate()`[0m
2025-04-03T23:44:21.3213105Z     [32m  [32mâœ”[39m[0m[90m support `pathsToSkip` option for `Document#validate()`[0m
2025-04-03T23:44:21.3278222Z     [32m  [32mâœ”[39m[0m[90m support `pathsToSkip` option for `Document#validateSync()`[0m
2025-04-03T23:44:21.3335890Z     [36m  - support `pathsToSkip` option for `Model.validate()`[0m
2025-04-03T23:44:21.3344114Z     [32m  [32mâœ”[39m[0m[90m `pathsToSkip` accepts space separated paths[0m
2025-04-03T23:44:21.3413509Z [0m    $inc (gh-11915)[0m
2025-04-03T23:44:21.3502293Z     [32m  [32mâœ”[39m[0m[90m stores CastError if trying to $inc a non-numeric path[0m
2025-04-03T23:44:21.3667553Z     [32m  [32mâœ”[39m[0m[90m should correctly increment even if the document has not saved after each increment gh-13274[0m
2025-04-03T23:44:21.3745916Z [0m      top-level path[0m
2025-04-03T23:44:21.3908201Z       [32m  [32mâœ”[39m[0m[90m sends a $inc command for a given path[0m
2025-04-03T23:44:21.4078177Z       [32m  [32mâœ”[39m[0m[90m calls setters on the value passed to `$inc()` (gh-13158)[0m
2025-04-03T23:44:21.4312903Z       [32m  [32mâœ”[39m[0m[90m avoids updating value if setter fails (gh-13158)[0m
2025-04-03T23:44:21.4561878Z       [32m  [32mâœ”[39m[0m[90m works as a $set if the document is new[0m
2025-04-03T23:44:21.4690538Z       [32m  [32mâœ”[39m[0m[90m treats as a $set if set after $inc[0m
2025-04-03T23:44:21.4887237Z       [32m  [32mâœ”[39m[0m[90m tries to cast to number[0m
2025-04-03T23:44:21.5099658Z       [32m  [32mâœ”[39m[0m[90m stores CastError if can't convert to number[0m
2025-04-03T23:44:21.5116868Z [0m      nested paths[0m
2025-04-03T23:44:21.5278335Z       [32m  [32mâœ”[39m[0m[90m handles nested paths[0m
2025-04-03T23:44:21.5409071Z       [32m  [32mâœ”[39m[0m[90m treats as $set if overwriting nested path[0m
2025-04-03T23:44:21.5492012Z [0m      subdocuments[0m
2025-04-03T23:44:21.5610045Z       [32m  [32mâœ”[39m[0m[90m handles paths underneath subdocuments[0m
2025-04-03T23:44:21.5852175Z       [32m  [32mâœ”[39m[0m[90m treats as a $set if setting subdocument after $inc[0m
2025-04-03T23:44:21.5932974Z [0m      document array[0m
2025-04-03T23:44:21.6081255Z       [32m  [32mâœ”[39m[0m[90m handles paths underneath subdocuments[0m
2025-04-03T23:44:21.6311644Z       [32m  [32mâœ”[39m[0m[90m works on pushed subdocs[0m
2025-04-03T23:44:21.6428627Z       [32m  [32mâœ”[39m[0m[90m Splice call registers path modification[0m
2025-04-03T23:44:21.6522701Z [0m    gh-2306[0m
2025-04-03T23:44:21.6534178Z     [32m  [32mâœ”[39m[0m[90m allow define virtual on non-object path[0m
2025-04-03T23:44:21.6619463Z     [32m  [32mâœ”[39m[0m[90m works on document arrays[0m
2025-04-03T23:44:21.6707381Z 
2025-04-03T23:44:21.6708560Z [0m  Check if instance function that is supplied in schema option is available[0m
2025-04-03T23:44:21.6715613Z   [32m  [32mâœ”[39m[0m[90m should give an instance function back rather than undefined[0m
2025-04-03T23:44:21.6716216Z 
2025-04-03T23:44:21.6716594Z [0m  sharding[0m
2025-04-03T23:44:21.6718629Z   [32m  [32mâœ”[39m[0m[90m should handle shard keys properly (gh-2127)[0m
2025-04-03T23:44:21.6719137Z 
2025-04-03T23:44:21.6719530Z [0m  toObject()[0m
2025-04-03T23:44:21.6723198Z   [32m  [32mâœ”[39m[0m[90m should inherit options from schema[0m
2025-04-03T23:44:21.6725367Z   [32m  [32mâœ”[39m[0m[90m can overwrite schema-set default options[0m
2025-04-03T23:44:21.6727382Z   [32m  [32mâœ”[39m[0m[90m doesnt crash with empty object (gh-3130)[0m
2025-04-03T23:44:21.6727836Z 
2025-04-03T23:44:21.6728991Z [0m  Double[0m
2025-04-03T23:44:21.6737283Z   [32m  [32mâœ”[39m[0m[90m is a valid schema type[0m
2025-04-03T23:44:21.6738106Z [0m    supports the required property[0m
2025-04-03T23:44:21.6746659Z     [32m  [32mâœ”[39m[0m[90m when value is null[0m
2025-04-03T23:44:21.6753724Z     [32m  [32mâœ”[39m[0m[90m when value is non-null[0m
2025-04-03T23:44:21.6754434Z [0m    special inputs[0m
2025-04-03T23:44:21.6760003Z     [32m  [32mâœ”[39m[0m[90m supports undefined as input[0m
2025-04-03T23:44:21.6765424Z     [32m  [32mâœ”[39m[0m[90m supports null as input[0m
2025-04-03T23:44:21.6766118Z [0m    valid casts[0m
2025-04-03T23:44:21.6772626Z     [32m  [32mâœ”[39m[0m[90m casts from decimal string[0m
2025-04-03T23:44:21.6778737Z     [32m  [32mâœ”[39m[0m[90m casts from exponential string[0m
2025-04-03T23:44:21.6785335Z     [32m  [32mâœ”[39m[0m[90m casts from infinite string[0m
2025-04-03T23:44:21.6791058Z     [32m  [32mâœ”[39m[0m[90m casts from NaN string[0m
2025-04-03T23:44:21.6796565Z     [32m  [32mâœ”[39m[0m[90m casts from number[0m
2025-04-03T23:44:21.6801822Z     [32m  [32mâœ”[39m[0m[90m casts from bigint[0m
2025-04-03T23:44:21.6807050Z     [32m  [32mâœ”[39m[0m[90m casts from BSON.Long[0m
2025-04-03T23:44:21.6812215Z     [32m  [32mâœ”[39m[0m[90m casts from BSON.Double[0m
2025-04-03T23:44:21.6817062Z     [32m  [32mâœ”[39m[0m[90m casts boolean true to 1[0m
2025-04-03T23:44:21.6822013Z     [32m  [32mâœ”[39m[0m[90m casts boolean false to 0[0m
2025-04-03T23:44:21.6827120Z     [32m  [32mâœ”[39m[0m[90m casts empty string to null[0m
2025-04-03T23:44:21.6832725Z     [32m  [32mâœ”[39m[0m[90m supports valueOf() function [0m
2025-04-03T23:44:21.6833673Z [0m    cast errors[0m
2025-04-03T23:44:21.6834541Z [0m      when a non-numeric string is provided to an Double field[0m
2025-04-03T23:44:21.6847871Z       [32m  [32mâœ”[39m[0m[90m throws a CastError upon validation[0m
2025-04-03T23:44:21.6848689Z [0m    custom casters[0m
2025-04-03T23:44:21.6857984Z     [32m  [32mâœ”[39m[0m[90m supports cast disabled[0m
2025-04-03T23:44:21.6864201Z     [32m  [32mâœ”[39m[0m[90m supports custom cast[0m
2025-04-03T23:44:21.6865436Z [0m    mongoDB integration[0m
2025-04-03T23:44:21.7189162Z     [32m  [32mâœ”[39m[0m[90m can query with comparison operators[0m
2025-04-03T23:44:21.7392034Z     [32m  [32mâœ”[39m[0m[90m supports populate()[0m
2025-04-03T23:44:21.7392702Z [0m      $type compatibility[0m
2025-04-03T23:44:21.7412927Z       [32m  [32mâœ”[39m[0m[90m is queryable as a JS number in MongoDB[0m
2025-04-03T23:44:21.7431104Z       [32m  [32mâœ”[39m[0m[90m is NOT queryable as a BSON Integer in MongoDB if the value is NOT integer[0m
2025-04-03T23:44:21.7449430Z       [32m  [32mâœ”[39m[0m[90m is queryable as a BSON Double in MongoDB when a non-integer is provided[0m
2025-04-03T23:44:21.7468718Z       [32m  [32mâœ”[39m[0m[90m is queryable as a BSON Double in MongoDB when an integer is provided[0m
2025-04-03T23:44:21.7490181Z 
2025-04-03T23:44:21.7490667Z [0m  driver[0m
2025-04-03T23:44:21.7509866Z   [32m  [32mâœ”[39m[0m[90m can set custom driver (gh-11900)[0m
2025-04-03T23:44:21.7531953Z   [32m  [32mâœ”[39m[0m[90m multiple drivers (gh-12638)[0m
2025-04-03T23:44:21.7532338Z 
2025-04-03T23:44:21.7532797Z [0m  ValidationError[0m
2025-04-03T23:44:21.7535971Z   [32m  [32mâœ”[39m[0m[90m JSON.stringify() with message (gh-5309) (gh-9296)[0m
2025-04-03T23:44:21.7537014Z   [32m  [32mâœ”[39m[0m[90m default error message[0m
2025-04-03T23:44:21.7547844Z   [32m  [32mâœ”[39m[0m[90m should have error name in Cast error gh-10166[0m
2025-04-03T23:44:21.7548560Z [0m    #infiniteRecursion[0m
2025-04-03T23:44:21.7560761Z     [32m  [32mâœ”[39m[0m[90m does not cause RangeError (gh-1834)[0m
2025-04-03T23:44:21.7561359Z [0m    #minDate[0m
2025-04-03T23:44:21.7570370Z     [32m  [32mâœ”[39m[0m[90m causes a validation error[0m
2025-04-03T23:44:21.7570939Z [0m    #maxDate[0m
2025-04-03T23:44:21.7579974Z     [32m  [32mâœ”[39m[0m[90m causes a validation error[0m
2025-04-03T23:44:21.7580521Z [0m    #minLength[0m
2025-04-03T23:44:21.7590356Z     [32m  [32mâœ”[39m[0m[90m causes a validation error[0m
2025-04-03T23:44:21.7598296Z     [32m  [32mâœ”[39m[0m[90m with correct error message (gh-4207)[0m
2025-04-03T23:44:21.7598887Z [0m    #maxLength[0m
2025-04-03T23:44:21.7607856Z     [32m  [32mâœ”[39m[0m[90m causes a validation error[0m
2025-04-03T23:44:21.7608415Z [0m    #toString[0m
2025-04-03T23:44:21.7620828Z     [32m  [32mâœ”[39m[0m[90m does not cause RangeError (gh-1296)[0m
2025-04-03T23:44:21.7621432Z [0m    formatMessage[0m
2025-04-03T23:44:21.7623018Z     [32m  [32mâœ”[39m[0m[90m replaces properties in a message[0m
2025-04-03T23:44:21.7623785Z [0m    when user code defines a r/o Error#toJSON[0m
2025-04-03T23:44:21.9929871Z     [32m  [32mâœ”[39m[0m[90m should not fail[0m[31m (230ms)[0m
2025-04-03T23:44:21.9930744Z 
2025-04-03T23:44:21.9930941Z [0m  esm:[0m
2025-04-03T23:44:21.9932077Z   [32m  [32mâœ”[39m[0m[90m should have default export[0m
2025-04-03T23:44:21.9933113Z   [32m  [32mâœ”[39m[0m[90m should have mongoose export[0m
2025-04-03T23:44:21.9933484Z 
2025-04-03T23:44:21.9933754Z [0m  geojson[0m
2025-04-03T23:44:22.0103370Z   [32m  [32mâœ”[39m[0m[90m driver query[0m
2025-04-03T23:44:22.0331538Z   [32m  [32mâœ”[39m[0m[90m within helper[0m
2025-04-03T23:44:22.0551981Z   [32m  [32mâœ”[39m[0m[90m index[0m
2025-04-03T23:44:22.0988826Z   [32m  [32mâœ”[39m[0m[90m near[0m
2025-04-03T23:44:22.1024598Z 
2025-04-03T23:44:22.1025439Z [0m  documents should not be converted to _id (gh-1408)[0m
2025-04-03T23:44:22.1240477Z   [32m  [32mâœ”[39m[0m[90m if an embedded doc[0m
2025-04-03T23:44:22.1240882Z 
2025-04-03T23:44:22.1242698Z [0m  mongoose module:[0m
2025-04-03T23:44:22.1249567Z   [32m  [32mâœ”[39m[0m[90m legacy pluralize by default (gh-5958)[0m
2025-04-03T23:44:22.1251898Z   [32m  [32mâœ”[39m[0m[90m returns legacy pluralize function by default[0m
2025-04-03T23:44:22.1256269Z   [32m  [32mâœ”[39m[0m[90m sets custom pluralize function (gh-5877)[0m
2025-04-03T23:44:22.1307170Z   [32m  [32mâœ”[39m[0m[90m debug to stream (gh-7018)[0m
2025-04-03T23:44:22.1337202Z   [32m  [32mâœ”[39m[0m[90m should collect the args correctly gh-13364[0m
2025-04-03T23:44:22.1339254Z   [32m  [32mâœ”[39m[0m[90m {g,s}etting options[0m
2025-04-03T23:44:22.1344382Z   [32m  [32mâœ”[39m[0m[90m allows `const { model } = mongoose` (gh-3768)[0m
2025-04-03T23:44:22.1346339Z   [32m  [32mâœ”[39m[0m[90m options object (gh-8144)[0m
2025-04-03T23:44:22.1350312Z   [32m  [32mâœ”[39m[0m[90m bufferCommands option (gh-5879) (gh-9179)[0m
2025-04-03T23:44:22.1361903Z   [32m  [32mâœ”[39m[0m[90m cloneSchemas option (gh-6274)[0m
2025-04-03T23:44:22.1367321Z   [32m  [32mâœ”[39m[0m[90m supports disabling `id` via global plugin (gh-10701)[0m
2025-04-03T23:44:22.1373223Z   [32m  [32mâœ”[39m[0m[90m objectIdGetter option (gh-6588)[0m
2025-04-03T23:44:22.1404265Z   [32m  [32mâœ”[39m[0m[90m runValidators option (gh-6865) (gh-6578)[0m
2025-04-03T23:44:22.1437146Z   [32m  [32mâœ”[39m[0m[90m toJSON options (gh-6815)[0m
2025-04-03T23:44:22.1444444Z   [32m  [32mâœ”[39m[0m[90m toObject options (gh-6815)[0m
2025-04-03T23:44:22.1461564Z   [32m  [32mâœ”[39m[0m[90m strict option (gh-6858)[0m
2025-04-03T23:44:22.1713790Z   [32m  [32mâœ”[39m[0m[90m declaring global plugins (gh-5690)[0m
2025-04-03T23:44:22.1728233Z   [32m  [32mâœ”[39m[0m[90m declaring global plugins with tags (gh-9780)[0m
2025-04-03T23:44:22.1745406Z   [32m  [32mâœ”[39m[0m[90m global plugins on nested schemas underneath embedded discriminators (gh-7370)[0m
2025-04-03T23:44:22.1759057Z   [32m  [32mâœ”[39m[0m[90m global plugins with applyPluginsToDiscriminators (gh-7435)[0m
2025-04-03T23:44:22.1769294Z   [32m  [32mâœ”[39m[0m[90m global plugins with applyPluginsToChildSchemas (gh-13887)[0m
2025-04-03T23:44:22.1783223Z   [32m  [32mâœ”[39m[0m[90m global plugins recompile schemas (gh-7572)[0m
2025-04-03T23:44:22.1797355Z   [32m  [32mâœ”[39m[0m[90m top-level ObjectId, Decimal128, Mixed (gh-6760)[0m
2025-04-03T23:44:22.1987128Z   [32m  [32mâœ”[39m[0m[90m stubbing now() for timestamps (gh-6728)[0m
2025-04-03T23:44:22.1992868Z   [32m  [32mâœ”[39m[0m[90m isolates custom types between mongoose instances (gh-6933) (gh-7158)[0m
2025-04-03T23:44:22.1996136Z   [32m  [32mâœ”[39m[0m[90m throws an error on setting invalid options (gh-6899)[0m
2025-04-03T23:44:22.2002596Z   [32m  [32mâœ”[39m[0m[90m clones schema when instance of another Mongoose instance's Schema class (gh-11047)[0m
2025-04-03T23:44:22.2010370Z   [32m  [32mâœ”[39m[0m[90m deleteModel()[0m
2025-04-03T23:44:22.2012796Z   [32m  [32mâœ”[39m[0m[90m isValidObjectId (gh-3823)[0m
2025-04-03T23:44:22.2015703Z   [32m  [32mâœ”[39m[0m[90m isObjectIdOrHexString (gh-11419)[0m
2025-04-03T23:44:22.2301283Z   [32m  [32mâœ”[39m[0m[90m global `strictPopulate` works when false (gh-10694)[0m
2025-04-03T23:44:22.2384612Z   [32m  [32mâœ”[39m[0m[90m global `strictPopulate` works when true (gh-10694)[0m
2025-04-03T23:44:22.2470913Z   [32m  [32mâœ”[39m[0m[90m allows global `strictPopulate` to be overriden on specific queries set to true (gh-10694)[0m
2025-04-03T23:44:22.2547271Z   [32m  [32mâœ”[39m[0m[90m allows global `strictPopulate` to be overriden on specific queries set to false (gh-10694)[0m
2025-04-03T23:44:22.2548143Z [0m    default connection works[0m
2025-04-03T23:44:22.2581454Z     [32m  [32mâœ”[39m[0m[90m without options[0m
2025-04-03T23:44:22.2640130Z     [32m  [32mâœ”[39m[0m[90m with promise (gh-3790)[0m
2025-04-03T23:44:22.2640880Z [0m    disconnection of all connections[0m
2025-04-03T23:44:22.2670324Z     [32m  [32mâœ”[39m[0m[90m with callback[0m
2025-04-03T23:44:22.2699191Z     [32m  [32mâœ”[39m[0m[90m with promise (gh-3790)[0m
2025-04-03T23:44:22.2699863Z [0m      no callback[0m
2025-04-03T23:44:22.2744863Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:22.2745971Z [0m    model()[0m
2025-04-03T23:44:22.2748548Z     [32m  [32mâœ”[39m[0m[90m accessing a model that hasn't been defined[0m
2025-04-03T23:44:22.2758158Z     [32m  [32mâœ”[39m[0m[90m returns the model at creation[0m
2025-04-03T23:44:22.2763186Z     [32m  [32mâœ”[39m[0m[90m prevents overwriting pre-existing models[0m
2025-04-03T23:44:22.2767564Z     [32m  [32mâœ”[39m[0m[90m allows passing identical name + schema args[0m
2025-04-03T23:44:22.2771443Z     [32m  [32mâœ”[39m[0m[90m allows passing identical name+schema+collection args (gh-5767)[0m
2025-04-03T23:44:22.2772636Z     [32m  [32mâœ”[39m[0m[90m throws on unknown model name[0m
2025-04-03T23:44:22.2773291Z [0m      passing collection name[0m
2025-04-03T23:44:22.2773908Z [0m        when model name already exists[0m
2025-04-03T23:44:22.2779402Z         [32m  [32mâœ”[39m[0m[90m returns a new uncached model[0m
2025-04-03T23:44:22.2780114Z [0m      passing object literal schemas[0m
2025-04-03T23:44:22.2789158Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:22.2790068Z [0m    connecting with a signature of uri, options, function[0m
2025-04-03T23:44:22.2818559Z     [32m  [32mâœ”[39m[0m[90m with single mongod[0m
2025-04-03T23:44:22.2846342Z     [32m  [32mâœ”[39m[0m[90m with replica set[0m
2025-04-03T23:44:22.2846884Z [0m    exports[0m
2025-04-03T23:44:22.2848701Z     [32m  [32mâœ”[39m[0m[90m of module[0m
2025-04-03T23:44:22.2851052Z     [32m  [32mâœ”[39m[0m[90m of new Mongoose instances[0m
2025-04-03T23:44:22.2879249Z     [32m  [32mâœ”[39m[0m[90m of result from .connect() (gh-3940)[0m
2025-04-03T23:44:22.3890744Z     [32m  [32mâœ”[39m[0m[90m connect with url doesnt cause unhandled rejection (gh-6997)[0m[31m (101ms)[0m
2025-04-03T23:44:22.4067316Z     [32m  [32mâœ”[39m[0m[90m can set `setDefaultsOnInsert` as a global option (gh-9032)[0m
2025-04-03T23:44:22.4247941Z     [32m  [32mâœ”[39m[0m[90m setting `setDefaultOnInsert` on operation has priority over base option (gh-9032)[0m
2025-04-03T23:44:22.4250309Z     [32m  [32mâœ”[39m[0m[90m should prevent non-hexadecimal strings (gh-9996)[0m
2025-04-03T23:44:22.4253565Z     [32m  [32mâœ”[39m[0m[90m Allows a syncIndexes shorthand mongoose.syncIndexes (gh-10893)[0m
2025-04-03T23:44:22.4264055Z     [32m  [32mâœ”[39m[0m[90m Allows for the removal of indexes via string or object (gh-11547)[0m
2025-04-03T23:44:22.4265764Z [0m      global `allowDiskUse` (gh-11478)[0m
2025-04-03T23:44:22.4335317Z       [32m  [32mâœ”[39m[0m[90m is `undefined` by default[0m
2025-04-03T23:44:22.4396544Z       [32m  [32mâœ”[39m[0m[90m works when set to `true` and no option provided[0m
2025-04-03T23:44:22.4456219Z       [32m  [32mâœ”[39m[0m[90m can be overridden by a specific query[0m
2025-04-03T23:44:22.4457642Z [0m      global `timestamps.createdAt.immutable` (gh-10139)[0m
2025-04-03T23:44:22.4461965Z       [32m  [32mâœ”[39m[0m[90m is `true` by default[0m
2025-04-03T23:44:22.4466254Z       [32m  [32mâœ”[39m[0m[90m can be overridden to `false`[0m
2025-04-03T23:44:22.4467145Z [0m    global id option[0m
2025-04-03T23:44:22.4640432Z     [32m  [32mâœ”[39m[0m[90m can disable the id virtual on schemas gh-11966[0m
2025-04-03T23:44:22.4641158Z [0m    set()[0m
2025-04-03T23:44:22.4643890Z     [32m  [32mâœ”[39m[0m[90m should be able to set a option through set with (key, value)[0m
2025-04-03T23:44:22.4645938Z     [32m  [32mâœ”[39m[0m[90m should be able to set a option through a object with {key: value}[0m
2025-04-03T23:44:22.4648830Z     [32m  [32mâœ”[39m[0m[90m should throw a single error when using a invalid key[0m
2025-04-03T23:44:22.4652046Z     [32m  [32mâœ”[39m[0m[90m should throw a error with many errors when using multiple invalid keys[0m
2025-04-03T23:44:22.4654507Z     [32m  [32mâœ”[39m[0m[90m should apply all values, even if there are errors[0m
2025-04-03T23:44:22.4657339Z     [32m  [32mâœ”[39m[0m[90m should throw a single error when using a invalid key when getting[0m
2025-04-03T23:44:22.4658290Z [0m    createInitialConnection (gh-8302)[0m
2025-04-03T23:44:22.4660518Z     [32m  [32mâœ”[39m[0m[90m should delete existing connection when setting createInitialConnection to false[0m
2025-04-03T23:44:22.4662920Z     [32m  [32mâœ”[39m[0m[90m should create connection when createConnection is called[0m
2025-04-03T23:44:22.4694694Z     [32m  [32mâœ”[39m[0m[90m should create a new connection automatically when connect() is called if no existing default connection[0m
2025-04-03T23:44:22.4719799Z     [32m  [32mâœ”[39m[0m[90m should not delete default connection if it has models[0m
2025-04-03T23:44:22.4738624Z     [32m  [32mâœ”[39m[0m[90m should not delete default connection if it is connected[0m
2025-04-03T23:44:22.4751993Z 
2025-04-03T23:44:22.4753160Z [0m  Int32[0m
2025-04-03T23:44:22.4761184Z   [32m  [32mâœ”[39m[0m[90m is a valid schema type[0m
2025-04-03T23:44:22.4761722Z [0m    supports the required property[0m
2025-04-03T23:44:22.4770077Z     [32m  [32mâœ”[39m[0m[90m when value is null[0m
2025-04-03T23:44:22.4776936Z     [32m  [32mâœ”[39m[0m[90m when value is non-null[0m
2025-04-03T23:44:22.4777724Z [0m    special inputs[0m
2025-04-03T23:44:22.4783285Z     [32m  [32mâœ”[39m[0m[90m supports INT32_MIN as input[0m
2025-04-03T23:44:22.4788682Z     [32m  [32mâœ”[39m[0m[90m supports INT32_MAX as input[0m
2025-04-03T23:44:22.4793620Z     [32m  [32mâœ”[39m[0m[90m supports undefined as input[0m
2025-04-03T23:44:22.4798692Z     [32m  [32mâœ”[39m[0m[90m supports null as input[0m
2025-04-03T23:44:22.4799787Z [0m    valid casts[0m
2025-04-03T23:44:22.4804616Z     [32m  [32mâœ”[39m[0m[90m casts from string[0m
2025-04-03T23:44:22.4809863Z     [32m  [32mâœ”[39m[0m[90m casts from number[0m
2025-04-03T23:44:22.4814787Z     [32m  [32mâœ”[39m[0m[90m casts from bigint[0m
2025-04-03T23:44:22.4820481Z     [32m  [32mâœ”[39m[0m[90m casts from BSON.Int32[0m
2025-04-03T23:44:22.4825594Z     [32m  [32mâœ”[39m[0m[90m casts from BSON.Double provided its value is an integer[0m
2025-04-03T23:44:22.4830283Z     [32m  [32mâœ”[39m[0m[90m casts boolean true to 1[0m
2025-04-03T23:44:22.4834829Z     [32m  [32mâœ”[39m[0m[90m casts boolean false to 0[0m
2025-04-03T23:44:22.4839960Z     [32m  [32mâœ”[39m[0m[90m casts empty string to null[0m
2025-04-03T23:44:22.4845314Z     [32m  [32mâœ”[39m[0m[90m supports valueOf() function [0m
2025-04-03T23:44:22.4846027Z [0m      long[0m
2025-04-03T23:44:22.4852128Z       [32m  [32mâœ”[39m[0m[90m casts from BSON.Long provided its value is within bounds of Int32[0m
2025-04-03T23:44:22.4867446Z       [32m  [32mâœ”[39m[0m[90m calls Long.toNumber when casting long[0m
2025-04-03T23:44:22.4868862Z [0m    cast errors[0m
2025-04-03T23:44:22.4869768Z [0m      when a non-integer decimal input is provided to an Int32 field[0m
2025-04-03T23:44:22.4882622Z       [32m  [32mâœ”[39m[0m[90m throws a CastError upon validation[0m
2025-04-03T23:44:22.4883992Z [0m      when a non-numeric string is provided to an Int32 field[0m
2025-04-03T23:44:22.4892656Z       [32m  [32mâœ”[39m[0m[90m throws a CastError upon validation[0m
2025-04-03T23:44:22.4893799Z [0m      when a non-integer decimal string is provided to an Int32 field[0m
2025-04-03T23:44:22.4902329Z       [32m  [32mâœ”[39m[0m[90m throws a CastError upon validation[0m
2025-04-03T23:44:22.4903258Z [0m      when NaN is provided to an Int32 field[0m
2025-04-03T23:44:22.4912728Z       [32m  [32mâœ”[39m[0m[90m throws a CastError upon validation[0m
2025-04-03T23:44:22.4913827Z [0m      when value above INT32_MAX is provided to an Int32 field[0m
2025-04-03T23:44:22.4922486Z       [32m  [32mâœ”[39m[0m[90m throws a CastError upon validation[0m
2025-04-03T23:44:22.4923547Z [0m      when value below INT32_MIN is provided to an Int32 field[0m
2025-04-03T23:44:22.4932072Z       [32m  [32mâœ”[39m[0m[90m throws a CastError upon validation[0m
2025-04-03T23:44:22.4932860Z [0m    custom casters[0m
2025-04-03T23:44:22.4941798Z     [32m  [32mâœ”[39m[0m[90m supports cast disabled[0m
2025-04-03T23:44:22.4947901Z     [32m  [32mâœ”[39m[0m[90m supports custom cast[0m
2025-04-03T23:44:22.4948642Z [0m    mongoDB integration[0m
2025-04-03T23:44:22.5036602Z     [32m  [32mâœ”[39m[0m[90m can query with comparison operators[0m
2025-04-03T23:44:22.5221580Z     [32m  [32mâœ”[39m[0m[90m supports populate()[0m
2025-04-03T23:44:22.5222255Z [0m      $type compatibility[0m
2025-04-03T23:44:22.5242408Z       [32m  [32mâœ”[39m[0m[90m is queryable as a JS number in MongoDB[0m
2025-04-03T23:44:22.5286703Z       [32m  [32mâœ”[39m[0m[90m is queryable as a BSON Int32 in MongoDB[0m
2025-04-03T23:44:22.5304865Z       [32m  [32mâœ”[39m[0m[90m is NOT queryable as a BSON Double in MongoDB[0m
2025-04-03T23:44:22.5325613Z 
2025-04-03T23:44:22.5326256Z [0m  model aggregate[0m
2025-04-03T23:44:22.5537450Z [0m    works[0m
2025-04-03T23:44:22.5550348Z     [32m  [32mâœ”[39m[0m[90m when return promise[0m
2025-04-03T23:44:22.5558623Z     [32m  [32mâœ”[39m[0m[90m with arrays[0m
2025-04-03T23:44:22.5567248Z     [32m  [32mâœ”[39m[0m[90m with Aggregate syntax[0m
2025-04-03T23:44:22.5575772Z     [32m  [32mâœ”[39m[0m[90m with Aggregate syntax if callback not provided[0m
2025-04-03T23:44:22.5578566Z     [32m  [32mâœ”[39m[0m[90m when returning Aggregate[0m
2025-04-03T23:44:22.5652824Z     [32m  [32mâœ”[39m[0m[90m can use helper for $out[0m
2025-04-03T23:44:22.5674251Z 
2025-04-03T23:44:22.5675330Z [0m  model[0m
2025-04-03T23:44:22.5676266Z [0m    create()[0m
2025-04-03T23:44:22.5734025Z     [32m  [32mâœ”[39m[0m[90m accepts an array and returns an array[0m
2025-04-03T23:44:22.5738726Z     [32m  [32mâœ”[39m[0m[90m fires callback when passed 0 docs[0m
2025-04-03T23:44:22.5741719Z     [32m  [32mâœ”[39m[0m[90m fires callback when empty array passed[0m
2025-04-03T23:44:22.5750222Z     [32m  [32mâœ”[39m[0m[90m supports passing options[0m
2025-04-03T23:44:22.5753154Z     [32m  [32mâœ”[39m[0m[90m returns a promise[0m
2025-04-03T23:44:22.6802142Z     [32m  [32mâœ”[39m[0m[90m creates in parallel[0m[31m (105ms)[0m
2025-04-03T23:44:22.7001141Z     [32m  [32mâœ”[39m[0m[90m should return the first error immediately if "aggregateErrors" is not explicitly set[0m
2025-04-03T23:44:22.7199188Z     [32m  [32mâœ”[39m[0m[90m should not return errors immediately if "aggregateErrors" is "true"[0m
2025-04-03T23:44:22.7200752Z [0m      callback is optional[0m
2025-04-03T23:44:22.7210525Z       [32m  [32mâœ”[39m[0m[90m with one doc[0m
2025-04-03T23:44:22.7222260Z       [32m  [32mâœ”[39m[0m[90m with more than one doc[0m
2025-04-03T23:44:22.7233350Z       [32m  [32mâœ”[39m[0m[90m with array of docs[0m
2025-04-03T23:44:22.7248832Z       [32m  [32mâœ”[39m[0m[90m and should reject promise on error[0m
2025-04-03T23:44:22.7254011Z       [32m  [32mâœ”[39m[0m[90m when passed an empty array, returns an empty array[0m
2025-04-03T23:44:22.7263569Z       [32m  [32mâœ”[39m[0m[90m treats undefined first arg as doc rather than callback (gh-9765)[0m
2025-04-03T23:44:22.7285497Z       [32m  [32mâœ”[39m[0m[90m ignores undefined last arg (gh-13487)[0m
2025-04-03T23:44:22.7286329Z [0m      ordered[0m
2025-04-03T23:44:22.7616389Z       [32m  [32mâœ”[39m[0m[90m runs the document insertion in a series when using the ordered option gh-4038[0m
2025-04-03T23:44:22.7803263Z       [32m  [32mâœ”[39m[0m[90m should throw an error only after all the documents have finished saving gh-4628[0m
2025-04-03T23:44:22.7925934Z       [32m  [32mâœ”[39m[0m[90m should return the first error immediately if "aggregateErrors" is not explicitly set (ordered)[0m
2025-04-03T23:44:22.8041926Z       [32m  [32mâœ”[39m[0m[90m should not return errors immediately if "aggregateErrors" is "true" (ordered)[0m
2025-04-03T23:44:22.8064371Z 
2025-04-03T23:44:22.8065904Z [0m  model[0m
2025-04-03T23:44:22.8067371Z [0m    discriminator()[0m
2025-04-03T23:44:22.8080094Z [0m      pushing discriminated objects[0m
2025-04-03T23:44:22.8554584Z       [32m  [32mâœ”[39m[0m[90m into non-discriminated arrays works[0m[33m (43ms)[0m
2025-04-03T23:44:22.8602208Z [0m      find[0m
2025-04-03T23:44:22.8998117Z       [32m  [32mâœ”[39m[0m[90m hydrates correct models[0m
2025-04-03T23:44:22.9408976Z       [32m  [32mâœ”[39m[0m[90m hydrates correct models when fields selection set as string[0m
2025-04-03T23:44:22.9824839Z       [32m  [32mâœ”[39m[0m[90m hydrates correct models when fields selection set as object[0m[33m (38ms)[0m
2025-04-03T23:44:23.0207156Z       [32m  [32mâœ”[39m[0m[90m casts underneath $or if discriminator key in filter (gh-9018)[0m
2025-04-03T23:44:23.0592289Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds documents of its type when fields selection set as string inclusive[0m
2025-04-03T23:44:23.0912495Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds documents of its type when fields selection set as string exclusive[0m
2025-04-03T23:44:23.1249361Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds documents of its type when fields selection set as empty string[0m
2025-04-03T23:44:23.1593248Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds documents of its type when fields selection set as object inclusive[0m
2025-04-03T23:44:23.1921248Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds documents of its type when fields selection set as object exclusive[0m
2025-04-03T23:44:23.2239332Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds documents of its type when fields selection set as empty object[0m
2025-04-03T23:44:23.2256854Z [0m        discriminator model only finds documents of its type[0m
2025-04-03T23:44:23.2257481Z [0m          using "ModelDiscriminator#findById"[0m
2025-04-03T23:44:23.2601767Z           [32m  [32mâœ”[39m[0m[90m to find a document of the appropriate discriminator[0m
2025-04-03T23:44:23.2623249Z [0m          using "ModelDiscriminator#find"[0m
2025-04-03T23:44:23.2972235Z           [32m  [32mâœ”[39m[0m[90m to find documents of the appropriate discriminator[0m
2025-04-03T23:44:23.2991232Z [0m      findOne[0m
2025-04-03T23:44:23.3340435Z       [32m  [32mâœ”[39m[0m[90m when selecting `select: false` field (gh-4629) (gh-11546)[0m
2025-04-03T23:44:23.3703796Z       [32m  [32mâœ”[39m[0m[90m select: false in base schema (gh-5448)[0m
2025-04-03T23:44:23.4471750Z       [32m  [32mâœ”[39m[0m[90m hydrates correct model[0m
2025-04-03T23:44:23.4847556Z       [32m  [32mâœ”[39m[0m[90m hydrates correct model when fields selection set as string inclusive[0m
2025-04-03T23:44:23.5167636Z       [32m  [32mâœ”[39m[0m[90m hydrates correct model when fields selection set as string exclusive[0m
2025-04-03T23:44:23.5529198Z       [32m  [32mâœ”[39m[0m[90m hydrates correct model when fields selection set as empty string[0m
2025-04-03T23:44:23.5870676Z       [32m  [32mâœ”[39m[0m[90m hydrates correct model when fields selection set as object inclusive[0m
2025-04-03T23:44:23.6196077Z       [32m  [32mâœ”[39m[0m[90m hydrates correct model when fields selection set as object exclusive[0m
2025-04-03T23:44:23.6539026Z       [32m  [32mâœ”[39m[0m[90m hydrates correct model when fields selection set as empty object[0m
2025-04-03T23:44:23.6910439Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds a document of its type[0m
2025-04-03T23:44:23.7233800Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds a document of its type when fields selection set as string inclusive[0m
2025-04-03T23:44:23.7558934Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds a document of its type when fields selection set as string exclusive[0m
2025-04-03T23:44:23.7907624Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds a document of its type when fields selection set as empty string[0m
2025-04-03T23:44:23.8298664Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds a document of its type when fields selection set as object inclusive[0m
2025-04-03T23:44:23.8641720Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds a document of its type when fields selection set as object exclusive[0m
2025-04-03T23:44:23.8988314Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds a document of its type when fields selection set as empty object[0m
2025-04-03T23:44:23.9009346Z [0m      findOneAndUpdate[0m
2025-04-03T23:44:23.9324180Z       [32m  [32mâœ”[39m[0m[90m does not update models of other types[0m
2025-04-03T23:44:23.9682973Z       [32m  [32mâœ”[39m[0m[90m updates models of its own type[0m
2025-04-03T23:44:24.0028100Z       [32m  [32mâœ”[39m[0m[90m base model modifies any event type[0m
2025-04-03T23:44:24.0049377Z [0m      population/reference mapping[0m
2025-04-03T23:44:24.0562463Z       [32m  [32mâœ”[39m[0m[90m populates and hydrates correct models[0m[33m (50ms)[0m
2025-04-03T23:44:24.1298535Z       [32m  [32mâœ”[39m[0m[90m reference in child schemas (gh-2719)[0m[33m (68ms)[0m
2025-04-03T23:44:24.2271864Z       [32m  [32mâœ”[39m[0m[90m populates parent array reference (gh-4643)[0m
2025-04-03T23:44:24.2768050Z       [32m  [32mâœ”[39m[0m[90m updating discriminator key (gh-5613)[0m[33m (40ms)[0m
2025-04-03T23:44:24.3000856Z       [32m  [32mâœ”[39m[0m[90m disallows updating discriminator key using `$unset` (gh-11456)[0m
2025-04-03T23:44:24.4107311Z       [32m  [32mâœ”[39m[0m[90m allows updating discriminator key using `overwriteDiscriminatorKey` with `strict: throw` (gh-12513)[0m
2025-04-03T23:44:24.5059075Z       [32m  [32mâœ”[39m[0m[90m allows updating document where discriminator key is present in payload but have the same value (13055)[0m
2025-04-03T23:44:24.5393176Z       [32m  [32mâœ”[39m[0m[90m reference in child schemas (gh-2719-2)[0m
2025-04-03T23:44:25.6020966Z       [32m  [32mâœ”[39m[0m[90m correctly populates doc with nonexistent discriminator key (gh-10082)[0m[33m (54ms)[0m
2025-04-03T23:44:25.6044011Z [0m      deleteOne and deleteMany (gh-8471)[0m
2025-04-03T23:44:25.6468807Z       [32m  [32mâœ”[39m[0m[90m adds discriminator filter if no conditions passed[0m[33m (40ms)[0m
2025-04-03T23:44:25.7234252Z [0m      aggregate[0m
2025-04-03T23:44:25.7234823Z [0m        using "RootModel#aggregate"[0m
2025-04-03T23:44:25.7638884Z         [32m  [32mâœ”[39m[0m[90m to aggregate documents of all discriminators[0m
2025-04-03T23:44:25.7659178Z [0m        using "ModelDiscriminator#aggregate"[0m
2025-04-03T23:44:25.8070101Z         [32m  [32mâœ”[39m[0m[90m only aggregates documents of the appropriate discriminator[0m
2025-04-03T23:44:25.8599697Z         [32m  [32mâœ”[39m[0m[90m hides fields when discriminated model has select (gh-4991)[0m
2025-04-03T23:44:25.9408622Z         [32m  [32mâœ”[39m[0m[90m doesnt exclude field if slice (gh-4991)[0m
2025-04-03T23:44:25.9870607Z         [32m  [32mâœ”[39m[0m[90m merges the first pipeline stages if applicable[0m
2025-04-03T23:44:25.9913667Z 
2025-04-03T23:44:25.9915734Z [0m  model[0m
2025-04-03T23:44:26.0258656Z   [32m  [32mâœ”[39m[0m[90m attempting to populate on base model a virtual path defined on discriminator does not throw an error (gh-8924)[0m
2025-04-03T23:44:26.0287738Z   [32m  [32mâœ”[39m[0m[90m accepts a POJO as a schema for discriminators (gh-8984)[0m
2025-04-03T23:44:26.0482622Z   [32m  [32mâœ”[39m[0m[90m removes paths underneath mixed type if discriminator schema sets path to mixed (gh-9042)[0m
2025-04-03T23:44:26.0677984Z   [32m  [32mâœ”[39m[0m[90m doesnt remove paths at the same level (gh-9362)[0m
2025-04-03T23:44:26.0877899Z   [32m  [32mâœ”[39m[0m[90m overwrites if discriminator schema sets a path to single nested but base schema sets to doc array (gh-9354)[0m
2025-04-03T23:44:26.1065596Z   [32m  [32mâœ”[39m[0m[90m can use compiled model schema as a discriminator (gh-9238)[0m
2025-04-03T23:44:26.1612183Z   [32m  [32mâœ”[39m[0m[90m embedded discriminator array of arrays (gh-9984)[0m
2025-04-03T23:44:26.1652175Z   [32m  [32mâœ”[39m[0m[90m recursive embedded discriminator using schematype (gh-9600)[0m
2025-04-03T23:44:26.1703500Z   [32m  [32mâœ”[39m[0m[90m takes discriminator schema's single nested over base schema's (gh-10157)[0m
2025-04-03T23:44:26.2025526Z   [32m  [32mâœ”[39m[0m[90m allows using array as tied value (gh-10303)[0m
2025-04-03T23:44:26.2356853Z   [32m  [32mâœ”[39m[0m[90m handles nested discriminators (gh-10702)[0m
2025-04-03T23:44:26.2462977Z   [32m  [32mâœ”[39m[0m[90m Should allow reusing discriminators (gh-10931)[0m
2025-04-03T23:44:26.2954465Z   [32m  [32mâœ”[39m[0m[90m handles updating multiple properties nested underneath a discriminator (gh-11428)[0m
2025-04-03T23:44:26.3369818Z   [32m  [32mâœ”[39m[0m[90m allows defining discriminator at the subSchema level in the subschema (gh-7971)[0m
2025-04-03T23:44:26.3502534Z   [32m  [32mâœ”[39m[0m[90m handles discriminators on maps of subdocuments (gh-11720)[0m
2025-04-03T23:44:26.3634563Z   [32m  [32mâœ”[39m[0m[90m supports `mergeHooks` option to use the discriminator schema's hooks over the base schema's (gh-12472)[0m
2025-04-03T23:44:26.4009446Z   [32m  [32mâœ”[39m[0m[90m supports `mergePlugins` option to use the discriminator schema's plugins over the base schema's (gh-12604)[0m
2025-04-03T23:44:26.4517550Z   [32m  [32mâœ”[39m[0m[90m applies built-in plugins if mergePlugins and mergeHooks disabled (gh-12696) (gh-12604)[0m
2025-04-03T23:44:26.4605382Z   [32m  [32mâœ”[39m[0m[90m should not throw an error when the user is not modifying anything involving discriminators gh-12135[0m
2025-04-03T23:44:26.4820410Z   [32m  [32mâœ”[39m[0m[90m should throw an error because of the different typeKeys gh-12135[0m
2025-04-03T23:44:26.4902148Z   [32m  [32mâœ”[39m[0m[90m handles customizable discriminator options gh-12135[0m
2025-04-03T23:44:26.5102888Z   [32m  [32mâœ”[39m[0m[90m uses "value" over "name" for multi-dimensonal arrays (gh-13201)[0m
2025-04-03T23:44:26.5127823Z   [32m  [32mâœ”[39m[0m[90m runs base schema paths validators and setters before child schema validators and setters (gh-13794)[0m
2025-04-03T23:44:26.5340150Z   [32m  [32mâœ”[39m[0m[90m should not fail when using a discriminator key multiple times (gh-13906)[0m
2025-04-03T23:44:26.5981566Z   [32m  [32mâœ”[39m[0m[90m correctly gathers subdocs with discriminators (gh-15088)[0m
2025-04-03T23:44:26.6151031Z   [32m  [32mâœ”[39m[0m[90m triggers save hooks on subdocuments (gh-15092)[0m
2025-04-03T23:44:26.6374648Z [0m    discriminator()[0m
2025-04-03T23:44:26.6403896Z     [32m  [32mâœ”[39m[0m[90m model defaults without discriminator[0m
2025-04-03T23:44:26.6630205Z     [32m  [32mâœ”[39m[0m[90m is instance of root[0m
2025-04-03T23:44:26.6657687Z     [32m  [32mâœ”[39m[0m[90m can define static and instance methods[0m
2025-04-03T23:44:26.6860823Z     [32m  [32mâœ”[39m[0m[90m can define virtuals and methods using schema options (gh-12246)[0m
2025-04-03T23:44:26.7047730Z     [32m  [32mâœ”[39m[0m[90m sets schema root discriminator mapping[0m
2025-04-03T23:44:26.7063423Z     [32m  [32mâœ”[39m[0m[90m sets schema discriminator type mapping[0m
2025-04-03T23:44:26.7081378Z     [32m  [32mâœ”[39m[0m[90m adds discriminatorKey to schema with default as name[0m
2025-04-03T23:44:26.7105217Z     [32m  [32mâœ”[39m[0m[90m adds discriminator to Model.discriminators object[0m
2025-04-03T23:44:26.7188198Z     [32m  [32mâœ”[39m[0m[90m throws error on invalid schema[0m
2025-04-03T23:44:26.7203057Z     [32m  [32mâœ”[39m[0m[90m throws error when attempting to nest discriminators[0m
2025-04-03T23:44:26.7218521Z     [32m  [32mâœ”[39m[0m[90m throws error when discriminator has mapped discriminator key in schema[0m
2025-04-03T23:44:26.7237709Z     [32m  [32mâœ”[39m[0m[90m throws error when discriminator has mapped discriminator key in schema with discriminatorKey option set[0m
2025-04-03T23:44:26.7327894Z     [32m  [32mâœ”[39m[0m[90m throws error when discriminator with taken name is added[0m
2025-04-03T23:44:26.7471116Z     [32m  [32mâœ”[39m[0m[90m throws error if model name is taken (gh-4148)[0m
2025-04-03T23:44:26.7632377Z     [32m  [32mâœ”[39m[0m[90m works with nested schemas (gh-2821)[0m
2025-04-03T23:44:26.7986912Z     [32m  [32mâœ”[39m[0m[90m embedded with single nested subdocs (gh-5244)[0m
2025-04-03T23:44:26.8259123Z     [32m  [32mâœ”[39m[0m[90m embedded with single nested subdocs and tied value (gh-8164) (gh-9108)[0m
2025-04-03T23:44:26.8585631Z     [32m  [32mâœ”[39m[0m[90m supports ObjectId as tied value (gh-10130)[0m
2025-04-03T23:44:26.8707220Z     [32m  [32mâœ”[39m[0m[90m Embedded discriminators in nested doc arrays (gh-6202)[0m
2025-04-03T23:44:26.8811650Z     [32m  [32mâœ”[39m[0m[90m throws an error if calling discriminator on non-doc array (gh-6202)[0m
2025-04-03T23:44:26.8858349Z     [32m  [32mâœ”[39m[0m[90m supports using a schema that was used for another discriminator (gh-7200)[0m
2025-04-03T23:44:26.9218002Z     [32m  [32mâœ”[39m[0m[90m should copy plugins[0m
2025-04-03T23:44:26.9230696Z [0m      options[0m
2025-04-03T23:44:26.9233256Z       [32m  [32mâœ”[39m[0m[90m allows toObject to be overridden[0m
2025-04-03T23:44:26.9247995Z       [32m  [32mâœ”[39m[0m[90m allows toJSON to be overridden[0m
2025-04-03T23:44:26.9264071Z       [32m  [32mâœ”[39m[0m[90m is not customizable[0m
2025-04-03T23:44:26.9277355Z [0m      root schema inheritance[0m
2025-04-03T23:44:26.9278971Z       [32m  [32mâœ”[39m[0m[90m inherits field mappings[0m
2025-04-03T23:44:26.9292776Z       [32m  [32mâœ”[39m[0m[90m inherits validators[0m
2025-04-03T23:44:26.9311185Z       [32m  [32mâœ”[39m[0m[90m does not inherit and override fields that exist[0m
2025-04-03T23:44:26.9389844Z       [32m  [32mâœ”[39m[0m[90m inherits methods[0m
2025-04-03T23:44:26.9402819Z       [32m  [32mâœ”[39m[0m[90m inherits statics[0m
2025-04-03T23:44:26.9418315Z       [32m  [32mâœ”[39m[0m[90m inherits virtual (g.s)etters[0m
2025-04-03T23:44:26.9436525Z       [32m  [32mâœ”[39m[0m[90m does not inherit indexes[0m
2025-04-03T23:44:26.9453801Z       [32m  [32mâœ”[39m[0m[90m gets options overridden by root options except toJSON and toObject[0m
2025-04-03T23:44:26.9476297Z       [32m  [32mâœ”[39m[0m[90m does not allow setting discriminator key (gh-2041)[0m
2025-04-03T23:44:26.9501353Z       [32m  [32mâœ”[39m[0m[90m deduplicates hooks (gh-2945)[0m
2025-04-03T23:44:26.9688776Z       [32m  [32mâœ”[39m[0m[90m with typeKey (gh-4339)[0m
2025-04-03T23:44:26.9884551Z       [32m  [32mâœ”[39m[0m[90m embedded discriminators with array defaults (gh-7687)[0m
2025-04-03T23:44:27.0053326Z       [32m  [32mâœ”[39m[0m[90m embedded discriminators with create() (gh-5001)[0m
2025-04-03T23:44:27.0275511Z       [32m  [32mâœ”[39m[0m[90m embedded discriminator with numeric type (gh-7808)[0m
2025-04-03T23:44:27.0491950Z       [32m  [32mâœ”[39m[0m[90m supports clone() (gh-4983)[0m
2025-04-03T23:44:27.0747301Z       [32m  [32mâœ”[39m[0m[90m clone() allows reusing schemas (gh-5098)[0m
2025-04-03T23:44:27.1103936Z       [32m  [32mâœ”[39m[0m[90m clone() does not modify original schema `obj` (gh-14821)[0m
2025-04-03T23:44:27.1311417Z       [32m  [32mâœ”[39m[0m[90m clone() allows reusing with different models (gh-5721)[0m
2025-04-03T23:44:27.1620964Z       [32m  [32mâœ”[39m[0m[90m incorrect discriminator key throws readable error with create (gh-6434)[0m
2025-04-03T23:44:27.1834384Z       [32m  [32mâœ”[39m[0m[90m copies query hooks (gh-5147)[0m
2025-04-03T23:44:27.2048092Z       [32m  [32mâœ”[39m[0m[90m reusing schema for discriminators (gh-5684)[0m
2025-04-03T23:44:27.2175311Z       [32m  [32mâœ”[39m[0m[90m overwrites nested paths in parent schema (gh-6076)[0m
2025-04-03T23:44:27.2498793Z       [32m  [32mâœ”[39m[0m[90m nested discriminator key with projecting in parent (gh-5775)[0m
2025-04-03T23:44:27.2873985Z       [32m  [32mâœ”[39m[0m[90m with $meta projection (gh-5859)[0m
2025-04-03T23:44:27.3007784Z       [32m  [32mâœ”[39m[0m[90m embedded discriminators with $push (gh-5009)[0m
2025-04-03T23:44:27.3204760Z       [32m  [32mâœ”[39m[0m[90m embedded discriminators with $push + $each (gh-5070)[0m
2025-04-03T23:44:27.3440893Z       [32m  [32mâœ”[39m[0m[90m embedded discriminators with $set (gh-5130)[0m
2025-04-03T23:44:27.3573369Z       [32m  [32mâœ”[39m[0m[90m embedded in document arrays (gh-2723)[0m
2025-04-03T23:44:27.3665226Z [0m        applyPluginsToDiscriminators[0m
2025-04-03T23:44:27.3678281Z         [32m  [32mâœ”[39m[0m[90m works (gh-4965)[0m
2025-04-03T23:44:27.3701441Z         [32m  [32mâœ”[39m[0m[90m works with customized options (gh-7458)[0m
2025-04-03T23:44:27.3714572Z [0m      embedded discriminators + hooks (gh-5706)[0m
2025-04-03T23:44:27.3836898Z       [32m  [32mâœ”[39m[0m[90m should call the hooks on the embedded document defined by both the parent and discriminated schemas[0m
2025-04-03T23:44:27.4046020Z       [32m  [32mâœ”[39m[0m[90m should call the hooks on the embedded document in an embedded array defined by both the parent and discriminated schemas[0m
2025-04-03T23:44:27.4145508Z [0m    bug fixes[0m
2025-04-03T23:44:27.4155562Z     [32m  [32mâœ”[39m[0m[90m discriminators with classes modifies class in place (gh-5175)[0m
2025-04-03T23:44:27.4173623Z     [32m  [32mâœ”[39m[0m[90m allows overwriting base class methods (gh-5227)[0m
2025-04-03T23:44:27.4198630Z     [32m  [32mâœ”[39m[0m[90m supports adding properties (gh-5104) (gh-5635)[0m
2025-04-03T23:44:27.4226165Z     [32m  [32mâœ”[39m[0m[90m with subclassing (gh-7547)[0m
2025-04-03T23:44:27.4252047Z     [32m  [32mâœ”[39m[0m[90m uses correct discriminator when using `new BaseModel` (gh-7586)[0m
2025-04-03T23:44:27.4272955Z     [32m  [32mâœ”[39m[0m[90m uses correct discriminator when using `new BaseModel` with value (gh-7851)[0m
2025-04-03T23:44:27.4489147Z     [32m  [32mâœ”[39m[0m[90m allows setting custom discriminator key in schema (gh-7807)[0m
2025-04-03T23:44:27.4823663Z     [32m  [32mâœ”[39m[0m[90m does not project in embedded discriminator key if it is the only selected field (gh-7574)[0m
2025-04-03T23:44:27.4868105Z     [32m  [32mâœ”[39m[0m[90m merges schemas instead of overwriting (gh-7884)[0m
2025-04-03T23:44:27.5059892Z     [32m  [32mâœ”[39m[0m[90m _id: false in discriminator nested schema (gh-8274)[0m
2025-04-03T23:44:27.5140148Z     [32m  [32mâœ”[39m[0m[90m with discriminators in embedded arrays (gh-8273)[0m
2025-04-03T23:44:27.5246600Z [0m    Discriminator Key test[0m
2025-04-03T23:44:27.5508149Z     [32m  [32mâœ”[39m[0m[90m gh-9015[0m
2025-04-03T23:44:27.5552137Z 
2025-04-03T23:44:27.5553080Z [0m  model field selection[0m
2025-04-03T23:44:27.5722908Z   [32m  [32mâœ”[39m[0m[90m excluded fields should be undefined[0m
2025-04-03T23:44:27.5928907Z   [32m  [32mâœ”[39m[0m[90m excluded fields should be undefined and defaults applied to other fields[0m
2025-04-03T23:44:27.6129891Z   [32m  [32mâœ”[39m[0m[90m where subset of fields excludes _id[0m
2025-04-03T23:44:27.6310224Z   [32m  [32mâœ”[39m[0m[90m works with subset of fields, excluding _id[0m
2025-04-03T23:44:27.6543433Z   [32m  [32mâœ”[39m[0m[90m works with just _id and findOneAndUpdate (gh-3407)[0m
2025-04-03T23:44:27.6818396Z   [32m  [32mâœ”[39m[0m[90m works with subset of fields excluding emebedded doc _id (gh-541)[0m
2025-04-03T23:44:27.7015681Z   [32m  [32mâœ”[39m[0m[90m included fields should have defaults applied when no value exists in db (gh-870)[0m
2025-04-03T23:44:27.7228264Z   [32m  [32mâœ”[39m[0m[90m including subdoc field excludes other subdoc fields (gh-1027)[0m
2025-04-03T23:44:27.7438879Z   [32m  [32mâœ”[39m[0m[90m excluding nested subdoc fields (gh-1027)[0m
2025-04-03T23:44:27.7630294Z   [32m  [32mâœ”[39m[0m[90m selecting an array of docs applies defaults properly (gh-1108)[0m
2025-04-03T23:44:27.7851691Z   [32m  [32mâœ”[39m[0m[90m select properties named length (gh-3903)[0m
2025-04-03T23:44:27.8124761Z   [32m  [32mâœ”[39m[0m[90m appropriately filters subdocuments based on properties (gh-1280)[0m
2025-04-03T23:44:27.8750001Z   [32m  [32mâœ”[39m[0m[90m sets defaults correctly in child docs with projection (gh-7159)[0m
2025-04-03T23:44:27.9173407Z   [32m  [32mâœ”[39m[0m[90m when `select: true` in schema, works with $elemMatch in projection[0m
2025-04-03T23:44:27.9338890Z   [32m  [32mâœ”[39m[0m[90m selection specified in query overwrites option in schema[0m
2025-04-03T23:44:27.9559577Z   [32m  [32mâœ”[39m[0m[90m selecting with `false` instead of `0` doesn't overwrite schema `select: false` (gh-8923)[0m
2025-04-03T23:44:27.9821907Z   [32m  [32mâœ”[39m[0m[90m handles deselecting _id when other field has schema-level `select: false` (gh-12670)[0m
2025-04-03T23:44:27.9967046Z [0m    with $elemMatch projection[0m
2025-04-03T23:44:28.0137252Z     [32m  [32mâœ”[39m[0m[90m casts elemMatch args (gh-1091)[0m
2025-04-03T23:44:28.0382488Z     [32m  [32mâœ”[39m[0m[90m saves modified elemMatch paths (gh-1334)[0m
2025-04-03T23:44:28.0554463Z     [32m  [32mâœ”[39m[0m[90m works with $ positional in select (gh-2031)[0m
2025-04-03T23:44:28.0657349Z 
2025-04-03T23:44:28.0658013Z [0m  model: findByIdAndUpdate:[0m
2025-04-03T23:44:28.0801213Z   [32m  [32mâœ”[39m[0m[90m returns the edited document with previous and target discriminators types defined[0m
2025-04-03T23:44:28.1036185Z   [32m  [32mâœ”[39m[0m[90m returns the edited document with only previous discriminator type defined[0m
2025-04-03T23:44:28.1069696Z 
2025-04-03T23:44:28.1070464Z [0m  model: findOneAndDelete:[0m
2025-04-03T23:44:28.1213334Z   [32m  [32mâœ”[39m[0m[90m returns the original document[0m
2025-04-03T23:44:28.1321066Z   [32m  [32mâœ”[39m[0m[90m options/conditions/doc are merged when no callback is passed[0m
2025-04-03T23:44:28.1505520Z   [32m  [32mâœ”[39m[0m[90m returns the original document[0m
2025-04-03T23:44:28.1595652Z   [32m  [32mâœ”[39m[0m[90m options/conditions/doc are merged when no callback is passed[0m
2025-04-03T23:44:28.1686665Z   [32m  [32mâœ”[39m[0m[90m supports v3 select string syntax[0m
2025-04-03T23:44:28.1761320Z   [32m  [32mâœ”[39m[0m[90m supports v3 select object syntax[0m
2025-04-03T23:44:28.1847650Z   [32m  [32mâœ”[39m[0m[90m supports v3 sort string syntax[0m
2025-04-03T23:44:28.1973666Z   [32m  [32mâœ”[39m[0m[90m supports v3 sort object syntax[0m
2025-04-03T23:44:28.2397692Z   [32m  [32mâœ”[39m[0m[90m supports population (gh-1395)[0m
2025-04-03T23:44:28.2443884Z   [32m  [32mâœ”[39m[0m[90m only calls setters once (gh-6203)[0m
2025-04-03T23:44:28.2697571Z   [32m  [32mâœ”[39m[0m[90m supports the `includeResultMetadata` option (gh-13539)[0m
2025-04-03T23:44:28.2812414Z [0m    middleware[0m
2025-04-03T23:44:28.2963116Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:28.3222053Z     [32m  [32mâœ”[39m[0m[90m works with exec() (gh-439)[0m
2025-04-03T23:44:28.3366374Z 
2025-04-03T23:44:28.3367424Z [0m  model: findOneAndReplace:[0m
2025-04-03T23:44:28.3510524Z   [32m  [32mâœ”[39m[0m[90m returns the original document[0m
2025-04-03T23:44:28.3610154Z   [32m  [32mâœ”[39m[0m[90m options/conditions/doc are merged when no callback is passed[0m
2025-04-03T23:44:28.3787324Z   [32m  [32mâœ”[39m[0m[90m returns the original document[0m
2025-04-03T23:44:28.3870685Z   [32m  [32mâœ”[39m[0m[90m options/conditions/doc are merged when no callback is passed[0m
2025-04-03T23:44:28.3942394Z   [32m  [32mâœ”[39m[0m[90m supports v3 select string syntax[0m
2025-04-03T23:44:28.4016243Z   [32m  [32mâœ”[39m[0m[90m supports v3 select object syntax[0m
2025-04-03T23:44:28.4093026Z   [32m  [32mâœ”[39m[0m[90m supports v3 sort string syntax[0m
2025-04-03T23:44:28.4179995Z   [32m  [32mâœ”[39m[0m[90m supports v3 sort object syntax[0m
2025-04-03T23:44:28.4564800Z   [32m  [32mâœ”[39m[0m[90m supports population (gh-1395)[0m
2025-04-03T23:44:28.4614726Z   [32m  [32mâœ”[39m[0m[90m only calls setters once (gh-6203)[0m
2025-04-03T23:44:28.4904715Z   [32m  [32mâœ”[39m[0m[90m works (gh-7654)[0m
2025-04-03T23:44:28.5103176Z   [32m  [32mâœ”[39m[0m[90m schema-level projection (gh-7654)[0m
2025-04-03T23:44:28.5299814Z   [32m  [32mâœ”[39m[0m[90m supports `new` in addition to `returnOriginal` (gh-7846)[0m
2025-04-03T23:44:28.5511240Z   [32m  [32mâœ”[39m[0m[90m orFail() (gh-8030)[0m
2025-04-03T23:44:28.5686609Z   [32m  [32mâœ”[39m[0m[90m skips validation if `runValidators` === false (gh-11559)[0m
2025-04-03T23:44:28.5810863Z   [32m  [32mâœ”[39m[0m[90m respects query-level strict option (gh-13507)[0m
2025-04-03T23:44:28.5945860Z   [32m  [32mâœ”[39m[0m[90m respects schema-level strict option (gh-13507)[0m
2025-04-03T23:44:28.6084230Z   [32m  [32mâœ”[39m[0m[90m does not send overwrite or timestamps option to MongoDB[0m
2025-04-03T23:44:28.6320108Z   [32m  [32mâœ”[39m[0m[90m supports the `includeResultMetadata` option (gh-13539)[0m
2025-04-03T23:44:28.6412646Z [0m    middleware[0m
2025-04-03T23:44:28.6565942Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:28.6832994Z     [32m  [32mâœ”[39m[0m[90m works with exec() (gh-439)[0m
2025-04-03T23:44:28.6944473Z 
2025-04-03T23:44:28.6946729Z [0m  model: findOneAndUpdate:[0m
2025-04-03T23:44:28.7117773Z   [32m  [32mâœ”[39m[0m[90m returns the edited document[0m
2025-04-03T23:44:28.7331411Z   [32m  [32mâœ”[39m[0m[90m returns the original document[0m
2025-04-03T23:44:28.7561912Z   [32m  [32mâœ”[39m[0m[90m allows upserting[0m
2025-04-03T23:44:28.7593213Z   [32m  [32mâœ”[39m[0m[90m options/conditions/doc are merged when no callback is passed[0m
2025-04-03T23:44:28.7819301Z   [32m  [32mâœ”[39m[0m[90m updates numbers atomically[0m
2025-04-03T23:44:28.7982921Z   [32m  [32mâœ”[39m[0m[90m honors strict schemas[0m
2025-04-03T23:44:28.8193973Z   [32m  [32mâœ”[39m[0m[90m returns errors with strict:throw schemas[0m
2025-04-03T23:44:28.8438405Z   [32m  [32mâœ”[39m[0m[90m returns the original document[0m
2025-04-03T23:44:28.8524485Z   [32m  [32mâœ”[39m[0m[90m options/conditions/doc are merged when no callback is passed[0m
2025-04-03T23:44:28.8620337Z   [32m  [32mâœ”[39m[0m[90m supports v3 select string syntax[0m
2025-04-03T23:44:28.8701065Z   [32m  [32mâœ”[39m[0m[90m supports v3 select object syntax[0m
2025-04-03T23:44:28.9025357Z   [32m  [32mâœ”[39m[0m[90m supports v3 sort string syntax[0m
2025-04-03T23:44:28.9054761Z   [32m  [32mâœ”[39m[0m[90m supports v3 sort object syntax[0m
2025-04-03T23:44:28.9314712Z   [32m  [32mâœ”[39m[0m[90m supports $elemMatch with $in (gh-1091 gh-1100)[0m
2025-04-03T23:44:28.9631174Z   [32m  [32mâœ”[39m[0m[90m supports population (gh-1395)[0m
2025-04-03T23:44:28.9771988Z   [32m  [32mâœ”[39m[0m[90m returns null when doing an upsert & new=false gh-1533[0m
2025-04-03T23:44:29.0021466Z   [32m  [32mâœ”[39m[0m[90m return hydrated document (gh-7734 gh-7735)[0m
2025-04-03T23:44:29.0279066Z   [32m  [32mâœ”[39m[0m[90m return includeResultMetadata when doing an upsert & new=false gh-7770[0m
2025-04-03T23:44:29.0505347Z   [32m  [32mâœ”[39m[0m[90m allows properties to be set to null gh-1643[0m
2025-04-03T23:44:29.0780748Z   [32m  [32mâœ”[39m[0m[90m can do various deep equal checks (lodash.isEqual, lodash.isEqualWith, assert.deepEqual, utils.deepEqual) on object id after findOneAndUpdate (gh-2070)[0m
2025-04-03T23:44:29.1055615Z   [32m  [32mâœ”[39m[0m[90m adds __v on upsert (gh-2122) (gh-4505)[0m
2025-04-03T23:44:29.1213498Z   [32m  [32mâœ”[39m[0m[90m doesn't add __v on upsert if `$set` (gh-4505) (gh-5973)[0m
2025-04-03T23:44:29.1412745Z   [32m  [32mâœ”[39m[0m[90m doesn't add __v on upsert if `$set` with `update()` (gh-5973)[0m
2025-04-03T23:44:29.1675767Z   [32m  [32mâœ”[39m[0m[90m works with nested schemas and $pull+$or (gh-1932)[0m
2025-04-03T23:44:29.1773784Z   [32m  [32mâœ”[39m[0m[90m accepts undefined[0m
2025-04-03T23:44:29.2006879Z   [32m  [32mâœ”[39m[0m[90m cast errors for empty objects as object ids (gh-2732)[0m
2025-04-03T23:44:29.2254965Z   [32m  [32mâœ”[39m[0m[90m cast errors for empty objects as object ids (gh-2732)[0m
2025-04-03T23:44:29.2561411Z   [32m  [32mâœ”[39m[0m[90m with versionKey in top-level and a `$` key (gh-7003)[0m
2025-04-03T23:44:29.2797556Z   [32m  [32mâœ”[39m[0m[90m empty update with timestamps (gh-7041)[0m
2025-04-03T23:44:29.3078986Z   [32m  [32mâœ”[39m[0m[90m skipping updatedAt and createdAt (gh-3934)[0m
2025-04-03T23:44:29.3211683Z   [32m  [32mâœ”[39m[0m[90m runs lowercase on $addToSet, $push, etc (gh-4185)[0m
2025-04-03T23:44:29.3454829Z   [32m  [32mâœ”[39m[0m[90m returnOriginal (gh-7846)[0m
2025-04-03T23:44:29.3733480Z   [32m  [32mâœ”[39m[0m[90m updating embedded discriminator with discriminator key in update (gh-8378)[0m
2025-04-03T23:44:29.3979579Z   [32m  [32mâœ”[39m[0m[90m setDefaultsOnInsert with doubly nested subdocs (gh-8392)[0m
2025-04-03T23:44:29.4261495Z   [32m  [32mâœ”[39m[0m[90m calls setters on mixed type (gh-8444)[0m
2025-04-03T23:44:29.4407406Z   [32m  [32mâœ”[39m[0m[90m returnDocument should work (gh-10321)[0m
2025-04-03T23:44:29.4711258Z   [32m  [32mâœ”[39m[0m[90m supports overwriting nested map paths (gh-10485)[0m
2025-04-03T23:44:29.4861715Z   [32m  [32mâœ”[39m[0m[90m supports $set on elements of map of subdocuments (gh-10720)[0m
2025-04-03T23:44:29.5014794Z   [32m  [32mâœ”[39m[0m[90m handles validating deeply nested subdocuments (gh-11394)[0m
2025-04-03T23:44:29.5289328Z   [32m  [32mâœ”[39m[0m[90m casts array filters (gh-13219)[0m
2025-04-03T23:44:29.5420191Z   [32m  [32mâœ”[39m[0m[90m throws error if filter is not an object (gh-13264)[0m
2025-04-03T23:44:29.5761011Z   [32m  [32mâœ”[39m[0m[90m handles plus path in projection (gh-13413)[0m
2025-04-03T23:44:29.6036171Z   [32m  [32mâœ”[39m[0m[90m allows setting paths with dots in non-strict paths (gh-13434) (gh-10200)[0m
2025-04-03T23:44:29.6195848Z   [32m  [32mâœ”[39m[0m[90m supports the `includeResultMetadata` option (gh-13539)[0m
2025-04-03T23:44:29.6487678Z   [32m  [32mâœ”[39m[0m[90m successfully runs findOneAndUpdate with no update and versionKey set to false (gh-13783)[0m
2025-04-03T23:44:29.6629957Z   [32m  [32mâœ”[39m[0m[90m skips adding defaults to filter when passing empty update (gh-13962)[0m
2025-04-03T23:44:29.6789468Z   [32m  [32mâœ”[39m[0m[90m sets CastError path to full path (gh-14114)[0m
2025-04-03T23:44:29.6918410Z [0m    will correctly[0m
2025-04-03T23:44:29.7106414Z     [32m  [32mâœ”[39m[0m[90m update subdocument in array item[0m
2025-04-03T23:44:29.7212956Z [0m    middleware[0m
2025-04-03T23:44:29.7237880Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:29.7376324Z     [32m  [32mâœ”[39m[0m[90m works with exec()[0m
2025-04-03T23:44:29.7473663Z [0m    validators (gh-860)[0m
2025-04-03T23:44:29.7665401Z     [32m  [32mâœ”[39m[0m[90m applies defaults on upsert[0m
2025-04-03T23:44:29.7852353Z     [32m  [32mâœ”[39m[0m[90m doesnt set default on upsert if query sets it[0m
2025-04-03T23:44:29.8057695Z     [32m  [32mâœ”[39m[0m[90m properly sets default on upsert if query wont set it[0m
2025-04-03T23:44:29.8252908Z     [32m  [32mâœ”[39m[0m[90m skips setting defaults within maps (gh-7909)[0m
2025-04-03T23:44:29.8296762Z     [32m  [32mâœ”[39m[0m[90m runs validators if theyre set[0m
2025-04-03T23:44:29.8412037Z     [32m  [32mâœ”[39m[0m[90m validators handle $unset and $setOnInsert[0m
2025-04-03T23:44:29.8536483Z     [32m  [32mâœ”[39m[0m[90m min/max, enum, and regex built-in validators work[0m
2025-04-03T23:44:29.8656697Z     [32m  [32mâœ”[39m[0m[90m multiple validation errors[0m
2025-04-03T23:44:29.8941106Z     [32m  [32mâœ”[39m[0m[90m validators ignore $inc[0m
2025-04-03T23:44:29.9120522Z     [32m  [32mâœ”[39m[0m[90m validators ignore paths underneath mixed (gh-8659)[0m
2025-04-03T23:44:29.9305594Z     [32m  [32mâœ”[39m[0m[90m should work with arrays (gh-3035)[0m
2025-04-03T23:44:29.9559950Z     [32m  [32mâœ”[39m[0m[90m should allow null values in query (gh-3135)[0m
2025-04-03T23:44:29.9726760Z     [32m  [32mâœ”[39m[0m[90m should work with array documents (gh-3034)[0m
2025-04-03T23:44:29.9985941Z     [32m  [32mâœ”[39m[0m[90m handles setting array (gh-3107)[0m
2025-04-03T23:44:30.0173203Z     [32m  [32mâœ”[39m[0m[90m handles nested cast errors (gh-3468)[0m
2025-04-03T23:44:30.0288392Z     [32m  [32mâœ”[39m[0m[90m cast errors with nested schemas (gh-3580)[0m
2025-04-03T23:44:30.0550767Z     [32m  [32mâœ”[39m[0m[90m pull with nested schemas (gh-3616)[0m
2025-04-03T23:44:30.0600182Z     [32m  [32mâœ”[39m[0m[90m setting nested schema (gh-3889)[0m
2025-04-03T23:44:30.0708729Z [0m    bug fixes[0m
2025-04-03T23:44:30.0844639Z     [32m  [32mâœ”[39m[0m[90m passes raw result if includeResultMetadata specified (gh-4925)[0m
2025-04-03T23:44:30.1086798Z     [32m  [32mâœ”[39m[0m[90m handles setting single embedded docs to null (gh-4281)[0m
2025-04-03T23:44:30.1129981Z     [32m  [32mâœ”[39m[0m[90m custom validator on mixed field (gh-4305)[0m
2025-04-03T23:44:30.1247131Z     [32m  [32mâœ”[39m[0m[90m single nested doc cast errors (gh-3602)[0m
2025-04-03T23:44:30.1546216Z     [32m  [32mâœ”[39m[0m[90m projection option as alias for fields (gh-4315)[0m
2025-04-03T23:44:30.1591409Z     [32m  [32mâœ”[39m[0m[90m handles upserting a non-existing field (gh-4757)[0m
2025-04-03T23:44:30.1898067Z     [32m  [32mâœ”[39m[0m[90m strict option (gh-5108)[0m
2025-04-03T23:44:30.2061766Z     [32m  [32mâœ”[39m[0m[90m correct key order (gh-6484)[0m
2025-04-03T23:44:30.2309457Z     [32m  [32mâœ”[39m[0m[90m should not apply schema transforms (gh-4574)[0m
2025-04-03T23:44:30.2596324Z     [32m  [32mâœ”[39m[0m[90m update using $ (gh-5628)[0m
2025-04-03T23:44:30.2838846Z     [32m  [32mâœ”[39m[0m[90m projection with $elemMatch (gh-5661)[0m
2025-04-03T23:44:30.2943652Z     [32m  [32mâœ”[39m[0m[90m multi cast error (gh-5609)[0m
2025-04-03T23:44:30.3058828Z     [32m  [32mâœ”[39m[0m[90m update validators with pushing null (gh-5710)[0m
2025-04-03T23:44:30.3177835Z     [32m  [32mâœ”[39m[0m[90m only calls setters once (gh-6203)[0m
2025-04-03T23:44:30.3297630Z     [32m  [32mâœ”[39m[0m[90m only calls setters once (gh-6203)[0m
2025-04-03T23:44:30.3562169Z     [32m  [32mâœ”[39m[0m[90m update validators with pull + $in (gh-6240)[0m
2025-04-03T23:44:30.3799920Z     [32m  [32mâœ”[39m[0m[90m avoids edge case with middleware cloning buffers (gh-5702)[0m
2025-04-03T23:44:30.4054743Z     [32m  [32mâœ”[39m[0m[90m setting subtype when saving (gh-5551)[0m
2025-04-03T23:44:30.4302271Z     [32m  [32mâœ”[39m[0m[90m properly handles casting nested objects in update (gh-4724)[0m
2025-04-03T23:44:30.4432439Z     [32m  [32mâœ”[39m[0m[90m doesnt do double validation on document arrays during updates (gh-4440)[0m
2025-04-03T23:44:30.4729941Z     [32m  [32mâœ”[39m[0m[90m runs setters on array elements (gh-7679)[0m
2025-04-03T23:44:30.4844244Z     [32m  [32mâœ”[39m[0m[90m avoid calling $pull in doc array (gh-6971) (gh-6889)[0m
2025-04-03T23:44:30.5011090Z     [32m  [32mâœ”[39m[0m[90m $pull with `required` and runValidators (gh-6972)[0m
2025-04-03T23:44:30.5144246Z 
2025-04-03T23:44:30.5145188Z [0m  model[0m
2025-04-03T23:44:30.5148426Z [0m    hydrate()[0m
2025-04-03T23:44:30.5175641Z     [32m  [32mâœ”[39m[0m[90m hydrates documents with no modified paths[0m
2025-04-03T23:44:30.5201096Z     [32m  [32mâœ”[39m[0m[90m runs validators[0m
2025-04-03T23:44:30.5211321Z     [32m  [32mâœ”[39m[0m[90m supports projection (gh-9209)[0m
2025-04-03T23:44:30.5222710Z     [32m  [32mâœ”[39m[0m[90m works correctly with model discriminators[0m
2025-04-03T23:44:30.5237480Z     [32m  [32mâœ”[39m[0m[90m should deeply hydrate the document with the `hydratedPopulatedDocs` option (gh-4727)[0m
2025-04-03T23:44:30.5706565Z     [32m  [32mâœ”[39m[0m[90m should hydrate documents in virtual populate (gh-14503)[0m[33m (45ms)[0m
2025-04-03T23:44:30.5715599Z     [32m  [32mâœ”[39m[0m[90m sets hydrated docs as populated (gh-15048)[0m
2025-04-03T23:44:30.5914045Z     [32m  [32mâœ”[39m[0m[90m marks deeply nested docs as hydrated underneath virtuals (gh-15110)[0m
2025-04-03T23:44:30.5988630Z     [32m  [32mâœ”[39m[0m[90m marks deeply nested docs as hydrated underneath conventional (gh-15110)[0m
2025-04-03T23:44:30.6012338Z 
2025-04-03T23:44:30.6013279Z [0m  model[0m
2025-04-03T23:44:30.6092987Z   [32m  [32mâœ”[39m[0m[90m sets correct partialFilterExpression for document array (gh-9091)[0m
2025-04-03T23:44:30.6210793Z   [32m  [32mâœ”[39m[0m[90m skips automatic indexing on childSchema if autoIndex: false (gh-9150)[0m
2025-04-03T23:44:30.6226908Z [0m    indexes[0m
2025-04-03T23:44:30.6364701Z     [32m  [32mâœ”[39m[0m[90m are created when model is compiled[0m
2025-04-03T23:44:30.6548305Z     [32m  [32mâœ”[39m[0m[90m of embedded documents[0m
2025-04-03T23:44:30.6673020Z     [32m  [32mâœ”[39m[0m[90m of embedded documents unless excludeIndexes (gh-5575) (gh-8343)[0m
2025-04-03T23:44:30.6942762Z     [32m  [32mâœ”[39m[0m[90m of multiple embedded documents with same schema[0m
2025-04-03T23:44:30.7096994Z     [32m  [32mâœ”[39m[0m[90m compound: on embedded docs[0m
2025-04-03T23:44:30.7119187Z     [32m  [32mâœ”[39m[0m[90m nested embedded docs (gh-5199)[0m
2025-04-03T23:44:30.7133364Z     [32m  [32mâœ”[39m[0m[90m primitive arrays (gh-3347)[0m
2025-04-03T23:44:30.7336882Z     [32m  [32mâœ”[39m[0m[90m error should emit on the model[0m
2025-04-03T23:44:30.7551537Z     [32m  [32mâœ”[39m[0m[90m when one index creation errors[0m
2025-04-03T23:44:30.7705598Z     [32m  [32mâœ”[39m[0m[90m creates descending indexes from schema definition(gh-8895)[0m
2025-04-03T23:44:30.7722576Z [0m      auto creation[0m
2025-04-03T23:44:30.8833953Z       [32m  [32mâœ”[39m[0m[90m can be disabled[0m[31m (111ms)[0m
2025-04-03T23:44:30.8851687Z [0m        global autoIndexes (gh-1875)[0m
2025-04-03T23:44:30.8947997Z         [32m  [32mâœ”[39m[0m[90m will create indexes as a default[0m
2025-04-03T23:44:31.0123565Z         [32m  [32mâœ”[39m[0m[90m will not create indexes if the global auto index is false and schema option isnt set (gh-1875)[0m[31m (116ms)[0m
2025-04-03T23:44:31.0142745Z [0m      model.ensureIndexes()[0m
2025-04-03T23:44:31.0143335Z       [36m  - is a function[0m
2025-04-03T23:44:31.0143835Z       [36m  - returns a Promise[0m
2025-04-03T23:44:31.0144336Z       [36m  - creates indexes[0m
2025-04-03T23:44:31.0144823Z [0m    discriminators with unique[0m
2025-04-03T23:44:31.1009021Z     [32m  [32mâœ”[39m[0m[90m converts to partial unique index (gh-6347)[0m[31m (86ms)[0m
2025-04-03T23:44:31.1173150Z     [32m  [32mâœ”[39m[0m[90m decorated discriminator index with syncIndexes (gh-6347)[0m
2025-04-03T23:44:31.1306812Z     [32m  [32mâœ”[39m[0m[90m uses schema-level collation by default (gh-9912)[0m
2025-04-03T23:44:31.1480552Z     [32m  [32mâœ”[39m[0m[90m different collation with syncIndexes() (gh-8521)[0m
2025-04-03T23:44:31.1790707Z     [32m  [32mâœ”[39m[0m[90m reports syncIndexes() error (gh-9303)[0m
2025-04-03T23:44:31.1956803Z     [32m  [32mâœ”[39m[0m[90m should not re-create a compound text index that involves non-text indexes, using syncIndexes (gh-13136)[0m
2025-04-03T23:44:31.2075901Z     [32m  [32mâœ”[39m[0m[90m should not find a diff when calling diffIndexes after syncIndexes involving a text and non-text compound index (gh-13136)[0m
2025-04-03T23:44:31.2239305Z     [32m  [32mâœ”[39m[0m[90m cleanIndexes (gh-6676)[0m
2025-04-03T23:44:31.2343726Z     [32m  [32mâœ”[39m[0m[90m should prevent collation on text indexes (gh-10044)[0m
2025-04-03T23:44:31.2547589Z     [32m  [32mâœ”[39m[0m[90m should do a dryRun feat-10316[0m
2025-04-03T23:44:31.2579059Z     [32m  [32mâœ”[39m[0m[90m running diffIndexes with a non-existent collection should not throw an error (gh-14010)[0m
2025-04-03T23:44:31.2663605Z 
2025-04-03T23:44:31.2664402Z [0m  insertMany()[0m
2025-04-03T23:44:31.2822898Z   [32m  [32mâœ”[39m[0m[90m with timestamps (gh-723)[0m
2025-04-03T23:44:31.2936447Z   [32m  [32mâœ”[39m[0m[90m timestamps respect $timestamps() (gh-12117)[0m
2025-04-03T23:44:31.3137853Z   [32m  [32mâœ”[39m[0m[90m insertMany() with nested timestamps (gh-12060)[0m
2025-04-03T23:44:31.3250399Z   [32m  [32mâœ”[39m[0m[90m insertMany() (gh-723)[0m
2025-04-03T23:44:31.3544628Z   [32m  [32mâœ”[39m[0m[90m insertMany() ordered option for constraint errors (gh-3893)[0m
2025-04-03T23:44:31.3759026Z   [32m  [32mâœ”[39m[0m[90m insertMany() ordered option for validation errors (gh-5068)[0m
2025-04-03T23:44:31.3922585Z   [32m  [32mâœ”[39m[0m[90m insertMany() `writeErrors` if only one error (gh-8938)[0m
2025-04-03T23:44:31.3955371Z   [32m  [32mâœ”[39m[0m[90m insertMany() ordered option for single validation error[0m
2025-04-03T23:44:31.4135333Z   [32m  [32mâœ”[39m[0m[90m insertMany() hooks (gh-3846)[0m
2025-04-03T23:44:31.4235582Z   [32m  [32mâœ”[39m[0m[90m returns empty array if no documents (gh-8130)[0m
2025-04-03T23:44:31.4396500Z   [32m  [32mâœ”[39m[0m[90m insertMany() multi validation error with ordered false (gh-5337)[0m
2025-04-03T23:44:31.4492050Z   [32m  [32mâœ”[39m[0m[90m insertMany() validation error with ordered true when all documents are invalid[0m
2025-04-03T23:44:31.4561560Z   [32m  [32mâœ”[39m[0m[90m insertMany() validation error with ordered false when all documents are invalid[0m
2025-04-03T23:44:31.4710874Z   [32m  [32mâœ”[39m[0m[90m insertMany() validation error with ordered false and rawResult for checking which documents failed (gh-12791)[0m
2025-04-03T23:44:31.4919319Z   [32m  [32mâœ”[39m[0m[90m insertMany() validation error with ordered false and rawResult for mixed write and validation error (gh-12791)[0m
2025-04-03T23:44:31.5178465Z   [32m  [32mâœ”[39m[0m[90m insertMany() populate option (gh-9720)[0m
2025-04-03T23:44:31.5293482Z   [32m  [32mâœ”[39m[0m[90m insertMany() sets `isNew` for inserted documents with `ordered = false` (gh-9677)[0m
2025-04-03T23:44:31.5428760Z   [32m  [32mâœ”[39m[0m[90m insertMany() returns only inserted docs with `ordered = true`[0m
2025-04-03T23:44:31.5452592Z   [32m  [32mâœ”[39m[0m[90m insertMany() validation error with ordered true and rawResult true when all documents are invalid[0m
2025-04-03T23:44:31.5541172Z   [32m  [32mâœ”[39m[0m[90m insertMany() validation error with ordered false and rawResult true when all documents are invalid[0m
2025-04-03T23:44:31.5716379Z   [32m  [32mâœ”[39m[0m[90m insertMany() depopulate (gh-4590)[0m
2025-04-03T23:44:31.6059923Z   [32m  [32mâœ”[39m[0m[90m insertMany() with error handlers (gh-6228)[0m
2025-04-03T23:44:31.6078646Z   [32m  [32mâœ”[39m[0m[90m insertMany() with non object array error can be catched (gh-8363)[0m
2025-04-03T23:44:31.6236149Z   [32m  [32mâœ”[39m[0m[90m insertMany() return docs with empty modifiedPaths (gh-7852)[0m
2025-04-03T23:44:31.6336950Z   [32m  [32mâœ”[39m[0m[90m insertMany with Decimal (gh-5190)[0m
2025-04-03T23:44:31.6360504Z [0m    insertMany() lean option to bypass validation (gh-8234)[0m
2025-04-03T23:44:31.6485348Z     [32m  [32mâœ”[39m[0m[90m insertMany() should bypass validation if lean option set to `true`[0m
2025-04-03T23:44:31.6517891Z     [32m  [32mâœ”[39m[0m[90m insertMany() should validate if lean option not set[0m
2025-04-03T23:44:31.6539743Z     [32m  [32mâœ”[39m[0m[90m insertMany() should validate if lean option set to `false`[0m
2025-04-03T23:44:31.6576526Z 
2025-04-03T23:44:31.6577094Z [0m  pre/post hooks, type of this[0m
2025-04-03T23:44:31.6931829Z   [32m  [32mâœ”[39m[0m[90m dynamic type of this in pre/post hooks[0m
2025-04-03T23:44:31.6969177Z 
2025-04-03T23:44:31.6969947Z [0m  model middleware[0m
2025-04-03T23:44:31.7086111Z   [32m  [32mâœ”[39m[0m[90m post save[0m
2025-04-03T23:44:31.7244482Z   [32m  [32mâœ”[39m[0m[90m sync error in post save (gh-3483)[0m
2025-04-03T23:44:31.8338077Z   [32m  [32mâœ”[39m[0m[90m pre hook promises (gh-3779)[0m[31m (101ms)[0m
2025-04-03T23:44:31.9452460Z   [32m  [32mâœ”[39m[0m[90m post hook promises (gh-3779)[0m[31m (110ms)[0m
2025-04-03T23:44:31.9555854Z   [32m  [32mâœ”[39m[0m[90m validate middleware runs before save middleware (gh-2462)[0m
2025-04-03T23:44:31.9682106Z   [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:31.9877827Z   [32m  [32mâœ”[39m[0m[90m gh-1829[0m
2025-04-03T23:44:32.0070522Z   [32m  [32mâœ”[39m[0m[90m sync error in pre save (gh-3483)[0m
2025-04-03T23:44:32.0318026Z   [32m  [32mâœ”[39m[0m[90m sync error in pre save after next() (gh-3483)[0m
2025-04-03T23:44:32.0441993Z   [32m  [32mâœ”[39m[0m[90m validate + remove[0m
2025-04-03T23:44:32.0643944Z   [32m  [32mâœ”[39m[0m[90m static hooks (gh-5982)[0m
2025-04-03T23:44:32.0848076Z   [32m  [32mâœ”[39m[0m[90m deleteOne hooks (gh-7538)[0m
2025-04-03T23:44:32.0927317Z [0m    post init hooks[0m
2025-04-03T23:44:32.1019572Z     [32m  [32mâœ”[39m[0m[90m success[0m
2025-04-03T23:44:32.1248366Z     [32m  [32mâœ”[39m[0m[90m with errors[0m
2025-04-03T23:44:32.1269894Z [0m    createCollection middleware[0m
2025-04-03T23:44:32.1342737Z     [32m  [32mâœ”[39m[0m[90m calls createCollection hooks[0m
2025-04-03T23:44:32.1371749Z     [32m  [32mâœ”[39m[0m[90m allows skipping createCollection from hooks[0m
2025-04-03T23:44:32.1387642Z [0m    bulkWrite middleware[0m
2025-04-03T23:44:32.1401298Z     [32m  [32mâœ”[39m[0m[90m calls bulkWrite hooks[0m
2025-04-03T23:44:32.1596345Z     [32m  [32mâœ”[39m[0m[90m allows updating ops[0m
2025-04-03T23:44:32.1792194Z     [32m  [32mâœ”[39m[0m[90m supports error handlers[0m
2025-04-03T23:44:32.1960755Z     [32m  [32mâœ”[39m[0m[90m supports skipping wrapped function[0m
2025-04-03T23:44:32.2065821Z 
2025-04-03T23:44:32.2067172Z [0m  model: populate: divergent arrays[0m
2025-04-03T23:44:32.2343043Z [0m    from match[0m
2025-04-03T23:44:32.2369431Z     [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-03T23:44:32.2388648Z     [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-03T23:44:32.2405889Z     [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-03T23:44:32.2406495Z [0m    from skip[0m
2025-04-03T23:44:32.2406927Z [0m      2[0m
2025-04-03T23:44:32.2425744Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-03T23:44:32.2441868Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-03T23:44:32.2469737Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-03T23:44:32.2470267Z [0m      0[0m
2025-04-03T23:44:32.2495405Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-03T23:44:32.2517844Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-03T23:44:32.2539269Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-03T23:44:32.2539931Z [0m    from limit[0m
2025-04-03T23:44:32.2540360Z [0m      0[0m
2025-04-03T23:44:32.2558741Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-03T23:44:32.2575597Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-03T23:44:32.2591664Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-03T23:44:32.2592175Z [0m      1[0m
2025-04-03T23:44:32.2609405Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-03T23:44:32.2625969Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-03T23:44:32.2642176Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-03T23:44:32.2643088Z [0m    from deselected _id[0m
2025-04-03T23:44:32.2644886Z [0m      using string and only -_id[0m
2025-04-03T23:44:32.2664618Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-03T23:44:32.2682224Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-03T23:44:32.2699574Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-03T23:44:32.2700166Z [0m      using string[0m
2025-04-03T23:44:32.2719751Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-03T23:44:32.2736973Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-03T23:44:32.2753199Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-03T23:44:32.2753919Z [0m      using object and only _id: 0[0m
2025-04-03T23:44:32.2771959Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-03T23:44:32.2788491Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-03T23:44:32.2804456Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-03T23:44:32.2805269Z [0m      using object[0m
2025-04-03T23:44:32.2822666Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-03T23:44:32.2839096Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-03T23:44:32.2855412Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-03T23:44:32.2876368Z 
2025-04-03T23:44:32.2877080Z [0m  model: populate:[0m
2025-04-03T23:44:32.2877742Z [0m    setting populated paths (gh-570)[0m
2025-04-03T23:44:32.2878503Z [0m      should not cast to _id of type ObjectId[0m
2025-04-03T23:44:32.3277309Z       [32m  [32mâœ”[39m[0m[90m if a document[0m
2025-04-03T23:44:32.3356428Z       [32m  [32mâœ”[39m[0m[90m if an object[0m
2025-04-03T23:44:32.3368479Z [0m      should not cast to _id of type String[0m
2025-04-03T23:44:32.3604398Z       [32m  [32mâœ”[39m[0m[90m if a document[0m
2025-04-03T23:44:32.3686861Z       [32m  [32mâœ”[39m[0m[90m if an object[0m
2025-04-03T23:44:32.3697754Z [0m      should not cast to _id of type Number[0m
2025-04-03T23:44:32.3908543Z       [32m  [32mâœ”[39m[0m[90m if a document[0m
2025-04-03T23:44:32.4010404Z       [32m  [32mâœ”[39m[0m[90m if an object[0m
2025-04-03T23:44:32.4035472Z [0m      should not cast to _id of type Buffer[0m
2025-04-03T23:44:32.4255844Z       [32m  [32mâœ”[39m[0m[90m if a document[0m
2025-04-03T23:44:32.4338016Z       [32m  [32mâœ”[39m[0m[90m if an object[0m
2025-04-03T23:44:32.4359526Z 
2025-04-03T23:44:32.4363592Z [0m  model: populate:[0m
2025-04-03T23:44:32.4431635Z   [32m  [32mâœ”[39m[0m[90m populating array of object[0m
2025-04-03T23:44:32.4644972Z   [32m  [32mâœ”[39m[0m[90m deep population (gh-3103)[0m
2025-04-03T23:44:32.4833170Z   [32m  [32mâœ”[39m[0m[90m populating a single ref[0m
2025-04-03T23:44:32.5053420Z   [32m  [32mâœ”[39m[0m[90m not failing on null as ref[0m
2025-04-03T23:44:32.5259825Z   [32m  [32mâœ”[39m[0m[90m not failing on empty object as ref[0m
2025-04-03T23:44:32.5578251Z   [32m  [32mâœ”[39m[0m[90m across DBs[0m
2025-04-03T23:44:32.5850342Z   [32m  [32mâœ”[39m[0m[90m an error in single ref population propagates[0m
2025-04-03T23:44:32.6128956Z   [32m  [32mâœ”[39m[0m[90m populating with partial fields selection[0m
2025-04-03T23:44:32.6365928Z   [32m  [32mâœ”[39m[0m[90m population of single oid with partial field selection and filter[0m
2025-04-03T23:44:32.6624382Z   [32m  [32mâœ”[39m[0m[90m population of undefined fields in a collection of docs[0m
2025-04-03T23:44:32.7017508Z   [32m  [32mâœ”[39m[0m[90m undefined for nested paths (gh-3859)[0m
2025-04-03T23:44:32.7350240Z   [32m  [32mâœ”[39m[0m[90m population and changing a reference[0m
2025-04-03T23:44:32.7647778Z   [32m  [32mâœ”[39m[0m[90m populating with partial fields selection and changing ref[0m
2025-04-03T23:44:32.7933769Z   [32m  [32mâœ”[39m[0m[90m populating an array of refs and fetching many[0m
2025-04-03T23:44:32.8241338Z   [32m  [32mâœ”[39m[0m[90m an error in array reference population propagates[0m
2025-04-03T23:44:32.8476273Z   [32m  [32mâœ”[39m[0m[90m populating an array of references with fields selection[0m
2025-04-03T23:44:32.8797524Z   [32m  [32mâœ”[39m[0m[90m populating an array of references and filtering[0m
2025-04-03T23:44:32.9018290Z   [32m  [32mâœ”[39m[0m[90m populating an array of references and multi-filtering[0m
2025-04-03T23:44:32.9270213Z   [32m  [32mâœ”[39m[0m[90m populating an array of references and multi-filtering with field selection[0m
2025-04-03T23:44:32.9659534Z   [32m  [32mâœ”[39m[0m[90m populating an array of refs changing one and removing one[0m
2025-04-03T23:44:32.9905263Z   [32m  [32mâœ”[39m[0m[90m clears cache when array has been re-assigned (gh-2176)[0m
2025-04-03T23:44:33.0174599Z   [32m  [32mâœ”[39m[0m[90m populating subdocuments partially[0m
2025-04-03T23:44:33.0334704Z   [32m  [32mâœ”[39m[0m[90m populating subdocuments partially with conditions[0m
2025-04-03T23:44:33.0554028Z   [32m  [32mâœ”[39m[0m[90m populating subdocs with invalid/missing subproperties[0m
2025-04-03T23:44:33.0991124Z   [32m  [32mâœ”[39m[0m[90m properly handles limit per document (gh-2151)[0m[33m (41ms)[0m
2025-04-03T23:44:33.1136144Z   [32m  [32mâœ”[39m[0m[90m populating subdocuments partially with empty array (gh-481)[0m
2025-04-03T23:44:33.1381772Z   [32m  [32mâœ”[39m[0m[90m populating subdocuments partially with null array[0m
2025-04-03T23:44:33.1699344Z   [32m  [32mâœ”[39m[0m[90m populating subdocuments with array including nulls[0m
2025-04-03T23:44:33.1979036Z   [32m  [32mâœ”[39m[0m[90m supports `retainNullValues` to override filtering out null docs (gh-6432)[0m
2025-04-03T23:44:33.2236147Z   [32m  [32mâœ”[39m[0m[90m supports `retainNullValues` while suppressing _id of subdocument[0m
2025-04-03T23:44:33.2616918Z   [32m  [32mâœ”[39m[0m[90m populating more than one array at a time[0m
2025-04-03T23:44:33.3058071Z   [32m  [32mâœ”[39m[0m[90m populating multiple children of a sub-array at a time[0m[33m (41ms)[0m
2025-04-03T23:44:33.3470132Z   [32m  [32mâœ”[39m[0m[90m passing sort options to the populate method[0m[33m (38ms)[0m
2025-04-03T23:44:33.3750899Z   [32m  [32mâœ”[39m[0m[90m limit should apply to each returned doc, not in aggregate (gh-1490)[0m
2025-04-03T23:44:33.3778388Z   [32m  [32mâœ”[39m[0m[90m refs should cast to ObjectId from hexstrings[0m
2025-04-03T23:44:33.4151983Z   [32m  [32mâœ”[39m[0m[90m populate should work on String _ids[0m
2025-04-03T23:44:33.4608454Z   [32m  [32mâœ”[39m[0m[90m required works on ref fields (gh-577)[0m[33m (43ms)[0m
2025-04-03T23:44:33.4891959Z   [32m  [32mâœ”[39m[0m[90m populate should work on Number _ids[0m
2025-04-03T23:44:33.5210464Z   [32m  [32mâœ”[39m[0m[90m populate works with schemas with both id and _id defined[0m
2025-04-03T23:44:33.5432536Z   [32m  [32mâœ”[39m[0m[90m Update works with populated arrays (gh-602)[0m
2025-04-03T23:44:33.5671495Z   [32m  [32mâœ”[39m[0m[90m toJSON should also be called for refs (gh-675)[0m
2025-04-03T23:44:33.5933587Z   [32m  [32mâœ”[39m[0m[90m populate should work on Buffer _ids (gh-686)[0m
2025-04-03T23:44:33.6188440Z   [32m  [32mâœ”[39m[0m[90m populated Buffer _ids should be requireable[0m
2025-04-03T23:44:33.6409699Z   [32m  [32mâœ”[39m[0m[90m populating with custom model selection (gh-773)[0m
2025-04-03T23:44:33.6641604Z   [32m  [32mâœ”[39m[0m[90m strips out not-matched ids when populating a hydrated doc (gh-6435)[0m
2025-04-03T23:44:33.6860798Z   [32m  [32mâœ”[39m[0m[90m avoids setting empty array on lean document when populate result is undefined (gh-10599)[0m
2025-04-03T23:44:33.7136160Z   [32m  [32mâœ”[39m[0m[90m supports ref: Model with virtual populate (gh-10695)[0m
2025-04-03T23:44:33.7372358Z   [32m  [32mâœ”[39m[0m[90m supports ref on subdocuments (gh-10856)[0m
2025-04-03T23:44:33.7652401Z   [32m  [32mâœ”[39m[0m[90m no-op when populating a single nested subdoc underneath a doc array with no ref (gh-11538) (gh-10856)[0m
2025-04-03T23:44:33.7898377Z   [32m  [32mâœ”[39m[0m[90m supports ref on array containing subdocuments (gh-10856)[0m
2025-04-03T23:44:33.8168300Z   [32m  [32mâœ”[39m[0m[90m uses `Model` by default when doing `Model.populate()` on a POJO (gh-10978)[0m
2025-04-03T23:44:33.8458478Z   [32m  [32mâœ”[39m[0m[90m can reference parent connection models by name after `useDb()` (gh-11003)[0m
2025-04-03T23:44:33.8807231Z   [32m  [32mâœ”[39m[0m[90m handles refPath underneath map of subdocuments (gh-9359)[0m
2025-04-03T23:44:33.9067681Z   [32m  [32mâœ”[39m[0m[90m handles virtual populate with `justOne` underneath document array and sort (gh-12730) (gh-10552)[0m
2025-04-03T23:44:33.9513501Z   [32m  [32mâœ”[39m[0m[90m merges match when match is on `_id` (gh-12834)[0m[33m (43ms)[0m
2025-04-03T23:44:33.9852106Z   [32m  [32mâœ”[39m[0m[90m supports removing and then recreating populate virtual using schema clone (gh-13085)[0m
2025-04-03T23:44:34.0126701Z   [32m  [32mâœ”[39m[0m[90m handles populating underneath document arrays that have null (gh-13839)[0m
2025-04-03T23:44:34.0524588Z   [32m  [32mâœ”[39m[0m[90m calls match function with virtual as parameter (gh-12443)[0m[33m (38ms)[0m
2025-04-03T23:44:34.0775752Z   [32m  [32mâœ”[39m[0m[90m allows pushing to model populated in a query cursor (gh-13575)[0m
2025-04-03T23:44:34.1019319Z   [32m  [32mâœ”[39m[0m[90m sets populated docs in correct order when populating virtual underneath document array with justOne (gh-14018)[0m
2025-04-03T23:44:34.1219254Z   [32m  [32mâœ”[39m[0m[90m calls transform with single ObjectId when populating justOne path underneath array (gh-14073)[0m
2025-04-03T23:44:34.1466714Z   [32m  [32mâœ”[39m[0m[90m allows deselecting discriminator key when populating (gh-3230) (gh-13760) (gh-13679)[0m
2025-04-03T23:44:34.1783257Z   [32m  [32mâœ”[39m[0m[90m calls setter on virtual populated path with populated doc (gh-14285)[0m
2025-04-03T23:44:34.2078558Z   [32m  [32mâœ”[39m[0m[90m handles ref() function that returns a model (gh-14249)[0m
2025-04-03T23:44:34.2319289Z   [32m  [32mâœ”[39m[0m[90m avoids filtering out `null` values when applying match function (gh-14494)[0m
2025-04-03T23:44:34.2540282Z   [32m  [32mâœ”[39m[0m[90m avoids depopulating manually populated doc as getter value (gh-14759)[0m
2025-04-03T23:44:34.2739710Z   [32m  [32mâœ”[39m[0m[90m avoids populating manually populated doc as getter value (gh-14827)[0m
2025-04-03T23:44:34.2994912Z   [32m  [32mâœ”[39m[0m[90m makes sure that populate works correctly with duplicate foreignField with lean(); (gh-14794)[0m
2025-04-03T23:44:34.3271625Z   [32m  [32mâœ”[39m[0m[90m depopulates if pushing ObjectId to a populated array (gh-1635)[0m
2025-04-03T23:44:34.3775765Z   [32m  [32mâœ”[39m[0m[90m handles converting uuid documents to strings when calling toObject() (gh-14869)[0m[33m (48ms)[0m
2025-04-03T23:44:34.4345193Z   [32m  [32mâœ”[39m[0m[90m avoids repopulating if forceRepopulate is disabled (gh-14979)[0m[33m (54ms)[0m
2025-04-03T23:44:34.4845795Z   [32m  [32mâœ”[39m[0m[90m handles forceRepopulate as a global option (gh-14979)[0m[33m (46ms)[0m
2025-04-03T23:44:34.5427902Z   [32m  [32mâœ”[39m[0m[90m handles populating UUID fields (gh-15315)[0m[33m (54ms)[0m
2025-04-03T23:44:34.5458863Z [0m    deep populate[0m
2025-04-03T23:44:34.6093261Z     [32m  [32mâœ”[39m[0m[90m deep population with refs (gh-3507)[0m[33m (64ms)[0m
2025-04-03T23:44:34.6705403Z     [32m  [32mâœ”[39m[0m[90m multiple paths with same options (gh-3808)[0m[33m (57ms)[0m
2025-04-03T23:44:34.6735880Z [0m    populating sub docs[0m
2025-04-03T23:44:34.7158249Z     [32m  [32mâœ”[39m[0m[90m works with findById[0m[33m (42ms)[0m
2025-04-03T23:44:34.7938532Z     [32m  [32mâœ”[39m[0m[90m works when first doc returned has empty array for populated path (gh-1055)[0m[33m (75ms)[0m
2025-04-03T23:44:34.7968738Z [0m    specifying a custom model without specifying a ref in schema[0m
2025-04-03T23:44:34.8207598Z     [32m  [32mâœ”[39m[0m[90m with String _id[0m
2025-04-03T23:44:34.8575174Z     [32m  [32mâœ”[39m[0m[90m with Number _id[0m
2025-04-03T23:44:34.8854059Z     [32m  [32mâœ”[39m[0m[90m with Buffer _id[0m
2025-04-03T23:44:34.9114666Z     [32m  [32mâœ”[39m[0m[90m with ObjectId _id[0m
2025-04-03T23:44:34.9137276Z [0m    specifying all params using an object[0m
2025-04-03T23:44:34.9473948Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:34.9499722Z [0m    Model.populate()[0m
2025-04-03T23:44:34.9761374Z     [32m  [32mâœ”[39m[0m[90m returns a promise[0m
2025-04-03T23:44:35.0060411Z     [32m  [32mâœ”[39m[0m[90m of individual document works[0m
2025-04-03T23:44:35.0082749Z [0m      a document already populated[0m
2025-04-03T23:44:35.0083512Z [0m        when paths are not modified[0m
2025-04-03T23:44:35.0363005Z         [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:35.0384431Z [0m        when paths are modified[0m
2025-04-03T23:44:35.0664678Z         [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:35.0687496Z [0m      of multiple documents[0m
2025-04-03T23:44:35.0980296Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:35.1002788Z [0m    populating combined with lean (gh-1260)[0m
2025-04-03T23:44:35.1253974Z     [32m  [32mâœ”[39m[0m[90m with findOne[0m
2025-04-03T23:44:35.1537505Z     [32m  [32mâœ”[39m[0m[90m with find[0m
2025-04-03T23:44:35.1560064Z [0m    records paths and _ids used in population[0m
2025-04-03T23:44:35.1857063Z     [32m  [32mâœ”[39m[0m[90m with findOne[0m
2025-04-03T23:44:35.2153700Z     [32m  [32mâœ”[39m[0m[90m with find[0m
2025-04-03T23:44:35.2182382Z [0m    deselecting _id[0m
2025-04-03T23:44:35.2183000Z [0m      in a subdocument[0m
2025-04-03T23:44:35.2497871Z       [32m  [32mâœ”[39m[0m[90m works (gh-14231)[0m
2025-04-03T23:44:35.2805747Z       [32m  [32mâœ”[39m[0m[90m with lean[0m
2025-04-03T23:44:35.2828355Z [0m      of documents being populated[0m
2025-04-03T23:44:35.3051316Z       [32m  [32mâœ”[39m[0m[90m still works (gh-1441)[0m
2025-04-03T23:44:35.3076844Z [0m    DynRef[0m
2025-04-03T23:44:35.3300694Z     [32m  [32mâœ”[39m[0m[90m Simple populate[0m
2025-04-03T23:44:35.3574875Z     [32m  [32mâœ”[39m[0m[90m Array populate[0m
2025-04-03T23:44:35.3932634Z     [32m  [32mâœ”[39m[0m[90m with nonexistant refPath (gh-4637)[0m
2025-04-03T23:44:35.4361960Z     [32m  [32mâœ”[39m[0m[90m array with empty refPath (gh-5377)[0m
2025-04-03T23:44:35.4872320Z     [32m  [32mâœ”[39m[0m[90m with non-arrays (gh-5114)[0m
2025-04-03T23:44:35.5589877Z     [32m  [32mâœ”[39m[0m[90m with different schema types for local fields (gh-6870)[0m[33m (38ms)[0m
2025-04-03T23:44:35.6086778Z     [32m  [32mâœ”[39m[0m[90m with refPath and array of ids with parent refPath[0m
2025-04-03T23:44:35.6511233Z     [32m  [32mâœ”[39m[0m[90m with nested nonexistant refPath (gh-6457)[0m
2025-04-03T23:44:35.6993638Z     [32m  [32mâœ”[39m[0m[90m where first doc doesnt have a refPath (gh-6913[0m
2025-04-03T23:44:35.7439895Z     [32m  [32mâœ”[39m[0m[90m readable error with deselected refPath (gh-6834)[0m
2025-04-03T23:44:35.7471036Z [0m    leaves Documents within Mixed properties alone (gh-1471)[0m
2025-04-03T23:44:35.7767252Z     [32m  [32mâœ”[39m[0m[90m when saving new docs[0m
2025-04-03T23:44:35.8075220Z     [32m  [32mâœ”[39m[0m[90m when saving existing docs 5T5[0m
2025-04-03T23:44:35.8098686Z [0m    github issues[0m
2025-04-03T23:44:35.8378470Z     [32m  [32mâœ”[39m[0m[90m populating an array of refs, slicing, and fetching many (gh-5737)[0m
2025-04-03T23:44:35.8773425Z     [32m  [32mâœ”[39m[0m[90m populate + slice (gh-5737a)[0m[33m (38ms)[0m
2025-04-03T23:44:35.9109890Z     [32m  [32mâœ”[39m[0m[90m handles multiple spaces in between paths to populate (gh-13951)[0m
2025-04-03T23:44:35.9462518Z     [32m  [32mâœ”[39m[0m[90m maps results back to correct document (gh-1444)[0m
2025-04-03T23:44:35.9784249Z     [32m  [32mâœ”[39m[0m[90m handles skip[0m
2025-04-03T23:44:36.0055932Z     [32m  [32mâœ”[39m[0m[90m handles slice (gh-1934)[0m
2025-04-03T23:44:36.0333371Z     [32m  [32mâœ”[39m[0m[90m fails if sorting with a doc array subprop (gh-2202)[0m
2025-04-03T23:44:36.0552125Z     [32m  [32mâœ”[39m[0m[90m handles toObject() (gh-3279)[0m
2025-04-03T23:44:36.0800452Z     [32m  [32mâœ”[39m[0m[90m populate option (gh-2321)[0m
2025-04-03T23:44:36.1203286Z     [32m  [32mâœ”[39m[0m[90m discriminator child schemas (gh-3878)[0m[33m (38ms)[0m
2025-04-03T23:44:36.1476156Z     [32m  [32mâœ”[39m[0m[90m set to obj w/ same id doesnt mark modified (gh-3992)[0m
2025-04-03T23:44:36.2104497Z     [32m  [32mâœ”[39m[0m[90m deep populate single -> array (gh-3904)[0m[33m (61ms)[0m
2025-04-03T23:44:36.2545638Z     [32m  [32mâœ”[39m[0m[90m deep populate array -> array (gh-3954)[0m[33m (42ms)[0m
2025-04-03T23:44:36.2947984Z     [32m  [32mâœ”[39m[0m[90m 4 level population (gh-3973)[0m[33m (38ms)[0m
2025-04-03T23:44:36.3337920Z     [32m  [32mâœ”[39m[0m[90m deep populate two paths (gh-3974)[0m
2025-04-03T23:44:36.3974680Z     [32m  [32mâœ”[39m[0m[90m out-of-order discriminators (gh-4073)[0m[33m (61ms)[0m
2025-04-03T23:44:36.4390513Z     [32m  [32mâœ”[39m[0m[90m dynref bug (gh-4104)[0m[33m (38ms)[0m
2025-04-03T23:44:36.4592726Z     [32m  [32mâœ”[39m[0m[90m returned array has toObject() (gh-4656)[0m
2025-04-03T23:44:36.4731734Z     [32m  [32mâœ”[39m[0m[90m empty array (gh-4284)[0m
2025-04-03T23:44:36.4912273Z     [32m  [32mâœ”[39m[0m[90m empty populate string is a no-op (gh-4702)[0m
2025-04-03T23:44:36.5176188Z     [32m  [32mâœ”[39m[0m[90m checks field name correctly with nested arrays (gh-4365)[0m
2025-04-03T23:44:36.5473465Z     [32m  [32mâœ”[39m[0m[90m virtual populate with embedded discriminators (gh-6273)[0m
2025-04-03T23:44:36.5728554Z     [32m  [32mâœ”[39m[0m[90m populates virtual of embedded discriminator with dynamic ref (gh-6554)[0m
2025-04-03T23:44:36.6030559Z     [32m  [32mâœ”[39m[0m[90m populates virtual of embedded discriminator with dynamic ref when more than one model name is returned (gh-6612)[0m
2025-04-03T23:44:36.6211365Z     [32m  [32mâœ”[39m[0m[90m uses getter if one is defined on the localField (gh-6618)[0m
2025-04-03T23:44:36.6424160Z     [32m  [32mâœ”[39m[0m[90m populate child with same name as parent (gh-6839) (gh-6908)[0m
2025-04-03T23:44:36.6680160Z     [32m  [32mâœ”[39m[0m[90m passes scope as Model instance (gh-6726)[0m
2025-04-03T23:44:36.6894924Z     [32m  [32mâœ”[39m[0m[90m respects schema array even if underlying doc doesnt use array (gh-6908)[0m
2025-04-03T23:44:36.7037948Z     [32m  [32mâœ”[39m[0m[90m save objectid with populated refPath (gh-6714)[0m
2025-04-03T23:44:36.7492704Z     [32m  [32mâœ”[39m[0m[90m correct model and justOne when double populating (gh-6978)[0m[33m (43ms)[0m
2025-04-03T23:44:36.7923511Z     [32m  [32mâœ”[39m[0m[90m correctly finds justOne when double-populating underneath an array (gh-6798)[0m[33m (40ms)[0m
2025-04-03T23:44:36.8179674Z     [32m  [32mâœ”[39m[0m[90m handles virtual justOne if it is not set (gh-6988)[0m
2025-04-03T23:44:36.8452474Z     [32m  [32mâœ”[39m[0m[90m handles virtual justOne if it is not set, is lean, and subfields are selected[0m
2025-04-03T23:44:36.8739806Z     [32m  [32mâœ”[39m[0m[90m does not set `justOne` if underneath Mixed (gh-6985)[0m
2025-04-03T23:44:36.8998070Z     [32m  [32mâœ”[39m[0m[90m supports setting `justOne` as an option (gh-6985)[0m
2025-04-03T23:44:36.9301376Z     [32m  [32mâœ”[39m[0m[90m multiple localFields and foreignFields (gh-5704)[0m
2025-04-03T23:44:36.9594435Z     [32m  [32mâœ”[39m[0m[90m lean populate underneath array (gh-7052)[0m
2025-04-03T23:44:37.0047687Z     [32m  [32mâœ”[39m[0m[90m handles plus path projections with virtual populate (gh-7050)[0m
2025-04-03T23:44:37.0331739Z     [32m  [32mâœ”[39m[0m[90m set model as ref in schema (gh-7253)[0m
2025-04-03T23:44:37.0759866Z     [32m  [32mâœ”[39m[0m[90m count option (gh-4469) (gh-7380)[0m[33m (40ms)[0m
2025-04-03T23:44:37.1086442Z     [32m  [32mâœ”[39m[0m[90m count option ignores skip (gh-4469) (gh-8476)[0m
2025-04-03T23:44:37.1455209Z     [32m  [32mâœ”[39m[0m[90m count with deeply nested (gh-7573)[0m
2025-04-03T23:44:37.1773372Z     [32m  [32mâœ”[39m[0m[90m explicit model option overrides refPath (gh-7273)[0m
2025-04-03T23:44:37.2048490Z     [32m  [32mâœ”[39m[0m[90m clone option means identical ids get separate copies of doc (gh-3258)[0m
2025-04-03T23:44:37.2312940Z     [32m  [32mâœ”[39m[0m[90m handles double nested array `foreignField` (gh-7374)[0m
2025-04-03T23:44:37.2786763Z     [32m  [32mâœ”[39m[0m[90m populate single path with numeric path underneath doc array (gh-7273)[0m[33m (43ms)[0m
2025-04-03T23:44:37.3073927Z     [32m  [32mâœ”[39m[0m[90m supports populating a path in a document array embedded in an array (gh-7647)[0m
2025-04-03T23:44:37.3326816Z     [32m  [32mâœ”[39m[0m[90m handles populating deeply nested path if value in db is a primitive (gh-7545)[0m
2025-04-03T23:44:37.3537977Z     [32m  [32mâœ”[39m[0m[90m sets populate virtual to empty array if local field empty (gh-8230)[0m
2025-04-03T23:44:37.3696424Z     [32m  [32mâœ”[39m[0m[90m sets populate virtual with count to 0 if local field empty (gh-7731)[0m
2025-04-03T23:44:37.4061673Z     [32m  [32mâœ”[39m[0m[90m can populate an array property whose name conflicts with array method (gh-7782)[0m
2025-04-03T23:44:37.4381585Z     [32m  [32mâœ”[39m[0m[90m supports cross-db populate with refPath (gh-6520)[0m
2025-04-03T23:44:37.4732430Z     [32m  [32mâœ”[39m[0m[90m ref function for conventional populate (gh-7669)[0m
2025-04-03T23:44:37.4997230Z     [32m  [32mâœ”[39m[0m[90m virtual refPath (gh-7848)[0m
2025-04-03T23:44:37.5382325Z     [32m  [32mâœ”[39m[0m[90m handles refPath on discriminator when populating top-level model (gh-5109)[0m
2025-04-03T23:44:37.5714633Z     [32m  [32mâœ”[39m[0m[90m refPath with virtual (gh-7341)[0m
2025-04-03T23:44:37.6080465Z     [32m  [32mâœ”[39m[0m[90m count with subdocs (gh-7573)[0m
2025-04-03T23:44:37.6325693Z     [32m  [32mâœ”[39m[0m[90m returns an array when count on an array localField (gh-11307) (gh-7573)[0m
2025-04-03T23:44:37.6623831Z     [32m  [32mâœ”[39m[0m[90m handles virtual populate of an embedded discriminator nested path (gh-6488) (gh-8173)[0m
2025-04-03T23:44:37.6875339Z     [32m  [32mâœ”[39m[0m[90m accessing populate virtual prop (gh-13189) (gh-8198)[0m
2025-04-03T23:44:37.7153218Z     [32m  [32mâœ”[39m[0m[90m doesnt insert empty document when populating a path within a non-existent document array (gh-8432)[0m
2025-04-03T23:44:37.7474233Z     [32m  [32mâœ”[39m[0m[90m doesnt insert empty document when lean populating a path within an underneath non-existent document array (gh-14098)[0m
2025-04-03T23:44:37.7599235Z     [32m  [32mâœ”[39m[0m[90m sets empty array if populating undefined path (gh-8455)[0m
2025-04-03T23:44:37.7981747Z     [32m  [32mâœ”[39m[0m[90m succeeds with refPath if embedded discriminator has path with same name but no refPath (gh-8452) (gh-8499)[0m
2025-04-03T23:44:37.8289671Z     [32m  [32mâœ”[39m[0m[90m excluding foreignField using minus path deselects foreignField (gh-8460)[0m
2025-04-03T23:44:37.8665720Z     [32m  [32mâœ”[39m[0m[90m supports top-level match option (gh-8475)[0m
2025-04-03T23:44:37.9159958Z     [32m  [32mâœ”[39m[0m[90m supports top-level skip and limit options (gh-8445)[0m[33m (46ms)[0m
2025-04-03T23:44:37.9427599Z     [32m  [32mâœ”[39m[0m[90m top-level limit properly applies limit per document (gh-8657)[0m
2025-04-03T23:44:37.9992392Z     [32m  [32mâœ”[39m[0m[90m correct limit with populate (gh-7318)[0m[33m (54ms)[0m
2025-04-03T23:44:38.0253055Z     [32m  [32mâœ”[39m[0m[90m perDocumentLimit as option to `populate()` method (gh-7318) (gh-9418)[0m
2025-04-03T23:44:38.0589708Z     [32m  [32mâœ”[39m[0m[90m works when embedded discriminator array has populated path but not refPath (gh-8527)[0m
2025-04-03T23:44:38.0741361Z     [32m  [32mâœ”[39m[0m[90m handles populating embedded discriminators with `refPath` when none of the subdocs have `refPath` (gh-8553)[0m
2025-04-03T23:44:38.1115983Z     [32m  [32mâœ”[39m[0m[90m throws an error when using limit with perDocumentLimit[0m
2025-04-03T23:44:38.1392561Z     [32m  [32mâœ”[39m[0m[90m handles function refPath with discriminators (gh-8731)[0m
2025-04-03T23:44:38.1549638Z     [32m  [32mâœ”[39m[0m[90m recursive virtuals with `populate` option (gh-11700)[0m
2025-04-03T23:44:38.1829976Z     [32m  [32mâœ”[39m[0m[90m no-op if populating on a document array with no ref (gh-8946)[0m
2025-04-03T23:44:38.2102545Z     [32m  [32mâœ”[39m[0m[90m no-op if populating a nested path (gh-9073)[0m
2025-04-03T23:44:38.2419981Z     [32m  [32mâœ”[39m[0m[90m handles populating primitive array under document array with discriminator (gh-9148)[0m
2025-04-03T23:44:38.2730395Z     [32m  [32mâœ”[39m[0m[90m handles deselecting _id with `perDocumentLimit` (gh-8460) (gh-9175)[0m
2025-04-03T23:44:38.2867405Z     [32m  [32mâœ”[39m[0m[90m handles embedded discriminator `refPath` with multiple documents (gh-8731) (gh-9153)[0m
2025-04-03T23:44:38.3091180Z     [32m  [32mâœ”[39m[0m[90m Sets the populated document's parent() (gh-8092)[0m
2025-04-03T23:44:38.3476999Z     [32m  [32mâœ”[39m[0m[90m populates single nested discriminator underneath doc array when populated docs have different model but same id (gh-9244)[0m
2025-04-03T23:44:38.3719146Z     [32m  [32mâœ”[39m[0m[90m skips checking `refPath` if the path to populate is undefined (gh-9340)[0m
2025-04-03T23:44:38.3981128Z     [32m  [32mâœ”[39m[0m[90m supports default populate options (gh-6029)[0m
2025-04-03T23:44:38.4226104Z     [32m  [32mâœ”[39m[0m[90m avoids propagating lean virtuals to children (gh-9592)[0m
2025-04-03T23:44:38.4498527Z     [32m  [32mâœ”[39m[0m[90m gh-9833[0m
2025-04-03T23:44:38.4854651Z     [32m  [32mâœ”[39m[0m[90m sets not-found values to null for paths that are not in the schema (gh-9913)[0m
2025-04-03T23:44:38.5167107Z     [32m  [32mâœ”[39m[0m[90m handles perDocumentLimit where multiple documents reference the same populated doc (gh-9906)[0m
2025-04-03T23:44:38.5519247Z     [32m  [32mâœ”[39m[0m[90m supports `transform` option (gh-3375)[0m
2025-04-03T23:44:38.5789181Z     [32m  [32mâœ”[39m[0m[90m avoids calling `transform()` with `lean()` when no results (gh-12739)[0m
2025-04-03T23:44:38.6055419Z     [32m  [32mâœ”[39m[0m[90m transform to primitive (gh-10064)[0m
2025-04-03T23:44:38.6301006Z     [32m  [32mâœ”[39m[0m[90m transform with virtual populate, justOne = true (gh-3375)[0m
2025-04-03T23:44:38.6630764Z     [32m  [32mâœ”[39m[0m[90m transform with virtual populate, justOne = false (gh-3375)[0m
2025-04-03T23:44:38.6959805Z     [32m  [32mâœ”[39m[0m[90m supports populating dotted subpath of a populated doc that has the same id as a populated doc (gh-10005)[0m
2025-04-03T23:44:38.7371303Z     [32m  [32mâœ”[39m[0m[90m prevents already populated fields from becoming null gh-10068[0m
2025-04-03T23:44:38.7668258Z     [32m  [32mâœ”[39m[0m[90m populates lean subdoc with `_id` property (gh-10069)[0m
2025-04-03T23:44:38.7862826Z     [32m  [32mâœ”[39m[0m[90m handles virtual populate when foreignField is an array with duplicates (gh-10117)[0m
2025-04-03T23:44:38.8153642Z     [32m  [32mâœ”[39m[0m[90m handles virtual populate with `$elemMatch` in custom match when `foreignField` is an array (gh-10117)[0m
2025-04-03T23:44:38.8295455Z     [32m  [32mâœ”[39m[0m[90m populates immutable array paths (gh-10159)[0m
2025-04-03T23:44:38.8635841Z     [32m  [32mâœ”[39m[0m[90m populates paths under mixed schematypes where some documents have non-object properties (gh-10191)[0m
2025-04-03T23:44:38.8964084Z     [32m  [32mâœ”[39m[0m[90m populates embedded discriminator with tied value (gh-10231)[0m
2025-04-03T23:44:38.9221176Z     [32m  [32mâœ”[39m[0m[90m supports populating an array of immutable elements (gh-10264)[0m
2025-04-03T23:44:38.9519693Z     [32m  [32mâœ”[39m[0m[90m populates nested path in schema using `Model.populate()` static (gh-10335)[0m
2025-04-03T23:44:38.9858890Z     [32m  [32mâœ”[39m[0m[90m calls subdocument ref functions with subdocument as context (gh-8469)[0m
2025-04-03T23:44:38.9883361Z [0m      populate virtuals (gh-2562)[0m
2025-04-03T23:44:39.0089599Z       [32m  [32mâœ”[39m[0m[90m basic populate virtuals[0m
2025-04-03T23:44:39.0454118Z       [32m  [32mâœ”[39m[0m[90m match (gh-6787)[0m
2025-04-03T23:44:39.0715341Z       [32m  [32mâœ”[39m[0m[90m match prevents using $where[0m
2025-04-03T23:44:39.1137472Z       [32m  [32mâœ”[39m[0m[90m multiple source docs[0m[33m (39ms)[0m
2025-04-03T23:44:39.1257898Z       [32m  [32mâœ”[39m[0m[90m catchable error if localField or foreignField not specified (gh-6767)[0m
2025-04-03T23:44:39.1742973Z       [32m  [32mâœ”[39m[0m[90m source array[0m[33m (39ms)[0m
2025-04-03T23:44:39.2059252Z       [32m  [32mâœ”[39m[0m[90m multiple paths (gh-4234)[0m
2025-04-03T23:44:39.2341879Z       [32m  [32mâœ”[39m[0m[90m in embedded array (gh-4928)[0m
2025-04-03T23:44:39.2749469Z       [32m  [32mâœ”[39m[0m[90m in embedded array with sort (gh-10552)[0m[33m (38ms)[0m
2025-04-03T23:44:39.3132150Z       [32m  [32mâœ”[39m[0m[90m in embedded array with sort and one result (gh-10552)[0m
2025-04-03T23:44:39.3399054Z       [32m  [32mâœ”[39m[0m[90m justOne option (gh-4263)[0m
2025-04-03T23:44:39.3680435Z       [32m  [32mâœ”[39m[0m[90m justOne + lean (gh-6234)[0m
2025-04-03T23:44:39.3844271Z       [32m  [32mâœ”[39m[0m[90m sets empty array if lean with justOne = false and no results (gh-10992)[0m
2025-04-03T23:44:39.4194260Z       [32m  [32mâœ”[39m[0m[90m justOne underneath array (gh-6867)[0m
2025-04-03T23:44:39.4539623Z       [32m  [32mâœ”[39m[0m[90m with no results and justOne (gh-4284)[0m
2025-04-03T23:44:39.4807179Z       [32m  [32mâœ”[39m[0m[90m with multiple results and justOne (gh-4329)[0m
2025-04-03T23:44:39.5075659Z       [32m  [32mâœ”[39m[0m[90m virtuals with getters (gh-9343)[0m
2025-04-03T23:44:39.5363236Z       [32m  [32mâœ”[39m[0m[90m virtuals with `get` option (gh-9343)[0m
2025-04-03T23:44:39.5625285Z       [32m  [32mâœ”[39m[0m[90m hydrates properly (gh-4618)[0m
2025-04-03T23:44:39.5904816Z       [32m  [32mâœ”[39m[0m[90m with functions for localField and foreignField (gh-5704)[0m
2025-04-03T23:44:39.6182985Z       [32m  [32mâœ”[39m[0m[90m with functions for ref (gh-5602)[0m
2025-04-03T23:44:39.6591631Z       [32m  [32mâœ”[39m[0m[90m with functions for match (gh-7397)[0m
2025-04-03T23:44:39.6907164Z       [32m  [32mâœ”[39m[0m[90m with functions for match and foreignField (gh-7397)[0m
2025-04-03T23:44:39.7269435Z       [32m  [32mâœ”[39m[0m[90m with function for refPath (gh-6669)[0m
2025-04-03T23:44:39.7594328Z       [32m  [32mâœ”[39m[0m[90m with no results (gh-4284)[0m
2025-04-03T23:44:39.7717074Z       [32m  [32mâœ”[39m[0m[90m virtual is undefined when not populated (gh-7795)[0m
2025-04-03T23:44:39.8084164Z       [32m  [32mâœ”[39m[0m[90m deep populate virtual -> conventional (gh-4261)[0m
2025-04-03T23:44:39.8446603Z       [32m  [32mâœ”[39m[0m[90m deep populate virtual -> virtual (gh-4278)[0m
2025-04-03T23:44:39.8790975Z       [32m  [32mâœ”[39m[0m[90m source array (gh-4585)[0m
2025-04-03T23:44:39.9045819Z       [32m  [32mâœ”[39m[0m[90m lean with single result and no justOne (gh-4288)[0m
2025-04-03T23:44:39.9437753Z       [32m  [32mâœ”[39m[0m[90m gh-4923[0m
2025-04-03T23:44:39.9885531Z       [32m  [32mâœ”[39m[0m[90m supports setting default options in schema (gh-4741)[0m[33m (42ms)[0m
2025-04-03T23:44:39.9922803Z       [32m  [32mâœ”[39m[0m[90m handles populate with 0 args (gh-5036)[0m
2025-04-03T23:44:40.0000094Z       [32m  [32mâœ”[39m[0m[90m attaches `_id` property to ref ids (gh-6359) (gh-6115)[0m
2025-04-03T23:44:40.0497947Z       [32m  [32mâœ”[39m[0m[90m handles populating with discriminators that may not have a ref (gh-4817)[0m[33m (39ms)[0m
2025-04-03T23:44:40.0646598Z       [32m  [32mâœ”[39m[0m[90m populate with no ref using Model.populate (gh-4843)[0m
2025-04-03T23:44:40.0957721Z       [32m  [32mâœ”[39m[0m[90m nested populate, virtual -> normal (gh-4631)[0m
2025-04-03T23:44:40.1301422Z       [32m  [32mâœ”[39m[0m[90m populate with Decimal128 as ref (gh-4759)[0m
2025-04-03T23:44:40.1578279Z       [32m  [32mâœ”[39m[0m[90m handles circular virtual -> regular (gh-5128)[0m
2025-04-03T23:44:40.1822417Z       [32m  [32mâœ”[39m[0m[90m handles nested virtuals (gh-4851)[0m
2025-04-03T23:44:40.2095377Z       [32m  [32mâœ”[39m[0m[90m nested virtuals if top-level prop doesnt exist (gh-5431)[0m
2025-04-03T23:44:40.2328160Z       [32m  [32mâœ”[39m[0m[90m nested virtuals + doc.populate() (gh-5240)[0m
2025-04-03T23:44:40.2557156Z       [32m  [32mâœ”[39m[0m[90m no ref + cursor (gh-5334)[0m
2025-04-03T23:44:40.2995895Z       [32m  [32mâœ”[39m[0m[90m retains limit when using cursor (gh-5468)[0m[33m (41ms)[0m
2025-04-03T23:44:40.3252937Z       [32m  [32mâœ”[39m[0m[90m virtuals + doc.populate() (gh-5311)[0m
2025-04-03T23:44:40.3389962Z       [32m  [32mâœ”[39m[0m[90m empty virtual with Model.populate (gh-5331)[0m
2025-04-03T23:44:40.3760734Z       [32m  [32mâœ”[39m[0m[90m virtual populate in single nested doc (gh-4715)[0m
2025-04-03T23:44:40.3869233Z       [32m  [32mâœ”[39m[0m[90m populate with missing schema (gh-5364)[0m
2025-04-03T23:44:40.3976724Z       [32m  [32mâœ”[39m[0m[90m populate with missing schema (gh-5460)[0m
2025-04-03T23:44:40.4369378Z       [32m  [32mâœ”[39m[0m[90m array underneath non-existent array (gh-6245)[0m
2025-04-03T23:44:40.4638016Z       [32m  [32mâœ”[39m[0m[90m virtuals with justOne false and foreign field not found (gh-5336)[0m
2025-04-03T23:44:40.4905279Z       [32m  [32mâœ”[39m[0m[90m virtuals with justOne true and foreign field not found (gh-5336)[0m
2025-04-03T23:44:40.5090423Z       [32m  [32mâœ”[39m[0m[90m select foreignField automatically (gh-4959)[0m
2025-04-03T23:44:40.5444076Z       [32m  [32mâœ”[39m[0m[90m does not set `populated()` until populate is done (gh-5564)[0m
2025-04-03T23:44:40.5756277Z       [32m  [32mâœ”[39m[0m[90m virtual populate toJSON output (gh-5542)[0m
2025-04-03T23:44:40.6020794Z       [32m  [32mâœ”[39m[0m[90m works if foreignField parent is selected (gh-5037)[0m
2025-04-03T23:44:40.6521600Z       [32m  [32mâœ”[39m[0m[90m subPopulate under discriminators race condition (gh-5858)[0m[33m (47ms)[0m
2025-04-03T23:44:40.6770495Z       [32m  [32mâœ”[39m[0m[90m populating nested discriminator path (gh-5970)[0m
2025-04-03T23:44:40.7009521Z       [32m  [32mâœ”[39m[0m[90m specify model in populate (gh-4264)[0m
2025-04-03T23:44:40.7031839Z [0m        selectPopulatedFields (gh-5669)[0m
2025-04-03T23:44:40.7283854Z         [32m  [32mâœ”[39m[0m[90m auto select populated fields (gh-5669) (gh-5685)[0m
2025-04-03T23:44:40.7520348Z         [32m  [32mâœ”[39m[0m[90m disabling at schema level (gh-6546)[0m
2025-04-03T23:44:40.7758672Z         [32m  [32mâœ”[39m[0m[90m disabling at global level (gh-6546)[0m
2025-04-03T23:44:40.8006158Z         [32m  [32mâœ”[39m[0m[90m schema overwrites global (gh-6546)[0m
2025-04-03T23:44:40.8028771Z [0m      populates an array of objects[0m
2025-04-03T23:44:40.8462018Z       [32m  [32mâœ”[39m[0m[90m subpopulates array w/ space separated path (gh-6284)[0m[33m (43ms)[0m
2025-04-03T23:44:40.8772525Z       [32m  [32mâœ”[39m[0m[90m populates array of space separated path objs (gh-6414)[0m
2025-04-03T23:44:40.9225462Z       [32m  [32mâœ”[39m[0m[90m handles subpopulation with options (gh-6528)[0m[33m (43ms)[0m
2025-04-03T23:44:40.9626085Z       [32m  [32mâœ”[39m[0m[90m honors top-level match with subPopulation (gh-6451)[0m
2025-04-03T23:44:40.9903302Z       [32m  [32mâœ”[39m[0m[90m handles embedded discriminator (gh-6487)[0m
2025-04-03T23:44:41.0256009Z       [32m  [32mâœ”[39m[0m[90m handles virtual embedded discriminator underneath single nested (gh-6571)[0m
2025-04-03T23:44:41.0415504Z       [32m  [32mâœ”[39m[0m[90m populates undefined nested fields without error (gh-6845)[0m
2025-04-03T23:44:41.0807775Z       [32m  [32mâœ”[39m[0m[90m populates refPath from array element (gh-6509)[0m
2025-04-03T23:44:41.0838728Z [0m      lean + deep populate (gh-6498)[0m
2025-04-03T23:44:41.1176320Z       [32m  [32mâœ”[39m[0m[90m document, and subdocuments are not lean by default[0m
2025-04-03T23:44:41.1509365Z       [32m  [32mâœ”[39m[0m[90m .lean() makes query result, and all populated fields lean[0m
2025-04-03T23:44:41.1836540Z       [32m  [32mâœ”[39m[0m[90m disabling lean at some populating level reflects on it, and descendants[0m
2025-04-03T23:44:41.2240237Z       [32m  [32mâœ”[39m[0m[90m enabling lean at some populating level reflects on it, and descendants[0m
2025-04-03T23:44:41.2573531Z       [32m  [32mâœ”[39m[0m[90m disabling lean on nested population overwrites parent lean[0m
2025-04-03T23:44:41.2599025Z [0m      gh-8247[0m
2025-04-03T23:44:41.2762210Z       [32m  [32mâœ”[39m[0m[90m checking `populated()` on a document array element (gh-8247)[0m
2025-04-03T23:44:41.3024257Z       [32m  [32mâœ”[39m[0m[90m updates top-level populated() when pushing elements onto a document array with single populated path (gh-8247) (gh-8265)[0m
2025-04-03T23:44:41.3399640Z       [32m  [32mâœ”[39m[0m[90m retainNullValues stores `null` in array if foreign doc not found (gh-8293)[0m
2025-04-03T23:44:41.3718328Z       [32m  [32mâœ”[39m[0m[90m virtual populate with discriminator that has a custom discriminator value (gh-8324)[0m
2025-04-03T23:44:41.4156234Z       [32m  [32mâœ”[39m[0m[90m virtual populate with multiple `localField` and `foreignField` (gh-6608)[0m[33m (39ms)[0m
2025-04-03T23:44:41.4185824Z [0m      gh-8760[0m
2025-04-03T23:44:41.4385645Z       [32m  [32mâœ”[39m[0m[90m clone with lean creates identical copies from the same document[0m
2025-04-03T23:44:41.4625460Z       [32m  [32mâœ”[39m[0m[90m clone with populate and lean makes child lean[0m
2025-04-03T23:44:41.4902726Z       [32m  [32mâœ”[39m[0m[90m can populate subdocs where one is discriminator and the other is not (gh-8837)[0m
2025-04-03T23:44:41.5196790Z       [32m  [32mâœ”[39m[0m[90m can populate virtuals defined on child discriminators (gh-8924)[0m
2025-04-03T23:44:41.5222010Z [0m    strictPopulate[0m
2025-04-03T23:44:41.5681124Z     [32m  [32mâœ”[39m[0m[90m does not throw an error when using strictPopulate on a nested path (gh-13863)[0m[33m (45ms)[0m
2025-04-03T23:44:41.5981753Z     [32m  [32mâœ”[39m[0m[90m reports full path when throwing `strictPopulate` error with deep populate (gh-10923)[0m
2025-04-03T23:44:41.6265986Z     [32m  [32mâœ”[39m[0m[90m propagates toObject options to populate virtuals (gh-13325)[0m
2025-04-03T23:44:41.6408977Z     [32m  [32mâœ”[39m[0m[90m respects strictPopulate schema option (gh-11290)[0m
2025-04-03T23:44:41.6840330Z     [32m  [32mâœ”[39m[0m[90m allows overwriting localField and foreignField when populating a virtual gh-6963[0m
2025-04-03T23:44:41.6921638Z 
2025-04-03T23:44:41.6923170Z [0m  model query casting[0m
2025-04-03T23:44:41.7062969Z   [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:41.7190380Z   [32m  [32mâœ”[39m[0m[90m returns cast errors[0m
2025-04-03T23:44:41.7407279Z   [32m  [32mâœ”[39m[0m[90m casts $modifiers[0m
2025-04-03T23:44:41.7559829Z   [32m  [32mâœ”[39m[0m[90m casts $in values of arrays (gh-199)[0m
2025-04-03T23:44:41.7795230Z   [32m  [32mâœ”[39m[0m[90m casts $in values of arrays with single item instead of array (gh-3238)[0m
2025-04-03T23:44:41.8171698Z   [32m  [32mâœ”[39m[0m[90m casts $nin values of arrays (gh-232)[0m
2025-04-03T23:44:41.8309895Z   [32m  [32mâœ”[39m[0m[90m works when finding by Date (gh-204)[0m
2025-04-03T23:44:41.8458014Z   [32m  [32mâœ”[39m[0m[90m works with $type matching[0m
2025-04-03T23:44:41.8570563Z   [32m  [32mâœ”[39m[0m[90m works when finding Boolean with $in (gh-998)[0m
2025-04-03T23:44:41.8754695Z   [32m  [32mâœ”[39m[0m[90m works when finding Boolean with $ne (gh-1093)[0m
2025-04-03T23:44:41.8846843Z   [32m  [32mâœ”[39m[0m[90m properly casts $and (gh-1180)[0m
2025-04-03T23:44:41.9026105Z   [32m  [32mâœ”[39m[0m[90m works with $all (gh-3394)[0m
2025-04-03T23:44:41.9148106Z   [32m  [32mâœ”[39m[0m[90m date with $not + $type (gh-4632)[0m
2025-04-03T23:44:41.9268206Z   [32m  [32mâœ”[39m[0m[90m setOnInsert with custom type (gh-5126)[0m
2025-04-03T23:44:41.9493852Z   [32m  [32mâœ”[39m[0m[90m lowercase in query (gh-4569)[0m
2025-04-03T23:44:41.9605896Z   [32m  [32mâœ”[39m[0m[90m runSettersOnQuery only once on find (gh-5434)[0m
2025-04-03T23:44:41.9731971Z   [32m  [32mâœ”[39m[0m[90m setters run only once on findOne (gh-6157)[0m
2025-04-03T23:44:41.9961146Z   [32m  [32mâœ”[39m[0m[90m runSettersOnQuery as query option (gh-5350)[0m
2025-04-03T23:44:42.0218294Z   [32m  [32mâœ”[39m[0m[90m _id = 0 (gh-4610)[0m
2025-04-03T23:44:42.0347674Z   [32m  [32mâœ”[39m[0m[90m converts to CastError (gh-6803)[0m
2025-04-03T23:44:42.0657304Z   [32m  [32mâœ”[39m[0m[90m minDistance (gh-4197)[0m
2025-04-03T23:44:42.0818163Z   [32m  [32mâœ”[39m[0m[90m array ops don't break with strict:false (gh-6952)[0m
2025-04-03T23:44:42.1253594Z   [32m  [32mâœ”[39m[0m[90m should not throw a cast error when dealing with an array of an array of strings in combination with $elemMatch and $not (gh-13880)[0m
2025-04-03T23:44:42.1484834Z   [32m  [32mâœ”[39m[0m[90m should not throw a cast error when dealing with an array of objects in combination with $elemMatch (gh-13974)[0m
2025-04-03T23:44:42.1749331Z   [32m  [32mâœ”[39m[0m[90m should not throw a cast error when dealing with an array of objects in combination with $elemMatch and nested $and[0m
2025-04-03T23:44:42.1884920Z [0m    $near[0m
2025-04-03T23:44:42.2070121Z     [32m  [32mâœ”[39m[0m[90m with arrays[0m
2025-04-03T23:44:42.2264507Z     [32m  [32mâœ”[39m[0m[90m with objects[0m
2025-04-03T23:44:42.2450267Z     [32m  [32mâœ”[39m[0m[90m with nested objects[0m
2025-04-03T23:44:42.2477483Z [0m    $nearSphere[0m
2025-04-03T23:44:42.2643929Z     [32m  [32mâœ”[39m[0m[90m with arrays[0m
2025-04-03T23:44:42.2851571Z     [32m  [32mâœ”[39m[0m[90m with objects[0m
2025-04-03T23:44:42.3117779Z     [32m  [32mâœ”[39m[0m[90m with nested objects[0m
2025-04-03T23:44:42.3156847Z [0m    $within[0m
2025-04-03T23:44:42.3157772Z [0m      $centerSphere[0m
2025-04-03T23:44:42.3451144Z       [32m  [32mâœ”[39m[0m[90m with arrays[0m
2025-04-03T23:44:42.3676078Z       [32m  [32mâœ”[39m[0m[90m with objects[0m
2025-04-03T23:44:42.3864071Z       [32m  [32mâœ”[39m[0m[90m with nested objects[0m
2025-04-03T23:44:42.3885829Z [0m      $center[0m
2025-04-03T23:44:42.4038894Z       [32m  [32mâœ”[39m[0m[90m with arrays[0m
2025-04-03T23:44:42.4219529Z       [32m  [32mâœ”[39m[0m[90m with objects[0m
2025-04-03T23:44:42.4380680Z       [32m  [32mâœ”[39m[0m[90m with nested objects[0m
2025-04-03T23:44:42.4406988Z [0m      $polygon[0m
2025-04-03T23:44:42.4564821Z       [32m  [32mâœ”[39m[0m[90m with arrays[0m
2025-04-03T23:44:42.4723208Z       [32m  [32mâœ”[39m[0m[90m with objects[0m
2025-04-03T23:44:42.4906784Z       [32m  [32mâœ”[39m[0m[90m with nested objects[0m
2025-04-03T23:44:42.4933029Z [0m      $box[0m
2025-04-03T23:44:42.5067799Z       [32m  [32mâœ”[39m[0m[90m with arrays[0m
2025-04-03T23:44:42.5243067Z       [32m  [32mâœ”[39m[0m[90m with objects[0m
2025-04-03T23:44:42.5416730Z       [32m  [32mâœ”[39m[0m[90m with nested objects[0m
2025-04-03T23:44:42.5438680Z [0m    $options[0m
2025-04-03T23:44:42.5458658Z     [32m  [32mâœ”[39m[0m[90m works on arrays gh-1462[0m
2025-04-03T23:44:42.5538089Z     [32m  [32mâœ”[39m[0m[90m does not cast with uppercase (gh-7800)[0m
2025-04-03T23:44:42.5658784Z [0m    $elemMatch[0m
2025-04-03T23:44:42.5773659Z     [32m  [32mâœ”[39m[0m[90m should cast String to ObjectId in $elemMatch[0m
2025-04-03T23:44:42.5922212Z     [32m  [32mâœ”[39m[0m[90m should cast String to ObjectId in $elemMatch inside $not[0m
2025-04-03T23:44:42.6094920Z     [32m  [32mâœ”[39m[0m[90m should cast subdoc _id typed as String to String in $elemMatch gh3719[0m
2025-04-03T23:44:42.6357096Z     [32m  [32mâœ”[39m[0m[90m should cast subdoc _id typed as String to String in $elemMatch inside $not gh3719[0m
2025-04-03T23:44:42.6562294Z     [32m  [32mâœ”[39m[0m[90m casts $nor within $elemMatch (gh-9479)[0m
2025-04-03T23:44:42.6604480Z 
2025-04-03T23:44:42.6606387Z [0m  model: querying:[0m
2025-04-03T23:44:42.6715690Z   [32m  [32mâœ”[39m[0m[90m find returns a Query[0m
2025-04-03T23:44:42.6822458Z   [32m  [32mâœ”[39m[0m[90m findOne returns a Query[0m
2025-04-03T23:44:42.7123415Z   [32m  [32mâœ”[39m[0m[90m by Date (gh-336)[0m
2025-04-03T23:44:42.7291710Z   [32m  [32mâœ”[39m[0m[90m mixed types with $elemMatch (gh-591)[0m
2025-04-03T23:44:42.7855707Z   [32m  [32mâœ”[39m[0m[90m works with different methods and query types[0m[33m (44ms)[0m
2025-04-03T23:44:42.8288040Z   [32m  [32mâœ”[39m[0m[90m with conditionals[0m[33m (39ms)[0m
2025-04-03T23:44:42.8430401Z   [32m  [32mâœ”[39m[0m[90m with previously existing null values in the db[0m
2025-04-03T23:44:42.8635319Z   [32m  [32mâœ”[39m[0m[90m with unused values in the db[0m
2025-04-03T23:44:42.8846470Z   [32m  [32mâœ”[39m[0m[90m does not apply string schema setters on $regex (gh-11426)[0m
2025-04-03T23:44:42.8969709Z [0m    distinct[0m
2025-04-03T23:44:42.9003291Z     [32m  [32mâœ”[39m[0m[90m returns a Query[0m
2025-04-03T23:44:42.9372739Z     [32m  [32mâœ”[39m[0m[90m executes when you exec[0m
2025-04-03T23:44:42.9671491Z     [32m  [32mâœ”[39m[0m[90m permits excluding conditions gh-1541[0m
2025-04-03T23:44:42.9694409Z [0m    updateOne[0m
2025-04-03T23:44:42.9709241Z     [32m  [32mâœ”[39m[0m[90m returns a Query[0m
2025-04-03T23:44:42.9931594Z     [32m  [32mâœ”[39m[0m[90m can handle minimize option (gh-3381)[0m
2025-04-03T23:44:43.0021746Z [0m    findOne[0m
2025-04-03T23:44:43.0137816Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:43.0299989Z     [32m  [32mâœ”[39m[0m[90m casts $modifiers[0m
2025-04-03T23:44:43.0459407Z     [32m  [32mâœ”[39m[0m[90m querying if an array contains one of multiple members $in a set[0m
2025-04-03T23:44:43.0610563Z     [32m  [32mâœ”[39m[0m[90m querying if an array contains one of multiple members $in a set 2[0m
2025-04-03T23:44:43.0939661Z     [32m  [32mâœ”[39m[0m[90m querying via $where a string[0m
2025-04-03T23:44:43.1089208Z     [32m  [32mâœ”[39m[0m[90m querying via $where a function[0m
2025-04-03T23:44:43.1222229Z     [32m  [32mâœ”[39m[0m[90m based on nested fields[0m
2025-04-03T23:44:43.1382977Z     [32m  [32mâœ”[39m[0m[90m based on embedded doc fields (gh-242, gh-463)[0m
2025-04-03T23:44:43.1526813Z     [32m  [32mâœ”[39m[0m[90m works with nested docs and string ids (gh-389)[0m
2025-04-03T23:44:43.1672795Z     [32m  [32mâœ”[39m[0m[90m using #all with nested #elemMatch[0m
2025-04-03T23:44:43.1827673Z     [32m  [32mâœ”[39m[0m[90m using #or with nested #elemMatch[0m
2025-04-03T23:44:43.1993366Z     [32m  [32mâœ”[39m[0m[90m buffer $in array[0m
2025-04-03T23:44:43.2148042Z     [32m  [32mâœ”[39m[0m[90m regex with Array (gh-599)[0m
2025-04-03T23:44:43.2293750Z     [32m  [32mâœ”[39m[0m[90m regex with options[0m
2025-04-03T23:44:43.2445995Z     [32m  [32mâœ”[39m[0m[90m works with $elemMatch and $in combo (gh-1100)[0m
2025-04-03T23:44:43.2466366Z [0m    findById[0m
2025-04-03T23:44:43.2594511Z     [32m  [32mâœ”[39m[0m[90m handles undefined[0m
2025-04-03T23:44:43.2752747Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:43.2925813Z     [32m  [32mâœ”[39m[0m[90m works with partial initialization[0m
2025-04-03T23:44:43.3066275Z     [32m  [32mâœ”[39m[0m[90m querying if an array contains at least a certain single member (gh-220)[0m
2025-04-03T23:44:43.3240558Z     [32m  [32mâœ”[39m[0m[90m where an array where the $slice operator[0m
2025-04-03T23:44:43.3261633Z [0m    find[0m
2025-04-03T23:44:43.3416073Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:43.3578846Z     [32m  [32mâœ”[39m[0m[90m returns docs where an array that contains one specific member[0m
2025-04-03T23:44:43.3750769Z     [32m  [32mâœ”[39m[0m[90m works when comparing $ne with single value against an array[0m
2025-04-03T23:44:43.3988049Z     [32m  [32mâœ”[39m[0m[90m with partial initialization[0m
2025-04-03T23:44:43.4279725Z     [32m  [32mâœ”[39m[0m[90m where $exists[0m
2025-04-03T23:44:43.4432230Z     [32m  [32mâœ”[39m[0m[90m works with $elemMatch (gh-1100)[0m
2025-04-03T23:44:43.4610120Z     [32m  [32mâœ”[39m[0m[90m where $mod[0m
2025-04-03T23:44:43.4844087Z     [32m  [32mâœ”[39m[0m[90m where $not[0m
2025-04-03T23:44:43.5155545Z     [32m  [32mâœ”[39m[0m[90m where or()[0m
2025-04-03T23:44:43.5317147Z     [32m  [32mâœ”[39m[0m[90m using $or with array of Document[0m
2025-04-03T23:44:43.5610332Z     [32m  [32mâœ”[39m[0m[90m where $ne[0m
2025-04-03T23:44:43.5934054Z     [32m  [32mâœ”[39m[0m[90m where $nor[0m
2025-04-03T23:44:43.6115387Z     [32m  [32mâœ”[39m[0m[90m STRICT null matches[0m
2025-04-03T23:44:43.6279916Z     [32m  [32mâœ”[39m[0m[90m null matches null and undefined[0m
2025-04-03T23:44:43.6455710Z     [32m  [32mâœ”[39m[0m[90m a document whose arrays contain at least $all string values[0m
2025-04-03T23:44:43.6661762Z     [32m  [32mâœ”[39m[0m[90m using #nor with nested #elemMatch[0m
2025-04-03T23:44:43.6857205Z     [32m  [32mâœ”[39m[0m[90m strings via regexp[0m
2025-04-03T23:44:43.7112950Z     [32m  [32mâœ”[39m[0m[90m a document whose arrays contain at least $all values[0m
2025-04-03T23:44:43.7259373Z     [32m  [32mâœ”[39m[0m[90m where $size[0m
2025-04-03T23:44:43.7440107Z     [32m  [32mâœ”[39m[0m[90m $gt, $lt, $lte, $gte work on strings[0m
2025-04-03T23:44:43.7460454Z [0m      text search indexes[0m
2025-04-03T23:44:43.7688453Z       [32m  [32mâœ”[39m[0m[90m works with text search ensure indexes [0m
2025-04-03T23:44:43.7888707Z       [32m  [32mâœ”[39m[0m[90m works when text search is called by a schema (gh-3824) (gh-6851)[0m
2025-04-03T23:44:43.7924390Z [0m    limit[0m
2025-04-03T23:44:43.8099020Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:43.8121665Z [0m    skip[0m
2025-04-03T23:44:43.8281443Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:43.8300935Z [0m    sort[0m
2025-04-03T23:44:43.8458430Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:43.8669468Z     [32m  [32mâœ”[39m[0m[90m handles sorting by text score[0m
2025-04-03T23:44:43.8691764Z [0m    nested mixed "x.y.z"[0m
2025-04-03T23:44:43.8710683Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:43.8778356Z [0m    $all[0m
2025-04-03T23:44:43.8936305Z     [32m  [32mâœ”[39m[0m[90m with ObjectIds (gh-690)[0m
2025-04-03T23:44:43.9185984Z     [32m  [32mâœ”[39m[0m[90m with Dates[0m
2025-04-03T23:44:43.9476446Z     [32m  [32mâœ”[39m[0m[90m with $elemMatch (gh-3163)[0m
2025-04-03T23:44:43.9500621Z [0m    and[0m
2025-04-03T23:44:43.9655387Z     [32m  [32mâœ”[39m[0m[90m works with queries gh-1188[0m
2025-04-03T23:44:43.9697912Z     [32m  [32mâœ”[39m[0m[90m works with nested query selectors gh-1884[0m
2025-04-03T23:44:43.9821790Z [0m    2d[0m
2025-04-03T23:44:44.0000877Z     [32m  [32mâœ”[39m[0m[90m $near (gh-309)[0m
2025-04-03T23:44:44.0200586Z     [32m  [32mâœ”[39m[0m[90m $within arrays (gh-586)[0m
2025-04-03T23:44:44.0397897Z     [32m  [32mâœ”[39m[0m[90m $nearSphere with arrays (gh-610)[0m
2025-04-03T23:44:44.0585256Z     [32m  [32mâœ”[39m[0m[90m $nearSphere with invalid coordinate does not crash (gh-1874)[0m
2025-04-03T23:44:44.0778706Z     [32m  [32mâœ”[39m[0m[90m $maxDistance with arrays[0m
2025-04-03T23:44:44.0799744Z [0m    2dsphere[0m
2025-04-03T23:44:44.0887487Z     [32m  [32mâœ”[39m[0m[90m index is allowed in schema[0m
2025-04-03T23:44:44.0982801Z [0m      $geometry[0m
2025-04-03T23:44:44.1172912Z       [32m  [32mâœ”[39m[0m[90m Polygon[0m
2025-04-03T23:44:44.1193909Z [0m      $geoIntersects[0m
2025-04-03T23:44:44.1354143Z       [32m  [32mâœ”[39m[0m[90m LineString[0m
2025-04-03T23:44:44.1523997Z       [32m  [32mâœ”[39m[0m[90m MultiLineString[0m
2025-04-03T23:44:44.1793636Z       [32m  [32mâœ”[39m[0m[90m MultiPolygon[0m
2025-04-03T23:44:44.1901833Z [0m      $near[0m
2025-04-03T23:44:44.2121125Z       [32m  [32mâœ”[39m[0m[90m Point[0m
2025-04-03T23:44:44.2305316Z       [32m  [32mâœ”[39m[0m[90m works with GeoJSON (gh-1482)[0m
2025-04-03T23:44:44.2483792Z       [32m  [32mâœ”[39m[0m[90m works with legacy 2dsphere pair in schema (gh-6937)[0m
2025-04-03T23:44:44.2507716Z [0m    hashed indexes[0m
2025-04-03T23:44:44.2709198Z     [32m  [32mâœ”[39m[0m[90m work[0m
2025-04-03T23:44:44.2731014Z [0m    lean[0m
2025-04-03T23:44:44.2871894Z     [32m  [32mâœ”[39m[0m[90m find[0m
2025-04-03T23:44:44.3046033Z     [32m  [32mâœ”[39m[0m[90m removes the __v property if versionKey: false is set (gh-8934)[0m
2025-04-03T23:44:44.3198264Z     [32m  [32mâœ”[39m[0m[90m findOne[0m
2025-04-03T23:44:44.3231836Z     [32m  [32mâœ”[39m[0m[90m properly casts nested and/or queries (gh-676)[0m
2025-04-03T23:44:44.3358365Z     [32m  [32mâœ”[39m[0m[90m properly casts deeply nested and/or queries (gh-676)[0m
2025-04-03T23:44:44.3652020Z     [32m  [32mâœ”[39m[0m[90m casts $elemMatch (gh-2199)[0m
2025-04-03T23:44:44.3781852Z     [32m  [32mâœ”[39m[0m[90m does not run resetId setter on query (gh-6093)[0m
2025-04-03T23:44:44.3880798Z [0m      $eq[0m
2025-04-03T23:44:44.3900982Z       [32m  [32mâœ”[39m[0m[90m casts $eq (gh-2752)[0m
2025-04-03T23:44:44.3985166Z 
2025-04-03T23:44:44.3989953Z [0m  Model[0m
2025-04-03T23:44:44.4157157Z   [32m  [32mâœ”[39m[0m[90m can be created using _id as embedded document[0m
2025-04-03T23:44:44.4301396Z   [32m  [32mâœ”[39m[0m[90m gh-2140[0m
2025-04-03T23:44:44.4443474Z   [32m  [32mâœ”[39m[0m[90m collection name can be specified through schema[0m
2025-04-03T23:44:44.4676394Z   [32m  [32mâœ”[39m[0m[90m saving a model with a null value should perpetuate that null value to the db[0m
2025-04-03T23:44:44.4903239Z   [32m  [32mâœ”[39m[0m[90m saves subdocuments middleware correctly[0m
2025-04-03T23:44:44.5172032Z   [32m  [32mâœ”[39m[0m[90m instantiating a model with a hash that maps to at least 1 undefined value[0m
2025-04-03T23:44:44.5358559Z   [32m  [32mâœ”[39m[0m[90m modified nested objects which contain MongoseNumbers should not cause a RangeError on save (gh-714)[0m
2025-04-03T23:44:44.5647420Z   [32m  [32mâœ”[39m[0m[90m no RangeError on deleteOne() of a doc with Number _id (gh-714)[0m
2025-04-03T23:44:44.5908976Z   [32m  [32mâœ”[39m[0m[90m over-writing a number should persist to the db (gh-342)[0m
2025-04-03T23:44:44.6090981Z   [32m  [32mâœ”[39m[0m[90m changing a number non-atomically (gh-203)[0m
2025-04-03T23:44:44.6287810Z   [32m  [32mâœ”[39m[0m[90m doubly nested array saving and loading[0m
2025-04-03T23:44:44.6550951Z   [32m  [32mâœ”[39m[0m[90m multiple number push() calls[0m
2025-04-03T23:44:44.6812337Z   [32m  [32mâœ”[39m[0m[90m multiple push() calls[0m
2025-04-03T23:44:44.7108731Z   [32m  [32mâœ”[39m[0m[90m activePaths should be updated for nested modifieds[0m
2025-04-03T23:44:44.7345573Z   [32m  [32mâœ”[39m[0m[90m activePaths should be updated for nested modifieds as promise[0m
2025-04-03T23:44:44.7634096Z   [32m  [32mâœ”[39m[0m[90m $pull should affect what you see in an array before a save[0m
2025-04-03T23:44:44.7938872Z   [32m  [32mâœ”[39m[0m[90m $shift[0m
2025-04-03T23:44:44.8175241Z   [32m  [32mâœ”[39m[0m[90m updating an embedded document in an embedded array (gh-255)[0m
2025-04-03T23:44:44.8363136Z   [32m  [32mâœ”[39m[0m[90m updating an embedded array document to an Object value (gh-334)[0m
2025-04-03T23:44:44.8602692Z   [32m  [32mâœ”[39m[0m[90m saving an embedded document twice should not push that doc onto the parent doc twice (gh-267)[0m
2025-04-03T23:44:44.8749842Z   [32m  [32mâœ”[39m[0m[90m removing a subdocument atomically[0m
2025-04-03T23:44:44.9011786Z   [32m  [32mâœ”[39m[0m[90m single pull embedded doc[0m
2025-04-03T23:44:44.9214179Z   [32m  [32mâœ”[39m[0m[90m saving mixed data[0m
2025-04-03T23:44:44.9248158Z   [32m  [32mâœ”[39m[0m[90m populating mixed data from the constructor (gh-200)[0m
2025-04-03T23:44:44.9742684Z   [32m  [32mâœ”[39m[0m[90m "type" is allowed as a key[0m[33m (40ms)[0m
2025-04-03T23:44:44.9988346Z   [32m  [32mâœ”[39m[0m[90m unaltered model does not clear the doc (gh-195)[0m
2025-04-03T23:44:45.0261502Z   [32m  [32mâœ”[39m[0m[90m subdocuments with changed values should persist the values[0m
2025-04-03T23:44:45.0403918Z   [32m  [32mâœ”[39m[0m[90m a single instantiated document should be able to update its embedded documents more than once[0m
2025-04-03T23:44:45.0626638Z   [32m  [32mâœ”[39m[0m[90m should not throw range error when using Number _id and saving existing doc (gh-691)[0m
2025-04-03T23:44:45.0895217Z   [32m  [32mâœ”[39m[0m[90m path is cast to correct value when retreived from db[0m
2025-04-03T23:44:45.1410569Z   [32m  [32mâœ”[39m[0m[90m setting a path to undefined should retain the value as undefined[0m
2025-04-03T23:44:45.1449619Z   [32m  [32mâœ”[39m[0m[90m allow for object passing to ref paths (gh-1606)[0m
2025-04-03T23:44:45.1631007Z   [32m  [32mâœ”[39m[0m[90m setters trigger on null values (gh-1445)[0m
2025-04-03T23:44:45.2007187Z   [32m  [32mâœ”[39m[0m[90m dropDatabase() after init allows re-init (gh-6967)[0m
2025-04-03T23:44:45.2219868Z   [32m  [32mâœ”[39m[0m[90m replaceOne always sets version key in top-level (gh-7138)[0m
2025-04-03T23:44:45.2271740Z   [32m  [32mâœ”[39m[0m[90m can JSON.stringify(Model.schema) with nested (gh-7220)[0m
2025-04-03T23:44:45.2579310Z   [32m  [32mâœ”[39m[0m[90m sets $session() before pre save hooks run (gh-7742)[0m
2025-04-03T23:44:45.2899487Z   [32m  [32mâœ”[39m[0m[90m sets $session() before pre deleteOne hooks run (gh-7742)[0m
2025-04-03T23:44:45.3142554Z   [32m  [32mâœ”[39m[0m[90m set $session() before pre validate hooks run on bulkWrite and insertMany (gh-7769)[0m
2025-04-03T23:44:45.3324552Z   [32m  [32mâœ”[39m[0m[90m custom statics that overwrite query functions dont get hooks by default (gh-7790)[0m
2025-04-03T23:44:45.3626197Z   [32m  [32mâœ”[39m[0m[90m custom statics that overwrite aggregate functions dont get hooks by default (gh-14903)[0m
2025-04-03T23:44:45.3825228Z   [32m  [32mâœ”[39m[0m[90m custom statics that overwrite model functions dont get hooks by default[0m
2025-04-03T23:44:45.3954972Z   [32m  [32mâœ”[39m[0m[90m custom statics that overwrite document functions dont get hooks by default[0m
2025-04-03T23:44:45.4236332Z   [32m  [32mâœ”[39m[0m[90m error handling middleware passes saved doc (gh-7832)[0m
2025-04-03T23:44:45.4336666Z   [32m  [32mâœ”[39m[0m[90m throws readable error if calling Model function with bad context (gh-7957)[0m
2025-04-03T23:44:45.4576410Z   [32m  [32mâœ”[39m[0m[90m sets correct `Document#op` with `save()` (gh-8439)[0m
2025-04-03T23:44:45.4853622Z   [32m  [32mâœ”[39m[0m[90m bulkWrite sets discriminator filters (gh-8590)[0m
2025-04-03T23:44:45.5311235Z   [32m  [32mâœ”[39m[0m[90m bulkWrite skips defaults based on global setDefaultsOnInsert (gh-13823)[0m
2025-04-03T23:44:45.5459247Z   [32m  [32mâœ”[39m[0m[90m bulkWrite upsert works when update casts to empty (gh-8698)[0m
2025-04-03T23:44:45.5608837Z   [32m  [32mâœ”[39m[0m[90m bulkWrite upsert with non-schema path in filter (gh-8698)[0m
2025-04-03T23:44:45.5982963Z   [32m  [32mâœ”[39m[0m[90m bulkWrite can disable timestamps with updateOne, and updateMany[0m
2025-04-03T23:44:45.6261095Z   [32m  [32mâœ”[39m[0m[90m bulkwrite should not change updatedAt on subdocs when timestamps set to false (gh-13611)[0m
2025-04-03T23:44:45.6435878Z   [32m  [32mâœ”[39m[0m[90m bulkWrite can overwrite schema `strict` option for filters and updates (gh-8778)[0m
2025-04-03T23:44:45.6561897Z   [32m  [32mâœ”[39m[0m[90m cast errors have `kind` field (gh-8953)[0m
2025-04-03T23:44:45.6925581Z   [32m  [32mâœ”[39m[0m[90m casts bulkwrite timestamps to `Number` when specified (gh-9030)[0m
2025-04-03T23:44:45.6960526Z   [32m  [32mâœ”[39m[0m[90m Model.bulkWrite(...) does not throw an error when provided an empty array (gh-9131)[0m
2025-04-03T23:44:45.7215505Z   [32m  [32mâœ”[39m[0m[90m Model.bulkWrite(...) does not throw an error with upsert:true, setDefaultsOnInsert: true (gh-9157)[0m
2025-04-03T23:44:45.7345383Z   [32m  [32mâœ”[39m[0m[90m Model.bulkWrite(...) does not hang with empty array and ordered: false (gh-13664)[0m
2025-04-03T23:44:45.7674295Z   [32m  [32mâœ”[39m[0m[90m allows calling `create()` after `bulkWrite()` (gh-9350)[0m
2025-04-03T23:44:45.7711753Z   [32m  [32mâœ”[39m[0m[90m skips applying init hooks if `document` option set to `false` (gh-9316)[0m
2025-04-03T23:44:45.7981159Z   [32m  [32mâœ”[39m[0m[90m retains atomics after failed `save()` (gh-9327)[0m
2025-04-03T23:44:45.8243389Z   [32m  [32mâœ”[39m[0m[90m doesnt wipe out changes made while `save()` is in flight (gh-9327)[0m
2025-04-03T23:44:45.8507998Z   [32m  [32mâœ”[39m[0m[90m saves all error object properties to paths with type `Mixed` (gh-10126)[0m
2025-04-03T23:44:45.8777296Z   [32m  [32mâœ”[39m[0m[90m supports skipping defaults on a find operation gh-7287[0m
2025-04-03T23:44:45.9113868Z   [32m  [32mâœ”[39m[0m[90m casts ObjectIds with `ref` in schema when calling `hydrate()` (gh-11052)[0m
2025-04-03T23:44:45.9249052Z   [32m  [32mâœ”[39m[0m[90m respects `hydrate()` projection (gh-11375)[0m
2025-04-03T23:44:45.9401860Z   [32m  [32mâœ”[39m[0m[90m supports setters option for `hydrate()` (gh-11653)[0m
2025-04-03T23:44:45.9770478Z   [32m  [32mâœ”[39m[0m[90m sets index collation based on schema collation (gh-7621)[0m
2025-04-03T23:44:46.0005373Z   [32m  [32mâœ”[39m[0m[90m works if passing class that extends Document to `loadClass()` (gh-12254)[0m
2025-04-03T23:44:46.0389162Z   [32m  [32mâœ”[39m[0m[90m handles shared schema methods (gh-12423)[0m
2025-04-03T23:44:46.0600546Z   [32m  [32mâœ”[39m[0m[90m respects schema-level `collectionOptions` for setting options to createCollection()[0m
2025-04-03T23:44:46.0632837Z   [32m  [32mâœ”[39m[0m[90m throws helpful error when calling Model() with string instead of model() (gh-14281)[0m
2025-04-03T23:44:46.0726928Z   [32m  [32mâœ”[39m[0m[90m supports recompiling model with new schema additions (gh-14296)[0m
2025-04-03T23:44:46.0884278Z   [32m  [32mâœ”[39m[0m[90m supports recompiling model with new discriminators (gh-14444) (gh-14296)[0m
2025-04-03T23:44:46.1086503Z   [32m  [32mâœ”[39m[0m[90m overwrites existing discriminators when calling recompileSchema (gh-14527) (gh-14444)[0m
2025-04-03T23:44:46.1431265Z   [32m  [32mâœ”[39m[0m[90m does not throw with multiple self-referencing discriminator schemas applied to schema (gh-15120)[0m
2025-04-03T23:44:46.2055469Z   [32m  [32mâœ”[39m[0m[90m inserts versionKey even if schema has `toObject.versionKey` set to false (gh-14344)[0m
2025-04-03T23:44:46.2341462Z   [32m  [32mâœ”[39m[0m[90m insertMany should throw an error if there were operations that failed validation, but all operations that passed validation succeeded (gh-13256)[0m
2025-04-03T23:44:46.2471183Z   [32m  [32mâœ”[39m[0m[90m throws error if calling `updateMany()` with no update param (gh-15190)[0m
2025-04-03T23:44:46.2596582Z [0m    constructor[0m
2025-04-03T23:44:46.2610220Z     [32m  [32mâœ”[39m[0m[90m works without "new" keyword[0m
2025-04-03T23:44:46.2681588Z     [32m  [32mâœ”[39m[0m[90m works "new" keyword[0m
2025-04-03T23:44:46.2743383Z [0m    isNew[0m
2025-04-03T23:44:46.2754663Z     [32m  [32mâœ”[39m[0m[90m is true on instantiation[0m
2025-04-03T23:44:46.2822260Z [0m    schema[0m
2025-04-03T23:44:46.2832579Z     [32m  [32mâœ”[39m[0m[90m should exist[0m
2025-04-03T23:44:46.2915592Z     [32m  [32mâœ”[39m[0m[90m emits init event[0m
2025-04-03T23:44:46.3020439Z [0m    structure[0m
2025-04-03T23:44:46.3034662Z     [32m  [32mâœ”[39m[0m[90m default when instantiated[0m
2025-04-03T23:44:46.3119988Z     [32m  [32mâœ”[39m[0m[90m a hash with one null value[0m
2025-04-03T23:44:46.3334671Z     [32m  [32mâœ”[39m[0m[90m when saved[0m
2025-04-03T23:44:46.3353012Z [0m      array[0m
2025-04-03T23:44:46.3353525Z [0m        defaults[0m
2025-04-03T23:44:46.3369271Z         [32m  [32mâœ”[39m[0m[90m to a non-empty array[0m
2025-04-03T23:44:46.3505884Z         [32m  [32mâœ”[39m[0m[90m empty[0m
2025-04-03T23:44:46.3622783Z [0m      init[0m
2025-04-03T23:44:46.3638395Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:46.3721454Z       [32m  [32mâœ”[39m[0m[90m partially[0m
2025-04-03T23:44:46.3803782Z       [32m  [32mâœ”[39m[0m[90m with partial hash[0m
2025-04-03T23:44:46.3882643Z       [32m  [32mâœ”[39m[0m[90m isNew on embedded documents[0m
2025-04-03T23:44:46.4082846Z       [32m  [32mâœ”[39m[0m[90m isNew on embedded documents after saving[0m
2025-04-03T23:44:46.4104127Z [0m    methods[0m
2025-04-03T23:44:46.4117546Z     [32m  [32mâœ”[39m[0m[90m can be defined[0m
2025-04-03T23:44:46.4208016Z     [32m  [32mâœ”[39m[0m[90m can be defined on embedded documents[0m
2025-04-03T23:44:46.4445485Z     [32m  [32mâœ”[39m[0m[90m can be defined with nested key[0m
2025-04-03T23:44:46.4570988Z [0m    statics[0m
2025-04-03T23:44:46.4581457Z     [32m  [32mâœ”[39m[0m[90m can be defined[0m
2025-04-03T23:44:46.4638463Z [0m    casting as validation errors[0m
2025-04-03T23:44:46.4758602Z     [32m  [32mâœ”[39m[0m[90m error[0m
2025-04-03T23:44:46.4797524Z     [32m  [32mâœ”[39m[0m[90m nested error[0m
2025-04-03T23:44:46.4884705Z     [32m  [32mâœ”[39m[0m[90m subdocument cast error[0m
2025-04-03T23:44:46.4955923Z     [32m  [32mâœ”[39m[0m[90m subdocument validation error[0m
2025-04-03T23:44:46.5147183Z     [32m  [32mâœ”[39m[0m[90m subdocument error when adding a subdoc[0m
2025-04-03T23:44:46.5355389Z     [32m  [32mâœ”[39m[0m[90m updates[0m
2025-04-03T23:44:46.5384601Z     [32m  [32mâœ”[39m[0m[90m $pull[0m
2025-04-03T23:44:46.5626223Z     [32m  [32mâœ”[39m[0m[90m $push[0m
2025-04-03T23:44:46.5790554Z     [32m  [32mâœ”[39m[0m[90m Number arrays[0m
2025-04-03T23:44:46.5971477Z     [32m  [32mâœ”[39m[0m[90m date casting compat with datejs (gh-502)[0m
2025-04-03T23:44:46.6064000Z [0m    validation[0m
2025-04-03T23:44:46.6247203Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:46.6437952Z     [32m  [32mâœ”[39m[0m[90m custom messaging[0m
2025-04-03T23:44:46.6476382Z     [32m  [32mâœ”[39m[0m[90m with Model.schema.path introspection (gh-272)[0m
2025-04-03T23:44:46.6746916Z     [32m  [32mâœ”[39m[0m[90m of required undefined values[0m
2025-04-03T23:44:46.6817644Z     [32m  [32mâœ”[39m[0m[90m save callback should only execute once (gh-319)[0m
2025-04-03T23:44:46.7160203Z     [32m  [32mâœ”[39m[0m[90m query result[0m
2025-04-03T23:44:46.7338225Z     [32m  [32mâœ”[39m[0m[90m of required previously existing null values[0m
2025-04-03T23:44:46.7611406Z     [32m  [32mâœ”[39m[0m[90m nested[0m
2025-04-03T23:44:46.7851004Z     [32m  [32mâœ”[39m[0m[90m of nested subdocuments[0m
2025-04-03T23:44:46.7891727Z     [32m  [32mâœ”[39m[0m[90m without saving[0m
2025-04-03T23:44:46.8021617Z     [32m  [32mâœ”[39m[0m[90m when required is set to false[0m
2025-04-03T23:44:46.8149298Z [0m      middleware[0m
2025-04-03T23:44:46.8329385Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:46.8354900Z [0m    defaults application[0m
2025-04-03T23:44:46.8370794Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:46.8509454Z     [32m  [32mâœ”[39m[0m[90m nested[0m
2025-04-03T23:44:46.8650252Z     [32m  [32mâœ”[39m[0m[90m subdocument[0m
2025-04-03T23:44:46.8966223Z     [32m  [32mâœ”[39m[0m[90m allows nulls[0m
2025-04-03T23:44:46.8989663Z [0m    virtuals[0m
2025-04-03T23:44:46.9005589Z     [32m  [32mâœ”[39m[0m[90m getters[0m
2025-04-03T23:44:46.9086253Z     [32m  [32mâœ”[39m[0m[90m set()[0m
2025-04-03T23:44:46.9299723Z     [32m  [32mâœ”[39m[0m[90m should not be saved to the db[0m
2025-04-03T23:44:46.9337111Z     [32m  [32mâœ”[39m[0m[90m nested[0m
2025-04-03T23:44:46.9465522Z [0m    .deleteOne()[0m
2025-04-03T23:44:46.9669521Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:46.9886255Z     [32m  [32mâœ”[39m[0m[90m errors when id deselected (gh-3118)[0m
2025-04-03T23:44:47.0128302Z     [32m  [32mâœ”[39m[0m[90m should not remove any records when deleting by id undefined[0m
2025-04-03T23:44:47.0380573Z     [32m  [32mâœ”[39m[0m[90m should not remove all documents in the collection (gh-3326)[0m
2025-04-03T23:44:47.0399868Z [0m    getters[0m
2025-04-03T23:44:47.0418541Z     [32m  [32mâœ”[39m[0m[90m with same name on embedded docs do not class[0m
2025-04-03T23:44:47.0621122Z     [32m  [32mâœ”[39m[0m[90m should not be triggered at construction (gh-685)[0m
2025-04-03T23:44:47.0749660Z     [32m  [32mâœ”[39m[0m[90m with type defined with { type: Native } (gh-190)[0m
2025-04-03T23:44:47.0863147Z [0m      nested[0m
2025-04-03T23:44:47.0880254Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:47.1024892Z       [32m  [32mâœ”[39m[0m[90m works with object literals[0m
2025-04-03T23:44:47.1295790Z       [32m  [32mâœ”[39m[0m[90m object property access works when root initd with null[0m
2025-04-03T23:44:47.1461916Z       [32m  [32mâœ”[39m[0m[90m object property access works when root initd with undefined[0m
2025-04-03T23:44:47.1751862Z       [32m  [32mâœ”[39m[0m[90m pre-existing null object re-save[0m
2025-04-03T23:44:47.2039563Z       [32m  [32mâœ”[39m[0m[90m array of Mixed on existing doc can be pushed to[0m
2025-04-03T23:44:47.2327268Z       [32m  [32mâœ”[39m[0m[90m props can be set directly when property was named "type"[0m
2025-04-03T23:44:47.2401620Z [0m    setters[0m
2025-04-03T23:44:47.2566481Z     [32m  [32mâœ”[39m[0m[90m are used on embedded docs (gh-365 gh-390 gh-422)[0m
2025-04-03T23:44:47.2685780Z [0m    atomic subdocument[0m
2025-04-03T23:44:47.2873428Z     [32m  [32mâœ”[39m[0m[90m saving[0m
2025-04-03T23:44:47.3076412Z     [32m  [32mâœ”[39m[0m[90m setting (gh-310)[0m
2025-04-03T23:44:47.3096036Z [0m    saving embedded arrays[0m
2025-04-03T23:44:47.3288343Z     [32m  [32mâœ”[39m[0m[90m of Numbers atomically[0m
2025-04-03T23:44:47.3545453Z     [32m  [32mâœ”[39m[0m[90m of Strings atomically[0m
2025-04-03T23:44:47.3752659Z     [32m  [32mâœ”[39m[0m[90m of Buffers atomically[0m
2025-04-03T23:44:47.3964569Z     [32m  [32mâœ”[39m[0m[90m works with modified element properties + doc removal (gh-975)[0m
2025-04-03T23:44:47.4147760Z     [32m  [32mâœ”[39m[0m[90m updating an embedded document in an embedded array with set call[0m
2025-04-03T23:44:47.4170611Z [0m    embedded array filtering[0m
2025-04-03T23:44:47.4343587Z     [32m  [32mâœ”[39m[0m[90m by the id shortcut function[0m
2025-04-03T23:44:47.4502070Z     [32m  [32mâœ”[39m[0m[90m by the id with cast error[0m
2025-04-03T23:44:47.4680413Z     [32m  [32mâœ”[39m[0m[90m by the id shortcut with no match[0m
2025-04-03T23:44:47.4695790Z [0m    hooks[0m
2025-04-03T23:44:47.4696477Z [0m      pre[0m
2025-04-03T23:44:47.4859406Z       [32m  [32mâœ”[39m[0m[90m with undefined and null[0m
2025-04-03T23:44:47.5129984Z       [32m  [32mâœ”[39m[0m[90m called on all sub levels[0m
2025-04-03T23:44:47.5268104Z       [32m  [32mâœ”[39m[0m[90m error on any sub level[0m
2025-04-03T23:44:47.5375590Z [0m        init[0m
2025-04-03T23:44:47.5508639Z         [32m  [32mâœ”[39m[0m[90m has access to the true ObjectId when used with querying (gh-289)[0m
2025-04-03T23:44:47.5616823Z [0m      post[0m
2025-04-03T23:44:47.5770950Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:47.5979996Z       [32m  [32mâœ”[39m[0m[90m on embedded docs[0m
2025-04-03T23:44:47.6346311Z       [32m  [32mâœ”[39m[0m[90m callback should receive parameter of type document after bulkSave (gh-13026)[0m
2025-04-03T23:44:47.6380210Z [0m    #exec()[0m
2025-04-03T23:44:47.6523526Z     [32m  [32mâœ”[39m[0m[90m countDocuments()[0m
2025-04-03T23:44:47.6684081Z     [32m  [32mâœ”[39m[0m[90m estimatedDocumentCount()[0m
2025-04-03T23:44:47.6860950Z     [32m  [32mâœ”[39m[0m[90m updateOne()[0m
2025-04-03T23:44:47.7024622Z     [32m  [32mâœ”[39m[0m[90m findOne()[0m
2025-04-03T23:44:47.7248300Z     [32m  [32mâœ”[39m[0m[90m find()[0m
2025-04-03T23:44:47.7415184Z     [32m  [32mâœ”[39m[0m[90m op can be changed[0m
2025-04-03T23:44:47.7438582Z [0m      promises[0m
2025-04-03T23:44:47.7585719Z       [32m  [32mâœ”[39m[0m[90m findOne()[0m
2025-04-03T23:44:47.7797913Z       [32m  [32mâœ”[39m[0m[90m find()[0m
2025-04-03T23:44:47.7817219Z [0m    console.log[0m
2025-04-03T23:44:47.7838152Z     [32m  [32mâœ”[39m[0m[90m hides private props[0m
2025-04-03T23:44:47.7942171Z [0m    pathnames[0m
2025-04-03T23:44:47.7956748Z     [32m  [32mâœ”[39m[0m[90m named path can be used[0m
2025-04-03T23:44:47.8077601Z [0m    RegExps[0m
2025-04-03T23:44:47.8208935Z     [32m  [32mâœ”[39m[0m[90m can be saved[0m
2025-04-03T23:44:47.8230144Z [0m    save()[0m
2025-04-03T23:44:47.8249550Z     [32m  [32mâœ”[39m[0m[90m rejects new documents that have no _id set (1595)[0m
2025-04-03T23:44:47.8549730Z     [32m  [32mâœ”[39m[0m[90m no TypeError when attempting to save more than once after using atomics[0m
2025-04-03T23:44:47.8747657Z     [32m  [32mâœ”[39m[0m[90m should clear $versionError and saveOptions after saved (gh-8040)[0m
2025-04-03T23:44:47.8971779Z     [32m  [32mâœ”[39m[0m[90m should only save paths specificed in the `pathsToSave` array (gh-9583)[0m
2025-04-03T23:44:47.9223761Z     [32m  [32mâœ”[39m[0m[90m should have `pathsToSave` work with subdocs (gh-9583)[0m
2025-04-03T23:44:47.9468297Z     [32m  [32mâœ”[39m[0m[90m should have `pathsToSave` work with doc arrays (gh-9583)[0m
2025-04-03T23:44:47.9491503Z [0m      when no callback is passed[0m
2025-04-03T23:44:47.9511188Z       [32m  [32mâœ”[39m[0m[90m should emit error on its Model when there are listeners[0m
2025-04-03T23:44:47.9636627Z [0m    _delta()[0m
2025-04-03T23:44:47.9807105Z     [32m  [32mâœ”[39m[0m[90m should overwrite arrays when directly set (gh-1126)[0m
2025-04-03T23:44:47.9990037Z     [32m  [32mâœ”[39m[0m[90m should use $set when subdoc changed before pulling (gh-1303)[0m
2025-04-03T23:44:48.0015381Z [0m    backward compatibility[0m
2025-04-03T23:44:48.0197872Z     [32m  [32mâœ”[39m[0m[90m with conflicted data in db[0m
2025-04-03T23:44:48.0509513Z     [32m  [32mâœ”[39m[0m[90m with positional notation on path not existing in schema (gh-1048)[0m
2025-04-03T23:44:48.0534171Z [0m    non-schema adhoc property assignments[0m
2025-04-03T23:44:48.0673743Z     [32m  [32mâœ”[39m[0m[90m are not saved[0m
2025-04-03T23:44:48.0696039Z [0m    setting an unset value[0m
2025-04-03T23:44:48.0853146Z     [32m  [32mâœ”[39m[0m[90m is saved (gh-742)[0m
2025-04-03T23:44:48.1111973Z     [32m  [32mâœ”[39m[0m[90m is saved object with proper defaults[0m
2025-04-03T23:44:48.1233395Z [0m    unsetting a default value[0m
2025-04-03T23:44:48.1381194Z     [32m  [32mâœ”[39m[0m[90m should be ignored (gh-758)[0m
2025-04-03T23:44:48.1482673Z [0m    Skip setting default value for Geospatial-indexed fields (gh-1668)[0m
2025-04-03T23:44:48.1637519Z     [32m  [32mâœ”[39m[0m[90m 2dsphere indexed field with value is saved[0m
2025-04-03T23:44:48.1817245Z     [32m  [32mâœ”[39m[0m[90m 2dsphere indexed field without value is saved (gh-1668)[0m
2025-04-03T23:44:48.2089044Z     [32m  [32mâœ”[39m[0m[90m 2dsphere indexed field in subdoc without value is saved[0m
2025-04-03T23:44:48.2236146Z     [32m  [32mâœ”[39m[0m[90m 2dsphere indexed field with geojson without value is saved (gh-3233)[0m
2025-04-03T23:44:48.2523736Z     [32m  [32mâœ”[39m[0m[90m Doc with 2dsphere indexed field without initial value can be updated[0m
2025-04-03T23:44:48.2819056Z     [32m  [32mâœ”[39m[0m[90m 2dsphere indexed required field without value is rejected[0m
2025-04-03T23:44:48.3107736Z     [32m  [32mâœ”[39m[0m[90m 2dsphere field without value but with schema default is saved[0m
2025-04-03T23:44:48.3409069Z     [32m  [32mâœ”[39m[0m[90m 2d indexed field without value is saved[0m
2025-04-03T23:44:48.3437060Z     [36m  - Compound index with 2dsphere field without value is saved[0m
2025-04-03T23:44:48.3438084Z     [36m  - Compound index on field earlier declared with 2dsphere index is saved[0m
2025-04-03T23:44:48.3438917Z [0m    max bson size error[0m
2025-04-03T23:44:48.4866994Z     [32m  [32mâœ”[39m[0m[90m save max bson size error with buffering (gh-3906)[0m[31m (134ms)[0m
2025-04-03T23:44:48.6534793Z     [32m  [32mâœ”[39m[0m[90m reports max bson size error in save (gh-3906)[0m[31m (139ms)[0m
2025-04-03T23:44:48.6629175Z [0m    bug fixes[0m
2025-04-03T23:44:48.6782388Z     [32m  [32mâœ”[39m[0m[90m doesnt crash (gh-1920)[0m
2025-04-03T23:44:48.7090381Z     [32m  [32mâœ”[39m[0m[90m doesnt reset "modified" status for fields[0m
2025-04-03T23:44:48.7274581Z     [32m  [32mâœ”[39m[0m[90m deleteOne() with options (gh-7857)[0m
2025-04-03T23:44:48.7522501Z     [32m  [32mâœ”[39m[0m[90m deleteMany() with options (gh-6805)[0m
2025-04-03T23:44:48.7648817Z     [32m  [32mâœ”[39m[0m[90m run default function with correct this scope in DocumentArray (gh-6840)[0m
2025-04-03T23:44:48.7781470Z     [32m  [32mâœ”[39m[0m[90m method with same name as prop should throw (gh-4475)[0m
2025-04-03T23:44:48.8018998Z     [32m  [32mâœ”[39m[0m[90m create() reuses existing doc if one passed in (gh-4449)[0m
2025-04-03T23:44:48.8152929Z     [32m  [32mâœ”[39m[0m[90m disabling id getter with .set() (gh-5548)[0m
2025-04-03T23:44:48.8436765Z     [32m  [32mâœ”[39m[0m[90m creates new array when initializing from existing doc (gh-4449)[0m
2025-04-03T23:44:48.8700596Z     [32m  [32mâœ”[39m[0m[90m deleteOne with cast error (gh-5323)[0m
2025-04-03T23:44:48.8743165Z     [32m  [32mâœ”[39m[0m[90m .create() with non-object (gh-2037)[0m
2025-04-03T23:44:48.9097424Z     [32m  [32mâœ”[39m[0m[90m bulkWrite casting updateMany, deleteOne, deleteMany (gh-3998)[0m
2025-04-03T23:44:48.9329191Z     [32m  [32mâœ”[39m[0m[90m bulkWrite casting replaceOne (gh-3998)[0m
2025-04-03T23:44:48.9574200Z     [32m  [32mâœ”[39m[0m[90m alias with lean virtual (gh-6069)[0m
2025-04-03T23:44:48.9806026Z     [32m  [32mâœ”[39m[0m[90m marks array as modified when initializing non-array from db (gh-2442)[0m
2025-04-03T23:44:49.0180788Z     [32m  [32mâœ”[39m[0m[90m Throws when saving same doc in parallel w/ callback (gh-6456)[0m
2025-04-03T23:44:49.0342404Z     [32m  [32mâœ”[39m[0m[90m using `new db.model()()` (gh-6698)[0m
2025-04-03T23:44:49.0650347Z     [32m  [32mâœ”[39m[0m[90m allows calling save in a post save hook (gh-6611)[0m
2025-04-03T23:44:49.0878806Z     [32m  [32mâœ”[39m[0m[90m createCollection() respects schema collation (gh-6489)[0m
2025-04-03T23:44:49.1236490Z     [32m  [32mâœ”[39m[0m[90m createCollection() respects timeseries (gh-10611)[0m
2025-04-03T23:44:49.1466988Z     [32m  [32mâœ”[39m[0m[90m createCollection() enforces expireAfterSeconds (gh-11229)[0m
2025-04-03T23:44:49.1728975Z     [32m  [32mâœ”[39m[0m[90m createCollection() enforces expires (gh-11229)[0m
2025-04-03T23:44:49.2003974Z     [32m  [32mâœ”[39m[0m[90m createCollection() enforces expireAfterSeconds when set by Schema (gh-11229)[0m
2025-04-03T23:44:49.2283922Z     [32m  [32mâœ”[39m[0m[90m createCollection() enforces expires when set by Schema (gh-11229)[0m
2025-04-03T23:44:49.2473126Z     [32m  [32mâœ”[39m[0m[90m createCollection() respects clusteredIndex[0m
2025-04-03T23:44:50.2751810Z     [32m  [32mâœ”[39m[0m[90m mongodb actually removes expired documents (gh-11229)[0m[31m (1025ms)[0m
2025-04-03T23:44:50.2967887Z     [32m  [32mâœ”[39m[0m[90m createCollection() handles NamespaceExists errors (gh-9447)[0m
2025-04-03T23:44:50.2990509Z [0m      3.6 features[0m
2025-04-03T23:44:50.3286433Z       [32m  [32mâœ”[39m[0m[90m arrayFilter (gh-5965)[0m
2025-04-03T23:44:50.3633800Z       [32m  [32mâœ”[39m[0m[90m arrayFilter casting (gh-5965) (gh-7079)[0m
2025-04-03T23:44:50.3966426Z       [32m  [32mâœ”[39m[0m[90m avoids unused array filter error (gh-9468)[0m
2025-04-03T23:44:50.3991590Z [0m        watch()[0m
2025-04-03T23:44:50.3995809Z         [36m  - watch() (gh-5964)[0m
2025-04-03T23:44:50.3998004Z         [36m  - bubbles up resumeTokenChanged events (gh-13607)[0m
2025-04-03T23:44:50.3998849Z         [36m  - using next() and hasNext() (gh-11527)[0m
2025-04-03T23:44:50.3999488Z         [36m  - fullDocument (gh-11936)[0m
2025-04-03T23:44:50.4000308Z         [36m  - fullDocument with immediate watcher and hydrate (gh-14049)[0m
2025-04-03T23:44:50.4001144Z         [36m  - respects discriminators (gh-11007)[0m
2025-04-03T23:44:50.4001861Z         [36m  - watch() before connecting (gh-5964)[0m
2025-04-03T23:44:50.4002761Z         [36m  - watch() close() prevents buffered watch op from running (gh-7022)[0m
2025-04-03T23:44:50.4003697Z         [36m  - watch() close() closes the stream (gh-7022)[0m
2025-04-03T23:44:50.4004549Z         [36m  - bubbles up resumeTokenChanged events (gh-14349)[0m
2025-04-03T23:44:50.4005540Z [0m        sessions (gh-6362)[0m
2025-04-03T23:44:50.4109558Z         [32m  [32mâœ”[39m[0m[90m startSession()[0m
2025-04-03T23:44:50.4304894Z         [32m  [32mâœ”[39m[0m[90m startSession() before connecting[0m
2025-04-03T23:44:50.4510352Z         [32m  [32mâœ”[39m[0m[90m sets session when pulling a document from db[0m
2025-04-03T23:44:50.4771596Z         [32m  [32mâœ”[39m[0m[90m sets session on child doc when creating new doc (gh-7104)[0m
2025-04-03T23:44:50.5027990Z         [32m  [32mâœ”[39m[0m[90m sets session when pulling multiple docs from db[0m
2025-04-03T23:44:50.5364611Z         [32m  [32mâœ”[39m[0m[90m supports overwriting `session` in save()[0m
2025-04-03T23:44:50.5391548Z [0m      bulkWrite casting[0m
2025-04-03T23:44:50.5611473Z       [32m  [32mâœ”[39m[0m[90m basic casting (gh-3998)[0m
2025-04-03T23:44:50.5802362Z       [32m  [32mâœ”[39m[0m[90m setDefaultsOnInsert (gh-5708)[0m
2025-04-03T23:44:50.6155560Z       [32m  [32mâœ”[39m[0m[90m timestamps (gh-5708)[0m
2025-04-03T23:44:50.6219564Z       [32m  [32mâœ”[39m[0m[90m throwOnValidationError (gh-14572)[0m
2025-04-03T23:44:50.6500569Z       [32m  [32mâœ”[39m[0m[90m handles array filters (gh-14978)[0m
2025-04-03T23:44:50.6845165Z       [32m  [32mâœ”[39m[0m[90m handles overwriteDiscriminatorKey (gh-15218) (gh-15040)[0m
2025-04-03T23:44:50.8474094Z       [32m  [32mâœ”[39m[0m[90m with child timestamps and array filters (gh-7032)[0m[31m (117ms)[0m
2025-04-03T23:44:50.8522488Z       [32m  [32mâœ”[39m[0m[90m throws readable error if invalid op[0m
2025-04-03T23:44:50.8939614Z       [32m  [32mâœ”[39m[0m[90m with timestamps and replaceOne (gh-5708)[0m
2025-04-03T23:44:50.9233944Z       [32m  [32mâœ”[39m[0m[90m with timestamps from merged schema (gh-13409)[0m
2025-04-03T23:44:50.9534444Z       [32m  [32mâœ”[39m[0m[90m with child timestamps (gh-7032)[0m
2025-04-03T23:44:50.9749593Z       [32m  [32mâœ”[39m[0m[90m sets version key (gh-13944)[0m
2025-04-03T23:44:50.9930992Z       [32m  [32mâœ”[39m[0m[90m with single nested and setOnInsert (gh-7534)[0m
2025-04-03T23:44:51.0241396Z       [32m  [32mâœ”[39m[0m[90m throws an error if no update object is provided (gh-8331)[0m
2025-04-03T23:44:51.0713562Z       [32m  [32mâœ”[39m[0m[90m casts according to child discriminator if `discriminatorKey` is present (gh-8982)[0m[33m (44ms)[0m
2025-04-03T23:44:51.0920385Z       [32m  [32mâœ”[39m[0m[90m insertOne and replaceOne should not throw an error when set `timestamps: false` in schmea (gh-10048)[0m
2025-04-03T23:44:51.1024868Z       [32m  [32mâœ”[39m[0m[90m casts objects with null prototype (gh-10512)[0m
2025-04-03T23:44:51.1151035Z       [32m  [32mâœ”[39m[0m[90m sends valid ops if ordered = false (gh-13176)[0m
2025-04-03T23:44:51.1471647Z       [32m  [32mâœ”[39m[0m[90m decorates write error with validation errors if unordered fails (gh-13176)[0m
2025-04-03T23:44:51.1695821Z       [32m  [32mâœ”[39m[0m[90m bulkWrite should throw an error if there were operations that failed validation, but all operations that passed validation succeeded (gh-13256)[0m
2025-04-03T23:44:51.1958747Z       [32m  [32mâœ”[39m[0m[90m casts $elemMatch filter (gh-14678)[0m
2025-04-03T23:44:51.2076278Z       [32m  [32mâœ”[39m[0m[90m throwOnValidationError (gh-14572) (gh-13256)[0m
2025-04-03T23:44:51.2372352Z       [32m  [32mâœ”[39m[0m[90m bulkWrite should throw an error if there were operations that failed validation, but all operations that passed validation succeeded (gh-13256)[0m
2025-04-03T23:44:51.2624904Z       [32m  [32mâœ”[39m[0m[90m bulkWrite should return both write errors and validation errors in error.results (gh-15265)[0m
2025-04-03T23:44:51.2750928Z [0m      Model.syncIndexes()[0m
2025-04-03T23:44:51.2964594Z       [32m  [32mâœ”[39m[0m[90m adds indexes to the collection[0m
2025-04-03T23:44:51.3141729Z       [32m  [32mâœ”[39m[0m[90m avoids creating collection if autoCreate: false[0m
2025-04-03T23:44:51.3437455Z       [32m  [32mâœ”[39m[0m[90m drops indexes that are not present in schema[0m
2025-04-03T23:44:51.3797579Z       [32m  [32mâœ”[39m[0m[90m when two different models connect to the same collection, syncIndexes(...) respects the last call[0m
2025-04-03T23:44:51.4125860Z       [32m  [32mâœ”[39m[0m[90m when two models have the same collection name, same field but different options, syncIndexes(...) respects the last call[0m
2025-04-03T23:44:51.4443976Z       [32m  [32mâœ”[39m[0m[90m when syncIndexes(...) is called twice with no changes on the model, the second call should not do anything[0m
2025-04-03T23:44:51.4778947Z       [32m  [32mâœ”[39m[0m[90m when called with different key order, it treats different order as different indexes (gh-8135)[0m
2025-04-03T23:44:51.5077424Z       [32m  [32mâœ”[39m[0m[90m syncIndexes(...) compound index including `_id` (gh-8559)[0m
2025-04-03T23:44:51.5303944Z       [32m  [32mâœ”[39m[0m[90m syncIndexes() allows overwriting `background` option (gh-8645)[0m
2025-04-03T23:44:51.5538125Z       [32m  [32mâœ”[39m[0m[90m syncIndexes() does not call createIndex for indexes that already exist[0m
2025-04-03T23:44:51.5801244Z       [32m  [32mâœ”[39m[0m[90m syncIndexes() supports hideIndexes (gh-14868)[0m
2025-04-03T23:44:51.6009780Z       [32m  [32mâœ”[39m[0m[90m should not drop a text index on .syncIndexes() call (gh-10850)[0m
2025-04-03T23:44:51.6351879Z       [32m  [32mâœ”[39m[0m[90m adding discriminators should not drop the parent model's indexes[0m
2025-04-03T23:44:51.6763389Z       [32m  [32mâœ”[39m[0m[90m syncing model with multiple discriminators works[0m[33m (38ms)[0m
2025-04-03T23:44:51.7078427Z       [32m  [32mâœ”[39m[0m[90m syncing one discriminator's indexes should not drop the main model's indexes[0m
2025-04-03T23:44:51.7434000Z       [32m  [32mâœ”[39m[0m[90m syncing main model does not sync discrimator indexes[0m
2025-04-03T23:44:51.7824748Z       [32m  [32mâœ”[39m[0m[90m syncing discriminator does not attempt to sync parent model's indexes[0m
2025-04-03T23:44:51.8027838Z       [32m  [32mâœ”[39m[0m[90m creates indexes only when they do not exist on the mongodb server (gh-12250)[0m
2025-04-03T23:44:51.8051318Z [0m    exists() (gh-6872) (gh-8097) (gh-11138)[0m
2025-04-03T23:44:51.8067762Z     [32m  [32mâœ”[39m[0m[90m returns a query[0m
2025-04-03T23:44:51.8313843Z     [32m  [32mâœ”[39m[0m[90m returns lean document with `_id` only if document exists[0m
2025-04-03T23:44:51.8435369Z     [32m  [32mâœ”[39m[0m[90m returns `null` when no document exists[0m
2025-04-03T23:44:51.8675396Z     [32m  [32mâœ”[39m[0m[90m returns `null` if no doc exists[0m
2025-04-03T23:44:51.8804172Z     [32m  [32mâœ”[39m[0m[90m options (gh-8075)[0m
2025-04-03T23:44:51.8899001Z [0m    returnOriginal (gh-9183)[0m
2025-04-03T23:44:51.9084230Z     [32m  [32mâœ”[39m[0m[90m Setting `returnOriginal` works[0m
2025-04-03T23:44:51.9278047Z     [32m  [32mâœ”[39m[0m[90m `returnOriginal` can be overwritten[0m
2025-04-03T23:44:51.9306790Z [0m    buildBulkWriteOperations() (gh-9673)[0m
2025-04-03T23:44:51.9492550Z     [32m  [32mâœ”[39m[0m[90m builds write operations[0m
2025-04-03T23:44:51.9534661Z     [32m  [32mâœ”[39m[0m[90m throws an error when one document is invalid[0m
2025-04-03T23:44:51.9669817Z     [32m  [32mâœ”[39m[0m[90m throws an error if documents is not an array[0m
2025-04-03T23:44:51.9790353Z     [32m  [32mâœ”[39m[0m[90m throws an error if one element is not a document[0m
2025-04-03T23:44:51.9915601Z     [32m  [32mâœ”[39m[0m[90m skips validation when given `skipValidation` true[0m
2025-04-03T23:44:52.0211499Z     [32m  [32mâœ”[39m[0m[90m saves changes in discriminators if calling `bulkSave()` on base model (gh-13907)[0m
2025-04-03T23:44:52.0577541Z     [32m  [32mâœ”[39m[0m[90m accepts `timestamps: false` (gh-12059)[0m
2025-04-03T23:44:52.0817071Z     [32m  [32mâœ”[39m[0m[90m accepts `timestamps: true` (gh-12059)[0m
2025-04-03T23:44:52.1038500Z     [32m  [32mâœ”[39m[0m[90m `timestamps` has `undefined` as default value (gh-12059)[0m
2025-04-03T23:44:52.1370227Z     [32m  [32mâœ”[39m[0m[90m should not modify the object in the $set clause and not error when dealing with or without timestamps (gh-14164)[0m
2025-04-03T23:44:52.1397204Z [0m    bulkSave() (gh-9673)[0m
2025-04-03T23:44:52.1569746Z     [32m  [32mâœ”[39m[0m[90m saves new documents[0m
2025-04-03T23:44:52.1796584Z     [32m  [32mâœ”[39m[0m[90m updates documents[0m
2025-04-03T23:44:52.1974689Z     [32m  [32mâœ”[39m[0m[90m insertMany should throw an error if there were operations that failed validation, but all operations that passed validation succeeded (gh-14572) (gh-13256)[0m
2025-04-03T23:44:52.2201880Z     [32m  [32mâœ”[39m[0m[90m insertMany should return both write errors and validation errors in error.results (gh-15265)[0m
2025-04-03T23:44:52.2405348Z     [32m  [32mâœ”[39m[0m[90m insertMany should return both write errors and validation errors in error.results with rawResult (gh-15265)[0m
2025-04-03T23:44:52.2660646Z     [32m  [32mâœ”[39m[0m[90m returns writeResult on success[0m
2025-04-03T23:44:52.2868247Z     [32m  [32mâœ”[39m[0m[90m throws an error on failure[0m
2025-04-03T23:44:52.2995642Z     [32m  [32mâœ”[39m[0m[90m changes document state from `isNew` `false` to `true`[0m
2025-04-03T23:44:52.3151071Z     [32m  [32mâœ”[39m[0m[90m sets `isNew` to false when a document succeeds and `isNew` does not change when some fail[0m
2025-04-03T23:44:52.3306838Z     [32m  [32mâœ”[39m[0m[90m changes documents state for successful writes[0m
2025-04-03T23:44:52.3478901Z     [32m  [32mâœ”[39m[0m[90m triggers pre/post-save hooks[0m
2025-04-03T23:44:52.3661213Z     [32m  [32mâœ”[39m[0m[90m calls pre-save before actually saving[0m
2025-04-03T23:44:52.3832318Z     [32m  [32mâœ”[39m[0m[90m works if some document is not modified (gh-10437)[0m
2025-04-03T23:44:52.4015516Z     [32m  [32mâœ”[39m[0m[90m should error if no documents were inserted or updated (gh-14763)[0m
2025-04-03T23:44:52.4214297Z     [32m  [32mâœ”[39m[0m[90m should error if not all documents were inserted or updated (gh-14763)[0m
2025-04-03T23:44:52.4278914Z     [32m  [32mâœ”[39m[0m[90m should error if there is a validation error[0m
2025-04-03T23:44:52.4527539Z     [32m  [32mâœ”[39m[0m[90m Using bulkSave should not trigger an error (gh-11071)[0m
2025-04-03T23:44:52.4743866Z     [32m  [32mâœ”[39m[0m[90m accepts `timestamps: false` (gh-12059)[0m
2025-04-03T23:44:52.4941172Z     [32m  [32mâœ”[39m[0m[90m accepts `timestamps: true` (gh-12059)[0m
2025-04-03T23:44:52.5156697Z     [32m  [32mâœ”[39m[0m[90m `timestamps` has `undefined` as default value (gh-12059)[0m
2025-04-03T23:44:52.5384002Z     [32m  [32mâœ”[39m[0m[90m respects `$timestamps()` (gh-12117)[0m
2025-04-03T23:44:52.5424342Z [0m    Setting the explain flag[0m
2025-04-03T23:44:52.5766791Z     [32m  [32mâœ”[39m[0m[90m should give an object back rather than a boolean (gh-8275)[0m
2025-04-03T23:44:52.5792825Z [0m    Model.applyDefaults (gh-11945)[0m
2025-04-03T23:44:52.5816874Z     [32m  [32mâœ”[39m[0m[90m applies defaults to POJOs[0m
2025-04-03T23:44:52.5925895Z     [32m  [32mâœ”[39m[0m[90m applies defaults to documents[0m
2025-04-03T23:44:52.6027350Z [0m    castObject() (gh-11945)[0m
2025-04-03T23:44:52.6049405Z     [32m  [32mâœ”[39m[0m[90m casts values[0m
2025-04-03T23:44:52.6170306Z     [32m  [32mâœ”[39m[0m[90m throws if cannot cast[0m
2025-04-03T23:44:52.6277748Z     [32m  [32mâœ”[39m[0m[90m should not throw an error if `ignoreCastErrors` is set (gh-12156)[0m
2025-04-03T23:44:52.6398120Z     [32m  [32mâœ”[39m[0m[90m handles discriminators (gh-15075)[0m
2025-04-03T23:44:52.6506845Z     [32m  [32mâœ”[39m[0m[90m handles castNonArrays when document array is set to non-array value (gh-15075)[0m
2025-04-03T23:44:52.6628203Z     [32m  [32mâœ”[39m[0m[90m handles document arrays (gh-15164)[0m
2025-04-03T23:44:52.6725651Z [0m    Check if static function that is supplied in schema option is available[0m
2025-04-03T23:44:52.6738890Z     [32m  [32mâœ”[39m[0m[90m should give a static function back rather than undefined[0m
2025-04-03T23:44:52.6842924Z [0m    Bypass middleware[0m
2025-04-03T23:44:52.7000781Z     [32m  [32mâœ”[39m[0m[90m should bypass middleware if save is called on a document with no changes gh-13250[0m
2025-04-03T23:44:52.7026273Z [0m    Model.useConnection() (gh-14802)[0m
2025-04-03T23:44:52.7288869Z     [32m  [32mâœ”[39m[0m[90m updates the model's db property to point to the provided connection instance and vice versa (gh-14802))[0m
2025-04-03T23:44:52.7329295Z     [32m  [32mâœ”[39m[0m[90m should throw an error if no connection is passed[0m
2025-04-03T23:44:52.7439600Z [0m    applyVirtuals[0m
2025-04-03T23:44:52.7457584Z     [32m  [32mâœ”[39m[0m[90m handles basic top-level virtuals[0m
2025-04-03T23:44:52.7583917Z     [32m  [32mâœ”[39m[0m[90m handles virtuals in subdocuments[0m
2025-04-03T23:44:52.7690244Z     [32m  [32mâœ”[39m[0m[90m handles virtuals on nested paths[0m
2025-04-03T23:44:52.7803385Z     [32m  [32mâœ”[39m[0m[90m supports passing an array of virtuals to apply[0m
2025-04-03T23:44:52.7910771Z     [32m  [32mâœ”[39m[0m[90m sets populate virtuals to `null` if `justOne`[0m
2025-04-03T23:44:52.8025236Z [0m    applyTimestamps[0m
2025-04-03T23:44:52.8041305Z     [32m  [32mâœ”[39m[0m[90m handles basic top-level timestamps[0m
2025-04-03T23:44:52.8150072Z     [32m  [32mâœ”[39m[0m[90m no-op if timestamps not set[0m
2025-04-03T23:44:52.8280383Z     [32m  [32mâœ”[39m[0m[90m handles custom timestamp property names[0m
2025-04-03T23:44:52.8408943Z     [32m  [32mâœ”[39m[0m[90m applies timestamps to subdocs[0m
2025-04-03T23:44:52.8524773Z     [32m  [32mâœ”[39m[0m[90m supports isUpdate and currentTime options[0m
2025-04-03T23:44:52.8620327Z [0m    diffIndexes()[0m
2025-04-03T23:44:52.8827623Z     [32m  [32mâœ”[39m[0m[90m avoids trying to drop timeseries collections (gh-14984)[0m
2025-04-03T23:44:52.8858191Z [0m    insertOne() (gh-14843)[0m
2025-04-03T23:44:52.9000498Z     [32m  [32mâœ”[39m[0m[90m should insert a new document[0m
2025-04-03T23:44:52.9204975Z     [32m  [32mâœ”[39m[0m[90m should support validateBeforeSave: false option[0m
2025-04-03T23:44:52.9309817Z 
2025-04-03T23:44:52.9310467Z [0m  model translate aliases[0m
2025-04-03T23:44:52.9325321Z   [32m  [32mâœ”[39m[0m[90m should translate correctly[0m
2025-04-03T23:44:52.9325694Z 
2025-04-03T23:44:52.9328361Z [0m  model: updateOne:[0m
2025-04-03T23:44:52.9517674Z   [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:44:52.9654046Z   [32m  [32mâœ”[39m[0m[90m casts doc arrays[0m
2025-04-03T23:44:52.9830366Z   [32m  [32mâœ”[39m[0m[90m makes copy of conditions and update options[0m
2025-04-03T23:44:53.0084168Z   [32m  [32mâœ”[39m[0m[90m $addToSet with $ (gh-479)[0m
2025-04-03T23:44:53.0237508Z   [32m  [32mâœ”[39m[0m[90m works with nested positional notation[0m
2025-04-03T23:44:53.0432856Z   [32m  [32mâœ”[39m[0m[90m handles $pull with obj literal (gh-542)[0m
2025-04-03T23:44:53.0631690Z   [32m  [32mâœ”[39m[0m[90m handles $pull of obj literal and nested $in[0m
2025-04-03T23:44:53.0863303Z   [32m  [32mâœ”[39m[0m[90m handles $pull and nested $nin[0m
2025-04-03T23:44:53.1023056Z   [32m  [32mâœ”[39m[0m[90m updates numbers atomically[0m
2025-04-03T23:44:53.1160014Z   [32m  [32mâœ”[39m[0m[90m passes number of affected docs[0m
2025-04-03T23:44:53.1301834Z   [32m  [32mâœ”[39m[0m[90m updates a number to null (gh-640)[0m
2025-04-03T23:44:53.1640375Z   [32m  [32mâœ”[39m[0m[90m handles $pull from Mixed arrays (gh-735)[0m
2025-04-03T23:44:53.1902979Z   [32m  [32mâœ”[39m[0m[90m handles $push with $ positionals (gh-1057)[0m
2025-04-03T23:44:53.2146147Z   [32m  [32mâœ”[39m[0m[90m handles nested paths starting with numbers (gh-1062)[0m
2025-04-03T23:44:53.2393584Z   [32m  [32mâœ”[39m[0m[90m handles positional operators with referenced docs (gh-1572)[0m
2025-04-03T23:44:53.2720933Z   [32m  [32mâœ”[39m[0m[90m use .where for update condition (gh-2170)[0m
2025-04-03T23:44:53.2970669Z   [32m  [32mâœ”[39m[0m[90m casts empty arrays[0m
2025-04-03T23:44:53.3223918Z   [32m  [32mâœ”[39m[0m[90m successfully casts set with nested mixed objects (gh-2796)[0m
2025-04-03T23:44:53.3451871Z   [32m  [32mâœ”[39m[0m[90m handles empty update with promises (gh-2796)[0m
2025-04-03T23:44:53.3566647Z   [32m  [32mâœ”[39m[0m[90m works with undefined date (gh-2833)[0m
2025-04-03T23:44:53.3928717Z   [32m  [32mâœ”[39m[0m[90m does not add virtuals to update (gh-2046)[0m
2025-04-03T23:44:53.4057949Z   [32m  [32mâœ”[39m[0m[90m doesnt modify original argument doc (gh-3008)[0m
2025-04-03T23:44:53.4176341Z [0m    using last[0m
2025-04-03T23:44:53.4289493Z     [32m  [32mâœ”[39m[0m[90m handles date casting (gh-479)[0m
2025-04-03T23:44:53.4431314Z     [32m  [32mâœ”[39m[0m[90m handles $addToSet (gh-545)[0m
2025-04-03T23:44:53.4573408Z     [32m  [32mâœ”[39m[0m[90m handles $addToSet with $each (gh-545)[0m
2025-04-03T23:44:53.4744047Z     [32m  [32mâœ”[39m[0m[90m handles $pop and $unset (gh-574)[0m
2025-04-03T23:44:53.4762553Z [0m    mongodb 2.4 features[0m
2025-04-03T23:44:53.4988409Z     [32m  [32mâœ”[39m[0m[90m $setOnInsert operator[0m
2025-04-03T23:44:53.5245716Z     [32m  [32mâœ”[39m[0m[90m push with $slice[0m
2025-04-03T23:44:53.5271238Z [0m    mongodb 2.6 features[0m
2025-04-03T23:44:53.5480171Z     [32m  [32mâœ”[39m[0m[90m supports $position[0m
2025-04-03T23:44:53.5760807Z     [32m  [32mâœ”[39m[0m[90m supports $currentDate[0m
2025-04-03T23:44:53.5785713Z [0m    defaults and validators (gh-860)[0m
2025-04-03T23:44:53.6041245Z     [32m  [32mâœ”[39m[0m[90m applies defaults on upsert[0m
2025-04-03T23:44:53.6288375Z     [32m  [32mâœ”[39m[0m[90m avoids nested paths if setting parent path (gh-4911)[0m
2025-04-03T23:44:53.6626508Z     [32m  [32mâœ”[39m[0m[90m doesnt set default on upsert if query sets it[0m
2025-04-03T23:44:53.6877944Z     [32m  [32mâœ”[39m[0m[90m properly sets default on upsert if query wont set it[0m
2025-04-03T23:44:53.7123915Z     [32m  [32mâœ”[39m[0m[90m handles defaults on document arrays (gh-4456)[0m
2025-04-03T23:44:53.7251781Z     [32m  [32mâœ”[39m[0m[90m runs validators if theyre set[0m
2025-04-03T23:44:53.7487227Z     [32m  [32mâœ”[39m[0m[90m validators handle $unset and $setOnInsert[0m
2025-04-03T23:44:53.7715879Z     [32m  [32mâœ”[39m[0m[90m global validators option (gh-6578)[0m
2025-04-03T23:44:53.7916890Z     [32m  [32mâœ”[39m[0m[90m min/max, enum, and regex built-in validators work[0m
2025-04-03T23:44:53.8151236Z     [32m  [32mâœ”[39m[0m[90m multiple validation errors[0m
2025-04-03T23:44:53.8373732Z     [32m  [32mâœ”[39m[0m[90m validators ignore $inc[0m
2025-04-03T23:44:53.8599204Z     [32m  [32mâœ”[39m[0m[90m validators handle positional operator (gh-3167)[0m
2025-04-03T23:44:53.8851991Z     [32m  [32mâœ”[39m[0m[90m validators handle arrayFilters (gh-7536)[0m
2025-04-03T23:44:53.9043228Z     [32m  [32mâœ”[39m[0m[90m required and single nested (gh-4479)[0m
2025-04-03T23:44:53.9108435Z [0m    middleware[0m
2025-04-03T23:44:53.9356497Z     [32m  [32mâœ”[39m[0m[90m can specify pre and post hooks[0m
2025-04-03T23:44:53.9480919Z     [32m  [32mâœ”[39m[0m[90m runs before validators (gh-2706)[0m
2025-04-03T23:44:53.9603754Z [0m      objects and arrays[0m
2025-04-03T23:44:53.9749593Z       [32m  [32mâœ”[39m[0m[90m embedded objects (gh-2706)[0m
2025-04-03T23:44:53.9937708Z       [32m  [32mâœ”[39m[0m[90m handles document array validation (gh-2733)[0m
2025-04-03T23:44:54.0152666Z       [32m  [32mâœ”[39m[0m[90m validators on arrays (gh-3724)[0m
2025-04-03T23:44:54.0267481Z [0m    set() (gh-5770)[0m
2025-04-03T23:44:54.0468993Z     [32m  [32mâœ”[39m[0m[90m works with middleware and doesn't change the op[0m
2025-04-03T23:44:54.0745809Z     [32m  [32mâœ”[39m[0m[90m object syntax for path parameter[0m
2025-04-03T23:44:54.0842966Z [0m    bug fixes[0m
2025-04-03T23:44:54.1052878Z     [32m  [32mâœ”[39m[0m[90m can $rename (gh-1845)[0m
2025-04-03T23:44:54.1250064Z     [32m  [32mâœ”[39m[0m[90m throws CastError if $rename fails to cast to string (gh-1845)[0m
2025-04-03T23:44:54.1642612Z     [32m  [32mâœ”[39m[0m[90m allows objects with positional operator (gh-3185)[0m
2025-04-03T23:44:54.1872856Z     [32m  [32mâœ”[39m[0m[90m mixed type casting (gh-3305)[0m
2025-04-03T23:44:54.2154141Z     [32m  [32mâœ”[39m[0m[90m replaceOne[0m
2025-04-03T23:44:54.2431604Z     [32m  [32mâœ”[39m[0m[90m mixed nested type casting (gh-3337)[0m
2025-04-03T23:44:54.2723534Z     [32m  [32mâœ”[39m[0m[90m with single nested (gh-3820)[0m
2025-04-03T23:44:54.3019531Z     [32m  [32mâœ”[39m[0m[90m with single nested and transform (gh-4621)[0m
2025-04-03T23:44:54.3234456Z     [32m  [32mâœ”[39m[0m[90m works with buffers (gh-3496)[0m
2025-04-03T23:44:54.3516511Z     [32m  [32mâœ”[39m[0m[90m .updateOne(doc) (gh-3221)[0m
2025-04-03T23:44:54.3850845Z     [32m  [32mâœ”[39m[0m[90m middleware update with exec (gh-3549)[0m
2025-04-03T23:44:54.4085497Z     [32m  [32mâœ”[39m[0m[90m $push with buffer doesnt throw error (gh-3890)[0m
2025-04-03T23:44:54.4393107Z     [32m  [32mâœ”[39m[0m[90m $set with buffer (gh-3961)[0m
2025-04-03T23:44:54.4714370Z     [32m  [32mâœ”[39m[0m[90m versioning with setDefaultsOnInsert (gh-2593)[0m
2025-04-03T23:44:54.5378850Z     [32m  [32mâœ”[39m[0m[90m updates with timestamps with $set (gh-4989) (gh-7152)[0m[33m (55ms)[0m
2025-04-03T23:44:54.5594922Z     [32m  [32mâœ”[39m[0m[90m lets $currentDate go through with updatedAt (gh-5222)[0m
2025-04-03T23:44:54.5789681Z     [32m  [32mâœ”[39m[0m[90m update validators on single nested (gh-4332)[0m
2025-04-03T23:44:54.6102101Z     [32m  [32mâœ”[39m[0m[90m updates child schema timestamps with $push (gh-4049)[0m
2025-04-03T23:44:54.6370837Z     [32m  [32mâœ”[39m[0m[90m updates child schema timestamps with $set (gh-4049)[0m
2025-04-03T23:44:54.6559730Z     [32m  [32mâœ”[39m[0m[90m handles positional operator with timestamps (gh-4418)[0m
2025-04-03T23:44:54.6894300Z     [32m  [32mâœ”[39m[0m[90m push with timestamps (gh-4514)[0m
2025-04-03T23:44:54.7110515Z     [32m  [32mâœ”[39m[0m[90m addToSet (gh-4953)[0m
2025-04-03T23:44:54.7442673Z     [32m  [32mâœ”[39m[0m[90m overwrite with timestamps (gh-4054)[0m
2025-04-03T23:44:54.7652992Z     [32m  [32mâœ”[39m[0m[90m update with buffer and exec (gh-4609)[0m
2025-04-03T23:44:54.7940861Z     [32m  [32mâœ”[39m[0m[90m single nested with runValidators (gh-4420)[0m
2025-04-03T23:44:54.8169710Z     [32m  [32mâœ”[39m[0m[90m single nested under doc array with runValidators (gh-4960)[0m
2025-04-03T23:44:54.8410978Z     [32m  [32mâœ”[39m[0m[90m handles $set on document array in discriminator with runValidators (gh-12518)[0m
2025-04-03T23:44:54.8699749Z     [32m  [32mâœ”[39m[0m[90m single nested schema with geo (gh-4465)[0m
2025-04-03T23:44:54.9008845Z     [32m  [32mâœ”[39m[0m[90m runs validation on Mixed properties of embedded arrays during updates (gh-4441)[0m
2025-04-03T23:44:54.9399785Z     [32m  [32mâœ”[39m[0m[90m updating single nested doc property casts correctly (gh-4655)[0m
2025-04-03T23:44:54.9656827Z     [32m  [32mâœ”[39m[0m[90m findOneAndUpdate with nested arrays (gh-5032)[0m
2025-04-03T23:44:54.9932471Z     [32m  [32mâœ”[39m[0m[90m findOneAndUpdate with timestamps (gh-5045)[0m
2025-04-03T23:44:55.0109594Z     [32m  [32mâœ”[39m[0m[90m doesnt double-call setters when updating an array (gh-5041)[0m
2025-04-03T23:44:55.0386068Z     [32m  [32mâœ”[39m[0m[90m does not fail if passing whole doc (gh-5088)[0m
2025-04-03T23:44:55.0701763Z     [32m  [32mâœ”[39m[0m[90m does not fail if passing whole doc (gh-5111)[0m
2025-04-03T23:44:55.1026334Z     [32m  [32mâœ”[39m[0m[90m $pullAll with null (gh-5164)[0m
2025-04-03T23:44:55.1323681Z     [32m  [32mâœ”[39m[0m[90m $set array (gh-5403)[0m
2025-04-03T23:44:55.1689455Z     [32m  [32mâœ”[39m[0m[90m doesn't skip casting the query on nested arrays (gh-7098)[0m
2025-04-03T23:44:55.2030147Z     [32m  [32mâœ”[39m[0m[90m defaults with overwrite and no update validators (gh-5384)[0m
2025-04-03T23:44:55.2190725Z     [32m  [32mâœ”[39m[0m[90m update validators with nested required (gh-5269)[0m
2025-04-03T23:44:55.2406235Z     [32m  [32mâœ”[39m[0m[90m $push with updateValidators and top-level doc (gh-5430)[0m
2025-04-03T23:44:55.2833047Z     [32m  [32mâœ”[39m[0m[90m $pull with updateValidators (gh-5555)[0m
2025-04-03T23:44:55.3156759Z     [32m  [32mâœ”[39m[0m[90m $pull with updateValidators and $in (gh-5744)[0m
2025-04-03T23:44:55.3343770Z     [32m  [32mâœ”[39m[0m[90m $pull with updateValidators and required array (gh-6341)[0m
2025-04-03T23:44:55.3809231Z     [32m  [32mâœ”[39m[0m[90m update with Decimal type (gh-5361)[0m
2025-04-03T23:44:55.4069904Z     [32m  [32mâœ”[39m[0m[90m strict false in query (gh-5453)[0m
2025-04-03T23:44:55.4320035Z     [32m  [32mâœ”[39m[0m[90m replaceOne with buffer (gh-6124)[0m
2025-04-03T23:44:55.4562066Z     [32m  [32mâœ”[39m[0m[90m returns error if passing array as conditions (gh-3677)[0m
2025-04-03T23:44:55.4963470Z     [32m  [32mâœ”[39m[0m[90m upsert: 1 (gh-5839)[0m
2025-04-03T23:44:55.5200653Z     [32m  [32mâœ”[39m[0m[90m casting $addToSet without $each (gh-6086)[0m
2025-04-03T23:44:55.5482671Z     [32m  [32mâœ”[39m[0m[90m doesn't add $each when pushing an array into an array (gh-6768)[0m
2025-04-03T23:44:55.5832791Z     [32m  [32mâœ”[39m[0m[90m casting embedded discriminators if path specified in filter (gh-5841)[0m
2025-04-03T23:44:55.6168307Z     [32m  [32mâœ”[39m[0m[90m update with nested id (gh-5640)[0m
2025-04-03T23:44:55.6389318Z     [32m  [32mâœ”[39m[0m[90m $inc cast errors (gh-6770)[0m
2025-04-03T23:44:55.6590874Z     [32m  [32mâœ”[39m[0m[90m does not treat virtuals as an error for strict: throw (gh-6731)[0m
2025-04-03T23:44:55.6837417Z     [32m  [32mâœ”[39m[0m[90m cast error in update conditions (gh-5477)[0m
2025-04-03T23:44:55.7098816Z     [32m  [32mâœ”[39m[0m[90m single embedded schema under document array (gh-4519)[0m
2025-04-03T23:44:55.7485813Z     [32m  [32mâœ”[39m[0m[90m casts objects to array when clobbering with $set (gh-6532)[0m
2025-04-03T23:44:55.7535395Z 
2025-04-03T23:44:55.7536612Z [0m  model: updateOne: [0m
2025-04-03T23:44:55.7684184Z   [32m  [32mâœ”[39m[0m[90m updating a map (gh-7111)[0m
2025-04-03T23:44:55.7877519Z   [32m  [32mâœ”[39m[0m[90m updating a map path underneath a single nested subdoc (gh-9298)[0m
2025-04-03T23:44:55.7983457Z   [32m  [32mâœ”[39m[0m[90m overwrite an array with empty (gh-7135)[0m
2025-04-03T23:44:55.8289584Z   [32m  [32mâœ”[39m[0m[90m sets child timestamps even without $set (gh-7261)[0m
2025-04-03T23:44:55.8434274Z   [32m  [32mâœ”[39m[0m[90m supports discriminators if key is specified in conditions (gh-7843)[0m
2025-04-03T23:44:55.8775298Z   [32m  [32mâœ”[39m[0m[90m immutable createdAt (gh-7917)[0m
2025-04-03T23:44:55.8918965Z   [32m  [32mâœ”[39m[0m[90m overwriting immutable createdAt (gh-8619)[0m
2025-04-03T23:44:55.9097928Z   [32m  [32mâœ”[39m[0m[90m conditional immutable (gh-8001)[0m
2025-04-03T23:44:55.9230918Z   [32m  [32mâœ”[39m[0m[90m allow $pull with non-existent schema field (gh-8166)[0m
2025-04-03T23:44:55.9470879Z   [32m  [32mâœ”[39m[0m[90m update embedded discriminator path if key in $elemMatch (gh-8063)[0m
2025-04-03T23:44:55.9678815Z   [32m  [32mâœ”[39m[0m[90m moves $set of immutable properties to $setOnInsert (gh-8467) (gh-9537)[0m
2025-04-03T23:44:55.9787983Z   [32m  [32mâœ”[39m[0m[90m moves $set of immutable properties to $setOnInsert (gh-8951)[0m
2025-04-03T23:44:56.0028184Z   [32m  [32mâœ”[39m[0m[90m updates buffers with `runValidators` successfully (gh-8580)[0m
2025-04-03T23:44:56.0208210Z   [32m  [32mâœ”[39m[0m[90m allows overriding child strict mode with top-level strict (gh-8961)[0m
2025-04-03T23:44:56.0444553Z   [32m  [32mâœ”[39m[0m[90m handles timestamp properties in nested paths when overwriting parent path (gh-9105)[0m
2025-04-03T23:44:56.0499385Z   [32m  [32mâœ”[39m[0m[90m update validators respect storeSubdocValidationError (gh-9172)[0m
2025-04-03T23:44:56.0699546Z   [32m  [32mâœ”[39m[0m[90m handles spread docs (gh-9518)[0m
2025-04-03T23:44:56.0834511Z   [32m  [32mâœ”[39m[0m[90m works with doubly nested arrays with $pullAll (gh-13190)[0m
2025-04-03T23:44:56.1013936Z   [32m  [32mâœ”[39m[0m[90m should throw when matchedCount === 0 and using orFail() on the query gh-11620[0m
2025-04-03T23:44:56.1289717Z   [32m  [32mâœ”[39m[0m[90m updateOne with top level key that starts with $ (gh-13786)[0m
2025-04-03T23:44:56.1439935Z   [32m  [32mâœ”[39m[0m[90m works with update validators and single nested doc with numberic paths (gh-13977)[0m
2025-04-03T23:44:56.1616746Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators with $pull when discriminator key set in filter (gh-14675)[0m
2025-04-03T23:44:56.1836589Z   [32m  [32mâœ”[39m[0m[90m casts using overwritten discriminator key schema (gh-15051)[0m
2025-04-03T23:44:56.1922154Z [0m    mongodb 42 features[0m
2025-04-03T23:44:56.2162759Z     [32m  [32mâœ”[39m[0m[90m update pipeline (gh-8225)[0m
2025-04-03T23:44:56.2287762Z     [32m  [32mâœ”[39m[0m[90m update pipeline - $unset with string (gh-11106)[0m
2025-04-03T23:44:56.2474602Z     [32m  [32mâœ”[39m[0m[90m update pipeline timestamps (gh-8524)[0m
2025-04-03T23:44:56.2546125Z [0m    overwriteDiscriminatorKey[0m
2025-04-03T23:44:56.2766723Z     [32m  [32mâœ”[39m[0m[90m allows changing discriminator key in update (gh-6087)[0m
2025-04-03T23:44:56.2788006Z [0m    converts dot separated paths to nested structure (gh-10200)[0m
2025-04-03T23:44:56.2804394Z     [32m  [32mâœ”[39m[0m[90m works with new Model(...)[0m
2025-04-03T23:44:56.2950813Z     [32m  [32mâœ”[39m[0m[90m works with Model.create(...)[0m
2025-04-03T23:44:56.3158943Z     [32m  [32mâœ”[39m[0m[90m works with Model.updateOne(...)[0m
2025-04-03T23:44:56.3267796Z     [32m  [32mâœ”[39m[0m[90m works with Model.bulkWrite(...)[0m
2025-04-03T23:44:56.3366262Z 
2025-04-03T23:44:56.3366835Z [0m  model: validate: [0m
2025-04-03T23:44:56.3392068Z   [32m  [32mâœ”[39m[0m[90m Model.validate() (gh-7587)[0m
2025-04-03T23:44:56.3400307Z   [32m  [32mâœ”[39m[0m[90m Model.validate(...) validates paths in arrays (gh-8821)[0m
2025-04-03T23:44:56.3416156Z   [32m  [32mâœ”[39m[0m[90m Model.validate(...) respects discriminators (gh-12621)[0m
2025-04-03T23:44:56.3422872Z   [32m  [32mâœ”[39m[0m[90m Model.validate() works with arrays (gh-10669)[0m
2025-04-03T23:44:56.3428998Z   [32m  [32mâœ”[39m[0m[90m Model.validate(...) uses document instance as context by default (gh-10132)[0m
2025-04-03T23:44:56.3434701Z   [32m  [32mâœ”[39m[0m[90m Model.validate(...) uses object as context by default (gh-10346)[0m
2025-04-03T23:44:56.3444706Z   [32m  [32mâœ”[39m[0m[90m Model.validate(...) supports passing in an object, array or string (gh-10353)[0m
2025-04-03T23:44:56.3454031Z   [32m  [32mâœ”[39m[0m[90m runs validation on casted paths even if cast error happened[0m
2025-04-03T23:44:56.3454561Z 
2025-04-03T23:44:56.3455319Z [0m  model: watch: [0m
2025-04-03T23:44:56.3456035Z [0m    with buffering[0m
2025-04-03T23:44:56.3457545Z     [36m  - watch() before connecting (gh-5964)[0m
2025-04-03T23:44:56.3458521Z     [36m  - watch() close() prevents buffered watch op from running (gh-7022)[0m
2025-04-03T23:44:56.3459473Z     [36m  - watch() close() closes the stream (gh-7022)[0m
2025-04-03T23:44:56.3459865Z 
2025-04-03T23:44:56.3460552Z [0m  is compatible with object created using Object.create(null) (gh-1484)[0m
2025-04-03T23:44:56.3487547Z   [32m  [32mâœ”[39m[0m[90m during construction[0m
2025-04-03T23:44:56.3501187Z   [32m  [32mâœ”[39m[0m[90m with .set(path, obj)[0m
2025-04-03T23:44:56.3511446Z   [32m  [32mâœ”[39m[0m[90m with schema[0m
2025-04-03T23:44:56.3534706Z 
2025-04-03T23:44:56.3535488Z [0m  parallelLimit[0m
2025-04-03T23:44:56.3537241Z   [32m  [32mâœ”[39m[0m[90m works with zero functions[0m
2025-04-03T23:44:56.4570438Z   [32m  [32mâœ”[39m[0m[90m executes functions in parallel[0m[31m (103ms)[0m
2025-04-03T23:44:56.4571057Z 
2025-04-03T23:44:56.4571350Z [0m  id virtual getter[0m
2025-04-03T23:44:56.4609989Z   [32m  [32mâœ”[39m[0m[90m should work as expected with an ObjectId[0m
2025-04-03T23:44:56.4713360Z   [32m  [32mâœ”[39m[0m[90m should be turned off when `id` option is set to false[0m
2025-04-03T23:44:56.4916934Z   [32m  [32mâœ”[39m[0m[90m should be turned off when the schema has a set `id` path[0m
2025-04-03T23:44:56.4953547Z 
2025-04-03T23:44:56.4954759Z [0m  QueryCursor[0m
2025-04-03T23:44:56.5142037Z   [32m  [32mâœ”[39m[0m[90m as readable stream[0m
2025-04-03T23:44:56.5325525Z   [32m  [32mâœ”[39m[0m[90m handles non-boolean lean option (gh-7137)[0m
2025-04-03T23:44:56.5684829Z   [32m  [32mâœ”[39m[0m[90m data before close (gh-4998)[0m
2025-04-03T23:44:56.5866014Z   [32m  [32mâœ”[39m[0m[90m pulls schema-level readPreference (gh-8421)[0m
2025-04-03T23:44:56.7283631Z   [32m  [32mâœ”[39m[0m[90m eachAsync() with parallel > numDocs (gh-8422)[0m[31m (120ms)[0m
2025-04-03T23:44:56.7636452Z   [32m  [32mâœ”[39m[0m[90m eachAsync() with sort, parallel, and sync function (gh-8557)[0m
2025-04-03T23:44:56.8016938Z   [32m  [32mâœ”[39m[0m[90m closing query cursor emits `close` event only once (gh-8835)[0m
2025-04-03T23:44:56.8433387Z   [32m  [32mâœ”[39m[0m[90m closing aggregation cursor emits `close` event only once (gh-8835)[0m
2025-04-03T23:44:57.0804614Z   [32m  [32mâœ”[39m[0m[90m closing query cursor emits `close` event only once with stream pause/resume (gh-10876)[0m[31m (217ms)[0m
2025-04-03T23:44:57.3113535Z   [32m  [32mâœ”[39m[0m[90m closing aggregation cursor emits `close` event only once with stream pause/resume (gh-10876)[0m[31m (213ms)[0m
2025-04-03T23:44:57.5456903Z   [32m  [32mâœ”[39m[0m[90m query cursor emit end event (gh-10902)[0m[31m (215ms)[0m
2025-04-03T23:44:57.7853717Z   [32m  [32mâœ”[39m[0m[90m aggregate cursor emit end event (gh-10902)[0m[31m (220ms)[0m
2025-04-03T23:44:57.8689779Z   [32m  [32mâœ”[39m[0m[90m query cursor emit end event before close event (gh-10902)[0m[33m (65ms)[0m
2025-04-03T23:44:57.9530106Z   [32m  [32mâœ”[39m[0m[90m aggregate cursor emit end event before close event (gh-10902)[0m[33m (65ms)[0m
2025-04-03T23:44:57.9991590Z   [32m  [32mâœ”[39m[0m[90m passes document index as the second argument for query cursor (gh-8972)[0m
2025-04-03T23:44:58.0388837Z   [32m  [32mâœ”[39m[0m[90m passes document index as the second argument for aggregation cursor (gh-8972)[0m
2025-04-03T23:44:58.0816750Z   [32m  [32mâœ”[39m[0m[90m post hooks (gh-9435)[0m
2025-04-03T23:44:58.1202992Z   [32m  [32mâœ”[39m[0m[90m reports CastError with noCursorTimeout set (gh-10150)[0m
2025-04-03T23:44:58.1666343Z   [32m  [32mâœ”[39m[0m[90m reports error in pre save hook (gh-10785)[0m
2025-04-03T23:44:58.2163849Z   [32m  [32mâœ”[39m[0m[90m applies selected fields when using discriminators (gh-11130)[0m
2025-04-03T23:44:58.2540625Z   [32m  [32mâœ”[39m[0m[90m should allow middleware to run before applying _optionsForExec() gh-13417[0m
2025-04-03T23:44:58.2940141Z   [32m  [32mâœ”[39m[0m[90m handles skipMiddlewareFunction() (gh-13411)[0m
2025-04-03T23:44:58.3160910Z   [32m  [32mâœ”[39m[0m[90m supports including fields using plus path that have select: false in schema (gh-13773)[0m
2025-04-03T23:44:58.3543665Z   [32m  [32mâœ”[39m[0m[90m throws if calling skipMiddlewareFunction() with non-empty array (gh-13411)[0m
2025-04-03T23:44:58.3974967Z   [32m  [32mâœ”[39m[0m[90m returns the underlying Node driver cursor with getDriverCursor()[0m
2025-04-03T23:44:58.4172838Z   [32m  [32mâœ”[39m[0m[90m handles destroy() (gh-14966)[0m
2025-04-03T23:44:58.4359385Z   [32m  [32mâœ”[39m[0m[90m handles destroy() before cursor is created (gh-14966)[0m
2025-04-03T23:44:58.4383347Z [0m    #next()[0m
2025-04-03T23:44:58.4560228Z     [32m  [32mâœ”[39m[0m[90m with promises[0m
2025-04-03T23:44:58.4760819Z     [32m  [32mâœ”[39m[0m[90m with limit (gh-4266)[0m
2025-04-03T23:44:58.5110051Z     [32m  [32mâœ”[39m[0m[90m with projection[0m
2025-04-03T23:44:58.5322280Z     [32m  [32mâœ”[39m[0m[90m casting ObjectIds with where() (gh-4355)[0m
2025-04-03T23:44:58.5503502Z     [32m  [32mâœ”[39m[0m[90m cast errors (gh-4355)[0m
2025-04-03T23:44:58.5698648Z     [32m  [32mâœ”[39m[0m[90m with pre-find hooks (gh-5096)[0m
2025-04-03T23:44:58.5720844Z [0m      with populate[0m
2025-04-03T23:44:58.6355719Z       [32m  [32mâœ”[39m[0m[90m with populate without specify batchSize[0m
2025-04-03T23:44:58.7080219Z       [32m  [32mâœ”[39m[0m[90m with populate using custom batchSize[0m
2025-04-03T23:44:58.7111919Z [0m    `transform` option[0m
2025-04-03T23:44:58.7324325Z     [32m  [32mâœ”[39m[0m[90m transforms document[0m
2025-04-03T23:44:58.7347106Z [0m    #map[0m
2025-04-03T23:44:58.7517033Z     [32m  [32mâœ”[39m[0m[90m maps documents[0m
2025-04-03T23:44:58.7724898Z     [32m  [32mâœ”[39m[0m[90m with #next[0m
2025-04-03T23:44:58.7745359Z [0m    #eachAsync()[0m
2025-04-03T23:44:58.8935554Z     [32m  [32mâœ”[39m[0m[90m iterates one-by-one, stopping for promises[0m[31m (102ms)[0m
2025-04-03T23:44:58.9160102Z     [32m  [32mâœ”[39m[0m[90m parallelization[0m
2025-04-03T23:44:58.9182084Z [0m    #lean()[0m
2025-04-03T23:44:58.9381092Z     [32m  [32mâœ”[39m[0m[90m lean[0m
2025-04-03T23:44:58.9621417Z     [32m  [32mâœ”[39m[0m[90m lean = false (gh-7197)[0m
2025-04-03T23:44:58.9643248Z [0m    #close()[0m
2025-04-03T23:44:58.9819177Z     [32m  [32mâœ”[39m[0m[90m works (gh-4258)[0m
2025-04-03T23:44:58.9856753Z 
2025-04-03T23:44:58.9857652Z [0m  query middleware[0m
2025-04-03T23:44:59.0042558Z   [32m  [32mâœ”[39m[0m[90m has a pre find hook[0m
2025-04-03T23:44:59.0340254Z   [32m  [32mâœ”[39m[0m[90m has post find hooks[0m
2025-04-03T23:44:59.0560911Z   [32m  [32mâœ”[39m[0m[90m works when using a chained query builder[0m
2025-04-03T23:44:59.0758863Z   [32m  [32mâœ”[39m[0m[90m has separate pre-findOne() and post-findOne() hooks[0m
2025-04-03T23:44:59.0994164Z   [32m  [32mâœ”[39m[0m[90m with regular expression (gh-6680)[0m
2025-04-03T23:44:59.1215495Z   [32m  [32mâœ”[39m[0m[90m can populate in pre hook[0m
2025-04-03T23:44:59.1449247Z   [32m  [32mâœ”[39m[0m[90m can populate in post hook[0m
2025-04-03T23:44:59.1654742Z   [32m  [32mâœ”[39m[0m[90m has hooks for countDocuments()[0m
2025-04-03T23:44:59.1873188Z   [32m  [32mâœ”[39m[0m[90m has hooks for estimatedDocumentCount()[0m
2025-04-03T23:44:59.2108231Z   [32m  [32mâœ”[39m[0m[90m updateOne() (gh-3997)[0m
2025-04-03T23:44:59.2334273Z   [32m  [32mâœ”[39m[0m[90m updateMany() (gh-3997)[0m
2025-04-03T23:44:59.2536813Z   [32m  [32mâœ”[39m[0m[90m deleteOne() (gh-7195)[0m
2025-04-03T23:44:59.2771852Z   [32m  [32mâœ”[39m[0m[90m deleteMany() (gh-7195)[0m
2025-04-03T23:44:59.3007164Z   [32m  [32mâœ”[39m[0m[90m distinct (gh-5938)[0m
2025-04-03T23:44:59.3135661Z   [32m  [32mâœ”[39m[0m[90m error handlers (gh-2284)[0m
2025-04-03T23:44:59.3164773Z   [32m  [32mâœ”[39m[0m[90m error handlers for validate (gh-4885)[0m
2025-04-03T23:44:59.3320112Z   [32m  [32mâœ”[39m[0m[90m error handlers with findOneAndUpdate and passRawResult (gh-4836)[0m
2025-04-03T23:44:59.3435212Z   [32m  [32mâœ”[39m[0m[90m error handlers with findOneAndUpdate error and passRawResult (gh-4836)[0m
2025-04-03T23:44:59.3519221Z   [32m  [32mâœ”[39m[0m[90m error handlers with error from pre hook (gh-4927)[0m
2025-04-03T23:44:59.3601943Z   [32m  [32mâœ”[39m[0m[90m with clone() (gh-5153)[0m
2025-04-03T23:44:59.3689945Z   [32m  [32mâœ”[39m[0m[90m doesnt double call post(regexp) with updateOne (gh-7418)[0m
2025-04-03T23:44:59.3867477Z   [32m  [32mâœ”[39m[0m[90m deleteOne with `document: true` but no `query` (gh-8555)[0m
2025-04-03T23:44:59.4090818Z   [32m  [32mâœ”[39m[0m[90m allows registering middleware for all queries with regexp (gh-9190)[0m
2025-04-03T23:44:59.4122303Z   [32m  [32mâœ”[39m[0m[90m allows skipping the wrapped function with `skipMiddlewareFunction()` (gh-11426)[0m
2025-04-03T23:44:59.4300393Z   [32m  [32mâœ”[39m[0m[90m allows overwriting result with `overwriteMiddlewareResult()` (gh-11426)[0m
2025-04-03T23:44:59.4412223Z 
2025-04-03T23:44:59.4416726Z [0m  Query[0m
2025-04-03T23:44:59.4539071Z   [32m  [32mâœ”[39m[0m[90m transform (gh-14236) (gh-7142)[0m
2025-04-03T23:44:59.4841010Z   [32m  [32mâœ”[39m[0m[90m allows skipping timestamps in updateOne() (gh-6980)[0m
2025-04-03T23:44:59.5213923Z   [32m  [32mâœ”[39m[0m[90m increments timestamps for nested subdocs (gh-4412)[0m
2025-04-03T23:44:59.5372622Z   [32m  [32mâœ”[39m[0m[90m strictQuery option (gh-4136) (gh-7178)[0m
2025-04-03T23:44:59.5407486Z   [32m  [32mâœ”[39m[0m[90m strictQuery does not inherit from strict (gh-11861)[0m
2025-04-03T23:44:59.5558911Z   [32m  [32mâœ”[39m[0m[90m strictQuery is false by default (gh-11861)[0m
2025-04-03T23:44:59.5766926Z   [32m  [32mâœ”[39m[0m[90m strictQuery = true (gh-6032)[0m
2025-04-03T23:44:59.6017433Z   [32m  [32mâœ”[39m[0m[90m function defaults run after query result is inited (gh-7182)[0m
2025-04-03T23:44:59.6144738Z   [32m  [32mâœ”[39m[0m[90m merging objectids with where() (gh-7360)[0m
2025-04-03T23:44:59.6520487Z   [32m  [32mâœ”[39m[0m[90m maxTimeMS() (gh-7254)[0m
2025-04-03T23:44:59.6807538Z   [32m  [32mâœ”[39m[0m[90m connection-level maxTimeMS() (gh-4066)[0m
2025-04-03T23:44:59.7025229Z   [32m  [32mâœ”[39m[0m[90m mongoose-level maxTimeMS() (gh-4066)[0m
2025-04-03T23:44:59.7137246Z   [32m  [32mâœ”[39m[0m[90m query with top-level _bsontype (gh-8222) (gh-8268)[0m
2025-04-03T23:44:59.7344028Z   [32m  [32mâœ”[39m[0m[90m casts $elemMatch with dbrefs (gh-8577)[0m
2025-04-03T23:44:59.7454336Z   [32m  [32mâœ”[39m[0m[90m throws an error if executed multiple times (gh-7398)[0m
2025-04-03T23:44:59.7523821Z   [32m  [32mâœ”[39m[0m[90m setter priorVal (gh-8629)[0m
2025-04-03T23:44:59.7716077Z   [32m  [32mâœ”[39m[0m[90m casts filter according to discriminator schema if in filter (gh-8881)[0m
2025-04-03T23:44:59.8142145Z   [32m  [32mâœ”[39m[0m[90m casts update object according to child discriminator schema when `discriminatorKey` is present (gh-8982)[0m
2025-04-03T23:44:59.8299380Z   [32m  [32mâœ”[39m[0m[90m allows disabling `setDefaultsOnInsert` (gh-8410)[0m
2025-04-03T23:44:59.8331812Z   [32m  [32mâœ”[39m[0m[90m throws readable error if `$and` and `$or` contain non-objects (gh-8948)[0m
2025-04-03T23:44:59.8602978Z   [32m  [32mâœ”[39m[0m[90m includes `undefined` in filters (gh-3944)[0m
2025-04-03T23:44:59.8810153Z   [32m  [32mâœ”[39m[0m[90m handles push with array filters (gh-9977)[0m
2025-04-03T23:44:59.8847676Z   [32m  [32mâœ”[39m[0m[90m Query#pre() (gh-9784)[0m
2025-04-03T23:44:59.8923321Z   [32m  [32mâœ”[39m[0m[90m applies schema-level `select` on arrays (gh-10029)[0m
2025-04-03T23:44:59.9013335Z   [32m  [32mâœ”[39m[0m[90m sets `writeConcern` option correctly (gh-10009)[0m
2025-04-03T23:44:59.9200082Z   [32m  [32mâœ”[39m[0m[90m no longer has the deprecation warning message with writeConcern gh-10083[0m
2025-04-03T23:44:59.9292724Z   [32m  [32mâœ”[39m[0m[90m sanitizeProjection option (gh-10243)[0m
2025-04-03T23:44:59.9530897Z   [32m  [32mâœ”[39m[0m[90m sanitizeProjection option with plus paths (gh-14333) (gh-10243)[0m
2025-04-03T23:44:59.9564172Z   [32m  [32mâœ”[39m[0m[90m sanitizeFilter option (gh-3944)[0m
2025-04-03T23:44:59.9649847Z   [32m  [32mâœ”[39m[0m[90m sanitizeFilter disables implicit $in (gh-14657)[0m
2025-04-03T23:44:59.9842232Z   [32m  [32mâœ”[39m[0m[90m should not error when $not is used with $size (gh-10716)[0m
2025-04-03T23:45:00.0228808Z   [32m  [32mâœ”[39m[0m[90m should not error when $not is used on an array of strings (gh-11467)[0m
2025-04-03T23:45:00.0358401Z   [32m  [32mâœ”[39m[0m[90m adding `exec` option does not affect the query (gh-11416)[0m
2025-04-03T23:45:00.0613944Z   [32m  [32mâœ”[39m[0m[90m handles queries with EJSON deserialized RegExps (gh-11597)[0m
2025-04-03T23:45:00.0799423Z   [32m  [32mâœ”[39m[0m[90m should return query helper supplied in schema options query property instead of undefined[0m
2025-04-03T23:45:00.1048380Z   [32m  [32mâœ”[39m[0m[90m allows a transform option for lean on a query (gh-10423)[0m
2025-04-03T23:45:00.1327818Z   [32m  [32mâœ”[39m[0m[90m handles a lean transform that deletes _id with populate (gh-12143) (gh-10423)[0m
2025-04-03T23:45:00.1463607Z   [32m  [32mâœ”[39m[0m[90m skips applying default projections over slice projections (gh-11940)[0m
2025-04-03T23:45:00.1753473Z   [32m  [32mâœ”[39m[0m[90m translateAliases option (gh-7511)[0m
2025-04-03T23:45:00.1871174Z   [32m  [32mâœ”[39m[0m[90m translateAliases throws error on conflicting properties (gh-7511)[0m
2025-04-03T23:45:00.2099778Z   [32m  [32mâœ”[39m[0m[90m translateAliases applies before casting (gh-14521) (gh-7511)[0m
2025-04-03T23:45:00.2251277Z   [32m  [32mâœ”[39m[0m[90m schema level translateAliases option (gh-7511)[0m
2025-04-03T23:45:00.2372083Z   [32m  [32mâœ”[39m[0m[90m select: false is ignored for type Map (gh-12445)[0m
2025-04-03T23:45:00.2588987Z   [32m  [32mâœ”[39m[0m[90m Map field with select: false is selected when explicitly requested (gh-12603)[0m
2025-04-03T23:45:00.2684496Z   [32m  [32mâœ”[39m[0m[90m treats ObjectId as object with `_id` for `merge()` (gh-12325)[0m
2025-04-03T23:45:00.2950366Z   [32m  [32mâœ”[39m[0m[90m avoid throwing error when modifying nested field with same name as discriminator key (gh-12517)[0m
2025-04-03T23:45:00.3094770Z   [32m  [32mâœ”[39m[0m[90m avoid throwing error when modifying field with same name as nested discriminator key (gh-12517)[0m
2025-04-03T23:45:00.3449660Z   [32m  [32mâœ”[39m[0m[90m global strictQuery should work if applied after schema creation (gh-12703)[0m
2025-04-03T23:45:00.3627488Z   [32m  [32mâœ”[39m[0m[90m update operation should not remove fields set to undefined (gh-12930)[0m
2025-04-03T23:45:00.3759418Z   [32m  [32mâœ”[39m[0m[90m handles $elemMatch with nested schema (gh-12902)[0m
2025-04-03T23:45:00.3852887Z   [32m  [32mâœ”[39m[0m[90m merges $and, $or conditions (gh-12944)[0m
2025-04-03T23:45:00.3950882Z   [32m  [32mâœ”[39m[0m[90m shallow clones $and, $or if merging with empty filter (gh-14567) (gh-12944)[0m
2025-04-03T23:45:00.4190448Z   [32m  [32mâœ”[39m[0m[90m should avoid sending empty session to MongoDB server (gh-13052)[0m
2025-04-03T23:45:00.4442233Z   [32m  [32mâœ”[39m[0m[90m should avoid sending empty projection to MongoDB server (gh-13065)[0m
2025-04-03T23:45:00.4513360Z   [32m  [32mâœ”[39m[0m[90m should provide a clearer error message when sorting with empty string[0m
2025-04-03T23:45:00.4683689Z   [32m  [32mâœ”[39m[0m[90m allows executing a find() with a subdocument with defaults disabled (gh-13512)[0m
2025-04-03T23:45:00.4888046Z   [32m  [32mâœ”[39m[0m[90m throws a readable error when executing Query instance without a model (gh-13570)[0m
2025-04-03T23:45:00.5042602Z   [32m  [32mâœ”[39m[0m[90m throws a readable error when executing Query instance without an op (gh-13570)[0m
2025-04-03T23:45:00.5197680Z   [32m  [32mâœ”[39m[0m[90m allows deselecting discriminator key (gh-13760) (gh-13679)[0m
2025-04-03T23:45:00.5612651Z   [32m  [32mâœ”[39m[0m[90m does not apply sibling path defaults if using nested projection (gh-14115)[0m
2025-04-03T23:45:00.5641753Z   [32m  [32mâœ”[39m[0m[90m allows overriding sort (gh-14365)[0m
2025-04-03T23:45:00.5820348Z   [32m  [32mâœ”[39m[0m[90m avoids mutating user-provided query selectors (gh-14567)[0m
2025-04-03T23:45:00.5927921Z   [32m  [32mâœ”[39m[0m[90m avoids mutating $or, $and elements when casting (gh-14610)[0m
2025-04-03T23:45:00.5986233Z [0m    constructor[0m
2025-04-03T23:45:00.5988516Z     [32m  [32mâœ”[39m[0m[90m should not corrupt options[0m
2025-04-03T23:45:00.6001309Z [0m    select[0m
2025-04-03T23:45:00.6003183Z     [32m  [32mâœ”[39m[0m[90m (object)[0m
2025-04-03T23:45:00.6016774Z     [32m  [32mâœ”[39m[0m[90m (string)[0m
2025-04-03T23:45:00.6030332Z     [32m  [32mâœ”[39m[0m[90m ("a","b","c")[0m
2025-04-03T23:45:00.6044442Z     [32m  [32mâœ”[39m[0m[90m should not overwrite fields set in prior calls[0m
2025-04-03T23:45:00.6058932Z     [32m  [32mâœ”[39m[0m[90m should remove existing fields from inclusive projection[0m
2025-04-03T23:45:00.6072648Z     [32m  [32mâœ”[39m[0m[90m should remove existing fields from exclusive projection[0m
2025-04-03T23:45:00.6085230Z [0m    projection() (gh-7384)[0m
2025-04-03T23:45:00.6087052Z     [32m  [32mâœ”[39m[0m[90m gets current projection[0m
2025-04-03T23:45:00.6100220Z     [32m  [32mâœ”[39m[0m[90m overwrites current projection[0m
2025-04-03T23:45:00.6112680Z [0m    where[0m
2025-04-03T23:45:00.6114731Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:00.6128617Z     [32m  [32mâœ”[39m[0m[90m throws if non-string or non-object path is passed[0m
2025-04-03T23:45:00.6141494Z     [32m  [32mâœ”[39m[0m[90m does not throw when 0 args passed[0m
2025-04-03T23:45:00.6153535Z [0m    equals[0m
2025-04-03T23:45:00.6155233Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:00.6167246Z [0m    gte[0m
2025-04-03T23:45:00.6168855Z     [32m  [32mâœ”[39m[0m[90m with 2 args[0m
2025-04-03T23:45:00.6181999Z     [32m  [32mâœ”[39m[0m[90m with 1 arg[0m
2025-04-03T23:45:00.6194758Z [0m    gt[0m
2025-04-03T23:45:00.6196527Z     [32m  [32mâœ”[39m[0m[90m with 1 arg[0m
2025-04-03T23:45:00.6210588Z     [32m  [32mâœ”[39m[0m[90m with 2 args[0m
2025-04-03T23:45:00.6223147Z [0m    lte[0m
2025-04-03T23:45:00.6225608Z     [32m  [32mâœ”[39m[0m[90m with 1 arg[0m
2025-04-03T23:45:00.6239200Z     [32m  [32mâœ”[39m[0m[90m with 2 args[0m
2025-04-03T23:45:00.6251804Z [0m    lt[0m
2025-04-03T23:45:00.6253721Z     [32m  [32mâœ”[39m[0m[90m with 1 arg[0m
2025-04-03T23:45:00.6268025Z     [32m  [32mâœ”[39m[0m[90m with 2 args[0m
2025-04-03T23:45:00.6280656Z [0m    combined[0m
2025-04-03T23:45:00.6281174Z [0m      lt and gt[0m
2025-04-03T23:45:00.6282952Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:00.6296124Z [0m    tl on one path and gt on another[0m
2025-04-03T23:45:00.6298133Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:00.6311249Z [0m    ne[0m
2025-04-03T23:45:00.6312867Z     [32m  [32mâœ”[39m[0m[90m with 1 arg[0m
2025-04-03T23:45:00.6329309Z     [32m  [32mâœ”[39m[0m[90m with 2 args[0m
2025-04-03T23:45:00.6344729Z [0m    in[0m
2025-04-03T23:45:00.6347330Z     [32m  [32mâœ”[39m[0m[90m with 1 arg[0m
2025-04-03T23:45:00.6362426Z     [32m  [32mâœ”[39m[0m[90m with 2 args[0m
2025-04-03T23:45:00.6379856Z     [32m  [32mâœ”[39m[0m[90m where a non-array value no via where[0m
2025-04-03T23:45:00.6396855Z     [32m  [32mâœ”[39m[0m[90m where a non-array value via where[0m
2025-04-03T23:45:00.6411855Z [0m    nin[0m
2025-04-03T23:45:00.6413705Z     [32m  [32mâœ”[39m[0m[90m with 1 arg[0m
2025-04-03T23:45:00.6444483Z     [32m  [32mâœ”[39m[0m[90m with 2 args[0m
2025-04-03T23:45:00.6459207Z     [32m  [32mâœ”[39m[0m[90m with a non-array value not via where[0m
2025-04-03T23:45:00.6474568Z     [32m  [32mâœ”[39m[0m[90m with a non-array value via where[0m
2025-04-03T23:45:00.6486917Z [0m    mod[0m
2025-04-03T23:45:00.6490599Z     [32m  [32mâœ”[39m[0m[90m not via where, where [a, b] param[0m
2025-04-03T23:45:00.6504927Z     [32m  [32mâœ”[39m[0m[90m not via where, where a and b params[0m
2025-04-03T23:45:00.6519298Z     [32m  [32mâœ”[39m[0m[90m via where, where [a, b] param[0m
2025-04-03T23:45:00.6533375Z     [32m  [32mâœ”[39m[0m[90m via where, where a and b params[0m
2025-04-03T23:45:00.6547534Z [0m    near[0m
2025-04-03T23:45:00.6549582Z     [32m  [32mâœ”[39m[0m[90m via where, where { center :[lat, long]} param[0m
2025-04-03T23:45:00.6564639Z     [32m  [32mâœ”[39m[0m[90m via where, where [lat, long] param[0m
2025-04-03T23:45:00.6578149Z     [32m  [32mâœ”[39m[0m[90m via where, where lat and long params[0m
2025-04-03T23:45:00.6594108Z     [32m  [32mâœ”[39m[0m[90m not via where, where [lat, long] param[0m
2025-04-03T23:45:00.6609939Z     [32m  [32mâœ”[39m[0m[90m not via where, where lat and long params[0m
2025-04-03T23:45:00.6630953Z     [32m  [32mâœ”[39m[0m[90m via where, where GeoJSON param[0m
2025-04-03T23:45:00.6724234Z     [32m  [32mâœ”[39m[0m[90m with path, where GeoJSON param[0m
2025-04-03T23:45:00.6736898Z [0m    nearSphere[0m
2025-04-03T23:45:00.6739319Z     [32m  [32mâœ”[39m[0m[90m via where, where [lat, long] param[0m
2025-04-03T23:45:00.6752595Z     [32m  [32mâœ”[39m[0m[90m via where, where lat and long params[0m
2025-04-03T23:45:00.6765739Z     [32m  [32mâœ”[39m[0m[90m not via where, where [lat, long] param[0m
2025-04-03T23:45:00.6778404Z     [32m  [32mâœ”[39m[0m[90m not via where, where lat and long params[0m
2025-04-03T23:45:00.6790986Z     [32m  [32mâœ”[39m[0m[90m via where, with object[0m
2025-04-03T23:45:00.6806635Z     [32m  [32mâœ”[39m[0m[90m via where, where GeoJSON param[0m
2025-04-03T23:45:00.6893882Z     [32m  [32mâœ”[39m[0m[90m with path, with GeoJSON[0m
2025-04-03T23:45:00.6970571Z [0m    maxDistance[0m
2025-04-03T23:45:00.6973766Z     [32m  [32mâœ”[39m[0m[90m via where[0m
2025-04-03T23:45:00.6986381Z [0m    within[0m
2025-04-03T23:45:00.6986820Z [0m      box[0m
2025-04-03T23:45:00.6989857Z       [32m  [32mâœ”[39m[0m[90m via where[0m
2025-04-03T23:45:00.7003556Z       [32m  [32mâœ”[39m[0m[90m via where, no object[0m
2025-04-03T23:45:00.7015707Z [0m      center[0m
2025-04-03T23:45:00.7018483Z       [32m  [32mâœ”[39m[0m[90m via where[0m
2025-04-03T23:45:00.7030632Z [0m      centerSphere[0m
2025-04-03T23:45:00.7033191Z       [32m  [32mâœ”[39m[0m[90m via where[0m
2025-04-03T23:45:00.7045352Z [0m      polygon[0m
2025-04-03T23:45:00.7048253Z       [32m  [32mâœ”[39m[0m[90m via where[0m
2025-04-03T23:45:00.7060390Z [0m    exists[0m
2025-04-03T23:45:00.7062551Z     [32m  [32mâœ”[39m[0m[90m 0 args via where[0m
2025-04-03T23:45:00.7075940Z     [32m  [32mâœ”[39m[0m[90m 1 arg via where[0m
2025-04-03T23:45:00.7088823Z     [32m  [32mâœ”[39m[0m[90m where 1 argument not via where[0m
2025-04-03T23:45:00.7101368Z     [32m  [32mâœ”[39m[0m[90m where 2 args not via where[0m
2025-04-03T23:45:00.7113195Z [0m    all[0m
2025-04-03T23:45:00.7115320Z     [32m  [32mâœ”[39m[0m[90m via where[0m
2025-04-03T23:45:00.7128942Z     [32m  [32mâœ”[39m[0m[90m not via where[0m
2025-04-03T23:45:00.7142193Z [0m    find[0m
2025-04-03T23:45:00.7144287Z     [32m  [32mâœ”[39m[0m[90m strict array equivalence condition v[0m
2025-04-03T23:45:00.7160084Z     [32m  [32mâœ”[39m[0m[90m with no args[0m
2025-04-03T23:45:00.7177221Z     [32m  [32mâœ”[39m[0m[90m works with overwriting previous object args (1176)[0m
2025-04-03T23:45:00.7192341Z [0m    size[0m
2025-04-03T23:45:00.7194313Z     [32m  [32mâœ”[39m[0m[90m via where[0m
2025-04-03T23:45:00.7211359Z     [32m  [32mâœ”[39m[0m[90m not via where[0m
2025-04-03T23:45:00.7226177Z [0m    slice[0m
2025-04-03T23:45:00.7228421Z     [32m  [32mâœ”[39m[0m[90m where and positive limit param[0m
2025-04-03T23:45:00.7244067Z     [32m  [32mâœ”[39m[0m[90m where just negative limit param[0m
2025-04-03T23:45:00.7257554Z     [32m  [32mâœ”[39m[0m[90m where [skip, limit] param[0m
2025-04-03T23:45:00.7270866Z     [32m  [32mâœ”[39m[0m[90m where skip and limit params[0m
2025-04-03T23:45:00.7284659Z     [32m  [32mâœ”[39m[0m[90m where just positive limit param[0m
2025-04-03T23:45:00.7297610Z     [32m  [32mâœ”[39m[0m[90m where just negative limit param[0m
2025-04-03T23:45:00.7310546Z     [32m  [32mâœ”[39m[0m[90m where the [skip, limit] param[0m
2025-04-03T23:45:00.7323619Z     [32m  [32mâœ”[39m[0m[90m where the skip and limit params[0m
2025-04-03T23:45:00.7339312Z     [32m  [32mâœ”[39m[0m[90m not via where, with just positive limit param[0m
2025-04-03T23:45:00.7352336Z     [32m  [32mâœ”[39m[0m[90m not via where, where just negative limit param[0m
2025-04-03T23:45:00.7365422Z     [32m  [32mâœ”[39m[0m[90m not via where, where [skip, limit] param[0m
2025-04-03T23:45:00.7378063Z     [32m  [32mâœ”[39m[0m[90m not via where, where skip and limit params[0m
2025-04-03T23:45:00.7390030Z [0m    elemMatch[0m
2025-04-03T23:45:00.7390502Z [0m      not via where[0m
2025-04-03T23:45:00.7393073Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:00.7408427Z       [32m  [32mâœ”[39m[0m[90m where block notation[0m
2025-04-03T23:45:00.7420253Z [0m      via where[0m
2025-04-03T23:45:00.7422083Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:00.7435704Z       [32m  [32mâœ”[39m[0m[90m where block notation[0m
2025-04-03T23:45:00.7448079Z [0m    $where[0m
2025-04-03T23:45:00.7449942Z     [32m  [32mâœ”[39m[0m[90m function arg[0m
2025-04-03T23:45:00.7462743Z     [32m  [32mâœ”[39m[0m[90m string arg[0m
2025-04-03T23:45:00.7474522Z [0m    limit[0m
2025-04-03T23:45:00.7476218Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:00.7491048Z     [32m  [32mâœ”[39m[0m[90m with string limit (gh-11017)[0m
2025-04-03T23:45:00.7502838Z [0m    skip[0m
2025-04-03T23:45:00.7504351Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:00.7517535Z [0m    sort[0m
2025-04-03T23:45:00.7520942Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:00.7536035Z [0m    or[0m
2025-04-03T23:45:00.7538697Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:00.7551421Z [0m    and[0m
2025-04-03T23:45:00.7553902Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:00.7566581Z [0m    populate[0m
2025-04-03T23:45:00.7569944Z     [32m  [32mâœ”[39m[0m[90m converts to PopulateOptions objects[0m
2025-04-03T23:45:00.7584386Z     [32m  [32mâœ”[39m[0m[90m overwrites duplicate paths[0m
2025-04-03T23:45:00.7598043Z     [32m  [32mâœ”[39m[0m[90m accepts space delimited strings[0m
2025-04-03T23:45:00.7610074Z [0m    casting[0m
2025-04-03T23:45:00.7615249Z     [32m  [32mâœ”[39m[0m[90m to an array of mixed[0m
2025-04-03T23:45:00.7830707Z     [32m  [32mâœ”[39m[0m[90m doesn't wipe out $in (gh-6439)[0m
2025-04-03T23:45:00.7928616Z     [32m  [32mâœ”[39m[0m[90m find $ne should not cast single value to array for schematype of Array[0m
2025-04-03T23:45:00.8052250Z     [32m  [32mâœ”[39m[0m[90m subdocument array with $ne: null should not throw[0m
2025-04-03T23:45:00.8130115Z     [32m  [32mâœ”[39m[0m[90m find should not cast single value to array for schematype of Array[0m
2025-04-03T23:45:00.8255427Z     [32m  [32mâœ”[39m[0m[90m an $elemMatch with $in works (gh-1100)[0m
2025-04-03T23:45:00.8333959Z     [32m  [32mâœ”[39m[0m[90m inequality operators for an array[0m
2025-04-03T23:45:00.8480814Z [0m    distinct[0m
2025-04-03T23:45:00.8482442Z     [32m  [32mâœ”[39m[0m[90m op[0m
2025-04-03T23:45:00.8498578Z     [32m  [32mâœ”[39m[0m[90m using options parameter for distinct[0m
2025-04-03T23:45:00.8511698Z [0m    findOne[0m
2025-04-03T23:45:00.8518410Z     [32m  [32mâœ”[39m[0m[90m sets the op[0m
2025-04-03T23:45:00.8596463Z [0m    deleteOne/deleteMany[0m
2025-04-03T23:45:00.8781106Z     [32m  [32mâœ”[39m[0m[90m handles deleteOne[0m
2025-04-03T23:45:00.8966304Z     [32m  [32mâœ”[39m[0m[90m handles deleteMany[0m
2025-04-03T23:45:00.8986444Z [0m    deleteMany[0m
2025-04-03T23:45:00.9002605Z     [32m  [32mâœ”[39m[0m[90m handles cast errors async[0m
2025-04-03T23:45:00.9194619Z     [32m  [32mâœ”[39m[0m[90m supports a single conditions arg[0m
2025-04-03T23:45:00.9421112Z     [32m  [32mâœ”[39m[0m[90m supports a single callback arg[0m
2025-04-03T23:45:00.9596378Z     [32m  [32mâœ”[39m[0m[90m supports conditions and callback args[0m
2025-04-03T23:45:00.9617257Z [0m    querying/updating with model instance containing embedded docs should work (#454)[0m
2025-04-03T23:45:00.9733675Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:00.9825599Z [0m    optionsForExec[0m
2025-04-03T23:45:00.9829226Z     [32m  [32mâœ”[39m[0m[90m should retain key order[0m
2025-04-03T23:45:00.9844123Z     [32m  [32mâœ”[39m[0m[90m applies schema-level writeConcern option[0m
2025-04-03T23:45:00.9858149Z     [32m  [32mâœ”[39m[0m[90m session() (gh-6663)[0m
2025-04-03T23:45:00.9870882Z [0m    options[0m
2025-04-03T23:45:00.9871394Z [0m      tailable[0m
2025-04-03T23:45:00.9874251Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:00.9888772Z       [32m  [32mâœ”[39m[0m[90m supports passing the `awaitData` option[0m
2025-04-03T23:45:00.9903811Z [0m      comment[0m
2025-04-03T23:45:00.9905636Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:00.9920473Z [0m      hint[0m
2025-04-03T23:45:00.9922775Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:00.9937351Z [0m      batchSize[0m
2025-04-03T23:45:00.9939089Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:00.9953738Z [0m      read[0m
2025-04-03T23:45:00.9954215Z [0m        without tags[0m
2025-04-03T23:45:00.9956150Z         [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:00.9970757Z [0m        with tags[0m
2025-04-03T23:45:00.9972827Z         [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:00.9987871Z [0m        inherits its models schema read option[0m
2025-04-03T23:45:00.9995799Z         [32m  [32mâœ”[39m[0m[90m if not set in query[0m
2025-04-03T23:45:01.0013066Z         [32m  [32mâœ”[39m[0m[90m if set in query[0m
2025-04-03T23:45:01.0042412Z         [32m  [32mâœ”[39m[0m[90m and sends it though the driver[0m
2025-04-03T23:45:01.0122585Z [0m    setOptions[0m
2025-04-03T23:45:01.0126687Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:01.0142555Z     [32m  [32mâœ”[39m[0m[90m populate as array in options (gh-4446)[0m
2025-04-03T23:45:01.0157374Z [0m    bug fixes[0m
2025-04-03T23:45:01.0295908Z     [32m  [32mâœ”[39m[0m[90m excludes _id when select false and inclusive mode (gh-3010)[0m
2025-04-03T23:45:01.0326890Z     [32m  [32mâœ”[39m[0m[90m doesnt reverse key order for update docs (gh-3215)[0m
2025-04-03T23:45:01.0424438Z     [32m  [32mâœ”[39m[0m[90m timestamps with $each (gh-4805)[0m
2025-04-03T23:45:01.0499974Z     [32m  [32mâœ”[39m[0m[90m handles nested $ (gh-3265)[0m
2025-04-03T23:45:01.0581762Z     [32m  [32mâœ”[39m[0m[90m $geoWithin with single nested schemas (gh-4044)[0m
2025-04-03T23:45:01.0871932Z     [32m  [32mâœ”[39m[0m[90m setDefaultsOnInsert with empty update (gh-3825)[0m
2025-04-03T23:45:01.0981627Z     [32m  [32mâœ”[39m[0m[90m custom query methods (gh-3714)[0m
2025-04-03T23:45:01.1082535Z     [32m  [32mâœ”[39m[0m[90m string as input (gh-4378)[0m
2025-04-03T23:45:01.1428452Z     [32m  [32mâœ”[39m[0m[90m handles geoWithin with $center and mongoose object (gh-4419)[0m
2025-04-03T23:45:01.1472655Z     [32m  [32mâœ”[39m[0m[90m $not with objects (gh-4495)[0m
2025-04-03T23:45:01.1768435Z     [32m  [32mâœ”[39m[0m[90m geoIntersects with mongoose doc as coords (gh-4408)[0m
2025-04-03T23:45:01.1800365Z     [32m  [32mâœ”[39m[0m[90m string with $not (gh-4592)[0m
2025-04-03T23:45:01.1965731Z     [32m  [32mâœ”[39m[0m[90m does not cast undefined to null in mongoose (gh-6236)[0m
2025-04-03T23:45:01.2197171Z     [32m  [32mâœ”[39m[0m[90m runs query setters with _id field (gh-5351)[0m
2025-04-03T23:45:01.2233868Z     [32m  [32mâœ”[39m[0m[90m runs setters if query field is an array (gh-6277)[0m
2025-04-03T23:45:01.2302191Z     [32m  [32mâœ”[39m[0m[90m $exists under $not (gh-4933)[0m
2025-04-03T23:45:01.2497408Z     [32m  [32mâœ”[39m[0m[90m geojson underneath array (gh-5467)[0m
2025-04-03T23:45:01.2617872Z     [32m  [32mâœ”[39m[0m[90m slice respects schema projections (gh-5450)[0m
2025-04-03T23:45:01.2716357Z     [32m  [32mâœ”[39m[0m[90m overwrites when passing an object when path already set to primitive (gh-6097)[0m
2025-04-03T23:45:01.2798109Z     [32m  [32mâœ”[39m[0m[90m $exists for arrays and embedded docs (gh-4937)[0m
2025-04-03T23:45:01.2903846Z     [32m  [32mâœ”[39m[0m[90m report error in pre hook (gh-5520)[0m
2025-04-03T23:45:01.2979856Z     [32m  [32mâœ”[39m[0m[90m cast error with custom error (gh-5520)[0m
2025-04-03T23:45:01.3159449Z     [32m  [32mâœ”[39m[0m[90m change deleteOne to updateOne for soft deletes using $isDeleted (gh-4428)[0m
2025-04-03T23:45:01.3351414Z     [32m  [32mâœ”[39m[0m[90m child schema with select: false in multiple paths (gh-5603)[0m
2025-04-03T23:45:01.3849988Z     [32m  [32mâœ”[39m[0m[90m errors in post init (gh-5592)[0m[33m (40ms)[0m
2025-04-03T23:45:01.3884807Z     [32m  [32mâœ”[39m[0m[90m with non-object args (gh-1698)[0m
2025-04-03T23:45:01.7551444Z     [32m  [32mâœ”[39m[0m[90m queries with BSON overflow (gh-5812)[0m[31m (359ms)[0m
2025-04-03T23:45:01.7719538Z     [32m  [32mâœ”[39m[0m[90m explain() (gh-6625)[0m
2025-04-03T23:45:01.7920404Z     [32m  [32mâœ”[39m[0m[90m cast embedded discriminators with dot notation (gh-6027)[0m
2025-04-03T23:45:01.8133623Z     [32m  [32mâœ”[39m[0m[90m cast embedded discriminators with embedded obj (gh-6027)[0m
2025-04-03T23:45:01.8339984Z     [32m  [32mâœ”[39m[0m[90m cast embedded discriminators with $elemMatch discriminator key (gh-7449)[0m
2025-04-03T23:45:01.8626553Z     [32m  [32mâœ”[39m[0m[90m handles geoWithin with mongoose docs (gh-4392)[0m
2025-04-03T23:45:01.8654874Z [0m      collations[0m
2025-04-03T23:45:01.8919524Z       [32m  [32mâœ”[39m[0m[90m collation support (gh-4839)[0m
2025-04-03T23:45:01.9114083Z       [32m  [32mâœ”[39m[0m[90m set on schema (gh-5295)[0m
2025-04-03T23:45:01.9139673Z [0m      gh-1950[0m
2025-04-03T23:45:01.9239942Z       [32m  [32mâœ”[39m[0m[90m ignores sort when passed to countDocuments[0m
2025-04-03T23:45:01.9328429Z       [36m  - ignores count when passed to sort[0m
2025-04-03T23:45:01.9329254Z [0m    handles falsy and object projections with defaults (gh-3256)[0m
2025-04-03T23:45:01.9441326Z     [32m  [32mâœ”[39m[0m[90m falsy projection[0m
2025-04-03T23:45:01.9520864Z     [32m  [32mâœ”[39m[0m[90m slice projection[0m
2025-04-03T23:45:01.9598252Z     [32m  [32mâœ”[39m[0m[90m empty projection[0m
2025-04-03T23:45:01.9616434Z [0m    count[0m
2025-04-03T23:45:01.9949518Z     [32m  [32mâœ”[39m[0m[90m calls utils.toObject on conditions (gh-6323)[0m
2025-04-03T23:45:01.9976386Z [0m    setQuery[0m
2025-04-03T23:45:01.9980043Z     [32m  [32mâœ”[39m[0m[90m replaces existing query with new value (gh-6854)[0m
2025-04-03T23:45:01.9993759Z [0m    orFail (gh-6841)[0m
2025-04-03T23:45:02.0126586Z     [32m  [32mâœ”[39m[0m[90m find()[0m
2025-04-03T23:45:02.0228541Z     [32m  [32mâœ”[39m[0m[90m findOne()[0m
2025-04-03T23:45:02.0314754Z     [32m  [32mâœ”[39m[0m[90m deleteMany()[0m
2025-04-03T23:45:02.0398241Z     [32m  [32mâœ”[39m[0m[90m deleteOne()[0m
2025-04-03T23:45:02.0483333Z     [32m  [32mâœ”[39m[0m[90m replaceOne()[0m
2025-04-03T23:45:02.0591361Z     [32m  [32mâœ”[39m[0m[90m updateMany()[0m
2025-04-03T23:45:02.0681846Z     [32m  [32mâœ”[39m[0m[90m updateOne()[0m
2025-04-03T23:45:02.0803802Z     [32m  [32mâœ”[39m[0m[90m findOneAndUpdate()[0m
2025-04-03T23:45:02.0902601Z     [32m  [32mâœ”[39m[0m[90m findOneAndDelete()[0m
2025-04-03T23:45:02.1121720Z     [32m  [32mâœ”[39m[0m[90m executes before post hooks (gh-7280)[0m
2025-04-03T23:45:02.1217380Z     [32m  [32mâœ”[39m[0m[90m throws DocumentNotFoundError by default execute (gh-7409)[0m
2025-04-03T23:45:02.1304354Z     [32m  [32mâœ”[39m[0m[90m does not fire on CastError (gh-13165)[0m
2025-04-03T23:45:02.1322047Z [0m    getPopulatedPaths[0m
2025-04-03T23:45:02.1336007Z     [32m  [32mâœ”[39m[0m[90m doesn't break on a query without population (gh-6677)[0m
2025-04-03T23:45:02.1591334Z     [32m  [32mâœ”[39m[0m[90m returns an array of populated paths as strings (gh-6677)[0m
2025-04-03T23:45:02.1633125Z     [32m  [32mâœ”[39m[0m[90m returns deep populated paths (gh-7757)[0m
2025-04-03T23:45:02.1800305Z [0m    setUpdate[0m
2025-04-03T23:45:02.1803499Z     [32m  [32mâœ”[39m[0m[90m replaces existing update doc with new value[0m
2025-04-03T23:45:02.1816915Z [0m    get() (gh-7312)[0m
2025-04-03T23:45:02.1819619Z     [32m  [32mâœ”[39m[0m[90m works with using $set[0m
2025-04-03T23:45:02.1856240Z     [32m  [32mâœ”[39m[0m[90m works with $set syntactic sugar[0m
2025-04-03T23:45:02.1870501Z     [32m  [32mâœ”[39m[0m[90m works with mixed[0m
2025-04-03T23:45:02.1989836Z     [32m  [32mâœ”[39m[0m[90m $set overwrites existing[0m
2025-04-03T23:45:02.2097931Z [0m    increments timestamps for arrays of nested subdocs (gh-4412)[0m
2025-04-03T23:45:02.2334425Z     [32m  [32mâœ”[39m[0m[90m $set nested property with numeric position[0m
2025-04-03T23:45:02.2554478Z     [32m  [32mâœ”[39m[0m[90m $set numeric element[0m
2025-04-03T23:45:02.2776953Z     [32m  [32mâœ”[39m[0m[90m $set with positional operator[0m
2025-04-03T23:45:02.2931050Z     [32m  [32mâœ”[39m[0m[90m $set with positional operator and array (gh-7106)[0m
2025-04-03T23:45:02.3070358Z [0m    merge()[0m
2025-04-03T23:45:02.3239777Z     [32m  [32mâœ”[39m[0m[90m copies populate() (gh-1790)[0m
2025-04-03T23:45:02.3280219Z [0m    Query#validate() (gh-7984)[0m
2025-04-03T23:45:02.3393099Z     [32m  [32mâœ”[39m[0m[90m middleware[0m
2025-04-03T23:45:02.3435733Z     [32m  [32mâœ”[39m[0m[90m pre("validate") errors (gh-7187)[0m
2025-04-03T23:45:02.3499550Z [0m    stack traces[0m
2025-04-03T23:45:02.3513428Z     [32m  [32mâœ”[39m[0m[90m includes calling file for filter cast errors (gh-8691)[0m
2025-04-03T23:45:02.3577975Z [0m    clone[0m
2025-04-03T23:45:02.3751722Z     [32m  [32mâœ”[39m[0m[90m with findOne[0m
2025-04-03T23:45:02.3958606Z     [32m  [32mâœ”[39m[0m[90m with deleteOne[0m
2025-04-03T23:45:02.4192223Z     [32m  [32mâœ”[39m[0m[90m with updateOne[0m
2025-04-03T23:45:02.4383707Z     [32m  [32mâœ”[39m[0m[90m with distinct[0m
2025-04-03T23:45:02.4581485Z     [32m  [32mâœ”[39m[0m[90m with hooks (gh-12365)[0m
2025-04-03T23:45:02.4610977Z [0m    set()[0m
2025-04-03T23:45:02.4617850Z     [32m  [32mâœ”[39m[0m[90m overwrites top-level keys if setting to undefined (gh-12155)[0m
2025-04-03T23:45:02.4681547Z [0m    schemaLevelProjections (gh-11474)[0m
2025-04-03T23:45:02.4771737Z     [32m  [32mâœ”[39m[0m[90m disables schema-level select: false[0m
2025-04-03T23:45:02.4947031Z     [32m  [32mâœ”[39m[0m[90m disables schema-level select: true[0m
2025-04-03T23:45:02.5115173Z     [32m  [32mâœ”[39m[0m[90m works via setOptions()[0m
2025-04-03T23:45:02.5291539Z     [32m  [32mâœ”[39m[0m[90m disabled via truthy value[0m
2025-04-03T23:45:02.5405246Z 
2025-04-03T23:45:02.5406174Z [0m  Query:[0m
2025-04-03T23:45:02.5406647Z [0m    toConstructor[0m
2025-04-03T23:45:02.5434132Z     [32m  [32mâœ”[39m[0m[90m creates a query[0m
2025-04-03T23:45:02.5448235Z     [32m  [32mâœ”[39m[0m[90m copies all the right values[0m
2025-04-03T23:45:02.5554921Z     [32m  [32mâœ”[39m[0m[90m gets expected results[0m
2025-04-03T23:45:02.5593248Z     [32m  [32mâœ”[39m[0m[90m can be re-used multiple times[0m
2025-04-03T23:45:02.5597273Z     [32m  [32mâœ”[39m[0m[90m options get merged properly[0m
2025-04-03T23:45:02.5600198Z     [32m  [32mâœ”[39m[0m[90m options get cloned (gh-3176)[0m
2025-04-03T23:45:02.5604057Z     [32m  [32mâœ”[39m[0m[90m creates subclasses of mquery[0m
2025-04-03T23:45:02.5616639Z     [32m  [32mâœ”[39m[0m[90m with findOneAndUpdate (gh-4318)[0m
2025-04-03T23:45:02.5689092Z     [32m  [32mâœ”[39m[0m[90m gets middleware from model (gh-6455)[0m
2025-04-03T23:45:02.5694558Z     [32m  [32mâœ”[39m[0m[90m works with entries-style sort() syntax (gh-8159)[0m
2025-04-03T23:45:02.5713470Z 
2025-04-03T23:45:02.5713809Z [0m  queryhelpers[0m
2025-04-03T23:45:02.5714443Z [0m    applyPaths[0m
2025-04-03T23:45:02.5718868Z     [32m  [32mâœ”[39m[0m[90m adds select: true paths unless excluded using minus path (gh-11694)[0m
2025-04-03T23:45:02.5721578Z     [32m  [32mâœ”[39m[0m[90m supports nested minus path (gh-11694)[0m
2025-04-03T23:45:02.5722065Z 
2025-04-03T23:45:02.5722380Z [0m  schema alias option[0m
2025-04-03T23:45:02.5771089Z   [32m  [32mâœ”[39m[0m[90m works with all basic schema types[0m
2025-04-03T23:45:02.5901146Z   [32m  [32mâœ”[39m[0m[90m works with nested schema types[0m
2025-04-03T23:45:02.6000352Z   [32m  [32mâœ”[39m[0m[90m throws when alias option is invalid[0m
2025-04-03T23:45:02.6016740Z   [32m  [32mâœ”[39m[0m[90m with add() (gh-6593)[0m
2025-04-03T23:45:02.6042835Z   [32m  [32mâœ”[39m[0m[90m nested aliases (gh-6671)[0m
2025-04-03T23:45:02.6063065Z   [32m  [32mâœ”[39m[0m[90m array of aliases (gh-12368)[0m
2025-04-03T23:45:02.6137209Z   [32m  [32mâœ”[39m[0m[90m alias() method (gh-12368)[0m
2025-04-03T23:45:02.6153308Z   [32m  [32mâœ”[39m[0m[90m supports passing the alias name for an index (gh-13276)[0m
2025-04-03T23:45:02.6241931Z   [32m  [32mâœ”[39m[0m[90m should disable the id virtual entirely if there's a field with alias `id` gh-13650[0m
2025-04-03T23:45:02.6356330Z 
2025-04-03T23:45:02.6356842Z [0m  schematype[0m
2025-04-03T23:45:02.6357238Z [0m    boolean[0m
2025-04-03T23:45:02.6366803Z     [32m  [32mâœ”[39m[0m[90m null default is permitted (gh-523)[0m
2025-04-03T23:45:02.6367254Z 
2025-04-03T23:45:02.6367418Z [0m  SchemaDate[0m
2025-04-03T23:45:02.6372423Z   [32m  [32mâœ”[39m[0m[90m accepts a Date[0m
2025-04-03T23:45:02.6374081Z   [32m  [32mâœ”[39m[0m[90m casts a date string to a string[0m
2025-04-03T23:45:02.6376054Z   [32m  [32mâœ”[39m[0m[90m interprets a number as a unix timestamp[0m
2025-04-03T23:45:02.6377352Z   [32m  [32mâœ”[39m[0m[90m attempts to interpret a string as a Date, not a timestamo (gh-5395)[0m
2025-04-03T23:45:02.6379542Z   [32m  [32mâœ”[39m[0m[90m casts any object with a `.valueOf` function to a date[0m
2025-04-03T23:45:02.6381305Z   [32m  [32mâœ”[39m[0m[90m casts string representation of unix timestamps (gh-6443)[0m
2025-04-03T23:45:02.6381745Z 
2025-04-03T23:45:02.6381948Z [0m  schema.documentarray[0m
2025-04-03T23:45:02.6397138Z   [32m  [32mâœ”[39m[0m[90m defaults should be preserved[0m
2025-04-03T23:45:02.6409652Z   [32m  [32mâœ”[39m[0m[90m only sets if document has same schema (gh-3701)[0m
2025-04-03T23:45:02.6414178Z   [32m  [32mâœ”[39m[0m[90m sets $implicitlyCreated if created by interpretAsType (gh-4271)[0m
2025-04-03T23:45:02.6417167Z   [32m  [32mâœ”[39m[0m[90m propagates strictQuery to implicitly created schemas (gh-12796)[0m
2025-04-03T23:45:02.6427041Z   [32m  [32mâœ”[39m[0m[90m supports set with array of document arrays (gh-7799)[0m
2025-04-03T23:45:02.6437980Z   [32m  [32mâœ”[39m[0m[90m supports `set()` (gh-8883)[0m
2025-04-03T23:45:02.6441982Z   [32m  [32mâœ”[39m[0m[90m handles default function that returns null (gh-11058)[0m
2025-04-03T23:45:02.6451543Z   [32m  [32mâœ”[39m[0m[90m doValidate() validates entire subdocument (gh-11770)[0m
2025-04-03T23:45:02.6451975Z 
2025-04-03T23:45:02.6452193Z [0m  schematype mixed[0m
2025-04-03T23:45:02.6452664Z [0m    empty object defaults (gh-1380)[0m
2025-04-03T23:45:02.6458531Z     [32m  [32mâœ”[39m[0m[90m are interpreted as fns that return new empty objects[0m
2025-04-03T23:45:02.6463485Z     [32m  [32mâœ”[39m[0m[90m can be forced to share the object between documents[0m
2025-04-03T23:45:02.6464078Z 
2025-04-03T23:45:02.6464339Z [0m  SchemaNumber[0m
2025-04-03T23:45:02.6468432Z   [32m  [32mâœ”[39m[0m[90m allows 0 with required: true and ref set (gh-11912)[0m
2025-04-03T23:45:02.6473171Z   [32m  [32mâœ”[39m[0m[90m allows calling `min()` with no message arg (gh-15236)[0m
2025-04-03T23:45:02.6474014Z 
2025-04-03T23:45:02.6474270Z [0m  schema.onthefly[0m
2025-04-03T23:45:02.6499161Z   [32m  [32mâœ”[39m[0m[90m setting should cache the schema type and cast values appropriately[0m
2025-04-03T23:45:02.6585229Z   [32m  [32mâœ”[39m[0m[90m should be local to the particular document[0m
2025-04-03T23:45:02.6737710Z   [32m  [32mâœ”[39m[0m[90m querying a document that had an on the fly schema should work[0m
2025-04-03T23:45:02.6834830Z   [32m  [32mâœ”[39m[0m[90m on the fly Embedded Array schemas should cast properly[0m
2025-04-03T23:45:02.6995279Z   [32m  [32mâœ”[39m[0m[90m on the fly Embedded Array schemas should get from a fresh queried document properly[0m
2025-04-03T23:45:02.7084941Z   [32m  [32mâœ”[39m[0m[90m casts on get() (gh-2360)[0m
2025-04-03T23:45:02.7168913Z 
2025-04-03T23:45:02.7170026Z [0m  schema select option[0m
2025-04-03T23:45:02.7359530Z   [32m  [32mâœ”[39m[0m[90m excluding paths through schematype[0m
2025-04-03T23:45:02.7540496Z   [32m  [32mâœ”[39m[0m[90m including paths through schematype[0m
2025-04-03T23:45:02.7590776Z   [32m  [32mâœ”[39m[0m[90m should not project in discriminator key if projected in implicitly with .$ (gh-9361)[0m
2025-04-03T23:45:02.7773826Z   [32m  [32mâœ”[39m[0m[90m conflicting schematype path selection should not error[0m
2025-04-03T23:45:02.7894203Z   [32m  [32mâœ”[39m[0m[90m selecting _id works with excluded schematype path[0m
2025-04-03T23:45:02.7980198Z   [32m  [32mâœ”[39m[0m[90m selecting _id works with excluded schematype path on sub doc[0m
2025-04-03T23:45:02.8173602Z   [32m  [32mâœ”[39m[0m[90m inclusive/exclusive combos should work[0m
2025-04-03T23:45:02.8364030Z   [32m  [32mâœ”[39m[0m[90m when select is false in the schema definition, all inclusive/exclusive combos should work[0m
2025-04-03T23:45:02.8561189Z   [32m  [32mâœ”[39m[0m[90m when select is set to true in the schema definition, all inclusive/exclusive combos should work[0m
2025-04-03T23:45:02.8696998Z   [32m  [32mâœ”[39m[0m[90m does not set defaults for nested objects (gh-4707)[0m
2025-04-03T23:45:02.8923180Z   [32m  [32mâœ”[39m[0m[90m does not create nested objects if not included (gh-4669)[0m
2025-04-03T23:45:02.9043945Z   [32m  [32mâœ”[39m[0m[90m initializes nested defaults with selected objects (gh-2629)[0m
2025-04-03T23:45:02.9268182Z   [32m  [32mâœ”[39m[0m[90m should allow deselecting a field on a query even if the definition has select set to true (gh-11694)[0m
2025-04-03T23:45:02.9290154Z [0m    overriding schematype select options[0m
2025-04-03T23:45:02.9302153Z [0m      works[0m
2025-04-03T23:45:02.9305743Z [0m        for inclusions[0m
2025-04-03T23:45:02.9464162Z         [32m  [32mâœ”[39m[0m[90m with find[0m
2025-04-03T23:45:02.9563965Z         [32m  [32mâœ”[39m[0m[90m for findById[0m
2025-04-03T23:45:02.9651949Z         [32m  [32mâœ”[39m[0m[90m with findOneAndUpdate[0m
2025-04-03T23:45:02.9759438Z         [32m  [32mâœ”[39m[0m[90m for findByIdAndUpdate[0m
2025-04-03T23:45:02.9778175Z [0m        for exclusions[0m
2025-04-03T23:45:02.9846531Z         [32m  [32mâœ”[39m[0m[90m with find[0m
2025-04-03T23:45:02.9935778Z         [32m  [32mâœ”[39m[0m[90m with findById[0m
2025-04-03T23:45:03.0025941Z         [32m  [32mâœ”[39m[0m[90m with findOneAndUpdate[0m
2025-04-03T23:45:03.0108036Z         [32m  [32mâœ”[39m[0m[90m with findOneAndDelete[0m
2025-04-03T23:45:03.0126700Z [0m    exclusion in root schema should override child schema[0m
2025-04-03T23:45:03.0136761Z     [32m  [32mâœ”[39m[0m[90m works (gh-1333)[0m
2025-04-03T23:45:03.0250189Z     [32m  [32mâœ”[39m[0m[90m with nested (gh-7945)[0m
2025-04-03T23:45:03.0340769Z [0m    forcing inclusion of a deselected schema path[0m
2025-04-03T23:45:03.0466080Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:03.0584987Z     [32m  [32mâœ”[39m[0m[90m works if only one plus path and only one deselected field[0m
2025-04-03T23:45:03.0797549Z     [32m  [32mâœ”[39m[0m[90m works with query.slice (gh-1370)[0m
2025-04-03T23:45:03.0941261Z     [32m  [32mâœ”[39m[0m[90m ignores if path does not have select in schema (gh-6785)[0m
2025-04-03T23:45:03.1067242Z     [32m  [32mâœ”[39m[0m[90m omits if not in schema (gh-7017)[0m
2025-04-03T23:45:03.1185765Z 
2025-04-03T23:45:03.1186313Z [0m  SchemaString[0m
2025-04-03T23:45:03.1194956Z   [32m  [32mâœ”[39m[0m[90m works when RegExp has global flag set (gh-9287)[0m
2025-04-03T23:45:03.1195482Z 
2025-04-03T23:45:03.1196021Z [0m  SubdocumentPath[0m
2025-04-03T23:45:03.1202578Z   [32m  [32mâœ”[39m[0m[90m copies over `requiredValidator` (gh-8819)[0m
2025-04-03T23:45:03.1210873Z   [32m  [32mâœ”[39m[0m[90m supports `set()` (gh-8883)[0m
2025-04-03T23:45:03.1219268Z   [32m  [32mâœ”[39m[0m[90m supports setting _id globally (gh-11541) (gh-8883)[0m
2025-04-03T23:45:03.1220109Z [0m    discriminator()[0m
2025-04-03T23:45:03.1220769Z [0m      recursive nested discriminators[0m
2025-04-03T23:45:03.1226902Z       [32m  [32mâœ”[39m[0m[90m allow multiple levels of data in the schema[0m
2025-04-03T23:45:03.1238930Z       [32m  [32mâœ”[39m[0m[90m allow multiple levels of data in a document[0m
2025-04-03T23:45:03.1245489Z       [32m  [32mâœ”[39m[0m[90m allow multiple levels of data in the schema when the base schema has _id without auto[0m
2025-04-03T23:45:03.1258022Z       [32m  [32mâœ”[39m[0m[90m allow multiple levels of data in a document when the base schema has _id without auto[0m
2025-04-03T23:45:03.1258700Z 
2025-04-03T23:45:03.1261839Z [0m  schema[0m
2025-04-03T23:45:03.1279826Z   [32m  [32mâœ”[39m[0m[90m can be created without the "new" keyword[0m
2025-04-03T23:45:03.1304060Z   [32m  [32mâœ”[39m[0m[90m does expose a property for duck-typing instanceof[0m
2025-04-03T23:45:03.1329290Z   [32m  [32mâœ”[39m[0m[90m supports different schematypes[0m
2025-04-03T23:45:03.1347795Z   [32m  [32mâœ”[39m[0m[90m supports dot notation for path accessors[0m
2025-04-03T23:45:03.1363556Z   [32m  [32mâœ”[39m[0m[90m allows paths nested > 2 levels[0m
2025-04-03T23:45:03.1383666Z   [32m  [32mâœ”[39m[0m[90m default definition[0m
2025-04-03T23:45:03.1400627Z   [32m  [32mâœ”[39m[0m[90m Mixed defaults can be empty arrays[0m
2025-04-03T23:45:03.1415789Z   [32m  [32mâœ”[39m[0m[90m methods declaration[0m
2025-04-03T23:45:03.1430879Z   [32m  [32mâœ”[39m[0m[90m static declaration[0m
2025-04-03T23:45:03.1447311Z   [32m  [32mâœ”[39m[0m[90m debugging msgs[0m
2025-04-03T23:45:03.1472499Z   [32m  [32mâœ”[39m[0m[90m required() with doc arrays (gh-3199)[0m
2025-04-03T23:45:03.1494517Z   [32m  [32mâœ”[39m[0m[90m custom typeKey in doc arrays (gh-3560)[0m
2025-04-03T23:45:03.1517352Z   [32m  [32mâœ”[39m[0m[90m required for single nested schemas (gh-3562)[0m
2025-04-03T23:45:03.1545821Z   [32m  [32mâœ”[39m[0m[90m booleans cause cast error for date (gh-3935)[0m
2025-04-03T23:45:03.1578948Z   [32m  [32mâœ”[39m[0m[90m trim: false works with strings (gh-4042)[0m
2025-04-03T23:45:03.1597042Z   [32m  [32mâœ”[39m[0m[90m arrays with typeKey (gh-4548)[0m
2025-04-03T23:45:03.1612742Z   [32m  [32mâœ”[39m[0m[90m arrays of mixed arrays (gh-5416)[0m
2025-04-03T23:45:03.1632703Z   [32m  [32mâœ”[39m[0m[90m throws a sane error if passing a schema to `ref` (gh-6915)[0m
2025-04-03T23:45:03.1648968Z   [32m  [32mâœ”[39m[0m[90m allows using ObjectId type as schema path (gh-7049)[0m
2025-04-03T23:45:03.1664410Z   [32m  [32mâœ”[39m[0m[90m throws error if invalid type (gh-7303)[0m
2025-04-03T23:45:03.1680506Z   [32m  [32mâœ”[39m[0m[90m supports _id: false in paths definition (gh-7480) (gh-7524)[0m
2025-04-03T23:45:03.1698178Z   [32m  [32mâœ”[39m[0m[90m schema.pathType() with positional path that isnt in schema (gh-7935)[0m
2025-04-03T23:45:03.1713769Z   [32m  [32mâœ”[39m[0m[90m supports pre(Array, Function) and post(Array, Function) (gh-7803)[0m
2025-04-03T23:45:03.1729282Z   [32m  [32mâœ”[39m[0m[90m supports array with { type: ObjectID } (gh-8034)[0m
2025-04-03T23:45:03.1746364Z   [32m  [32mâœ”[39m[0m[90m supports getting path under array (gh-8057)[0m
2025-04-03T23:45:03.1767617Z   [32m  [32mâœ”[39m[0m[90m required paths with clone() (gh-8111)[0m
2025-04-03T23:45:03.1857212Z   [32m  [32mâœ”[39m[0m[90m getters/setters with clone() (gh-8124)[0m
2025-04-03T23:45:03.1930579Z   [32m  [32mâœ”[39m[0m[90m required with nullish value (gh-8219)[0m
2025-04-03T23:45:03.1946749Z   [32m  [32mâœ”[39m[0m[90m SchemaStringOptions line up with schema/string (gh-8256)[0m
2025-04-03T23:45:03.1962413Z   [32m  [32mâœ”[39m[0m[90m supports passing schema options to `Schema#path()` (gh-8292)[0m
2025-04-03T23:45:03.1989158Z   [32m  [32mâœ”[39m[0m[90m supports defining `_id: false` on single nested paths (gh-8137)[0m
2025-04-03T23:45:03.2010558Z   [32m  [32mâœ”[39m[0m[90m supports defining `_id: false` on document arrays (gh-8450)[0m
2025-04-03T23:45:03.2028051Z   [32m  [32mâœ”[39m[0m[90m copies `.add()`-ed paths when calling `.add()` with a schema argument (gh-8429)[0m
2025-04-03T23:45:03.2043744Z   [32m  [32mâœ”[39m[0m[90m copies indexes when calling add() with schema instance (gh-12654)[0m
2025-04-03T23:45:03.2060112Z   [32m  [32mâœ”[39m[0m[90m disables `id` virtual if no `_id` path (gh-3936)[0m
2025-04-03T23:45:03.2075721Z   [32m  [32mâœ”[39m[0m[90m treats dotted paths with no parent as a nested path (gh-9020)[0m
2025-04-03T23:45:03.2091291Z   [32m  [32mâœ”[39m[0m[90m allows using `mongoose.Schema.Types.Array` as type (gh-9194)[0m
2025-04-03T23:45:03.2107617Z   [32m  [32mâœ”[39m[0m[90m handles using a schematype when defining a path (gh-9370)[0m
2025-04-03T23:45:03.2123880Z   [32m  [32mâœ”[39m[0m[90m applies correct schema to nested primitive arrays (gh-9429)[0m
2025-04-03T23:45:03.2141365Z   [32m  [32mâœ”[39m[0m[90m supports `of` for array type definition (gh-9564)[0m
2025-04-03T23:45:03.2162165Z   [32m  [32mâœ”[39m[0m[90m should use the top-most class's getter/setter gh-8892[0m
2025-04-03T23:45:03.2295996Z   [32m  [32mâœ”[39m[0m[90m handles loadClass with inheritted getters (gh-9975)[0m
2025-04-03T23:45:03.2314412Z   [32m  [32mâœ”[39m[0m[90m loadClass with static getter (gh-10436)[0m
2025-04-03T23:45:03.2333497Z   [32m  [32mâœ”[39m[0m[90m supports setting `ref` on array SchemaType (gh-10029)[0m
2025-04-03T23:45:03.2351919Z   [32m  [32mâœ”[39m[0m[90m path() gets single nested paths within document arrays (gh-10164)[0m
2025-04-03T23:45:03.2371302Z   [32m  [32mâœ”[39m[0m[90m supports creating nested paths underneath document arrays (gh-10193)[0m
2025-04-03T23:45:03.2387627Z   [32m  [32mâœ”[39m[0m[90m propagates map `ref` down to individual map elements (gh-10329)[0m
2025-04-03T23:45:03.2403553Z   [32m  [32mâœ”[39m[0m[90m handles maps of maps (gh-10644)[0m
2025-04-03T23:45:03.2421817Z   [32m  [32mâœ”[39m[0m[90m handles `type: { subpath: String }` in document array definitions (gh-10750)[0m
2025-04-03T23:45:03.2438773Z   [32m  [32mâœ”[39m[0m[90m handles `Date` with `type` (gh-10807)[0m
2025-04-03T23:45:03.2583098Z   [32m  [32mâœ”[39m[0m[90m setting path with `Mixed` type to an array after number (gh-11417)[0m
2025-04-03T23:45:03.3004117Z   [32m  [32mâœ”[39m[0m[90m sets an _applyDiscriminators property on the schema and add discriminator to appropriate model (gh-7971)[0m[33m (39ms)[0m
2025-04-03T23:45:03.3163568Z   [32m  [32mâœ”[39m[0m[90m supports numbers with Schema.discriminator() (gh-13788)[0m
2025-04-03T23:45:03.3351316Z   [32m  [32mâœ”[39m[0m[90m can use on as a schema property (gh-11580)[0m
2025-04-03T23:45:03.3453368Z   [32m  [32mâœ”[39m[0m[90m disallows using schemas with schema-level projections with map subdocuments (gh-11698)[0m
2025-04-03T23:45:03.3584167Z   [32m  [32mâœ”[39m[0m[90m allows a lean option on schemas so that all documents are lean when running a query (gh-10090)[0m
2025-04-03T23:45:03.3612454Z   [32m  [32mâœ”[39m[0m[90m disallows setting special properties with `add()` or constructor (gh-12085)[0m
2025-04-03T23:45:03.3638206Z   [32m  [32mâœ”[39m[0m[90m enable defining virtual paths by using schema constructor (gh-11908)[0m
2025-04-03T23:45:03.3654331Z   [32m  [32mâœ”[39m[0m[90m allows defining ObjectIds and Decimal128s using Types.* (gh-12205)[0m
2025-04-03T23:45:03.3672288Z   [32m  [32mâœ”[39m[0m[90m _getSchema finds path underneath nested subdocument with map of mixed (gh-12530)[0m
2025-04-03T23:45:03.3706150Z   [32m  [32mâœ”[39m[0m[90m should not allow to create a path with primitive values (gh-7558)[0m
2025-04-03T23:45:03.3725346Z   [32m  [32mâœ”[39m[0m[90m should allow deleting a virtual path off the schema gh-8397[0m
2025-04-03T23:45:03.3813196Z   [32m  [32mâœ”[39m[0m[90m should allow deleting multiple virtuals gh-8397[0m
2025-04-03T23:45:03.3885693Z   [32m  [32mâœ”[39m[0m[90m should throw an error if attempting to delete a virtual path that does not exist gh-8397[0m
2025-04-03T23:45:03.3902568Z   [32m  [32mâœ”[39m[0m[90m should throw an error if using schema with "timeseries" option as a nested schema[0m
2025-04-03T23:45:03.4024592Z   [32m  [32mâœ”[39m[0m[90m should allow timestamps on a sub document when having _id field in the main document gh-13343[0m
2025-04-03T23:45:03.4298723Z   [32m  [32mâœ”[39m[0m[90m should not save objectids as strings when using the `flattenObjectIds` option (gh-13648)[0m
2025-04-03T23:45:03.4329493Z   [32m  [32mâœ”[39m[0m[90m deduplicates idGetter (gh-14457)[0m
2025-04-03T23:45:03.4359770Z   [32m  [32mâœ”[39m[0m[90m handles recursive definitions in discriminators (gh-13978)[0m
2025-04-03T23:45:03.4571304Z   [32m  [32mâœ”[39m[0m[90m handles recursive definitions of arrays in discriminators (gh-14055)[0m
2025-04-03T23:45:03.4751756Z   [32m  [32mâœ”[39m[0m[90m should have the correct schema definition with array schemas (gh-14416)[0m
2025-04-03T23:45:03.4918646Z   [32m  [32mâœ”[39m[0m[90m handles discriminator options with Schema.prototype.discriminator (gh-14448)[0m
2025-04-03T23:45:03.4969086Z   [32m  [32mâœ”[39m[0m[90m supports schema-level readConcern (gh-14511)[0m
2025-04-03T23:45:03.5050288Z   [32m  [32mâœ”[39m[0m[90m supports casting object to subdocument (gh-14748) (gh-9076)[0m
2025-04-03T23:45:03.5073088Z   [32m  [32mâœ”[39m[0m[90m throws "already has an index" error if duplicate index definition (gh-15056)[0m
2025-04-03T23:45:03.6618082Z   [32m  [32mâœ”[39m[0m[90m path() clears existing child schemas (gh-15253)[0m[31m (153ms)[0m
2025-04-03T23:45:03.6653698Z [0m    nested fields with same name[0m
2025-04-03T23:45:03.6781639Z     [32m  [32mâœ”[39m[0m[90m don't disappear[0m
2025-04-03T23:45:03.6807365Z [0m    casting[0m
2025-04-03T23:45:03.6810234Z     [32m  [32mâœ”[39m[0m[90m number[0m
2025-04-03T23:45:03.6826997Z     [32m  [32mâœ”[39m[0m[90m date[0m
2025-04-03T23:45:03.6843117Z     [32m  [32mâœ”[39m[0m[90m objectid[0m
2025-04-03T23:45:03.6863383Z     [32m  [32mâœ”[39m[0m[90m array[0m
2025-04-03T23:45:03.6884764Z     [32m  [32mâœ”[39m[0m[90m array of arrays[0m
2025-04-03T23:45:03.6902642Z     [32m  [32mâœ”[39m[0m[90m boolean[0m
2025-04-03T23:45:03.6917207Z [0m      string[0m
2025-04-03T23:45:03.6920581Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:03.6935334Z [0m    setters[0m
2025-04-03T23:45:03.6938486Z     [32m  [32mâœ”[39m[0m[90m work[0m
2025-04-03T23:45:03.6955748Z     [32m  [32mâœ”[39m[0m[90m order[0m
2025-04-03T23:45:03.6980248Z     [32m  [32mâœ”[39m[0m[90m scope[0m
2025-04-03T23:45:03.6994436Z     [32m  [32mâœ”[39m[0m[90m casting[0m
2025-04-03T23:45:03.7009933Z     [32m  [32mâœ”[39m[0m[90m applying when none have been defined[0m
2025-04-03T23:45:03.7024313Z     [32m  [32mâœ”[39m[0m[90m assignment of non-functions throw[0m
2025-04-03T23:45:03.7036964Z [0m      array[0m
2025-04-03T23:45:03.7042030Z       [32m  [32mâœ”[39m[0m[90m object setters will be applied for each object in array[0m
2025-04-03T23:45:03.7055718Z [0m      string[0m
2025-04-03T23:45:03.7059416Z       [32m  [32mâœ”[39m[0m[90m lowercase[0m
2025-04-03T23:45:03.7073742Z       [32m  [32mâœ”[39m[0m[90m uppercase[0m
2025-04-03T23:45:03.7088343Z       [32m  [32mâœ”[39m[0m[90m trim[0m
2025-04-03T23:45:03.7101648Z [0m    getters[0m
2025-04-03T23:45:03.7104463Z     [32m  [32mâœ”[39m[0m[90m work[0m
2025-04-03T23:45:03.7120195Z     [32m  [32mâœ”[39m[0m[90m order[0m
2025-04-03T23:45:03.7134277Z     [32m  [32mâœ”[39m[0m[90m scope[0m
2025-04-03T23:45:03.7148299Z     [32m  [32mâœ”[39m[0m[90m casting[0m
2025-04-03T23:45:03.7161879Z     [32m  [32mâœ”[39m[0m[90m applying when none have been defined[0m
2025-04-03T23:45:03.7175438Z     [32m  [32mâœ”[39m[0m[90m assignment of non-functions throw[0m
2025-04-03T23:45:03.7190901Z     [32m  [32mâœ”[39m[0m[90m auto _id[0m
2025-04-03T23:45:03.7203160Z [0m    indexes[0m
2025-04-03T23:45:03.7203684Z [0m      definition[0m
2025-04-03T23:45:03.7212995Z       [32m  [32mâœ”[39m[0m[90m basic[0m
2025-04-03T23:45:03.7230349Z       [32m  [32mâœ”[39m[0m[90m compound[0m
2025-04-03T23:45:03.7245385Z       [32m  [32mâœ”[39m[0m[90m compound based on name (gh-6499)[0m
2025-04-03T23:45:03.7259812Z       [32m  [32mâœ”[39m[0m[90m using "ascending" and "descending" for order (gh-13725)[0m
2025-04-03T23:45:03.7276498Z       [32m  [32mâœ”[39m[0m[90m with single nested doc (gh-6113)[0m
2025-04-03T23:45:03.7296089Z       [32m  [32mâœ”[39m[0m[90m with embedded discriminator (gh-6485)[0m
2025-04-03T23:45:03.7308762Z [0m    plugins[0m
2025-04-03T23:45:03.7311189Z     [32m  [32mâœ”[39m[0m[90m work[0m
2025-04-03T23:45:03.7324814Z     [32m  [32mâœ”[39m[0m[90m options param (gh-12077)[0m
2025-04-03T23:45:03.7336980Z [0m    options[0m
2025-04-03T23:45:03.7339147Z     [32m  [32mâœ”[39m[0m[90m defaults are set[0m
2025-04-03T23:45:03.7358808Z     [32m  [32mâœ”[39m[0m[90m setting[0m
2025-04-03T23:45:03.7371370Z [0m    virtuals[0m
2025-04-03T23:45:03.7373969Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:03.7386062Z [0m      id[0m
2025-04-03T23:45:03.7388902Z       [32m  [32mâœ”[39m[0m[90m default creation of id can be overridden (gh-298)[0m
2025-04-03T23:45:03.7402170Z       [32m  [32mâœ”[39m[0m[90m disabling[0m
2025-04-03T23:45:03.7414183Z [0m      getter[0m
2025-04-03T23:45:03.7416932Z       [32m  [32mâœ”[39m[0m[90m scope[0m
2025-04-03T23:45:03.7429428Z [0m      setter[0m
2025-04-03T23:45:03.7431784Z       [32m  [32mâœ”[39m[0m[90m scope[0m
2025-04-03T23:45:03.7444208Z [0m    other contexts[0m
2025-04-03T23:45:03.7460387Z     [32m  [32mâœ”[39m[0m[90m work[0m
2025-04-03T23:45:03.7472935Z [0m    #add()[0m
2025-04-03T23:45:03.7480115Z     [32m  [32mâœ”[39m[0m[90m does not pollute existing paths[0m
2025-04-03T23:45:03.7494317Z     [32m  [32mâœ”[39m[0m[90m returns the schema instance[0m
2025-04-03T23:45:03.7508954Z     [32m  [32mâœ”[39m[0m[90m returns the schema instance when schema instance is passed[0m
2025-04-03T23:45:03.7626292Z     [32m  [32mâœ”[39m[0m[90m merging nested objects (gh-662)[0m
2025-04-03T23:45:03.7719657Z     [32m  [32mâœ”[39m[0m[90m prefix (gh-1730)[0m
2025-04-03T23:45:03.7734278Z     [32m  [32mâœ”[39m[0m[90m adds another schema (gh-6897)[0m
2025-04-03T23:45:03.7750723Z     [32m  [32mâœ”[39m[0m[90m overwrites existing paths (gh-10203)[0m
2025-04-03T23:45:03.7762563Z [0m    construction[0m
2025-04-03T23:45:03.7773109Z     [32m  [32mâœ”[39m[0m[90m array of object literal missing a type is interpreted as DocumentArray[0m
2025-04-03T23:45:03.7792717Z     [32m  [32mâœ”[39m[0m[90m array of object literal with type.type is interpreted as DocumentArray[0m
2025-04-03T23:45:03.7811751Z     [32m  [32mâœ”[39m[0m[90m does not alter original argument (gh-1364)[0m
2025-04-03T23:45:03.8032283Z     [32m  [32mâœ”[39m[0m[90m properly gets value of plain objects when dealing with refs (gh-1606)[0m
2025-04-03T23:45:03.8065451Z     [32m  [32mâœ”[39m[0m[90m array of of schemas and objects (gh-7218)[0m
2025-04-03T23:45:03.8082944Z     [32m  [32mâœ”[39m[0m[90m copies options from array of schemas[0m
2025-04-03T23:45:03.8100740Z     [32m  [32mâœ”[39m[0m[90m propagates typeKey down to implicitly created single nested schemas (gh-13154)[0m
2025-04-03T23:45:03.8114792Z [0m    property names[0m
2025-04-03T23:45:03.8131847Z     [32m  [32mâœ”[39m[0m[90m that do not conflict do not throw[0m
2025-04-03T23:45:03.8147214Z [0m      reserved keys are log a warning (gh-9010)[0m
2025-04-03T23:45:03.8153095Z       [32m  [32mâœ”[39m[0m[90m `emit` when used as a schema path logs a warning[0m
2025-04-03T23:45:03.8172385Z       [32m  [32mâœ”[39m[0m[90m `emit` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-03T23:45:03.8190273Z       [32m  [32mâœ”[39m[0m[90m `listeners` when used as a schema path logs a warning[0m
2025-04-03T23:45:03.8205817Z       [32m  [32mâœ”[39m[0m[90m `listeners` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-03T23:45:03.8221201Z       [32m  [32mâœ”[39m[0m[90m `removeListener` when used as a schema path logs a warning[0m
2025-04-03T23:45:03.8236387Z       [32m  [32mâœ”[39m[0m[90m `removeListener` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-03T23:45:03.8251185Z       [32m  [32mâœ”[39m[0m[90m `errors` when used as a schema path logs a warning[0m
2025-04-03T23:45:03.8267609Z       [32m  [32mâœ”[39m[0m[90m `errors` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-03T23:45:03.8296753Z       [32m  [32mâœ”[39m[0m[90m `get` when used as a schema path logs a warning[0m
2025-04-03T23:45:03.8311745Z       [32m  [32mâœ”[39m[0m[90m `get` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-03T23:45:03.8327015Z       [32m  [32mâœ”[39m[0m[90m `init` when used as a schema path logs a warning[0m
2025-04-03T23:45:03.8342125Z       [32m  [32mâœ”[39m[0m[90m `init` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-03T23:45:03.8357278Z       [32m  [32mâœ”[39m[0m[90m `isModified` when used as a schema path logs a warning[0m
2025-04-03T23:45:03.8372446Z       [32m  [32mâœ”[39m[0m[90m `isModified` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-03T23:45:03.8387363Z       [32m  [32mâœ”[39m[0m[90m `isNew` when used as a schema path logs a warning[0m
2025-04-03T23:45:03.8404987Z       [32m  [32mâœ”[39m[0m[90m `isNew` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-03T23:45:03.8425959Z       [32m  [32mâœ”[39m[0m[90m `populated` when used as a schema path logs a warning[0m
2025-04-03T23:45:03.8444987Z       [32m  [32mâœ”[39m[0m[90m `populated` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-03T23:45:03.8460355Z       [32m  [32mâœ”[39m[0m[90m `remove` when used as a schema path logs a warning[0m
2025-04-03T23:45:03.8476330Z       [32m  [32mâœ”[39m[0m[90m `remove` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-03T23:45:03.8493726Z       [32m  [32mâœ”[39m[0m[90m `save` when used as a schema path logs a warning[0m
2025-04-03T23:45:03.8512559Z       [32m  [32mâœ”[39m[0m[90m `save` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-03T23:45:03.8529889Z       [32m  [32mâœ”[39m[0m[90m `toObject` when used as a schema path logs a warning[0m
2025-04-03T23:45:03.8547498Z       [32m  [32mâœ”[39m[0m[90m `toObject` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-03T23:45:03.8564344Z       [32m  [32mâœ”[39m[0m[90m `validate` when used as a schema path logs a warning[0m
2025-04-03T23:45:03.8581380Z       [32m  [32mâœ”[39m[0m[90m `validate` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-03T23:45:03.8595377Z [0m    pathType()[0m
2025-04-03T23:45:03.8605454Z     [32m  [32mâœ”[39m[0m[90m handles maps (gh-7448) (gh-7464)[0m
2025-04-03T23:45:03.8619662Z [0m      when called on an explicit real path[0m
2025-04-03T23:45:03.8621540Z       [32m  [32mâœ”[39m[0m[90m returns "real"[0m
2025-04-03T23:45:03.8635782Z [0m      when called on a virtual[0m
2025-04-03T23:45:03.8636983Z       [32m  [32mâœ”[39m[0m[90m returns virtual[0m
2025-04-03T23:45:03.8651200Z [0m      when called on nested structure[0m
2025-04-03T23:45:03.8652422Z       [32m  [32mâœ”[39m[0m[90m returns nested[0m
2025-04-03T23:45:03.8666674Z [0m      when called on undefined path[0m
2025-04-03T23:45:03.8669051Z       [32m  [32mâœ”[39m[0m[90m returns adHocOrUndefined[0m
2025-04-03T23:45:03.8683476Z [0m    remove()[0m
2025-04-03T23:45:03.8690049Z     [32m  [32mâœ”[39m[0m[90m returns the schema instance[0m
2025-04-03T23:45:03.8705139Z     [32m  [32mâœ”[39m[0m[90m removes a single path[0m
2025-04-03T23:45:03.8719915Z     [32m  [32mâœ”[39m[0m[90m removes a nested path[0m
2025-04-03T23:45:03.8734699Z     [32m  [32mâœ”[39m[0m[90m removes all children of a nested path (gh-2398)[0m
2025-04-03T23:45:03.8749252Z     [32m  [32mâœ”[39m[0m[90m removes an array of paths[0m
2025-04-03T23:45:03.8766967Z     [32m  [32mâœ”[39m[0m[90m works properly with virtuals (gh-2398)[0m
2025-04-03T23:45:03.8783264Z     [32m  [32mâœ”[39m[0m[90m methods named toString (gh-4551)[0m
2025-04-03T23:45:03.8799524Z     [32m  [32mâœ”[39m[0m[90m handles default value = 0 (gh-4620)[0m
2025-04-03T23:45:03.8820615Z     [32m  [32mâœ”[39m[0m[90m type: childSchema (gh-5521)[0m
2025-04-03T23:45:03.8839026Z     [32m  [32mâœ”[39m[0m[90m Decimal128 type (gh-4759)[0m
2025-04-03T23:45:03.8856741Z     [32m  [32mâœ”[39m[0m[90m childSchemas prop (gh-5695)[0m
2025-04-03T23:45:03.8868406Z [0m      clone()[0m
2025-04-03T23:45:03.8871410Z       [32m  [32mâœ”[39m[0m[90m copies methods, statics, and query helpers (gh-5752)[0m
2025-04-03T23:45:03.8885397Z       [32m  [32mâœ”[39m[0m[90m copies validators declared with validate() (gh-5607)[0m
2025-04-03T23:45:03.8899543Z       [32m  [32mâœ”[39m[0m[90m copies virtuals (gh-6133)[0m
2025-04-03T23:45:03.8917894Z       [32m  [32mâœ”[39m[0m[90m with nested virtuals (gh-6274)[0m
2025-04-03T23:45:03.8997510Z       [32m  [32mâœ”[39m[0m[90m with alternative option syntaxes (gh-6274)[0m
2025-04-03T23:45:03.9071993Z       [32m  [32mâœ”[39m[0m[90m copies base for using custom types after cloning (gh-7377)[0m
2025-04-03T23:45:03.9085691Z       [32m  [32mâœ”[39m[0m[90m clones schema types (gh-7537)[0m
2025-04-03T23:45:03.9102715Z       [32m  [32mâœ”[39m[0m[90m correctly copies all child schemas (gh-7537)[0m
2025-04-03T23:45:03.9142588Z       [32m  [32mâœ”[39m[0m[90m copies single embedded discriminators (gh-7894)[0m
2025-04-03T23:45:03.9220526Z       [32m  [32mâœ”[39m[0m[90m copies array discriminators (gh-7954)[0m
2025-04-03T23:45:03.9238099Z       [32m  [32mâœ”[39m[0m[90m uses Mongoose instance's Schema constructor (gh-9426)[0m
2025-04-03T23:45:03.9257887Z       [32m  [32mâœ”[39m[0m[90m avoids creating duplicate array constructors when cloning doc array underneath subdoc (gh-13626)[0m
2025-04-03T23:45:03.9271999Z [0m    pick() (gh-8207)[0m
2025-04-03T23:45:03.9278963Z     [32m  [32mâœ”[39m[0m[90m works with nested paths[0m
2025-04-03T23:45:03.9297343Z     [32m  [32mâœ”[39m[0m[90m with single nested paths[0m
2025-04-03T23:45:03.9309356Z [0m    omit() (gh-12931)[0m
2025-04-03T23:45:03.9317155Z     [32m  [32mâœ”[39m[0m[90m works with nested paths[0m
2025-04-03T23:45:03.9334572Z     [32m  [32mâœ”[39m[0m[90m with single nested paths[0m
2025-04-03T23:45:03.9346802Z [0m    path-level custom cast (gh-8300)[0m
2025-04-03T23:45:03.9352617Z     [32m  [32mâœ”[39m[0m[90m with numbers[0m
2025-04-03T23:45:03.9368255Z     [32m  [32mâœ”[39m[0m[90m with function cast error format[0m
2025-04-03T23:45:03.9382639Z     [32m  [32mâœ”[39m[0m[90m with objectids[0m
2025-04-03T23:45:03.9397325Z     [32m  [32mâœ”[39m[0m[90m with boolean[0m
2025-04-03T23:45:03.9419347Z [0m    gh-8849[0m
2025-04-03T23:45:03.9543680Z     [32m  [32mâœ”[39m[0m[90m treats `select: undefined` as not specifying `select` option[0m
2025-04-03T23:45:03.9658472Z     [32m  [32mâœ”[39m[0m[90m treats `select: null` as not specifying `select` option[0m
2025-04-03T23:45:03.9755253Z [0m    mongoose.set(`strictQuery`, value); (gh-6658)[0m
2025-04-03T23:45:03.9758616Z     [32m  [32mâœ”[39m[0m[90m setting `strictQuery` on base sets strictQuery to schema (gh-6658)[0m
2025-04-03T23:45:03.9775205Z     [32m  [32mâœ”[39m[0m[90m `strictQuery` set on base gets overwritten by option set on schema (gh-6658)[0m
2025-04-03T23:45:03.9789309Z [0m    cast option (gh-8407)[0m
2025-04-03T23:45:03.9799526Z     [32m  [32mâœ”[39m[0m[90m disable casting using `false`[0m
2025-04-03T23:45:03.9817664Z     [32m  [32mâœ”[39m[0m[90m custom casters[0m
2025-04-03T23:45:03.9832009Z [0m    jsonSchema() (gh-11162)[0m
2025-04-03T23:45:04.0278799Z     [32m  [32mâœ”[39m[0m[90m handles basic example with only top-level keys[0m[33m (44ms)[0m
2025-04-03T23:45:04.0319331Z     [32m  [32mâœ”[39m[0m[90m handles all primitive data types[0m
2025-04-03T23:45:04.0581836Z     [32m  [32mâœ”[39m[0m[90m handles arrays and document arrays[0m
2025-04-03T23:45:04.0842382Z     [32m  [32mâœ”[39m[0m[90m handles nested paths and subdocuments[0m
2025-04-03T23:45:04.1107918Z     [32m  [32mâœ”[39m[0m[90m handles maps[0m
2025-04-03T23:45:04.1136399Z     [32m  [32mâœ”[39m[0m[90m handles map with required element[0m
2025-04-03T23:45:04.1153094Z     [32m  [32mâœ”[39m[0m[90m handles required enums[0m
2025-04-03T23:45:04.1170362Z     [32m  [32mâœ”[39m[0m[90m throws error on mixed type[0m
2025-04-03T23:45:04.1206208Z 
2025-04-03T23:45:04.1206913Z [0m  SchemaUUID[0m
2025-04-03T23:45:04.1396806Z   [32m  [32mâœ”[39m[0m[90m basic functionality should work[0m
2025-04-03T23:45:04.1430276Z   [32m  [32mâœ”[39m[0m[90m should throw error in case of invalid string[0m
2025-04-03T23:45:04.1664238Z   [32m  [32mâœ”[39m[0m[90m should work with $in and $nin and $all[0m
2025-04-03T23:45:04.1887812Z   [32m  [32mâœ”[39m[0m[90m should not convert to string nullish UUIDs (gh-13032)[0m
2025-04-03T23:45:04.2135978Z   [32m  [32mâœ”[39m[0m[90m works with populate (gh-13267)[0m
2025-04-03T23:45:04.2347942Z   [32m  [32mâœ”[39m[0m[90m handles built-in UUID type (gh-13103)[0m
2025-04-03T23:45:04.2591870Z   [32m  [32mâœ”[39m[0m[90m avoids converting maps of uuids to strings (gh-13657)[0m
2025-04-03T23:45:04.2616589Z   [36m  - should work with $bits* operators[0m
2025-04-03T23:45:04.2617263Z   [36m  - should work with $all operator[0m
2025-04-03T23:45:04.2618409Z   [36m  - should work with $lt, $lte, $gt, $gte operators[0m
2025-04-03T23:45:04.2626705Z 
2025-04-03T23:45:04.2628637Z [0m  schema[0m
2025-04-03T23:45:04.2630723Z [0m    validation[0m
2025-04-03T23:45:04.2638583Z     [32m  [32mâœ”[39m[0m[90m invalid arguments are rejected (1044)[0m
2025-04-03T23:45:04.2644215Z     [32m  [32mâœ”[39m[0m[90m string enum[0m
2025-04-03T23:45:04.2652935Z     [32m  [32mâœ”[39m[0m[90m string regexp[0m
2025-04-03T23:45:04.2663125Z     [32m  [32mâœ”[39m[0m[90m should clear validator errors (gh-2302)[0m
2025-04-03T23:45:04.2673823Z     [32m  [32mâœ”[39m[0m[90m should allow an array of enums (gh-661)[0m
2025-04-03T23:45:04.2679931Z     [32m  [32mâœ”[39m[0m[90m should allow null values for enum gh-3044[0m
2025-04-03T23:45:04.2692570Z     [32m  [32mâœ”[39m[0m[90m should allow an array of subdocuments with enums (gh-3521)[0m
2025-04-03T23:45:04.2707232Z     [32m  [32mâœ”[39m[0m[90m should validate subdocuments subproperty enums (gh-4111)[0m
2025-04-03T23:45:04.2716211Z     [32m  [32mâœ”[39m[0m[90m doesnt do double validation on document arrays (gh-2618)[0m
2025-04-03T23:45:04.2729934Z     [32m  [32mâœ”[39m[0m[90m doesnt do double validation on document arrays underneath nested (gh-5411)[0m
2025-04-03T23:45:04.2741482Z     [32m  [32mâœ”[39m[0m[90m no double validation on set nested docarray (gh-4145)[0m
2025-04-03T23:45:04.2750024Z     [32m  [32mâœ”[39m[0m[90m returns cast errors[0m
2025-04-03T23:45:04.2767466Z     [32m  [32mâœ”[39m[0m[90m handles multiple subdocument errors (gh-2589)[0m
2025-04-03T23:45:04.2803446Z     [32m  [32mâœ”[39m[0m[90m handles subdocument cast errors (gh-2819)[0m
2025-04-03T23:45:04.2812260Z     [32m  [32mâœ”[39m[0m[90m fails when you try to set a nested path to a primitive (gh-2592)[0m
2025-04-03T23:45:04.2819371Z     [32m  [32mâœ”[39m[0m[90m doesnt execute other validators if required fails (gh-2725)[0m
2025-04-03T23:45:04.2824983Z     [32m  [32mâœ”[39m[0m[90m doesnt execute other validators if required fails (gh-3025)[0m
2025-04-03T23:45:04.2831709Z     [32m  [32mâœ”[39m[0m[90m validateSync allows you to filter paths (gh-3153)[0m
2025-04-03T23:45:04.2839614Z     [32m  [32mâœ”[39m[0m[90m validateSync validates array elements when setting pathsToValidate (gh-13159)[0m
2025-04-03T23:45:04.2865746Z     [32m  [32mâœ”[39m[0m[90m adds required validators to the front of the list (gh-2843)[0m
2025-04-03T23:45:04.2873015Z     [32m  [32mâœ”[39m[0m[90m sets path correctly when setter throws exception (gh-2832)[0m
2025-04-03T23:45:04.2884740Z     [32m  [32mâœ”[39m[0m[90m allows you to validate embedded doc that was .create()-ed (gh-2902) (gh-2929)[0m
2025-04-03T23:45:04.2893833Z     [32m  [32mâœ”[39m[0m[90m returns correct kind for user defined custom validators (gh-2885)[0m
2025-04-03T23:45:04.2900409Z     [32m  [32mâœ”[39m[0m[90m enums report kind (gh-3009)[0m
2025-04-03T23:45:04.2917944Z     [32m  [32mâœ”[39m[0m[90m enums on arrays (gh-6102) (gh-8449)[0m
2025-04-03T23:45:04.2924323Z     [32m  [32mâœ”[39m[0m[90m skips conditional required (gh-3539)[0m
2025-04-03T23:45:04.2932663Z     [32m  [32mâœ”[39m[0m[90m handles function for date min/max (gh-7600)[0m
2025-04-03T23:45:04.2938380Z     [32m  [32mâœ”[39m[0m[90m evaluate message function gh6523[0m
2025-04-03T23:45:04.2944635Z     [32m  [32mâœ”[39m[0m[90m Allows for doc to be passed as another parameter (gh-12564)[0m
2025-04-03T23:45:04.2950357Z     [32m  [32mâœ”[39m[0m[90m evaluate message function for required field gh6523[0m
2025-04-03T23:45:04.2965907Z     [32m  [32mâœ”[39m[0m[90m should validate required UUID fields correctly (gh-12991)[0m
2025-04-03T23:45:04.2967289Z [0m      non-required fields[0m
2025-04-03T23:45:04.2970527Z       [32m  [32mâœ”[39m[0m[90m number min and max[0m
2025-04-03T23:45:04.2971187Z [0m        are validated correctly[0m
2025-04-03T23:45:04.3126713Z         [32m  [32mâœ”[39m[0m[90m and can be set to "undefined" (gh-1594)[0m
2025-04-03T23:45:04.3141422Z [0m      required[0m
2025-04-03T23:45:04.3147329Z       [32m  [32mâœ”[39m[0m[90m string required[0m
2025-04-03T23:45:04.3154866Z       [32m  [32mâœ”[39m[0m[90m string conditional required[0m
2025-04-03T23:45:04.3159181Z       [32m  [32mâœ”[39m[0m[90m number required[0m
2025-04-03T23:45:04.3164382Z       [32m  [32mâœ”[39m[0m[90m date required[0m
2025-04-03T23:45:04.3177046Z       [32m  [32mâœ”[39m[0m[90m date not empty string (gh-3132)[0m
2025-04-03T23:45:04.3178012Z       [32m  [32mâœ”[39m[0m[90m objectid required[0m
2025-04-03T23:45:04.3178896Z       [32m  [32mâœ”[39m[0m[90m array required[0m
2025-04-03T23:45:04.3183157Z       [32m  [32mâœ”[39m[0m[90m array required custom required[0m
2025-04-03T23:45:04.3187151Z       [32m  [32mâœ”[39m[0m[90m boolean required[0m
2025-04-03T23:45:04.3191219Z       [32m  [32mâœ”[39m[0m[90m mixed required[0m
2025-04-03T23:45:04.3191771Z [0m      async[0m
2025-04-03T23:45:04.3247020Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:04.3302283Z       [32m  [32mâœ”[39m[0m[90m scope[0m
2025-04-03T23:45:04.3307368Z       [32m  [32mâœ”[39m[0m[90m doValidateSync should ignore async function and script waiting for promises (gh-4885)[0m
2025-04-03T23:45:04.3308310Z [0m      messages[0m
2025-04-03T23:45:04.3308812Z [0m        are customizable[0m
2025-04-03T23:45:04.3326801Z         [32m  [32mâœ”[39m[0m[90m within schema definitions[0m
2025-04-03T23:45:04.3334343Z         [32m  [32mâœ”[39m[0m[90m for custom validators[0m
2025-04-03T23:45:04.3340413Z         [32m  [32mâœ”[39m[0m[90m custom validators with promise (gh-5171)[0m
2025-04-03T23:45:04.3346974Z         [32m  [32mâœ”[39m[0m[90m supports custom properties (gh-2132)[0m
2025-04-03T23:45:04.3353194Z         [32m  [32mâœ”[39m[0m[90m supports dynamic message for validators with callback (gh-1936)[0m
2025-04-03T23:45:04.3354023Z [0m      types[0m
2025-04-03T23:45:04.3354533Z [0m        are customizable[0m
2025-04-03T23:45:04.3362302Z         [32m  [32mâœ”[39m[0m[90m for single custom validators[0m
2025-04-03T23:45:04.3369458Z         [32m  [32mâœ”[39m[0m[90m for many custom validators[0m
2025-04-03T23:45:04.3370619Z [0m      `enum` accepts an object to support TypeScript enums (gh-9546) (gh-9535)[0m
2025-04-03T23:45:04.3375963Z       [32m  [32mâœ”[39m[0m[90m strings[0m
2025-04-03T23:45:04.3381546Z       [32m  [32mâœ”[39m[0m[90m numbers[0m
2025-04-03T23:45:04.3389405Z       [32m  [32mâœ”[39m[0m[90m arrays[0m
2025-04-03T23:45:04.3397291Z       [32m  [32mâœ”[39m[0m[90m passes when using valid data[0m
2025-04-03T23:45:04.3397736Z 
2025-04-03T23:45:04.3398156Z [0m  SchemaType.cast() (gh-7045)[0m
2025-04-03T23:45:04.3402906Z   [32m  [32mâœ”[39m[0m[90m with inheritance[0m
2025-04-03T23:45:04.3413542Z   [32m  [32mâœ”[39m[0m[90m handles objectid[0m
2025-04-03T23:45:04.3416476Z   [32m  [32mâœ”[39m[0m[90m handles disabling casting[0m
2025-04-03T23:45:04.3422364Z   [32m  [32mâœ”[39m[0m[90m handles boolean[0m
2025-04-03T23:45:04.3425435Z   [32m  [32mâœ”[39m[0m[90m handles disabling casting[0m
2025-04-03T23:45:04.3426220Z [0m    string[0m
2025-04-03T23:45:04.3436656Z     [32m  [32mâœ”[39m[0m[90m supports custom cast functions[0m
2025-04-03T23:45:04.3439565Z     [32m  [32mâœ”[39m[0m[90m supports disabling casting[0m
2025-04-03T23:45:04.3440245Z [0m    date[0m
2025-04-03T23:45:04.3448205Z     [32m  [32mâœ”[39m[0m[90m supports custom cast functions[0m
2025-04-03T23:45:04.3451164Z     [32m  [32mâœ”[39m[0m[90m supports disabling casting[0m
2025-04-03T23:45:04.3451937Z [0m    decimal128[0m
2025-04-03T23:45:04.3459829Z     [32m  [32mâœ”[39m[0m[90m supports custom cast functions[0m
2025-04-03T23:45:04.3465212Z     [32m  [32mâœ”[39m[0m[90m supports disabling casting[0m
2025-04-03T23:45:04.3465698Z 
2025-04-03T23:45:04.3467775Z [0m  schematype[0m
2025-04-03T23:45:04.3479904Z   [32m  [32mâœ”[39m[0m[90m honors the selected option[0m
2025-04-03T23:45:04.3481029Z   [32m  [32mâœ”[39m[0m[90m properly handles specifying index in combination with unique or sparse[0m
2025-04-03T23:45:04.3482278Z   [32m  [32mâœ”[39m[0m[90m handles index: false with unique, sparse, text set to false (gh-7620)[0m
2025-04-03T23:45:04.3483525Z   [32m  [32mâœ”[39m[0m[90m handles unique, sparse, text set to false with no index property (gh-10738)[0m
2025-04-03T23:45:04.3484923Z   [32m  [32mâœ”[39m[0m[90m handles function as positional message arg (gh-8360)[0m
2025-04-03T23:45:04.3487954Z   [32m  [32mâœ”[39m[0m[90m merges default validators (gh-14070)[0m
2025-04-03T23:45:04.3492263Z   [32m  [32mâœ”[39m[0m[90m demonstrates the `validateAll()` function (gh-6910)[0m
2025-04-03T23:45:04.3494613Z   [32m  [32mâœ”[39m[0m[90m supports getEmbeddedSchemaType() (gh-8389)[0m
2025-04-03T23:45:04.3495487Z [0m    checkRequired()[0m
2025-04-03T23:45:04.3505538Z     [32m  [32mâœ”[39m[0m[90m with inherits (gh-7486)[0m
2025-04-03T23:45:04.3506120Z [0m    clone()[0m
2025-04-03T23:45:04.3510515Z     [32m  [32mâœ”[39m[0m[90m clones added default[0m
2025-04-03T23:45:04.3512563Z     [32m  [32mâœ”[39m[0m[90m clones added getters[0m
2025-04-03T23:45:04.3515209Z     [32m  [32mâœ”[39m[0m[90m clones added immutable[0m
2025-04-03T23:45:04.3517203Z     [32m  [32mâœ”[39m[0m[90m clones added index[0m
2025-04-03T23:45:04.3519067Z     [32m  [32mâœ”[39m[0m[90m clones added ref[0m
2025-04-03T23:45:04.3521158Z     [32m  [32mâœ”[39m[0m[90m clones added required[0m
2025-04-03T23:45:04.3523106Z     [32m  [32mâœ”[39m[0m[90m clones added select: false[0m
2025-04-03T23:45:04.3524885Z     [32m  [32mâœ”[39m[0m[90m clones added setter[0m
2025-04-03T23:45:04.3526937Z     [32m  [32mâœ”[39m[0m[90m clones added sparse[0m
2025-04-03T23:45:04.3528830Z     [32m  [32mâœ”[39m[0m[90m clones added sparse (index option)[0m
2025-04-03T23:45:04.3530584Z     [32m  [32mâœ”[39m[0m[90m clones added text (index option)[0m
2025-04-03T23:45:04.3532350Z     [32m  [32mâœ”[39m[0m[90m clones added unique (index option)[0m
2025-04-03T23:45:04.3534133Z     [32m  [32mâœ”[39m[0m[90m clones added validator[0m
2025-04-03T23:45:04.3536088Z     [32m  [32mâœ”[39m[0m[90m clones updated caster[0m
2025-04-03T23:45:04.3536629Z [0m    get()[0m
2025-04-03T23:45:04.3537915Z     [32m  [32mâœ”[39m[0m[90m SchemaArray has a `get` method[0m
2025-04-03T23:45:04.3538675Z     [32m  [32mâœ”[39m[0m[90m SchemaBigInt has a `get` method[0m
2025-04-03T23:45:04.3539413Z     [32m  [32mâœ”[39m[0m[90m SchemaBoolean has a `get` method[0m
2025-04-03T23:45:04.3540138Z     [32m  [32mâœ”[39m[0m[90m SchemaBuffer has a `get` method[0m
2025-04-03T23:45:04.3540846Z     [32m  [32mâœ”[39m[0m[90m SchemaDate has a `get` method[0m
2025-04-03T23:45:04.3541582Z     [32m  [32mâœ”[39m[0m[90m SchemaDecimal128 has a `get` method[0m
2025-04-03T23:45:04.3542345Z     [32m  [32mâœ”[39m[0m[90m SchemaDecimal128 has a `get` method[0m
2025-04-03T23:45:04.3543121Z     [32m  [32mâœ”[39m[0m[90m SchemaDocumentArray has a `get` method[0m
2025-04-03T23:45:04.3544103Z     [32m  [32mâœ”[39m[0m[90m SchemaMap has a `get` method[0m
2025-04-03T23:45:04.3544813Z     [32m  [32mâœ”[39m[0m[90m SchemaMixed has a `get` method[0m
2025-04-03T23:45:04.3545719Z     [32m  [32mâœ”[39m[0m[90m SchemaNumber has a `get` method[0m
2025-04-03T23:45:04.3546453Z     [32m  [32mâœ”[39m[0m[90m SchemaObjectId has a `get` method[0m
2025-04-03T23:45:04.3547200Z     [32m  [32mâœ”[39m[0m[90m SchemaString has a `get` method[0m
2025-04-03T23:45:04.3547941Z     [32m  [32mâœ”[39m[0m[90m SchemaSubdocument has a `get` method[0m
2025-04-03T23:45:04.3548670Z     [32m  [32mâœ”[39m[0m[90m SchemaUUID has a `get` method[0m
2025-04-03T23:45:04.3549373Z     [32m  [32mâœ”[39m[0m[90m SchemaDouble has a `get` method[0m
2025-04-03T23:45:04.3550078Z     [32m  [32mâœ”[39m[0m[90m SchemaInt32 has a `get` method[0m
2025-04-03T23:45:04.3550795Z     [32m  [32mâœ”[39m[0m[90m SchemaObjectId has a `get` method[0m
2025-04-03T23:45:04.3551509Z     [32m  [32mâœ”[39m[0m[90m SchemaMixed has a `get` method[0m
2025-04-03T23:45:04.3552248Z     [32m  [32mâœ”[39m[0m[90m SchemaBoolean has a `get` method[0m
2025-04-03T23:45:04.3552997Z     [32m  [32mâœ”[39m[0m[90m SchemaObjectId has a `get` method[0m
2025-04-03T23:45:04.3553411Z [0m    set()[0m
2025-04-03T23:45:04.3555410Z     [32m  [32mâœ”[39m[0m[90m SchemaArray, when given a default option, set its[0m
2025-04-03T23:45:04.3557031Z     [32m  [32mâœ”[39m[0m[90m SchemaBigInt, when given a default option, set its[0m
2025-04-03T23:45:04.3558411Z     [32m  [32mâœ”[39m[0m[90m SchemaBoolean, when given a default option, set its[0m
2025-04-03T23:45:04.3559780Z     [32m  [32mâœ”[39m[0m[90m SchemaBuffer, when given a default option, set its[0m
2025-04-03T23:45:04.3561098Z     [32m  [32mâœ”[39m[0m[90m SchemaDate, when given a default option, set its[0m
2025-04-03T23:45:04.3562415Z     [32m  [32mâœ”[39m[0m[90m SchemaDecimal128, when given a default option, set its[0m
2025-04-03T23:45:04.3563575Z     [32m  [32mâœ”[39m[0m[90m SchemaDecimal128, when given a default option, set its[0m
2025-04-03T23:45:04.3565285Z     [32m  [32mâœ”[39m[0m[90m SchemaMap, when given a default option, set its[0m
2025-04-03T23:45:04.3566680Z     [32m  [32mâœ”[39m[0m[90m SchemaMixed, when given a default option, set its[0m
2025-04-03T23:45:04.3568034Z     [32m  [32mâœ”[39m[0m[90m SchemaNumber, when given a default option, set its[0m
2025-04-03T23:45:04.3569519Z     [32m  [32mâœ”[39m[0m[90m SchemaObjectId, when given a default option, set its[0m
2025-04-03T23:45:04.3570941Z     [32m  [32mâœ”[39m[0m[90m SchemaString, when given a default option, set its[0m
2025-04-03T23:45:04.3572301Z     [32m  [32mâœ”[39m[0m[90m SchemaUUID, when given a default option, set its[0m
2025-04-03T23:45:04.3573688Z     [32m  [32mâœ”[39m[0m[90m SchemaDouble, when given a default option, set its[0m
2025-04-03T23:45:04.3575132Z     [32m  [32mâœ”[39m[0m[90m SchemaInt32, when given a default option, set its[0m
2025-04-03T23:45:04.3576500Z     [32m  [32mâœ”[39m[0m[90m SchemaObjectId, when given a default option, set its[0m
2025-04-03T23:45:04.3577674Z     [32m  [32mâœ”[39m[0m[90m SchemaMixed, when given a default option, set its[0m
2025-04-03T23:45:04.3578786Z     [32m  [32mâœ”[39m[0m[90m SchemaBoolean, when given a default option, set its[0m
2025-04-03T23:45:04.3579871Z     [32m  [32mâœ”[39m[0m[90m SchemaObjectId, when given a default option, set its[0m
2025-04-03T23:45:04.3580598Z [0m      SchemaType.set()[0m
2025-04-03T23:45:04.3581412Z       [32m  [32mâœ”[39m[0m[90m SchemaType.set, is a function[0m
2025-04-03T23:45:04.3762821Z       [32m  [32mâœ”[39m[0m[90m should allow setting values to a given property gh-13510[0m
2025-04-03T23:45:04.3763384Z 
2025-04-03T23:45:04.3763927Z [0m  asyncIterator[0m
2025-04-03T23:45:04.4074114Z   [32m  [32mâœ”[39m[0m[90m supports for/await/of on a query (gh-6737)[0m
2025-04-03T23:45:04.4117370Z   [32m  [32mâœ”[39m[0m[90m supports for/await/of on a aggregation (gh-6737)[0m
2025-04-03T23:45:04.4160241Z   [32m  [32mâœ”[39m[0m[90m supports for/await/of on a query cursor (gh-9403)[0m
2025-04-03T23:45:04.4200361Z   [32m  [32mâœ”[39m[0m[90m supports for/await/of on a aggregation cursor (gh-9403)[0m
2025-04-03T23:45:04.4220207Z 
2025-04-03T23:45:04.4220655Z [0m  Cast Tutorial[0m
2025-04-03T23:45:04.4369867Z   [32m  [32mâœ”[39m[0m[90m get and set[0m
2025-04-03T23:45:04.4380562Z   [32m  [32mâœ”[39m[0m[90m cast values[0m
2025-04-03T23:45:04.4386121Z   [32m  [32mâœ”[39m[0m[90m cast error[0m
2025-04-03T23:45:04.4393091Z   [32m  [32mâœ”[39m[0m[90m not in schema[0m
2025-04-03T23:45:04.4406053Z   [32m  [32mâœ”[39m[0m[90m strictQuery true[0m
2025-04-03T23:45:04.4415197Z   [32m  [32mâœ”[39m[0m[90m strictQuery throw[0m
2025-04-03T23:45:04.4428872Z   [32m  [32mâœ”[39m[0m[90m strictQuery removes casted empty objects[0m
2025-04-03T23:45:04.4436786Z   [32m  [32mâœ”[39m[0m[90m implicit in[0m
2025-04-03T23:45:04.4454813Z 
2025-04-03T23:45:04.4455452Z [0m  custom casting[0m
2025-04-03T23:45:04.4464960Z   [32m  [32mâœ”[39m[0m[90m casting error[0m
2025-04-03T23:45:04.4471003Z   [32m  [32mâœ”[39m[0m[90m casting override[0m
2025-04-03T23:45:04.4471432Z 
2025-04-03T23:45:04.4471820Z [0m  Date Tutorial[0m
2025-04-03T23:45:04.4498573Z   [32m  [32mâœ”[39m[0m[90m Example 1.2: casts strings to dates[0m
2025-04-03T23:45:04.4507175Z   [32m  [32mâœ”[39m[0m[90m Example 1.3: cast error[0m
2025-04-03T23:45:04.4518585Z   [32m  [32mâœ”[39m[0m[90m Example 1.2.1: min, max[0m
2025-04-03T23:45:04.4541664Z   [32m  [32mâœ”[39m[0m[90m Example 1.4.1: moment[0m
2025-04-03T23:45:04.4545906Z   [32m  [32mâœ”[39m[0m[90m Example 1.4.3: numeric strings[0m
2025-04-03T23:45:04.4546632Z [0m    Example 1.3.1[0m
2025-04-03T23:45:04.4846067Z     [32m  [32mâœ”[39m[0m[90m date queries[0m
2025-04-03T23:45:04.4856766Z 
2025-04-03T23:45:04.4857200Z [0m  debug: shell[0m
2025-04-03T23:45:04.4994207Z   [32m  [32mâœ”[39m[0m[90m no-shell[0m
2025-04-03T23:45:04.5006119Z   [32m  [32mâœ”[39m[0m[90m shell[0m
2025-04-03T23:45:04.5089728Z   [32m  [32mâœ”[39m[0m[90m should allow to set the `debug` option on a per-connection basis (gh-12700)[0m
2025-04-03T23:45:04.5277379Z   [32m  [32mâœ”[39m[0m[90m should avoid sending null session option with document ops (gh-13052)[0m
2025-04-03T23:45:04.5312771Z 
2025-04-03T23:45:04.5313268Z [0m  defaults docs[0m
2025-04-03T23:45:04.5497260Z   [32m  [32mâœ”[39m[0m[90m Declaring defaults in your schema[0m
2025-04-03T23:45:04.5504038Z   [32m  [32mâœ”[39m[0m[90m Default functions[0m
2025-04-03T23:45:04.5540112Z   [32m  [32mâœ”[39m[0m[90m The `setDefaultsOnInsert` option[0m
2025-04-03T23:45:04.5547852Z   [32m  [32mâœ”[39m[0m[90m Default functions and `this`[0m
2025-04-03T23:45:04.5558260Z 
2025-04-03T23:45:04.5559081Z [0m  discriminator docs[0m
2025-04-03T23:45:04.5615205Z   [32m  [32mâœ”[39m[0m[90m The `model.discriminator()` function[0m
2025-04-03T23:45:04.5937764Z   [32m  [32mâœ”[39m[0m[90m Discriminators save to the Event model's collection[0m
2025-04-03T23:45:04.5947339Z   [32m  [32mâœ”[39m[0m[90m Discriminator keys[0m
2025-04-03T23:45:04.5974415Z   [32m  [32mâœ”[39m[0m[90m Update discriminator key[0m
2025-04-03T23:45:04.5995370Z   [32m  [32mâœ”[39m[0m[90m use overwriteDiscriminatorKey to change discriminator key[0m
2025-04-03T23:45:04.6019912Z   [32m  [32mâœ”[39m[0m[90m Discriminators add the discriminator key to queries[0m
2025-04-03T23:45:04.6037090Z   [32m  [32mâœ”[39m[0m[90m Discriminators copy pre and post hooks[0m
2025-04-03T23:45:04.6050729Z   [32m  [32mâœ”[39m[0m[90m Handling custom _id fields[0m
2025-04-03T23:45:04.6390132Z   [32m  [32mâœ”[39m[0m[90m Using discriminators with `Model.create()`[0m
2025-04-03T23:45:04.6520712Z   [32m  [32mâœ”[39m[0m[90m Embedded discriminators in arrays[0m
2025-04-03T23:45:04.6664769Z   [32m  [32mâœ”[39m[0m[90m Recursive embedded discriminators in arrays[0m
2025-04-03T23:45:04.6685787Z   [32m  [32mâœ”[39m[0m[90m Single nested discriminators[0m
2025-04-03T23:45:04.6696918Z 
2025-04-03T23:45:04.6697637Z [0m  Tutorial: findOneAndUpdate()[0m
2025-04-03T23:45:04.6959176Z   [32m  [32mâœ”[39m[0m[90m basic case[0m
2025-04-03T23:45:04.6987915Z   [32m  [32mâœ”[39m[0m[90m new option[0m
2025-04-03T23:45:04.7015284Z   [32m  [32mâœ”[39m[0m[90m returnOriginal option[0m
2025-04-03T23:45:04.7062652Z   [32m  [32mâœ”[39m[0m[90m save race condition[0m
2025-04-03T23:45:04.7107898Z   [32m  [32mâœ”[39m[0m[90m upsert[0m
2025-04-03T23:45:04.7142129Z   [32m  [32mâœ”[39m[0m[90m includeResultMetadata[0m
2025-04-03T23:45:04.7160871Z 
2025-04-03T23:45:04.7161464Z [0m  getters/setters[0m
2025-04-03T23:45:04.7177359Z [0m    getters[0m
2025-04-03T23:45:04.7186122Z     [32m  [32mâœ”[39m[0m[90m basic example[0m
2025-04-03T23:45:04.7198879Z     [32m  [32mâœ”[39m[0m[90m skip[0m
2025-04-03T23:45:04.7206127Z [0m    setters[0m
2025-04-03T23:45:04.7214051Z     [32m  [32mâœ”[39m[0m[90m basic[0m
2025-04-03T23:45:04.7476482Z     [32m  [32mâœ”[39m[0m[90m updates[0m
2025-04-03T23:45:04.7491495Z     [32m  [32mâœ”[39m[0m[90m update skip[0m
2025-04-03T23:45:04.7493652Z     [32m  [32mâœ”[39m[0m[90m vs ES6[0m
2025-04-03T23:45:04.7494348Z [0m    localization[0m
2025-04-03T23:45:04.7764978Z     [32m  [32mâœ”[39m[0m[90m locale[0m
2025-04-03T23:45:04.7786033Z 
2025-04-03T23:45:04.7786733Z [0m  Lean Tutorial[0m
2025-04-03T23:45:04.7970913Z   [32m  [32mâœ”[39m[0m[90m compare sizes lean vs not lean[0m
2025-04-03T23:45:04.7991410Z   [32m  [32mâœ”[39m[0m[90m compare types[0m
2025-04-03T23:45:04.8113786Z   [32m  [32mâœ”[39m[0m[90m getters and virtuals[0m
2025-04-03T23:45:04.8236079Z   [32m  [32mâœ”[39m[0m[90m conventional populate[0m
2025-04-03T23:45:04.8285836Z   [32m  [32mâœ”[39m[0m[90m virtual populate[0m
2025-04-03T23:45:04.8314599Z   [32m  [32mâœ”[39m[0m[90m bigint[0m
2025-04-03T23:45:04.8334031Z 
2025-04-03T23:45:04.8334419Z [0m  promises docs[0m
2025-04-03T23:45:04.8467942Z   [32m  [32mâœ”[39m[0m[90m Built-in Promises[0m
2025-04-03T23:45:04.8484401Z   [32m  [32mâœ”[39m[0m[90m Queries are not promises[0m
2025-04-03T23:45:04.8496277Z   [32m  [32mâœ”[39m[0m[90m Queries are thenable[0m
2025-04-03T23:45:04.8511899Z   [32m  [32mâœ”[39m[0m[90m Should You Use `exec()` With `await`?[0m
2025-04-03T23:45:04.8529912Z 
2025-04-03T23:45:04.8530435Z [0m  Advanced Schemas[0m
2025-04-03T23:45:04.8647222Z   [32m  [32mâœ”[39m[0m[90m Creating from ES6 Classes Using `loadClass()`[0m
2025-04-03T23:45:04.8663282Z 
2025-04-03T23:45:04.8663909Z [0m  schemaTypes[0m
2025-04-03T23:45:04.8687004Z   [32m  [32mâœ”[39m[0m[90m Creating a Basic Custom Schema Type[0m
2025-04-03T23:45:04.8703118Z 
2025-04-03T23:45:04.8703970Z [0m  transactions[0m
2025-04-03T23:45:04.8706927Z   [36m  - basic example[0m
2025-04-03T23:45:04.8707651Z   [36m  - withTransaction[0m
2025-04-03T23:45:04.8709544Z   [36m  - abort[0m
2025-04-03T23:45:04.8710015Z   [36m  - save[0m
2025-04-03T23:45:04.8710559Z   [36m  - create (gh-6909)[0m
2025-04-03T23:45:04.8711074Z   [36m  - aggregate[0m
2025-04-03T23:45:04.8711766Z   [36m  - deleteOne and deleteMany (gh-7857)(gh-6805)[0m
2025-04-03T23:45:04.8712538Z   [36m  - remove, update, updateOne (gh-7455)[0m
2025-04-03T23:45:04.8713212Z   [36m  - distinct (gh-8006)[0m
2025-04-03T23:45:04.8713843Z   [36m  - save() with no changes (gh-8571)[0m
2025-04-03T23:45:04.8714569Z   [36m  - transaction() resets $isNew on error[0m
2025-04-03T23:45:04.8715661Z   [36m  - transaction() resets $isNew between retries (gh-13698)[0m
2025-04-03T23:45:04.8716638Z   [36m  - handles resetting array state with $set atomic (gh-13698)[0m
2025-04-03T23:45:04.8718223Z   [36m  - transaction() retains modified status for documents created outside of the transaction then modified inside the transaction (gh-13973)[0m
2025-04-03T23:45:04.8719711Z   [36m  - transaction() avoids duplicating atomic operations (gh-14848)[0m
2025-04-03T23:45:04.8720817Z   [36m  - doesnt apply schema write concern to transaction operations (gh-11382)[0m
2025-04-03T23:45:04.8722669Z   [36m  - allows custom transaction wrappers to store and reset document state with $createModifiedPathsSnapshot (gh-14268)[0m
2025-04-03T23:45:04.8724302Z   [36m  - throws error if using `create()` with multiple docs in a transaction (gh-15091)[0m
2025-04-03T23:45:04.8725460Z [0m    populate (gh-6754)[0m
2025-04-03T23:45:04.8726180Z     [36m  - `populate()` uses the querys session[0m
2025-04-03T23:45:04.8726913Z     [36m  - can override `populate()` session[0m
2025-04-03T23:45:04.8727826Z     [36m  - `Document#populate()` uses the documents `$session()` by default[0m
2025-04-03T23:45:04.8728837Z     [36m  - `Document#populate()` supports overwriting the session[0m
2025-04-03T23:45:04.8729824Z [0m    transactionAsyncLocalStorage option[0m
2025-04-03T23:45:04.8730925Z     [36m  - transaction() sets `session` by default if transactionAsyncLocalStorage option is set[0m
2025-04-03T23:45:04.8731568Z 
2025-04-03T23:45:04.8731873Z [0m  validation docs[0m
2025-04-03T23:45:04.8736969Z   [32m  [32mâœ”[39m[0m[90m Validation[0m
2025-04-03T23:45:04.8754966Z   [32m  [32mâœ”[39m[0m[90m Built-in Validators[0m
2025-04-03T23:45:04.8766746Z   [32m  [32mâœ”[39m[0m[90m Custom Error Messages[0m
2025-04-03T23:45:04.9201443Z   [32m  [32mâœ”[39m[0m[90m The `unique` Option is Not a Validator[0m[33m (44ms)[0m
2025-04-03T23:45:04.9211038Z   [32m  [32mâœ”[39m[0m[90m Custom Validators[0m
2025-04-03T23:45:04.9222853Z   [32m  [32mâœ”[39m[0m[90m Async Custom Validators[0m
2025-04-03T23:45:04.9234623Z   [32m  [32mâœ”[39m[0m[90m Validation Errors[0m
2025-04-03T23:45:04.9245268Z   [32m  [32mâœ”[39m[0m[90m Cast Errors[0m
2025-04-03T23:45:04.9255364Z   [32m  [32mâœ”[39m[0m[90m Cast Error Message Overwrite[0m
2025-04-03T23:45:04.9267182Z   [32m  [32mâœ”[39m[0m[90m Cast Error Message Function Overwrite[0m
2025-04-03T23:45:04.9278158Z   [32m  [32mâœ”[39m[0m[90m Global SchemaType Validation[0m
2025-04-03T23:45:04.9291894Z   [32m  [32mâœ”[39m[0m[90m Required Validators On Nested Objects[0m
2025-04-03T23:45:04.9307119Z   [32m  [32mâœ”[39m[0m[90m Update Validators[0m
2025-04-03T23:45:04.9320044Z   [32m  [32mâœ”[39m[0m[90m Update Validators and `this`[0m
2025-04-03T23:45:04.9331658Z   [32m  [32mâœ”[39m[0m[90m Update Validators Only Run On Updated Paths[0m
2025-04-03T23:45:04.9737292Z   [32m  [32mâœ”[39m[0m[90m Update Validators Only Run For Some Operations[0m[33m (40ms)[0m
2025-04-03T23:45:04.9754538Z 
2025-04-03T23:45:04.9755267Z [0m  Virtuals[0m
2025-04-03T23:45:04.9796894Z   [32m  [32mâœ”[39m[0m[90m basic[0m
2025-04-03T23:45:04.9804468Z   [32m  [32mâœ”[39m[0m[90m fullName[0m
2025-04-03T23:45:04.9812619Z   [32m  [32mâœ”[39m[0m[90m toJSON[0m
2025-04-03T23:45:04.9845931Z   [32m  [32mâœ”[39m[0m[90m lean[0m
2025-04-03T23:45:04.9869465Z   [32m  [32mâœ”[39m[0m[90m in query[0m
2025-04-03T23:45:05.0000453Z   [32m  [32mâœ”[39m[0m[90m populate[0m
2025-04-03T23:45:05.0009647Z   [32m  [32mâœ”[39m[0m[90m schema-options fullName[0m
2025-04-03T23:45:05.0071195Z   [32m  [32mâœ”[39m[0m[90m schema-options populate[0m
2025-04-03T23:45:05.0091078Z 
2025-04-03T23:45:05.0091613Z [0m  stringifyFunctionOperators[0m
2025-04-03T23:45:05.0094530Z   [32m  [32mâœ”[39m[0m[90m converts accumulator args to strings (gh-9364)[0m
2025-04-03T23:45:05.0096705Z   [32m  [32mâœ”[39m[0m[90m converts function args to strings (gh-9897)[0m
2025-04-03T23:45:05.0097117Z 
2025-04-03T23:45:05.0097348Z [0m  prepareDiscriminatorPipeline[0m
2025-04-03T23:45:05.0099983Z   [32m  [32mâœ”[39m[0m[90m handles case where initial $match includes the discriminator key (gh-12478)[0m
2025-04-03T23:45:05.0100843Z 
2025-04-03T23:45:05.0101332Z [0m  applyWriteConcern[0m
2025-04-03T23:45:05.0115656Z   [32m  [32mâœ”[39m[0m[90m should not overwrite user specified writeConcern options (gh-13592)[0m
2025-04-03T23:45:05.0131975Z 
2025-04-03T23:45:05.0132409Z [0m  arrayDepth[0m
2025-04-03T23:45:05.0133675Z   [32m  [32mâœ”[39m[0m[90m non-array[0m
2025-04-03T23:45:05.0135416Z   [32m  [32mâœ”[39m[0m[90m simple array with no element[0m
2025-04-03T23:45:05.0136208Z   [32m  [32mâœ”[39m[0m[90m simple array with one element[0m
2025-04-03T23:45:05.0137267Z   [32m  [32mâœ”[39m[0m[90m simple array with many elements[0m
2025-04-03T23:45:05.0138303Z   [32m  [32mâœ”[39m[0m[90m simple array with many elements[0m
2025-04-03T23:45:05.0139346Z   [32m  [32mâœ”[39m[0m[90m complex array with one sub-Array[0m
2025-04-03T23:45:05.0140512Z   [32m  [32mâœ”[39m[0m[90m complex array with deeply nested sub-Arrays[0m
2025-04-03T23:45:05.0141573Z   [32m  [32mâœ”[39m[0m[90m complex array with deeply nested sub-Arrays[0m
2025-04-03T23:45:05.0142656Z   [32m  [32mâœ”[39m[0m[90m complex array with deeply nested sub-Arrays[0m
2025-04-03T23:45:05.0143085Z 
2025-04-03T23:45:05.0143737Z [0m  clone[0m
2025-04-03T23:45:05.0145653Z   [32m  [32mâœ”[39m[0m[90m retains RegExp options gh-1355[0m
2025-04-03T23:45:05.0147233Z   [32m  [32mâœ”[39m[0m[90m clones objects created with Object.create(null)[0m
2025-04-03T23:45:05.0148576Z   [32m  [32mâœ”[39m[0m[90m doesnt minimize empty objects in arrays to null (gh-7322)[0m
2025-04-03T23:45:05.0151402Z   [32m  [32mâœ”[39m[0m[90m skips cloning types that have `toBSON()` if `bson` is set (gh-8299)[0m
2025-04-03T23:45:05.0151958Z [0m    falsy[0m
2025-04-03T23:45:05.0152914Z     [32m  [32mâœ”[39m[0m[90m is null when null[0m
2025-04-03T23:45:05.0154116Z     [32m  [32mâœ”[39m[0m[90m is false when false[0m
2025-04-03T23:45:05.0155257Z     [32m  [32mâœ”[39m[0m[90m is undefined when undefined[0m
2025-04-03T23:45:05.0156211Z     [32m  [32mâœ”[39m[0m[90m is 0 when 0[0m
2025-04-03T23:45:05.0156804Z [0m    Array[0m
2025-04-03T23:45:05.0158336Z     [32m  [32mâœ”[39m[0m[90m clones first level[0m
2025-04-03T23:45:05.0160024Z     [32m  [32mâœ”[39m[0m[90m clones deeper[0m
2025-04-03T23:45:05.0160680Z [0m    mongoose object[0m
2025-04-03T23:45:05.0163155Z     [32m  [32mâœ”[39m[0m[90m use toObject[0m
2025-04-03T23:45:05.0165319Z     [32m  [32mâœ”[39m[0m[90m use toJSON[0m
2025-04-03T23:45:05.0168035Z     [32m  [32mâœ”[39m[0m[90m skipSingleNestedGetters[0m
2025-04-03T23:45:05.0168752Z [0m    global objects[0m
2025-04-03T23:45:05.0169373Z [0m      constructor is Object[0m
2025-04-03T23:45:05.0170500Z       [32m  [32mâœ”[39m[0m[90m !minimize || isArrayChild[0m
2025-04-03T23:45:05.0172131Z       [32m  [32mâœ”[39m[0m[90m !constructor && !minimize || isArrayChild[0m
2025-04-03T23:45:05.0173781Z       [32m  [32mâœ”[39m[0m[90m minimize && !isArrayChild && hasKey[0m
2025-04-03T23:45:05.0175434Z       [32m  [32mâœ”[39m[0m[90m minimize and !isArrayChild && !hasKey[0m
2025-04-03T23:45:05.0176346Z [0m      constructor is Data[0m
2025-04-03T23:45:05.0177435Z       [32m  [32mâœ”[39m[0m[90m return new equal date [0m
2025-04-03T23:45:05.0178186Z [0m      constructor is RegExp[0m
2025-04-03T23:45:05.0179488Z       [32m  [32mâœ”[39m[0m[90m return new equal date [0m
2025-04-03T23:45:05.0180191Z [0m    mongo object[0m
2025-04-03T23:45:05.0181514Z     [32m  [32mâœ”[39m[0m[90m is instance of ObjectId[0m
2025-04-03T23:45:05.0182199Z [0m    schema type[0m
2025-04-03T23:45:05.0183619Z     [32m  [32mâœ”[39m[0m[90m have schemaTypeSymbol property[0m
2025-04-03T23:45:05.0184302Z [0m    bson[0m
2025-04-03T23:45:05.0190114Z     [32m  [32mâœ”[39m[0m[90m Decimal128[0m
2025-04-03T23:45:05.0191777Z     [32m  [32mâœ”[39m[0m[90m Decimal128 (flatternDecimal)[0m
2025-04-03T23:45:05.0193498Z     [32m  [32mâœ”[39m[0m[90m does nothing[0m
2025-04-03T23:45:05.0194124Z [0m    any else[0m
2025-04-03T23:45:05.0196820Z     [32m  [32mâœ”[39m[0m[90m valueOf[0m
2025-04-03T23:45:05.0198485Z     [32m  [32mâœ”[39m[0m[90m cloneObject[0m
2025-04-03T23:45:05.0198870Z 
2025-04-03T23:45:05.0199640Z [0m  modifiedPaths, bad update value which has circular reference field[0m
2025-04-03T23:45:05.0200644Z   [32m  [32mâœ”[39m[0m[90m update value can be null[0m
2025-04-03T23:45:05.0203632Z   [32m  [32mâœ”[39m[0m[90m values with obvious error on circular reference[0m
2025-04-03T23:45:05.0204948Z   [32m  [32mâœ”[39m[0m[90m values with multiple references which are not circular should succeed[0m
2025-04-03T23:45:05.0205689Z 
2025-04-03T23:45:05.0205844Z [0m  eachAsync()[0m
2025-04-03T23:45:06.1412095Z   [32m  [32mâœ”[39m[0m[90m exhausts large cursor without parallel calls (gh-8235)[0m[31m (1120ms)[0m
2025-04-03T23:45:06.3420804Z   [32m  [32mâœ”[39m[0m[90m waits until the end before resolving the promise (gh-8352)[0m[31m (200ms)[0m
2025-04-03T23:45:06.3533774Z   [32m  [32mâœ”[39m[0m[90m it processes the documents in batches successfully[0m
2025-04-03T23:45:06.3657499Z   [32m  [32mâœ”[39m[0m[90m it processes the documents in batches even if the batch size % document count is not zero successfully[0m
2025-04-03T23:45:06.3770095Z   [32m  [32mâœ”[39m[0m[90m it processes the documents in batches with the parallel option provided[0m
2025-04-03T23:45:06.3776651Z   [32m  [32mâœ”[39m[0m[90m executes all documents and aggregates errors if continueOnError set (gh-6355)[0m
2025-04-03T23:45:06.3781410Z   [32m  [32mâœ”[39m[0m[90m returns aggregated error fetching documents with continueOnError (gh-6355)[0m
2025-04-03T23:45:06.4794903Z   [32m  [32mâœ”[39m[0m[90m avoids mutating document batch with parallel (gh-12652)[0m[31m (102ms)[0m
2025-04-03T23:45:06.4812990Z   [32m  [32mâœ”[39m[0m[90m using AbortSignal (gh-12173)[0m
2025-04-03T23:45:06.4813704Z 
2025-04-03T23:45:06.4814218Z [0m  getDeepestSubdocumentForPath[0m
2025-04-03T23:45:06.4824906Z   [32m  [32mâœ”[39m[0m[90m returns top-level document if no subdocs[0m
2025-04-03T23:45:06.4837518Z   [32m  [32mâœ”[39m[0m[90m picks up single nested subdocs along the path[0m
2025-04-03T23:45:06.4850029Z   [32m  [32mâœ”[39m[0m[90m picks up document arrays[0m
2025-04-03T23:45:06.4861763Z   [32m  [32mâœ”[39m[0m[90m picks up doubly nested subdocuments[0m
2025-04-03T23:45:06.4872014Z   [32m  [32mâœ”[39m[0m[90m returns deepest non-null subdoc[0m
2025-04-03T23:45:06.4885357Z   [32m  [32mâœ”[39m[0m[90m picks up single nested subdocs under document arrays[0m
2025-04-03T23:45:06.4886230Z 
2025-04-03T23:45:06.4886588Z [0m  get[0m
2025-04-03T23:45:06.4888569Z   [32m  [32mâœ”[39m[0m[90m gets dotted properties[0m
2025-04-03T23:45:06.4889729Z   [32m  [32mâœ”[39m[0m[90m returns default on undefined[0m
2025-04-03T23:45:06.4892541Z   [32m  [32mâœ”[39m[0m[90m returns default on bottom null[0m
2025-04-03T23:45:06.4893365Z   [32m  [32mâœ”[39m[0m[90m returns default on top-level null[0m
2025-04-03T23:45:06.4894525Z   [32m  [32mâœ”[39m[0m[90m works with maps[0m
2025-04-03T23:45:06.4896334Z   [32m  [32mâœ”[39m[0m[90m works with dotted at top level[0m
2025-04-03T23:45:06.4897987Z   [32m  [32mâœ”[39m[0m[90m works with dotted nested[0m
2025-04-03T23:45:06.4898788Z 
2025-04-03T23:45:06.4899764Z [0m  getFunctionName[0m
2025-04-03T23:45:06.4900797Z   [32m  [32mâœ”[39m[0m[90m return fn.name[0m
2025-04-03T23:45:06.4901748Z   [32m  [32mâœ”[39m[0m[90m return function name[0m
2025-04-03T23:45:06.4902946Z   [32m  [32mâœ”[39m[0m[90m return function functionName[0m
2025-04-03T23:45:06.4904404Z   [32m  [32mâœ”[39m[0m[90m return undefined for arrow function[0m
2025-04-03T23:45:06.4905540Z 
2025-04-03T23:45:06.4906258Z [0m  getModelsMapForPopulate[0m
2025-04-03T23:45:06.4970113Z   [32m  [32mâœ”[39m[0m[90m should error on missing options on populate[0m
2025-04-03T23:45:06.5141380Z 
2025-04-03T23:45:06.5143426Z [0m  getRelatedIndexes[0m
2025-04-03T23:45:06.5158788Z [0m    getRelatedSchemaIndexes[0m
2025-04-03T23:45:06.5178470Z     [32m  [32mâœ”[39m[0m[90m with base model, no discriminator, it gets all indexes[0m
2025-04-03T23:45:06.5523391Z     [32m  [32mâœ”[39m[0m[90m with base model that has discriminator, it ignores discriminator indexes[0m
2025-04-03T23:45:06.5909609Z     [32m  [32mâœ”[39m[0m[90m with base model that has discriminator, it includes discriminator indexes that only checks for existence[0m
2025-04-03T23:45:06.6112107Z     [32m  [32mâœ”[39m[0m[90m with discriminator model, it only gets discriminator indexes[0m
2025-04-03T23:45:06.6509873Z [0m    getRelatedDBIndexes[0m
2025-04-03T23:45:06.6516817Z     [32m  [32mâœ”[39m[0m[90m with base model, no discriminator, it gets all indexes[0m
2025-04-03T23:45:06.6600858Z     [32m  [32mâœ”[39m[0m[90m with base model that has discriminator, it ignores discriminator indexes[0m
2025-04-03T23:45:06.6957611Z     [32m  [32mâœ”[39m[0m[90m with discriminator model, it only gets discriminator indexes[0m
2025-04-03T23:45:06.7319634Z 
2025-04-03T23:45:06.7320354Z [0m  isIndexEqual[0m
2025-04-03T23:45:06.7322619Z   [32m  [32mâœ”[39m[0m[90m ignores default collation options when comparing collations (gh-8994)[0m
2025-04-03T23:45:06.7324398Z   [32m  [32mâœ”[39m[0m[90m works when MongoDB index has collation but Mongoose index doesn't (gh-9224)[0m
2025-04-03T23:45:06.7326614Z   [32m  [32mâœ”[39m[0m[90m handles text indexes (gh-9225)[0m
2025-04-03T23:45:06.7327031Z 
2025-04-03T23:45:06.7327408Z [0m  isIndexSpecEqual[0m
2025-04-03T23:45:06.7329241Z   [32m  [32mâœ”[39m[0m[90m should return true for equal index specifications[0m
2025-04-03T23:45:06.7330504Z   [32m  [32mâœ”[39m[0m[90m should return false for different key order[0m
2025-04-03T23:45:06.7332077Z   [32m  [32mâœ”[39m[0m[90m should return false for different index keys[0m
2025-04-03T23:45:06.7332725Z 
2025-04-03T23:45:06.7333265Z [0m  isAsyncFunction[0m
2025-04-03T23:45:06.7334054Z   [32m  [32mâœ”[39m[0m[90m should return false for non-functions[0m
2025-04-03T23:45:06.7335196Z   [32m  [32mâœ”[39m[0m[90m should return false for sync function[0m
2025-04-03T23:45:06.7336200Z   [32m  [32mâœ”[39m[0m[90m should return true for async function[0m
2025-04-03T23:45:06.7337702Z   [32m  [32mâœ”[39m[0m[90m should return false for sync function returning a Promise[0m
2025-04-03T23:45:06.7338430Z 
2025-04-03T23:45:06.7338958Z [0m  isBsonType[0m
2025-04-03T23:45:06.7339853Z   [32m  [32mâœ”[39m[0m[90m true for any object with _bsontype property equal typename[0m
2025-04-03T23:45:06.7341186Z   [32m  [32mâœ”[39m[0m[90m true for any object without _bsontype property and undefined typename[0m
2025-04-03T23:45:06.7342561Z   [32m  [32mâœ”[39m[0m[90m false for any object with _bsontype property different of typename[0m
2025-04-03T23:45:06.7343694Z   [32m  [32mâœ”[39m[0m[90m false for any object without _bsontype property[0m
2025-04-03T23:45:06.7344599Z   [32m  [32mâœ”[39m[0m[90m true for Decimal128[0m
2025-04-03T23:45:06.7345962Z   [32m  [32mâœ”[39m[0m[90m true for ObjectId[0m
2025-04-03T23:45:06.7347121Z   [32m  [32mâœ”[39m[0m[90m true for Double[0m
2025-04-03T23:45:06.7349712Z   [32m  [32mâœ”[39m[0m[90m true for Int32[0m
2025-04-03T23:45:06.7350473Z 
2025-04-03T23:45:06.7351105Z [0m  isMongooseObject[0m
2025-04-03T23:45:06.7352107Z   [32m  [32mâœ”[39m[0m[90m is when value.$__ != null[0m
2025-04-03T23:45:06.7353363Z   [32m  [32mâœ”[39m[0m[90m is when value is a MongooseArray[0m
2025-04-03T23:45:06.7354623Z   [32m  [32mâœ”[39m[0m[90m is when value.isMongooseBuffer is truthy[0m
2025-04-03T23:45:06.7358474Z   [32m  [32mâœ”[39m[0m[90m is when value.$isMongooseMap is truthy[0m
2025-04-03T23:45:06.7359391Z   [32m  [32mâœ”[39m[0m[90m is not when anything else[0m
2025-04-03T23:45:06.7359822Z 
2025-04-03T23:45:06.7360095Z [0m  isObject[0m
2025-04-03T23:45:06.7360560Z [0m    true for[0m
2025-04-03T23:45:06.7366994Z     [32m  [32mâœ”[39m[0m[90m {}[0m
2025-04-03T23:45:06.7367688Z     [32m  [32mâœ”[39m[0m[90m Buffer[0m
2025-04-03T23:45:06.7368324Z     [32m  [32mâœ”[39m[0m[90m Object[0m
2025-04-03T23:45:06.7368909Z [0m    false for[0m
2025-04-03T23:45:06.7369451Z     [32m  [32mâœ”[39m[0m[90m ""[0m
2025-04-03T23:45:06.7370054Z     [32m  [32mâœ”[39m[0m[90m /.*/[0m
2025-04-03T23:45:06.7370646Z     [32m  [32mâœ”[39m[0m[90m [][0m
2025-04-03T23:45:06.7371817Z     [32m  [32mâœ”[39m[0m[90m Array[0m
2025-04-03T23:45:06.7372485Z     [32m  [32mâœ”[39m[0m[90m Function[0m
2025-04-03T23:45:06.7373113Z     [32m  [32mâœ”[39m[0m[90m RegExp[0m
2025-04-03T23:45:06.7373749Z     [32m  [32mâœ”[39m[0m[90m String[0m
2025-04-03T23:45:06.7374368Z     [32m  [32mâœ”[39m[0m[90m "[object Object]"[0m
2025-04-03T23:45:06.7374743Z 
2025-04-03T23:45:06.7375246Z [0m  isSimpleValidator[0m
2025-04-03T23:45:06.7375897Z   [32m  [32mâœ”[39m[0m[90m empty object[0m
2025-04-03T23:45:06.7376784Z   [32m  [32mâœ”[39m[0m[90m object with one primitive attribute[0m
2025-04-03T23:45:06.7378383Z   [32m  [32mâœ”[39m[0m[90m object with one simple array attribute[0m
2025-04-03T23:45:06.7379527Z   [32m  [32mâœ”[39m[0m[90m object with some native objects[0m
2025-04-03T23:45:06.7380746Z   [32m  [32mâœ”[39m[0m[90m object with one sub object[0m
2025-04-03T23:45:06.7384471Z   [32m  [32mâœ”[39m[0m[90m object with one attribute of type MongooseDocumentArray[0m
2025-04-03T23:45:06.7385306Z 
2025-04-03T23:45:06.7385615Z [0m  getSchemaTypes[0m
2025-04-03T23:45:06.7399200Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators (gh-5970)[0m
2025-04-03T23:45:06.7414611Z   [32m  [32mâœ”[39m[0m[90m multiple embedded discriminators (gh-6064)[0m
2025-04-03T23:45:06.7430421Z   [32m  [32mâœ”[39m[0m[90m handles already populated paths (gh-6798)[0m
2025-04-03T23:45:06.7440191Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators in nested arrays (gh-9984)[0m
2025-04-03T23:45:06.7444161Z   [32m  [32mâœ”[39m[0m[90m finds path underneath nested subdocument with map of mixed (gh-12530)[0m
2025-04-03T23:45:06.7444904Z 
2025-04-03T23:45:06.7445307Z [0m  getVirtual[0m
2025-04-03T23:45:06.7457112Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators (gh-6411)[0m
2025-04-03T23:45:06.7468919Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators under single nested (gh-6488)[0m
2025-04-03T23:45:06.7477129Z   [32m  [32mâœ”[39m[0m[90m handles multiple calls with discriminator under doc array (gh-6644)[0m
2025-04-03T23:45:06.7477821Z 
2025-04-03T23:45:06.7478121Z [0m  applyProjection[0m
2025-04-03T23:45:06.7480614Z   [32m  [32mâœ”[39m[0m[90m handles deep inclusive projections[0m
2025-04-03T23:45:06.7483847Z   [32m  [32mâœ”[39m[0m[90m handles deep exclusive projections[0m
2025-04-03T23:45:06.7487273Z   [32m  [32mâœ”[39m[0m[90m handles projections underneath arrays (gh-14680)[0m
2025-04-03T23:45:06.7487849Z 
2025-04-03T23:45:06.7488143Z [0m  isExclusive[0m
2025-04-03T23:45:06.7489058Z   [32m  [32mâœ”[39m[0m[90m handles $elemMatch (gh-14893)[0m
2025-04-03T23:45:06.7489493Z 
2025-04-03T23:45:06.7489778Z [0m  isInclusive[0m
2025-04-03T23:45:06.7491251Z   [32m  [32mâœ”[39m[0m[90m handles $elemMatch (gh-14893)[0m
2025-04-03T23:45:06.7491681Z 
2025-04-03T23:45:06.7492043Z [0m  isSubpath[0m
2025-04-03T23:45:06.7493247Z   [32m  [32mâœ”[39m[0m[90m handles single-part paths[0m
2025-04-03T23:45:06.7494627Z   [32m  [32mâœ”[39m[0m[90m handles multi-part paths[0m
2025-04-03T23:45:06.7495287Z 
2025-04-03T23:45:06.7495625Z [0m  promiseOrCallback()[0m
2025-04-03T23:45:06.7496210Z [0m    apply callback[0m
2025-04-03T23:45:06.7499377Z     [32m  [32mâœ”[39m[0m[90m without error[0m
2025-04-03T23:45:06.7500032Z [0m      with error[0m
2025-04-03T23:45:06.7501556Z       [32m  [32mâœ”[39m[0m[90m without event emitter[0m
2025-04-03T23:45:06.7504292Z       [32m  [32mâœ”[39m[0m[90m with event emitter[0m
2025-04-03T23:45:06.7504966Z [0m    chain promise[0m
2025-04-03T23:45:06.7505713Z [0m      without error[0m
2025-04-03T23:45:06.7508119Z       [32m  [32mâœ”[39m[0m[90m two args[0m
2025-04-03T23:45:06.7510206Z       [32m  [32mâœ”[39m[0m[90m more args[0m
2025-04-03T23:45:06.7510847Z [0m      with error[0m
2025-04-03T23:45:06.7512967Z       [32m  [32mâœ”[39m[0m[90m without event emitter[0m
2025-04-03T23:45:06.7515465Z       [32m  [32mâœ”[39m[0m[90m with event emitter[0m
2025-04-03T23:45:06.7515859Z 
2025-04-03T23:45:06.7516439Z [0m  castexpr[0m
2025-04-03T23:45:06.7525788Z   [32m  [32mâœ”[39m[0m[90m casts comparisons[0m
2025-04-03T23:45:06.7532433Z   [32m  [32mâœ”[39m[0m[90m casts conditions[0m
2025-04-03T23:45:06.7536478Z   [32m  [32mâœ”[39m[0m[90m casts boolean expressions[0m
2025-04-03T23:45:06.7541592Z   [32m  [32mâœ”[39m[0m[90m cast errors[0m
2025-04-03T23:45:06.7548476Z   [32m  [32mâœ”[39m[0m[90m casts $in[0m
2025-04-03T23:45:06.7552962Z   [32m  [32mâœ”[39m[0m[90m casts $not (gh-11689)[0m
2025-04-03T23:45:06.7556282Z   [32m  [32mâœ”[39m[0m[90m casts $round (gh-13881)[0m
2025-04-03T23:45:06.7560257Z   [32m  [32mâœ”[39m[0m[90m casts $switch (gh-14751)[0m
2025-04-03T23:45:06.7560911Z 
2025-04-03T23:45:06.7561334Z [0m  castUpdate[0m
2025-04-03T23:45:06.7565670Z   [32m  [32mâœ”[39m[0m[90m avoids adding `$each` if `$addToSet` on mixed array (gh-11284)[0m
2025-04-03T23:45:06.7573131Z   [32m  [32mâœ”[39m[0m[90m casts the update correctly when target discriminator type is missing[0m
2025-04-03T23:45:06.7573815Z 
2025-04-03T23:45:06.7574111Z [0m  sanitizeFilter[0m
2025-04-03T23:45:06.7575678Z   [32m  [32mâœ”[39m[0m[90m throws when filter includes a query selector[0m
2025-04-03T23:45:06.7577592Z   [32m  [32mâœ”[39m[0m[90m ignores explicitly defined query selectors[0m
2025-04-03T23:45:06.7579724Z   [32m  [32mâœ”[39m[0m[90m handles $and and $or[0m
2025-04-03T23:45:06.7580441Z 
2025-04-03T23:45:06.7580802Z [0m  selectPopulatedFields[0m
2025-04-03T23:45:06.7582341Z   [32m  [32mâœ”[39m[0m[90m selects refPath[0m
2025-04-03T23:45:06.7584368Z   [32m  [32mâœ”[39m[0m[90m adds refPath to projection if not deselected by user in exclusive projection[0m
2025-04-03T23:45:06.7585258Z 
2025-04-03T23:45:06.7585568Z [0m  Query helpers[0m
2025-04-03T23:45:06.7586142Z [0m    selectPopulatedFields[0m
2025-04-03T23:45:06.7587220Z     [32m  [32mâœ”[39m[0m[90m handles nested populate if parent key is projected in (gh-5669)[0m
2025-04-03T23:45:06.7588615Z     [32m  [32mâœ”[39m[0m[90m handles nested populate if parent key is projected out (gh-5669)[0m
2025-04-03T23:45:06.7590129Z     [32m  [32mâœ”[39m[0m[90m handle explicitly excluded paths (gh-7383)[0m
2025-04-03T23:45:06.7592562Z     [32m  [32mâœ”[39m[0m[90m handles paths selected with elemMatch (gh-9973)[0m
2025-04-03T23:45:06.7593110Z 
2025-04-03T23:45:06.7593506Z [0m  cleanPositionalOperators[0m
2025-04-03T23:45:06.7594331Z   [32m  [32mâœ”[39m[0m[90m replaces trailing array filter[0m
2025-04-03T23:45:06.7595428Z   [32m  [32mâœ”[39m[0m[90m replaces trailing $[0m
2025-04-03T23:45:06.7596218Z   [32m  [32mâœ”[39m[0m[90m replaces interior array filters[0m
2025-04-03T23:45:06.7597146Z   [32m  [32mâœ”[39m[0m[90m replaces interior elemMatch[0m
2025-04-03T23:45:06.7597556Z 
2025-04-03T23:45:06.7597708Z [0m  getPath()[0m
2025-04-03T23:45:06.7602954Z   [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:06.7608833Z   [32m  [32mâœ”[39m[0m[90m nested arrays[0m
2025-04-03T23:45:06.7609212Z 
2025-04-03T23:45:06.7609617Z [0m  getSubdocumentStrictValue[0m
2025-04-03T23:45:06.7612855Z   [32m  [32mâœ”[39m[0m[90m returns top-level document if no subdocs[0m
2025-04-03T23:45:06.7616991Z   [32m  [32mâœ”[39m[0m[90m picks up single nested subdocs along the path[0m
2025-04-03T23:45:06.7621074Z   [32m  [32mâœ”[39m[0m[90m picks up document arrays[0m
2025-04-03T23:45:06.7626356Z   [32m  [32mâœ”[39m[0m[90m picks up doubly nested subdocuments[0m
2025-04-03T23:45:06.7632329Z   [32m  [32mâœ”[39m[0m[90m picks up single nested subdocs under document arrays[0m
2025-04-03T23:45:06.7632829Z 
2025-04-03T23:45:06.7633418Z [0m  setDefaultsOnInsert[0m
2025-04-03T23:45:06.7638528Z   [32m  [32mâœ”[39m[0m[90m properly ignores nested paths (gh-6665)[0m
2025-04-03T23:45:06.7642921Z   [32m  [32mâœ”[39m[0m[90m ignores defaults underneath single nested subdocs (gh-10660)[0m
2025-04-03T23:45:06.7650752Z   [32m  [32mâœ”[39m[0m[90m ignores defaults underneath maps (gh-11235)[0m
2025-04-03T23:45:06.7653994Z   [32m  [32mâœ”[39m[0m[90m sets default if sibling of dotted path is $set (gh-11668)[0m
2025-04-03T23:45:06.7658350Z   [32m  [32mâœ”[39m[0m[90m skips default if parent is $set (gh-12279)[0m
2025-04-03T23:45:06.7658832Z 
2025-04-03T23:45:06.7659014Z [0m  setDottedPath[0m
2025-04-03T23:45:06.7660694Z   [32m  [32mâœ”[39m[0m[90m setDottedPath root element[0m
2025-04-03T23:45:06.7662402Z   [32m  [32mâœ”[39m[0m[90m setDottedPath sub element[0m
2025-04-03T23:45:06.7662835Z 
2025-04-03T23:45:06.7663223Z [0m  applyTimestampsToChildren[0m
2025-04-03T23:45:06.7671057Z   [32m  [32mâœ”[39m[0m[90m applies timestamps to nested subdocs within a $push (gh-11775)[0m
2025-04-03T23:45:06.7671700Z 
2025-04-03T23:45:06.7672089Z [0m  applyTimestampsToUpdate[0m
2025-04-03T23:45:06.7672980Z   [32m  [32mâœ”[39m[0m[90m handles update pipelines (gh-11151)[0m
2025-04-03T23:45:06.7673450Z 
2025-04-03T23:45:06.7673744Z [0m  castArrayFilters[0m
2025-04-03T23:45:06.7679180Z   [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:06.7685447Z   [32m  [32mâœ”[39m[0m[90m casts multiple[0m
2025-04-03T23:45:06.7692886Z   [32m  [32mâœ”[39m[0m[90m casts on multiple fields[0m
2025-04-03T23:45:06.7698596Z   [32m  [32mâœ”[39m[0m[90m sane error on same filter twice[0m
2025-04-03T23:45:06.7703800Z   [32m  [32mâœ”[39m[0m[90m using $in (gh-7431)[0m
2025-04-03T23:45:06.7710619Z   [32m  [32mâœ”[39m[0m[90m all positional operator works (gh-7540)[0m
2025-04-03T23:45:06.7717367Z   [32m  [32mâœ”[39m[0m[90m handles deeply nested arrays (gh-7603)[0m
2025-04-03T23:45:06.7722450Z   [32m  [32mâœ”[39m[0m[90m respects `strictQuery` option (gh-7728)[0m
2025-04-03T23:45:06.7725854Z   [32m  [32mâœ”[39m[0m[90m respects `strict` override (gh-11062)[0m
2025-04-03T23:45:06.7729615Z   [32m  [32mâœ”[39m[0m[90m respects `$or` option (gh-10696)[0m
2025-04-03T23:45:06.7735144Z   [32m  [32mâœ”[39m[0m[90m respects global strictQuery option (gh-11836)[0m
2025-04-03T23:45:06.7750078Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators (gh-12565)[0m
2025-04-03T23:45:06.7757594Z   [32m  [32mâœ”[39m[0m[90m correctly casts array of strings underneath doc array (gh-12565)[0m
2025-04-03T23:45:06.7758614Z 
2025-04-03T23:45:06.7759192Z [0m  removeUnusedArrayFilters[0m
2025-04-03T23:45:06.7760111Z   [32m  [32mâœ”[39m[0m[90m respects `$or` (gh-10696)[0m
2025-04-03T23:45:06.7760698Z 
2025-04-03T23:45:06.7761323Z [0m  timestamps[0m
2025-04-03T23:45:06.7933575Z   [32m  [32mâœ”[39m[0m[90m does not override timestamp params defined in schema (gh-4868)[0m
2025-04-03T23:45:06.8153380Z   [32m  [32mâœ”[39m[0m[90m updatedAt without createdAt (gh-5598)[0m
2025-04-03T23:45:06.8351871Z   [32m  [32mâœ”[39m[0m[90m updatedAt without createdAt for nested (gh-5598)[0m
2025-04-03T23:45:06.8592632Z   [32m  [32mâœ”[39m[0m[90m nested paths (gh-4503)[0m
2025-04-03T23:45:06.8717267Z   [32m  [32mâœ”[39m[0m[90m does not override nested timestamp params defined in schema (gh-4868)[0m
2025-04-03T23:45:06.8931960Z   [32m  [32mâœ”[39m[0m[90m does not override timestamps in nested schema (gh-4868)[0m
2025-04-03T23:45:06.9117419Z   [32m  [32mâœ”[39m[0m[90m no timestamps added when parent/child timestamps explicitly false (gh-7202)[0m
2025-04-03T23:45:06.9322788Z   [32m  [32mâœ”[39m[0m[90m avoids calling createdAt getters when setting updatedAt (gh-7496)[0m
2025-04-03T23:45:06.9556797Z   [32m  [32mâœ”[39m[0m[90m handles custom statics that conflict with built-in functions (gh-7698)[0m
2025-04-03T23:45:07.0277601Z   [32m  [32mâœ”[39m[0m[90m timestamps handle reusing child schemas (gh-7712)[0m[33m (70ms)[0m
2025-04-03T23:45:07.0423639Z   [32m  [32mâœ”[39m[0m[90m respects timestamps: false in child schema (gh-8007)[0m
2025-04-03T23:45:07.1110243Z   [32m  [32mâœ”[39m[0m[90m updates updatedAt when calling update without $set (gh-4768)[0m[33m (60ms)[0m
2025-04-03T23:45:07.1261937Z   [32m  [32mâœ”[39m[0m[90m updates updatedAt when calling update on subchild[0m
2025-04-03T23:45:07.1414982Z   [32m  [32mâœ”[39m[0m[90m sets timestamps on deeply nested docs on upsert (gh-8894)[0m
2025-04-03T23:45:07.1750282Z   [32m  [32mâœ”[39m[0m[90m sets timestamps on bulk write without `$set` (gh-9268)[0m
2025-04-03T23:45:07.1859735Z   [32m  [32mâœ”[39m[0m[90m works with property named "set" (gh-9428)[0m
2025-04-03T23:45:07.2108953Z   [32m  [32mâœ”[39m[0m[90m should not override createdAt when not selected (gh-4340)[0m
2025-04-03T23:45:07.2331333Z   [32m  [32mâœ”[39m[0m[90m timestamps with number types (gh-3957)[0m
2025-04-03T23:45:07.2447203Z   [32m  [32mâœ”[39m[0m[90m timestamps with custom timestamp (gh-3957)[0m
2025-04-03T23:45:07.2647225Z   [32m  [32mâœ”[39m[0m[90m timestamps with custom timestamp using getter method (gh-3957)[0m
2025-04-03T23:45:07.3025963Z   [32m  [32mâœ”[39m[0m[90m shouldnt bump updatedAt in single nested subdocs that are not modified (gh-9357)[0m
2025-04-03T23:45:07.3307722Z   [32m  [32mâœ”[39m[0m[90m bumps updatedAt with mixed $set (gh-9357)[0m
2025-04-03T23:45:07.3431686Z   [32m  [32mâœ”[39m[0m[90m makes createdAt immutable by default (gh-10139)[0m
2025-04-03T23:45:07.3671519Z   [32m  [32mâœ”[39m[0m[90m sets createdAt when using $push/$addToSet on path with positional operator (gh-10447)[0m
2025-04-03T23:45:07.3944516Z   [32m  [32mâœ”[39m[0m[90m sets createdAt when creating new single nested subdoc (gh-11603)[0m
2025-04-03T23:45:07.4131967Z   [32m  [32mâœ”[39m[0m[90m sets timestamps on sub-schema if parent schema does not have timestamps: true (gh-12119)[0m
2025-04-03T23:45:07.4284892Z   [32m  [32mâœ”[39m[0m[90m works with insertMany() and embedded discriminators (gh-12150)[0m
2025-04-03T23:45:07.4551248Z   [32m  [32mâœ”[39m[0m[90m findOneAndUpdate creates subdocuments with timestamps in correct order (gh-12475)[0m
2025-04-03T23:45:07.4699395Z   [32m  [32mâœ”[39m[0m[90m should avoid setting null update when updating document with timestamps gh-13379[0m
2025-04-03T23:45:07.4781671Z [0m    schema options[0m
2025-04-03T23:45:07.4785721Z     [32m  [32mâœ”[39m[0m[90m should have createdAt and updatedAt fields[0m
2025-04-03T23:45:07.4801569Z     [32m  [32mâœ”[39m[0m[90m should have createdAt and updatedAt fields[0m
2025-04-03T23:45:07.4818472Z     [32m  [32mâœ”[39m[0m[90m should have created and updatedAt fields[0m
2025-04-03T23:45:07.4834429Z     [32m  [32mâœ”[39m[0m[90m should have created and updatedAt fields[0m
2025-04-03T23:45:07.4851045Z     [32m  [32mâœ”[39m[0m[90m should have created and updated fields[0m
2025-04-03T23:45:07.4867875Z     [32m  [32mâœ”[39m[0m[90m should have just createdAt if updatedAt set to falsy[0m
2025-04-03T23:45:07.4883979Z     [32m  [32mâœ”[39m[0m[90m should have created and updated fields[0m
2025-04-03T23:45:07.4900124Z     [32m  [32mâœ”[39m[0m[90m TTL index with timestamps (gh-5656)[0m
2025-04-03T23:45:07.4913289Z [0m    auto update createdAt and updatedAt when create/save/update document[0m
2025-04-03T23:45:07.5055769Z     [32m  [32mâœ”[39m[0m[90m should have fields when create[0m
2025-04-03T23:45:07.5234677Z     [32m  [32mâœ”[39m[0m[90m sets timestamps on findOneAndUpdate[0m
2025-04-03T23:45:07.5412306Z     [32m  [32mâœ”[39m[0m[90m sets timestamps on findOneAndReplace (gh-9951)[0m
2025-04-03T23:45:07.5609858Z     [32m  [32mâœ”[39m[0m[90m sets timestamps on replaceOne (gh-9951)[0m
2025-04-03T23:45:07.5785219Z     [32m  [32mâœ”[39m[0m[90m should change updatedAt when save[0m
2025-04-03T23:45:07.5946242Z     [32m  [32mâœ”[39m[0m[90m should not change updatedAt when save with no modifications[0m
2025-04-03T23:45:07.6229039Z     [32m  [32mâœ”[39m[0m[90m can skip with timestamps: false (gh-7357)[0m
2025-04-03T23:45:07.6508941Z     [32m  [32mâœ”[39m[0m[90m can skip with `$timestamps(false)` (gh-12117)[0m
2025-04-03T23:45:07.6800987Z     [32m  [32mâœ”[39m[0m[90m should change updatedAt when findOneAndUpdate[0m
2025-04-03T23:45:07.7101856Z     [32m  [32mâœ”[39m[0m[90m insertMany with createdAt off (gh-6381)[0m
2025-04-03T23:45:07.7290411Z     [32m  [32mâœ”[39m[0m[90m should have fields when updateOne[0m
2025-04-03T23:45:07.7462902Z     [32m  [32mâœ”[39m[0m[90m should change updatedAt when updateOne[0m
2025-04-03T23:45:07.7666806Z     [32m  [32mâœ”[39m[0m[90m should change updatedAt when updateMany[0m
2025-04-03T23:45:07.7945379Z     [32m  [32mâœ”[39m[0m[90m nested docs (gh-4049)[0m
2025-04-03T23:45:07.8266670Z     [32m  [32mâœ”[39m[0m[90m nested docs with push (gh-4049)[0m
2025-04-03T23:45:07.8309056Z 
2025-04-03T23:45:07.8311280Z [0m  types array[0m
2025-04-03T23:45:07.8333706Z   [32m  [32mâœ”[39m[0m[90m behaves and quacks like an Array[0m
2025-04-03T23:45:07.8368787Z   [32m  [32mâœ”[39m[0m[90m is `deepEqual()` another array (gh-7700)[0m
2025-04-03T23:45:07.8464173Z   [32m  [32mâœ”[39m[0m[90m does not mutate passed-in array (gh-10766)[0m
2025-04-03T23:45:07.8556340Z   [32m  [32mâœ”[39m[0m[90m test "castNonArrays" property option[0m
2025-04-03T23:45:07.8642280Z   [32m  [32mâœ”[39m[0m[90m `castNonArrays` on specific paths takes precedence over global option[0m
2025-04-03T23:45:07.8662696Z   [32m  [32mâœ”[39m[0m[90m supports setting nested arrays directly (gh-13372)[0m
2025-04-03T23:45:07.8759591Z   [32m  [32mâœ”[39m[0m[90m calls array setters (gh-11380)[0m
2025-04-03T23:45:07.8829623Z [0m    hasAtomics[0m
2025-04-03T23:45:07.8831926Z     [32m  [32mâœ”[39m[0m[90m does not throw[0m
2025-04-03T23:45:07.8846523Z [0m    indexOf()[0m
2025-04-03T23:45:07.9159825Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:07.9189770Z [0m    includes()[0m
2025-04-03T23:45:07.9487081Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:07.9517672Z [0m    push()[0m
2025-04-03T23:45:07.9675699Z     [32m  [32mâœ”[39m[0m[90m works with numbers[0m
2025-04-03T23:45:07.9843474Z     [32m  [32mâœ”[39m[0m[90m works with strings[0m
2025-04-03T23:45:07.9995382Z     [32m  [32mâœ”[39m[0m[90m works with buffers[0m
2025-04-03T23:45:08.0235297Z     [32m  [32mâœ”[39m[0m[90m works with mixed[0m
2025-04-03T23:45:08.0399344Z     [32m  [32mâœ”[39m[0m[90m works with sub-docs[0m
2025-04-03T23:45:08.0628055Z     [32m  [32mâœ”[39m[0m[90m applies setters (gh-3032)[0m
2025-04-03T23:45:08.0712784Z [0m    splice()[0m
2025-04-03T23:45:08.0829686Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:08.1071334Z     [32m  [32mâœ”[39m[0m[90m on embedded docs[0m
2025-04-03T23:45:08.1160880Z [0m    unshift()[0m
2025-04-03T23:45:08.1362873Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:08.1501007Z     [32m  [32mâœ”[39m[0m[90m applies setters (gh-3032)[0m
2025-04-03T23:45:08.1615286Z [0m    shift()[0m
2025-04-03T23:45:08.1753951Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:08.1782255Z [0m    $shift[0m
2025-04-03T23:45:08.1917063Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:08.1945588Z [0m    pop()[0m
2025-04-03T23:45:08.2105334Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:08.2135616Z [0m    pull()[0m
2025-04-03T23:45:08.2400119Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:08.2544471Z     [32m  [32mâœ”[39m[0m[90m registers $pull atomic if pulling from middle (gh-14502)[0m
2025-04-03T23:45:08.2764063Z     [32m  [32mâœ”[39m[0m[90m handles pulling with no _id (gh-3341)[0m
2025-04-03T23:45:08.2990861Z     [32m  [32mâœ”[39m[0m[90m properly works with undefined[0m
2025-04-03T23:45:08.3107656Z     [32m  [32mâœ”[39m[0m[90m avoids adding default paths to query filter (gh-12294)[0m
2025-04-03T23:45:08.3214571Z     [32m  [32mâœ”[39m[0m[90m avoids adding default paths to query filter with _id (gh-12294)[0m
2025-04-03T23:45:08.3301795Z [0m    $pop()[0m
2025-04-03T23:45:08.3447770Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:08.3477532Z [0m    addToSet()[0m
2025-04-03T23:45:08.3661277Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:08.3796148Z     [32m  [32mâœ”[39m[0m[90m handles sub-documents that do not have an _id gh-1973[0m
2025-04-03T23:45:08.4070610Z     [32m  [32mâœ”[39m[0m[90m applies setters (gh-3032)[0m
2025-04-03T23:45:08.4094032Z [0m    options[0m
2025-04-03T23:45:08.4121665Z     [32m  [32mâœ”[39m[0m[90m castNonArrays (gh-7371) (gh-7479)[0m
2025-04-03T23:45:08.4395235Z     [32m  [32mâœ”[39m[0m[90m works with $addToSet and $push (gh-7479)[0m
2025-04-03T23:45:08.4489576Z [0m    nonAtomicPush()[0m
2025-04-03T23:45:08.4637232Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:08.4735281Z [0m    sort()[0m
2025-04-03T23:45:08.4884072Z     [32m  [32mâœ”[39m[0m[90m order should be saved[0m
2025-04-03T23:45:08.4987085Z [0m    set()[0m
2025-04-03T23:45:08.5142996Z     [32m  [32mâœ”[39m[0m[90m works combined with other ops[0m
2025-04-03T23:45:08.5312788Z     [32m  [32mâœ”[39m[0m[90m works with numbers[0m
2025-04-03T23:45:08.5544721Z     [32m  [32mâœ”[39m[0m[90m works with strings[0m
2025-04-03T23:45:08.5701699Z     [32m  [32mâœ”[39m[0m[90m works with buffers[0m
2025-04-03T23:45:08.5863617Z     [32m  [32mâœ”[39m[0m[90m works with mixed[0m
2025-04-03T23:45:08.6120344Z     [32m  [32mâœ”[39m[0m[90m works with sub-docs[0m
2025-04-03T23:45:08.6308610Z     [32m  [32mâœ”[39m[0m[90m applies setters (gh-3032)[0m
2025-04-03T23:45:08.6436158Z [0m    slice[0m
2025-04-03T23:45:08.6444982Z     [32m  [32mâœ”[39m[0m[90m copies schema correctly (gh-8482)[0m
2025-04-03T23:45:08.6528276Z     [32m  [32mâœ”[39m[0m[90m with unshift (gh-8482)[0m
2025-04-03T23:45:08.6621213Z     [32m  [32mâœ”[39m[0m[90m with push (gh-8655)[0m
2025-04-03T23:45:08.6634270Z [0m    setting a doc array[0m
2025-04-03T23:45:08.6777530Z     [32m  [32mâœ”[39m[0m[90m should adjust path positions[0m
2025-04-03T23:45:08.6803082Z [0m    paths with similar names[0m
2025-04-03T23:45:08.6957464Z     [32m  [32mâœ”[39m[0m[90m should be saved[0m
2025-04-03T23:45:08.6986481Z [0m    of number[0m
2025-04-03T23:45:08.7095214Z     [32m  [32mâœ”[39m[0m[90m allows null and undefined[0m
2025-04-03T23:45:08.7176458Z [0m    bug fixes[0m
2025-04-03T23:45:08.7326000Z     [32m  [32mâœ”[39m[0m[90m modifying subdoc props and manipulating the array works (gh-842)[0m
2025-04-03T23:45:08.7361822Z     [32m  [32mâœ”[39m[0m[90m toObject returns a vanilla JavaScript array (gh-9540)[0m
2025-04-03T23:45:08.7585541Z     [32m  [32mâœ”[39m[0m[90m pushing top level arrays and subarrays works (gh-1073)[0m
2025-04-03T23:45:08.7619718Z     [32m  [32mâœ”[39m[0m[90m finding ids by string (gh-4011)[0m
2025-04-03T23:45:08.7724349Z [0m    default type[0m
2025-04-03T23:45:08.7732583Z     [32m  [32mâœ”[39m[0m[90m casts to Mixed[0m
2025-04-03T23:45:08.7810289Z [0m    removing from an array atomically using MongooseArray#remove[0m
2025-04-03T23:45:08.7978592Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:08.8000874Z [0m      with subdocs[0m
2025-04-03T23:45:08.8109950Z       [32m  [32mâœ”[39m[0m[90m supports passing strings[0m
2025-04-03T23:45:08.8227745Z       [32m  [32mâœ”[39m[0m[90m supports passing numbers[0m
2025-04-03T23:45:08.8332996Z       [32m  [32mâœ”[39m[0m[90m supports passing objectids[0m
2025-04-03T23:45:08.8449969Z       [32m  [32mâœ”[39m[0m[90m supports passing buffers[0m
2025-04-03T23:45:08.8471770Z [0m    built-in array methods that modify element structure return vanilla arrays (gh-8356)[0m
2025-04-03T23:45:08.8480741Z     [32m  [32mâœ”[39m[0m[90m filter[0m
2025-04-03T23:45:08.8502086Z     [32m  [32mâœ”[39m[0m[90m flat[0m
2025-04-03T23:45:08.8523102Z     [32m  [32mâœ”[39m[0m[90m flatMap[0m
2025-04-03T23:45:08.8543124Z     [32m  [32mâœ”[39m[0m[90m map[0m
2025-04-03T23:45:08.8562842Z     [32m  [32mâœ”[39m[0m[90m slice[0m
2025-04-03T23:45:08.8603760Z 
2025-04-03T23:45:08.8604592Z [0m  types.buffer[0m
2025-04-03T23:45:08.8630809Z   [32m  [32mâœ”[39m[0m[90m test that a mongoose buffer behaves and quacks like a buffer[0m
2025-04-03T23:45:08.8820815Z   [32m  [32mâœ”[39m[0m[90m buffer validation[0m
2025-04-03T23:45:08.8960773Z   [32m  [32mâœ”[39m[0m[90m buffer storage[0m
2025-04-03T23:45:08.9132173Z   [32m  [32mâœ”[39m[0m[90m test write markModified[0m
2025-04-03T23:45:08.9265808Z   [32m  [32mâœ”[39m[0m[90m can be set to null[0m
2025-04-03T23:45:08.9607746Z   [32m  [32mâœ”[39m[0m[90m can be updated to null[0m
2025-04-03T23:45:08.9784887Z [0m    #toObject[0m
2025-04-03T23:45:08.9787467Z     [32m  [32mâœ”[39m[0m[90m retains custom subtypes[0m
2025-04-03T23:45:08.9800760Z [0m    subtype[0m
2025-04-03T23:45:08.9809667Z     [32m  [32mâœ”[39m[0m[90m default value[0m
2025-04-03T23:45:08.9904236Z     [32m  [32mâœ”[39m[0m[90m method works[0m
2025-04-03T23:45:09.0093061Z     [32m  [32mâœ”[39m[0m[90m is stored[0m
2025-04-03T23:45:09.0316795Z     [32m  [32mâœ”[39m[0m[90m changes are retained[0m
2025-04-03T23:45:09.0410285Z     [32m  [32mâœ”[39m[0m[90m cast from number (gh-3764)[0m
2025-04-03T23:45:09.0493579Z     [32m  [32mâœ”[39m[0m[90m cast from string[0m
2025-04-03T23:45:09.0579494Z     [32m  [32mâœ”[39m[0m[90m cast from array[0m
2025-04-03T23:45:09.0663306Z     [32m  [32mâœ”[39m[0m[90m cast from Binary[0m
2025-04-03T23:45:09.0749977Z     [32m  [32mâœ”[39m[0m[90m cast from json (gh-6863)[0m
2025-04-03T23:45:09.0832080Z     [32m  [32mâœ”[39m[0m[90m is an `instanceof Buffer`[0m
2025-04-03T23:45:09.0929286Z 
2025-04-03T23:45:09.0930174Z [0m  types.decimal128[0m
2025-04-03T23:45:09.0935787Z   [32m  [32mâœ”[39m[0m[90m casts from type number (gh-6331)[0m
2025-04-03T23:45:09.0943332Z   [32m  [32mâœ”[39m[0m[90m uses valueOf method if one exists (gh-6418)[0m
2025-04-03T23:45:09.0943819Z 
2025-04-03T23:45:09.0944072Z [0m  types.document[0m
2025-04-03T23:45:09.0970186Z   [32m  [32mâœ”[39m[0m[90m test that validate sets errors[0m
2025-04-03T23:45:09.0976269Z   [32m  [32mâœ”[39m[0m[90m objects can be passed to #set[0m
2025-04-03T23:45:09.0979506Z   [32m  [32mâœ”[39m[0m[90m Subdocuments can be passed to #set[0m
2025-04-03T23:45:09.1180380Z   [32m  [32mâœ”[39m[0m[90m Subdocument#remove (gh-531)[0m
2025-04-03T23:45:09.1199699Z [0m    setting nested objects[0m
2025-04-03T23:45:09.1267601Z     [32m  [32mâœ”[39m[0m[90m works (gh-1394)[0m
2025-04-03T23:45:09.1286129Z 
2025-04-03T23:45:09.1288094Z [0m  types.documentarray[0m
2025-04-03T23:45:09.1304154Z   [32m  [32mâœ”[39m[0m[90m behaves and quacks like an array[0m
2025-04-03T23:45:09.1368954Z   [32m  [32mâœ”[39m[0m[90m #id[0m
2025-04-03T23:45:09.1520562Z   [32m  [32mâœ”[39m[0m[90m #push should work on ArraySubdocument more than 2 levels deep[0m
2025-04-03T23:45:09.1669685Z   [32m  [32mâœ”[39m[0m[90m cleans modified subpaths on splice() (gh-7249)[0m
2025-04-03T23:45:09.1789263Z   [32m  [32mâœ”[39m[0m[90m modifies ownerDocument() on set (gh-8479)[0m
2025-04-03T23:45:09.1881478Z   [32m  [32mâœ”[39m[0m[90m modifying subdoc path after `slice()` (gh-8356)[0m
2025-04-03T23:45:09.2078972Z   [32m  [32mâœ”[39m[0m[90m supports setting to newly constructed array with no path or parent (gh-8108)[0m
2025-04-03T23:45:09.2208911Z   [32m  [32mâœ”[39m[0m[90m keeps atomics after setting (gh-10272)[0m
2025-04-03T23:45:09.2305722Z   [32m  [32mâœ”[39m[0m[90m handles `DocumentArray#create()` with populated paths (gh-10749)[0m
2025-04-03T23:45:09.2328983Z   [32m  [32mâœ”[39m[0m[90m applies _id default (gh-12264)[0m
2025-04-03T23:45:09.2424617Z   [32m  [32mâœ”[39m[0m[90m gets correct path when underneath map (gh-12997)[0m
2025-04-03T23:45:09.2518215Z   [32m  [32mâœ”[39m[0m[90m bubbles up validation errors from doubly nested doc arrays (gh-14101)[0m
2025-04-03T23:45:09.2597895Z [0m    inspect[0m
2025-04-03T23:45:09.2600437Z     [32m  [32mâœ”[39m[0m[90m works with bad data[0m
2025-04-03T23:45:09.2615841Z [0m    toObject[0m
2025-04-03T23:45:09.2617486Z     [32m  [32mâœ”[39m[0m[90m works with bad data[0m
2025-04-03T23:45:09.2640984Z     [32m  [32mâœ”[39m[0m[90m passes options to its documents (gh-1415) (gh-4455)[0m
2025-04-03T23:45:09.2666712Z     [32m  [32mâœ”[39m[0m[90m uses the correct transform (gh-1412)[0m
2025-04-03T23:45:09.2790621Z [0m    create()[0m
2025-04-03T23:45:09.2798646Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:09.2812697Z [0m    push()[0m
2025-04-03T23:45:09.2954564Z     [32m  [32mâœ”[39m[0m[90m does not re-cast instances of its embedded doc[0m
2025-04-03T23:45:09.2987764Z     [32m  [32mâœ”[39m[0m[90m corrects #ownerDocument() and index if value was created with array.create() (gh-1385)[0m
2025-04-03T23:45:09.3014633Z     [32m  [32mâœ”[39m[0m[90m corrects #ownerDocument() if value was created with array.create() and set() (gh-7504)[0m
2025-04-03T23:45:09.3102992Z     [32m  [32mâœ”[39m[0m[90m reports validation errors with correct index path (gh-7724)[0m
2025-04-03T23:45:09.3117506Z [0m    required (gh-6364)[0m
2025-04-03T23:45:09.3128965Z     [32m  [32mâœ”[39m[0m[90m on top level[0m
2025-04-03T23:45:09.3153643Z     [32m  [32mâœ”[39m[0m[90m in arr[0m
2025-04-03T23:45:09.3167749Z [0m    invalidate()[0m
2025-04-03T23:45:09.3181139Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-03T23:45:09.3207445Z     [32m  [32mâœ”[39m[0m[90m handles validation failures[0m
2025-04-03T23:45:09.3440125Z     [32m  [32mâœ”[39m[0m[90m clears listeners on cast error (gh-6723)[0m
2025-04-03T23:45:09.3477807Z     [32m  [32mâœ”[39m[0m[90m slice() copies parent and path (gh-8317)[0m
2025-04-03T23:45:09.3589454Z     [32m  [32mâœ”[39m[0m[90m map() works (gh-8317)[0m
2025-04-03T23:45:09.3612341Z     [32m  [32mâœ”[39m[0m[90m slice() after map() works (gh-8399)[0m
2025-04-03T23:45:09.3696853Z     [32m  [32mâœ”[39m[0m[90m unshift() after map() works (gh-9012)[0m
2025-04-03T23:45:09.3807159Z 
2025-04-03T23:45:09.3807993Z [0m  types.embeddeddocument[0m
2025-04-03T23:45:09.3820675Z   [32m  [32mâœ”[39m[0m[90m returns a proper ownerDocument (gh-3589)[0m
2025-04-03T23:45:09.3821141Z 
2025-04-03T23:45:09.3821509Z [0m  types.embeddeddocumentdeclarative[0m
2025-04-03T23:45:09.3822290Z [0m    with a parent with a field with type set to a POJO[0m
2025-04-03T23:45:09.3823200Z [0m      creates subdocument schema if `type` is an object with keys[0m
2025-04-03T23:45:09.3824143Z       [32m  [32mâœ”[39m[0m[90m interprets the POJO as a subschema (gh-7494)[0m
2025-04-03T23:45:09.3829808Z       [32m  [32mâœ”[39m[0m[90m enforces provided schema on the child path, unlike Mixed (gh-7494)[0m
2025-04-03T23:45:09.3836423Z       [32m  [32mâœ”[39m[0m[90m underneath array (gh-8627)[0m
2025-04-03T23:45:09.3840153Z       [32m  [32mâœ”[39m[0m[90m nested array (gh-8627)[0m
2025-04-03T23:45:09.3840994Z [0m    with a parent with a POJO field with a field "type" with a type set to "String"[0m
2025-04-03T23:45:09.3842372Z     [32m  [32mâœ”[39m[0m[90m does not create a path for child in either option[0m
2025-04-03T23:45:09.3843790Z     [32m  [32mâœ”[39m[0m[90m treats type as a property name not a type in both options[0m
2025-04-03T23:45:09.3852617Z     [32m  [32mâœ”[39m[0m[90m enforces provided schema on the child tree in both options, unlike Mixed (gh-7494)[0m
2025-04-03T23:45:09.3853282Z 
2025-04-03T23:45:09.3853745Z [0m  Map[0m
2025-04-03T23:45:09.3996564Z   [32m  [32mâœ”[39m[0m[90m validation[0m
2025-04-03T23:45:09.4111915Z   [32m  [32mâœ”[39m[0m[90m deep set[0m
2025-04-03T23:45:09.4303761Z   [32m  [32mâœ”[39m[0m[90m supports delete() (gh-7743)[0m
2025-04-03T23:45:09.4658132Z   [32m  [32mâœ”[39m[0m[90m query casting[0m
2025-04-03T23:45:09.4809322Z   [32m  [32mâœ”[39m[0m[90m defaults[0m
2025-04-03T23:45:09.4977524Z   [32m  [32mâœ”[39m[0m[90m validation[0m
2025-04-03T23:45:09.5112147Z   [32m  [32mâœ”[39m[0m[90m with single nested subdocs[0m
2025-04-03T23:45:09.5349941Z   [32m  [32mâœ”[39m[0m[90m discriminators[0m
2025-04-03T23:45:09.5848491Z   [32m  [32mâœ”[39m[0m[90m embedded discriminators[0m
2025-04-03T23:45:09.5980952Z   [32m  [32mâœ”[39m[0m[90m toJSON seralizes map paths (gh-6478)[0m
2025-04-03T23:45:09.6307089Z   [32m  [32mâœ”[39m[0m[90m updating map doesnt crash (gh-6750)[0m
2025-04-03T23:45:09.6447338Z   [32m  [32mâœ”[39m[0m[90m works with sub doc hooks (gh-6938)[0m
2025-04-03T23:45:09.6672235Z   [32m  [32mâœ”[39m[0m[90m array of mixed maps (gh-6995)[0m
2025-04-03T23:45:09.6923313Z   [32m  [32mâœ”[39m[0m[90m only runs setters once on init (gh-7272)[0m
2025-04-03T23:45:09.7176618Z   [32m  [32mâœ”[39m[0m[90m init then set marks correct path as modified (gh-7321)[0m
2025-04-03T23:45:09.7420975Z   [32m  [32mâœ”[39m[0m[90m nested maps (gh-7630)[0m
2025-04-03T23:45:09.7455740Z   [32m  [32mâœ”[39m[0m[90m get full path in validator with `propsParameter` (gh-7447)[0m
2025-04-03T23:45:09.7544657Z   [32m  [32mâœ”[39m[0m[90m treats `of` as a schema if typeKey is not set (gh-7859)[0m
2025-04-03T23:45:09.7639340Z   [32m  [32mâœ”[39m[0m[90m works with clone() (gh-8357)[0m
2025-04-03T23:45:09.7734002Z   [32m  [32mâœ”[39m[0m[90m maps of single nested docs with inline _id (gh-8424)[0m
2025-04-03T23:45:09.7976566Z   [32m  [32mâœ”[39m[0m[90m avoids marking path as modified if setting to same value (gh-8652)[0m
2025-04-03T23:45:09.8181594Z   [32m  [32mâœ”[39m[0m[90m handles setting map value to spread document (gh-8652)[0m
2025-04-03T23:45:09.8220861Z   [32m  [32mâœ”[39m[0m[90m runs getters on map values (gh-8730)[0m
2025-04-03T23:45:09.8342948Z   [32m  [32mâœ”[39m[0m[90m handles validation of document array with maps and nested paths (gh-8767)[0m
2025-04-03T23:45:09.8580558Z   [32m  [32mâœ”[39m[0m[90m persists `.clear()` (gh-9493)[0m
2025-04-03T23:45:09.8843309Z   [32m  [32mâœ”[39m[0m[90m supports `null` in map of subdocuments (gh-9628)[0m
2025-04-03T23:45:09.9069981Z   [32m  [32mâœ”[39m[0m[90m tracks changes correctly (gh-9811)[0m
2025-04-03T23:45:09.9355954Z   [32m  [32mâœ”[39m[0m[90m handles map of arrays (gh-9813)[0m
2025-04-03T23:45:09.9686824Z   [32m  [32mâœ”[39m[0m[90m can populate map of subdocs with doc array using ref function (gh-10584)[0m
2025-04-03T23:45:09.9734432Z   [32m  [32mâœ”[39m[0m[90m propagates `flattenMaps` to nested maps (gh-10653)[0m
2025-04-03T23:45:10.0095862Z   [32m  [32mâœ”[39m[0m[90m handles populating map of arrays (gh-12494)[0m
2025-04-03T23:45:10.0244846Z   [32m  [32mâœ”[39m[0m[90m clears nested changes in subdocs (gh-15108)[0m
2025-04-03T23:45:10.0473561Z   [32m  [32mâœ”[39m[0m[90m clears nested changes in doc arrays (gh-15108)[0m
2025-04-03T23:45:10.0718900Z   [32m  [32mâœ”[39m[0m[90m handles loading and modifying map of document arrays (gh-15196)[0m
2025-04-03T23:45:10.0739321Z [0m    populate[0m
2025-04-03T23:45:10.1043224Z     [32m  [32mâœ”[39m[0m[90m populate individual path[0m
2025-04-03T23:45:10.1375555Z     [32m  [32mâœ”[39m[0m[90m populate entire map[0m
2025-04-03T23:45:10.1676486Z     [32m  [32mâœ”[39m[0m[90m populate entire map in doc[0m
2025-04-03T23:45:10.2002315Z     [32m  [32mâœ”[39m[0m[90m avoid populating as map if populate on obj (gh-6460) (gh-8157)[0m
2025-04-03T23:45:10.2339386Z     [32m  [32mâœ”[39m[0m[90m handles setting populated path to doc and then saving (gh-7745)[0m
2025-04-03T23:45:10.2724046Z     [32m  [32mâœ”[39m[0m[90m handles populating path of subdoc (gh-9359)[0m
2025-04-03T23:45:10.2778076Z 
2025-04-03T23:45:10.2780700Z [0m  types.number[0m
2025-04-03T23:45:10.2784567Z   [32m  [32mâœ”[39m[0m[90m an empty string casts to null[0m
2025-04-03T23:45:10.2785762Z   [32m  [32mâœ”[39m[0m[90m a null number should castForQuery to null[0m
2025-04-03T23:45:10.2789005Z   [32m  [32mâœ”[39m[0m[90m array throws cast number error[0m
2025-04-03T23:45:10.2791426Z   [32m  [32mâœ”[39m[0m[90m three throws cast number error[0m
2025-04-03T23:45:10.2794412Z   [32m  [32mâœ”[39m[0m[90m {} throws cast number error[0m
2025-04-03T23:45:10.2796429Z   [32m  [32mâœ”[39m[0m[90m does not throw number cast error[0m
2025-04-03T23:45:10.2798200Z   [32m  [32mâœ”[39m[0m[90m boolean casts to 0/1 (gh-3475)[0m
2025-04-03T23:45:10.2800458Z   [32m  [32mâœ”[39m[0m[90m prefers valueOf function if one exists (gh-6299)[0m
2025-04-03T23:45:10.2804446Z   [32m  [32mâœ”[39m[0m[90m throws a CastError with a bad conditional (gh-6927)[0m
2025-04-03T23:45:10.2805717Z [0m    custom caster (gh-7045)[0m
2025-04-03T23:45:10.2814658Z     [32m  [32mâœ”[39m[0m[90m disallow empty string[0m
2025-04-03T23:45:10.2818340Z     [32m  [32mâœ”[39m[0m[90m disable casting[0m
2025-04-03T23:45:10.2818992Z 
2025-04-03T23:45:10.2819716Z [0m  types.subdocument[0m
2025-04-03T23:45:10.2851617Z   [32m  [32mâœ”[39m[0m[90m returns a proper ownerDocument (gh-3589)[0m
2025-04-03T23:45:10.2866894Z   [32m  [32mâœ”[39m[0m[90m not setting timestamps in subdocuments[0m
2025-04-03T23:45:10.2873845Z [0m    #isModified[0m
2025-04-03T23:45:10.2885955Z     [32m  [32mâœ”[39m[0m[90m defers to parent isModified (gh-8223)[0m
2025-04-03T23:45:10.2924425Z 
2025-04-03T23:45:10.2924844Z [0m  updateValidators[0m
2025-04-03T23:45:10.2925618Z [0m    validators[0m
2025-04-03T23:45:10.2930853Z     [32m  [32mâœ”[39m[0m[90m flattens paths[0m
2025-04-03T23:45:10.2934005Z     [32m  [32mâœ”[39m[0m[90m doesnt flatten dates (gh-3194)[0m
2025-04-03T23:45:10.2936581Z     [32m  [32mâœ”[39m[0m[90m doesnt flatten empty arrays (gh-3554)[0m
2025-04-03T23:45:10.2941811Z     [32m  [32mâœ”[39m[0m[90m doesnt flatten decimal128 (gh-7561)[0m
2025-04-03T23:45:10.2948561Z     [32m  [32mâœ”[39m[0m[90m handles nested paths correctly (gh-3587)[0m
2025-04-03T23:45:10.2949034Z 
2025-04-03T23:45:10.2949274Z [0m  utils[0m
2025-04-03T23:45:10.2950772Z   [32m  [32mâœ”[39m[0m[90m deepEquals on ObjectIds[0m
2025-04-03T23:45:10.2957919Z   [32m  [32mâœ”[39m[0m[90m deepEquals on maps (gh-9549)[0m
2025-04-03T23:45:10.2978368Z   [32m  [32mâœ”[39m[0m[90m deepEquals on MongooseDocumentArray works[0m
2025-04-03T23:45:10.2980219Z   [32m  [32mâœ”[39m[0m[90m deepEquals with MongooseBuffer[0m
2025-04-03T23:45:10.2982455Z   [32m  [32mâœ”[39m[0m[90m `deepEqual` treats objects with different order of keys as different (gh-9571)[0m
2025-04-03T23:45:10.2986836Z   [32m  [32mâœ”[39m[0m[90m deepEqual on arrays and non-arrays (gh-11417)[0m
2025-04-03T23:45:10.2987893Z   [32m  [32mâœ”[39m[0m[90m array.flatten[0m
2025-04-03T23:45:10.2989522Z   [32m  [32mâœ”[39m[0m[90m array.unique[0m
2025-04-03T23:45:10.2990244Z [0m    ActiveRoster[0m
2025-04-03T23:45:10.2994069Z     [32m  [32mâœ”[39m[0m[90m should detect a path as required if it has been required[0m
2025-04-03T23:45:10.2995338Z     [32m  [32mâœ”[39m[0m[90m should detect a path as inited if it has been inited[0m
2025-04-03T23:45:10.2996352Z     [32m  [32mâœ”[39m[0m[90m should detect a path as modified[0m
2025-04-03T23:45:10.2997481Z     [32m  [32mâœ”[39m[0m[90m should remove a path from an old state upon a state change[0m
2025-04-03T23:45:10.3000546Z     [32m  [32mâœ”[39m[0m[90m forEach should be able to iterate through the paths belonging to one state[0m
2025-04-03T23:45:10.3002612Z     [32m  [32mâœ”[39m[0m[90m forEach should be able to iterate through the paths in the union of two or more states[0m
2025-04-03T23:45:10.3003840Z     [32m  [32mâœ”[39m[0m[90m forEach should iterate through all paths that have any state if given no state arguments[0m
2025-04-03T23:45:10.3005523Z     [32m  [32mâœ”[39m[0m[90m should be able to detect if at least one path exists in a set of states[0m
2025-04-03T23:45:10.3008897Z     [32m  [32mâœ”[39m[0m[90m should be able to `map` over the set of paths in a given state[0m
2025-04-03T23:45:10.3010598Z     [32m  [32mâœ”[39m[0m[90m should `map` over all states' paths if no states are specified in a `map` invocation[0m
2025-04-03T23:45:10.3011872Z [0m    merge[0m
2025-04-03T23:45:10.3014366Z     [32m  [32mâœ”[39m[0m[90m merges two objects together without overriding properties & methods[0m
2025-04-03T23:45:10.3026887Z [0m    mergeClone[0m
2025-04-03T23:45:10.3028843Z     [32m  [32mâœ”[39m[0m[90m handles object with valueOf() (gh-6059)[0m
2025-04-03T23:45:10.3029697Z     [32m  [32mâœ”[39m[0m[90m copies dates correctly (gh-6145)[0m
2025-04-03T23:45:10.3030319Z [0m    errorToPOJO(...)[0m
2025-04-03T23:45:10.3030987Z     [32m  [32mâœ”[39m[0m[90m converts an error to a POJO[0m
2025-04-03T23:45:10.3031892Z     [32m  [32mâœ”[39m[0m[90m throws an error when argument is not an error object[0m
2025-04-03T23:45:10.3032787Z     [32m  [32mâœ”[39m[0m[90m works with classes that extend `Error`[0m
2025-04-03T23:45:10.3033415Z [0m    toCollectionName[0m
2025-04-03T23:45:10.3034097Z     [32m  [32mâœ”[39m[0m[90m returns the same name for system.profile[0m
2025-04-03T23:45:10.3036045Z     [32m  [32mâœ”[39m[0m[90m returns the same name for system.indexes[0m
2025-04-03T23:45:10.3037048Z     [32m  [32mâœ”[39m[0m[90m throws an error when name is not a string[0m
2025-04-03T23:45:10.3038003Z     [32m  [32mâœ”[39m[0m[90m throws an error when name is an empty string[0m
2025-04-03T23:45:10.3038974Z     [32m  [32mâœ”[39m[0m[90m uses the pluralize function when provided[0m
2025-04-03T23:45:10.3039428Z 
2025-04-03T23:45:10.3039681Z [0m  versioning[0m
2025-04-03T23:45:10.3074230Z   [32m  [32mâœ”[39m[0m[90m is only added to parent schema (gh-1265)[0m
2025-04-03T23:45:10.3421865Z   [32m  [32mâœ”[39m[0m[90m versioning without version key[0m
2025-04-03T23:45:10.3684578Z   [32m  [32mâœ”[39m[0m[90m version works with strict docs[0m
2025-04-03T23:45:10.3988571Z   [32m  [32mâœ”[39m[0m[90m version works with existing unversioned docs[0m
2025-04-03T23:45:10.4162056Z   [32m  [32mâœ”[39m[0m[90m versionKey is configurable[0m
2025-04-03T23:45:10.4482709Z   [32m  [32mâœ”[39m[0m[90m can be disabled[0m
2025-04-03T23:45:10.4746214Z   [32m  [32mâœ”[39m[0m[90m works with numbericAlpha paths[0m
2025-04-03T23:45:10.5083679Z   [32m  [32mâœ”[39m[0m[90m allows concurrent push[0m
2025-04-03T23:45:10.5266335Z   [32m  [32mâœ”[39m[0m[90m allows concurrent push and pull[0m
2025-04-03T23:45:10.5441032Z   [32m  [32mâœ”[39m[0m[90m throws if you set a positional path after pulling[0m
2025-04-03T23:45:10.5764436Z   [32m  [32mâœ”[39m[0m[90m allows pull/push after $set[0m
2025-04-03T23:45:10.5922365Z   [32m  [32mâœ”[39m[0m[90m should add version to where clause[0m
2025-04-03T23:45:10.6187991Z   [32m  [32mâœ”[39m[0m[90m $set after pull/push throws[0m
2025-04-03T23:45:10.6476488Z   [32m  [32mâœ”[39m[0m[90m doesnt persist conflicting changes[0m
2025-04-03T23:45:10.6749831Z   [32m  [32mâœ”[39m[0m[90m increments version on push[0m
2025-04-03T23:45:10.7027307Z   [32m  [32mâœ”[39m[0m[90m does not increment version when setting nested paths[0m
2025-04-03T23:45:10.7173235Z   [32m  [32mâœ”[39m[0m[90m increments version when modifying mixed array[0m
2025-04-03T23:45:10.7451253Z   [32m  [32mâœ”[39m[0m[90m increments version when $set-ing an array[0m
2025-04-03T23:45:10.7646487Z   [32m  [32mâœ”[39m[0m[90m increments version and converts to $set when mixing $shift and $addToSet[0m
2025-04-03T23:45:10.7851609Z   [32m  [32mâœ”[39m[0m[90m should not increment version for non-versioned fields[0m
2025-04-03T23:45:10.8128520Z   [32m  [32mâœ”[39m[0m[90m should not increment version for non-versioned sub-document fields[0m
2025-04-03T23:45:10.8331380Z   [32m  [32mâœ”[39m[0m[90m should persist correctly when optimisticConcurrency is true gh-10128[0m
2025-04-03T23:45:10.8568307Z   [32m  [32mâœ”[39m[0m[90m throws VersionError when saving with no changes and optimistic concurrency is true (gh-11295)[0m
2025-04-03T23:45:10.8865554Z   [32m  [32mâœ”[39m[0m[90m should support optimisticConcurrency being an array of strings[0m
2025-04-03T23:45:10.9109904Z   [32m  [32mâœ”[39m[0m[90m gh-1898[0m
2025-04-03T23:45:10.9477337Z   [32m  [32mâœ”[39m[0m[90m can remove version key from toObject() (gh-2675)[0m
2025-04-03T23:45:10.9703959Z   [32m  [32mâœ”[39m[0m[90m pull doesnt add version where clause (gh-6190)[0m
2025-04-03T23:45:11.0063517Z   [32m  [32mâœ”[39m[0m[90m copying doc works (gh-5779)[0m
2025-04-03T23:45:11.0362257Z   [32m  [32mâœ”[39m[0m[90m optimistic concurrency (gh-9001) (gh-5424)[0m
2025-04-03T23:45:11.0716290Z   [32m  [32mâœ”[39m[0m[90m adds version to filter if pushing to a nested array (gh-11108)[0m
2025-04-03T23:45:11.0898856Z   [32m  [32mâœ”[39m[0m[90m can store version key in nested property (gh-10980)[0m
2025-04-03T23:45:11.1092632Z [0m    doc.increment()[0m
2025-04-03T23:45:11.1290290Z     [32m  [32mâœ”[39m[0m[90m works without any other changes (gh-1475)[0m
2025-04-03T23:45:11.1338944Z 
2025-04-03T23:45:11.1339863Z [0m  VirtualType[0m
2025-04-03T23:45:11.1341026Z [0m    clone[0m
2025-04-03T23:45:11.1342908Z     [32m  [32mâœ”[39m[0m[90m copies path and options correctly (gh-8587)[0m
2025-04-03T23:45:11.1344849Z 
2025-04-03T23:45:11.1522325Z 
2025-04-03T23:45:11.1523364Z [92m [0m[32m 3736 passing[0m[90m (1m)[0m
2025-04-03T23:45:11.1524119Z [36m [0m[36m 54 pending[0m
2025-04-03T23:45:11.1525196Z 
