2025-04-04T18:15:24.9314673Z ##[group]Run npm test
2025-04-04T18:15:24.9315095Z [36;1mnpm test[0m
2025-04-04T18:15:24.9391380Z shell: /usr/bin/bash -e {0}
2025-04-04T18:15:24.9391776Z env:
2025-04-04T18:15:24.9392084Z   MONGOMS_VERSION: 7.0.12
2025-04-04T18:15:24.9392470Z   MONGOMS_PREFER_GLOBAL_PATH: 1
2025-04-04T18:15:24.9392876Z   FORCE_COLOR: true
2025-04-04T18:15:24.9393205Z ##[endgroup]
2025-04-04T18:15:25.1014596Z 
2025-04-04T18:15:25.1014908Z > mongoose@8.13.2 test
2025-04-04T18:15:25.1015550Z > mocha --exit ./test/*.test.js
2025-04-04T18:15:25.1016068Z 
2025-04-04T18:15:25.8038952Z [31m
2025-04-04T18:15:25.8039462Z You're not testing shards!
2025-04-04T18:15:25.8040110Z Please set the MONGOOSE_SHARD_TEST_URI env variable.
2025-04-04T18:15:25.8040775Z e.g: `mongodb://127.0.0.1:27017/database
2025-04-04T18:15:25.8041411Z Sharding must already be enabled on your database
2025-04-04T18:15:25.8041918Z [39m
2025-04-04T18:15:26.0737781Z 
2025-04-04T18:15:26.0793421Z [0m[0m
2025-04-04T18:15:26.1574710Z [0m  aggregate: [0m
2025-04-04T18:15:26.1839041Z   [32m  [32mâœ”[39m[0m[90m cursor (gh-3160)[0m
2025-04-04T18:15:26.1927469Z   [32m  [32mâœ”[39m[0m[90m catch() (gh-7267)[0m
2025-04-04T18:15:26.1995011Z   [32m  [32mâœ”[39m[0m[90m cursor() without options (gh-3855)[0m
2025-04-04T18:15:26.2069670Z   [32m  [32mâœ”[39m[0m[90m cursor() with useMongooseAggCursor (gh-5145)[0m
2025-04-04T18:15:26.2240803Z   [32m  [32mâœ”[39m[0m[90m cursor() with useMongooseAggCursor works (gh-5145) (gh-5394)[0m
2025-04-04T18:15:26.3464660Z   [32m  [32mâœ”[39m[0m[90m cursor() eachAsync (gh-4300)[0m[31m (116ms)[0m
2025-04-04T18:15:26.4640832Z   [32m  [32mâœ”[39m[0m[90m cursor() eachAsync with options (parallel)[0m[31m (115ms)[0m
2025-04-04T18:15:26.4669170Z   [32m  [32mâœ”[39m[0m[90m is now a proper aggregate cursor vs what it was before gh-10410[0m
2025-04-04T18:15:26.4829271Z   [32m  [32mâœ”[39m[0m[90m query by document (gh-4866)[0m
2025-04-04T18:15:26.5021940Z   [32m  [32mâœ”[39m[0m[90m sort by text score (gh-5258)[0m
2025-04-04T18:15:26.5214527Z   [32m  [32mâœ”[39m[0m[90m cursor supports transform option (gh-14331)[0m
2025-04-04T18:15:26.5339775Z   [32m  [32mâœ”[39m[0m[90m should not throw error if database connection has not been established (gh-13125)[0m
2025-04-04T18:15:26.5399505Z   [32m  [32mâœ”[39m[0m[90m throws error if calling near() with empty coordinates (gh-15188)[0m
2025-04-04T18:15:26.5618206Z   [32m  [32mâœ”[39m[0m[90m cursor() errors out if schema pre aggregate hook throws an error (gh-15279)[0m
2025-04-04T18:15:26.5694610Z [0m    append[0m
2025-04-04T18:15:26.5701819Z     [32m  [32mâœ”[39m[0m[90m (pipeline)[0m
2025-04-04T18:15:26.5724711Z     [32m  [32mâœ”[39m[0m[90m supports array as single argument[0m
2025-04-04T18:15:26.5749814Z     [32m  [32mâœ”[39m[0m[90m throws if non-operator parameter is passed[0m
2025-04-04T18:15:26.5776966Z     [32m  [32mâœ”[39m[0m[90m does not throw when 0 args passed[0m
2025-04-04T18:15:26.5808068Z     [32m  [32mâœ”[39m[0m[90m does not throw when empty array is passed as single argument[0m
2025-04-04T18:15:26.5831389Z [0m    project[0m
2025-04-04T18:15:26.5835487Z     [32m  [32mâœ”[39m[0m[90m (object)[0m
2025-04-04T18:15:26.5859606Z     [32m  [32mâœ”[39m[0m[90m (string)[0m
2025-04-04T18:15:26.5886463Z     [32m  [32mâœ”[39m[0m[90m ("a","b","c")[0m
2025-04-04T18:15:26.5909434Z     [32m  [32mâœ”[39m[0m[90m ["a","b","c"][0m
2025-04-04T18:15:26.5931407Z [0m    group[0m
2025-04-04T18:15:26.5934361Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:26.5956533Z [0m    skip[0m
2025-04-04T18:15:26.5959732Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:26.5981422Z [0m    limit[0m
2025-04-04T18:15:26.5984335Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:26.6006467Z [0m    unwind[0m
2025-04-04T18:15:26.6011818Z     [32m  [32mâœ”[39m[0m[90m ("field")[0m
2025-04-04T18:15:26.6037495Z [0m    match[0m
2025-04-04T18:15:26.6039837Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:26.6061824Z [0m    sort[0m
2025-04-04T18:15:26.6064489Z     [32m  [32mâœ”[39m[0m[90m (object)[0m
2025-04-04T18:15:26.6088378Z     [32m  [32mâœ”[39m[0m[90m (string)[0m
2025-04-04T18:15:26.6110779Z     [32m  [32mâœ”[39m[0m[90m ("a","b","c")[0m
2025-04-04T18:15:26.6133175Z     [32m  [32mâœ”[39m[0m[90m ["a","b","c"][0m
2025-04-04T18:15:26.6154895Z [0m    near[0m
2025-04-04T18:15:26.6158206Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:26.6189936Z     [32m  [32mâœ”[39m[0m[90m works with discriminators (gh-3304)[0m
2025-04-04T18:15:26.6209936Z [0m    lookup[0m
2025-04-04T18:15:26.6212337Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:26.6237586Z [0m    unionWith[0m
2025-04-04T18:15:26.6239918Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:26.6266861Z [0m    sample[0m
2025-04-04T18:15:26.6268280Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:26.6294010Z [0m    densify[0m
2025-04-04T18:15:26.6297393Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:26.6320102Z [0m    fill[0m
2025-04-04T18:15:26.6322306Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:26.6345319Z [0m    model()[0m
2025-04-04T18:15:26.6347453Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:26.6379329Z [0m    redact[0m
2025-04-04T18:15:26.6381967Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:26.6416190Z     [32m  [32mâœ”[39m[0m[90m works with (condition, string, string)[0m
2025-04-04T18:15:26.6437993Z [0m    Mongo 3.4 operators[0m
2025-04-04T18:15:26.6641145Z [0m      graphLookup[0m
2025-04-04T18:15:26.6645561Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:26.6687266Z       [32m  [32mâœ”[39m[0m[90m automatically prepends $ to the startWith field[0m
2025-04-04T18:15:26.6697348Z       [32m  [32mâœ”[39m[0m[90m Throws if no options are passed to graphLookup[0m
2025-04-04T18:15:26.6721700Z [0m      addFields[0m
2025-04-04T18:15:26.6725018Z       [32m  [32mâœ”[39m[0m[90m should throw if passed a non object[0m
2025-04-04T18:15:26.6752298Z       [32m  [32mâœ”[39m[0m[90m should throw if passed null[0m
2025-04-04T18:15:26.6778131Z       [32m  [32mâœ”[39m[0m[90m should throw if passed an Array[0m
2025-04-04T18:15:26.6804247Z       [32m  [32mâœ”[39m[0m[90m (object)[0m
2025-04-04T18:15:26.6829856Z [0m      facet[0m
2025-04-04T18:15:26.6853959Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:26.6859347Z [0m      replaceRoot[0m
2025-04-04T18:15:26.6867995Z       [32m  [32mâœ”[39m[0m[90m works with a string[0m
2025-04-04T18:15:26.6899891Z       [32m  [32mâœ”[39m[0m[90m works with an object (gh-6474)[0m
2025-04-04T18:15:26.6911974Z [0m      count[0m
2025-04-04T18:15:26.6915133Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:26.6953258Z [0m      sortByCount[0m
2025-04-04T18:15:26.6953969Z       [32m  [32mâœ”[39m[0m[90m works with a string argument[0m
2025-04-04T18:15:26.6970579Z       [32m  [32mâœ”[39m[0m[90m works with an object argument[0m
2025-04-04T18:15:26.6990951Z       [32m  [32mâœ”[39m[0m[90m throws if the argument is neither a string or object[0m
2025-04-04T18:15:26.7010448Z [0m    exec[0m
2025-04-04T18:15:26.7129119Z     [32m  [32mâœ”[39m[0m[90m project[0m
2025-04-04T18:15:26.7648661Z     [32m  [32mâœ”[39m[0m[90m group[0m
2025-04-04T18:15:26.7859246Z     [32m  [32mâœ”[39m[0m[90m skip[0m
2025-04-04T18:15:26.8084036Z     [32m  [32mâœ”[39m[0m[90m limit[0m
2025-04-04T18:15:26.8336892Z     [32m  [32mâœ”[39m[0m[90m unwind[0m
2025-04-04T18:15:26.8581319Z     [32m  [32mâœ”[39m[0m[90m unwind with obj[0m
2025-04-04T18:15:26.8819250Z     [32m  [32mâœ”[39m[0m[90m unwind throws with bad arg[0m
2025-04-04T18:15:26.9066959Z     [32m  [32mâœ”[39m[0m[90m match[0m
2025-04-04T18:15:26.9279166Z     [32m  [32mâœ”[39m[0m[90m sort[0m
2025-04-04T18:15:26.9686846Z     [32m  [32mâœ”[39m[0m[90m graphLookup[0m
2025-04-04T18:15:27.0039539Z     [32m  [32mâœ”[39m[0m[90m facet[0m
2025-04-04T18:15:27.0345145Z     [32m  [32mâœ”[39m[0m[90m complex pipeline[0m
2025-04-04T18:15:27.0617229Z     [32m  [32mâœ”[39m[0m[90m pipeline() (gh-5825)[0m
2025-04-04T18:15:27.0975464Z     [32m  [32mâœ”[39m[0m[90m explain()[0m
2025-04-04T18:15:27.1308399Z     [32m  [32mâœ”[39m[0m[90m handles aggregation options[0m
2025-04-04T18:15:27.1529625Z     [32m  [32mâœ”[39m[0m[90m readPref from schema (gh-5522)[0m
2025-04-04T18:15:27.1595680Z [0m      error when empty pipeline[0m
2025-04-04T18:15:27.1787880Z       [32m  [32mâœ”[39m[0m[90m without a callback[0m
2025-04-04T18:15:27.1808545Z [0m      error when not bound to a model[0m
2025-04-04T18:15:27.1993893Z       [32m  [32mâœ”[39m[0m[90m with callback[0m
2025-04-04T18:15:27.2016048Z [0m      middleware (gh-5251)[0m
2025-04-04T18:15:27.2711847Z       [32m  [32mâœ”[39m[0m[90m pre[0m
2025-04-04T18:15:27.3124344Z       [32m  [32mâœ”[39m[0m[90m setting option in pre (gh-7606)[0m
2025-04-04T18:15:27.3471104Z       [32m  [32mâœ”[39m[0m[90m adding to pipeline in pre (gh-8017)[0m
2025-04-04T18:15:27.3722277Z       [32m  [32mâœ”[39m[0m[90m post[0m
2025-04-04T18:15:27.3979751Z       [32m  [32mâœ”[39m[0m[90m error handler with agg error[0m
2025-04-04T18:15:27.4250038Z       [32m  [32mâœ”[39m[0m[90m error handler with pre error[0m
2025-04-04T18:15:27.4543717Z       [32m  [32mâœ”[39m[0m[90m with agg cursor[0m
2025-04-04T18:15:27.4820064Z       [32m  [32mâœ”[39m[0m[90m with explain() (gh-5887)[0m
2025-04-04T18:15:27.4872630Z [0m    Mongo 3.6 options[0m
2025-04-04T18:15:27.5073547Z     [32m  [32mâœ”[39m[0m[90m adds hint option[0m
2025-04-04T18:15:27.5120310Z 
2025-04-04T18:15:27.5121042Z [0m  BigInt[0m
2025-04-04T18:15:27.5134621Z   [32m  [32mâœ”[39m[0m[90m is a valid schema type[0m
2025-04-04T18:15:27.5142395Z   [32m  [32mâœ”[39m[0m[90m casting from strings and numbers[0m
2025-04-04T18:15:27.5165363Z   [32m  [32mâœ”[39m[0m[90m handles cast errors[0m
2025-04-04T18:15:27.5184149Z   [32m  [32mâœ”[39m[0m[90m supports required[0m
2025-04-04T18:15:27.5184852Z [0m    MongoDB integration[0m
2025-04-04T18:15:27.5348842Z     [32m  [32mâœ”[39m[0m[90m is stored as a long in MongoDB[0m
2025-04-04T18:15:27.5374674Z     [32m  [32mâœ”[39m[0m[90m becomes a bigint with lean using useBigInt64[0m
2025-04-04T18:15:27.5438442Z     [32m  [32mâœ”[39m[0m[90m can query with comparison operators[0m
2025-04-04T18:15:27.5650097Z     [32m  [32mâœ”[39m[0m[90m supports populate()[0m
2025-04-04T18:15:27.5670752Z 
2025-04-04T18:15:27.5671264Z [0m  browser[0m
2025-04-04T18:15:27.6752111Z   [32m  [32mâœ”[39m[0m[90m require() works with no other require calls (gh-5842)[0m[31m (107ms)[0m
2025-04-04T18:15:27.7836797Z   [32m  [32mâœ”[39m[0m[90m using schema (gh-7170)[0m[31m (108ms)[0m
2025-04-04T18:15:27.7845653Z   [32m  [32mâœ”[39m[0m[90m document works (gh-4987)[0m
2025-04-04T18:15:27.7887370Z   [32m  [32mâœ”[39m[0m[90m document validation with arrays (gh-6175)[0m
2025-04-04T18:15:27.7887802Z 
2025-04-04T18:15:27.7888557Z [0m  cast: [0m
2025-04-04T18:15:27.7897179Z   [32m  [32mâœ”[39m[0m[90m uses nested schema strict by default (gh-11291)[0m
2025-04-04T18:15:27.7911463Z   [32m  [32mâœ”[39m[0m[90m casts $comment (gh-14576)[0m
2025-04-04T18:15:27.7915737Z   [32m  [32mâœ”[39m[0m[90m avoids setting stripped out nested schema values to undefined (gh-11291)[0m
2025-04-04T18:15:27.7918119Z   [32m  [32mâœ”[39m[0m[90m uses schema-level strictQuery over schema-level strict (gh-12508)[0m
2025-04-04T18:15:27.7939994Z   [32m  [32mâœ”[39m[0m[90m handles $in with discriminators if $in has exactly 1 element (gh-13492)[0m
2025-04-04T18:15:27.7943991Z   [32m  [32mâœ”[39m[0m[90m treats unknown operators as passthrough (gh-15170)[0m
2025-04-04T18:15:27.7944958Z [0m    when casting an array[0m
2025-04-04T18:15:27.7947917Z     [32m  [32mâœ”[39m[0m[90m casts array with ObjectIds to $in query[0m
2025-04-04T18:15:27.7952708Z     [32m  [32mâœ”[39m[0m[90m casts array with ObjectIds to $in query when values are strings[0m
2025-04-04T18:15:27.7956852Z     [32m  [32mâœ”[39m[0m[90m throws when ObjectIds not valid[0m
2025-04-04T18:15:27.7959568Z     [32m  [32mâœ”[39m[0m[90m casts array with Strings to $in query[0m
2025-04-04T18:15:27.7962207Z     [32m  [32mâœ”[39m[0m[90m casts array with Strings when necessary[0m
2025-04-04T18:15:27.7964721Z     [32m  [32mâœ”[39m[0m[90m casts array with Numbers to $in query[0m
2025-04-04T18:15:27.7969277Z     [32m  [32mâœ”[39m[0m[90m casts $in and $nin with empty array (gh-5913) (gh-7806)[0m
2025-04-04T18:15:27.7972035Z     [32m  [32mâœ”[39m[0m[90m casts array with Numbers to $in query when values are strings[0m
2025-04-04T18:15:27.8044259Z     [32m  [32mâœ”[39m[0m[90m throws when Numbers are not valid[0m
2025-04-04T18:15:27.8060270Z [0m    $all[0m
2025-04-04T18:15:27.8067956Z     [32m  [32mâœ”[39m[0m[90m casts $elemMatch (gh-11314)[0m
2025-04-04T18:15:27.8068797Z [0m    bitwise query operators: [0m
2025-04-04T18:15:27.8073044Z     [32m  [32mâœ”[39m[0m[90m with a number[0m
2025-04-04T18:15:27.8076038Z     [32m  [32mâœ”[39m[0m[90m with an array[0m
2025-04-04T18:15:27.8078866Z     [32m  [32mâœ”[39m[0m[90m with a buffer[0m
2025-04-04T18:15:27.8082440Z     [32m  [32mâœ”[39m[0m[90m with int32 (gh-15170)[0m
2025-04-04T18:15:27.8085620Z     [32m  [32mâœ”[39m[0m[90m throws when invalid[0m
2025-04-04T18:15:27.8086461Z [0m    $expr[0m
2025-04-04T18:15:27.8092867Z     [32m  [32mâœ”[39m[0m[90m does not get filtered out (gh-10662)[0m
2025-04-04T18:15:27.8093353Z 
2025-04-04T18:15:27.8093739Z [0m  collections: capped:[0m
2025-04-04T18:15:27.8096725Z   [32m  [32mâœ”[39m[0m[90m schemas should have option size[0m
2025-04-04T18:15:27.9212253Z   [32m  [32mâœ”[39m[0m[90m creation[0m[31m (112ms)[0m
2025-04-04T18:15:27.9324355Z   [32m  [32mâœ”[39m[0m[90m skips when setting autoCreate to false (gh-8566)[0m
2025-04-04T18:15:27.9341602Z 
2025-04-04T18:15:27.9342047Z [0m  collections:[0m
2025-04-04T18:15:27.9439806Z   [32m  [32mâœ”[39m[0m[90m should buffer commands until connection is established[0m
2025-04-04T18:15:27.9529238Z   [32m  [32mâœ”[39m[0m[90m returns a promise if buffering and no callback (gh-7676)[0m
2025-04-04T18:15:28.0535657Z   [32m  [32mâœ”[39m[0m[90m returns a promise if buffering and callback with find() (gh-14184)[0m[31m (101ms)[0m
2025-04-04T18:15:28.1543027Z   [32m  [32mâœ”[39m[0m[90m handles bufferTimeoutMS in schemaUserProvidedOptions[0m[31m (101ms)[0m
2025-04-04T18:15:28.1549439Z   [32m  [32mâœ”[39m[0m[90m methods should that throw (unimplemented)[0m
2025-04-04T18:15:28.1567776Z   [32m  [32mâœ”[39m[0m[90m buffers for sync methods (gh-10610)[0m
2025-04-04T18:15:28.1590714Z 
2025-04-04T18:15:28.1592558Z [0m  connections:[0m
2025-04-04T18:15:28.1594532Z   [32m  [32mâœ”[39m[0m[90m should allow closing a closed connection[0m
2025-04-04T18:15:28.1598487Z   [32m  [32mâœ”[39m[0m[90m should return an error if malformed uri passed[0m
2025-04-04T18:15:28.2611075Z   [32m  [32mâœ”[39m[0m[90m force close (gh-5664)[0m[31m (101ms)[0m
2025-04-04T18:15:28.2645687Z   [32m  [32mâœ”[39m[0m[90m destroy connection and remove it permanently[0m
2025-04-04T18:15:28.2674957Z   [32m  [32mâœ”[39m[0m[90m verify that attempt to re-open destroyed connection throws error, via promise[0m
2025-04-04T18:15:28.2704498Z   [32m  [32mâœ”[39m[0m[90m verify that attempt to re-open destroyed connection throws error, via callback[0m
2025-04-04T18:15:28.3726893Z   [32m  [32mâœ”[39m[0m[90m force close with connection created after close (gh-5664)[0m[31m (102ms)[0m
2025-04-04T18:15:28.3827765Z   [32m  [32mâœ”[39m[0m[90m bufferCommands (gh-5720)[0m
2025-04-04T18:15:28.3845731Z   [32m  [32mâœ”[39m[0m[90m dbName option (gh-6106)[0m
2025-04-04T18:15:28.3866659Z   [32m  [32mâœ”[39m[0m[90m uses default database in uri if options.dbName is not provided[0m
2025-04-04T18:15:28.3937171Z   [32m  [32mâœ”[39m[0m[90m startSession() (gh-6653)[0m
2025-04-04T18:15:28.4067538Z   [32m  [32mâœ”[39m[0m[90m deleteModel()[0m
2025-04-04T18:15:28.5103727Z   [32m  [32mâœ”[39m[0m[90m throws a MongooseServerSelectionError on server selection timeout (gh-8451)[0m[31m (104ms)[0m
2025-04-04T18:15:28.6120942Z   [32m  [32mâœ”[39m[0m[90m avoids unhandled error on createConnection() if error handler registered (gh-14377)[0m[31m (101ms)[0m
2025-04-04T18:15:28.6124920Z   [36m  - `watch()` on a whole collection (gh-8425)[0m
2025-04-04T18:15:28.6156493Z   [32m  [32mâœ”[39m[0m[90m useDB inherits config from default connection (gh-8267)[0m
2025-04-04T18:15:28.6243465Z   [32m  [32mâœ”[39m[0m[90m allows setting client on a disconnected connection (gh-9164)[0m
2025-04-04T18:15:28.6259793Z   [32m  [32mâœ”[39m[0m[90m connection.asPromise() resolves to a connection instance (gh-9496)[0m
2025-04-04T18:15:28.6280236Z   [32m  [32mâœ”[39m[0m[90m allows overwriting models (gh-9406)[0m
2025-04-04T18:15:28.6292816Z   [32m  [32mâœ”[39m[0m[90m allows setting `overwriteModels` globally (gh-9406)[0m
2025-04-04T18:15:28.6295074Z   [32m  [32mâœ”[39m[0m[90m Connection id should be scoped per Mongoose Instance (gh-10025)[0m
2025-04-04T18:15:28.6303777Z   [32m  [32mâœ”[39m[0m[90m model() works with 1 argument and overwriteModels set to true (gh-12359)[0m
2025-04-04T18:15:28.6362815Z   [32m  [32mâœ”[39m[0m[90m creates collection if creating model while connection is disconnected with bufferCommands=false[0m
2025-04-04T18:15:28.6364921Z   [32m  [32mâœ”[39m[0m[90m should create connections with unique IDs also if one has been destroyed (gh-12966)[0m
2025-04-04T18:15:28.6367247Z   [32m  [32mâœ”[39m[0m[90m should not create default connection with createInitialConnection = false (gh-12965)[0m
2025-04-04T18:15:28.6409215Z   [32m  [32mâœ”[39m[0m[90m with autoCreate = false after schema create (gh-12940)[0m
2025-04-04T18:15:28.6414951Z   [32m  [32mâœ”[39m[0m[90m does not wait for buffering if autoCreate: false (gh-15241)[0m
2025-04-04T18:15:28.6416479Z   [32m  [32mâœ”[39m[0m[90m should not create default connection with createInitialConnection = false (gh-12965)[0m
2025-04-04T18:15:28.6418113Z   [36m  - should demonstrate the withSession() function (gh-14330)[0m
2025-04-04T18:15:28.6454777Z   [32m  [32mâœ”[39m[0m[90m listDatabases() should return a list of database objects with a name property (gh-9048)[0m
2025-04-04T18:15:28.6559436Z   [36m  - connection bulkWrite() ordered (gh-15028)[0m
2025-04-04T18:15:28.6657814Z   [36m  - connection bulkWrite() unordered (gh-15028)[0m
2025-04-04T18:15:28.7714367Z   [32m  [32mâœ”[39m[0m[90m buffers connection helpers[0m[31m (106ms)[0m
2025-04-04T18:15:28.8720882Z   [32m  [32mâœ”[39m[0m[90m connection helpers buffering times out[0m[31m (100ms)[0m
2025-04-04T18:15:28.8819400Z   [32m  [32mâœ”[39m[0m[90m supports db-level aggregate on connection (gh-15118)[0m
2025-04-04T18:15:28.8820300Z [0m    openUri (gh-5304)[0m
2025-04-04T18:15:28.8877652Z     [32m  [32mâœ”[39m[0m[90m with mongoose.createConnection()[0m
2025-04-04T18:15:28.8907568Z     [32m  [32mâœ”[39m[0m[90m with autoIndex (gh-5423)[0m
2025-04-04T18:15:28.9018054Z     [32m  [32mâœ”[39m[0m[90m with autoCreate (gh-6489)[0m
2025-04-04T18:15:28.9064248Z     [32m  [32mâœ”[39m[0m[90m with autoCreate = false (gh-8814)[0m
2025-04-04T18:15:28.9177957Z     [32m  [32mâœ”[39m[0m[90m autoCreate when collection already exists does not fail (gh-7122)[0m
2025-04-04T18:15:28.9181257Z     [32m  [32mâœ”[39m[0m[90m throws helpful error with undefined uri (gh-6763)[0m
2025-04-04T18:15:28.9218205Z     [32m  [32mâœ”[39m[0m[90m resolving with q (gh-5714)[0m
2025-04-04T18:15:28.9293274Z     [32m  [32mâœ”[39m[0m[90m connection plugins (gh-7378)[0m
2025-04-04T18:15:28.9294051Z [0m    helpers[0m
2025-04-04T18:15:28.9320347Z     [32m  [32mâœ”[39m[0m[90m dropDatabase()[0m
2025-04-04T18:15:28.9393669Z     [32m  [32mâœ”[39m[0m[90m dropCollection()[0m
2025-04-04T18:15:28.9494381Z     [32m  [32mâœ”[39m[0m[90m createCollection()[0m
2025-04-04T18:15:28.9592842Z     [32m  [32mâœ”[39m[0m[90m listCollections()[0m
2025-04-04T18:15:28.9610699Z [0m    events[0m
2025-04-04T18:15:28.9698827Z     [32m  [32mâœ”[39m[0m[90m operation-start[0m
2025-04-04T18:15:28.9712721Z     [32m  [32mâœ”[39m[0m[90m operation-end[0m
2025-04-04T18:15:28.9729160Z     [32m  [32mâœ”[39m[0m[90m commandStarted, commandFailed, commandSucceeded (gh-14611)[0m
2025-04-04T18:15:28.9747655Z [0m    errors[0m
2025-04-04T18:15:28.9750850Z     [32m  [32mâœ”[39m[0m[90m .catch() means error does not get thrown (gh-5229)[0m
2025-04-04T18:15:28.9765443Z     [32m  [32mâœ”[39m[0m[90m promise is rejected even if there is an error event listener (gh-7850)[0m
2025-04-04T18:15:28.9768368Z     [32m  [32mâœ”[39m[0m[90m readyState is disconnected if initial connection fails (gh-6244)[0m
2025-04-04T18:15:28.9769296Z [0m    .model()[0m
2025-04-04T18:15:28.9787873Z     [32m  [32mâœ”[39m[0m[90m allows passing a schema[0m
2025-04-04T18:15:28.9797798Z     [32m  [32mâœ”[39m[0m[90m should properly assign the db[0m
2025-04-04T18:15:28.9803558Z     [32m  [32mâœ”[39m[0m[90m prevents overwriting pre-existing models[0m
2025-04-04T18:15:28.9818247Z     [32m  [32mâœ”[39m[0m[90m allows passing identical name + schema args[0m
2025-04-04T18:15:28.9822554Z     [32m  [32mâœ”[39m[0m[90m throws on unknown model name[0m
2025-04-04T18:15:28.9824804Z [0m      passing collection name[0m
2025-04-04T18:15:28.9825584Z [0m        when model name already exists[0m
2025-04-04T18:15:28.9834208Z         [32m  [32mâœ”[39m[0m[90m returns a new uncached model[0m
2025-04-04T18:15:28.9837850Z [0m      passing object literal schemas[0m
2025-04-04T18:15:28.9935988Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:28.9955163Z [0m    modelNames()[0m
2025-04-04T18:15:28.9980744Z     [32m  [32mâœ”[39m[0m[90m returns names of all models registered on it[0m
2025-04-04T18:15:28.9981519Z [0m    connection pool sharing: [0m
2025-04-04T18:15:29.0014191Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:29.1563218Z     [32m  [32mâœ”[39m[0m[90m saves correctly[0m[31m (155ms)[0m
2025-04-04T18:15:29.1575251Z     [32m  [32mâœ”[39m[0m[90m emits connecting events on both[0m
2025-04-04T18:15:29.1594707Z     [32m  [32mâœ”[39m[0m[90m emits connected events on both[0m
2025-04-04T18:15:29.1612849Z     [32m  [32mâœ”[39m[0m[90m emits open events on both[0m
2025-04-04T18:15:29.1641253Z     [32m  [32mâœ”[39m[0m[90m emits disconnecting events on both, closing initial db[0m
2025-04-04T18:15:29.1660361Z     [32m  [32mâœ”[39m[0m[90m emits disconnecting events on both, closing secondary db[0m
2025-04-04T18:15:29.1693907Z     [32m  [32mâœ”[39m[0m[90m emits disconnected events on both, closing initial db[0m
2025-04-04T18:15:29.1723588Z     [32m  [32mâœ”[39m[0m[90m emits disconnected events on both, closing secondary db[0m
2025-04-04T18:15:29.1753307Z     [32m  [32mâœ”[39m[0m[90m closes correctly for all dbs, closing initial db[0m
2025-04-04T18:15:29.1807813Z     [32m  [32mâœ”[39m[0m[90m handles re-opening base connection (gh-11240)[0m
2025-04-04T18:15:29.1836659Z     [32m  [32mâœ”[39m[0m[90m closes correctly for all dbs, closing secondary db[0m
2025-04-04T18:15:29.1865645Z     [32m  [32mâœ”[39m[0m[90m cache connections to the same db[0m
2025-04-04T18:15:29.1945428Z     [32m  [32mâœ”[39m[0m[90m supports removing db (gh-11821)[0m
2025-04-04T18:15:29.1946501Z [0m    shouldAuthenticate()[0m
2025-04-04T18:15:29.1947237Z [0m      when using standard authentication[0m
2025-04-04T18:15:29.1947807Z [0m        when username and password are undefined[0m
2025-04-04T18:15:29.1976948Z         [32m  [32mâœ”[39m[0m[90m should return false[0m
2025-04-04T18:15:29.1977698Z [0m        when username and password are empty strings[0m
2025-04-04T18:15:29.2005572Z         [32m  [32mâœ”[39m[0m[90m should return false[0m
2025-04-04T18:15:29.2006605Z [0m        when both username and password are defined[0m
2025-04-04T18:15:29.2059349Z         [32m  [32mâœ”[39m[0m[90m should return true[0m
2025-04-04T18:15:29.2061304Z [0m      when using MONGODB-X509 authentication[0m
2025-04-04T18:15:29.2061962Z [0m        when username and password are undefined[0m
2025-04-04T18:15:29.2092298Z         [32m  [32mâœ”[39m[0m[90m should return false[0m
2025-04-04T18:15:29.2093121Z [0m        when only username is defined[0m
2025-04-04T18:15:29.2128076Z         [32m  [32mâœ”[39m[0m[90m should return false[0m
2025-04-04T18:15:29.2129845Z [0m        when both username and password are defined[0m
2025-04-04T18:15:29.2163259Z         [32m  [32mâœ”[39m[0m[90m should return false[0m
2025-04-04T18:15:29.2165134Z [0m    passing a function into createConnection[0m
2025-04-04T18:15:29.2260099Z     [32m  [32mâœ”[39m[0m[90m should store the name of the function (gh-6517)[0m
2025-04-04T18:15:29.2261243Z [0m    when connecting with a secondary read preference(gh-9374)[0m
2025-04-04T18:15:29.2262077Z [0m      mongoose.connect[0m
2025-04-04T18:15:29.2292686Z       [32m  [32mâœ”[39m[0m[90m forces autoIndex & autoCreate to be false if read preference is secondary or secondaryPreferred[0m
2025-04-04T18:15:29.2296211Z       [32m  [32mâœ”[39m[0m[90m throws if options try to set autoIndex to true[0m
2025-04-04T18:15:29.2300371Z       [32m  [32mâœ”[39m[0m[90m throws if options.config.autoIndex is true, even if options.autoIndex is false[0m
2025-04-04T18:15:29.2301489Z [0m      mongoose.createConnection[0m
2025-04-04T18:15:29.2357700Z       [32m  [32mâœ”[39m[0m[90m forces autoIndex & autoCreate to be false if read preference is secondary or secondaryPreferred (gh-9374)[0m
2025-04-04T18:15:29.2387134Z       [32m  [32mâœ”[39m[0m[90m keeps autoIndex & autoCreate as true by default if read preference is primaryPreferred (gh-9374)[0m
2025-04-04T18:15:29.2390396Z       [32m  [32mâœ”[39m[0m[90m throws if options try to set autoIndex to true[0m
2025-04-04T18:15:29.2393986Z       [32m  [32mâœ”[39m[0m[90m throws if options.config.autoIndex is true, even if options.autoIndex is false[0m
2025-04-04T18:15:29.2395001Z [0m    Automatic init[0m
2025-04-04T18:15:29.2656878Z     [32m  [32mâœ”[39m[0m[90m re-runs init() if connecting after disconnecting (gh-12047)[0m
2025-04-04T18:15:29.2838261Z     [32m  [32mâœ”[39m[0m[90m re-runs init() if running setClient() after disconnecting (gh-12047)[0m
2025-04-04T18:15:29.2839939Z [0m    Connection#syncIndexes() (gh-10893) (gh-11039)[0m
2025-04-04T18:15:29.3045950Z     [32m  [32mâœ”[39m[0m[90m Allows a syncIndexes option with connection mongoose.connection.syncIndexes (gh-10893)[0m
2025-04-04T18:15:29.3234260Z     [32m  [32mâœ”[39m[0m[90m does not sync indexes automatically when `autoIndex: true` (gh-11039)[0m
2025-04-04T18:15:29.3689709Z     [32m  [32mâœ”[39m[0m[90m stops as soon as one model fails with `continueOnError: false` (gh-11039)[0m
2025-04-04T18:15:29.3878260Z     [32m  [32mâœ”[39m[0m[90m error includes a property with all the errors when `continueOnError: false`[0m
2025-04-04T18:15:29.4062636Z     [32m  [32mâœ”[39m[0m[90m `continueOnError` is false by default[0m
2025-04-04T18:15:29.4483977Z     [32m  [32mâœ”[39m[0m[90m when `continueOnError: true` it will continue to sync indexes even if one model fails[0m[33m (42ms)[0m
2025-04-04T18:15:29.4870035Z     [32m  [32mâœ”[39m[0m[90m when `continueOnError: true` it will return a map of modelNames and their sync results/errors[0m
2025-04-04T18:15:29.5277320Z     [32m  [32mâœ”[39m[0m[90m mongoose.syncIndexes(...) accepts `continueOnError`[0m[33m (40ms)[0m
2025-04-04T18:15:29.5307088Z [0m    createCollections()[0m
2025-04-04T18:15:29.5509849Z     [32m  [32mâœ”[39m[0m[90m should create collections for all models on the connection with the createCollections() function (gh-13300)[0m
2025-04-04T18:15:29.5510577Z [0m    processConnectionOptions[0m
2025-04-04T18:15:29.5525628Z     [32m  [32mâœ”[39m[0m[90m should not throw an error when attempting to mutate unmutable options object gh-13335[0m
2025-04-04T18:15:29.5540055Z 
2025-04-04T18:15:29.5540578Z [0m  document[0m
2025-04-04T18:15:29.5569768Z   [32m  [32mâœ”[39m[0m[90m isSelected()[0m
2025-04-04T18:15:29.5574112Z   [32m  [32mâœ”[39m[0m[90m isDirectSelected (gh-5063)[0m
2025-04-04T18:15:29.5574448Z 
2025-04-04T18:15:29.5575670Z [0m  document modified[0m
2025-04-04T18:15:29.5584336Z [0m    modified states[0m
2025-04-04T18:15:29.5744393Z     [32m  [32mâœ”[39m[0m[90m reset after save[0m
2025-04-04T18:15:29.5869867Z     [32m  [32mâœ”[39m[0m[90m of embedded docs reset after save[0m
2025-04-04T18:15:29.5889005Z [0m    isDefault[0m
2025-04-04T18:15:29.5908393Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:29.5999099Z [0m    isModified[0m
2025-04-04T18:15:29.6016385Z     [32m  [32mâœ”[39m[0m[90m should not throw with no argument[0m
2025-04-04T18:15:29.6095419Z     [32m  [32mâœ”[39m[0m[90m when modifying keys[0m
2025-04-04T18:15:29.6166906Z     [32m  [32mâœ”[39m[0m[90m setting a key identically to its current value should not dirty the key[0m
2025-04-04T18:15:29.6273091Z     [32m  [32mâœ”[39m[0m[90m should support passing a string of keys separated by a blank space as the first argument[0m
2025-04-04T18:15:29.6465981Z     [32m  [32mâœ”[39m[0m[90m on entire document[0m
2025-04-04T18:15:29.6710253Z     [32m  [32mâœ”[39m[0m[90m should let you set ref paths (gh-1530)[0m
2025-04-04T18:15:29.6756027Z     [32m  [32mâœ”[39m[0m[90m properly sets populated for gh-1530 (gh-2678)[0m
2025-04-04T18:15:29.7008538Z     [32m  [32mâœ”[39m[0m[90m should support setting mixed paths by string (gh-1418)[0m
2025-04-04T18:15:29.7170685Z     [32m  [32mâœ”[39m[0m[90m should mark multi-level nested schemas as modified (gh-1754)[0m
2025-04-04T18:15:29.7316775Z     [32m  [32mâœ”[39m[0m[90m should reset the modified state after calling unmarkModified[0m
2025-04-04T18:15:29.7336220Z [0m      on DocumentArray[0m
2025-04-04T18:15:29.7354514Z       [32m  [32mâœ”[39m[0m[90m work[0m
2025-04-04T18:15:29.7432228Z       [32m  [32mâœ”[39m[0m[90m with push (gh-14024)[0m
2025-04-04T18:15:29.7521530Z       [32m  [32mâœ”[39m[0m[90m with push and set (gh-14024)[0m
2025-04-04T18:15:29.7616217Z       [32m  [32mâœ”[39m[0m[90m with accessors[0m
2025-04-04T18:15:29.7685061Z [0m      on MongooseArray[0m
2025-04-04T18:15:29.7705377Z       [32m  [32mâœ”[39m[0m[90m atomic methods[0m
2025-04-04T18:15:29.7774127Z       [32m  [32mâœ”[39m[0m[90m native methods[0m
2025-04-04T18:15:29.7836546Z [0m      manually populating arrays[0m
2025-04-04T18:15:29.7880489Z       [32m  [32mâœ”[39m[0m[90m gh-1530 for arrays (gh-3575)[0m
2025-04-04T18:15:29.8155439Z       [32m  [32mâœ”[39m[0m[90m setting nested arrays (gh-3721)[0m
2025-04-04T18:15:29.8207261Z       [32m  [32mâœ”[39m[0m[90m with discriminators (gh-3575)[0m
2025-04-04T18:15:29.8543115Z       [32m  [32mâœ”[39m[0m[90m updates embedded doc parents upon direct assignment (gh-5189)[0m
2025-04-04T18:15:29.8628457Z 
2025-04-04T18:15:29.8629657Z [0m  document.populate[0m
2025-04-04T18:15:29.8893163Z   [32m  [32mâœ”[39m[0m[90m works with await[0m
2025-04-04T18:15:29.9129892Z   [32m  [32mâœ”[39m[0m[90m populating using space delimited paths with options[0m
2025-04-04T18:15:29.9368206Z   [32m  [32mâœ”[39m[0m[90m using multiple populate calls[0m
2025-04-04T18:15:30.0193252Z   [32m  [32mâœ”[39m[0m[90m with custom model selection[0m
2025-04-04T18:15:30.0416861Z   [32m  [32mâœ”[39m[0m[90m one path, model selection as second argument[0m
2025-04-04T18:15:30.0941546Z   [32m  [32mâœ”[39m[0m[90m multiple paths, model selection as second argument[0m
2025-04-04T18:15:30.1175110Z   [32m  [32mâœ”[39m[0m[90m multiple paths, mixed argument types[0m
2025-04-04T18:15:30.1627551Z   [32m  [32mâœ”[39m[0m[90m multiple paths, multiple options[0m
2025-04-04T18:15:30.1842242Z   [32m  [32mâœ”[39m[0m[90m a property not in schema[0m
2025-04-04T18:15:30.2053160Z   [32m  [32mâœ”[39m[0m[90m of empty array[0m
2025-04-04T18:15:30.2443884Z   [32m  [32mâœ”[39m[0m[90m of array of null/undefined[0m
2025-04-04T18:15:30.2643599Z   [32m  [32mâœ”[39m[0m[90m of null property[0m
2025-04-04T18:15:30.3041749Z   [32m  [32mâœ”[39m[0m[90m String _ids[0m
2025-04-04T18:15:30.3464595Z   [32m  [32mâœ”[39m[0m[90m Buffer _ids[0m
2025-04-04T18:15:30.3686786Z   [32m  [32mâœ”[39m[0m[90m Number _ids[0m
2025-04-04T18:15:30.3916737Z   [32m  [32mâœ”[39m[0m[90m depopulates when setting `_id` (gh-3308)[0m
2025-04-04T18:15:30.4243695Z   [32m  [32mâœ”[39m[0m[90m does not allow you to call populate() on nested docs (gh-4552)[0m
2025-04-04T18:15:30.4768590Z   [32m  [32mâœ”[39m[0m[90m handles pulling from populated array (gh-3579)[0m
2025-04-04T18:15:30.7538617Z   [32m  [32mâœ”[39m[0m[90m populated() works with nested subdocs (gh-7685)[0m[33m (63ms)[0m
2025-04-04T18:15:30.8596910Z   [32m  [32mâœ”[39m[0m[90m works with single strings (gh-11160)[0m[33m (49ms)[0m
2025-04-04T18:15:30.9037505Z   [32m  [32mâœ”[39m[0m[90m works when populating a nested document inside an array parent (gh-14435)[0m
2025-04-04T18:15:30.9598736Z   [32m  [32mâœ”[39m[0m[90m supports populate with ordered option (gh-15231)[0m
2025-04-04T18:15:31.0038053Z   [32m  [32mâœ”[39m[0m[90m handles re-populating map of array of refs (gh-9359)[0m
2025-04-04T18:15:31.0057803Z [0m    populating two paths[0m
2025-04-04T18:15:31.0326090Z     [32m  [32mâœ”[39m[0m[90m with space delmited string works[0m
2025-04-04T18:15:31.0347181Z [0m    sub-level properties[0m
2025-04-04T18:15:31.0578640Z     [32m  [32mâœ”[39m[0m[90m with string arg[0m
2025-04-04T18:15:31.0600091Z [0m    of new document[0m
2025-04-04T18:15:31.0852682Z     [32m  [32mâœ”[39m[0m[90m should save just the populated _id (gh-1442)[0m
2025-04-04T18:15:31.0870727Z [0m    gh-2214[0m
2025-04-04T18:15:31.1400453Z     [32m  [32mâœ”[39m[0m[90m should return a real document array when populating[0m
2025-04-04T18:15:31.1420211Z [0m    gh-7889[0m
2025-04-04T18:15:31.1941595Z     [32m  [32mâœ”[39m[0m[90m should save item added to array after populating the array[0m
2025-04-04T18:15:31.1963766Z [0m    depopulate[0m
2025-04-04T18:15:31.2508532Z     [32m  [32mâœ”[39m[0m[90m can depopulate specific path (gh-2509)[0m
2025-04-04T18:15:31.3020083Z     [32m  [32mâœ”[39m[0m[90m depopulates all (gh-6073)[0m
2025-04-04T18:15:31.3379707Z     [32m  [32mâœ”[39m[0m[90m doesn't throw when called on a doc that is not populated (gh-6075)[0m
2025-04-04T18:15:31.4089242Z     [32m  [32mâœ”[39m[0m[90m depopulates virtuals (gh-6075)[0m
2025-04-04T18:15:31.4476715Z     [32m  [32mâœ”[39m[0m[90m depopulates field with empty array (gh-7740)[0m
2025-04-04T18:15:31.5196184Z     [32m  [32mâœ”[39m[0m[90m depopulates after pushing manually populated (gh-2509)[0m
2025-04-04T18:15:31.5214534Z [0m    #populated() with virtuals (gh-7440)[0m
2025-04-04T18:15:31.5693434Z     [32m  [32mâœ”[39m[0m[90m works with justOne: false[0m
2025-04-04T18:15:31.6203432Z     [32m  [32mâœ”[39m[0m[90m works with justOne: true[0m
2025-04-04T18:15:31.6225452Z [0m    #populated() with getters on embedded schema (gh-7521)[0m
2025-04-04T18:15:31.6718218Z     [32m  [32mâœ”[39m[0m[90m works with populate[0m
2025-04-04T18:15:31.6765980Z 
2025-04-04T18:15:31.6767929Z [0m  document: strict mode:[0m
2025-04-04T18:15:31.6802577Z   [32m  [32mâœ”[39m[0m[90m nested doc[0m
2025-04-04T18:15:31.7125709Z   [32m  [32mâœ”[39m[0m[90m sub doc[0m
2025-04-04T18:15:31.7149596Z   [32m  [32mâœ”[39m[0m[90m virtuals[0m
2025-04-04T18:15:31.7344907Z   [32m  [32mâœ”[39m[0m[90m can be overridden during set()[0m
2025-04-04T18:15:31.7491461Z   [32m  [32mâœ”[39m[0m[90m can be overridden during update()[0m
2025-04-04T18:15:31.7654737Z   [32m  [32mâœ”[39m[0m[90m can be overwritten with findOneAndUpdate (gh-1967)[0m
2025-04-04T18:15:31.7700024Z   [32m  [32mâœ”[39m[0m[90m handles setting `schema.options.strict` (gh-7103)[0m
2025-04-04T18:15:31.7792293Z [0m    should work[0m
2025-04-04T18:15:31.7939655Z     [32m  [32mâœ”[39m[0m[90m when creating models with non-strict schemas (gh-4274)[0m
2025-04-04T18:15:31.8066230Z     [32m  [32mâœ”[39m[0m[90m when creating models with strict schemas[0m
2025-04-04T18:15:31.8202780Z     [32m  [32mâœ”[39m[0m[90m when overriding strictness[0m
2025-04-04T18:15:31.8494854Z     [32m  [32mâœ”[39m[0m[90m when using Model#create[0m
2025-04-04T18:15:31.8512104Z [0m    "throws" mode[0m
2025-04-04T18:15:31.8539802Z     [32m  [32mâœ”[39m[0m[90m throws on set() of unknown property[0m
2025-04-04T18:15:31.8614900Z     [32m  [32mâœ”[39m[0m[90m fails with extra fields[0m
2025-04-04T18:15:31.8692337Z     [32m  [32mâœ”[39m[0m[90m doesnt throw with refs (gh-2665)[0m
2025-04-04T18:15:31.8771062Z     [32m  [32mâœ”[39m[0m[90m set nested to num throws ObjectExpectedError (gh-3735)[0m
2025-04-04T18:15:31.8866145Z 
2025-04-04T18:15:31.8872014Z [0m  document[0m
2025-04-04T18:15:31.8894322Z   [32m  [32mâœ”[39m[0m[90m test shortcut setters[0m
2025-04-04T18:15:31.8920538Z   [32m  [32mâœ”[39m[0m[90m test accessor of id[0m
2025-04-04T18:15:31.8936076Z   [32m  [32mâœ”[39m[0m[90m test shortcut of id hexString[0m
2025-04-04T18:15:31.8971529Z   [32m  [32mâœ”[39m[0m[90m toObject options[0m
2025-04-04T18:15:31.9304943Z   [32m  [32mâœ”[39m[0m[90m toObject transform[0m
2025-04-04T18:15:31.9340477Z   [32m  [32mâœ”[39m[0m[90m propagates toObject transform function to all subdocuments (gh-14589)[0m
2025-04-04T18:15:31.9422963Z   [32m  [32mâœ”[39m[0m[90m disabling aliases in toObject options (gh-7548)[0m
2025-04-04T18:15:31.9660802Z   [32m  [32mâœ”[39m[0m[90m can save multiple times with changes to complex subdocuments (gh-8531)[0m
2025-04-04T18:15:31.9841629Z   [32m  [32mâœ”[39m[0m[90m saves even if `_id` is null (gh-6406)[0m
2025-04-04T18:15:31.9956325Z   [32m  [32mâœ”[39m[0m[90m allows you to skip validation on save (gh-2981)[0m
2025-04-04T18:15:32.0168237Z   [32m  [32mâœ”[39m[0m[90m doesnt use custom toObject options on save[0m
2025-04-04T18:15:32.0267433Z   [32m  [32mâœ”[39m[0m[90m toObject should not set undefined values to null[0m
2025-04-04T18:15:32.0296115Z   [32m  [32mâœ”[39m[0m[90m methods on embedded docs should work[0m
2025-04-04T18:15:32.0431911Z   [32m  [32mâœ”[39m[0m[90m setting a positional path does not cast value to array[0m
2025-04-04T18:15:32.0480214Z   [32m  [32mâœ”[39m[0m[90m no maxListeners warning should occur[0m
2025-04-04T18:15:32.0741622Z   [32m  [32mâœ”[39m[0m[90m unselected required fields should pass validation[0m
2025-04-04T18:15:32.0889866Z   [32m  [32mâœ”[39m[0m[90m #invalidate[0m
2025-04-04T18:15:32.0918299Z   [32m  [32mâœ”[39m[0m[90m properly calls queue functions (gh-2856)[0m
2025-04-04T18:15:32.1123849Z   [32m  [32mâœ”[39m[0m[90m does not save duplicate items after two saves (gh-6900)[0m
2025-04-04T18:15:32.1241320Z   [32m  [32mâœ”[39m[0m[90m validateSync() on embedded doc (gh-6931)[0m
2025-04-04T18:15:32.1322795Z   [32m  [32mâœ”[39m[0m[90m retains user-defined key order with nested docs (gh-6944)[0m
2025-04-04T18:15:32.1491474Z   [32m  [32mâœ”[39m[0m[90m does not mark modified if setting nested subdoc to same value (gh-7048)[0m
2025-04-04T18:15:32.1710650Z   [32m  [32mâœ”[39m[0m[90m allow saving validation error in db (gh-7127)[0m
2025-04-04T18:15:32.1734852Z   [32m  [32mâœ”[39m[0m[90m handles mixed arrays with all syntaxes (gh-7109)[0m
2025-04-04T18:15:32.1820831Z   [32m  [32mâœ”[39m[0m[90m propsParameter option (gh-7145)[0m
2025-04-04T18:15:32.1907246Z   [32m  [32mâœ”[39m[0m[90m surfaces errors in subdoc pre validate (gh-7187)[0m
2025-04-04T18:15:32.1991523Z   [32m  [32mâœ”[39m[0m[90m runs setter only once when doing .set() underneath single nested (gh-7196)[0m
2025-04-04T18:15:32.2208093Z   [32m  [32mâœ”[39m[0m[90m should enable key with dot(.) on mixed types with checkKeys (gh-7144)[0m
2025-04-04T18:15:32.2329110Z   [32m  [32mâœ”[39m[0m[90m doesnt mark array as modified on init if embedded schema has default (gh-7227)[0m
2025-04-04T18:15:32.2520331Z   [32m  [32mâœ”[39m[0m[90m casts defaults for doc arrays (gh-7337)[0m
2025-04-04T18:15:32.2722588Z   [32m  [32mâœ”[39m[0m[90m updateOne() hooks (gh-7133) (gh-7423)[0m
2025-04-04T18:15:32.2958148Z   [32m  [32mâœ”[39m[0m[90m doesnt mark single nested doc date as modified if setting with string (gh-7264)[0m
2025-04-04T18:15:32.2984921Z   [32m  [32mâœ”[39m[0m[90m handles null `fields` param to constructor (gh-7271)[0m
2025-04-04T18:15:32.3076776Z   [32m  [32mâœ”[39m[0m[90m flattenMaps option for toObject() (gh-10872) (gh-7274) (gh-10486)[0m
2025-04-04T18:15:32.3286892Z   [32m  [32mâœ”[39m[0m[90m flattenObjectIds option for toObject() (gh-13341) (gh-2790)[0m
2025-04-04T18:15:32.3468507Z   [32m  [32mâœ”[39m[0m[90m `collection` property with strict: false (gh-7276)[0m
2025-04-04T18:15:32.3581193Z   [32m  [32mâœ”[39m[0m[90m should validateSync() all elements in doc array (gh-6746)[0m
2025-04-04T18:15:32.3687317Z   [32m  [32mâœ”[39m[0m[90m handles fake constructor (gh-7290)[0m
2025-04-04T18:15:32.3767501Z   [32m  [32mâœ”[39m[0m[90m handles fake __proto__ (gh-7290)[0m
2025-04-04T18:15:32.4017727Z   [32m  [32mâœ”[39m[0m[90m cast error with string path set to array in db (gh-7619)[0m
2025-04-04T18:15:32.4124198Z   [32m  [32mâœ”[39m[0m[90m doesnt crash if nested path with `get()` (gh-7316)[0m
2025-04-04T18:15:32.4357952Z   [32m  [32mâœ”[39m[0m[90m copies atomics from existing document array when setting doc array (gh-7472)[0m
2025-04-04T18:15:32.4513909Z   [32m  [32mâœ”[39m[0m[90m doesnt fail with custom update function (gh-7342)[0m
2025-04-04T18:15:32.4539769Z   [32m  [32mâœ”[39m[0m[90m setters that modify `this` should work on single nested when overwriting (gh-7585)[0m
2025-04-04T18:15:32.4626329Z   [32m  [32mâœ”[39m[0m[90m handles setting embedded doc to Object.assign() from another doc (gh-7645)[0m
2025-04-04T18:15:32.4904290Z   [32m  [32mâœ”[39m[0m[90m setting single nested subdoc with custom date types and getters/setters (gh-7601)[0m
2025-04-04T18:15:32.5089311Z   [32m  [32mâœ”[39m[0m[90m get() and set() underneath alias (gh-7592)[0m
2025-04-04T18:15:32.5184625Z   [32m  [32mâœ”[39m[0m[90m get() with getters: false (gh-7233)[0m
2025-04-04T18:15:32.5266309Z   [32m  [32mâœ”[39m[0m[90m overwriting single nested (gh-7660)[0m
2025-04-04T18:15:32.5350691Z   [32m  [32mâœ”[39m[0m[90m setting path to non-POJO object (gh-7639)[0m
2025-04-04T18:15:32.5444830Z   [32m  [32mâœ”[39m[0m[90m supports setting date properties with strict: false (gh-7907)[0m
2025-04-04T18:15:32.5618394Z   [32m  [32mâœ”[39m[0m[90m supports setting values to undefined with strict: false (gh-15192)[0m
2025-04-04T18:15:32.5736452Z   [32m  [32mâœ”[39m[0m[90m handles .set() on doc array within embedded discriminator (gh-7656)[0m
2025-04-04T18:15:32.5837306Z   [32m  [32mâœ”[39m[0m[90m $isEmpty() (gh-5369)[0m
2025-04-04T18:15:32.5938457Z   [32m  [32mâœ”[39m[0m[90m push() onto discriminator doc array (gh-7704)[0m
2025-04-04T18:15:32.6215722Z   [32m  [32mâœ”[39m[0m[90m doesnt call getter when saving (gh-7719)[0m
2025-04-04T18:15:32.6322549Z   [32m  [32mâœ”[39m[0m[90m skips malformed validators property (gh-7720)[0m
2025-04-04T18:15:32.6522742Z   [32m  [32mâœ”[39m[0m[90m nested set on subdocs works (gh-7748)[0m
2025-04-04T18:15:32.6633017Z   [32m  [32mâœ”[39m[0m[90m does not convert array to object with strict: false (gh-7733)[0m
2025-04-04T18:15:32.6872466Z   [32m  [32mâœ”[39m[0m[90m does not crash with array property named "undefined" (gh-7756)[0m
2025-04-04T18:15:32.6995726Z   [32m  [32mâœ”[39m[0m[90m fires pre save hooks on nested child schemas (gh-7792)[0m
2025-04-04T18:15:32.7110250Z   [32m  [32mâœ”[39m[0m[90m takes message from async custom validator promise rejection (gh-4913)[0m
2025-04-04T18:15:32.7277191Z   [32m  [32mâœ”[39m[0m[90m handles nested properties named `schema` (gh-7831)[0m
2025-04-04T18:15:32.7471180Z   [32m  [32mâœ”[39m[0m[90m handles nested properties named `on` (gh-11656)[0m
2025-04-04T18:15:32.7576496Z   [32m  [32mâœ”[39m[0m[90m copies virtuals from array subdocs when casting array of docs with same schema (gh-7898)[0m
2025-04-04T18:15:32.7788298Z   [32m  [32mâœ”[39m[0m[90m consistent post order traversal for array subdocs (gh-7929)[0m
2025-04-04T18:15:32.7980400Z   [32m  [32mâœ”[39m[0m[90m respects projection for getters (gh-7940)[0m
2025-04-04T18:15:32.8163636Z   [32m  [32mâœ”[39m[0m[90m loads doc with a `once` property successfully (gh-7958)[0m
2025-04-04T18:15:32.8348597Z   [32m  [32mâœ”[39m[0m[90m caster that converts to Number class works (gh-8150)[0m
2025-04-04T18:15:32.8546017Z   [32m  [32mâœ”[39m[0m[90m handles objectids and decimals with strict: false (gh-7973)[0m
2025-04-04T18:15:32.8655076Z   [32m  [32mâœ”[39m[0m[90m allows enum on array of array of strings (gh-7926)[0m
2025-04-04T18:15:32.9009978Z   [32m  [32mâœ”[39m[0m[90m allows saving an unchanged document if required populated path is null (gh-8018)[0m
2025-04-04T18:15:32.9041411Z   [32m  [32mâœ”[39m[0m[90m only calls validator once on mixed validator (gh-8067)[0m
2025-04-04T18:15:32.9129509Z   [32m  [32mâœ”[39m[0m[90m only calls validator once on nested mixed validator (gh-8117)[0m
2025-04-04T18:15:32.9446855Z   [32m  [32mâœ”[39m[0m[90m handles populate() with custom type that does not cast to doc (gh-8062)[0m
2025-04-04T18:15:32.9477732Z   [32m  [32mâœ”[39m[0m[90m can inspect() on a document array (gh-8037)[0m
2025-04-04T18:15:32.9777936Z   [32m  [32mâœ”[39m[0m[90m always passes unpopulated paths to validators (gh-8042)[0m
2025-04-04T18:15:32.9952087Z   [32m  [32mâœ”[39m[0m[90m set() merge option with single nested (gh-8201)[0m
2025-04-04T18:15:32.9976464Z   [32m  [32mâœ”[39m[0m[90m set() merge option with double nested[0m
2025-04-04T18:15:33.0172856Z   [32m  [32mâœ”[39m[0m[90m setting single nested subdoc with timestamps (gh-8251)[0m
2025-04-04T18:15:33.0374970Z   [32m  [32mâœ”[39m[0m[90m passing an object with toBSON() into `save()` (gh-8299)[0m
2025-04-04T18:15:33.0466218Z   [32m  [32mâœ”[39m[0m[90m handles getter setting virtual on manually populated doc when calling toJSON (gh-8295)[0m
2025-04-04T18:15:33.0593626Z   [32m  [32mâœ”[39m[0m[90m enum validator for number (gh-8139)[0m
2025-04-04T18:15:33.0743771Z   [32m  [32mâœ”[39m[0m[90m enum object syntax for number (gh-10648) (gh-8139)[0m
2025-04-04T18:15:33.0826239Z   [32m  [32mâœ”[39m[0m[90m support `pathsToValidate()` option for `validate()` (gh-7587)[0m
2025-04-04T18:15:33.1038823Z   [32m  [32mâœ”[39m[0m[90m array push with $position (gh-14244) (gh-4322)[0m
2025-04-04T18:15:33.1066343Z   [32m  [32mâœ”[39m[0m[90m setting a path to a single nested document should update the single nested doc parent (gh-8400)[0m
2025-04-04T18:15:33.1404397Z   [32m  [32mâœ”[39m[0m[90m setting an array to an array with some populated documents depopulates the whole array (gh-8443)[0m
2025-04-04T18:15:33.1469169Z   [32m  [32mâœ”[39m[0m[90m handles errors with name set to "ValidationError" (gh-8466)[0m
2025-04-04T18:15:33.1561061Z   [32m  [32mâœ”[39m[0m[90m throws an error if running validate() multiple times in parallel (gh-8468)[0m
2025-04-04T18:15:33.1736847Z   [32m  [32mâœ”[39m[0m[90m avoids parallel validate error when validating nested path with double nested subdocs (gh-8486)[0m
2025-04-04T18:15:33.1830869Z   [32m  [32mâœ”[39m[0m[90m supports function for date min/max validator error (gh-8512)[0m
2025-04-04T18:15:33.2000251Z   [32m  [32mâœ”[39m[0m[90m sets parent and ownerDocument correctly with document array default (gh-8509)[0m
2025-04-04T18:15:33.2204747Z   [32m  [32mâœ”[39m[0m[90m doesnt add `null` if property is undefined with minimize false (gh-8504)[0m
2025-04-04T18:15:33.2310234Z   [32m  [32mâœ”[39m[0m[90m creates document array defaults in forward order, not reverse (gh-8514)[0m
2025-04-04T18:15:33.2397934Z   [32m  [32mâœ”[39m[0m[90m can call subdocument validate multiple times in parallel (gh-8539)[0m
2025-04-04T18:15:33.2476641Z   [32m  [32mâœ”[39m[0m[90m sets `Document#op` when calling `validate()` (gh-8439)[0m
2025-04-04T18:15:33.2560058Z   [32m  [32mâœ”[39m[0m[90m schema-level transform (gh-8403)[0m
2025-04-04T18:15:33.2641614Z   [32m  [32mâœ”[39m[0m[90m transforms nested paths (gh-9543)[0m
2025-04-04T18:15:33.2833412Z   [32m  [32mâœ”[39m[0m[90m handles setting numeric paths with single nested subdocs (gh-8583)[0m
2025-04-04T18:15:33.2921219Z   [32m  [32mâœ”[39m[0m[90m setting nested array path to non-nested array wraps values top-down (gh-8544)[0m
2025-04-04T18:15:33.3009147Z   [32m  [32mâœ”[39m[0m[90m doesnt wrap empty nested array with insufficient depth[0m
2025-04-04T18:15:33.3098831Z   [32m  [32mâœ”[39m[0m[90m doesnt wipe out nested keys when setting nested key to empty object with minimize (gh-8565)[0m
2025-04-04T18:15:33.3237420Z   [32m  [32mâœ”[39m[0m[90m allows calling `validate()` in post validate hook without causing parallel validation error (gh-8597)[0m
2025-04-04T18:15:33.3368356Z   [32m  [32mâœ”[39m[0m[90m sets defaults when setting single nested subdoc (gh-8603)[0m
2025-04-04T18:15:33.3456876Z   [32m  [32mâœ”[39m[0m[90m handles validating single nested paths when specified in `pathsToValidate` (gh-8626)[0m
2025-04-04T18:15:33.3477070Z   [32m  [32mâœ”[39m[0m[90m copies immutable fields when constructing new doc from old doc (gh-8642)[0m
2025-04-04T18:15:33.3673413Z   [32m  [32mâœ”[39m[0m[90m can save nested array after setting (gh-8689)[0m
2025-04-04T18:15:33.3768811Z   [32m  [32mâœ”[39m[0m[90m handles validator errors on subdoc paths (gh-5226)[0m
2025-04-04T18:15:33.3847066Z   [32m  [32mâœ”[39m[0m[90m reports array cast error with index (gh-8888)[0m
2025-04-04T18:15:33.3960375Z   [32m  [32mâœ”[39m[0m[90m sets defaults if setting nested path to empty object with minimize false (gh-8829)[0m
2025-04-04T18:15:33.4065345Z   [32m  [32mâœ”[39m[0m[90m clears cast errors when setting an array subpath (gh-9080)[0m
2025-04-04T18:15:33.4259024Z   [32m  [32mâœ”[39m[0m[90m saves successfully if you splice() a sliced array (gh-9011)[0m
2025-04-04T18:15:33.4471225Z   [32m  [32mâœ”[39m[0m[90m handles modifying a subpath of a nested array of documents (gh-8926)[0m
2025-04-04T18:15:33.4640695Z   [32m  [32mâœ”[39m[0m[90m Document#save accepts `timestamps` option (gh-8947) for update[0m
2025-04-04T18:15:33.4755013Z   [32m  [32mâœ”[39m[0m[90m Document#save accepts `timestamps` option (gh-8947) on inserting a new document[0m
2025-04-04T18:15:33.4949500Z   [32m  [32mâœ”[39m[0m[90m Sets default when passing undefined as value for a key in a nested subdoc (gh-12102) (gh-9039)[0m
2025-04-04T18:15:33.5049627Z   [32m  [32mâœ”[39m[0m[90m allows accessing $locals when initializing (gh-9098)[0m
2025-04-04T18:15:33.5130092Z   [32m  [32mâœ”[39m[0m[90m supports skipping defaults on a document (gh-8271)[0m
2025-04-04T18:15:33.5213969Z   [32m  [32mâœ”[39m[0m[90m throws an error when `transform` returns a promise (gh-9163)[0m
2025-04-04T18:15:33.5409639Z   [32m  [32mâœ”[39m[0m[90m uses strict equality when checking mixed paths for modifications (gh-9165)[0m
2025-04-04T18:15:33.5507227Z   [32m  [32mâœ”[39m[0m[90m supports `useProjection` option for `toObject()` (gh-9118)[0m
2025-04-04T18:15:33.5738292Z   [32m  [32mâœ”[39m[0m[90m clears out priorDoc after overwriting single nested subdoc (gh-9208)[0m
2025-04-04T18:15:33.5901994Z   [32m  [32mâœ”[39m[0m[90m handles immutable properties underneath single nested subdocs when overwriting (gh-9281)[0m
2025-04-04T18:15:33.6053118Z   [32m  [32mâœ”[39m[0m[90m allows removing boolean key by setting it to `undefined` (gh-9275)[0m
2025-04-04T18:15:33.6501929Z   [32m  [32mâœ”[39m[0m[90m keeps manually populated paths when setting a nested path to itself (gh-9293)[0m[33m (42ms)[0m
2025-04-04T18:15:33.6636155Z   [32m  [32mâœ”[39m[0m[90m doesnt wipe out nested paths when setting a nested path to itself (gh-9313)[0m
2025-04-04T18:15:33.6818433Z   [32m  [32mâœ”[39m[0m[90m allows saving after setting document array to itself (gh-9266)[0m
2025-04-04T18:15:33.6917045Z   [32m  [32mâœ”[39m[0m[90m allows accessing document values from function default on array (gh-9351) (gh-6155)[0m
2025-04-04T18:15:33.7185244Z   [32m  [32mâœ”[39m[0m[90m handles pulling array subdocs when _id is an alias (gh-9319)[0m
2025-04-04T18:15:33.7210068Z   [32m  [32mâœ”[39m[0m[90m allows setting nested path to instance of model (gh-9392)[0m
2025-04-04T18:15:33.7428871Z   [32m  [32mâœ”[39m[0m[90m unmarks modified if setting a value to the same value as it was previously (gh-9396)[0m
2025-04-04T18:15:33.7685155Z   [32m  [32mâœ”[39m[0m[90m unmarks modified if setting a value to the same subdoc as it was previously (gh-9396)[0m
2025-04-04T18:15:33.7884096Z   [32m  [32mâœ”[39m[0m[90m does not unmark modified if there is no initial value (gh-9396)[0m
2025-04-04T18:15:33.8069822Z   [32m  [32mâœ”[39m[0m[90m correctly tracks saved state for deeply nested objects (gh-10773) (gh-9396)[0m
2025-04-04T18:15:33.8166977Z   [32m  [32mâœ”[39m[0m[90m marks path as errored if default function throws (gh-9408)[0m
2025-04-04T18:15:33.8256532Z   [32m  [32mâœ”[39m[0m[90m passes subdoc with initial values set to default function when init-ing (gh-9408)[0m
2025-04-04T18:15:33.8337890Z   [32m  [32mâœ”[39m[0m[90m passes document as an argument for `required` function in schema definition (gh-9433)[0m
2025-04-04T18:15:33.8420927Z   [32m  [32mâœ”[39m[0m[90m works with path named isSelected (gh-9438)[0m
2025-04-04T18:15:33.8499087Z   [32m  [32mâœ”[39m[0m[90m init tracks cast error reason (gh-9448)[0m
2025-04-04T18:15:33.8584342Z   [32m  [32mâœ”[39m[0m[90m correctly handles setting nested path underneath single nested subdocs (gh-9459)[0m
2025-04-04T18:15:33.8669212Z   [32m  [32mâœ”[39m[0m[90m $isValid() with space-delimited and array syntax (gh-9474)[0m
2025-04-04T18:15:33.8869872Z   [32m  [32mâœ”[39m[0m[90m avoids overwriting array subdocument when setting dotted path that is not selected (gh-9427)[0m
2025-04-04T18:15:33.9001605Z   [32m  [32mâœ”[39m[0m[90m ignore getters when diffing objects for change tracking (gh-9501)[0m
2025-04-04T18:15:33.9228118Z   [32m  [32mâœ”[39m[0m[90m allows defining middleware for all document hooks using regexp (gh-9190)[0m
2025-04-04T18:15:33.9451260Z   [32m  [32mâœ”[39m[0m[90m correctly handles setting nested props to other nested props (gh-9519)[0m
2025-04-04T18:15:33.9473314Z   [32m  [32mâœ”[39m[0m[90m sets fields after an undefined field (gh-9585)[0m
2025-04-04T18:15:33.9549441Z   [32m  [32mâœ”[39m[0m[90m passes document to `default` functions (gh-9633)[0m
2025-04-04T18:15:33.9636435Z   [32m  [32mâœ”[39m[0m[90m handles pre hook throwing a sync error (gh-9659)[0m
2025-04-04T18:15:33.9711401Z   [32m  [32mâœ”[39m[0m[90m returns undefined rather than entire object when calling `get()` with empty string (gh-9681)[0m
2025-04-04T18:15:33.9903764Z   [32m  [32mâœ”[39m[0m[90m keeps atomics when assigning array to filtered array (gh-9651)[0m
2025-04-04T18:15:33.9983780Z   [32m  [32mâœ”[39m[0m[90m does not pass doc to ObjectId or Date.now (gh-9633) (gh-9636)[0m
2025-04-04T18:15:34.0313404Z   [32m  [32mâœ”[39m[0m[90m supports getting a list of populated docs (gh-9702)[0m
2025-04-04T18:15:34.0588311Z   [32m  [32mâœ”[39m[0m[90m with virtual populate (gh-10148)[0m
2025-04-04T18:15:34.0719092Z   [32m  [32mâœ”[39m[0m[90m handles paths named `db` (gh-9798)[0m
2025-04-04T18:15:34.0940020Z   [32m  [32mâœ”[39m[0m[90m handles paths named `schema` gh-8798[0m
2025-04-04T18:15:34.1081186Z   [32m  [32mâœ”[39m[0m[90m handles nested paths named `schema` gh-8798[0m
2025-04-04T18:15:34.1438262Z   [32m  [32mâœ”[39m[0m[90m object setters will be applied for each object in array after populate (gh-9838)[0m
2025-04-04T18:15:34.1599452Z   [32m  [32mâœ”[39m[0m[90m gh9884[0m
2025-04-04T18:15:34.1861198Z   [32m  [32mâœ”[39m[0m[90m Makes sure pre deleteOne hook is executed (gh-9885)[0m
2025-04-04T18:15:34.2006035Z   [32m  [32mâœ”[39m[0m[90m gh9880[0m
2025-04-04T18:15:34.2300361Z   [32m  [32mâœ”[39m[0m[90m handles directly setting embedded document array element with projection (gh-9909)[0m
2025-04-04T18:15:34.2564540Z   [32m  [32mâœ”[39m[0m[90m toObject() uses child schema `flattenMaps` option by default (gh-9995)[0m
2025-04-04T18:15:34.2686933Z   [32m  [32mâœ”[39m[0m[90m does not double validate paths under mixed objects (gh-10141)[0m
2025-04-04T18:15:34.2964676Z   [32m  [32mâœ”[39m[0m[90m clears child document modified when setting map path underneath single nested (gh-10295)[0m
2025-04-04T18:15:34.3220934Z   [32m  [32mâœ”[39m[0m[90m avoids infinite recursion when setting single nested subdoc to array (gh-10351)[0m
2025-04-04T18:15:34.3251177Z   [32m  [32mâœ”[39m[0m[90m skips recursive merging (gh-9121)[0m
2025-04-04T18:15:34.3271344Z   [32m  [32mâœ”[39m[0m[90m does not pull non-schema paths from parent documents into nested paths (gh-10449)[0m
2025-04-04T18:15:34.3508511Z   [32m  [32mâœ”[39m[0m[90m sets properties in the order they are defined in the schema (gh-4665)[0m
2025-04-04T18:15:34.3935527Z   [32m  [32mâœ”[39m[0m[90m depopulate all should depopulate nested array population (gh-10592)[0m
2025-04-04T18:15:34.4079495Z   [32m  [32mâœ”[39m[0m[90m should allow dashes in the path name (gh-10677)[0m
2025-04-04T18:15:34.4172214Z   [32m  [32mâœ”[39m[0m[90m inits non-schema values if strict is false (gh-10828)[0m
2025-04-04T18:15:34.4272401Z   [32m  [32mâœ”[39m[0m[90m avoids depopulating when setting array of subdocs from different doc (gh-10819)[0m
2025-04-04T18:15:34.4524181Z   [32m  [32mâœ”[39m[0m[90m allows validating doc again if pre validate errors out (gh-10830)[0m
2025-04-04T18:15:34.4638511Z   [32m  [32mâœ”[39m[0m[90m ensures that doc.ownerDocument() and doc.parent() by default return this on the root document (gh-10884)[0m
2025-04-04T18:15:34.4732037Z   [32m  [32mâœ”[39m[0m[90m catches errors in `required` functions (gh-10968)[0m
2025-04-04T18:15:34.4951428Z   [32m  [32mâœ”[39m[0m[90m does not allow overwriting schema methods with strict: false (gh-11001)[0m
2025-04-04T18:15:34.5072026Z   [32m  [32mâœ”[39m[0m[90m allows setting nested to instance of document (gh-11011)[0m
2025-04-04T18:15:34.5366472Z   [32m  [32mâœ”[39m[0m[90m cleans modified paths on deeply nested subdocuments (gh-11060)[0m
2025-04-04T18:15:34.5747957Z   [32m  [32mâœ”[39m[0m[90m can manually populate subdocument refs (gh-10856)[0m
2025-04-04T18:15:34.5999570Z   [32m  [32mâœ”[39m[0m[90m can manually populate subdocument refs in `create()` (gh-10856)[0m
2025-04-04T18:15:34.6236735Z   [32m  [32mâœ”[39m[0m[90m populating subdocument refs underneath maps throws (gh-12494) (gh-10856)[0m
2025-04-04T18:15:34.6363356Z   [32m  [32mâœ”[39m[0m[90m handles save with undefined nested doc under subdoc (gh-11110)[0m
2025-04-04T18:15:34.6581593Z   [32m  [32mâœ”[39m[0m[90m correctly handles modifying array subdoc after setting array subdoc to same value (gh-11172)[0m
2025-04-04T18:15:34.6674027Z   [32m  [32mâœ”[39m[0m[90m handles `String` with `type` (gh-11199)[0m
2025-04-04T18:15:34.7016088Z   [32m  [32mâœ”[39m[0m[90m applies subdocument defaults when projecting dotted subdocument fields[0m
2025-04-04T18:15:34.7149968Z   [32m  [32mâœ”[39m[0m[90m handles initing nested properties in non-strict documents (gh-11309)[0m
2025-04-04T18:15:34.7354922Z   [32m  [32mâœ”[39m[0m[90m saves changes when setting a nested path to itself (gh-11395)[0m
2025-04-04T18:15:34.7375425Z   [32m  [32mâœ”[39m[0m[90m avoids setting nested properties on top-level document when init-ing with strict: false (gh-11526) (gh-11309)[0m
2025-04-04T18:15:34.7557439Z   [32m  [32mâœ”[39m[0m[90m handles deeply nested subdocuments when getting paths to validate (gh-11501)[0m
2025-04-04T18:15:34.7671090Z   [32m  [32mâœ”[39m[0m[90m handles casting array of spread documents (gh-11522)[0m
2025-04-04T18:15:34.7840924Z   [32m  [32mâœ”[39m[0m[90m avoids setting modified on subdocument defaults (gh-11528)[0m
2025-04-04T18:15:34.8048203Z   [32m  [32mâœ”[39m[0m[90m works when passing dot notation to mixed property (gh-1946)[0m
2025-04-04T18:15:34.8243306Z   [32m  [32mâœ”[39m[0m[90m correctly validates deeply nested document arrays (gh-11564)[0m
2025-04-04T18:15:34.8454338Z   [32m  [32mâœ”[39m[0m[90m reruns validation when modifying a document array path under a nested path after save (gh-11672)[0m
2025-04-04T18:15:34.8691950Z   [32m  [32mâœ”[39m[0m[90m avoids setting nested paths to null when they are set to `undefined` (gh-11723)[0m
2025-04-04T18:15:34.8830073Z   [32m  [32mâœ”[39m[0m[90m cleans modified subpaths when setting nested path under array to null when subpaths are modified (gh-11764)[0m
2025-04-04T18:15:34.9208684Z   [32m  [32mâœ”[39m[0m[90m avoids manually populating document that is manually populated in another doc with different unpopulatedValue (gh-11442) (gh-11008)[0m
2025-04-04T18:15:34.9239069Z   [32m  [32mâœ”[39m[0m[90m $getAllSubdocs gets document arrays underneath a nested path (gh-11917)[0m
2025-04-04T18:15:34.9327696Z   [32m  [32mâœ”[39m[0m[90m handles validation errors on deeply nested subdocuments underneath a nested path (gh-12021)[0m
2025-04-04T18:15:34.9460119Z   [32m  [32mâœ”[39m[0m[90m supports virtuals named `isValid` (gh-12124) (gh-6262)[0m
2025-04-04T18:15:34.9663271Z   [32m  [32mâœ”[39m[0m[90m handles maps when applying defaults to nested paths (gh-12220)[0m
2025-04-04T18:15:34.9784010Z   [32m  [32mâœ”[39m[0m[90m correct context for default functions in subdocuments with init (gh-12328)[0m
2025-04-04T18:15:35.0020812Z   [32m  [32mâœ”[39m[0m[90m applies defaults to pushed subdocs after initing document (gh-12515)[0m
2025-04-04T18:15:35.0148821Z   [32m  [32mâœ”[39m[0m[90m If the field does not exist, $inc should create it and set is value to the specified one (gh-12435)[0m
2025-04-04T18:15:35.0336467Z   [32m  [32mâœ”[39m[0m[90m avoids overwriting array if saving with no changes with array deselected (gh-12414)[0m
2025-04-04T18:15:35.0558228Z   [32m  [32mâœ”[39m[0m[90m $clone() (gh-11849)[0m
2025-04-04T18:15:35.0720299Z   [32m  [32mâœ”[39m[0m[90m $clone() with single nested and doc array (gh-14353) (gh-11849)[0m
2025-04-04T18:15:35.0913382Z   [32m  [32mâœ”[39m[0m[90m can create document with document array and top-level key named `schema` (gh-12480)[0m
2025-04-04T18:15:35.1173154Z   [32m  [32mâœ”[39m[0m[90m handles setting array to itself after saving and pushing a new value (gh-12656)[0m
2025-04-04T18:15:35.1292342Z   [32m  [32mâœ”[39m[0m[90m should not trigger isModified when setting a nested boolean to the same value as previously  (gh-12992)[0m
2025-04-04T18:15:35.1503835Z   [32m  [32mâœ”[39m[0m[90m saves single nested subdoc defaults (gh-12905)[0m
2025-04-04T18:15:35.1589132Z   [32m  [32mâœ”[39m[0m[90m $shift() triggers $pop[0m
2025-04-04T18:15:35.1612995Z   [32m  [32mâœ”[39m[0m[90m avoids setting array default if document array projected out by sibling projection (gh-13003)[0m
2025-04-04T18:15:35.1817139Z   [32m  [32mâœ”[39m[0m[90m avoids overwriting array with sibling projection (gh-13043)[0m
2025-04-04T18:15:35.1999254Z   [32m  [32mâœ”[39m[0m[90m can set() from top-level on nested schema with strict: false (gh-13327)[0m
2025-04-04T18:15:35.2225539Z   [32m  [32mâœ”[39m[0m[90m can set() from top-level on path underneath map of mixed (gh-13327)[0m
2025-04-04T18:15:35.2335643Z   [32m  [32mâœ”[39m[0m[90m should allow storing keys with dots in name in mixed under nested (gh-13530)[0m
2025-04-04T18:15:35.2532137Z   [32m  [32mâœ”[39m[0m[90m cleans up all array subdocs modified state on save (gh-13582)[0m
2025-04-04T18:15:35.2770316Z   [32m  [32mâœ”[39m[0m[90m cleans up all nested subdocs modified state on save (gh-13609)[0m
2025-04-04T18:15:35.2934294Z   [32m  [32mâœ”[39m[0m[90m avoids prototype pollution on init[0m
2025-04-04T18:15:35.3059014Z   [32m  [32mâœ”[39m[0m[90m does not modify array when calling getters (gh-13748)[0m
2025-04-04T18:15:35.3262477Z   [32m  [32mâœ”[39m[0m[90m sets defaults on subdocs with subdoc projection (gh-13720)[0m
2025-04-04T18:15:35.3439704Z   [32m  [32mâœ”[39m[0m[90m handles bigint (gh-13791)[0m
2025-04-04T18:15:35.3655713Z   [32m  [32mâœ”[39m[0m[90m should allow null values in list in self assignment (gh-13859)[0m
2025-04-04T18:15:35.3900306Z   [32m  [32mâœ”[39m[0m[90m bulkSave() picks up changes in pre("save") middleware (gh-13799)[0m
2025-04-04T18:15:35.4072690Z   [32m  [32mâœ”[39m[0m[90m bulkSave() allows skipping validation with validateBeforeSave (gh-15156)[0m
2025-04-04T18:15:35.4102521Z   [32m  [32mâœ”[39m[0m[90m handles default embedded discriminator values (gh-13835)[0m
2025-04-04T18:15:35.4298073Z   [32m  [32mâœ”[39m[0m[90m avoids saving changes to deselected paths (gh-13145) (gh-13062)[0m
2025-04-04T18:15:35.4548621Z   [32m  [32mâœ”[39m[0m[90m fires pre validate hooks on 4 level single nested subdocs (gh-13876)[0m
2025-04-04T18:15:35.4729239Z   [32m  [32mâœ”[39m[0m[90m fires pre validate hooks on 5 level deep single nested subdoc when modifying after save() (gh-14591)[0m
2025-04-04T18:15:35.4773509Z   [32m  [32mâœ”[39m[0m[90m returns constructor if using $model() with no args (gh-13878)[0m
2025-04-04T18:15:35.5010315Z   [32m  [32mâœ”[39m[0m[90m avoids creating separate subpaths entry for every element in array (gh-13874)[0m
2025-04-04T18:15:35.5145910Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators defined using Schema.prototype.discriminator (gh-13898)[0m
2025-04-04T18:15:35.5378780Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators defined using Schema.prototype.discriminator after defining schema (gh-14109) (gh-13898)[0m
2025-04-04T18:15:35.5531250Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators on nested path defined using Schema.prototype.discriminator (gh-14109) (gh-13898)[0m
2025-04-04T18:15:35.5645674Z   [32m  [32mâœ”[39m[0m[90m handles middleware on embedded discriminators on nested path defined using Schema.prototype.discriminator (gh-14961)[0m
2025-04-04T18:15:35.5957272Z   [32m  [32mâœ”[39m[0m[90m handles reusing schema with embedded discriminators defined using Schema.prototype.discriminator (gh-14162)[0m
2025-04-04T18:15:35.6116047Z   [32m  [32mâœ”[39m[0m[90m handles embedded recursive discriminators on nested path defined using Schema.prototype.discriminator (gh-14245)[0m
2025-04-04T18:15:35.6141987Z (node:2003) [MONGOOSE] Warning: `collection` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
2025-04-04T18:15:35.6143066Z (Use `node --trace-warnings ...` to show where the warning was created)
2025-04-04T18:15:35.6238375Z   [32m  [32mâœ”[39m[0m[90m can use `collection` as schema name (gh-13956)[0m
2025-04-04T18:15:35.6447079Z   [32m  [32mâœ”[39m[0m[90m avoids adding nested paths to markModified() output if adding a new field (gh-14024)[0m
2025-04-04T18:15:35.6667587Z   [32m  [32mâœ”[39m[0m[90m should allow null values in list in self assignment (gh-14172) (gh-13859)[0m
2025-04-04T18:15:35.6908132Z   [32m  [32mâœ”[39m[0m[90m avoids overwriting dotted paths in mixed path underneath nested path (gh-14178)[0m
2025-04-04T18:15:35.7008011Z   [32m  [32mâœ”[39m[0m[90m handles setting nested path to null (gh-14205)[0m
2025-04-04T18:15:35.7086005Z   [32m  [32mâœ”[39m[0m[90m handles setting nested path to undefined (gh-14205)[0m
2025-04-04T18:15:35.7252899Z   [32m  [32mâœ”[39m[0m[90m handles setting nested path to spread doc with extra properties (gh-14269)[0m
2025-04-04T18:15:35.7366082Z   [32m  [32mâœ”[39m[0m[90m includes virtuals in doc array toString() output if virtuals enabled on toObject (gh-14315)[0m
2025-04-04T18:15:35.7640742Z   [32m  [32mâœ”[39m[0m[90m minimizes when updating existing documents (gh-13782)[0m
2025-04-04T18:15:35.7767676Z   [32m  [32mâœ”[39m[0m[90m saves when setting subdocument to empty object (gh-14420) (gh-13782)[0m
2025-04-04T18:15:35.7982423Z   [32m  [32mâœ”[39m[0m[90m validate supports validateAllPaths[0m
2025-04-04T18:15:35.8182714Z   [32m  [32mâœ”[39m[0m[90m validateSync() supports validateAllPaths[0m
2025-04-04T18:15:35.8411939Z   [32m  [32mâœ”[39m[0m[90m minimize unsets property rather than setting to null (gh-14445)[0m
2025-04-04T18:15:35.8734060Z   [32m  [32mâœ”[39m[0m[90m avoids depopulating populated subdocs underneath document arrays when copying to another document (gh-14418)[0m
2025-04-04T18:15:35.8989830Z   [32m  [32mâœ”[39m[0m[90m handles virtuals that are stored as objects but getter returns string with toJSON (gh-14446)[0m
2025-04-04T18:15:35.9023244Z   [32m  [32mâœ”[39m[0m[90m isDirectModified on paths underneath direct modified subdoc (gh-14502)[0m
2025-04-04T18:15:35.9240277Z   [32m  [32mâœ”[39m[0m[90m avoids leaving subdoc _id in default state when setting subdocument to same value (gh-14722)[0m
2025-04-04T18:15:35.9478637Z   [32m  [32mâœ”[39m[0m[90m $clearModifiedPaths (gh-14268)[0m
2025-04-04T18:15:35.9620466Z   [32m  [32mâœ”[39m[0m[90m $createModifiedPathsSnapshot and $restoreModifiedPathsSnapshot (gh-14268)[0m
2025-04-04T18:15:35.9811940Z   [32m  [32mâœ”[39m[0m[90m post deleteOne hook (gh-9885)[0m
2025-04-04T18:15:35.9905069Z   [32m  [32mâœ”[39m[0m[90m applies virtuals to subschemas if top-level schema has virtuals: true (gh-14771)[0m
2025-04-04T18:15:35.9991466Z   [32m  [32mâœ”[39m[0m[90m calls required with correct context on single nested properties (gh-14788)[0m
2025-04-04T18:15:36.0175340Z   [32m  [32mâœ”[39m[0m[90m applies toObject() getters to 3 level deep subdocuments (gh-14840) (gh-14835)[0m
2025-04-04T18:15:36.3332523Z   [32m  [32mâœ”[39m[0m[90m handles inserting and saving large document with 10-level deep subdocs (gh-14897)[0m[31m (306ms)[0m
2025-04-04T18:15:36.3496757Z   [32m  [32mâœ”[39m[0m[90m avoids flattening objectids on insertMany (gh-14935)[0m
2025-04-04T18:15:36.3957012Z   [32m  [32mâœ”[39m[0m[90m handles buffers stored as EJSON POJO (gh-14911)[0m
2025-04-04T18:15:36.4167996Z   [32m  [32mâœ”[39m[0m[90m clears modified subpaths when setting deeply nested subdoc to null (gh-14952)[0m
2025-04-04T18:15:36.4376829Z   [32m  [32mâœ”[39m[0m[90m handles custom error message for duplicate key errors (gh-12844)[0m
2025-04-04T18:15:36.4401673Z   [32m  [32mâœ”[39m[0m[90m supports global transforms per schematype (gh-15084)[0m
2025-04-04T18:15:36.4641081Z   [32m  [32mâœ”[39m[0m[90m supports schemaFieldsOnly option for toObject() (gh-15258)[0m
2025-04-04T18:15:36.5125484Z   [32m  [32mâœ”[39m[0m[90m supports schemaFieldsOnly on nested paths, subdocuments, and arrays (gh-15258)[0m
2025-04-04T18:15:37.1688224Z   [32m  [32mâœ”[39m[0m[90m handles undoReset() on deep recursive subdocuments (gh-15255)[0m[31m (647ms)[0m
2025-04-04T18:15:37.1862592Z   [32m  [32mâœ”[39m[0m[90m handles selected paths on root discriminator (gh-15308)[0m
2025-04-04T18:15:37.2210353Z   [32m  [32mâœ”[39m[0m[90m avoids double validating document arrays underneath single nested (gh-15335)[0m
2025-04-04T18:15:37.2224758Z [0m    constructor[0m
2025-04-04T18:15:37.2229373Z     [32m  [32mâœ”[39m[0m[90m supports passing in schema directly (gh-8237)[0m
2025-04-04T18:15:37.2241802Z [0m    deleteOne[0m
2025-04-04T18:15:37.2368750Z     [32m  [32mâœ”[39m[0m[90m deletes the document[0m
2025-04-04T18:15:37.2383894Z [0m    updateOne[0m
2025-04-04T18:15:37.2558820Z     [32m  [32mâœ”[39m[0m[90m updates the document[0m
2025-04-04T18:15:37.2575447Z     [32m  [32mâœ”[39m[0m[90m returns a query[0m
2025-04-04T18:15:37.2672556Z     [32m  [32mâœ”[39m[0m[90m middleware (gh-8262)[0m
2025-04-04T18:15:37.2752552Z [0m    replaceOne[0m
2025-04-04T18:15:37.2853640Z     [32m  [32mâœ”[39m[0m[90m replaces the document[0m
2025-04-04T18:15:37.2928152Z [0m    shortcut getters[0m
2025-04-04T18:15:37.2931739Z     [32m  [32mâœ”[39m[0m[90m return undefined for properties with a null/undefined parent object (gh-1326)[0m
2025-04-04T18:15:37.2955573Z     [32m  [32mâœ”[39m[0m[90m work[0m
2025-04-04T18:15:37.2970394Z [0m    toObject[0m
2025-04-04T18:15:37.3109340Z     [32m  [32mâœ”[39m[0m[90m does not apply toObject functions of subdocuments to root document[0m
2025-04-04T18:15:37.3216961Z     [32m  [32mâœ”[39m[0m[90m handles child schema transforms[0m
2025-04-04T18:15:37.3525361Z     [32m  [32mâœ”[39m[0m[90m doesnt clobber child schema options when called with no params (gh-2035)[0m
2025-04-04T18:15:37.3551152Z     [32m  [32mâœ”[39m[0m[90m respects child schemas minimize (gh-9405)[0m
2025-04-04T18:15:37.3833448Z     [32m  [32mâœ”[39m[0m[90m minimizes single nested subdocs (gh-11247)[0m
2025-04-04T18:15:37.3945649Z     [32m  [32mâœ”[39m[0m[90m does not minimize single nested subdocs if they are required (gh-14058) (gh-11247)[0m
2025-04-04T18:15:37.4052482Z     [32m  [32mâœ”[39m[0m[90m should propagate toObject to implicitly created schemas (gh-13599) (gh-13325)[0m
2025-04-04T18:15:37.4124191Z [0m    toJSON[0m
2025-04-04T18:15:37.4136113Z     [32m  [32mâœ”[39m[0m[90m toJSON options[0m
2025-04-04T18:15:37.4153846Z     [32m  [32mâœ”[39m[0m[90m jsonifying an object[0m
2025-04-04T18:15:37.4439874Z     [32m  [32mâœ”[39m[0m[90m jsonifying an object's populated items works (gh-1376)[0m
2025-04-04T18:15:37.4549313Z     [32m  [32mâœ”[39m[0m[90m jsonifying with undefined path (gh-11922)[0m
2025-04-04T18:15:37.4647104Z     [32m  [32mâœ”[39m[0m[90m should propagate toJSON to implicitly created schemas (gh-13599) (gh-13325)[0m
2025-04-04T18:15:37.4712285Z [0m    inspect[0m
2025-04-04T18:15:37.4804057Z     [32m  [32mâœ”[39m[0m[90m inspect inherits schema options (gh-4001)[0m
2025-04-04T18:15:37.5089695Z     [32m  [32mâœ”[39m[0m[90m does not apply transform to populated docs (gh-4213)[0m
2025-04-04T18:15:37.5122019Z     [32m  [32mâœ”[39m[0m[90m handles infinite recursion (gh-11756)[0m
2025-04-04T18:15:37.5426717Z     [32m  [32mâœ”[39m[0m[90m populate on nested path (gh-5703)[0m
2025-04-04T18:15:37.5446119Z [0m    #update[0m
2025-04-04T18:15:37.5446836Z     [36m  - returns a Query[0m
2025-04-04T18:15:37.5447754Z     [36m  - calling update on document should relay to its model (gh-794)[0m
2025-04-04T18:15:37.5448593Z [0m    Errors[0m
2025-04-04T18:15:37.5451008Z     [32m  [32mâœ”[39m[0m[90m MongooseErrors should be instances of Error (gh-209)[0m
2025-04-04T18:15:37.5466311Z     [32m  [32mâœ”[39m[0m[90m ValidationErrors should be instances of Error[0m
2025-04-04T18:15:37.5479270Z [0m    #validate[0m
2025-04-04T18:15:37.5611777Z     [32m  [32mâœ”[39m[0m[90m works (gh-891)[0m
2025-04-04T18:15:37.5635643Z     [32m  [32mâœ”[39m[0m[90m can return a promise[0m
2025-04-04T18:15:37.5718503Z     [32m  [32mâœ”[39m[0m[90m doesnt have stale cast errors (gh-2766)[0m
2025-04-04T18:15:37.5834177Z     [32m  [32mâœ”[39m[0m[90m cast errors persist across validate() calls (gh-2766)[0m
2025-04-04T18:15:37.5853608Z     [32m  [32mâœ”[39m[0m[90m returns a promise when there are no validators[0m
2025-04-04T18:15:37.6058832Z     [32m  [32mâœ”[39m[0m[90m validator should run only once gh-1743[0m
2025-04-04T18:15:37.6339907Z     [32m  [32mâœ”[39m[0m[90m validator should run only once per sub-doc gh-1743[0m
2025-04-04T18:15:37.6489729Z [0m      works on arrays[0m
2025-04-04T18:15:37.6598619Z       [32m  [32mâœ”[39m[0m[90m with required[0m
2025-04-04T18:15:37.6742560Z       [32m  [32mâœ”[39m[0m[90m with custom validator[0m
2025-04-04T18:15:37.6880184Z       [32m  [32mâœ”[39m[0m[90m with both required + custom validator[0m
2025-04-04T18:15:37.6894983Z [0m    #equals[0m
2025-04-04T18:15:37.6895453Z [0m      should work[0m
2025-04-04T18:15:37.6915049Z       [32m  [32mâœ”[39m[0m[90m with string _ids[0m
2025-04-04T18:15:37.7169719Z       [32m  [32mâœ”[39m[0m[90m with number _ids[0m
2025-04-04T18:15:37.7184905Z       [32m  [32mâœ”[39m[0m[90m with ObjectId _ids[0m
2025-04-04T18:15:37.7200365Z       [32m  [32mâœ”[39m[0m[90m with Buffer _ids[0m
2025-04-04T18:15:37.7214418Z       [32m  [32mâœ”[39m[0m[90m with _id disabled (gh-1687)[0m
2025-04-04T18:15:37.7227072Z [0m    setter[0m
2025-04-04T18:15:37.7233003Z     [32m  [32mâœ”[39m[0m[90m works with undefined (gh-1892)[0m
2025-04-04T18:15:37.7255261Z     [32m  [32mâœ”[39m[0m[90m passes priorVal (gh-8629)[0m
2025-04-04T18:15:37.7324023Z [0m      order[0m
2025-04-04T18:15:37.7327427Z       [32m  [32mâœ”[39m[0m[90m is applied correctly[0m
2025-04-04T18:15:37.7340179Z [0m      on nested paths[0m
2025-04-04T18:15:37.7340882Z [0m        using set(path, object)[0m
2025-04-04T18:15:37.7344798Z         [32m  [32mâœ”[39m[0m[90m overwrites the entire object[0m
2025-04-04T18:15:37.7363950Z         [32m  [32mâœ”[39m[0m[90m allows positional syntax on mixed nested paths (gh-6738)[0m
2025-04-04T18:15:37.7468859Z         [32m  [32mâœ”[39m[0m[90m gh-1954[0m
2025-04-04T18:15:37.7535693Z [0m        when overwriting with a document instance[0m
2025-04-04T18:15:37.7540462Z         [32m  [32mâœ”[39m[0m[90m does not cause StackOverflows (gh-1234)[0m
2025-04-04T18:15:37.7553652Z [0m    virtual[0m
2025-04-04T18:15:37.7562364Z     [32m  [32mâœ”[39m[0m[90m passes doc as third param for arrow functions (gh-4143)[0m
2025-04-04T18:15:37.7630917Z [0m      setter[0m
2025-04-04T18:15:37.7637854Z       [32m  [32mâœ”[39m[0m[90m works with objects[0m
2025-04-04T18:15:37.7705122Z       [32m  [32mâœ”[39m[0m[90m works with arrays[0m
2025-04-04T18:15:37.7776289Z       [32m  [32mâœ”[39m[0m[90m works with numbers[0m
2025-04-04T18:15:37.7856197Z       [32m  [32mâœ”[39m[0m[90m works with strings[0m
2025-04-04T18:15:37.7919395Z [0m    gh-2082[0m
2025-04-04T18:15:37.8086712Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:37.8104428Z [0m    gh-1933[0m
2025-04-04T18:15:37.8196355Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:37.8286336Z [0m    gh-1638[0m
2025-04-04T18:15:37.8432632Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:37.8531400Z [0m    gh-2434[0m
2025-04-04T18:15:37.8635042Z     [32m  [32mâœ”[39m[0m[90m will save the new value[0m
2025-04-04T18:15:37.8708720Z [0m    gh-8371[0m
2025-04-04T18:15:37.8890246Z     [32m  [32mâœ”[39m[0m[90m setting isNew to true makes save tries to insert a new document (gh-8371)[0m
2025-04-04T18:15:37.9074956Z     [32m  [32mâœ”[39m[0m[90m setting isNew to true throws an error when a document already exists (gh-8371)[0m
2025-04-04T18:15:37.9249224Z     [32m  [32mâœ”[39m[0m[90m saving a document with no changes, throws an error when document is not found[0m
2025-04-04T18:15:37.9423259Z     [32m  [32mâœ”[39m[0m[90m saving a document when version bump required, throws a VersionError when document is not found (gh-10974)[0m
2025-04-04T18:15:37.9594925Z     [32m  [32mâœ”[39m[0m[90m saving a document with changes, throws an error when document is not found[0m
2025-04-04T18:15:37.9610292Z [0m    bug fixes[0m
2025-04-04T18:15:37.9773019Z     [32m  [32mâœ”[39m[0m[90m applies toJSON transform correctly for populated docs (gh-2910) (gh-2990)[0m
2025-04-04T18:15:37.9892700Z     [32m  [32mâœ”[39m[0m[90m single nested schema transform with save() (gh-5807)[0m
2025-04-04T18:15:37.9916030Z     [32m  [32mâœ”[39m[0m[90m setters firing with objects on real paths (gh-2943)[0m
2025-04-04T18:15:37.9979198Z     [32m  [32mâœ”[39m[0m[90m set data from subdoc keys (gh-3346)[0m
2025-04-04T18:15:38.0047114Z     [32m  [32mâœ”[39m[0m[90m doesnt attempt to cast generic objects as strings (gh-3030)[0m
2025-04-04T18:15:38.0215187Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas 1 (gh-2689)[0m
2025-04-04T18:15:38.0247064Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas with validation (gh-2689)[0m
2025-04-04T18:15:38.0317355Z     [32m  [32mâœ”[39m[0m[90m single embedded parent() (gh-5134)[0m
2025-04-04T18:15:38.0466585Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas with markmodified (gh-2689)[0m
2025-04-04T18:15:38.0633020Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas + update validators (gh-2689)[0m
2025-04-04T18:15:38.0746266Z     [32m  [32mâœ”[39m[0m[90m single embedded schema update validators ignore _id (gh-6269)[0m
2025-04-04T18:15:38.0829678Z [0m      gh-2782[0m
2025-04-04T18:15:38.0838751Z       [32m  [32mâœ”[39m[0m[90m should set data from a sub doc[0m
2025-04-04T18:15:38.0937480Z [0m    error processing (gh-2284)[0m
2025-04-04T18:15:38.0946527Z     [32m  [32mâœ”[39m[0m[90m save errors[0m
2025-04-04T18:15:38.1023699Z     [32m  [32mâœ”[39m[0m[90m validate errors (gh-4885)[0m
2025-04-04T18:15:38.1218244Z     [32m  [32mâœ”[39m[0m[90m does not filter validation on unmodified paths when validateModifiedOnly not set (gh-7421)[0m
2025-04-04T18:15:38.1335163Z     [32m  [32mâœ”[39m[0m[90m filters out validation on unmodified paths when validateModifiedOnly set (gh-7421) (gh-9963)[0m
2025-04-04T18:15:38.1482082Z     [32m  [32mâœ”[39m[0m[90m does not filter validation on modified paths when validateModifiedOnly set (gh-7421)[0m
2025-04-04T18:15:38.1657969Z     [32m  [32mâœ”[39m[0m[90m validateModifiedOnly with pre existing validation error (gh-8091)[0m
2025-04-04T18:15:38.1836499Z     [32m  [32mâœ”[39m[0m[90m should use schema-level validateModifiedOnly option if not in options[0m
2025-04-04T18:15:38.1991543Z     [32m  [32mâœ”[39m[0m[90m handles non-errors[0m
2025-04-04T18:15:38.2174085Z     [32m  [32mâœ”[39m[0m[90m fully validates modified subdocs (gh-14677)[0m
2025-04-04T18:15:38.2366598Z     [32m  [32mâœ”[39m[0m[90m fully validates modified single nested subdocs (gh-14677)[0m
2025-04-04T18:15:38.2383446Z [0m    bug fixes[0m
2025-04-04T18:15:38.2612160Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas with populate (gh-3501)[0m
2025-04-04T18:15:38.2636588Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas with methods (gh-3534)[0m
2025-04-04T18:15:38.2814579Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas with models (gh-3535)[0m
2025-04-04T18:15:38.3493775Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas with indexes (gh-3594)[0m
2025-04-04T18:15:38.3609930Z     [32m  [32mâœ”[39m[0m[90m removing single embedded docs (gh-3596)[0m
2025-04-04T18:15:38.3810482Z     [32m  [32mâœ”[39m[0m[90m setting single embedded docs (gh-3601)[0m
2025-04-04T18:15:38.3975118Z     [32m  [32mâœ”[39m[0m[90m single embedded docs init obeys strict mode (gh-3642)[0m
2025-04-04T18:15:38.4171455Z     [32m  [32mâœ”[39m[0m[90m single embedded docs post hooks (gh-3679)[0m
2025-04-04T18:15:38.4313982Z     [32m  [32mâœ”[39m[0m[90m single embedded docs .set() (gh-3686)[0m
2025-04-04T18:15:38.4415246Z     [32m  [32mâœ”[39m[0m[90m single embedded docs with arrays pre hooks (gh-3680)[0m
2025-04-04T18:15:38.4525704Z     [32m  [32mâœ”[39m[0m[90m nested single embedded doc validation (gh-3702)[0m
2025-04-04T18:15:38.4602662Z     [32m  [32mâœ”[39m[0m[90m handles virtuals with dots correctly (gh-3618)[0m
2025-04-04T18:15:38.4784734Z     [32m  [32mâœ”[39m[0m[90m handles pushing with numeric keys (gh-3623)[0m
2025-04-04T18:15:38.5019763Z     [32m  [32mâœ”[39m[0m[90m handles 0 for numeric subdoc ids (gh-3776)[0m
2025-04-04T18:15:38.5046241Z     [32m  [32mâœ”[39m[0m[90m handles conflicting names (gh-3867)[0m
2025-04-04T18:15:38.5359387Z     [32m  [32mâœ”[39m[0m[90m populate with lean (gh-3873)[0m
2025-04-04T18:15:38.5485267Z     [32m  [32mâœ”[39m[0m[90m init single nested subdoc with select (gh-3880)[0m
2025-04-04T18:15:38.5686796Z     [32m  [32mâœ”[39m[0m[90m single nested subdoc isModified() (gh-3910)[0m
2025-04-04T18:15:38.5821943Z     [32m  [32mâœ”[39m[0m[90m pre and post as schema keys (gh-3902)[0m
2025-04-04T18:15:38.6037575Z     [32m  [32mâœ”[39m[0m[90m manual population and isNew (gh-3982)[0m
2025-04-04T18:15:38.6333713Z     [32m  [32mâœ”[39m[0m[90m manual populattion with ref function (gh-15138)[0m
2025-04-04T18:15:38.6577664Z     [32m  [32mâœ”[39m[0m[90m manual population with refPath (gh-7070)[0m
2025-04-04T18:15:38.6715452Z     [32m  [32mâœ”[39m[0m[90m doesnt skipId for single nested subdocs (gh-4008)[0m
2025-04-04T18:15:38.6844513Z     [32m  [32mâœ”[39m[0m[90m single embedded docs with $near (gh-4014)[0m
2025-04-04T18:15:38.6865993Z     [32m  [32mâœ”[39m[0m[90m skip validation if required returns false (gh-4094)[0m
2025-04-04T18:15:38.7055286Z     [32m  [32mâœ”[39m[0m[90m ability to overwrite array default (gh-4109)[0m
2025-04-04T18:15:38.7171566Z     [32m  [32mâœ”[39m[0m[90m can set array default to null (gh-14717)[0m
2025-04-04T18:15:38.7372826Z     [32m  [32mâœ”[39m[0m[90m validation works when setting array index (gh-3816)[0m
2025-04-04T18:15:38.7546926Z     [32m  [32mâœ”[39m[0m[90m validateSync works when setting array index nested (gh-5389)[0m
2025-04-04T18:15:38.7643106Z     [32m  [32mâœ”[39m[0m[90m single embedded with defaults have $parent (gh-4115)[0m
2025-04-04T18:15:38.7844888Z     [32m  [32mâœ”[39m[0m[90m removing parent doc calls deleteOne hooks on subdocs (gh-2348) (gh-4566)[0m
2025-04-04T18:15:38.7948098Z     [32m  [32mâœ”[39m[0m[90m set() empty obj unmodifies subpaths (gh-4182)[0m
2025-04-04T18:15:38.8152302Z     [32m  [32mâœ”[39m[0m[90m clears subpaths when removing single nested (gh-4216)[0m
2025-04-04T18:15:38.8259173Z     [32m  [32mâœ”[39m[0m[90m setting path to empty object works (gh-4218)[0m
2025-04-04T18:15:38.8460977Z     [32m  [32mâœ”[39m[0m[90m setting path to object with strict and no paths in the schema (gh-6436) (gh-4218)[0m
2025-04-04T18:15:38.8551249Z     [32m  [32mâœ”[39m[0m[90m minimize + empty object (gh-4337)[0m
2025-04-04T18:15:38.8726237Z     [32m  [32mâœ”[39m[0m[90m directModifiedPaths() (gh-7373)[0m
2025-04-04T18:15:38.8923230Z     [32m  [32mâœ”[39m[0m[90m single nested isNew (gh-4369)[0m
2025-04-04T18:15:38.9034259Z     [32m  [32mâœ”[39m[0m[90m deep default array values (gh-4540)[0m
2025-04-04T18:15:38.9262072Z     [32m  [32mâœ”[39m[0m[90m default values with subdoc array (gh-4390)[0m
2025-04-04T18:15:38.9376646Z     [32m  [32mâœ”[39m[0m[90m handles invalid dates (gh-4404)[0m
2025-04-04T18:15:38.9464066Z     [32m  [32mâœ”[39m[0m[90m setting array subpath (gh-4472)[0m
2025-04-04T18:15:38.9644265Z     [32m  [32mâœ”[39m[0m[90m ignore paths (gh-4480)[0m
2025-04-04T18:15:38.9857257Z     [32m  [32mâœ”[39m[0m[90m ignore subdocs paths (gh-4480) (gh-6152)[0m
2025-04-04T18:15:38.9971720Z     [32m  [32mâœ”[39m[0m[90m composite _ids (gh-4542)[0m
2025-04-04T18:15:39.0077871Z     [32m  [32mâœ”[39m[0m[90m validateSync with undefined and conditional required (gh-4607)[0m
2025-04-04T18:15:39.0154364Z     [32m  [32mâœ”[39m[0m[90m conditional required on single nested (gh-4663)[0m
2025-04-04T18:15:39.0319465Z     [32m  [32mâœ”[39m[0m[90m setting full path under single nested schema works (gh-4578) (gh-4528)[0m
2025-04-04T18:15:39.0519989Z     [32m  [32mâœ”[39m[0m[90m setting a nested path retains nested modified paths (gh-5206)[0m
2025-04-04T18:15:39.0633692Z     [32m  [32mâœ”[39m[0m[90m toObject() does not depopulate top level (gh-3057)[0m
2025-04-04T18:15:39.0756297Z     [32m  [32mâœ”[39m[0m[90m toObject() respects schema-level depopulate (gh-6313)[0m
2025-04-04T18:15:39.0892717Z     [32m  [32mâœ”[39m[0m[90m single nested doc conditional required (gh-4654)[0m
2025-04-04T18:15:39.1045253Z     [32m  [32mâœ”[39m[0m[90m handles setting single nested schema to equal value (gh-4676)[0m
2025-04-04T18:15:39.1291139Z     [32m  [32mâœ”[39m[0m[90m handles setting single nested doc to null after setting (gh-4766)[0m
2025-04-04T18:15:39.1435938Z     [32m  [32mâœ”[39m[0m[90m buffers with subtypes as ids (gh-4506)[0m
2025-04-04T18:15:39.1477264Z     [32m  [32mâœ”[39m[0m[90m embedded docs dont mark parent as invalid (gh-4681)[0m
2025-04-04T18:15:39.1809375Z     [32m  [32mâœ”[39m[0m[90m should depopulate the shard key when saving (gh-4658)[0m
2025-04-04T18:15:39.1838296Z     [32m  [32mâœ”[39m[0m[90m handles setting virtual subpaths (gh-4716)[0m
2025-04-04T18:15:39.2022131Z     [32m  [32mâœ”[39m[0m[90m handles selected nested elements with defaults (gh-4739) (gh-11376)[0m
2025-04-04T18:15:39.2112382Z     [32m  [32mâœ”[39m[0m[90m handles mark valid in subdocs correctly (gh-4778)[0m
2025-04-04T18:15:39.2273116Z     [32m  [32mâœ”[39m[0m[90m timestamps set to false works (gh-7074)[0m
2025-04-04T18:15:39.2461499Z     [32m  [32mâœ”[39m[0m[90m timestamps with nested paths (gh-5051)[0m
2025-04-04T18:15:39.2571644Z     [32m  [32mâœ”[39m[0m[90m Declaring defaults in your schema with timestamps defined (gh-6024)[0m
2025-04-04T18:15:39.2755732Z     [32m  [32mâœ”[39m[0m[90m supports $where in pre save hook (gh-4004)[0m
2025-04-04T18:15:39.2933013Z     [32m  [32mâœ”[39m[0m[90m toObject() with buffer and minimize (gh-4800)[0m
2025-04-04T18:15:39.3029719Z     [32m  [32mâœ”[39m[0m[90m buffer subtype prop (gh-5530)[0m
2025-04-04T18:15:39.3220218Z     [32m  [32mâœ”[39m[0m[90m runs validate hooks on single nested subdocs if not directly modified (gh-3884)[0m
2025-04-04T18:15:39.3418201Z     [32m  [32mâœ”[39m[0m[90m runs validate hooks on arrays subdocs if not directly modified (gh-5861)[0m
2025-04-04T18:15:39.3616260Z     [32m  [32mâœ”[39m[0m[90m does not run schema type validator on single nested if not direct modified (gh-5885)[0m
2025-04-04T18:15:39.3720829Z     [32m  [32mâœ”[39m[0m[90m runs schema type validator on single nested if parent has default (gh-7493)[0m
2025-04-04T18:15:39.3825459Z     [32m  [32mâœ”[39m[0m[90m does not overwrite when setting nested (gh-4793)[0m
2025-04-04T18:15:39.4000565Z     [32m  [32mâœ”[39m[0m[90m hooks/middleware for custom methods (gh-6385) (gh-7456)[0m
2025-04-04T18:15:39.4090595Z     [32m  [32mâœ”[39m[0m[90m custom methods with promises (gh-6385)[0m
2025-04-04T18:15:39.4172567Z     [32m  [32mâœ”[39m[0m[90m toString() as custom method (gh-6538)[0m
2025-04-04T18:15:39.4268937Z     [32m  [32mâœ”[39m[0m[90m setting to discriminator (gh-4935)[0m
2025-04-04T18:15:39.4508019Z     [32m  [32mâœ”[39m[0m[90m handles errors in sync validators (gh-2185)[0m
2025-04-04T18:15:39.4711810Z     [32m  [32mâœ”[39m[0m[90m allows hook as a schema key (gh-5047)[0m
2025-04-04T18:15:39.4818749Z     [32m  [32mâœ”[39m[0m[90m save errors with callback and promise work (gh-5216)[0m
2025-04-04T18:15:39.5041387Z     [32m  [32mâœ”[39m[0m[90m post hooks on child subdocs run after save (gh-5085)[0m
2025-04-04T18:15:39.5148908Z     [32m  [32mâœ”[39m[0m[90m post hooks on array child subdocs run after save (gh-5085) (gh-6926)[0m
2025-04-04T18:15:39.5248353Z     [32m  [32mâœ”[39m[0m[90m nested docs toObject() clones (gh-5008)[0m
2025-04-04T18:15:39.5329046Z     [32m  [32mâœ”[39m[0m[90m toObject() with null (gh-5143)[0m
2025-04-04T18:15:39.5416852Z     [32m  [32mâœ”[39m[0m[90m handles array subdocs with single nested subdoc default (gh-5162)[0m
2025-04-04T18:15:39.5508308Z     [32m  [32mâœ”[39m[0m[90m iterating through nested doc keys (gh-5078)[0m
2025-04-04T18:15:39.5592386Z     [32m  [32mâœ”[39m[0m[90m deeply nested virtual paths (gh-5250)[0m
2025-04-04T18:15:39.5917069Z     [32m  [32mâœ”[39m[0m[90m nested virtual when populating with parent projected out (gh-7491)[0m
2025-04-04T18:15:39.5959337Z     [32m  [32mâœ”[39m[0m[90m JSON.stringify nested errors (gh-5208)[0m
2025-04-04T18:15:39.6041125Z     [32m  [32mâœ”[39m[0m[90m handles errors in subdoc pre validate (gh-5215)[0m
2025-04-04T18:15:39.6120893Z     [32m  [32mâœ”[39m[0m[90m custom error types (gh-4009)[0m
2025-04-04T18:15:39.6305979Z     [32m  [32mâœ”[39m[0m[90m saving a doc with nested string array (gh-5282)[0m
2025-04-04T18:15:39.6472440Z     [32m  [32mâœ”[39m[0m[90m push() onto a nested doc array (gh-6398)[0m
2025-04-04T18:15:39.6604408Z     [32m  [32mâœ”[39m[0m[90m push() onto a triple nested doc array (gh-6602) (gh-6398)[0m
2025-04-04T18:15:39.6700976Z     [32m  [32mâœ”[39m[0m[90m null _id (gh-5236)[0m
2025-04-04T18:15:39.6802177Z     [32m  [32mâœ”[39m[0m[90m setting populated path with typeKey (gh-5313)[0m
2025-04-04T18:15:39.7041661Z     [32m  [32mâœ”[39m[0m[90m save twice with write concern (gh-5294)[0m
2025-04-04T18:15:39.7145328Z     [32m  [32mâœ”[39m[0m[90m undefined field with conditional required (gh-5296)[0m
2025-04-04T18:15:39.7243767Z     [32m  [32mâœ”[39m[0m[90m dotted virtuals in toObject (gh-5473)[0m
2025-04-04T18:15:39.7449359Z     [32m  [32mâœ”[39m[0m[90m dotted virtuals in toObject (gh-5506)[0m
2025-04-04T18:15:39.7531509Z     [32m  [32mâœ”[39m[0m[90m parent props not in child (gh-5470)[0m
2025-04-04T18:15:39.7720539Z     [32m  [32mâœ”[39m[0m[90m modifying array with existing ids (gh-5523)[0m
2025-04-04T18:15:39.7904144Z     [32m  [32mâœ”[39m[0m[90m consistent setter context for single nested (gh-5363)[0m
2025-04-04T18:15:39.8116625Z     [32m  [32mâœ”[39m[0m[90m deeply nested subdocs and markModified (gh-5406)[0m
2025-04-04T18:15:39.8295238Z     [32m  [32mâœ”[39m[0m[90m single nested subdoc post deleteOne hooks (gh-5388)[0m
2025-04-04T18:15:39.8400745Z     [32m  [32mâœ”[39m[0m[90m push populated doc onto empty array triggers manual population (gh-5504)[0m
2025-04-04T18:15:39.8563793Z     [32m  [32mâœ”[39m[0m[90m single nested conditional required scope (gh-5569)[0m
2025-04-04T18:15:39.8653888Z     [32m  [32mâœ”[39m[0m[90m single nested setters only get called once (gh-5601)[0m
2025-04-04T18:15:39.8737206Z     [32m  [32mâœ”[39m[0m[90m single getters only get called once (gh-7442)[0m
2025-04-04T18:15:39.8853753Z     [32m  [32mâœ”[39m[0m[90m calls subdocument getters if child schema has getters: true (gh-12105)[0m
2025-04-04T18:15:39.9155082Z     [32m  [32mâœ”[39m[0m[90m setting doc array to array of top-level docs works (gh-5632)[0m
2025-04-04T18:15:39.9270289Z     [32m  [32mâœ”[39m[0m[90m Using set as a schema path (gh-1939)[0m
2025-04-04T18:15:39.9373861Z     [32m  [32mâœ”[39m[0m[90m handles array defaults correctly (gh-5780)[0m
2025-04-04T18:15:39.9550932Z     [32m  [32mâœ”[39m[0m[90m sets path to the empty string on save after query (gh-6477)[0m
2025-04-04T18:15:39.9716029Z     [32m  [32mâœ”[39m[0m[90m sets path to the default boolean on save after query (gh-6477)[0m
2025-04-04T18:15:39.9802438Z     [32m  [32mâœ”[39m[0m[90m virtuals with no getters return undefined (gh-6223)[0m
2025-04-04T18:15:39.9872829Z     [32m  [32mâœ”[39m[0m[90m add default getter/setter (gh-6262)[0m
2025-04-04T18:15:39.9945486Z     [32m  [32mâœ”[39m[0m[90m calls array getters (gh-9889)[0m
2025-04-04T18:15:40.0141842Z     [32m  [32mâœ”[39m[0m[90m doesnt call setters when init-ing an array (gh-9889)[0m
2025-04-04T18:15:40.0166384Z     [32m  [32mâœ”[39m[0m[90m nested virtuals + nested toJSON (gh-6294)[0m
2025-04-04T18:15:40.0253166Z     [32m  [32mâœ”[39m[0m[90m Disallows writing to __proto__ and other special properties[0m
2025-04-04T18:15:40.0773828Z     [32m  [32mâœ”[39m[0m[90m save() depopulates pushed arrays (gh-6048)[0m[33m (43ms)[0m
2025-04-04T18:15:40.1043064Z     [32m  [32mâœ”[39m[0m[90m Handles setting populated path set via `Document#populate()` (gh-7302)[0m
2025-04-04T18:15:40.1196171Z     [32m  [32mâœ”[39m[0m[90m Single nested subdocs using discriminator can be modified (gh-5693)[0m
2025-04-04T18:15:40.1224660Z     [32m  [32mâœ”[39m[0m[90m required function only gets called once (gh-6801)[0m
2025-04-04T18:15:40.1478408Z     [32m  [32mâœ”[39m[0m[90m required function called again after save() (gh-6892)[0m
2025-04-04T18:15:40.1681521Z     [32m  [32mâœ”[39m[0m[90m doc array: set then remove (gh-3511)[0m
2025-04-04T18:15:40.1926654Z     [32m  [32mâœ”[39m[0m[90m doc array: modify then sort (gh-7556)[0m
2025-04-04T18:15:40.2065941Z     [32m  [32mâœ”[39m[0m[90m modifying unselected nested object (gh-5800)[0m
2025-04-04T18:15:40.2284095Z     [32m  [32mâœ”[39m[0m[90m set() underneath embedded discriminator (gh-6482)[0m
2025-04-04T18:15:40.2420384Z     [32m  [32mâœ”[39m[0m[90m set() underneath array embedded discriminator (gh-6526)[0m
2025-04-04T18:15:40.2642884Z     [32m  [32mâœ”[39m[0m[90m consistent context for nested docs (gh-5347)[0m
2025-04-04T18:15:40.2668379Z     [32m  [32mâœ”[39m[0m[90m accessing arrays in setters on initial document creation (gh-6155)[0m
2025-04-04T18:15:40.2743978Z     [32m  [32mâœ”[39m[0m[90m handles 2nd level nested field with null child (gh-6187)[0m
2025-04-04T18:15:40.2905523Z     [32m  [32mâœ”[39m[0m[90m does not call default function on init if value set (gh-6410)[0m
2025-04-04T18:15:40.3009677Z     [32m  [32mâœ”[39m[0m[90m doesnt double-call getters when using get() (gh-6779)[0m
2025-04-04T18:15:40.3088916Z     [32m  [32mâœ”[39m[0m[90m returns doubly nested field in inline sub schema when using get() (gh-6925)[0m
2025-04-04T18:15:40.3255235Z     [32m  [32mâœ”[39m[0m[90m defaults should see correct isNew (gh-3793)[0m
2025-04-04T18:15:40.3480606Z     [32m  [32mâœ”[39m[0m[90m modify multiple subdoc paths (gh-4405)[0m
2025-04-04T18:15:40.3754219Z     [32m  [32mâœ”[39m[0m[90m doesnt try to cast populated embedded docs (gh-6390)[0m
2025-04-04T18:15:40.3770333Z [0m      modifiedPaths[0m
2025-04-04T18:15:40.3901527Z       [32m  [32mâœ”[39m[0m[90m doesnt markModified child paths if parent is modified (gh-4224)[0m
2025-04-04T18:15:40.3925088Z       [32m  [32mâœ”[39m[0m[90m includeChildren option (gh-6134)[0m
2025-04-04T18:15:40.4007266Z       [32m  [32mâœ”[39m[0m[90m includeChildren option with arrays (gh-5904)[0m
2025-04-04T18:15:40.4082573Z       [32m  [32mâœ”[39m[0m[90m 1 level down nested paths get marked modified on initial set (gh-7313) (gh-6944)[0m
2025-04-04T18:15:40.4153386Z [0m      convertToFalse and convertToTrue (gh-6758)[0m
2025-04-04T18:15:40.4271680Z       [32m  [32mâœ”[39m[0m[90m lets you add custom strings that get converted to true/false[0m
2025-04-04T18:15:40.4292351Z       [32m  [32mâœ”[39m[0m[90m allows adding `null` to list of values that convert to false (gh-9223)[0m
2025-04-04T18:15:40.4360721Z [0m    clobbered Array.prototype[0m
2025-04-04T18:15:40.4375204Z     [32m  [32mâœ”[39m[0m[90m handles clobbered Array.prototype.remove (gh-6431)[0m
2025-04-04T18:15:40.4589517Z     [32m  [32mâœ”[39m[0m[90m calls array validators again after save (gh-6818)[0m
2025-04-04T18:15:40.4623688Z     [32m  [32mâœ”[39m[0m[90m set single nested to num throws ObjectExpectedError (gh-6710) (gh-6753)[0m
2025-04-04T18:15:40.4709194Z     [32m  [32mâœ”[39m[0m[90m set array to false throws ObjectExpectedError (gh-7242)[0m
2025-04-04T18:15:40.4808942Z [0m    overwrite() (gh-7830)[0m
2025-04-04T18:15:40.4897223Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:40.5102380Z     [32m  [32mâœ”[39m[0m[90m skips version key[0m
2025-04-04T18:15:40.5314553Z     [32m  [32mâœ”[39m[0m[90m skips discriminator key[0m
2025-04-04T18:15:40.5689897Z     [32m  [32mâœ”[39m[0m[90m overwrites maps (gh-9549)[0m
2025-04-04T18:15:40.5906998Z [0m    immutable properties (gh-7671)[0m
2025-04-04T18:15:40.5916039Z     [32m  [32mâœ”[39m[0m[90m SchemaType#immutable()[0m
2025-04-04T18:15:40.6257837Z     [32m  [32mâœ”[39m[0m[90m with save()[0m
2025-04-04T18:15:40.6433527Z     [32m  [32mâœ”[39m[0m[90m with update[0m
2025-04-04T18:15:40.6665289Z     [32m  [32mâœ”[39m[0m[90m conditional immutable (gh-8001)[0m
2025-04-04T18:15:40.6904988Z     [32m  [32mâœ”[39m[0m[90m immutable with strict mode (gh-8149)[0m
2025-04-04T18:15:40.7030176Z [0m    Document#getChanges(...) (gh-9096)[0m
2025-04-04T18:15:40.7125619Z     [32m  [32mâœ”[39m[0m[90m returns an empty object when there are no changes[0m
2025-04-04T18:15:40.7306375Z     [32m  [32mâœ”[39m[0m[90m returns only the changed paths[0m
2025-04-04T18:15:40.7414212Z [0m    reserved keywords can be used optionally (gh-9010)[0m
2025-04-04T18:15:40.7414954Z [0m      Document#validate(...)[0m
2025-04-04T18:15:40.7421394Z       [32m  [32mâœ”[39m[0m[90m is available as `$validate`[0m
2025-04-04T18:15:40.7501540Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-04T18:15:40.7503645Z (node:2003) [MONGOOSE] Warning: `validate` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
2025-04-04T18:15:40.7576653Z [0m      Document#save(...)[0m
2025-04-04T18:15:40.7659896Z       [32m  [32mâœ”[39m[0m[90m is available as `$save`[0m
2025-04-04T18:15:40.7761305Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-04T18:15:40.7763467Z (node:2003) [MONGOOSE] Warning: `save` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
2025-04-04T18:15:40.7831216Z [0m      Document#isModified(...)[0m
2025-04-04T18:15:40.7919892Z       [32m  [32mâœ”[39m[0m[90m is available as `$isModified`[0m
2025-04-04T18:15:40.8035446Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-04T18:15:40.8037717Z (node:2003) [MONGOOSE] Warning: `isModified` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
2025-04-04T18:15:40.8111601Z [0m      Document#isNew[0m
2025-04-04T18:15:40.8202681Z       [32m  [32mâœ”[39m[0m[90m is available as `$isNew`[0m
2025-04-04T18:15:40.8310334Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-04T18:15:40.8312374Z (node:2003) [MONGOOSE] Warning: `isNew` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
2025-04-04T18:15:40.8392387Z [0m      Document#populated(...)[0m
2025-04-04T18:15:40.8630439Z       [32m  [32mâœ”[39m[0m[90m is available as `$populated`[0m
2025-04-04T18:15:40.8654777Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-04T18:15:40.8657193Z (node:2003) [MONGOOSE] Warning: `populated` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
2025-04-04T18:15:40.8724210Z [0m      Document#toObject(...)[0m
2025-04-04T18:15:40.8846675Z       [32m  [32mâœ”[39m[0m[90m is available as `$toObject`[0m
2025-04-04T18:15:40.8872511Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-04T18:15:40.8873726Z (node:2003) [MONGOOSE] Warning: `toObject` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
2025-04-04T18:15:40.8959232Z [0m      Document#init(...)[0m
2025-04-04T18:15:40.8964945Z       [32m  [32mâœ”[39m[0m[90m is available as `$init`[0m
2025-04-04T18:15:40.9044273Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-04T18:15:40.9045721Z (node:2003) [MONGOOSE] Warning: `init` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
2025-04-04T18:15:40.9120020Z [0m      Document#collection[0m
2025-04-04T18:15:40.9120674Z       [36m  - is available as `$collection`[0m
2025-04-04T18:15:40.9121357Z       [36m  - can be used as a property in documents[0m
2025-04-04T18:15:40.9121952Z [0m      Document#errors[0m
2025-04-04T18:15:40.9130726Z       [32m  [32mâœ”[39m[0m[90m is available as `$errors`[0m
2025-04-04T18:15:40.9213796Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-04T18:15:40.9215264Z (node:2003) [MONGOOSE] Warning: `errors` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
2025-04-04T18:15:40.9301344Z [0m      Document#removeListener[0m
2025-04-04T18:15:40.9309265Z       [32m  [32mâœ”[39m[0m[90m is available as `$removeListener`[0m
2025-04-04T18:15:40.9385199Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-04T18:15:40.9386909Z (node:2003) [MONGOOSE] Warning: `removeListener` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
2025-04-04T18:15:40.9463885Z [0m      Document#listeners[0m
2025-04-04T18:15:40.9469491Z       [32m  [32mâœ”[39m[0m[90m is available as `$listeners`[0m
2025-04-04T18:15:40.9543657Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-04T18:15:40.9545259Z (node:2003) [MONGOOSE] Warning: `listeners` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
2025-04-04T18:15:40.9617486Z [0m      Document#on[0m
2025-04-04T18:15:40.9622572Z       [32m  [32mâœ”[39m[0m[90m is available as `$on`[0m
2025-04-04T18:15:40.9694990Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-04T18:15:40.9769007Z [0m      Document#emit[0m
2025-04-04T18:15:40.9774271Z       [32m  [32mâœ”[39m[0m[90m is available as `$emit`[0m
2025-04-04T18:15:40.9849435Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-04T18:15:40.9851398Z (node:2003) [MONGOOSE] Warning: `emit` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
2025-04-04T18:15:40.9920679Z [0m      Document#get[0m
2025-04-04T18:15:40.9926019Z       [32m  [32mâœ”[39m[0m[90m is available as `$get`[0m
2025-04-04T18:15:40.9999701Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-04T18:15:41.0001327Z (node:2003) [MONGOOSE] Warning: `get` is a reserved schema pathname and may break some functionality. You are allowed to use it, but use at your own risk. To disable this warning pass `suppressReservedKeysWarning` as a schema option.
2025-04-04T18:15:41.0080180Z [0m    virtuals `pathsToSkip` (gh-10120)[0m
2025-04-04T18:15:41.0089930Z     [32m  [32mâœ”[39m[0m[90m adds support for `pathsToSkip` for virtuals feat-10120[0m
2025-04-04T18:15:41.0171324Z     [32m  [32mâœ”[39m[0m[90m supports passing a list of virtuals to `toObject()` (gh-10120)[0m
2025-04-04T18:15:41.0246331Z [0m    validation `pathsToSkip` (gh-10230)[0m
2025-04-04T18:15:41.0256760Z     [32m  [32mâœ”[39m[0m[90m support `pathsToSkip` option for `Document#validate()`[0m
2025-04-04T18:15:41.0347972Z     [32m  [32mâœ”[39m[0m[90m support `pathsToSkip` option for `Document#validate()`[0m
2025-04-04T18:15:41.0425506Z     [32m  [32mâœ”[39m[0m[90m support `pathsToSkip` option for `Document#validateSync()`[0m
2025-04-04T18:15:41.0481475Z     [36m  - support `pathsToSkip` option for `Model.validate()`[0m
2025-04-04T18:15:41.0489664Z     [32m  [32mâœ”[39m[0m[90m `pathsToSkip` accepts space separated paths[0m
2025-04-04T18:15:41.0549969Z [0m    $inc (gh-11915)[0m
2025-04-04T18:15:41.0632618Z     [32m  [32mâœ”[39m[0m[90m stores CastError if trying to $inc a non-numeric path[0m
2025-04-04T18:15:41.0789769Z     [32m  [32mâœ”[39m[0m[90m should correctly increment even if the document has not saved after each increment gh-13274[0m
2025-04-04T18:15:41.0808248Z [0m      top-level path[0m
2025-04-04T18:15:41.0911328Z       [32m  [32mâœ”[39m[0m[90m sends a $inc command for a given path[0m
2025-04-04T18:15:41.1033387Z       [32m  [32mâœ”[39m[0m[90m calls setters on the value passed to `$inc()` (gh-13158)[0m
2025-04-04T18:15:41.1203637Z       [32m  [32mâœ”[39m[0m[90m avoids updating value if setter fails (gh-13158)[0m
2025-04-04T18:15:41.1368694Z       [32m  [32mâœ”[39m[0m[90m works as a $set if the document is new[0m
2025-04-04T18:15:41.1529543Z       [32m  [32mâœ”[39m[0m[90m treats as a $set if set after $inc[0m
2025-04-04T18:15:41.1636667Z       [32m  [32mâœ”[39m[0m[90m tries to cast to number[0m
2025-04-04T18:15:41.1734605Z       [32m  [32mâœ”[39m[0m[90m stores CastError if can't convert to number[0m
2025-04-04T18:15:41.1800375Z [0m      nested paths[0m
2025-04-04T18:15:41.1913596Z       [32m  [32mâœ”[39m[0m[90m handles nested paths[0m
2025-04-04T18:15:41.2040267Z       [32m  [32mâœ”[39m[0m[90m treats as $set if overwriting nested path[0m
2025-04-04T18:15:41.2057042Z [0m      subdocuments[0m
2025-04-04T18:15:41.2154660Z       [32m  [32mâœ”[39m[0m[90m handles paths underneath subdocuments[0m
2025-04-04T18:15:41.2310753Z       [32m  [32mâœ”[39m[0m[90m treats as a $set if setting subdocument after $inc[0m
2025-04-04T18:15:41.2330229Z [0m      document array[0m
2025-04-04T18:15:41.2448850Z       [32m  [32mâœ”[39m[0m[90m handles paths underneath subdocuments[0m
2025-04-04T18:15:41.2562407Z       [32m  [32mâœ”[39m[0m[90m works on pushed subdocs[0m
2025-04-04T18:15:41.2660891Z       [32m  [32mâœ”[39m[0m[90m Splice call registers path modification[0m
2025-04-04T18:15:41.2726646Z [0m    gh-2306[0m
2025-04-04T18:15:41.2736974Z     [32m  [32mâœ”[39m[0m[90m allow define virtual on non-object path[0m
2025-04-04T18:15:41.2806301Z     [32m  [32mâœ”[39m[0m[90m works on document arrays[0m
2025-04-04T18:15:41.2892043Z 
2025-04-04T18:15:41.2893254Z [0m  Check if instance function that is supplied in schema option is available[0m
2025-04-04T18:15:41.2898837Z   [32m  [32mâœ”[39m[0m[90m should give an instance function back rather than undefined[0m
2025-04-04T18:15:41.2899361Z 
2025-04-04T18:15:41.2899558Z [0m  sharding[0m
2025-04-04T18:15:41.2901627Z   [32m  [32mâœ”[39m[0m[90m should handle shard keys properly (gh-2127)[0m
2025-04-04T18:15:41.2902451Z 
2025-04-04T18:15:41.2902670Z [0m  toObject()[0m
2025-04-04T18:15:41.2905359Z   [32m  [32mâœ”[39m[0m[90m should inherit options from schema[0m
2025-04-04T18:15:41.2907396Z   [32m  [32mâœ”[39m[0m[90m can overwrite schema-set default options[0m
2025-04-04T18:15:41.2908725Z   [32m  [32mâœ”[39m[0m[90m doesnt crash with empty object (gh-3130)[0m
2025-04-04T18:15:41.2909143Z 
2025-04-04T18:15:41.2909672Z [0m  Double[0m
2025-04-04T18:15:41.2917441Z   [32m  [32mâœ”[39m[0m[90m is a valid schema type[0m
2025-04-04T18:15:41.2918124Z [0m    supports the required property[0m
2025-04-04T18:15:41.2925649Z     [32m  [32mâœ”[39m[0m[90m when value is null[0m
2025-04-04T18:15:41.2932673Z     [32m  [32mâœ”[39m[0m[90m when value is non-null[0m
2025-04-04T18:15:41.2933253Z [0m    special inputs[0m
2025-04-04T18:15:41.2938562Z     [32m  [32mâœ”[39m[0m[90m supports undefined as input[0m
2025-04-04T18:15:41.2943133Z     [32m  [32mâœ”[39m[0m[90m supports null as input[0m
2025-04-04T18:15:41.2943694Z [0m    valid casts[0m
2025-04-04T18:15:41.2949946Z     [32m  [32mâœ”[39m[0m[90m casts from decimal string[0m
2025-04-04T18:15:41.2955350Z     [32m  [32mâœ”[39m[0m[90m casts from exponential string[0m
2025-04-04T18:15:41.2962824Z     [32m  [32mâœ”[39m[0m[90m casts from infinite string[0m
2025-04-04T18:15:41.2968070Z     [32m  [32mâœ”[39m[0m[90m casts from NaN string[0m
2025-04-04T18:15:41.2972885Z     [32m  [32mâœ”[39m[0m[90m casts from number[0m
2025-04-04T18:15:41.2978140Z     [32m  [32mâœ”[39m[0m[90m casts from bigint[0m
2025-04-04T18:15:41.2983149Z     [32m  [32mâœ”[39m[0m[90m casts from BSON.Long[0m
2025-04-04T18:15:41.2988493Z     [32m  [32mâœ”[39m[0m[90m casts from BSON.Double[0m
2025-04-04T18:15:41.2993290Z     [32m  [32mâœ”[39m[0m[90m casts boolean true to 1[0m
2025-04-04T18:15:41.2998337Z     [32m  [32mâœ”[39m[0m[90m casts boolean false to 0[0m
2025-04-04T18:15:41.3002890Z     [32m  [32mâœ”[39m[0m[90m casts empty string to null[0m
2025-04-04T18:15:41.3008390Z     [32m  [32mâœ”[39m[0m[90m supports valueOf() function [0m
2025-04-04T18:15:41.3009016Z [0m    cast errors[0m
2025-04-04T18:15:41.3009774Z [0m      when a non-numeric string is provided to an Double field[0m
2025-04-04T18:15:41.3022667Z       [32m  [32mâœ”[39m[0m[90m throws a CastError upon validation[0m
2025-04-04T18:15:41.3023357Z [0m    custom casters[0m
2025-04-04T18:15:41.3032632Z     [32m  [32mâœ”[39m[0m[90m supports cast disabled[0m
2025-04-04T18:15:41.3038864Z     [32m  [32mâœ”[39m[0m[90m supports custom cast[0m
2025-04-04T18:15:41.3039574Z [0m    mongoDB integration[0m
2025-04-04T18:15:41.3294534Z     [32m  [32mâœ”[39m[0m[90m can query with comparison operators[0m
2025-04-04T18:15:41.3472604Z     [32m  [32mâœ”[39m[0m[90m supports populate()[0m
2025-04-04T18:15:41.3473383Z [0m      $type compatibility[0m
2025-04-04T18:15:41.3493731Z       [32m  [32mâœ”[39m[0m[90m is queryable as a JS number in MongoDB[0m
2025-04-04T18:15:41.3513345Z       [32m  [32mâœ”[39m[0m[90m is NOT queryable as a BSON Integer in MongoDB if the value is NOT integer[0m
2025-04-04T18:15:41.3532673Z       [32m  [32mâœ”[39m[0m[90m is queryable as a BSON Double in MongoDB when a non-integer is provided[0m
2025-04-04T18:15:41.3553095Z       [32m  [32mâœ”[39m[0m[90m is queryable as a BSON Double in MongoDB when an integer is provided[0m
2025-04-04T18:15:41.3574395Z 
2025-04-04T18:15:41.3574733Z [0m  driver[0m
2025-04-04T18:15:41.3594833Z   [32m  [32mâœ”[39m[0m[90m can set custom driver (gh-11900)[0m
2025-04-04T18:15:41.3616931Z   [32m  [32mâœ”[39m[0m[90m multiple drivers (gh-12638)[0m
2025-04-04T18:15:41.3617391Z 
2025-04-04T18:15:41.3617697Z [0m  ValidationError[0m
2025-04-04T18:15:41.3621007Z   [32m  [32mâœ”[39m[0m[90m JSON.stringify() with message (gh-5309) (gh-9296)[0m
2025-04-04T18:15:41.3622165Z   [32m  [32mâœ”[39m[0m[90m default error message[0m
2025-04-04T18:15:41.3633469Z   [32m  [32mâœ”[39m[0m[90m should have error name in Cast error gh-10166[0m
2025-04-04T18:15:41.3634324Z [0m    #infiniteRecursion[0m
2025-04-04T18:15:41.3647252Z     [32m  [32mâœ”[39m[0m[90m does not cause RangeError (gh-1834)[0m
2025-04-04T18:15:41.3647991Z [0m    #minDate[0m
2025-04-04T18:15:41.3656765Z     [32m  [32mâœ”[39m[0m[90m causes a validation error[0m
2025-04-04T18:15:41.3657547Z [0m    #maxDate[0m
2025-04-04T18:15:41.3667156Z     [32m  [32mâœ”[39m[0m[90m causes a validation error[0m
2025-04-04T18:15:41.3667883Z [0m    #minLength[0m
2025-04-04T18:15:41.3678072Z     [32m  [32mâœ”[39m[0m[90m causes a validation error[0m
2025-04-04T18:15:41.3686315Z     [32m  [32mâœ”[39m[0m[90m with correct error message (gh-4207)[0m
2025-04-04T18:15:41.3687072Z [0m    #maxLength[0m
2025-04-04T18:15:41.3696277Z     [32m  [32mâœ”[39m[0m[90m causes a validation error[0m
2025-04-04T18:15:41.3696980Z [0m    #toString[0m
2025-04-04T18:15:41.3708631Z     [32m  [32mâœ”[39m[0m[90m does not cause RangeError (gh-1296)[0m
2025-04-04T18:15:41.3709419Z [0m    formatMessage[0m
2025-04-04T18:15:41.3710701Z     [32m  [32mâœ”[39m[0m[90m replaces properties in a message[0m
2025-04-04T18:15:41.3711614Z [0m    when user code defines a r/o Error#toJSON[0m
2025-04-04T18:15:41.5973759Z     [32m  [32mâœ”[39m[0m[90m should not fail[0m[31m (226ms)[0m
2025-04-04T18:15:41.5974694Z 
2025-04-04T18:15:41.5974847Z [0m  esm:[0m
2025-04-04T18:15:41.5975548Z   [32m  [32mâœ”[39m[0m[90m should have default export[0m
2025-04-04T18:15:41.5976798Z   [32m  [32mâœ”[39m[0m[90m should have mongoose export[0m
2025-04-04T18:15:41.5977168Z 
2025-04-04T18:15:41.5977516Z [0m  geojson[0m
2025-04-04T18:15:41.6109358Z   [32m  [32mâœ”[39m[0m[90m driver query[0m
2025-04-04T18:15:41.6281973Z   [32m  [32mâœ”[39m[0m[90m within helper[0m
2025-04-04T18:15:41.6379467Z   [32m  [32mâœ”[39m[0m[90m index[0m
2025-04-04T18:15:41.6687728Z   [32m  [32mâœ”[39m[0m[90m near[0m
2025-04-04T18:15:41.6722122Z 
2025-04-04T18:15:41.6722851Z [0m  documents should not be converted to _id (gh-1408)[0m
2025-04-04T18:15:41.6913344Z   [32m  [32mâœ”[39m[0m[90m if an embedded doc[0m
2025-04-04T18:15:41.6913728Z 
2025-04-04T18:15:41.6915720Z [0m  mongoose module:[0m
2025-04-04T18:15:41.6921500Z   [32m  [32mâœ”[39m[0m[90m legacy pluralize by default (gh-5958)[0m
2025-04-04T18:15:41.6924274Z   [32m  [32mâœ”[39m[0m[90m returns legacy pluralize function by default[0m
2025-04-04T18:15:41.6929064Z   [32m  [32mâœ”[39m[0m[90m sets custom pluralize function (gh-5877)[0m
2025-04-04T18:15:41.6989388Z   [32m  [32mâœ”[39m[0m[90m debug to stream (gh-7018)[0m
2025-04-04T18:15:41.7021604Z   [32m  [32mâœ”[39m[0m[90m should collect the args correctly gh-13364[0m
2025-04-04T18:15:41.7023226Z   [32m  [32mâœ”[39m[0m[90m {g,s}etting options[0m
2025-04-04T18:15:41.7027741Z   [32m  [32mâœ”[39m[0m[90m allows `const { model } = mongoose` (gh-3768)[0m
2025-04-04T18:15:41.7029416Z   [32m  [32mâœ”[39m[0m[90m options object (gh-8144)[0m
2025-04-04T18:15:41.7033488Z   [32m  [32mâœ”[39m[0m[90m bufferCommands option (gh-5879) (gh-9179)[0m
2025-04-04T18:15:41.7043107Z   [32m  [32mâœ”[39m[0m[90m cloneSchemas option (gh-6274)[0m
2025-04-04T18:15:41.7047867Z   [32m  [32mâœ”[39m[0m[90m supports disabling `id` via global plugin (gh-10701)[0m
2025-04-04T18:15:41.7050754Z   [32m  [32mâœ”[39m[0m[90m objectIdGetter option (gh-6588)[0m
2025-04-04T18:15:41.7081205Z   [32m  [32mâœ”[39m[0m[90m runValidators option (gh-6865) (gh-6578)[0m
2025-04-04T18:15:41.7106191Z   [32m  [32mâœ”[39m[0m[90m toJSON options (gh-6815)[0m
2025-04-04T18:15:41.7112935Z   [32m  [32mâœ”[39m[0m[90m toObject options (gh-6815)[0m
2025-04-04T18:15:41.7128998Z   [32m  [32mâœ”[39m[0m[90m strict option (gh-6858)[0m
2025-04-04T18:15:41.7285533Z   [32m  [32mâœ”[39m[0m[90m declaring global plugins (gh-5690)[0m
2025-04-04T18:15:41.7298262Z   [32m  [32mâœ”[39m[0m[90m declaring global plugins with tags (gh-9780)[0m
2025-04-04T18:15:41.7313367Z   [32m  [32mâœ”[39m[0m[90m global plugins on nested schemas underneath embedded discriminators (gh-7370)[0m
2025-04-04T18:15:41.7325978Z   [32m  [32mâœ”[39m[0m[90m global plugins with applyPluginsToDiscriminators (gh-7435)[0m
2025-04-04T18:15:41.7336182Z   [32m  [32mâœ”[39m[0m[90m global plugins with applyPluginsToChildSchemas (gh-13887)[0m
2025-04-04T18:15:41.7348177Z   [32m  [32mâœ”[39m[0m[90m global plugins recompile schemas (gh-7572)[0m
2025-04-04T18:15:41.7360370Z   [32m  [32mâœ”[39m[0m[90m top-level ObjectId, Decimal128, Mixed (gh-6760)[0m
2025-04-04T18:15:41.7495068Z   [32m  [32mâœ”[39m[0m[90m stubbing now() for timestamps (gh-6728)[0m
2025-04-04T18:15:41.7501027Z   [32m  [32mâœ”[39m[0m[90m isolates custom types between mongoose instances (gh-6933) (gh-7158)[0m
2025-04-04T18:15:41.7504304Z   [32m  [32mâœ”[39m[0m[90m throws an error on setting invalid options (gh-6899)[0m
2025-04-04T18:15:41.7511223Z   [32m  [32mâœ”[39m[0m[90m clones schema when instance of another Mongoose instance's Schema class (gh-11047)[0m
2025-04-04T18:15:41.7519185Z   [32m  [32mâœ”[39m[0m[90m deleteModel()[0m
2025-04-04T18:15:41.7521821Z   [32m  [32mâœ”[39m[0m[90m isValidObjectId (gh-3823)[0m
2025-04-04T18:15:41.7524546Z   [32m  [32mâœ”[39m[0m[90m isObjectIdOrHexString (gh-11419)[0m
2025-04-04T18:15:41.7717795Z   [32m  [32mâœ”[39m[0m[90m global `strictPopulate` works when false (gh-10694)[0m
2025-04-04T18:15:41.7796834Z   [32m  [32mâœ”[39m[0m[90m global `strictPopulate` works when true (gh-10694)[0m
2025-04-04T18:15:41.7877006Z   [32m  [32mâœ”[39m[0m[90m allows global `strictPopulate` to be overriden on specific queries set to true (gh-10694)[0m
2025-04-04T18:15:41.7962287Z   [32m  [32mâœ”[39m[0m[90m allows global `strictPopulate` to be overriden on specific queries set to false (gh-10694)[0m
2025-04-04T18:15:41.7963154Z [0m    default connection works[0m
2025-04-04T18:15:41.7995267Z     [32m  [32mâœ”[39m[0m[90m without options[0m
2025-04-04T18:15:41.8022340Z     [32m  [32mâœ”[39m[0m[90m with promise (gh-3790)[0m
2025-04-04T18:15:41.8023239Z [0m    disconnection of all connections[0m
2025-04-04T18:15:41.8051459Z     [32m  [32mâœ”[39m[0m[90m with callback[0m
2025-04-04T18:15:41.8086582Z     [32m  [32mâœ”[39m[0m[90m with promise (gh-3790)[0m
2025-04-04T18:15:41.8087204Z [0m      no callback[0m
2025-04-04T18:15:41.8144745Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:41.8145546Z [0m    model()[0m
2025-04-04T18:15:41.8148210Z     [32m  [32mâœ”[39m[0m[90m accessing a model that hasn't been defined[0m
2025-04-04T18:15:41.8157099Z     [32m  [32mâœ”[39m[0m[90m returns the model at creation[0m
2025-04-04T18:15:41.8162191Z     [32m  [32mâœ”[39m[0m[90m prevents overwriting pre-existing models[0m
2025-04-04T18:15:41.8166379Z     [32m  [32mâœ”[39m[0m[90m allows passing identical name + schema args[0m
2025-04-04T18:15:41.8170382Z     [32m  [32mâœ”[39m[0m[90m allows passing identical name+schema+collection args (gh-5767)[0m
2025-04-04T18:15:41.8172080Z     [32m  [32mâœ”[39m[0m[90m throws on unknown model name[0m
2025-04-04T18:15:41.8172611Z [0m      passing collection name[0m
2025-04-04T18:15:41.8173112Z [0m        when model name already exists[0m
2025-04-04T18:15:41.8178633Z         [32m  [32mâœ”[39m[0m[90m returns a new uncached model[0m
2025-04-04T18:15:41.8179346Z [0m      passing object literal schemas[0m
2025-04-04T18:15:41.8188310Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:41.8189222Z [0m    connecting with a signature of uri, options, function[0m
2025-04-04T18:15:41.8240356Z     [32m  [32mâœ”[39m[0m[90m with single mongod[0m
2025-04-04T18:15:41.8267132Z     [32m  [32mâœ”[39m[0m[90m with replica set[0m
2025-04-04T18:15:41.8267842Z [0m    exports[0m
2025-04-04T18:15:41.8269657Z     [32m  [32mâœ”[39m[0m[90m of module[0m
2025-04-04T18:15:41.8272038Z     [32m  [32mâœ”[39m[0m[90m of new Mongoose instances[0m
2025-04-04T18:15:41.8299447Z     [32m  [32mâœ”[39m[0m[90m of result from .connect() (gh-3940)[0m
2025-04-04T18:15:41.9314628Z     [32m  [32mâœ”[39m[0m[90m connect with url doesnt cause unhandled rejection (gh-6997)[0m[31m (102ms)[0m
2025-04-04T18:15:41.9460430Z     [32m  [32mâœ”[39m[0m[90m can set `setDefaultsOnInsert` as a global option (gh-9032)[0m
2025-04-04T18:15:41.9621086Z     [32m  [32mâœ”[39m[0m[90m setting `setDefaultOnInsert` on operation has priority over base option (gh-9032)[0m
2025-04-04T18:15:41.9622512Z     [32m  [32mâœ”[39m[0m[90m should prevent non-hexadecimal strings (gh-9996)[0m
2025-04-04T18:15:41.9625544Z     [32m  [32mâœ”[39m[0m[90m Allows a syncIndexes shorthand mongoose.syncIndexes (gh-10893)[0m
2025-04-04T18:15:41.9632692Z     [32m  [32mâœ”[39m[0m[90m Allows for the removal of indexes via string or object (gh-11547)[0m
2025-04-04T18:15:41.9633764Z [0m      global `allowDiskUse` (gh-11478)[0m
2025-04-04T18:15:41.9694169Z       [32m  [32mâœ”[39m[0m[90m is `undefined` by default[0m
2025-04-04T18:15:41.9752098Z       [32m  [32mâœ”[39m[0m[90m works when set to `true` and no option provided[0m
2025-04-04T18:15:41.9809829Z       [32m  [32mâœ”[39m[0m[90m can be overridden by a specific query[0m
2025-04-04T18:15:41.9810961Z [0m      global `timestamps.createdAt.immutable` (gh-10139)[0m
2025-04-04T18:15:41.9814919Z       [32m  [32mâœ”[39m[0m[90m is `true` by default[0m
2025-04-04T18:15:41.9819456Z       [32m  [32mâœ”[39m[0m[90m can be overridden to `false`[0m
2025-04-04T18:15:41.9820254Z [0m    global id option[0m
2025-04-04T18:15:41.9962172Z     [32m  [32mâœ”[39m[0m[90m can disable the id virtual on schemas gh-11966[0m
2025-04-04T18:15:41.9962845Z [0m    set()[0m
2025-04-04T18:15:41.9965665Z     [32m  [32mâœ”[39m[0m[90m should be able to set a option through set with (key, value)[0m
2025-04-04T18:15:41.9967980Z     [32m  [32mâœ”[39m[0m[90m should be able to set a option through a object with {key: value}[0m
2025-04-04T18:15:41.9970830Z     [32m  [32mâœ”[39m[0m[90m should throw a single error when using a invalid key[0m
2025-04-04T18:15:41.9974286Z     [32m  [32mâœ”[39m[0m[90m should throw a error with many errors when using multiple invalid keys[0m
2025-04-04T18:15:41.9977312Z     [32m  [32mâœ”[39m[0m[90m should apply all values, even if there are errors[0m
2025-04-04T18:15:41.9980729Z     [32m  [32mâœ”[39m[0m[90m should throw a single error when using a invalid key when getting[0m
2025-04-04T18:15:41.9982041Z [0m    createInitialConnection (gh-8302)[0m
2025-04-04T18:15:41.9984878Z     [32m  [32mâœ”[39m[0m[90m should delete existing connection when setting createInitialConnection to false[0m
2025-04-04T18:15:41.9987288Z     [32m  [32mâœ”[39m[0m[90m should create connection when createConnection is called[0m
2025-04-04T18:15:42.0013170Z     [32m  [32mâœ”[39m[0m[90m should create a new connection automatically when connect() is called if no existing default connection[0m
2025-04-04T18:15:42.0035675Z     [32m  [32mâœ”[39m[0m[90m should not delete default connection if it has models[0m
2025-04-04T18:15:42.0055565Z     [32m  [32mâœ”[39m[0m[90m should not delete default connection if it is connected[0m
2025-04-04T18:15:42.0069642Z 
2025-04-04T18:15:42.0071019Z [0m  Int32[0m
2025-04-04T18:15:42.0080327Z   [32m  [32mâœ”[39m[0m[90m is a valid schema type[0m
2025-04-04T18:15:42.0081039Z [0m    supports the required property[0m
2025-04-04T18:15:42.0093152Z     [32m  [32mâœ”[39m[0m[90m when value is null[0m
2025-04-04T18:15:42.0100026Z     [32m  [32mâœ”[39m[0m[90m when value is non-null[0m
2025-04-04T18:15:42.0100545Z [0m    special inputs[0m
2025-04-04T18:15:42.0105522Z     [32m  [32mâœ”[39m[0m[90m supports INT32_MIN as input[0m
2025-04-04T18:15:42.0110432Z     [32m  [32mâœ”[39m[0m[90m supports INT32_MAX as input[0m
2025-04-04T18:15:42.0114960Z     [32m  [32mâœ”[39m[0m[90m supports undefined as input[0m
2025-04-04T18:15:42.0119642Z     [32m  [32mâœ”[39m[0m[90m supports null as input[0m
2025-04-04T18:15:42.0120520Z [0m    valid casts[0m
2025-04-04T18:15:42.0125187Z     [32m  [32mâœ”[39m[0m[90m casts from string[0m
2025-04-04T18:15:42.0129831Z     [32m  [32mâœ”[39m[0m[90m casts from number[0m
2025-04-04T18:15:42.0134279Z     [32m  [32mâœ”[39m[0m[90m casts from bigint[0m
2025-04-04T18:15:42.0139986Z     [32m  [32mâœ”[39m[0m[90m casts from BSON.Int32[0m
2025-04-04T18:15:42.0144593Z     [32m  [32mâœ”[39m[0m[90m casts from BSON.Double provided its value is an integer[0m
2025-04-04T18:15:42.0149085Z     [32m  [32mâœ”[39m[0m[90m casts boolean true to 1[0m
2025-04-04T18:15:42.0153304Z     [32m  [32mâœ”[39m[0m[90m casts boolean false to 0[0m
2025-04-04T18:15:42.0157795Z     [32m  [32mâœ”[39m[0m[90m casts empty string to null[0m
2025-04-04T18:15:42.0162608Z     [32m  [32mâœ”[39m[0m[90m supports valueOf() function [0m
2025-04-04T18:15:42.0163161Z [0m      long[0m
2025-04-04T18:15:42.0169203Z       [32m  [32mâœ”[39m[0m[90m casts from BSON.Long provided its value is within bounds of Int32[0m
2025-04-04T18:15:42.0183808Z       [32m  [32mâœ”[39m[0m[90m calls Long.toNumber when casting long[0m
2025-04-04T18:15:42.0185483Z [0m    cast errors[0m
2025-04-04T18:15:42.0186289Z [0m      when a non-integer decimal input is provided to an Int32 field[0m
2025-04-04T18:15:42.0199829Z       [32m  [32mâœ”[39m[0m[90m throws a CastError upon validation[0m
2025-04-04T18:15:42.0201241Z [0m      when a non-numeric string is provided to an Int32 field[0m
2025-04-04T18:15:42.0209778Z       [32m  [32mâœ”[39m[0m[90m throws a CastError upon validation[0m
2025-04-04T18:15:42.0210907Z [0m      when a non-integer decimal string is provided to an Int32 field[0m
2025-04-04T18:15:42.0219449Z       [32m  [32mâœ”[39m[0m[90m throws a CastError upon validation[0m
2025-04-04T18:15:42.0220372Z [0m      when NaN is provided to an Int32 field[0m
2025-04-04T18:15:42.0229044Z       [32m  [32mâœ”[39m[0m[90m throws a CastError upon validation[0m
2025-04-04T18:15:42.0230102Z [0m      when value above INT32_MAX is provided to an Int32 field[0m
2025-04-04T18:15:42.0238628Z       [32m  [32mâœ”[39m[0m[90m throws a CastError upon validation[0m
2025-04-04T18:15:42.0239673Z [0m      when value below INT32_MIN is provided to an Int32 field[0m
2025-04-04T18:15:42.0248122Z       [32m  [32mâœ”[39m[0m[90m throws a CastError upon validation[0m
2025-04-04T18:15:42.0248873Z [0m    custom casters[0m
2025-04-04T18:15:42.0257657Z     [32m  [32mâœ”[39m[0m[90m supports cast disabled[0m
2025-04-04T18:15:42.0263501Z     [32m  [32mâœ”[39m[0m[90m supports custom cast[0m
2025-04-04T18:15:42.0264314Z [0m    mongoDB integration[0m
2025-04-04T18:15:42.0345103Z     [32m  [32mâœ”[39m[0m[90m can query with comparison operators[0m
2025-04-04T18:15:42.0504194Z     [32m  [32mâœ”[39m[0m[90m supports populate()[0m
2025-04-04T18:15:42.0504679Z [0m      $type compatibility[0m
2025-04-04T18:15:42.0524789Z       [32m  [32mâœ”[39m[0m[90m is queryable as a JS number in MongoDB[0m
2025-04-04T18:15:42.0543048Z       [32m  [32mâœ”[39m[0m[90m is queryable as a BSON Int32 in MongoDB[0m
2025-04-04T18:15:42.0560301Z       [32m  [32mâœ”[39m[0m[90m is NOT queryable as a BSON Double in MongoDB[0m
2025-04-04T18:15:42.0580479Z 
2025-04-04T18:15:42.0580842Z [0m  model aggregate[0m
2025-04-04T18:15:42.0781379Z [0m    works[0m
2025-04-04T18:15:42.0794993Z     [32m  [32mâœ”[39m[0m[90m when return promise[0m
2025-04-04T18:15:42.0803967Z     [32m  [32mâœ”[39m[0m[90m with arrays[0m
2025-04-04T18:15:42.0812627Z     [32m  [32mâœ”[39m[0m[90m with Aggregate syntax[0m
2025-04-04T18:15:42.0821575Z     [32m  [32mâœ”[39m[0m[90m with Aggregate syntax if callback not provided[0m
2025-04-04T18:15:42.0824998Z     [32m  [32mâœ”[39m[0m[90m when returning Aggregate[0m
2025-04-04T18:15:42.0918368Z     [32m  [32mâœ”[39m[0m[90m can use helper for $out[0m
2025-04-04T18:15:42.0928786Z 
2025-04-04T18:15:42.0929582Z [0m  model[0m
2025-04-04T18:15:42.0931001Z [0m    create()[0m
2025-04-04T18:15:42.0979340Z     [32m  [32mâœ”[39m[0m[90m accepts an array and returns an array[0m
2025-04-04T18:15:42.0983378Z     [32m  [32mâœ”[39m[0m[90m fires callback when passed 0 docs[0m
2025-04-04T18:15:42.0986449Z     [32m  [32mâœ”[39m[0m[90m fires callback when empty array passed[0m
2025-04-04T18:15:42.0993899Z     [32m  [32mâœ”[39m[0m[90m supports passing options[0m
2025-04-04T18:15:42.0996923Z     [32m  [32mâœ”[39m[0m[90m returns a promise[0m
2025-04-04T18:15:42.2036127Z     [32m  [32mâœ”[39m[0m[90m creates in parallel[0m[31m (104ms)[0m
2025-04-04T18:15:42.2197288Z     [32m  [32mâœ”[39m[0m[90m should return the first error immediately if "aggregateErrors" is not explicitly set[0m
2025-04-04T18:15:42.2357295Z     [32m  [32mâœ”[39m[0m[90m should not return errors immediately if "aggregateErrors" is "true"[0m
2025-04-04T18:15:42.2358237Z [0m      callback is optional[0m
2025-04-04T18:15:42.2366624Z       [32m  [32mâœ”[39m[0m[90m with one doc[0m
2025-04-04T18:15:42.2377261Z       [32m  [32mâœ”[39m[0m[90m with more than one doc[0m
2025-04-04T18:15:42.2387496Z       [32m  [32mâœ”[39m[0m[90m with array of docs[0m
2025-04-04T18:15:42.2401470Z       [32m  [32mâœ”[39m[0m[90m and should reject promise on error[0m
2025-04-04T18:15:42.2406244Z       [32m  [32mâœ”[39m[0m[90m when passed an empty array, returns an empty array[0m
2025-04-04T18:15:42.2416457Z       [32m  [32mâœ”[39m[0m[90m treats undefined first arg as doc rather than callback (gh-9765)[0m
2025-04-04T18:15:42.2440563Z       [32m  [32mâœ”[39m[0m[90m ignores undefined last arg (gh-13487)[0m
2025-04-04T18:15:42.2441314Z [0m      ordered[0m
2025-04-04T18:15:42.2705441Z       [32m  [32mâœ”[39m[0m[90m runs the document insertion in a series when using the ordered option gh-4038[0m
2025-04-04T18:15:42.2855138Z       [32m  [32mâœ”[39m[0m[90m should throw an error only after all the documents have finished saving gh-4628[0m
2025-04-04T18:15:42.2941746Z       [32m  [32mâœ”[39m[0m[90m should return the first error immediately if "aggregateErrors" is not explicitly set (ordered)[0m
2025-04-04T18:15:42.3034690Z       [32m  [32mâœ”[39m[0m[90m should not return errors immediately if "aggregateErrors" is "true" (ordered)[0m
2025-04-04T18:15:42.3057156Z 
2025-04-04T18:15:42.3059324Z [0m  model[0m
2025-04-04T18:15:42.3061479Z [0m    discriminator()[0m
2025-04-04T18:15:42.3071384Z [0m      pushing discriminated objects[0m
2025-04-04T18:15:42.3455595Z       [32m  [32mâœ”[39m[0m[90m into non-discriminated arrays works[0m
2025-04-04T18:15:42.3502769Z [0m      find[0m
2025-04-04T18:15:42.3790850Z       [32m  [32mâœ”[39m[0m[90m hydrates correct models[0m
2025-04-04T18:15:42.4091707Z       [32m  [32mâœ”[39m[0m[90m hydrates correct models when fields selection set as string[0m
2025-04-04T18:15:42.4445233Z       [32m  [32mâœ”[39m[0m[90m hydrates correct models when fields selection set as object[0m
2025-04-04T18:15:42.4753247Z       [32m  [32mâœ”[39m[0m[90m casts underneath $or if discriminator key in filter (gh-9018)[0m
2025-04-04T18:15:42.5060134Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds documents of its type when fields selection set as string inclusive[0m
2025-04-04T18:15:42.5389977Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds documents of its type when fields selection set as string exclusive[0m
2025-04-04T18:15:42.5690164Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds documents of its type when fields selection set as empty string[0m
2025-04-04T18:15:42.5974926Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds documents of its type when fields selection set as object inclusive[0m
2025-04-04T18:15:42.6226591Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds documents of its type when fields selection set as object exclusive[0m
2025-04-04T18:15:42.6469523Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds documents of its type when fields selection set as empty object[0m
2025-04-04T18:15:42.6485469Z [0m        discriminator model only finds documents of its type[0m
2025-04-04T18:15:42.6486407Z [0m          using "ModelDiscriminator#findById"[0m
2025-04-04T18:15:42.6732249Z           [32m  [32mâœ”[39m[0m[90m to find a document of the appropriate discriminator[0m
2025-04-04T18:15:42.6749021Z [0m          using "ModelDiscriminator#find"[0m
2025-04-04T18:15:42.6988598Z           [32m  [32mâœ”[39m[0m[90m to find documents of the appropriate discriminator[0m
2025-04-04T18:15:42.7005175Z [0m      findOne[0m
2025-04-04T18:15:42.7224250Z       [32m  [32mâœ”[39m[0m[90m when selecting `select: false` field (gh-4629) (gh-11546)[0m
2025-04-04T18:15:42.7462134Z       [32m  [32mâœ”[39m[0m[90m select: false in base schema (gh-5448)[0m
2025-04-04T18:15:42.8122614Z       [32m  [32mâœ”[39m[0m[90m hydrates correct model[0m
2025-04-04T18:15:42.8377763Z       [32m  [32mâœ”[39m[0m[90m hydrates correct model when fields selection set as string inclusive[0m
2025-04-04T18:15:42.8639435Z       [32m  [32mâœ”[39m[0m[90m hydrates correct model when fields selection set as string exclusive[0m
2025-04-04T18:15:42.8887397Z       [32m  [32mâœ”[39m[0m[90m hydrates correct model when fields selection set as empty string[0m
2025-04-04T18:15:42.9135953Z       [32m  [32mâœ”[39m[0m[90m hydrates correct model when fields selection set as object inclusive[0m
2025-04-04T18:15:42.9392268Z       [32m  [32mâœ”[39m[0m[90m hydrates correct model when fields selection set as object exclusive[0m
2025-04-04T18:15:42.9646858Z       [32m  [32mâœ”[39m[0m[90m hydrates correct model when fields selection set as empty object[0m
2025-04-04T18:15:42.9894924Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds a document of its type[0m
2025-04-04T18:15:43.0157308Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds a document of its type when fields selection set as string inclusive[0m
2025-04-04T18:15:43.0404458Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds a document of its type when fields selection set as string exclusive[0m
2025-04-04T18:15:43.0655099Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds a document of its type when fields selection set as empty string[0m
2025-04-04T18:15:43.0926495Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds a document of its type when fields selection set as object inclusive[0m
2025-04-04T18:15:43.1178576Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds a document of its type when fields selection set as object exclusive[0m
2025-04-04T18:15:43.1433126Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds a document of its type when fields selection set as empty object[0m
2025-04-04T18:15:43.1451881Z [0m      findOneAndUpdate[0m
2025-04-04T18:15:43.1678193Z       [32m  [32mâœ”[39m[0m[90m does not update models of other types[0m
2025-04-04T18:15:43.1923674Z       [32m  [32mâœ”[39m[0m[90m updates models of its own type[0m
2025-04-04T18:15:43.2171120Z       [32m  [32mâœ”[39m[0m[90m base model modifies any event type[0m
2025-04-04T18:15:43.2191295Z [0m      population/reference mapping[0m
2025-04-04T18:15:43.2550689Z       [32m  [32mâœ”[39m[0m[90m populates and hydrates correct models[0m
2025-04-04T18:15:43.2863059Z       [32m  [32mâœ”[39m[0m[90m reference in child schemas (gh-2719)[0m
2025-04-04T18:15:43.3273664Z       [32m  [32mâœ”[39m[0m[90m populates parent array reference (gh-4643)[0m
2025-04-04T18:15:43.3521921Z       [32m  [32mâœ”[39m[0m[90m updating discriminator key (gh-5613)[0m
2025-04-04T18:15:43.4223586Z       [32m  [32mâœ”[39m[0m[90m disallows updating discriminator key using `$unset` (gh-11456)[0m
2025-04-04T18:15:43.4532587Z       [32m  [32mâœ”[39m[0m[90m allows updating discriminator key using `overwriteDiscriminatorKey` with `strict: throw` (gh-12513)[0m
2025-04-04T18:15:43.4837614Z       [32m  [32mâœ”[39m[0m[90m allows updating document where discriminator key is present in payload but have the same value (13055)[0m
2025-04-04T18:15:43.5211287Z       [32m  [32mâœ”[39m[0m[90m reference in child schemas (gh-2719-2)[0m
2025-04-04T18:15:43.5642766Z       [32m  [32mâœ”[39m[0m[90m correctly populates doc with nonexistent discriminator key (gh-10082)[0m
2025-04-04T18:15:43.5661593Z [0m      deleteOne and deleteMany (gh-8471)[0m
2025-04-04T18:15:43.5996403Z       [32m  [32mâœ”[39m[0m[90m adds discriminator filter if no conditions passed[0m
2025-04-04T18:15:43.6017967Z [0m      aggregate[0m
2025-04-04T18:15:43.6019647Z [0m        using "RootModel#aggregate"[0m
2025-04-04T18:15:43.6323467Z         [32m  [32mâœ”[39m[0m[90m to aggregate documents of all discriminators[0m
2025-04-04T18:15:43.6340443Z [0m        using "ModelDiscriminator#aggregate"[0m
2025-04-04T18:15:43.6636958Z         [32m  [32mâœ”[39m[0m[90m only aggregates documents of the appropriate discriminator[0m
2025-04-04T18:15:43.7037745Z         [32m  [32mâœ”[39m[0m[90m hides fields when discriminated model has select (gh-4991)[0m
2025-04-04T18:15:43.7556399Z         [32m  [32mâœ”[39m[0m[90m doesnt exclude field if slice (gh-4991)[0m
2025-04-04T18:15:43.7978266Z         [32m  [32mâœ”[39m[0m[90m merges the first pipeline stages if applicable[0m
2025-04-04T18:15:43.8008780Z 
2025-04-04T18:15:43.8010463Z [0m  model[0m
2025-04-04T18:15:43.8271674Z   [32m  [32mâœ”[39m[0m[90m attempting to populate on base model a virtual path defined on discriminator does not throw an error (gh-8924)[0m
2025-04-04T18:15:43.8298638Z   [32m  [32mâœ”[39m[0m[90m accepts a POJO as a schema for discriminators (gh-8984)[0m
2025-04-04T18:15:43.8456160Z   [32m  [32mâœ”[39m[0m[90m removes paths underneath mixed type if discriminator schema sets path to mixed (gh-9042)[0m
2025-04-04T18:15:43.8601746Z   [32m  [32mâœ”[39m[0m[90m doesnt remove paths at the same level (gh-9362)[0m
2025-04-04T18:15:43.8759512Z   [32m  [32mâœ”[39m[0m[90m overwrites if discriminator schema sets a path to single nested but base schema sets to doc array (gh-9354)[0m
2025-04-04T18:15:43.8907242Z   [32m  [32mâœ”[39m[0m[90m can use compiled model schema as a discriminator (gh-9238)[0m
2025-04-04T18:15:43.9319177Z   [32m  [32mâœ”[39m[0m[90m embedded discriminator array of arrays (gh-9984)[0m
2025-04-04T18:15:43.9355321Z   [32m  [32mâœ”[39m[0m[90m recursive embedded discriminator using schematype (gh-9600)[0m
2025-04-04T18:15:43.9404338Z   [32m  [32mâœ”[39m[0m[90m takes discriminator schema's single nested over base schema's (gh-10157)[0m
2025-04-04T18:15:43.9630379Z   [32m  [32mâœ”[39m[0m[90m allows using array as tied value (gh-10303)[0m
2025-04-04T18:15:43.9904185Z   [32m  [32mâœ”[39m[0m[90m handles nested discriminators (gh-10702)[0m
2025-04-04T18:15:43.9983305Z   [32m  [32mâœ”[39m[0m[90m Should allow reusing discriminators (gh-10931)[0m
2025-04-04T18:15:44.0353949Z   [32m  [32mâœ”[39m[0m[90m handles updating multiple properties nested underneath a discriminator (gh-11428)[0m
2025-04-04T18:15:44.0720185Z   [32m  [32mâœ”[39m[0m[90m allows defining discriminator at the subSchema level in the subschema (gh-7971)[0m
2025-04-04T18:15:44.0851449Z   [32m  [32mâœ”[39m[0m[90m handles discriminators on maps of subdocuments (gh-11720)[0m
2025-04-04T18:15:44.0946441Z   [32m  [32mâœ”[39m[0m[90m supports `mergeHooks` option to use the discriminator schema's hooks over the base schema's (gh-12472)[0m
2025-04-04T18:15:44.1217415Z   [32m  [32mâœ”[39m[0m[90m supports `mergePlugins` option to use the discriminator schema's plugins over the base schema's (gh-12604)[0m
2025-04-04T18:15:44.1594810Z   [32m  [32mâœ”[39m[0m[90m applies built-in plugins if mergePlugins and mergeHooks disabled (gh-12696) (gh-12604)[0m
2025-04-04T18:15:44.1661061Z   [32m  [32mâœ”[39m[0m[90m should not throw an error when the user is not modifying anything involving discriminators gh-12135[0m
2025-04-04T18:15:44.1798650Z   [32m  [32mâœ”[39m[0m[90m should throw an error because of the different typeKeys gh-12135[0m
2025-04-04T18:15:44.1863718Z   [32m  [32mâœ”[39m[0m[90m handles customizable discriminator options gh-12135[0m
2025-04-04T18:15:44.2024767Z   [32m  [32mâœ”[39m[0m[90m uses "value" over "name" for multi-dimensonal arrays (gh-13201)[0m
2025-04-04T18:15:44.2050557Z   [32m  [32mâœ”[39m[0m[90m runs base schema paths validators and setters before child schema validators and setters (gh-13794)[0m
2025-04-04T18:15:44.2223532Z   [32m  [32mâœ”[39m[0m[90m should not fail when using a discriminator key multiple times (gh-13906)[0m
2025-04-04T18:15:44.2623507Z   [32m  [32mâœ”[39m[0m[90m correctly gathers subdocs with discriminators (gh-15088)[0m
2025-04-04T18:15:44.3048804Z   [32m  [32mâœ”[39m[0m[90m triggers save hooks on subdocuments (gh-15092)[0m
2025-04-04T18:15:44.3065655Z [0m    discriminator()[0m
2025-04-04T18:15:44.3093053Z     [32m  [32mâœ”[39m[0m[90m model defaults without discriminator[0m
2025-04-04T18:15:44.3279348Z     [32m  [32mâœ”[39m[0m[90m is instance of root[0m
2025-04-04T18:15:44.3304201Z     [32m  [32mâœ”[39m[0m[90m can define static and instance methods[0m
2025-04-04T18:15:44.3450522Z     [32m  [32mâœ”[39m[0m[90m can define virtuals and methods using schema options (gh-12246)[0m
2025-04-04T18:15:44.3581135Z     [32m  [32mâœ”[39m[0m[90m sets schema root discriminator mapping[0m
2025-04-04T18:15:44.3594775Z     [32m  [32mâœ”[39m[0m[90m sets schema discriminator type mapping[0m
2025-04-04T18:15:44.3608334Z     [32m  [32mâœ”[39m[0m[90m adds discriminatorKey to schema with default as name[0m
2025-04-04T18:15:44.3626318Z     [32m  [32mâœ”[39m[0m[90m adds discriminator to Model.discriminators object[0m
2025-04-04T18:15:44.3687133Z     [32m  [32mâœ”[39m[0m[90m throws error on invalid schema[0m
2025-04-04T18:15:44.3702119Z     [32m  [32mâœ”[39m[0m[90m throws error when attempting to nest discriminators[0m
2025-04-04T18:15:44.3717490Z     [32m  [32mâœ”[39m[0m[90m throws error when discriminator has mapped discriminator key in schema[0m
2025-04-04T18:15:44.3736786Z     [32m  [32mâœ”[39m[0m[90m throws error when discriminator has mapped discriminator key in schema with discriminatorKey option set[0m
2025-04-04T18:15:44.3808354Z     [32m  [32mâœ”[39m[0m[90m throws error when discriminator with taken name is added[0m
2025-04-04T18:15:44.3927782Z     [32m  [32mâœ”[39m[0m[90m throws error if model name is taken (gh-4148)[0m
2025-04-04T18:15:44.4038604Z     [32m  [32mâœ”[39m[0m[90m works with nested schemas (gh-2821)[0m
2025-04-04T18:15:44.4321042Z     [32m  [32mâœ”[39m[0m[90m embedded with single nested subdocs (gh-5244)[0m
2025-04-04T18:15:44.4497056Z     [32m  [32mâœ”[39m[0m[90m embedded with single nested subdocs and tied value (gh-8164) (gh-9108)[0m
2025-04-04T18:15:44.4738954Z     [32m  [32mâœ”[39m[0m[90m supports ObjectId as tied value (gh-10130)[0m
2025-04-04T18:15:44.4861119Z     [32m  [32mâœ”[39m[0m[90m Embedded discriminators in nested doc arrays (gh-6202)[0m
2025-04-04T18:15:44.4880850Z     [32m  [32mâœ”[39m[0m[90m throws an error if calling discriminator on non-doc array (gh-6202)[0m
2025-04-04T18:15:44.4924839Z     [32m  [32mâœ”[39m[0m[90m supports using a schema that was used for another discriminator (gh-7200)[0m
2025-04-04T18:15:44.5196275Z     [32m  [32mâœ”[39m[0m[90m should copy plugins[0m
2025-04-04T18:15:44.5209363Z [0m      options[0m
2025-04-04T18:15:44.5212079Z       [32m  [32mâœ”[39m[0m[90m allows toObject to be overridden[0m
2025-04-04T18:15:44.5226224Z       [32m  [32mâœ”[39m[0m[90m allows toJSON to be overridden[0m
2025-04-04T18:15:44.5242278Z       [32m  [32mâœ”[39m[0m[90m is not customizable[0m
2025-04-04T18:15:44.5255463Z [0m      root schema inheritance[0m
2025-04-04T18:15:44.5257164Z       [32m  [32mâœ”[39m[0m[90m inherits field mappings[0m
2025-04-04T18:15:44.5270930Z       [32m  [32mâœ”[39m[0m[90m inherits validators[0m
2025-04-04T18:15:44.5289686Z       [32m  [32mâœ”[39m[0m[90m does not inherit and override fields that exist[0m
2025-04-04T18:15:44.5347360Z       [32m  [32mâœ”[39m[0m[90m inherits methods[0m
2025-04-04T18:15:44.5360784Z       [32m  [32mâœ”[39m[0m[90m inherits statics[0m
2025-04-04T18:15:44.5376473Z       [32m  [32mâœ”[39m[0m[90m inherits virtual (g.s)etters[0m
2025-04-04T18:15:44.5391362Z       [32m  [32mâœ”[39m[0m[90m does not inherit indexes[0m
2025-04-04T18:15:44.5406037Z       [32m  [32mâœ”[39m[0m[90m gets options overridden by root options except toJSON and toObject[0m
2025-04-04T18:15:44.5426089Z       [32m  [32mâœ”[39m[0m[90m does not allow setting discriminator key (gh-2041)[0m
2025-04-04T18:15:44.5451043Z       [32m  [32mâœ”[39m[0m[90m deduplicates hooks (gh-2945)[0m
2025-04-04T18:15:44.5598271Z       [32m  [32mâœ”[39m[0m[90m with typeKey (gh-4339)[0m
2025-04-04T18:15:44.5745108Z       [32m  [32mâœ”[39m[0m[90m embedded discriminators with array defaults (gh-7687)[0m
2025-04-04T18:15:44.5879164Z       [32m  [32mâœ”[39m[0m[90m embedded discriminators with create() (gh-5001)[0m
2025-04-04T18:15:44.6037665Z       [32m  [32mâœ”[39m[0m[90m embedded discriminator with numeric type (gh-7808)[0m
2025-04-04T18:15:44.6227001Z       [32m  [32mâœ”[39m[0m[90m supports clone() (gh-4983)[0m
2025-04-04T18:15:44.6411533Z       [32m  [32mâœ”[39m[0m[90m clone() allows reusing schemas (gh-5098)[0m
2025-04-04T18:15:44.6663368Z       [32m  [32mâœ”[39m[0m[90m clone() does not modify original schema `obj` (gh-14821)[0m
2025-04-04T18:15:44.6821361Z       [32m  [32mâœ”[39m[0m[90m clone() allows reusing with different models (gh-5721)[0m
2025-04-04T18:15:44.7053189Z       [32m  [32mâœ”[39m[0m[90m incorrect discriminator key throws readable error with create (gh-6434)[0m
2025-04-04T18:15:44.7204611Z       [32m  [32mâœ”[39m[0m[90m copies query hooks (gh-5147)[0m
2025-04-04T18:15:44.7351814Z       [32m  [32mâœ”[39m[0m[90m reusing schema for discriminators (gh-5684)[0m
2025-04-04T18:15:44.7453582Z       [32m  [32mâœ”[39m[0m[90m overwrites nested paths in parent schema (gh-6076)[0m
2025-04-04T18:15:44.7692780Z       [32m  [32mâœ”[39m[0m[90m nested discriminator key with projecting in parent (gh-5775)[0m
2025-04-04T18:15:44.7918114Z       [32m  [32mâœ”[39m[0m[90m with $meta projection (gh-5859)[0m
2025-04-04T18:15:44.8038180Z       [32m  [32mâœ”[39m[0m[90m embedded discriminators with $push (gh-5009)[0m
2025-04-04T18:15:44.8168225Z       [32m  [32mâœ”[39m[0m[90m embedded discriminators with $push + $each (gh-5070)[0m
2025-04-04T18:15:44.8289922Z       [32m  [32mâœ”[39m[0m[90m embedded discriminators with $set (gh-5130)[0m
2025-04-04T18:15:44.8394591Z       [32m  [32mâœ”[39m[0m[90m embedded in document arrays (gh-2723)[0m
2025-04-04T18:15:44.8460649Z [0m        applyPluginsToDiscriminators[0m
2025-04-04T18:15:44.8473567Z         [32m  [32mâœ”[39m[0m[90m works (gh-4965)[0m
2025-04-04T18:15:44.8496688Z         [32m  [32mâœ”[39m[0m[90m works with customized options (gh-7458)[0m
2025-04-04T18:15:44.8510351Z [0m      embedded discriminators + hooks (gh-5706)[0m
2025-04-04T18:15:44.8611092Z       [32m  [32mâœ”[39m[0m[90m should call the hooks on the embedded document defined by both the parent and discriminated schemas[0m
2025-04-04T18:15:44.8699973Z       [32m  [32mâœ”[39m[0m[90m should call the hooks on the embedded document in an embedded array defined by both the parent and discriminated schemas[0m
2025-04-04T18:15:44.8777489Z [0m    bug fixes[0m
2025-04-04T18:15:44.8786893Z     [32m  [32mâœ”[39m[0m[90m discriminators with classes modifies class in place (gh-5175)[0m
2025-04-04T18:15:44.8806797Z     [32m  [32mâœ”[39m[0m[90m allows overwriting base class methods (gh-5227)[0m
2025-04-04T18:15:44.8832700Z     [32m  [32mâœ”[39m[0m[90m supports adding properties (gh-5104) (gh-5635)[0m
2025-04-04T18:15:44.8859034Z     [32m  [32mâœ”[39m[0m[90m with subclassing (gh-7547)[0m
2025-04-04T18:15:44.8884058Z     [32m  [32mâœ”[39m[0m[90m uses correct discriminator when using `new BaseModel` (gh-7586)[0m
2025-04-04T18:15:44.8904652Z     [32m  [32mâœ”[39m[0m[90m uses correct discriminator when using `new BaseModel` with value (gh-7851)[0m
2025-04-04T18:15:44.9052428Z     [32m  [32mâœ”[39m[0m[90m allows setting custom discriminator key in schema (gh-7807)[0m
2025-04-04T18:15:44.9296789Z     [32m  [32mâœ”[39m[0m[90m does not project in embedded discriminator key if it is the only selected field (gh-7574)[0m
2025-04-04T18:15:44.9378209Z     [32m  [32mâœ”[39m[0m[90m merges schemas instead of overwriting (gh-7884)[0m
2025-04-04T18:15:44.9536034Z     [32m  [32mâœ”[39m[0m[90m _id: false in discriminator nested schema (gh-8274)[0m
2025-04-04T18:15:44.9609229Z     [32m  [32mâœ”[39m[0m[90m with discriminators in embedded arrays (gh-8273)[0m
2025-04-04T18:15:44.9698516Z [0m    Discriminator Key test[0m
2025-04-04T18:15:44.9837976Z     [32m  [32mâœ”[39m[0m[90m gh-9015[0m
2025-04-04T18:15:45.0131852Z 
2025-04-04T18:15:45.0132774Z [0m  model field selection[0m
2025-04-04T18:15:45.0278637Z   [32m  [32mâœ”[39m[0m[90m excluded fields should be undefined[0m
2025-04-04T18:15:45.0433387Z   [32m  [32mâœ”[39m[0m[90m excluded fields should be undefined and defaults applied to other fields[0m
2025-04-04T18:15:45.0603109Z   [32m  [32mâœ”[39m[0m[90m where subset of fields excludes _id[0m
2025-04-04T18:15:45.0767225Z   [32m  [32mâœ”[39m[0m[90m works with subset of fields, excluding _id[0m
2025-04-04T18:15:45.0898451Z   [32m  [32mâœ”[39m[0m[90m works with just _id and findOneAndUpdate (gh-3407)[0m
2025-04-04T18:15:45.1079385Z   [32m  [32mâœ”[39m[0m[90m works with subset of fields excluding emebedded doc _id (gh-541)[0m
2025-04-04T18:15:45.1224347Z   [32m  [32mâœ”[39m[0m[90m included fields should have defaults applied when no value exists in db (gh-870)[0m
2025-04-04T18:15:45.1403980Z   [32m  [32mâœ”[39m[0m[90m including subdoc field excludes other subdoc fields (gh-1027)[0m
2025-04-04T18:15:45.1522395Z   [32m  [32mâœ”[39m[0m[90m excluding nested subdoc fields (gh-1027)[0m
2025-04-04T18:15:45.1671953Z   [32m  [32mâœ”[39m[0m[90m selecting an array of docs applies defaults properly (gh-1108)[0m
2025-04-04T18:15:45.1843566Z   [32m  [32mâœ”[39m[0m[90m select properties named length (gh-3903)[0m
2025-04-04T18:15:45.2051135Z   [32m  [32mâœ”[39m[0m[90m appropriately filters subdocuments based on properties (gh-1280)[0m
2025-04-04T18:15:45.2450033Z   [32m  [32mâœ”[39m[0m[90m sets defaults correctly in child docs with projection (gh-7159)[0m
2025-04-04T18:15:45.2713001Z   [32m  [32mâœ”[39m[0m[90m when `select: true` in schema, works with $elemMatch in projection[0m
2025-04-04T18:15:45.2896205Z   [32m  [32mâœ”[39m[0m[90m selection specified in query overwrites option in schema[0m
2025-04-04T18:15:45.3098542Z   [32m  [32mâœ”[39m[0m[90m selecting with `false` instead of `0` doesn't overwrite schema `select: false` (gh-8923)[0m
2025-04-04T18:15:45.3290739Z   [32m  [32mâœ”[39m[0m[90m handles deselecting _id when other field has schema-level `select: false` (gh-12670)[0m
2025-04-04T18:15:45.3379423Z [0m    with $elemMatch projection[0m
2025-04-04T18:15:45.3509661Z     [32m  [32mâœ”[39m[0m[90m casts elemMatch args (gh-1091)[0m
2025-04-04T18:15:45.3664436Z     [32m  [32mâœ”[39m[0m[90m saves modified elemMatch paths (gh-1334)[0m
2025-04-04T18:15:45.3812519Z     [32m  [32mâœ”[39m[0m[90m works with $ positional in select (gh-2031)[0m
2025-04-04T18:15:45.3897149Z 
2025-04-04T18:15:45.3897682Z [0m  model: findByIdAndUpdate:[0m
2025-04-04T18:15:45.4022275Z   [32m  [32mâœ”[39m[0m[90m returns the edited document with previous and target discriminators types defined[0m
2025-04-04T18:15:45.4175502Z   [32m  [32mâœ”[39m[0m[90m returns the edited document with only previous discriminator type defined[0m
2025-04-04T18:15:45.4247684Z 
2025-04-04T18:15:45.4248326Z [0m  model: findOneAndDelete:[0m
2025-04-04T18:15:45.4366527Z   [32m  [32mâœ”[39m[0m[90m returns the original document[0m
2025-04-04T18:15:45.4440603Z   [32m  [32mâœ”[39m[0m[90m options/conditions/doc are merged when no callback is passed[0m
2025-04-04T18:15:45.4608881Z   [32m  [32mâœ”[39m[0m[90m returns the original document[0m
2025-04-04T18:15:45.4640480Z   [32m  [32mâœ”[39m[0m[90m options/conditions/doc are merged when no callback is passed[0m
2025-04-04T18:15:45.4713557Z   [32m  [32mâœ”[39m[0m[90m supports v3 select string syntax[0m
2025-04-04T18:15:45.4779375Z   [32m  [32mâœ”[39m[0m[90m supports v3 select object syntax[0m
2025-04-04T18:15:45.4845298Z   [32m  [32mâœ”[39m[0m[90m supports v3 sort string syntax[0m
2025-04-04T18:15:45.4920808Z   [32m  [32mâœ”[39m[0m[90m supports v3 sort object syntax[0m
2025-04-04T18:15:45.5210861Z   [32m  [32mâœ”[39m[0m[90m supports population (gh-1395)[0m
2025-04-04T18:15:45.5251381Z   [32m  [32mâœ”[39m[0m[90m only calls setters once (gh-6203)[0m
2025-04-04T18:15:45.5455440Z   [32m  [32mâœ”[39m[0m[90m supports the `includeResultMetadata` option (gh-13539)[0m
2025-04-04T18:15:45.5536114Z [0m    middleware[0m
2025-04-04T18:15:45.5657600Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:45.5841227Z     [32m  [32mâœ”[39m[0m[90m works with exec() (gh-439)[0m
2025-04-04T18:15:45.5917629Z 
2025-04-04T18:15:45.5918455Z [0m  model: findOneAndReplace:[0m
2025-04-04T18:15:45.6036617Z   [32m  [32mâœ”[39m[0m[90m returns the original document[0m
2025-04-04T18:15:45.6113363Z   [32m  [32mâœ”[39m[0m[90m options/conditions/doc are merged when no callback is passed[0m
2025-04-04T18:15:45.6297427Z   [32m  [32mâœ”[39m[0m[90m returns the original document[0m
2025-04-04T18:15:45.6332096Z   [32m  [32mâœ”[39m[0m[90m options/conditions/doc are merged when no callback is passed[0m
2025-04-04T18:15:45.6411737Z   [32m  [32mâœ”[39m[0m[90m supports v3 select string syntax[0m
2025-04-04T18:15:45.6479565Z   [32m  [32mâœ”[39m[0m[90m supports v3 select object syntax[0m
2025-04-04T18:15:45.6546134Z   [32m  [32mâœ”[39m[0m[90m supports v3 sort string syntax[0m
2025-04-04T18:15:45.6624307Z   [32m  [32mâœ”[39m[0m[90m supports v3 sort object syntax[0m
2025-04-04T18:15:45.6914409Z   [32m  [32mâœ”[39m[0m[90m supports population (gh-1395)[0m
2025-04-04T18:15:45.6956663Z   [32m  [32mâœ”[39m[0m[90m only calls setters once (gh-6203)[0m
2025-04-04T18:15:45.7192937Z   [32m  [32mâœ”[39m[0m[90m works (gh-7654)[0m
2025-04-04T18:15:45.7341199Z   [32m  [32mâœ”[39m[0m[90m schema-level projection (gh-7654)[0m
2025-04-04T18:15:45.7488208Z   [32m  [32mâœ”[39m[0m[90m supports `new` in addition to `returnOriginal` (gh-7846)[0m
2025-04-04T18:15:45.7646883Z   [32m  [32mâœ”[39m[0m[90m orFail() (gh-8030)[0m
2025-04-04T18:15:45.7770924Z   [32m  [32mâœ”[39m[0m[90m skips validation if `runValidators` === false (gh-11559)[0m
2025-04-04T18:15:45.7870568Z   [32m  [32mâœ”[39m[0m[90m respects query-level strict option (gh-13507)[0m
2025-04-04T18:15:45.7977090Z   [32m  [32mâœ”[39m[0m[90m respects schema-level strict option (gh-13507)[0m
2025-04-04T18:15:45.8093775Z   [32m  [32mâœ”[39m[0m[90m does not send overwrite or timestamps option to MongoDB[0m
2025-04-04T18:15:45.8308756Z   [32m  [32mâœ”[39m[0m[90m supports the `includeResultMetadata` option (gh-13539)[0m
2025-04-04T18:15:45.8373679Z [0m    middleware[0m
2025-04-04T18:15:45.8505731Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:47.8586579Z     [31m  1) works with exec() (gh-439)[0m
2025-04-04T18:15:48.7866335Z 
2025-04-04T18:15:48.7869194Z [0m  model: findOneAndUpdate:[0m
2025-04-04T18:15:48.8038227Z   [32m  [32mâœ”[39m[0m[90m returns the edited document[0m
2025-04-04T18:15:48.8175032Z   [32m  [32mâœ”[39m[0m[90m returns the original document[0m
2025-04-04T18:15:48.8330545Z   [32m  [32mâœ”[39m[0m[90m allows upserting[0m
2025-04-04T18:15:48.8363221Z   [32m  [32mâœ”[39m[0m[90m options/conditions/doc are merged when no callback is passed[0m
2025-04-04T18:15:48.8573195Z   [32m  [32mâœ”[39m[0m[90m updates numbers atomically[0m
2025-04-04T18:15:48.8712648Z   [32m  [32mâœ”[39m[0m[90m honors strict schemas[0m
2025-04-04T18:15:48.8900777Z   [32m  [32mâœ”[39m[0m[90m returns errors with strict:throw schemas[0m
2025-04-04T18:15:48.9125477Z   [32m  [32mâœ”[39m[0m[90m returns the original document[0m
2025-04-04T18:15:48.9154566Z   [32m  [32mâœ”[39m[0m[90m options/conditions/doc are merged when no callback is passed[0m
2025-04-04T18:15:48.9224807Z   [32m  [32mâœ”[39m[0m[90m supports v3 select string syntax[0m
2025-04-04T18:15:48.9295394Z   [32m  [32mâœ”[39m[0m[90m supports v3 select object syntax[0m
2025-04-04T18:15:48.9548892Z   [32m  [32mâœ”[39m[0m[90m supports v3 sort string syntax[0m
2025-04-04T18:15:48.9576212Z   [32m  [32mâœ”[39m[0m[90m supports v3 sort object syntax[0m
2025-04-04T18:15:48.9767475Z   [32m  [32mâœ”[39m[0m[90m supports $elemMatch with $in (gh-1091 gh-1100)[0m
2025-04-04T18:15:49.0237545Z   [32m  [32mâœ”[39m[0m[90m supports population (gh-1395)[0m
2025-04-04T18:15:49.0394671Z   [32m  [32mâœ”[39m[0m[90m returns null when doing an upsert & new=false gh-1533[0m
2025-04-04T18:15:49.0599824Z   [32m  [32mâœ”[39m[0m[90m return hydrated document (gh-7734 gh-7735)[0m
2025-04-04T18:15:49.0825683Z   [32m  [32mâœ”[39m[0m[90m return includeResultMetadata when doing an upsert & new=false gh-7770[0m
2025-04-04T18:15:49.1021145Z   [32m  [32mâœ”[39m[0m[90m allows properties to be set to null gh-1643[0m
2025-04-04T18:15:49.1245389Z   [32m  [32mâœ”[39m[0m[90m can do various deep equal checks (lodash.isEqual, lodash.isEqualWith, assert.deepEqual, utils.deepEqual) on object id after findOneAndUpdate (gh-2070)[0m
2025-04-04T18:15:49.1408820Z   [32m  [32mâœ”[39m[0m[90m adds __v on upsert (gh-2122) (gh-4505)[0m
2025-04-04T18:15:49.1538027Z   [32m  [32mâœ”[39m[0m[90m doesn't add __v on upsert if `$set` (gh-4505) (gh-5973)[0m
2025-04-04T18:15:49.1764333Z   [32m  [32mâœ”[39m[0m[90m doesn't add __v on upsert if `$set` with `update()` (gh-5973)[0m
2025-04-04T18:15:49.1901823Z   [32m  [32mâœ”[39m[0m[90m works with nested schemas and $pull+$or (gh-1932)[0m
2025-04-04T18:15:49.2001377Z   [32m  [32mâœ”[39m[0m[90m accepts undefined[0m
2025-04-04T18:15:49.2104295Z   [32m  [32mâœ”[39m[0m[90m cast errors for empty objects as object ids (gh-2732)[0m
2025-04-04T18:15:49.2213894Z   [32m  [32mâœ”[39m[0m[90m cast errors for empty objects as object ids (gh-2732)[0m
2025-04-04T18:15:49.2415582Z   [32m  [32mâœ”[39m[0m[90m with versionKey in top-level and a `$` key (gh-7003)[0m
2025-04-04T18:15:49.2602119Z   [32m  [32mâœ”[39m[0m[90m empty update with timestamps (gh-7041)[0m
2025-04-04T18:15:49.2823663Z   [32m  [32mâœ”[39m[0m[90m skipping updatedAt and createdAt (gh-3934)[0m
2025-04-04T18:15:49.2940707Z   [32m  [32mâœ”[39m[0m[90m runs lowercase on $addToSet, $push, etc (gh-4185)[0m
2025-04-04T18:15:49.3410352Z   [32m  [32mâœ”[39m[0m[90m returnOriginal (gh-7846)[0m
2025-04-04T18:15:49.3619116Z   [32m  [32mâœ”[39m[0m[90m updating embedded discriminator with discriminator key in update (gh-8378)[0m
2025-04-04T18:15:49.3806034Z   [32m  [32mâœ”[39m[0m[90m setDefaultsOnInsert with doubly nested subdocs (gh-8392)[0m
2025-04-04T18:15:49.4018453Z   [32m  [32mâœ”[39m[0m[90m calls setters on mixed type (gh-8444)[0m
2025-04-04T18:15:49.4152954Z   [32m  [32mâœ”[39m[0m[90m returnDocument should work (gh-10321)[0m
2025-04-04T18:15:49.4340996Z   [32m  [32mâœ”[39m[0m[90m supports overwriting nested map paths (gh-10485)[0m
2025-04-04T18:15:49.4543564Z   [32m  [32mâœ”[39m[0m[90m supports $set on elements of map of subdocuments (gh-10720)[0m
2025-04-04T18:15:49.4654953Z   [32m  [32mâœ”[39m[0m[90m handles validating deeply nested subdocuments (gh-11394)[0m
2025-04-04T18:15:49.4854516Z   [32m  [32mâœ”[39m[0m[90m casts array filters (gh-13219)[0m
2025-04-04T18:15:49.4946947Z   [32m  [32mâœ”[39m[0m[90m throws error if filter is not an object (gh-13264)[0m
2025-04-04T18:15:49.5146974Z   [32m  [32mâœ”[39m[0m[90m handles plus path in projection (gh-13413)[0m
2025-04-04T18:15:49.5364997Z   [32m  [32mâœ”[39m[0m[90m allows setting paths with dots in non-strict paths (gh-13434) (gh-10200)[0m
2025-04-04T18:15:49.5490303Z   [32m  [32mâœ”[39m[0m[90m supports the `includeResultMetadata` option (gh-13539)[0m
2025-04-04T18:15:49.5710675Z   [32m  [32mâœ”[39m[0m[90m successfully runs findOneAndUpdate with no update and versionKey set to false (gh-13783)[0m
2025-04-04T18:15:49.5827177Z   [32m  [32mâœ”[39m[0m[90m skips adding defaults to filter when passing empty update (gh-13962)[0m
2025-04-04T18:15:49.5933267Z   [32m  [32mâœ”[39m[0m[90m sets CastError path to full path (gh-14114)[0m
2025-04-04T18:15:49.6017476Z [0m    will correctly[0m
2025-04-04T18:15:49.6186344Z     [32m  [32mâœ”[39m[0m[90m update subdocument in array item[0m
2025-04-04T18:15:49.6205288Z [0m    middleware[0m
2025-04-04T18:15:49.6229101Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:49.6350857Z     [32m  [32mâœ”[39m[0m[90m works with exec()[0m
2025-04-04T18:15:49.6433113Z [0m    validators (gh-860)[0m
2025-04-04T18:15:49.6569417Z     [32m  [32mâœ”[39m[0m[90m applies defaults on upsert[0m
2025-04-04T18:15:49.6722475Z     [32m  [32mâœ”[39m[0m[90m doesnt set default on upsert if query sets it[0m
2025-04-04T18:15:49.6878514Z     [32m  [32mâœ”[39m[0m[90m properly sets default on upsert if query wont set it[0m
2025-04-04T18:15:49.7026337Z     [32m  [32mâœ”[39m[0m[90m skips setting defaults within maps (gh-7909)[0m
2025-04-04T18:15:49.7066292Z     [32m  [32mâœ”[39m[0m[90m runs validators if theyre set[0m
2025-04-04T18:15:49.7166223Z     [32m  [32mâœ”[39m[0m[90m validators handle $unset and $setOnInsert[0m
2025-04-04T18:15:49.7286805Z     [32m  [32mâœ”[39m[0m[90m min/max, enum, and regex built-in validators work[0m
2025-04-04T18:15:49.7385174Z     [32m  [32mâœ”[39m[0m[90m multiple validation errors[0m
2025-04-04T18:15:49.7605634Z     [32m  [32mâœ”[39m[0m[90m validators ignore $inc[0m
2025-04-04T18:15:49.7754473Z     [32m  [32mâœ”[39m[0m[90m validators ignore paths underneath mixed (gh-8659)[0m
2025-04-04T18:15:49.7887361Z     [32m  [32mâœ”[39m[0m[90m should work with arrays (gh-3035)[0m
2025-04-04T18:15:49.8067149Z     [32m  [32mâœ”[39m[0m[90m should allow null values in query (gh-3135)[0m
2025-04-04T18:15:49.8283499Z     [32m  [32mâœ”[39m[0m[90m should work with array documents (gh-3034)[0m
2025-04-04T18:15:49.8436897Z     [32m  [32mâœ”[39m[0m[90m handles setting array (gh-3107)[0m
2025-04-04T18:15:49.8572935Z     [32m  [32mâœ”[39m[0m[90m handles nested cast errors (gh-3468)[0m
2025-04-04T18:15:49.8670735Z     [32m  [32mâœ”[39m[0m[90m cast errors with nested schemas (gh-3580)[0m
2025-04-04T18:15:49.8874392Z     [32m  [32mâœ”[39m[0m[90m pull with nested schemas (gh-3616)[0m
2025-04-04T18:15:49.8965659Z     [32m  [32mâœ”[39m[0m[90m setting nested schema (gh-3889)[0m
2025-04-04T18:15:49.9043875Z [0m    bug fixes[0m
2025-04-04T18:15:49.9173104Z     [32m  [32mâœ”[39m[0m[90m passes raw result if includeResultMetadata specified (gh-4925)[0m
2025-04-04T18:15:49.9292874Z     [32m  [32mâœ”[39m[0m[90m handles setting single embedded docs to null (gh-4281)[0m
2025-04-04T18:15:49.9391478Z     [32m  [32mâœ”[39m[0m[90m custom validator on mixed field (gh-4305)[0m
2025-04-04T18:15:49.9494401Z     [32m  [32mâœ”[39m[0m[90m single nested doc cast errors (gh-3602)[0m
2025-04-04T18:15:49.9693190Z     [32m  [32mâœ”[39m[0m[90m projection option as alias for fields (gh-4315)[0m
2025-04-04T18:15:49.9731548Z     [32m  [32mâœ”[39m[0m[90m handles upserting a non-existing field (gh-4757)[0m
2025-04-04T18:15:49.9968576Z     [32m  [32mâœ”[39m[0m[90m strict option (gh-5108)[0m
2025-04-04T18:15:50.0098325Z     [32m  [32mâœ”[39m[0m[90m correct key order (gh-6484)[0m
2025-04-04T18:15:50.0296094Z     [32m  [32mâœ”[39m[0m[90m should not apply schema transforms (gh-4574)[0m
2025-04-04T18:15:50.0478700Z     [32m  [32mâœ”[39m[0m[90m update using $ (gh-5628)[0m
2025-04-04T18:15:50.0671711Z     [32m  [32mâœ”[39m[0m[90m projection with $elemMatch (gh-5661)[0m
2025-04-04T18:15:50.0765575Z     [32m  [32mâœ”[39m[0m[90m multi cast error (gh-5609)[0m
2025-04-04T18:15:50.0867508Z     [32m  [32mâœ”[39m[0m[90m update validators with pushing null (gh-5710)[0m
2025-04-04T18:15:50.0965517Z     [32m  [32mâœ”[39m[0m[90m only calls setters once (gh-6203)[0m
2025-04-04T18:15:50.1065470Z     [32m  [32mâœ”[39m[0m[90m only calls setters once (gh-6203)[0m
2025-04-04T18:15:50.1324034Z     [32m  [32mâœ”[39m[0m[90m update validators with pull + $in (gh-6240)[0m
2025-04-04T18:15:50.1472080Z     [32m  [32mâœ”[39m[0m[90m avoids edge case with middleware cloning buffers (gh-5702)[0m
2025-04-04T18:15:50.1673616Z     [32m  [32mâœ”[39m[0m[90m setting subtype when saving (gh-5551)[0m
2025-04-04T18:15:50.1807901Z     [32m  [32mâœ”[39m[0m[90m properly handles casting nested objects in update (gh-4724)[0m
2025-04-04T18:15:50.1911688Z     [32m  [32mâœ”[39m[0m[90m doesnt do double validation on document arrays during updates (gh-4440)[0m
2025-04-04T18:15:50.2162459Z     [32m  [32mâœ”[39m[0m[90m runs setters on array elements (gh-7679)[0m
2025-04-04T18:15:50.2205997Z     [32m  [32mâœ”[39m[0m[90m avoid calling $pull in doc array (gh-6971) (gh-6889)[0m
2025-04-04T18:15:50.2311241Z     [32m  [32mâœ”[39m[0m[90m $pull with `required` and runValidators (gh-6972)[0m
2025-04-04T18:15:50.2413750Z 
2025-04-04T18:15:50.2414280Z [0m  model[0m
2025-04-04T18:15:50.2417292Z [0m    hydrate()[0m
2025-04-04T18:15:50.2444257Z     [32m  [32mâœ”[39m[0m[90m hydrates documents with no modified paths[0m
2025-04-04T18:15:50.2470409Z     [32m  [32mâœ”[39m[0m[90m runs validators[0m
2025-04-04T18:15:50.2481645Z     [32m  [32mâœ”[39m[0m[90m supports projection (gh-9209)[0m
2025-04-04T18:15:50.2493476Z     [32m  [32mâœ”[39m[0m[90m works correctly with model discriminators[0m
2025-04-04T18:15:50.2506851Z     [32m  [32mâœ”[39m[0m[90m should deeply hydrate the document with the `hydratedPopulatedDocs` option (gh-4727)[0m
2025-04-04T18:15:50.2813654Z     [32m  [32mâœ”[39m[0m[90m should hydrate documents in virtual populate (gh-14503)[0m
2025-04-04T18:15:50.2822310Z     [32m  [32mâœ”[39m[0m[90m sets hydrated docs as populated (gh-15048)[0m
2025-04-04T18:15:50.2977132Z     [32m  [32mâœ”[39m[0m[90m marks deeply nested docs as hydrated underneath virtuals (gh-15110)[0m
2025-04-04T18:15:50.3050328Z     [32m  [32mâœ”[39m[0m[90m marks deeply nested docs as hydrated underneath conventional (gh-15110)[0m
2025-04-04T18:15:50.3073679Z 
2025-04-04T18:15:50.3074543Z [0m  model[0m
2025-04-04T18:15:50.3153144Z   [32m  [32mâœ”[39m[0m[90m sets correct partialFilterExpression for document array (gh-9091)[0m
2025-04-04T18:15:50.3267144Z   [32m  [32mâœ”[39m[0m[90m skips automatic indexing on childSchema if autoIndex: false (gh-9150)[0m
2025-04-04T18:15:50.3304478Z [0m    indexes[0m
2025-04-04T18:15:50.3433249Z     [32m  [32mâœ”[39m[0m[90m are created when model is compiled[0m
2025-04-04T18:15:50.3589006Z     [32m  [32mâœ”[39m[0m[90m of embedded documents[0m
2025-04-04T18:15:50.3690103Z     [32m  [32mâœ”[39m[0m[90m of embedded documents unless excludeIndexes (gh-5575) (gh-8343)[0m
2025-04-04T18:15:50.3922031Z     [32m  [32mâœ”[39m[0m[90m of multiple embedded documents with same schema[0m
2025-04-04T18:15:50.4051885Z     [32m  [32mâœ”[39m[0m[90m compound: on embedded docs[0m
2025-04-04T18:15:50.4077671Z     [32m  [32mâœ”[39m[0m[90m nested embedded docs (gh-5199)[0m
2025-04-04T18:15:50.4094131Z     [32m  [32mâœ”[39m[0m[90m primitive arrays (gh-3347)[0m
2025-04-04T18:15:50.4276039Z     [32m  [32mâœ”[39m[0m[90m error should emit on the model[0m
2025-04-04T18:15:50.4440376Z     [32m  [32mâœ”[39m[0m[90m when one index creation errors[0m
2025-04-04T18:15:50.4562736Z     [32m  [32mâœ”[39m[0m[90m creates descending indexes from schema definition(gh-8895)[0m
2025-04-04T18:15:50.4582767Z [0m      auto creation[0m
2025-04-04T18:15:50.5700347Z       [32m  [32mâœ”[39m[0m[90m can be disabled[0m[31m (111ms)[0m
2025-04-04T18:15:50.5716780Z [0m        global autoIndexes (gh-1875)[0m
2025-04-04T18:15:50.5793435Z         [32m  [32mâœ”[39m[0m[90m will create indexes as a default[0m
2025-04-04T18:15:50.6934928Z         [32m  [32mâœ”[39m[0m[90m will not create indexes if the global auto index is false and schema option isnt set (gh-1875)[0m[31m (113ms)[0m
2025-04-04T18:15:50.6954486Z [0m      model.ensureIndexes()[0m
2025-04-04T18:15:50.6955060Z       [36m  - is a function[0m
2025-04-04T18:15:50.6955570Z       [36m  - returns a Promise[0m
2025-04-04T18:15:50.6956535Z       [36m  - creates indexes[0m
2025-04-04T18:15:50.6956941Z [0m    discriminators with unique[0m
2025-04-04T18:15:50.7439207Z     [32m  [32mâœ”[39m[0m[90m converts to partial unique index (gh-6347)[0m[33m (48ms)[0m
2025-04-04T18:15:50.7571730Z     [32m  [32mâœ”[39m[0m[90m decorated discriminator index with syncIndexes (gh-6347)[0m
2025-04-04T18:15:50.7677792Z     [32m  [32mâœ”[39m[0m[90m uses schema-level collation by default (gh-9912)[0m
2025-04-04T18:15:50.7822072Z     [32m  [32mâœ”[39m[0m[90m different collation with syncIndexes() (gh-8521)[0m
2025-04-04T18:15:50.8086416Z     [32m  [32mâœ”[39m[0m[90m reports syncIndexes() error (gh-9303)[0m
2025-04-04T18:15:50.8222891Z     [32m  [32mâœ”[39m[0m[90m should not re-create a compound text index that involves non-text indexes, using syncIndexes (gh-13136)[0m
2025-04-04T18:15:50.8335015Z     [32m  [32mâœ”[39m[0m[90m should not find a diff when calling diffIndexes after syncIndexes involving a text and non-text compound index (gh-13136)[0m
2025-04-04T18:15:50.8547570Z     [32m  [32mâœ”[39m[0m[90m cleanIndexes (gh-6676)[0m
2025-04-04T18:15:50.8876407Z     [32m  [32mâœ”[39m[0m[90m should prevent collation on text indexes (gh-10044)[0m
2025-04-04T18:15:50.9069702Z     [32m  [32mâœ”[39m[0m[90m should do a dryRun feat-10316[0m
2025-04-04T18:15:50.9103354Z     [32m  [32mâœ”[39m[0m[90m running diffIndexes with a non-existent collection should not throw an error (gh-14010)[0m
2025-04-04T18:15:50.9168019Z 
2025-04-04T18:15:50.9168858Z [0m  insertMany()[0m
2025-04-04T18:15:50.9308048Z   [32m  [32mâœ”[39m[0m[90m with timestamps (gh-723)[0m
2025-04-04T18:15:50.9408954Z   [32m  [32mâœ”[39m[0m[90m timestamps respect $timestamps() (gh-12117)[0m
2025-04-04T18:15:50.9578218Z   [32m  [32mâœ”[39m[0m[90m insertMany() with nested timestamps (gh-12060)[0m
2025-04-04T18:15:50.9673547Z   [32m  [32mâœ”[39m[0m[90m insertMany() (gh-723)[0m
2025-04-04T18:15:50.9956200Z   [32m  [32mâœ”[39m[0m[90m insertMany() ordered option for constraint errors (gh-3893)[0m
2025-04-04T18:15:51.0144812Z   [32m  [32mâœ”[39m[0m[90m insertMany() ordered option for validation errors (gh-5068)[0m
2025-04-04T18:15:51.0284554Z   [32m  [32mâœ”[39m[0m[90m insertMany() `writeErrors` if only one error (gh-8938)[0m
2025-04-04T18:15:51.0312917Z   [32m  [32mâœ”[39m[0m[90m insertMany() ordered option for single validation error[0m
2025-04-04T18:15:51.0416237Z   [32m  [32mâœ”[39m[0m[90m insertMany() hooks (gh-3846)[0m
2025-04-04T18:15:51.0488876Z   [32m  [32mâœ”[39m[0m[90m returns empty array if no documents (gh-8130)[0m
2025-04-04T18:15:51.0618213Z   [32m  [32mâœ”[39m[0m[90m insertMany() multi validation error with ordered false (gh-5337)[0m
2025-04-04T18:15:51.0704538Z   [32m  [32mâœ”[39m[0m[90m insertMany() validation error with ordered true when all documents are invalid[0m
2025-04-04T18:15:51.0767793Z   [32m  [32mâœ”[39m[0m[90m insertMany() validation error with ordered false when all documents are invalid[0m
2025-04-04T18:15:51.0907894Z   [32m  [32mâœ”[39m[0m[90m insertMany() validation error with ordered false and rawResult for checking which documents failed (gh-12791)[0m
2025-04-04T18:15:51.1068523Z   [32m  [32mâœ”[39m[0m[90m insertMany() validation error with ordered false and rawResult for mixed write and validation error (gh-12791)[0m
2025-04-04T18:15:51.1282933Z   [32m  [32mâœ”[39m[0m[90m insertMany() populate option (gh-9720)[0m
2025-04-04T18:15:51.1396860Z   [32m  [32mâœ”[39m[0m[90m insertMany() sets `isNew` for inserted documents with `ordered = false` (gh-9677)[0m
2025-04-04T18:15:51.1498587Z   [32m  [32mâœ”[39m[0m[90m insertMany() returns only inserted docs with `ordered = true`[0m
2025-04-04T18:15:51.1521678Z   [32m  [32mâœ”[39m[0m[90m insertMany() validation error with ordered true and rawResult true when all documents are invalid[0m
2025-04-04T18:15:51.1588758Z   [32m  [32mâœ”[39m[0m[90m insertMany() validation error with ordered false and rawResult true when all documents are invalid[0m
2025-04-04T18:15:51.1739175Z   [32m  [32mâœ”[39m[0m[90m insertMany() depopulate (gh-4590)[0m
2025-04-04T18:15:51.1973251Z   [32m  [32mâœ”[39m[0m[90m insertMany() with error handlers (gh-6228)[0m
2025-04-04T18:15:51.1991071Z   [32m  [32mâœ”[39m[0m[90m insertMany() with non object array error can be catched (gh-8363)[0m
2025-04-04T18:15:51.2116259Z   [32m  [32mâœ”[39m[0m[90m insertMany() return docs with empty modifiedPaths (gh-7852)[0m
2025-04-04T18:15:51.2203990Z   [32m  [32mâœ”[39m[0m[90m insertMany with Decimal (gh-5190)[0m
2025-04-04T18:15:51.2227363Z [0m    insertMany() lean option to bypass validation (gh-8234)[0m
2025-04-04T18:15:51.2334964Z     [32m  [32mâœ”[39m[0m[90m insertMany() should bypass validation if lean option set to `true`[0m
2025-04-04T18:15:51.2363788Z     [32m  [32mâœ”[39m[0m[90m insertMany() should validate if lean option not set[0m
2025-04-04T18:15:51.2387198Z     [32m  [32mâœ”[39m[0m[90m insertMany() should validate if lean option set to `false`[0m
2025-04-04T18:15:51.2424586Z 
2025-04-04T18:15:51.2425115Z [0m  pre/post hooks, type of this[0m
2025-04-04T18:15:51.2743463Z   [32m  [32mâœ”[39m[0m[90m dynamic type of this in pre/post hooks[0m
2025-04-04T18:15:51.2767407Z 
2025-04-04T18:15:51.2768195Z [0m  model middleware[0m
2025-04-04T18:15:51.2865072Z   [32m  [32mâœ”[39m[0m[90m post save[0m
2025-04-04T18:15:51.3008031Z   [32m  [32mâœ”[39m[0m[90m sync error in post save (gh-3483)[0m
2025-04-04T18:15:51.4090266Z   [32m  [32mâœ”[39m[0m[90m pre hook promises (gh-3779)[0m[31m (100ms)[0m
2025-04-04T18:15:51.5177200Z   [32m  [32mâœ”[39m[0m[90m post hook promises (gh-3779)[0m[31m (107ms)[0m
2025-04-04T18:15:51.5270585Z   [32m  [32mâœ”[39m[0m[90m validate middleware runs before save middleware (gh-2462)[0m
2025-04-04T18:15:51.5356321Z   [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:51.5501776Z   [32m  [32mâœ”[39m[0m[90m gh-1829[0m
2025-04-04T18:15:51.5635709Z   [32m  [32mâœ”[39m[0m[90m sync error in pre save (gh-3483)[0m
2025-04-04T18:15:51.5784067Z   [32m  [32mâœ”[39m[0m[90m sync error in pre save after next() (gh-3483)[0m
2025-04-04T18:15:51.5935006Z   [32m  [32mâœ”[39m[0m[90m validate + remove[0m
2025-04-04T18:15:51.6080771Z   [32m  [32mâœ”[39m[0m[90m static hooks (gh-5982)[0m
2025-04-04T18:15:51.6234061Z   [32m  [32mâœ”[39m[0m[90m deleteOne hooks (gh-7538)[0m
2025-04-04T18:15:51.6293585Z [0m    post init hooks[0m
2025-04-04T18:15:51.6380488Z     [32m  [32mâœ”[39m[0m[90m success[0m
2025-04-04T18:15:51.6543139Z     [32m  [32mâœ”[39m[0m[90m with errors[0m
2025-04-04T18:15:51.6614283Z [0m    createCollection middleware[0m
2025-04-04T18:15:51.6663986Z     [32m  [32mâœ”[39m[0m[90m calls createCollection hooks[0m
2025-04-04T18:15:51.6688466Z     [32m  [32mâœ”[39m[0m[90m allows skipping createCollection from hooks[0m
2025-04-04T18:15:51.6701061Z [0m    bulkWrite middleware[0m
2025-04-04T18:15:51.6713895Z     [32m  [32mâœ”[39m[0m[90m calls bulkWrite hooks[0m
2025-04-04T18:15:51.6848677Z     [32m  [32mâœ”[39m[0m[90m allows updating ops[0m
2025-04-04T18:15:51.6992213Z     [32m  [32mâœ”[39m[0m[90m supports error handlers[0m
2025-04-04T18:15:51.7124753Z     [32m  [32mâœ”[39m[0m[90m supports skipping wrapped function[0m
2025-04-04T18:15:51.7217121Z 
2025-04-04T18:15:51.7218376Z [0m  model: populate: divergent arrays[0m
2025-04-04T18:15:51.7457033Z [0m    from match[0m
2025-04-04T18:15:51.7481688Z     [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-04T18:15:51.7500900Z     [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-04T18:15:51.7519328Z     [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-04T18:15:51.7522056Z [0m    from skip[0m
2025-04-04T18:15:51.7522474Z [0m      2[0m
2025-04-04T18:15:51.7544479Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-04T18:15:51.7561923Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-04T18:15:51.7581651Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-04T18:15:51.7582491Z [0m      0[0m
2025-04-04T18:15:51.7610582Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-04T18:15:51.7635948Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-04T18:15:51.7659215Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-04T18:15:51.7659983Z [0m    from limit[0m
2025-04-04T18:15:51.7660507Z [0m      0[0m
2025-04-04T18:15:51.7680654Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-04T18:15:51.7699422Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-04T18:15:51.7718337Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-04T18:15:51.7719683Z [0m      1[0m
2025-04-04T18:15:51.7738845Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-04T18:15:51.7758240Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-04T18:15:51.7777106Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-04T18:15:51.7778061Z [0m    from deselected _id[0m
2025-04-04T18:15:51.7784516Z [0m      using string and only -_id[0m
2025-04-04T18:15:51.7802274Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-04T18:15:51.7822684Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-04T18:15:51.7842564Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-04T18:15:51.7843384Z [0m      using string[0m
2025-04-04T18:15:51.7864187Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-04T18:15:51.7880791Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-04T18:15:51.7896410Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-04T18:15:51.7897387Z [0m      using object and only _id: 0[0m
2025-04-04T18:15:51.7914050Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-04T18:15:51.7930014Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-04T18:15:51.7945418Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-04T18:15:51.7946298Z [0m      using object[0m
2025-04-04T18:15:51.7974906Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-04T18:15:51.7992039Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-04T18:15:51.8008001Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-04T18:15:51.8017928Z 
2025-04-04T18:15:51.8018361Z [0m  model: populate:[0m
2025-04-04T18:15:51.8019551Z [0m    setting populated paths (gh-570)[0m
2025-04-04T18:15:51.8020144Z [0m      should not cast to _id of type ObjectId[0m
2025-04-04T18:15:51.8358358Z       [32m  [32mâœ”[39m[0m[90m if a document[0m
2025-04-04T18:15:51.8434329Z       [32m  [32mâœ”[39m[0m[90m if an object[0m
2025-04-04T18:15:51.8456181Z [0m      should not cast to _id of type String[0m
2025-04-04T18:15:51.8640174Z       [32m  [32mâœ”[39m[0m[90m if a document[0m
2025-04-04T18:15:51.8739403Z       [32m  [32mâœ”[39m[0m[90m if an object[0m
2025-04-04T18:15:51.8762538Z [0m      should not cast to _id of type Number[0m
2025-04-04T18:15:51.9024335Z       [32m  [32mâœ”[39m[0m[90m if a document[0m
2025-04-04T18:15:51.9130929Z       [32m  [32mâœ”[39m[0m[90m if an object[0m
2025-04-04T18:15:51.9156098Z [0m      should not cast to _id of type Buffer[0m
2025-04-04T18:15:51.9368904Z       [32m  [32mâœ”[39m[0m[90m if a document[0m
2025-04-04T18:15:51.9450058Z       [32m  [32mâœ”[39m[0m[90m if an object[0m
2025-04-04T18:15:51.9471280Z 
2025-04-04T18:15:51.9475373Z [0m  model: populate:[0m
2025-04-04T18:15:51.9539995Z   [32m  [32mâœ”[39m[0m[90m populating array of object[0m
2025-04-04T18:15:51.9719494Z   [32m  [32mâœ”[39m[0m[90m deep population (gh-3103)[0m
2025-04-04T18:15:51.9919882Z   [32m  [32mâœ”[39m[0m[90m populating a single ref[0m
2025-04-04T18:15:52.0034141Z   [32m  [32mâœ”[39m[0m[90m not failing on null as ref[0m
2025-04-04T18:15:52.0216896Z   [32m  [32mâœ”[39m[0m[90m not failing on empty object as ref[0m
2025-04-04T18:15:52.0411722Z   [32m  [32mâœ”[39m[0m[90m across DBs[0m
2025-04-04T18:15:52.0624385Z   [32m  [32mâœ”[39m[0m[90m an error in single ref population propagates[0m
2025-04-04T18:15:52.0839737Z   [32m  [32mâœ”[39m[0m[90m populating with partial fields selection[0m
2025-04-04T18:15:52.1060087Z   [32m  [32mâœ”[39m[0m[90m population of single oid with partial field selection and filter[0m
2025-04-04T18:15:52.1270359Z   [32m  [32mâœ”[39m[0m[90m population of undefined fields in a collection of docs[0m
2025-04-04T18:15:52.1591675Z   [32m  [32mâœ”[39m[0m[90m undefined for nested paths (gh-3859)[0m
2025-04-04T18:15:52.1884922Z   [32m  [32mâœ”[39m[0m[90m population and changing a reference[0m
2025-04-04T18:15:52.2400426Z   [32m  [32mâœ”[39m[0m[90m populating with partial fields selection and changing ref[0m[33m (48ms)[0m
2025-04-04T18:15:52.2782140Z   [32m  [32mâœ”[39m[0m[90m populating an array of refs and fetching many[0m
2025-04-04T18:15:52.3147460Z   [32m  [32mâœ”[39m[0m[90m an error in array reference population propagates[0m
2025-04-04T18:15:52.3847908Z   [32m  [32mâœ”[39m[0m[90m populating an array of references with fields selection[0m[33m (66ms)[0m
2025-04-04T18:15:52.4228666Z   [32m  [32mâœ”[39m[0m[90m populating an array of references and filtering[0m
2025-04-04T18:15:52.4465000Z   [32m  [32mâœ”[39m[0m[90m populating an array of references and multi-filtering[0m
2025-04-04T18:15:52.4622867Z   [32m  [32mâœ”[39m[0m[90m populating an array of references and multi-filtering with field selection[0m
2025-04-04T18:15:52.4967503Z   [32m  [32mâœ”[39m[0m[90m populating an array of refs changing one and removing one[0m
2025-04-04T18:15:52.5200257Z   [32m  [32mâœ”[39m[0m[90m clears cache when array has been re-assigned (gh-2176)[0m
2025-04-04T18:15:52.5352532Z   [32m  [32mâœ”[39m[0m[90m populating subdocuments partially[0m
2025-04-04T18:15:52.5565189Z   [32m  [32mâœ”[39m[0m[90m populating subdocuments partially with conditions[0m
2025-04-04T18:15:52.5747318Z   [32m  [32mâœ”[39m[0m[90m populating subdocs with invalid/missing subproperties[0m
2025-04-04T18:15:52.6061740Z   [32m  [32mâœ”[39m[0m[90m properly handles limit per document (gh-2151)[0m
2025-04-04T18:15:52.6209346Z   [32m  [32mâœ”[39m[0m[90m populating subdocuments partially with empty array (gh-481)[0m
2025-04-04T18:15:52.6327894Z   [32m  [32mâœ”[39m[0m[90m populating subdocuments partially with null array[0m
2025-04-04T18:15:52.6600497Z   [32m  [32mâœ”[39m[0m[90m populating subdocuments with array including nulls[0m
2025-04-04T18:15:52.6764878Z   [32m  [32mâœ”[39m[0m[90m supports `retainNullValues` to override filtering out null docs (gh-6432)[0m
2025-04-04T18:15:52.6981019Z   [32m  [32mâœ”[39m[0m[90m supports `retainNullValues` while suppressing _id of subdocument[0m
2025-04-04T18:15:52.7283598Z   [32m  [32mâœ”[39m[0m[90m populating more than one array at a time[0m
2025-04-04T18:15:52.7622756Z   [32m  [32mâœ”[39m[0m[90m populating multiple children of a sub-array at a time[0m
2025-04-04T18:15:52.7959431Z   [32m  [32mâœ”[39m[0m[90m passing sort options to the populate method[0m
2025-04-04T18:15:52.8153402Z   [32m  [32mâœ”[39m[0m[90m limit should apply to each returned doc, not in aggregate (gh-1490)[0m
2025-04-04T18:15:52.8180650Z   [32m  [32mâœ”[39m[0m[90m refs should cast to ObjectId from hexstrings[0m
2025-04-04T18:15:52.8422758Z   [32m  [32mâœ”[39m[0m[90m populate should work on String _ids[0m
2025-04-04T18:15:52.8730567Z   [32m  [32mâœ”[39m[0m[90m required works on ref fields (gh-577)[0m
2025-04-04T18:15:52.8931474Z   [32m  [32mâœ”[39m[0m[90m populate should work on Number _ids[0m
2025-04-04T18:15:52.9174533Z   [32m  [32mâœ”[39m[0m[90m populate works with schemas with both id and _id defined[0m
2025-04-04T18:15:52.9378838Z   [32m  [32mâœ”[39m[0m[90m Update works with populated arrays (gh-602)[0m
2025-04-04T18:15:52.9606904Z   [32m  [32mâœ”[39m[0m[90m toJSON should also be called for refs (gh-675)[0m
2025-04-04T18:15:52.9810874Z   [32m  [32mâœ”[39m[0m[90m populate should work on Buffer _ids (gh-686)[0m
2025-04-04T18:15:53.0018587Z   [32m  [32mâœ”[39m[0m[90m populated Buffer _ids should be requireable[0m
2025-04-04T18:15:53.0228442Z   [32m  [32mâœ”[39m[0m[90m populating with custom model selection (gh-773)[0m
2025-04-04T18:15:53.0480189Z   [32m  [32mâœ”[39m[0m[90m strips out not-matched ids when populating a hydrated doc (gh-6435)[0m
2025-04-04T18:15:53.0691699Z   [32m  [32mâœ”[39m[0m[90m avoids setting empty array on lean document when populate result is undefined (gh-10599)[0m
2025-04-04T18:15:53.0910696Z   [32m  [32mâœ”[39m[0m[90m supports ref: Model with virtual populate (gh-10695)[0m
2025-04-04T18:15:53.1152928Z   [32m  [32mâœ”[39m[0m[90m supports ref on subdocuments (gh-10856)[0m
2025-04-04T18:15:53.1332322Z   [32m  [32mâœ”[39m[0m[90m no-op when populating a single nested subdoc underneath a doc array with no ref (gh-11538) (gh-10856)[0m
2025-04-04T18:15:53.1544821Z   [32m  [32mâœ”[39m[0m[90m supports ref on array containing subdocuments (gh-10856)[0m
2025-04-04T18:15:53.1764197Z   [32m  [32mâœ”[39m[0m[90m uses `Model` by default when doing `Model.populate()` on a POJO (gh-10978)[0m
2025-04-04T18:15:53.1976642Z   [32m  [32mâœ”[39m[0m[90m can reference parent connection models by name after `useDb()` (gh-11003)[0m
2025-04-04T18:15:53.2242295Z   [32m  [32mâœ”[39m[0m[90m handles refPath underneath map of subdocuments (gh-9359)[0m
2025-04-04T18:15:53.2462210Z   [32m  [32mâœ”[39m[0m[90m handles virtual populate with `justOne` underneath document array and sort (gh-12730) (gh-10552)[0m
2025-04-04T18:15:53.2782097Z   [32m  [32mâœ”[39m[0m[90m merges match when match is on `_id` (gh-12834)[0m
2025-04-04T18:15:53.3046616Z   [32m  [32mâœ”[39m[0m[90m supports removing and then recreating populate virtual using schema clone (gh-13085)[0m
2025-04-04T18:15:53.3257811Z   [32m  [32mâœ”[39m[0m[90m handles populating underneath document arrays that have null (gh-13839)[0m
2025-04-04T18:15:53.3696289Z   [32m  [32mâœ”[39m[0m[90m calls match function with virtual as parameter (gh-12443)[0m[33m (38ms)[0m
2025-04-04T18:15:53.3903927Z   [32m  [32mâœ”[39m[0m[90m allows pushing to model populated in a query cursor (gh-13575)[0m
2025-04-04T18:15:53.4151403Z   [32m  [32mâœ”[39m[0m[90m sets populated docs in correct order when populating virtual underneath document array with justOne (gh-14018)[0m
2025-04-04T18:15:53.4371862Z   [32m  [32mâœ”[39m[0m[90m calls transform with single ObjectId when populating justOne path underneath array (gh-14073)[0m
2025-04-04T18:15:53.4593169Z   [32m  [32mâœ”[39m[0m[90m allows deselecting discriminator key when populating (gh-3230) (gh-13760) (gh-13679)[0m
2025-04-04T18:15:53.4787758Z   [32m  [32mâœ”[39m[0m[90m calls setter on virtual populated path with populated doc (gh-14285)[0m
2025-04-04T18:15:53.5043823Z   [32m  [32mâœ”[39m[0m[90m handles ref() function that returns a model (gh-14249)[0m
2025-04-04T18:15:53.5261229Z   [32m  [32mâœ”[39m[0m[90m avoids filtering out `null` values when applying match function (gh-14494)[0m
2025-04-04T18:15:53.5453691Z   [32m  [32mâœ”[39m[0m[90m avoids depopulating manually populated doc as getter value (gh-14759)[0m
2025-04-04T18:15:53.5649902Z   [32m  [32mâœ”[39m[0m[90m avoids populating manually populated doc as getter value (gh-14827)[0m
2025-04-04T18:15:53.5868673Z   [32m  [32mâœ”[39m[0m[90m makes sure that populate works correctly with duplicate foreignField with lean(); (gh-14794)[0m
2025-04-04T18:15:53.6088879Z   [32m  [32mâœ”[39m[0m[90m depopulates if pushing ObjectId to a populated array (gh-1635)[0m
2025-04-04T18:15:53.6301385Z   [32m  [32mâœ”[39m[0m[90m handles converting uuid documents to strings when calling toObject() (gh-14869)[0m
2025-04-04T18:15:53.6497365Z   [32m  [32mâœ”[39m[0m[90m avoids repopulating if forceRepopulate is disabled (gh-14979)[0m
2025-04-04T18:15:53.6757924Z   [32m  [32mâœ”[39m[0m[90m handles forceRepopulate as a global option (gh-14979)[0m
2025-04-04T18:15:53.6968296Z   [32m  [32mâœ”[39m[0m[90m handles populating UUID fields (gh-15315)[0m
2025-04-04T18:15:53.6988950Z [0m    deep populate[0m
2025-04-04T18:15:53.7233015Z     [32m  [32mâœ”[39m[0m[90m deep population with refs (gh-3507)[0m
2025-04-04T18:15:53.7489980Z     [32m  [32mâœ”[39m[0m[90m multiple paths with same options (gh-3808)[0m
2025-04-04T18:15:53.7512200Z [0m    populating sub docs[0m
2025-04-04T18:15:53.7682482Z     [32m  [32mâœ”[39m[0m[90m works with findById[0m
2025-04-04T18:15:53.7919051Z     [32m  [32mâœ”[39m[0m[90m works when first doc returned has empty array for populated path (gh-1055)[0m
2025-04-04T18:15:53.7941487Z [0m    specifying a custom model without specifying a ref in schema[0m
2025-04-04T18:15:53.8127051Z     [32m  [32mâœ”[39m[0m[90m with String _id[0m
2025-04-04T18:15:53.8328956Z     [32m  [32mâœ”[39m[0m[90m with Number _id[0m
2025-04-04T18:15:53.8522197Z     [32m  [32mâœ”[39m[0m[90m with Buffer _id[0m
2025-04-04T18:15:53.8731458Z     [32m  [32mâœ”[39m[0m[90m with ObjectId _id[0m
2025-04-04T18:15:53.8753464Z [0m    specifying all params using an object[0m
2025-04-04T18:15:53.8993991Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:53.9019498Z [0m    Model.populate()[0m
2025-04-04T18:15:53.9203390Z     [32m  [32mâœ”[39m[0m[90m returns a promise[0m
2025-04-04T18:15:53.9411063Z     [32m  [32mâœ”[39m[0m[90m of individual document works[0m
2025-04-04T18:15:53.9431837Z [0m      a document already populated[0m
2025-04-04T18:15:53.9432624Z [0m        when paths are not modified[0m
2025-04-04T18:15:53.9638771Z         [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:53.9659862Z [0m        when paths are modified[0m
2025-04-04T18:15:53.9869159Z         [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:53.9889461Z [0m      of multiple documents[0m
2025-04-04T18:15:54.0084194Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:54.0107881Z [0m    populating combined with lean (gh-1260)[0m
2025-04-04T18:15:54.0297810Z     [32m  [32mâœ”[39m[0m[90m with findOne[0m
2025-04-04T18:15:54.0525306Z     [32m  [32mâœ”[39m[0m[90m with find[0m
2025-04-04T18:15:54.0548623Z [0m    records paths and _ids used in population[0m
2025-04-04T18:15:54.0774087Z     [32m  [32mâœ”[39m[0m[90m with findOne[0m
2025-04-04T18:15:54.0993326Z     [32m  [32mâœ”[39m[0m[90m with find[0m
2025-04-04T18:15:54.1122493Z [0m    deselecting _id[0m
2025-04-04T18:15:54.1123123Z [0m      in a subdocument[0m
2025-04-04T18:15:54.1427633Z       [32m  [32mâœ”[39m[0m[90m works (gh-14231)[0m
2025-04-04T18:15:54.1665421Z       [32m  [32mâœ”[39m[0m[90m with lean[0m
2025-04-04T18:15:54.1690141Z [0m      of documents being populated[0m
2025-04-04T18:15:54.1892617Z       [32m  [32mâœ”[39m[0m[90m still works (gh-1441)[0m
2025-04-04T18:15:54.1916022Z [0m    DynRef[0m
2025-04-04T18:15:54.2120790Z     [32m  [32mâœ”[39m[0m[90m Simple populate[0m
2025-04-04T18:15:54.2347725Z     [32m  [32mâœ”[39m[0m[90m Array populate[0m
2025-04-04T18:15:54.2658740Z     [32m  [32mâœ”[39m[0m[90m with nonexistant refPath (gh-4637)[0m
2025-04-04T18:15:54.2995560Z     [32m  [32mâœ”[39m[0m[90m array with empty refPath (gh-5377)[0m
2025-04-04T18:15:54.3394390Z     [32m  [32mâœ”[39m[0m[90m with non-arrays (gh-5114)[0m
2025-04-04T18:15:54.3892087Z     [32m  [32mâœ”[39m[0m[90m with different schema types for local fields (gh-6870)[0m
2025-04-04T18:15:54.4303393Z     [32m  [32mâœ”[39m[0m[90m with refPath and array of ids with parent refPath[0m
2025-04-04T18:15:54.4620265Z     [32m  [32mâœ”[39m[0m[90m with nested nonexistant refPath (gh-6457)[0m
2025-04-04T18:15:54.4976731Z     [32m  [32mâœ”[39m[0m[90m where first doc doesnt have a refPath (gh-6913[0m
2025-04-04T18:15:54.5292713Z     [32m  [32mâœ”[39m[0m[90m readable error with deselected refPath (gh-6834)[0m
2025-04-04T18:15:54.5321213Z [0m    leaves Documents within Mixed properties alone (gh-1471)[0m
2025-04-04T18:15:54.5532802Z     [32m  [32mâœ”[39m[0m[90m when saving new docs[0m
2025-04-04T18:15:54.5768290Z     [32m  [32mâœ”[39m[0m[90m when saving existing docs 5T5[0m
2025-04-04T18:15:54.5791582Z [0m    github issues[0m
2025-04-04T18:15:54.5984803Z     [32m  [32mâœ”[39m[0m[90m populating an array of refs, slicing, and fetching many (gh-5737)[0m
2025-04-04T18:15:54.6161258Z     [32m  [32mâœ”[39m[0m[90m populate + slice (gh-5737a)[0m
2025-04-04T18:15:54.6369787Z     [32m  [32mâœ”[39m[0m[90m handles multiple spaces in between paths to populate (gh-13951)[0m
2025-04-04T18:15:54.6693451Z     [32m  [32mâœ”[39m[0m[90m maps results back to correct document (gh-1444)[0m
2025-04-04T18:15:54.6971639Z     [32m  [32mâœ”[39m[0m[90m handles skip[0m
2025-04-04T18:15:54.7225222Z     [32m  [32mâœ”[39m[0m[90m handles slice (gh-1934)[0m
2025-04-04T18:15:54.7448276Z     [32m  [32mâœ”[39m[0m[90m fails if sorting with a doc array subprop (gh-2202)[0m
2025-04-04T18:15:54.7656217Z     [32m  [32mâœ”[39m[0m[90m handles toObject() (gh-3279)[0m
2025-04-04T18:15:54.7854872Z     [32m  [32mâœ”[39m[0m[90m populate option (gh-2321)[0m
2025-04-04T18:15:54.8155081Z     [32m  [32mâœ”[39m[0m[90m discriminator child schemas (gh-3878)[0m
2025-04-04T18:15:54.8356733Z     [32m  [32mâœ”[39m[0m[90m set to obj w/ same id doesnt mark modified (gh-3992)[0m
2025-04-04T18:15:54.8739027Z     [32m  [32mâœ”[39m[0m[90m deep populate single -> array (gh-3904)[0m
2025-04-04T18:15:54.9160527Z     [32m  [32mâœ”[39m[0m[90m deep populate array -> array (gh-3954)[0m[33m (39ms)[0m
2025-04-04T18:15:54.9429560Z     [32m  [32mâœ”[39m[0m[90m 4 level population (gh-3973)[0m
2025-04-04T18:15:54.9692046Z     [32m  [32mâœ”[39m[0m[90m deep populate two paths (gh-3974)[0m
2025-04-04T18:15:55.0315143Z     [32m  [32mâœ”[39m[0m[90m out-of-order discriminators (gh-4073)[0m[33m (59ms)[0m
2025-04-04T18:15:55.0571401Z     [32m  [32mâœ”[39m[0m[90m dynref bug (gh-4104)[0m
2025-04-04T18:15:55.0773877Z     [32m  [32mâœ”[39m[0m[90m returned array has toObject() (gh-4656)[0m
2025-04-04T18:15:55.0900629Z     [32m  [32mâœ”[39m[0m[90m empty array (gh-4284)[0m
2025-04-04T18:15:55.1070708Z     [32m  [32mâœ”[39m[0m[90m empty populate string is a no-op (gh-4702)[0m
2025-04-04T18:15:55.1270269Z     [32m  [32mâœ”[39m[0m[90m checks field name correctly with nested arrays (gh-4365)[0m
2025-04-04T18:15:55.1547247Z     [32m  [32mâœ”[39m[0m[90m virtual populate with embedded discriminators (gh-6273)[0m
2025-04-04T18:15:55.1774677Z     [32m  [32mâœ”[39m[0m[90m populates virtual of embedded discriminator with dynamic ref (gh-6554)[0m
2025-04-04T18:15:55.2034449Z     [32m  [32mâœ”[39m[0m[90m populates virtual of embedded discriminator with dynamic ref when more than one model name is returned (gh-6612)[0m
2025-04-04T18:15:55.2262176Z     [32m  [32mâœ”[39m[0m[90m uses getter if one is defined on the localField (gh-6618)[0m
2025-04-04T18:15:55.2502490Z     [32m  [32mâœ”[39m[0m[90m populate child with same name as parent (gh-6839) (gh-6908)[0m
2025-04-04T18:15:55.2726058Z     [32m  [32mâœ”[39m[0m[90m passes scope as Model instance (gh-6726)[0m
2025-04-04T18:15:55.2928581Z     [32m  [32mâœ”[39m[0m[90m respects schema array even if underlying doc doesnt use array (gh-6908)[0m
2025-04-04T18:15:55.3059436Z     [32m  [32mâœ”[39m[0m[90m save objectid with populated refPath (gh-6714)[0m
2025-04-04T18:15:55.3403815Z     [32m  [32mâœ”[39m[0m[90m correct model and justOne when double populating (gh-6978)[0m
2025-04-04T18:15:55.3725498Z     [32m  [32mâœ”[39m[0m[90m correctly finds justOne when double-populating underneath an array (gh-6798)[0m
2025-04-04T18:15:55.3933300Z     [32m  [32mâœ”[39m[0m[90m handles virtual justOne if it is not set (gh-6988)[0m
2025-04-04T18:15:55.4155302Z     [32m  [32mâœ”[39m[0m[90m handles virtual justOne if it is not set, is lean, and subfields are selected[0m
2025-04-04T18:15:55.4370189Z     [32m  [32mâœ”[39m[0m[90m does not set `justOne` if underneath Mixed (gh-6985)[0m
2025-04-04T18:15:55.4599806Z     [32m  [32mâœ”[39m[0m[90m supports setting `justOne` as an option (gh-6985)[0m
2025-04-04T18:15:55.4822027Z     [32m  [32mâœ”[39m[0m[90m multiple localFields and foreignFields (gh-5704)[0m
2025-04-04T18:15:55.5069982Z     [32m  [32mâœ”[39m[0m[90m lean populate underneath array (gh-7052)[0m
2025-04-04T18:15:55.5447305Z     [32m  [32mâœ”[39m[0m[90m handles plus path projections with virtual populate (gh-7050)[0m
2025-04-04T18:15:55.5655052Z     [32m  [32mâœ”[39m[0m[90m set model as ref in schema (gh-7253)[0m
2025-04-04T18:15:55.6006841Z     [32m  [32mâœ”[39m[0m[90m count option (gh-4469) (gh-7380)[0m
2025-04-04T18:15:55.6283835Z     [32m  [32mâœ”[39m[0m[90m count option ignores skip (gh-4469) (gh-8476)[0m
2025-04-04T18:15:55.6641237Z     [32m  [32mâœ”[39m[0m[90m count with deeply nested (gh-7573)[0m
2025-04-04T18:15:55.6911403Z     [32m  [32mâœ”[39m[0m[90m explicit model option overrides refPath (gh-7273)[0m
2025-04-04T18:15:55.7159750Z     [32m  [32mâœ”[39m[0m[90m clone option means identical ids get separate copies of doc (gh-3258)[0m
2025-04-04T18:15:55.7376252Z     [32m  [32mâœ”[39m[0m[90m handles double nested array `foreignField` (gh-7374)[0m
2025-04-04T18:15:55.7761243Z     [32m  [32mâœ”[39m[0m[90m populate single path with numeric path underneath doc array (gh-7273)[0m
2025-04-04T18:15:55.7978764Z     [32m  [32mâœ”[39m[0m[90m supports populating a path in a document array embedded in an array (gh-7647)[0m
2025-04-04T18:15:55.8191156Z     [32m  [32mâœ”[39m[0m[90m handles populating deeply nested path if value in db is a primitive (gh-7545)[0m
2025-04-04T18:15:55.8316117Z     [32m  [32mâœ”[39m[0m[90m sets populate virtual to empty array if local field empty (gh-8230)[0m
2025-04-04T18:15:55.8504801Z     [32m  [32mâœ”[39m[0m[90m sets populate virtual with count to 0 if local field empty (gh-7731)[0m
2025-04-04T18:15:55.8781608Z     [32m  [32mâœ”[39m[0m[90m can populate an array property whose name conflicts with array method (gh-7782)[0m
2025-04-04T18:15:55.9026375Z     [32m  [32mâœ”[39m[0m[90m supports cross-db populate with refPath (gh-6520)[0m
2025-04-04T18:15:55.9280644Z     [32m  [32mâœ”[39m[0m[90m ref function for conventional populate (gh-7669)[0m
2025-04-04T18:15:55.9433546Z     [32m  [32mâœ”[39m[0m[90m virtual refPath (gh-7848)[0m
2025-04-04T18:15:55.9731548Z     [32m  [32mâœ”[39m[0m[90m handles refPath on discriminator when populating top-level model (gh-5109)[0m
2025-04-04T18:15:55.9995086Z     [32m  [32mâœ”[39m[0m[90m refPath with virtual (gh-7341)[0m
2025-04-04T18:15:56.0209607Z     [32m  [32mâœ”[39m[0m[90m count with subdocs (gh-7573)[0m
2025-04-04T18:15:56.0558672Z     [32m  [32mâœ”[39m[0m[90m returns an array when count on an array localField (gh-11307) (gh-7573)[0m
2025-04-04T18:15:56.0789059Z     [32m  [32mâœ”[39m[0m[90m handles virtual populate of an embedded discriminator nested path (gh-6488) (gh-8173)[0m
2025-04-04T18:15:56.1009956Z     [32m  [32mâœ”[39m[0m[90m accessing populate virtual prop (gh-13189) (gh-8198)[0m
2025-04-04T18:15:56.1265649Z     [32m  [32mâœ”[39m[0m[90m doesnt insert empty document when populating a path within a non-existent document array (gh-8432)[0m
2025-04-04T18:15:56.1508572Z     [32m  [32mâœ”[39m[0m[90m doesnt insert empty document when lean populating a path within an underneath non-existent document array (gh-14098)[0m
2025-04-04T18:15:56.1624406Z     [32m  [32mâœ”[39m[0m[90m sets empty array if populating undefined path (gh-8455)[0m
2025-04-04T18:15:56.1987248Z     [32m  [32mâœ”[39m[0m[90m succeeds with refPath if embedded discriminator has path with same name but no refPath (gh-8452) (gh-8499)[0m
2025-04-04T18:15:56.2208202Z     [32m  [32mâœ”[39m[0m[90m excluding foreignField using minus path deselects foreignField (gh-8460)[0m
2025-04-04T18:15:56.2505629Z     [32m  [32mâœ”[39m[0m[90m supports top-level match option (gh-8475)[0m
2025-04-04T18:15:56.2893030Z     [32m  [32mâœ”[39m[0m[90m supports top-level skip and limit options (gh-8445)[0m
2025-04-04T18:15:56.3120462Z     [32m  [32mâœ”[39m[0m[90m top-level limit properly applies limit per document (gh-8657)[0m
2025-04-04T18:15:56.3331199Z     [32m  [32mâœ”[39m[0m[90m correct limit with populate (gh-7318)[0m
2025-04-04T18:15:56.3646500Z     [32m  [32mâœ”[39m[0m[90m perDocumentLimit as option to `populate()` method (gh-7318) (gh-9418)[0m
2025-04-04T18:15:56.3942259Z     [32m  [32mâœ”[39m[0m[90m works when embedded discriminator array has populated path but not refPath (gh-8527)[0m
2025-04-04T18:15:56.4057452Z     [32m  [32mâœ”[39m[0m[90m handles populating embedded discriminators with `refPath` when none of the subdocs have `refPath` (gh-8553)[0m
2025-04-04T18:15:56.4298272Z     [32m  [32mâœ”[39m[0m[90m throws an error when using limit with perDocumentLimit[0m
2025-04-04T18:15:56.4509094Z     [32m  [32mâœ”[39m[0m[90m handles function refPath with discriminators (gh-8731)[0m
2025-04-04T18:15:56.4639264Z     [32m  [32mâœ”[39m[0m[90m recursive virtuals with `populate` option (gh-11700)[0m
2025-04-04T18:15:56.4846603Z     [32m  [32mâœ”[39m[0m[90m no-op if populating on a document array with no ref (gh-8946)[0m
2025-04-04T18:15:56.5021993Z     [32m  [32mâœ”[39m[0m[90m no-op if populating a nested path (gh-9073)[0m
2025-04-04T18:15:56.5292274Z     [32m  [32mâœ”[39m[0m[90m handles populating primitive array under document array with discriminator (gh-9148)[0m
2025-04-04T18:15:56.5569025Z     [32m  [32mâœ”[39m[0m[90m handles deselecting _id with `perDocumentLimit` (gh-8460) (gh-9175)[0m
2025-04-04T18:15:56.5699294Z     [32m  [32mâœ”[39m[0m[90m handles embedded discriminator `refPath` with multiple documents (gh-8731) (gh-9153)[0m
2025-04-04T18:15:56.5961845Z     [32m  [32mâœ”[39m[0m[90m Sets the populated document's parent() (gh-8092)[0m
2025-04-04T18:15:56.6311671Z     [32m  [32mâœ”[39m[0m[90m populates single nested discriminator underneath doc array when populated docs have different model but same id (gh-9244)[0m
2025-04-04T18:15:56.6529765Z     [32m  [32mâœ”[39m[0m[90m skips checking `refPath` if the path to populate is undefined (gh-9340)[0m
2025-04-04T18:15:56.6735168Z     [32m  [32mâœ”[39m[0m[90m supports default populate options (gh-6029)[0m
2025-04-04T18:15:56.6938439Z     [32m  [32mâœ”[39m[0m[90m avoids propagating lean virtuals to children (gh-9592)[0m
2025-04-04T18:15:56.7188862Z     [32m  [32mâœ”[39m[0m[90m gh-9833[0m
2025-04-04T18:15:56.7439940Z     [32m  [32mâœ”[39m[0m[90m sets not-found values to null for paths that are not in the schema (gh-9913)[0m
2025-04-04T18:15:56.7702582Z     [32m  [32mâœ”[39m[0m[90m handles perDocumentLimit where multiple documents reference the same populated doc (gh-9906)[0m
2025-04-04T18:15:56.8191504Z     [32m  [32mâœ”[39m[0m[90m supports `transform` option (gh-3375)[0m[33m (42ms)[0m
2025-04-04T18:15:56.8405718Z     [32m  [32mâœ”[39m[0m[90m avoids calling `transform()` with `lean()` when no results (gh-12739)[0m
2025-04-04T18:15:56.8615094Z     [32m  [32mâœ”[39m[0m[90m transform to primitive (gh-10064)[0m
2025-04-04T18:15:56.8820527Z     [32m  [32mâœ”[39m[0m[90m transform with virtual populate, justOne = true (gh-3375)[0m
2025-04-04T18:15:56.9049674Z     [32m  [32mâœ”[39m[0m[90m transform with virtual populate, justOne = false (gh-3375)[0m
2025-04-04T18:15:56.9336580Z     [32m  [32mâœ”[39m[0m[90m supports populating dotted subpath of a populated doc that has the same id as a populated doc (gh-10005)[0m
2025-04-04T18:15:56.9564122Z     [32m  [32mâœ”[39m[0m[90m prevents already populated fields from becoming null gh-10068[0m
2025-04-04T18:15:56.9722699Z     [32m  [32mâœ”[39m[0m[90m populates lean subdoc with `_id` property (gh-10069)[0m
2025-04-04T18:15:56.9928438Z     [32m  [32mâœ”[39m[0m[90m handles virtual populate when foreignField is an array with duplicates (gh-10117)[0m
2025-04-04T18:15:57.0082663Z     [32m  [32mâœ”[39m[0m[90m handles virtual populate with `$elemMatch` in custom match when `foreignField` is an array (gh-10117)[0m
2025-04-04T18:15:57.0198536Z     [32m  [32mâœ”[39m[0m[90m populates immutable array paths (gh-10159)[0m
2025-04-04T18:15:57.0480288Z     [32m  [32mâœ”[39m[0m[90m populates paths under mixed schematypes where some documents have non-object properties (gh-10191)[0m
2025-04-04T18:15:57.0710205Z     [32m  [32mâœ”[39m[0m[90m populates embedded discriminator with tied value (gh-10231)[0m
2025-04-04T18:15:57.0838175Z     [32m  [32mâœ”[39m[0m[90m supports populating an array of immutable elements (gh-10264)[0m
2025-04-04T18:15:57.1006143Z     [32m  [32mâœ”[39m[0m[90m populates nested path in schema using `Model.populate()` static (gh-10335)[0m
2025-04-04T18:15:57.1284783Z     [32m  [32mâœ”[39m[0m[90m calls subdocument ref functions with subdocument as context (gh-8469)[0m
2025-04-04T18:15:57.1308115Z [0m      populate virtuals (gh-2562)[0m
2025-04-04T18:15:57.1488907Z       [32m  [32mâœ”[39m[0m[90m basic populate virtuals[0m
2025-04-04T18:15:57.1774656Z       [32m  [32mâœ”[39m[0m[90m match (gh-6787)[0m
2025-04-04T18:15:57.2031398Z       [32m  [32mâœ”[39m[0m[90m match prevents using $where[0m
2025-04-04T18:15:57.2344066Z       [32m  [32mâœ”[39m[0m[90m multiple source docs[0m
2025-04-04T18:15:57.2445733Z       [32m  [32mâœ”[39m[0m[90m catchable error if localField or foreignField not specified (gh-6767)[0m
2025-04-04T18:15:57.2797095Z       [32m  [32mâœ”[39m[0m[90m source array[0m
2025-04-04T18:15:57.3012005Z       [32m  [32mâœ”[39m[0m[90m multiple paths (gh-4234)[0m
2025-04-04T18:15:57.3236437Z       [32m  [32mâœ”[39m[0m[90m in embedded array (gh-4928)[0m
2025-04-04T18:15:57.3572594Z       [32m  [32mâœ”[39m[0m[90m in embedded array with sort (gh-10552)[0m
2025-04-04T18:15:57.3862313Z       [32m  [32mâœ”[39m[0m[90m in embedded array with sort and one result (gh-10552)[0m
2025-04-04T18:15:57.4069760Z       [32m  [32mâœ”[39m[0m[90m justOne option (gh-4263)[0m
2025-04-04T18:15:57.4286948Z       [32m  [32mâœ”[39m[0m[90m justOne + lean (gh-6234)[0m
2025-04-04T18:15:57.4423831Z       [32m  [32mâœ”[39m[0m[90m sets empty array if lean with justOne = false and no results (gh-10992)[0m
2025-04-04T18:15:57.4675109Z       [32m  [32mâœ”[39m[0m[90m justOne underneath array (gh-6867)[0m
2025-04-04T18:15:57.4845620Z       [32m  [32mâœ”[39m[0m[90m with no results and justOne (gh-4284)[0m
2025-04-04T18:15:57.5054627Z       [32m  [32mâœ”[39m[0m[90m with multiple results and justOne (gh-4329)[0m
2025-04-04T18:15:57.5203912Z       [32m  [32mâœ”[39m[0m[90m virtuals with getters (gh-9343)[0m
2025-04-04T18:15:57.5418235Z       [32m  [32mâœ”[39m[0m[90m virtuals with `get` option (gh-9343)[0m
2025-04-04T18:15:57.5583440Z       [32m  [32mâœ”[39m[0m[90m hydrates properly (gh-4618)[0m
2025-04-04T18:15:57.5790955Z       [32m  [32mâœ”[39m[0m[90m with functions for localField and foreignField (gh-5704)[0m
2025-04-04T18:15:57.6023888Z       [32m  [32mâœ”[39m[0m[90m with functions for ref (gh-5602)[0m
2025-04-04T18:15:57.6308197Z       [32m  [32mâœ”[39m[0m[90m with functions for match (gh-7397)[0m
2025-04-04T18:15:57.6530267Z       [32m  [32mâœ”[39m[0m[90m with functions for match and foreignField (gh-7397)[0m
2025-04-04T18:15:57.6810067Z       [32m  [32mâœ”[39m[0m[90m with function for refPath (gh-6669)[0m
2025-04-04T18:15:57.7033450Z       [32m  [32mâœ”[39m[0m[90m with no results (gh-4284)[0m
2025-04-04T18:15:57.7139578Z       [32m  [32mâœ”[39m[0m[90m virtual is undefined when not populated (gh-7795)[0m
2025-04-04T18:15:57.7416168Z       [32m  [32mâœ”[39m[0m[90m deep populate virtual -> conventional (gh-4261)[0m
2025-04-04T18:15:57.7676347Z       [32m  [32mâœ”[39m[0m[90m deep populate virtual -> virtual (gh-4278)[0m
2025-04-04T18:15:57.7936858Z       [32m  [32mâœ”[39m[0m[90m source array (gh-4585)[0m
2025-04-04T18:15:57.8218598Z       [32m  [32mâœ”[39m[0m[90m lean with single result and no justOne (gh-4288)[0m
2025-04-04T18:15:57.8858318Z       [32m  [32mâœ”[39m[0m[90m gh-4923[0m[33m (61ms)[0m
2025-04-04T18:15:57.9567129Z       [32m  [32mâœ”[39m[0m[90m supports setting default options in schema (gh-4741)[0m[33m (68ms)[0m
2025-04-04T18:15:57.9607471Z       [32m  [32mâœ”[39m[0m[90m handles populate with 0 args (gh-5036)[0m
2025-04-04T18:15:57.9725705Z       [32m  [32mâœ”[39m[0m[90m attaches `_id` property to ref ids (gh-6359) (gh-6115)[0m
2025-04-04T18:15:58.0727043Z       [32m  [32mâœ”[39m[0m[90m handles populating with discriminators that may not have a ref (gh-4817)[0m[33m (71ms)[0m
2025-04-04T18:15:58.0860571Z       [32m  [32mâœ”[39m[0m[90m populate with no ref using Model.populate (gh-4843)[0m
2025-04-04T18:15:58.1091730Z       [32m  [32mâœ”[39m[0m[90m nested populate, virtual -> normal (gh-4631)[0m
2025-04-04T18:15:58.1376887Z       [32m  [32mâœ”[39m[0m[90m populate with Decimal128 as ref (gh-4759)[0m
2025-04-04T18:15:58.1596010Z       [32m  [32mâœ”[39m[0m[90m handles circular virtual -> regular (gh-5128)[0m
2025-04-04T18:15:58.1813337Z       [32m  [32mâœ”[39m[0m[90m handles nested virtuals (gh-4851)[0m
2025-04-04T18:15:58.2024884Z       [32m  [32mâœ”[39m[0m[90m nested virtuals if top-level prop doesnt exist (gh-5431)[0m
2025-04-04T18:15:58.2232128Z       [32m  [32mâœ”[39m[0m[90m nested virtuals + doc.populate() (gh-5240)[0m
2025-04-04T18:15:58.2433845Z       [32m  [32mâœ”[39m[0m[90m no ref + cursor (gh-5334)[0m
2025-04-04T18:15:58.2779976Z       [32m  [32mâœ”[39m[0m[90m retains limit when using cursor (gh-5468)[0m
2025-04-04T18:15:58.2986273Z       [32m  [32mâœ”[39m[0m[90m virtuals + doc.populate() (gh-5311)[0m
2025-04-04T18:15:58.3104328Z       [32m  [32mâœ”[39m[0m[90m empty virtual with Model.populate (gh-5331)[0m
2025-04-04T18:15:58.3349427Z       [32m  [32mâœ”[39m[0m[90m virtual populate in single nested doc (gh-4715)[0m
2025-04-04T18:15:58.3446175Z       [32m  [32mâœ”[39m[0m[90m populate with missing schema (gh-5364)[0m
2025-04-04T18:15:58.3520360Z       [32m  [32mâœ”[39m[0m[90m populate with missing schema (gh-5460)[0m
2025-04-04T18:15:58.3810529Z       [32m  [32mâœ”[39m[0m[90m array underneath non-existent array (gh-6245)[0m
2025-04-04T18:15:58.4019290Z       [32m  [32mâœ”[39m[0m[90m virtuals with justOne false and foreign field not found (gh-5336)[0m
2025-04-04T18:15:58.4222342Z       [32m  [32mâœ”[39m[0m[90m virtuals with justOne true and foreign field not found (gh-5336)[0m
2025-04-04T18:15:58.4417630Z       [32m  [32mâœ”[39m[0m[90m select foreignField automatically (gh-4959)[0m
2025-04-04T18:15:58.4576661Z       [32m  [32mâœ”[39m[0m[90m does not set `populated()` until populate is done (gh-5564)[0m
2025-04-04T18:15:58.4779289Z       [32m  [32mâœ”[39m[0m[90m virtual populate toJSON output (gh-5542)[0m
2025-04-04T18:15:58.4992904Z       [32m  [32mâœ”[39m[0m[90m works if foreignField parent is selected (gh-5037)[0m
2025-04-04T18:15:58.5357634Z       [32m  [32mâœ”[39m[0m[90m subPopulate under discriminators race condition (gh-5858)[0m
2025-04-04T18:15:58.5588256Z       [32m  [32mâœ”[39m[0m[90m populating nested discriminator path (gh-5970)[0m
2025-04-04T18:15:58.5813066Z       [32m  [32mâœ”[39m[0m[90m specify model in populate (gh-4264)[0m
2025-04-04T18:15:58.5837858Z [0m        selectPopulatedFields (gh-5669)[0m
2025-04-04T18:15:58.6049423Z         [32m  [32mâœ”[39m[0m[90m auto select populated fields (gh-5669) (gh-5685)[0m
2025-04-04T18:15:58.6245556Z         [32m  [32mâœ”[39m[0m[90m disabling at schema level (gh-6546)[0m
2025-04-04T18:15:58.6437245Z         [32m  [32mâœ”[39m[0m[90m disabling at global level (gh-6546)[0m
2025-04-04T18:15:58.6660149Z         [32m  [32mâœ”[39m[0m[90m schema overwrites global (gh-6546)[0m
2025-04-04T18:15:58.6686529Z [0m      populates an array of objects[0m
2025-04-04T18:15:58.7053140Z       [32m  [32mâœ”[39m[0m[90m subpopulates array w/ space separated path (gh-6284)[0m
2025-04-04T18:15:58.7296083Z       [32m  [32mâœ”[39m[0m[90m populates array of space separated path objs (gh-6414)[0m
2025-04-04T18:15:58.7691427Z       [32m  [32mâœ”[39m[0m[90m handles subpopulation with options (gh-6528)[0m
2025-04-04T18:15:58.8053807Z       [32m  [32mâœ”[39m[0m[90m honors top-level match with subPopulation (gh-6451)[0m
2025-04-04T18:15:58.8214739Z       [32m  [32mâœ”[39m[0m[90m handles embedded discriminator (gh-6487)[0m
2025-04-04T18:15:58.8552877Z       [32m  [32mâœ”[39m[0m[90m handles virtual embedded discriminator underneath single nested (gh-6571)[0m
2025-04-04T18:15:58.8669039Z       [32m  [32mâœ”[39m[0m[90m populates undefined nested fields without error (gh-6845)[0m
2025-04-04T18:15:58.9011762Z       [32m  [32mâœ”[39m[0m[90m populates refPath from array element (gh-6509)[0m
2025-04-04T18:15:58.9034515Z [0m      lean + deep populate (gh-6498)[0m
2025-04-04T18:15:58.9306874Z       [32m  [32mâœ”[39m[0m[90m document, and subdocuments are not lean by default[0m
2025-04-04T18:15:58.9591358Z       [32m  [32mâœ”[39m[0m[90m .lean() makes query result, and all populated fields lean[0m
2025-04-04T18:15:58.9869943Z       [32m  [32mâœ”[39m[0m[90m disabling lean at some populating level reflects on it, and descendants[0m
2025-04-04T18:15:59.0167164Z       [32m  [32mâœ”[39m[0m[90m enabling lean at some populating level reflects on it, and descendants[0m
2025-04-04T18:15:59.0440822Z       [32m  [32mâœ”[39m[0m[90m disabling lean on nested population overwrites parent lean[0m
2025-04-04T18:15:59.0463503Z [0m      gh-8247[0m
2025-04-04T18:15:59.0629677Z       [32m  [32mâœ”[39m[0m[90m checking `populated()` on a document array element (gh-8247)[0m
2025-04-04T18:15:59.0859649Z       [32m  [32mâœ”[39m[0m[90m updates top-level populated() when pushing elements onto a document array with single populated path (gh-8247) (gh-8265)[0m
2025-04-04T18:15:59.1192771Z       [32m  [32mâœ”[39m[0m[90m retainNullValues stores `null` in array if foreign doc not found (gh-8293)[0m
2025-04-04T18:15:59.1470227Z       [32m  [32mâœ”[39m[0m[90m virtual populate with discriminator that has a custom discriminator value (gh-8324)[0m
2025-04-04T18:15:59.1819180Z       [32m  [32mâœ”[39m[0m[90m virtual populate with multiple `localField` and `foreignField` (gh-6608)[0m
2025-04-04T18:15:59.1842459Z [0m      gh-8760[0m
2025-04-04T18:15:59.1995413Z       [32m  [32mâœ”[39m[0m[90m clone with lean creates identical copies from the same document[0m
2025-04-04T18:15:59.2204484Z       [32m  [32mâœ”[39m[0m[90m clone with populate and lean makes child lean[0m
2025-04-04T18:15:59.2414893Z       [32m  [32mâœ”[39m[0m[90m can populate subdocs where one is discriminator and the other is not (gh-8837)[0m
2025-04-04T18:15:59.2659469Z       [32m  [32mâœ”[39m[0m[90m can populate virtuals defined on child discriminators (gh-8924)[0m
2025-04-04T18:15:59.2680592Z [0m    strictPopulate[0m
2025-04-04T18:15:59.3003859Z     [32m  [32mâœ”[39m[0m[90m does not throw an error when using strictPopulate on a nested path (gh-13863)[0m
2025-04-04T18:15:59.3245581Z     [32m  [32mâœ”[39m[0m[90m reports full path when throwing `strictPopulate` error with deep populate (gh-10923)[0m
2025-04-04T18:15:59.3484417Z     [32m  [32mâœ”[39m[0m[90m propagates toObject options to populate virtuals (gh-13325)[0m
2025-04-04T18:15:59.3593807Z     [32m  [32mâœ”[39m[0m[90m respects strictPopulate schema option (gh-11290)[0m
2025-04-04T18:15:59.3977951Z     [32m  [32mâœ”[39m[0m[90m allows overwriting localField and foreignField when populating a virtual gh-6963[0m
2025-04-04T18:15:59.4039527Z 
2025-04-04T18:15:59.4041130Z [0m  model query casting[0m
2025-04-04T18:15:59.4160786Z   [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:15:59.4271282Z   [32m  [32mâœ”[39m[0m[90m returns cast errors[0m
2025-04-04T18:15:59.4423758Z   [32m  [32mâœ”[39m[0m[90m casts $modifiers[0m
2025-04-04T18:15:59.4586782Z   [32m  [32mâœ”[39m[0m[90m casts $in values of arrays (gh-199)[0m
2025-04-04T18:15:59.4766630Z   [32m  [32mâœ”[39m[0m[90m casts $in values of arrays with single item instead of array (gh-3238)[0m
2025-04-04T18:15:59.5008958Z   [32m  [32mâœ”[39m[0m[90m casts $nin values of arrays (gh-232)[0m
2025-04-04T18:15:59.5138518Z   [32m  [32mâœ”[39m[0m[90m works when finding by Date (gh-204)[0m
2025-04-04T18:15:59.5270684Z   [32m  [32mâœ”[39m[0m[90m works with $type matching[0m
2025-04-04T18:15:59.5378949Z   [32m  [32mâœ”[39m[0m[90m works when finding Boolean with $in (gh-998)[0m
2025-04-04T18:15:59.5548353Z   [32m  [32mâœ”[39m[0m[90m works when finding Boolean with $ne (gh-1093)[0m
2025-04-04T18:15:59.5639269Z   [32m  [32mâœ”[39m[0m[90m properly casts $and (gh-1180)[0m
2025-04-04T18:15:59.5828329Z   [32m  [32mâœ”[39m[0m[90m works with $all (gh-3394)[0m
2025-04-04T18:15:59.5926538Z   [32m  [32mâœ”[39m[0m[90m date with $not + $type (gh-4632)[0m
2025-04-04T18:15:59.6041165Z   [32m  [32mâœ”[39m[0m[90m setOnInsert with custom type (gh-5126)[0m
2025-04-04T18:15:59.6248932Z   [32m  [32mâœ”[39m[0m[90m lowercase in query (gh-4569)[0m
2025-04-04T18:15:59.6365053Z   [32m  [32mâœ”[39m[0m[90m runSettersOnQuery only once on find (gh-5434)[0m
2025-04-04T18:15:59.6490280Z   [32m  [32mâœ”[39m[0m[90m setters run only once on findOne (gh-6157)[0m
2025-04-04T18:15:59.6723801Z   [32m  [32mâœ”[39m[0m[90m runSettersOnQuery as query option (gh-5350)[0m
2025-04-04T18:15:59.6909721Z   [32m  [32mâœ”[39m[0m[90m _id = 0 (gh-4610)[0m
2025-04-04T18:15:59.7027144Z   [32m  [32mâœ”[39m[0m[90m converts to CastError (gh-6803)[0m
2025-04-04T18:15:59.7289689Z   [32m  [32mâœ”[39m[0m[90m minDistance (gh-4197)[0m
2025-04-04T18:15:59.7448809Z   [32m  [32mâœ”[39m[0m[90m array ops don't break with strict:false (gh-6952)[0m
2025-04-04T18:15:59.7673555Z   [32m  [32mâœ”[39m[0m[90m should not throw a cast error when dealing with an array of an array of strings in combination with $elemMatch and $not (gh-13880)[0m
2025-04-04T18:15:59.7895109Z   [32m  [32mâœ”[39m[0m[90m should not throw a cast error when dealing with an array of objects in combination with $elemMatch (gh-13974)[0m
2025-04-04T18:15:59.8094404Z   [32m  [32mâœ”[39m[0m[90m should not throw a cast error when dealing with an array of objects in combination with $elemMatch and nested $and[0m
2025-04-04T18:15:59.8192901Z [0m    $near[0m
2025-04-04T18:15:59.8348783Z     [32m  [32mâœ”[39m[0m[90m with arrays[0m
2025-04-04T18:15:59.8512065Z     [32m  [32mâœ”[39m[0m[90m with objects[0m
2025-04-04T18:15:59.8671005Z     [32m  [32mâœ”[39m[0m[90m with nested objects[0m
2025-04-04T18:15:59.8690502Z [0m    $nearSphere[0m
2025-04-04T18:15:59.8831535Z     [32m  [32mâœ”[39m[0m[90m with arrays[0m
2025-04-04T18:15:59.8999074Z     [32m  [32mâœ”[39m[0m[90m with objects[0m
2025-04-04T18:15:59.9163917Z     [32m  [32mâœ”[39m[0m[90m with nested objects[0m
2025-04-04T18:15:59.9187610Z [0m    $within[0m
2025-04-04T18:15:59.9188062Z [0m      $centerSphere[0m
2025-04-04T18:15:59.9324595Z       [32m  [32mâœ”[39m[0m[90m with arrays[0m
2025-04-04T18:15:59.9488711Z       [32m  [32mâœ”[39m[0m[90m with objects[0m
2025-04-04T18:15:59.9649763Z       [32m  [32mâœ”[39m[0m[90m with nested objects[0m
2025-04-04T18:15:59.9669999Z [0m      $center[0m
2025-04-04T18:15:59.9807670Z       [32m  [32mâœ”[39m[0m[90m with arrays[0m
2025-04-04T18:15:59.9967033Z       [32m  [32mâœ”[39m[0m[90m with objects[0m
2025-04-04T18:16:00.0122357Z       [32m  [32mâœ”[39m[0m[90m with nested objects[0m
2025-04-04T18:16:00.0142198Z [0m      $polygon[0m
2025-04-04T18:16:00.0278963Z       [32m  [32mâœ”[39m[0m[90m with arrays[0m
2025-04-04T18:16:00.0442056Z       [32m  [32mâœ”[39m[0m[90m with objects[0m
2025-04-04T18:16:00.0650429Z       [32m  [32mâœ”[39m[0m[90m with nested objects[0m
2025-04-04T18:16:00.0676504Z [0m      $box[0m
2025-04-04T18:16:00.0809771Z       [32m  [32mâœ”[39m[0m[90m with arrays[0m
2025-04-04T18:16:00.0960113Z       [32m  [32mâœ”[39m[0m[90m with objects[0m
2025-04-04T18:16:00.1114716Z       [32m  [32mâœ”[39m[0m[90m with nested objects[0m
2025-04-04T18:16:00.1138151Z [0m    $options[0m
2025-04-04T18:16:00.1156273Z     [32m  [32mâœ”[39m[0m[90m works on arrays gh-1462[0m
2025-04-04T18:16:00.1238746Z     [32m  [32mâœ”[39m[0m[90m does not cast with uppercase (gh-7800)[0m
2025-04-04T18:16:00.1339970Z [0m    $elemMatch[0m
2025-04-04T18:16:00.1449119Z     [32m  [32mâœ”[39m[0m[90m should cast String to ObjectId in $elemMatch[0m
2025-04-04T18:16:00.1575008Z     [32m  [32mâœ”[39m[0m[90m should cast String to ObjectId in $elemMatch inside $not[0m
2025-04-04T18:16:00.1710447Z     [32m  [32mâœ”[39m[0m[90m should cast subdoc _id typed as String to String in $elemMatch gh3719[0m
2025-04-04T18:16:00.1894636Z     [32m  [32mâœ”[39m[0m[90m should cast subdoc _id typed as String to String in $elemMatch inside $not gh3719[0m
2025-04-04T18:16:00.2084022Z     [32m  [32mâœ”[39m[0m[90m casts $nor within $elemMatch (gh-9479)[0m
2025-04-04T18:16:00.2168334Z 
2025-04-04T18:16:00.2170578Z [0m  model: querying:[0m
2025-04-04T18:16:00.2266175Z   [32m  [32mâœ”[39m[0m[90m find returns a Query[0m
2025-04-04T18:16:00.2343785Z   [32m  [32mâœ”[39m[0m[90m findOne returns a Query[0m
2025-04-04T18:16:00.2579166Z   [32m  [32mâœ”[39m[0m[90m by Date (gh-336)[0m
2025-04-04T18:16:00.2727326Z   [32m  [32mâœ”[39m[0m[90m mixed types with $elemMatch (gh-591)[0m
2025-04-04T18:16:00.3137609Z   [32m  [32mâœ”[39m[0m[90m works with different methods and query types[0m
2025-04-04T18:16:00.3504243Z   [32m  [32mâœ”[39m[0m[90m with conditionals[0m
2025-04-04T18:16:00.3605974Z   [32m  [32mâœ”[39m[0m[90m with previously existing null values in the db[0m
2025-04-04T18:16:00.3763209Z   [32m  [32mâœ”[39m[0m[90m with unused values in the db[0m
2025-04-04T18:16:00.3932372Z   [32m  [32mâœ”[39m[0m[90m does not apply string schema setters on $regex (gh-11426)[0m
2025-04-04T18:16:00.4020106Z [0m    distinct[0m
2025-04-04T18:16:00.4033555Z     [32m  [32mâœ”[39m[0m[90m returns a Query[0m
2025-04-04T18:16:00.4297849Z     [32m  [32mâœ”[39m[0m[90m executes when you exec[0m
2025-04-04T18:16:00.4536666Z     [32m  [32mâœ”[39m[0m[90m permits excluding conditions gh-1541[0m
2025-04-04T18:16:00.4557510Z [0m    updateOne[0m
2025-04-04T18:16:00.4570060Z     [32m  [32mâœ”[39m[0m[90m returns a Query[0m
2025-04-04T18:16:00.4774066Z     [32m  [32mâœ”[39m[0m[90m can handle minimize option (gh-3381)[0m
2025-04-04T18:16:00.4795978Z [0m    findOne[0m
2025-04-04T18:16:00.4895307Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:00.5014102Z     [32m  [32mâœ”[39m[0m[90m casts $modifiers[0m
2025-04-04T18:16:00.5139003Z     [32m  [32mâœ”[39m[0m[90m querying if an array contains one of multiple members $in a set[0m
2025-04-04T18:16:00.5270547Z     [32m  [32mâœ”[39m[0m[90m querying if an array contains one of multiple members $in a set 2[0m
2025-04-04T18:16:00.5563460Z     [32m  [32mâœ”[39m[0m[90m querying via $where a string[0m
2025-04-04T18:16:00.5690687Z     [32m  [32mâœ”[39m[0m[90m querying via $where a function[0m
2025-04-04T18:16:00.5826533Z     [32m  [32mâœ”[39m[0m[90m based on nested fields[0m
2025-04-04T18:16:00.5976723Z     [32m  [32mâœ”[39m[0m[90m based on embedded doc fields (gh-242, gh-463)[0m
2025-04-04T18:16:00.6096430Z     [32m  [32mâœ”[39m[0m[90m works with nested docs and string ids (gh-389)[0m
2025-04-04T18:16:00.6218348Z     [32m  [32mâœ”[39m[0m[90m using #all with nested #elemMatch[0m
2025-04-04T18:16:00.6345937Z     [32m  [32mâœ”[39m[0m[90m using #or with nested #elemMatch[0m
2025-04-04T18:16:00.6471424Z     [32m  [32mâœ”[39m[0m[90m buffer $in array[0m
2025-04-04T18:16:00.6593910Z     [32m  [32mâœ”[39m[0m[90m regex with Array (gh-599)[0m
2025-04-04T18:16:00.6709444Z     [32m  [32mâœ”[39m[0m[90m regex with options[0m
2025-04-04T18:16:00.6827750Z     [32m  [32mâœ”[39m[0m[90m works with $elemMatch and $in combo (gh-1100)[0m
2025-04-04T18:16:00.6844193Z [0m    findById[0m
2025-04-04T18:16:00.6943524Z     [32m  [32mâœ”[39m[0m[90m handles undefined[0m
2025-04-04T18:16:00.7070877Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:00.7224489Z     [32m  [32mâœ”[39m[0m[90m works with partial initialization[0m
2025-04-04T18:16:00.7346099Z     [32m  [32mâœ”[39m[0m[90m querying if an array contains at least a certain single member (gh-220)[0m
2025-04-04T18:16:00.7478353Z     [32m  [32mâœ”[39m[0m[90m where an array where the $slice operator[0m
2025-04-04T18:16:00.7497687Z [0m    find[0m
2025-04-04T18:16:00.7623770Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:00.7746130Z     [32m  [32mâœ”[39m[0m[90m returns docs where an array that contains one specific member[0m
2025-04-04T18:16:00.7887227Z     [32m  [32mâœ”[39m[0m[90m works when comparing $ne with single value against an array[0m
2025-04-04T18:16:00.8024419Z     [32m  [32mâœ”[39m[0m[90m with partial initialization[0m
2025-04-04T18:16:00.8216070Z     [32m  [32mâœ”[39m[0m[90m where $exists[0m
2025-04-04T18:16:00.8335142Z     [32m  [32mâœ”[39m[0m[90m works with $elemMatch (gh-1100)[0m
2025-04-04T18:16:00.8474085Z     [32m  [32mâœ”[39m[0m[90m where $mod[0m
2025-04-04T18:16:00.8658916Z     [32m  [32mâœ”[39m[0m[90m where $not[0m
2025-04-04T18:16:00.8902940Z     [32m  [32mâœ”[39m[0m[90m where or()[0m
2025-04-04T18:16:00.9038344Z     [32m  [32mâœ”[39m[0m[90m using $or with array of Document[0m
2025-04-04T18:16:00.9230418Z     [32m  [32mâœ”[39m[0m[90m where $ne[0m
2025-04-04T18:16:00.9473590Z     [32m  [32mâœ”[39m[0m[90m where $nor[0m
2025-04-04T18:16:00.9623276Z     [32m  [32mâœ”[39m[0m[90m STRICT null matches[0m
2025-04-04T18:16:00.9773788Z     [32m  [32mâœ”[39m[0m[90m null matches null and undefined[0m
2025-04-04T18:16:00.9917496Z     [32m  [32mâœ”[39m[0m[90m a document whose arrays contain at least $all string values[0m
2025-04-04T18:16:01.0318168Z     [32m  [32mâœ”[39m[0m[90m using #nor with nested #elemMatch[0m
2025-04-04T18:16:01.0479378Z     [32m  [32mâœ”[39m[0m[90m strings via regexp[0m
2025-04-04T18:16:01.0649764Z     [32m  [32mâœ”[39m[0m[90m a document whose arrays contain at least $all values[0m
2025-04-04T18:16:01.0785953Z     [32m  [32mâœ”[39m[0m[90m where $size[0m
2025-04-04T18:16:01.0948634Z     [32m  [32mâœ”[39m[0m[90m $gt, $lt, $lte, $gte work on strings[0m
2025-04-04T18:16:01.0968411Z [0m      text search indexes[0m
2025-04-04T18:16:01.1128158Z       [32m  [32mâœ”[39m[0m[90m works with text search ensure indexes [0m
2025-04-04T18:16:01.1289881Z       [32m  [32mâœ”[39m[0m[90m works when text search is called by a schema (gh-3824) (gh-6851)[0m
2025-04-04T18:16:01.1310241Z [0m    limit[0m
2025-04-04T18:16:01.1425417Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:01.1442349Z [0m    skip[0m
2025-04-04T18:16:01.1564479Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:01.1581824Z [0m    sort[0m
2025-04-04T18:16:01.1697257Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:01.1878172Z     [32m  [32mâœ”[39m[0m[90m handles sorting by text score[0m
2025-04-04T18:16:01.1899255Z [0m    nested mixed "x.y.z"[0m
2025-04-04T18:16:01.1918354Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:01.1969873Z [0m    $all[0m
2025-04-04T18:16:01.2101032Z     [32m  [32mâœ”[39m[0m[90m with ObjectIds (gh-690)[0m
2025-04-04T18:16:01.2294014Z     [32m  [32mâœ”[39m[0m[90m with Dates[0m
2025-04-04T18:16:01.2576208Z     [32m  [32mâœ”[39m[0m[90m with $elemMatch (gh-3163)[0m
2025-04-04T18:16:01.2600732Z [0m    and[0m
2025-04-04T18:16:01.2727105Z     [32m  [32mâœ”[39m[0m[90m works with queries gh-1188[0m
2025-04-04T18:16:01.2765317Z     [32m  [32mâœ”[39m[0m[90m works with nested query selectors gh-1884[0m
2025-04-04T18:16:01.2842011Z [0m    2d[0m
2025-04-04T18:16:01.2978255Z     [32m  [32mâœ”[39m[0m[90m $near (gh-309)[0m
2025-04-04T18:16:01.3130855Z     [32m  [32mâœ”[39m[0m[90m $within arrays (gh-586)[0m
2025-04-04T18:16:01.3282386Z     [32m  [32mâœ”[39m[0m[90m $nearSphere with arrays (gh-610)[0m
2025-04-04T18:16:01.3428658Z     [32m  [32mâœ”[39m[0m[90m $nearSphere with invalid coordinate does not crash (gh-1874)[0m
2025-04-04T18:16:01.3585260Z     [32m  [32mâœ”[39m[0m[90m $maxDistance with arrays[0m
2025-04-04T18:16:01.3606038Z [0m    2dsphere[0m
2025-04-04T18:16:01.3693481Z     [32m  [32mâœ”[39m[0m[90m index is allowed in schema[0m
2025-04-04T18:16:01.3749918Z [0m      $geometry[0m
2025-04-04T18:16:01.3889725Z       [32m  [32mâœ”[39m[0m[90m Polygon[0m
2025-04-04T18:16:01.3910291Z [0m      $geoIntersects[0m
2025-04-04T18:16:01.4051386Z       [32m  [32mâœ”[39m[0m[90m LineString[0m
2025-04-04T18:16:01.4196572Z       [32m  [32mâœ”[39m[0m[90m MultiLineString[0m
2025-04-04T18:16:01.4385363Z       [32m  [32mâœ”[39m[0m[90m MultiPolygon[0m
2025-04-04T18:16:01.4454709Z [0m      $near[0m
2025-04-04T18:16:01.4613441Z       [32m  [32mâœ”[39m[0m[90m Point[0m
2025-04-04T18:16:01.4782763Z       [32m  [32mâœ”[39m[0m[90m works with GeoJSON (gh-1482)[0m
2025-04-04T18:16:01.4931678Z       [32m  [32mâœ”[39m[0m[90m works with legacy 2dsphere pair in schema (gh-6937)[0m
2025-04-04T18:16:01.4952012Z [0m    hashed indexes[0m
2025-04-04T18:16:01.5147536Z     [32m  [32mâœ”[39m[0m[90m work[0m
2025-04-04T18:16:01.5168845Z [0m    lean[0m
2025-04-04T18:16:01.5274201Z     [32m  [32mâœ”[39m[0m[90m find[0m
2025-04-04T18:16:01.5406654Z     [32m  [32mâœ”[39m[0m[90m removes the __v property if versionKey: false is set (gh-8934)[0m
2025-04-04T18:16:01.5525012Z     [32m  [32mâœ”[39m[0m[90m findOne[0m
2025-04-04T18:16:01.5557834Z     [32m  [32mâœ”[39m[0m[90m properly casts nested and/or queries (gh-676)[0m
2025-04-04T18:16:01.5657796Z     [32m  [32mâœ”[39m[0m[90m properly casts deeply nested and/or queries (gh-676)[0m
2025-04-04T18:16:01.5857934Z     [32m  [32mâœ”[39m[0m[90m casts $elemMatch (gh-2199)[0m
2025-04-04T18:16:01.5956925Z     [32m  [32mâœ”[39m[0m[90m does not run resetId setter on query (gh-6093)[0m
2025-04-04T18:16:01.6038922Z [0m      $eq[0m
2025-04-04T18:16:01.6057710Z       [32m  [32mâœ”[39m[0m[90m casts $eq (gh-2752)[0m
2025-04-04T18:16:01.6134825Z 
2025-04-04T18:16:01.6139670Z [0m  Model[0m
2025-04-04T18:16:01.6273877Z   [32m  [32mâœ”[39m[0m[90m can be created using _id as embedded document[0m
2025-04-04T18:16:01.6386086Z   [32m  [32mâœ”[39m[0m[90m gh-2140[0m
2025-04-04T18:16:01.6485361Z   [32m  [32mâœ”[39m[0m[90m collection name can be specified through schema[0m
2025-04-04T18:16:01.6660028Z   [32m  [32mâœ”[39m[0m[90m saving a model with a null value should perpetuate that null value to the db[0m
2025-04-04T18:16:01.6895448Z   [32m  [32mâœ”[39m[0m[90m saves subdocuments middleware correctly[0m
2025-04-04T18:16:01.7012717Z   [32m  [32mâœ”[39m[0m[90m instantiating a model with a hash that maps to at least 1 undefined value[0m
2025-04-04T18:16:01.7225635Z   [32m  [32mâœ”[39m[0m[90m modified nested objects which contain MongoseNumbers should not cause a RangeError on save (gh-714)[0m
2025-04-04T18:16:01.7420291Z   [32m  [32mâœ”[39m[0m[90m no RangeError on deleteOne() of a doc with Number _id (gh-714)[0m
2025-04-04T18:16:01.7601525Z   [32m  [32mâœ”[39m[0m[90m over-writing a number should persist to the db (gh-342)[0m
2025-04-04T18:16:01.7783615Z   [32m  [32mâœ”[39m[0m[90m changing a number non-atomically (gh-203)[0m
2025-04-04T18:16:01.7920528Z   [32m  [32mâœ”[39m[0m[90m doubly nested array saving and loading[0m
2025-04-04T18:16:01.8112641Z   [32m  [32mâœ”[39m[0m[90m multiple number push() calls[0m
2025-04-04T18:16:01.8309165Z   [32m  [32mâœ”[39m[0m[90m multiple push() calls[0m
2025-04-04T18:16:01.8488222Z   [32m  [32mâœ”[39m[0m[90m activePaths should be updated for nested modifieds[0m
2025-04-04T18:16:01.8690916Z   [32m  [32mâœ”[39m[0m[90m activePaths should be updated for nested modifieds as promise[0m
2025-04-04T18:16:01.8879049Z   [32m  [32mâœ”[39m[0m[90m $pull should affect what you see in an array before a save[0m
2025-04-04T18:16:01.9109071Z   [32m  [32mâœ”[39m[0m[90m $shift[0m
2025-04-04T18:16:01.9283139Z   [32m  [32mâœ”[39m[0m[90m updating an embedded document in an embedded array (gh-255)[0m
2025-04-04T18:16:01.9426133Z   [32m  [32mâœ”[39m[0m[90m updating an embedded array document to an Object value (gh-334)[0m
2025-04-04T18:16:01.9607507Z   [32m  [32mâœ”[39m[0m[90m saving an embedded document twice should not push that doc onto the parent doc twice (gh-267)[0m
2025-04-04T18:16:01.9756331Z   [32m  [32mâœ”[39m[0m[90m removing a subdocument atomically[0m
2025-04-04T18:16:01.9874187Z   [32m  [32mâœ”[39m[0m[90m single pull embedded doc[0m
2025-04-04T18:16:02.0050659Z   [32m  [32mâœ”[39m[0m[90m saving mixed data[0m
2025-04-04T18:16:02.0083988Z   [32m  [32mâœ”[39m[0m[90m populating mixed data from the constructor (gh-200)[0m
2025-04-04T18:16:02.0260661Z   [32m  [32mâœ”[39m[0m[90m "type" is allowed as a key[0m
2025-04-04T18:16:02.0557094Z   [32m  [32mâœ”[39m[0m[90m unaltered model does not clear the doc (gh-195)[0m
2025-04-04T18:16:02.0722838Z   [32m  [32mâœ”[39m[0m[90m subdocuments with changed values should persist the values[0m
2025-04-04T18:16:02.0842300Z   [32m  [32mâœ”[39m[0m[90m a single instantiated document should be able to update its embedded documents more than once[0m
2025-04-04T18:16:02.1011567Z   [32m  [32mâœ”[39m[0m[90m should not throw range error when using Number _id and saving existing doc (gh-691)[0m
2025-04-04T18:16:02.1197012Z   [32m  [32mâœ”[39m[0m[90m path is cast to correct value when retreived from db[0m
2025-04-04T18:16:02.1491585Z   [32m  [32mâœ”[39m[0m[90m setting a path to undefined should retain the value as undefined[0m
2025-04-04T18:16:02.1526187Z   [32m  [32mâœ”[39m[0m[90m allow for object passing to ref paths (gh-1606)[0m
2025-04-04T18:16:02.1672424Z   [32m  [32mâœ”[39m[0m[90m setters trigger on null values (gh-1445)[0m
2025-04-04T18:16:02.1972791Z   [32m  [32mâœ”[39m[0m[90m dropDatabase() after init allows re-init (gh-6967)[0m
2025-04-04T18:16:02.2149121Z   [32m  [32mâœ”[39m[0m[90m replaceOne always sets version key in top-level (gh-7138)[0m
2025-04-04T18:16:02.2189071Z   [32m  [32mâœ”[39m[0m[90m can JSON.stringify(Model.schema) with nested (gh-7220)[0m
2025-04-04T18:16:02.2395183Z   [32m  [32mâœ”[39m[0m[90m sets $session() before pre save hooks run (gh-7742)[0m
2025-04-04T18:16:02.2579975Z   [32m  [32mâœ”[39m[0m[90m sets $session() before pre deleteOne hooks run (gh-7742)[0m
2025-04-04T18:16:02.2816334Z   [32m  [32mâœ”[39m[0m[90m set $session() before pre validate hooks run on bulkWrite and insertMany (gh-7769)[0m
2025-04-04T18:16:02.2959742Z   [32m  [32mâœ”[39m[0m[90m custom statics that overwrite query functions dont get hooks by default (gh-7790)[0m
2025-04-04T18:16:02.3146758Z   [32m  [32mâœ”[39m[0m[90m custom statics that overwrite aggregate functions dont get hooks by default (gh-14903)[0m
2025-04-04T18:16:02.3316101Z   [32m  [32mâœ”[39m[0m[90m custom statics that overwrite model functions dont get hooks by default[0m
2025-04-04T18:16:02.3427090Z   [32m  [32mâœ”[39m[0m[90m custom statics that overwrite document functions dont get hooks by default[0m
2025-04-04T18:16:02.3618623Z   [32m  [32mâœ”[39m[0m[90m error handling middleware passes saved doc (gh-7832)[0m
2025-04-04T18:16:02.3718666Z   [32m  [32mâœ”[39m[0m[90m throws readable error if calling Model function with bad context (gh-7957)[0m
2025-04-04T18:16:02.3901217Z   [32m  [32mâœ”[39m[0m[90m sets correct `Document#op` with `save()` (gh-8439)[0m
2025-04-04T18:16:02.4123072Z   [32m  [32mâœ”[39m[0m[90m bulkWrite sets discriminator filters (gh-8590)[0m
2025-04-04T18:16:02.4480611Z   [32m  [32mâœ”[39m[0m[90m bulkWrite skips defaults based on global setDefaultsOnInsert (gh-13823)[0m
2025-04-04T18:16:02.4600453Z   [32m  [32mâœ”[39m[0m[90m bulkWrite upsert works when update casts to empty (gh-8698)[0m
2025-04-04T18:16:02.4709630Z   [32m  [32mâœ”[39m[0m[90m bulkWrite upsert with non-schema path in filter (gh-8698)[0m
2025-04-04T18:16:02.4986113Z   [32m  [32mâœ”[39m[0m[90m bulkWrite can disable timestamps with updateOne, and updateMany[0m
2025-04-04T18:16:02.5264532Z   [32m  [32mâœ”[39m[0m[90m bulkwrite should not change updatedAt on subdocs when timestamps set to false (gh-13611)[0m
2025-04-04T18:16:02.5412516Z   [32m  [32mâœ”[39m[0m[90m bulkWrite can overwrite schema `strict` option for filters and updates (gh-8778)[0m
2025-04-04T18:16:02.5503554Z   [32m  [32mâœ”[39m[0m[90m cast errors have `kind` field (gh-8953)[0m
2025-04-04T18:16:02.5773240Z   [32m  [32mâœ”[39m[0m[90m casts bulkwrite timestamps to `Number` when specified (gh-9030)[0m
2025-04-04T18:16:02.5805205Z   [32m  [32mâœ”[39m[0m[90m Model.bulkWrite(...) does not throw an error when provided an empty array (gh-9131)[0m
2025-04-04T18:16:02.6005350Z   [32m  [32mâœ”[39m[0m[90m Model.bulkWrite(...) does not throw an error with upsert:true, setDefaultsOnInsert: true (gh-9157)[0m
2025-04-04T18:16:02.6106863Z   [32m  [32mâœ”[39m[0m[90m Model.bulkWrite(...) does not hang with empty array and ordered: false (gh-13664)[0m
2025-04-04T18:16:02.6346313Z   [32m  [32mâœ”[39m[0m[90m allows calling `create()` after `bulkWrite()` (gh-9350)[0m
2025-04-04T18:16:02.6380731Z   [32m  [32mâœ”[39m[0m[90m skips applying init hooks if `document` option set to `false` (gh-9316)[0m
2025-04-04T18:16:02.6588271Z   [32m  [32mâœ”[39m[0m[90m retains atomics after failed `save()` (gh-9327)[0m
2025-04-04T18:16:02.6793340Z   [32m  [32mâœ”[39m[0m[90m doesnt wipe out changes made while `save()` is in flight (gh-9327)[0m
2025-04-04T18:16:02.6988110Z   [32m  [32mâœ”[39m[0m[90m saves all error object properties to paths with type `Mixed` (gh-10126)[0m
2025-04-04T18:16:02.7183801Z   [32m  [32mâœ”[39m[0m[90m supports skipping defaults on a find operation gh-7287[0m
2025-04-04T18:16:02.7386546Z   [32m  [32mâœ”[39m[0m[90m casts ObjectIds with `ref` in schema when calling `hydrate()` (gh-11052)[0m
2025-04-04T18:16:02.7513187Z   [32m  [32mâœ”[39m[0m[90m respects `hydrate()` projection (gh-11375)[0m
2025-04-04T18:16:02.7616678Z   [32m  [32mâœ”[39m[0m[90m supports setters option for `hydrate()` (gh-11653)[0m
2025-04-04T18:16:02.7890128Z   [32m  [32mâœ”[39m[0m[90m sets index collation based on schema collation (gh-7621)[0m
2025-04-04T18:16:02.8064668Z   [32m  [32mâœ”[39m[0m[90m works if passing class that extends Document to `loadClass()` (gh-12254)[0m
2025-04-04T18:16:02.8308216Z   [32m  [32mâœ”[39m[0m[90m handles shared schema methods (gh-12423)[0m
2025-04-04T18:16:02.8471217Z   [32m  [32mâœ”[39m[0m[90m respects schema-level `collectionOptions` for setting options to createCollection()[0m
2025-04-04T18:16:02.8499004Z   [32m  [32mâœ”[39m[0m[90m throws helpful error when calling Model() with string instead of model() (gh-14281)[0m
2025-04-04T18:16:02.8568418Z   [32m  [32mâœ”[39m[0m[90m supports recompiling model with new schema additions (gh-14296)[0m
2025-04-04T18:16:02.8695585Z   [32m  [32mâœ”[39m[0m[90m supports recompiling model with new discriminators (gh-14444) (gh-14296)[0m
2025-04-04T18:16:02.8812732Z   [32m  [32mâœ”[39m[0m[90m overwrites existing discriminators when calling recompileSchema (gh-14527) (gh-14444)[0m
2025-04-04T18:16:02.9064085Z   [32m  [32mâœ”[39m[0m[90m does not throw with multiple self-referencing discriminator schemas applied to schema (gh-15120)[0m
2025-04-04T18:16:02.9495201Z   [32m  [32mâœ”[39m[0m[90m inserts versionKey even if schema has `toObject.versionKey` set to false (gh-14344)[0m
2025-04-04T18:16:02.9712555Z   [32m  [32mâœ”[39m[0m[90m insertMany should throw an error if there were operations that failed validation, but all operations that passed validation succeeded (gh-13256)[0m
2025-04-04T18:16:02.9808701Z   [32m  [32mâœ”[39m[0m[90m throws error if calling `updateMany()` with no update param (gh-15190)[0m
2025-04-04T18:16:02.9897688Z [0m    constructor[0m
2025-04-04T18:16:02.9909199Z     [32m  [32mâœ”[39m[0m[90m works without "new" keyword[0m
2025-04-04T18:16:02.9972015Z     [32m  [32mâœ”[39m[0m[90m works "new" keyword[0m
2025-04-04T18:16:03.0029009Z [0m    isNew[0m
2025-04-04T18:16:03.0040111Z     [32m  [32mâœ”[39m[0m[90m is true on instantiation[0m
2025-04-04T18:16:03.0094471Z [0m    schema[0m
2025-04-04T18:16:03.0104689Z     [32m  [32mâœ”[39m[0m[90m should exist[0m
2025-04-04T18:16:03.0177432Z     [32m  [32mâœ”[39m[0m[90m emits init event[0m
2025-04-04T18:16:03.0265461Z [0m    structure[0m
2025-04-04T18:16:03.0277798Z     [32m  [32mâœ”[39m[0m[90m default when instantiated[0m
2025-04-04T18:16:03.0344847Z     [32m  [32mâœ”[39m[0m[90m a hash with one null value[0m
2025-04-04T18:16:03.0507240Z     [32m  [32mâœ”[39m[0m[90m when saved[0m
2025-04-04T18:16:03.0527194Z [0m      array[0m
2025-04-04T18:16:03.0527853Z [0m        defaults[0m
2025-04-04T18:16:03.0543726Z         [32m  [32mâœ”[39m[0m[90m to a non-empty array[0m
2025-04-04T18:16:03.0651106Z         [32m  [32mâœ”[39m[0m[90m empty[0m
2025-04-04T18:16:03.0740974Z [0m      init[0m
2025-04-04T18:16:03.0757601Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:03.0821990Z       [32m  [32mâœ”[39m[0m[90m partially[0m
2025-04-04T18:16:03.0885595Z       [32m  [32mâœ”[39m[0m[90m with partial hash[0m
2025-04-04T18:16:03.0951234Z       [32m  [32mâœ”[39m[0m[90m isNew on embedded documents[0m
2025-04-04T18:16:03.1105152Z       [32m  [32mâœ”[39m[0m[90m isNew on embedded documents after saving[0m
2025-04-04T18:16:03.1124617Z [0m    methods[0m
2025-04-04T18:16:03.1137780Z     [32m  [32mâœ”[39m[0m[90m can be defined[0m
2025-04-04T18:16:03.1209803Z     [32m  [32mâœ”[39m[0m[90m can be defined on embedded documents[0m
2025-04-04T18:16:03.1345699Z     [32m  [32mâœ”[39m[0m[90m can be defined with nested key[0m
2025-04-04T18:16:03.1435203Z [0m    statics[0m
2025-04-04T18:16:03.1445217Z     [32m  [32mâœ”[39m[0m[90m can be defined[0m
2025-04-04T18:16:03.1504375Z [0m    casting as validation errors[0m
2025-04-04T18:16:03.1595629Z     [32m  [32mâœ”[39m[0m[90m error[0m
2025-04-04T18:16:03.1631450Z     [32m  [32mâœ”[39m[0m[90m nested error[0m
2025-04-04T18:16:03.1698303Z     [32m  [32mâœ”[39m[0m[90m subdocument cast error[0m
2025-04-04T18:16:03.1763061Z     [32m  [32mâœ”[39m[0m[90m subdocument validation error[0m
2025-04-04T18:16:03.1909975Z     [32m  [32mâœ”[39m[0m[90m subdocument error when adding a subdoc[0m
2025-04-04T18:16:03.2064972Z     [32m  [32mâœ”[39m[0m[90m updates[0m
2025-04-04T18:16:03.2094388Z     [32m  [32mâœ”[39m[0m[90m $pull[0m
2025-04-04T18:16:03.2261560Z     [32m  [32mâœ”[39m[0m[90m $push[0m
2025-04-04T18:16:03.2379569Z     [32m  [32mâœ”[39m[0m[90m Number arrays[0m
2025-04-04T18:16:03.2545389Z     [32m  [32mâœ”[39m[0m[90m date casting compat with datejs (gh-502)[0m
2025-04-04T18:16:03.2615008Z [0m    validation[0m
2025-04-04T18:16:03.2740005Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:03.2886161Z     [32m  [32mâœ”[39m[0m[90m custom messaging[0m
2025-04-04T18:16:03.2922867Z     [32m  [32mâœ”[39m[0m[90m with Model.schema.path introspection (gh-272)[0m
2025-04-04T18:16:03.3132200Z     [32m  [32mâœ”[39m[0m[90m of required undefined values[0m
2025-04-04T18:16:03.3175968Z     [32m  [32mâœ”[39m[0m[90m save callback should only execute once (gh-319)[0m
2025-04-04T18:16:03.3391175Z     [32m  [32mâœ”[39m[0m[90m query result[0m
2025-04-04T18:16:03.3527306Z     [32m  [32mâœ”[39m[0m[90m of required previously existing null values[0m
2025-04-04T18:16:03.3736690Z     [32m  [32mâœ”[39m[0m[90m nested[0m
2025-04-04T18:16:03.3881503Z     [32m  [32mâœ”[39m[0m[90m of nested subdocuments[0m
2025-04-04T18:16:03.3918123Z     [32m  [32mâœ”[39m[0m[90m without saving[0m
2025-04-04T18:16:03.4015695Z     [32m  [32mâœ”[39m[0m[90m when required is set to false[0m
2025-04-04T18:16:03.4104882Z [0m      middleware[0m
2025-04-04T18:16:03.4232167Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:03.4255009Z [0m    defaults application[0m
2025-04-04T18:16:03.4269392Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:03.4373655Z     [32m  [32mâœ”[39m[0m[90m nested[0m
2025-04-04T18:16:03.4476930Z     [32m  [32mâœ”[39m[0m[90m subdocument[0m
2025-04-04T18:16:03.4676539Z     [32m  [32mâœ”[39m[0m[90m allows nulls[0m
2025-04-04T18:16:03.4752764Z [0m    virtuals[0m
2025-04-04T18:16:03.4767416Z     [32m  [32mâœ”[39m[0m[90m getters[0m
2025-04-04T18:16:03.4854290Z     [32m  [32mâœ”[39m[0m[90m set()[0m
2025-04-04T18:16:03.5007541Z     [32m  [32mâœ”[39m[0m[90m should not be saved to the db[0m
2025-04-04T18:16:03.5042509Z     [32m  [32mâœ”[39m[0m[90m nested[0m
2025-04-04T18:16:03.5133316Z [0m    .deleteOne()[0m
2025-04-04T18:16:03.5272395Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:03.5420026Z     [32m  [32mâœ”[39m[0m[90m errors when id deselected (gh-3118)[0m
2025-04-04T18:16:03.5577845Z     [32m  [32mâœ”[39m[0m[90m should not remove any records when deleting by id undefined[0m
2025-04-04T18:16:03.5739059Z     [32m  [32mâœ”[39m[0m[90m should not remove all documents in the collection (gh-3326)[0m
2025-04-04T18:16:03.5755658Z [0m    getters[0m
2025-04-04T18:16:03.5773074Z     [32m  [32mâœ”[39m[0m[90m with same name on embedded docs do not class[0m
2025-04-04T18:16:03.5913220Z     [32m  [32mâœ”[39m[0m[90m should not be triggered at construction (gh-685)[0m
2025-04-04T18:16:03.6012550Z     [32m  [32mâœ”[39m[0m[90m with type defined with { type: Native } (gh-190)[0m
2025-04-04T18:16:03.6104197Z [0m      nested[0m
2025-04-04T18:16:03.6119329Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:03.6219864Z       [32m  [32mâœ”[39m[0m[90m works with object literals[0m
2025-04-04T18:16:03.6371316Z       [32m  [32mâœ”[39m[0m[90m object property access works when root initd with null[0m
2025-04-04T18:16:03.6580618Z       [32m  [32mâœ”[39m[0m[90m object property access works when root initd with undefined[0m
2025-04-04T18:16:03.6746880Z       [32m  [32mâœ”[39m[0m[90m pre-existing null object re-save[0m
2025-04-04T18:16:03.6893057Z       [32m  [32mâœ”[39m[0m[90m array of Mixed on existing doc can be pushed to[0m
2025-04-04T18:16:03.7040321Z       [32m  [32mâœ”[39m[0m[90m props can be set directly when property was named "type"[0m
2025-04-04T18:16:03.7063256Z [0m    setters[0m
2025-04-04T18:16:03.7221860Z     [32m  [32mâœ”[39m[0m[90m are used on embedded docs (gh-365 gh-390 gh-422)[0m
2025-04-04T18:16:03.7321811Z [0m    atomic subdocument[0m
2025-04-04T18:16:03.7482396Z     [32m  [32mâœ”[39m[0m[90m saving[0m
2025-04-04T18:16:03.7634337Z     [32m  [32mâœ”[39m[0m[90m setting (gh-310)[0m
2025-04-04T18:16:03.7651509Z [0m    saving embedded arrays[0m
2025-04-04T18:16:03.7791091Z     [32m  [32mâœ”[39m[0m[90m of Numbers atomically[0m
2025-04-04T18:16:03.7951557Z     [32m  [32mâœ”[39m[0m[90m of Strings atomically[0m
2025-04-04T18:16:03.8108044Z     [32m  [32mâœ”[39m[0m[90m of Buffers atomically[0m
2025-04-04T18:16:03.8264909Z     [32m  [32mâœ”[39m[0m[90m works with modified element properties + doc removal (gh-975)[0m
2025-04-04T18:16:03.8403437Z     [32m  [32mâœ”[39m[0m[90m updating an embedded document in an embedded array with set call[0m
2025-04-04T18:16:03.8420522Z [0m    embedded array filtering[0m
2025-04-04T18:16:03.8520302Z     [32m  [32mâœ”[39m[0m[90m by the id shortcut function[0m
2025-04-04T18:16:03.8653882Z     [32m  [32mâœ”[39m[0m[90m by the id with cast error[0m
2025-04-04T18:16:03.8767680Z     [32m  [32mâœ”[39m[0m[90m by the id shortcut with no match[0m
2025-04-04T18:16:03.8784254Z [0m    hooks[0m
2025-04-04T18:16:03.8784668Z [0m      pre[0m
2025-04-04T18:16:03.8889257Z       [32m  [32mâœ”[39m[0m[90m with undefined and null[0m
2025-04-04T18:16:03.9083343Z       [32m  [32mâœ”[39m[0m[90m called on all sub levels[0m
2025-04-04T18:16:03.9190508Z       [32m  [32mâœ”[39m[0m[90m error on any sub level[0m
2025-04-04T18:16:03.9288588Z [0m        init[0m
2025-04-04T18:16:03.9398999Z         [32m  [32mâœ”[39m[0m[90m has access to the true ObjectId when used with querying (gh-289)[0m
2025-04-04T18:16:03.9476695Z [0m      post[0m
2025-04-04T18:16:03.9613392Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:03.9757182Z       [32m  [32mâœ”[39m[0m[90m on embedded docs[0m
2025-04-04T18:16:03.9910792Z       [32m  [32mâœ”[39m[0m[90m callback should receive parameter of type document after bulkSave (gh-13026)[0m
2025-04-04T18:16:03.9932650Z [0m    #exec()[0m
2025-04-04T18:16:04.0038814Z     [32m  [32mâœ”[39m[0m[90m countDocuments()[0m
2025-04-04T18:16:04.0151122Z     [32m  [32mâœ”[39m[0m[90m estimatedDocumentCount()[0m
2025-04-04T18:16:04.0275971Z     [32m  [32mâœ”[39m[0m[90m updateOne()[0m
2025-04-04T18:16:04.0389430Z     [32m  [32mâœ”[39m[0m[90m findOne()[0m
2025-04-04T18:16:04.0542407Z     [32m  [32mâœ”[39m[0m[90m find()[0m
2025-04-04T18:16:04.0660589Z     [32m  [32mâœ”[39m[0m[90m op can be changed[0m
2025-04-04T18:16:04.0679357Z [0m      promises[0m
2025-04-04T18:16:04.0781142Z       [32m  [32mâœ”[39m[0m[90m findOne()[0m
2025-04-04T18:16:04.0928519Z       [32m  [32mâœ”[39m[0m[90m find()[0m
2025-04-04T18:16:04.0945494Z [0m    console.log[0m
2025-04-04T18:16:04.0966748Z     [32m  [32mâœ”[39m[0m[90m hides private props[0m
2025-04-04T18:16:04.1015013Z [0m    pathnames[0m
2025-04-04T18:16:04.1030144Z     [32m  [32mâœ”[39m[0m[90m named path can be used[0m
2025-04-04T18:16:04.1113643Z [0m    RegExps[0m
2025-04-04T18:16:04.1218928Z     [32m  [32mâœ”[39m[0m[90m can be saved[0m
2025-04-04T18:16:04.1238284Z [0m    save()[0m
2025-04-04T18:16:04.1256413Z     [32m  [32mâœ”[39m[0m[90m rejects new documents that have no _id set (1595)[0m
2025-04-04T18:16:04.1474174Z     [32m  [32mâœ”[39m[0m[90m no TypeError when attempting to save more than once after using atomics[0m
2025-04-04T18:16:04.1622944Z     [32m  [32mâœ”[39m[0m[90m should clear $versionError and saveOptions after saved (gh-8040)[0m
2025-04-04T18:16:04.1851506Z     [32m  [32mâœ”[39m[0m[90m should only save paths specificed in the `pathsToSave` array (gh-9583)[0m
2025-04-04T18:16:04.2031196Z     [32m  [32mâœ”[39m[0m[90m should have `pathsToSave` work with subdocs (gh-9583)[0m
2025-04-04T18:16:04.2203192Z     [32m  [32mâœ”[39m[0m[90m should have `pathsToSave` work with doc arrays (gh-9583)[0m
2025-04-04T18:16:04.2223713Z [0m      when no callback is passed[0m
2025-04-04T18:16:04.2242226Z       [32m  [32mâœ”[39m[0m[90m should emit error on its Model when there are listeners[0m
2025-04-04T18:16:04.2332278Z [0m    _delta()[0m
2025-04-04T18:16:04.2458987Z     [32m  [32mâœ”[39m[0m[90m should overwrite arrays when directly set (gh-1126)[0m
2025-04-04T18:16:04.2595956Z     [32m  [32mâœ”[39m[0m[90m should use $set when subdoc changed before pulling (gh-1303)[0m
2025-04-04T18:16:04.2612639Z [0m    backward compatibility[0m
2025-04-04T18:16:04.2727207Z     [32m  [32mâœ”[39m[0m[90m with conflicted data in db[0m
2025-04-04T18:16:04.2949469Z     [32m  [32mâœ”[39m[0m[90m with positional notation on path not existing in schema (gh-1048)[0m
2025-04-04T18:16:04.2972329Z [0m    non-schema adhoc property assignments[0m
2025-04-04T18:16:04.3067754Z     [32m  [32mâœ”[39m[0m[90m are not saved[0m
2025-04-04T18:16:04.3087475Z [0m    setting an unset value[0m
2025-04-04T18:16:04.3217235Z     [32m  [32mâœ”[39m[0m[90m is saved (gh-742)[0m
2025-04-04T18:16:04.3362403Z     [32m  [32mâœ”[39m[0m[90m is saved object with proper defaults[0m
2025-04-04T18:16:04.3432278Z [0m    unsetting a default value[0m
2025-04-04T18:16:04.3543305Z     [32m  [32mâœ”[39m[0m[90m should be ignored (gh-758)[0m
2025-04-04T18:16:04.3621100Z [0m    Skip setting default value for Geospatial-indexed fields (gh-1668)[0m
2025-04-04T18:16:04.3745347Z     [32m  [32mâœ”[39m[0m[90m 2dsphere indexed field with value is saved[0m
2025-04-04T18:16:04.3893938Z     [32m  [32mâœ”[39m[0m[90m 2dsphere indexed field without value is saved (gh-1668)[0m
2025-04-04T18:16:04.4113427Z     [32m  [32mâœ”[39m[0m[90m 2dsphere indexed field in subdoc without value is saved[0m
2025-04-04T18:16:04.4232383Z     [32m  [32mâœ”[39m[0m[90m 2dsphere indexed field with geojson without value is saved (gh-3233)[0m
2025-04-04T18:16:04.4434465Z     [32m  [32mâœ”[39m[0m[90m Doc with 2dsphere indexed field without initial value can be updated[0m
2025-04-04T18:16:04.4632532Z     [32m  [32mâœ”[39m[0m[90m 2dsphere indexed required field without value is rejected[0m
2025-04-04T18:16:04.4838318Z     [32m  [32mâœ”[39m[0m[90m 2dsphere field without value but with schema default is saved[0m
2025-04-04T18:16:04.5044666Z     [32m  [32mâœ”[39m[0m[90m 2d indexed field without value is saved[0m
2025-04-04T18:16:04.5068730Z     [36m  - Compound index with 2dsphere field without value is saved[0m
2025-04-04T18:16:04.5069722Z     [36m  - Compound index on field earlier declared with 2dsphere index is saved[0m
2025-04-04T18:16:04.5070275Z [0m    max bson size error[0m
2025-04-04T18:16:04.6488126Z     [32m  [32mâœ”[39m[0m[90m save max bson size error with buffering (gh-3906)[0m[31m (137ms)[0m
2025-04-04T18:16:04.8096160Z     [32m  [32mâœ”[39m[0m[90m reports max bson size error in save (gh-3906)[0m[31m (137ms)[0m
2025-04-04T18:16:04.8174826Z [0m    bug fixes[0m
2025-04-04T18:16:04.8300750Z     [32m  [32mâœ”[39m[0m[90m doesnt crash (gh-1920)[0m
2025-04-04T18:16:04.8509863Z     [32m  [32mâœ”[39m[0m[90m doesnt reset "modified" status for fields[0m
2025-04-04T18:16:04.8650165Z     [32m  [32mâœ”[39m[0m[90m deleteOne() with options (gh-7857)[0m
2025-04-04T18:16:04.8833870Z     [32m  [32mâœ”[39m[0m[90m deleteMany() with options (gh-6805)[0m
2025-04-04T18:16:04.8925191Z     [32m  [32mâœ”[39m[0m[90m run default function with correct this scope in DocumentArray (gh-6840)[0m
2025-04-04T18:16:04.9019434Z     [32m  [32mâœ”[39m[0m[90m method with same name as prop should throw (gh-4475)[0m
2025-04-04T18:16:04.9180748Z     [32m  [32mâœ”[39m[0m[90m create() reuses existing doc if one passed in (gh-4449)[0m
2025-04-04T18:16:04.9282576Z     [32m  [32mâœ”[39m[0m[90m disabling id getter with .set() (gh-5548)[0m
2025-04-04T18:16:04.9510019Z     [32m  [32mâœ”[39m[0m[90m creates new array when initializing from existing doc (gh-4449)[0m
2025-04-04T18:16:04.9699680Z     [32m  [32mâœ”[39m[0m[90m deleteOne with cast error (gh-5323)[0m
2025-04-04T18:16:04.9736959Z     [32m  [32mâœ”[39m[0m[90m .create() with non-object (gh-2037)[0m
2025-04-04T18:16:04.9970504Z     [32m  [32mâœ”[39m[0m[90m bulkWrite casting updateMany, deleteOne, deleteMany (gh-3998)[0m
2025-04-04T18:16:05.0124588Z     [32m  [32mâœ”[39m[0m[90m bulkWrite casting replaceOne (gh-3998)[0m
2025-04-04T18:16:05.0269589Z     [32m  [32mâœ”[39m[0m[90m alias with lean virtual (gh-6069)[0m
2025-04-04T18:16:05.0494203Z     [32m  [32mâœ”[39m[0m[90m marks array as modified when initializing non-array from db (gh-2442)[0m
2025-04-04T18:16:05.0768174Z     [32m  [32mâœ”[39m[0m[90m Throws when saving same doc in parallel w/ callback (gh-6456)[0m
2025-04-04T18:16:05.0858977Z     [32m  [32mâœ”[39m[0m[90m using `new db.model()()` (gh-6698)[0m
2025-04-04T18:16:05.1083906Z     [32m  [32mâœ”[39m[0m[90m allows calling save in a post save hook (gh-6611)[0m
2025-04-04T18:16:05.1256554Z     [32m  [32mâœ”[39m[0m[90m createCollection() respects schema collation (gh-6489)[0m
2025-04-04T18:16:05.1570331Z     [32m  [32mâœ”[39m[0m[90m createCollection() respects timeseries (gh-10611)[0m
2025-04-04T18:16:05.1799370Z     [32m  [32mâœ”[39m[0m[90m createCollection() enforces expireAfterSeconds (gh-11229)[0m
2025-04-04T18:16:05.2009358Z     [32m  [32mâœ”[39m[0m[90m createCollection() enforces expires (gh-11229)[0m
2025-04-04T18:16:05.2213616Z     [32m  [32mâœ”[39m[0m[90m createCollection() enforces expireAfterSeconds when set by Schema (gh-11229)[0m
2025-04-04T18:16:05.2414310Z     [32m  [32mâœ”[39m[0m[90m createCollection() enforces expires when set by Schema (gh-11229)[0m
2025-04-04T18:16:05.2573572Z     [32m  [32mâœ”[39m[0m[90m createCollection() respects clusteredIndex[0m
2025-04-04T18:16:06.2811241Z     [32m  [32mâœ”[39m[0m[90m mongodb actually removes expired documents (gh-11229)[0m[31m (1021ms)[0m
2025-04-04T18:16:06.2967130Z     [32m  [32mâœ”[39m[0m[90m createCollection() handles NamespaceExists errors (gh-9447)[0m
2025-04-04T18:16:06.2990257Z [0m      3.6 features[0m
2025-04-04T18:16:06.3212488Z       [32m  [32mâœ”[39m[0m[90m arrayFilter (gh-5965)[0m
2025-04-04T18:16:06.3443732Z       [32m  [32mâœ”[39m[0m[90m arrayFilter casting (gh-5965) (gh-7079)[0m
2025-04-04T18:16:06.3674881Z       [32m  [32mâœ”[39m[0m[90m avoids unused array filter error (gh-9468)[0m
2025-04-04T18:16:06.3696127Z [0m        watch()[0m
2025-04-04T18:16:06.3699552Z         [36m  - watch() (gh-5964)[0m
2025-04-04T18:16:06.3700288Z         [36m  - bubbles up resumeTokenChanged events (gh-13607)[0m
2025-04-04T18:16:06.3701024Z         [36m  - using next() and hasNext() (gh-11527)[0m
2025-04-04T18:16:06.3701459Z         [36m  - fullDocument (gh-11936)[0m
2025-04-04T18:16:06.3702053Z         [36m  - fullDocument with immediate watcher and hydrate (gh-14049)[0m
2025-04-04T18:16:06.3702807Z         [36m  - respects discriminators (gh-11007)[0m
2025-04-04T18:16:06.3703211Z         [36m  - watch() before connecting (gh-5964)[0m
2025-04-04T18:16:06.3703705Z         [36m  - watch() close() prevents buffered watch op from running (gh-7022)[0m
2025-04-04T18:16:06.3704186Z         [36m  - watch() close() closes the stream (gh-7022)[0m
2025-04-04T18:16:06.3704633Z         [36m  - bubbles up resumeTokenChanged events (gh-14349)[0m
2025-04-04T18:16:06.3705017Z [0m        sessions (gh-6362)[0m
2025-04-04T18:16:06.3799796Z         [32m  [32mâœ”[39m[0m[90m startSession()[0m
2025-04-04T18:16:06.3947634Z         [32m  [32mâœ”[39m[0m[90m startSession() before connecting[0m
2025-04-04T18:16:06.4133434Z         [32m  [32mâœ”[39m[0m[90m sets session when pulling a document from db[0m
2025-04-04T18:16:06.4288213Z         [32m  [32mâœ”[39m[0m[90m sets session on child doc when creating new doc (gh-7104)[0m
2025-04-04T18:16:06.4480488Z         [32m  [32mâœ”[39m[0m[90m sets session when pulling multiple docs from db[0m
2025-04-04T18:16:06.4667605Z         [32m  [32mâœ”[39m[0m[90m supports overwriting `session` in save()[0m
2025-04-04T18:16:06.4689220Z [0m      bulkWrite casting[0m
2025-04-04T18:16:06.4829240Z       [32m  [32mâœ”[39m[0m[90m basic casting (gh-3998)[0m
2025-04-04T18:16:06.4958195Z       [32m  [32mâœ”[39m[0m[90m setDefaultsOnInsert (gh-5708)[0m
2025-04-04T18:16:06.5180664Z       [32m  [32mâœ”[39m[0m[90m timestamps (gh-5708)[0m
2025-04-04T18:16:06.5224852Z       [32m  [32mâœ”[39m[0m[90m throwOnValidationError (gh-14572)[0m
2025-04-04T18:16:06.5432402Z       [32m  [32mâœ”[39m[0m[90m handles array filters (gh-14978)[0m
2025-04-04T18:16:06.5718598Z       [32m  [32mâœ”[39m[0m[90m handles overwriteDiscriminatorKey (gh-15218) (gh-15040)[0m
2025-04-04T18:16:06.6880387Z       [32m  [32mâœ”[39m[0m[90m with child timestamps and array filters (gh-7032)[0m[31m (113ms)[0m
2025-04-04T18:16:06.6920709Z       [32m  [32mâœ”[39m[0m[90m throws readable error if invalid op[0m
2025-04-04T18:16:06.7250907Z       [32m  [32mâœ”[39m[0m[90m with timestamps and replaceOne (gh-5708)[0m
2025-04-04T18:16:06.7506792Z       [32m  [32mâœ”[39m[0m[90m with timestamps from merged schema (gh-13409)[0m
2025-04-04T18:16:06.7759464Z       [32m  [32mâœ”[39m[0m[90m with child timestamps (gh-7032)[0m
2025-04-04T18:16:06.7919028Z       [32m  [32mâœ”[39m[0m[90m sets version key (gh-13944)[0m
2025-04-04T18:16:06.8050788Z       [32m  [32mâœ”[39m[0m[90m with single nested and setOnInsert (gh-7534)[0m
2025-04-04T18:16:06.8255622Z       [32m  [32mâœ”[39m[0m[90m throws an error if no update object is provided (gh-8331)[0m
2025-04-04T18:16:06.8593277Z       [32m  [32mâœ”[39m[0m[90m casts according to child discriminator if `discriminatorKey` is present (gh-8982)[0m
2025-04-04T18:16:06.8747313Z       [32m  [32mâœ”[39m[0m[90m insertOne and replaceOne should not throw an error when set `timestamps: false` in schmea (gh-10048)[0m
2025-04-04T18:16:06.8798737Z       [32m  [32mâœ”[39m[0m[90m casts objects with null prototype (gh-10512)[0m
2025-04-04T18:16:06.8899693Z       [32m  [32mâœ”[39m[0m[90m sends valid ops if ordered = false (gh-13176)[0m
2025-04-04T18:16:06.9120135Z       [32m  [32mâœ”[39m[0m[90m decorates write error with validation errors if unordered fails (gh-13176)[0m
2025-04-04T18:16:06.9274350Z       [32m  [32mâœ”[39m[0m[90m bulkWrite should throw an error if there were operations that failed validation, but all operations that passed validation succeeded (gh-13256)[0m
2025-04-04T18:16:06.9472641Z       [32m  [32mâœ”[39m[0m[90m casts $elemMatch filter (gh-14678)[0m
2025-04-04T18:16:06.9585507Z       [32m  [32mâœ”[39m[0m[90m throwOnValidationError (gh-14572) (gh-13256)[0m
2025-04-04T18:16:06.9787468Z       [32m  [32mâœ”[39m[0m[90m bulkWrite should throw an error if there were operations that failed validation, but all operations that passed validation succeeded (gh-13256)[0m
2025-04-04T18:16:06.9977174Z       [32m  [32mâœ”[39m[0m[90m bulkWrite should return both write errors and validation errors in error.results (gh-15265)[0m
2025-04-04T18:16:07.0051291Z [0m      Model.syncIndexes()[0m
2025-04-04T18:16:07.0205419Z       [32m  [32mâœ”[39m[0m[90m adds indexes to the collection[0m
2025-04-04T18:16:07.0338593Z       [32m  [32mâœ”[39m[0m[90m avoids creating collection if autoCreate: false[0m
2025-04-04T18:16:07.0571844Z       [32m  [32mâœ”[39m[0m[90m drops indexes that are not present in schema[0m
2025-04-04T18:16:07.0834764Z       [32m  [32mâœ”[39m[0m[90m when two different models connect to the same collection, syncIndexes(...) respects the last call[0m
2025-04-04T18:16:07.1213885Z       [32m  [32mâœ”[39m[0m[90m when two models have the same collection name, same field but different options, syncIndexes(...) respects the last call[0m
2025-04-04T18:16:07.1492211Z       [32m  [32mâœ”[39m[0m[90m when syncIndexes(...) is called twice with no changes on the model, the second call should not do anything[0m
2025-04-04T18:16:07.1716676Z       [32m  [32mâœ”[39m[0m[90m when called with different key order, it treats different order as different indexes (gh-8135)[0m
2025-04-04T18:16:07.1940307Z       [32m  [32mâœ”[39m[0m[90m syncIndexes(...) compound index including `_id` (gh-8559)[0m
2025-04-04T18:16:07.2119644Z       [32m  [32mâœ”[39m[0m[90m syncIndexes() allows overwriting `background` option (gh-8645)[0m
2025-04-04T18:16:07.2316310Z       [32m  [32mâœ”[39m[0m[90m syncIndexes() does not call createIndex for indexes that already exist[0m
2025-04-04T18:16:07.2532898Z       [32m  [32mâœ”[39m[0m[90m syncIndexes() supports hideIndexes (gh-14868)[0m
2025-04-04T18:16:07.2696813Z       [32m  [32mâœ”[39m[0m[90m should not drop a text index on .syncIndexes() call (gh-10850)[0m
2025-04-04T18:16:07.2968704Z       [32m  [32mâœ”[39m[0m[90m adding discriminators should not drop the parent model's indexes[0m
2025-04-04T18:16:07.3282778Z       [32m  [32mâœ”[39m[0m[90m syncing model with multiple discriminators works[0m
2025-04-04T18:16:07.3563960Z       [32m  [32mâœ”[39m[0m[90m syncing one discriminator's indexes should not drop the main model's indexes[0m
2025-04-04T18:16:07.3852334Z       [32m  [32mâœ”[39m[0m[90m syncing main model does not sync discrimator indexes[0m
2025-04-04T18:16:07.4184173Z       [32m  [32mâœ”[39m[0m[90m syncing discriminator does not attempt to sync parent model's indexes[0m
2025-04-04T18:16:07.4363021Z       [32m  [32mâœ”[39m[0m[90m creates indexes only when they do not exist on the mongodb server (gh-12250)[0m
2025-04-04T18:16:07.4386546Z [0m    exists() (gh-6872) (gh-8097) (gh-11138)[0m
2025-04-04T18:16:07.4401692Z     [32m  [32mâœ”[39m[0m[90m returns a query[0m
2025-04-04T18:16:07.4623346Z     [32m  [32mâœ”[39m[0m[90m returns lean document with `_id` only if document exists[0m
2025-04-04T18:16:07.4723854Z     [32m  [32mâœ”[39m[0m[90m returns `null` when no document exists[0m
2025-04-04T18:16:07.4937886Z     [32m  [32mâœ”[39m[0m[90m returns `null` if no doc exists[0m
2025-04-04T18:16:07.5056451Z     [32m  [32mâœ”[39m[0m[90m options (gh-8075)[0m
2025-04-04T18:16:07.5131820Z [0m    returnOriginal (gh-9183)[0m
2025-04-04T18:16:07.5264203Z     [32m  [32mâœ”[39m[0m[90m Setting `returnOriginal` works[0m
2025-04-04T18:16:07.5453732Z     [32m  [32mâœ”[39m[0m[90m `returnOriginal` can be overwritten[0m
2025-04-04T18:16:07.5483199Z [0m    buildBulkWriteOperations() (gh-9673)[0m
2025-04-04T18:16:07.5604762Z     [32m  [32mâœ”[39m[0m[90m builds write operations[0m
2025-04-04T18:16:07.5710297Z     [32m  [32mâœ”[39m[0m[90m throws an error when one document is invalid[0m
2025-04-04T18:16:07.5816695Z     [32m  [32mâœ”[39m[0m[90m throws an error if documents is not an array[0m
2025-04-04T18:16:07.5928636Z     [32m  [32mâœ”[39m[0m[90m throws an error if one element is not a document[0m
2025-04-04T18:16:07.6051889Z     [32m  [32mâœ”[39m[0m[90m skips validation when given `skipValidation` true[0m
2025-04-04T18:16:07.6302787Z     [32m  [32mâœ”[39m[0m[90m saves changes in discriminators if calling `bulkSave()` on base model (gh-13907)[0m
2025-04-04T18:16:07.6597232Z     [32m  [32mâœ”[39m[0m[90m accepts `timestamps: false` (gh-12059)[0m
2025-04-04T18:16:07.6796465Z     [32m  [32mâœ”[39m[0m[90m accepts `timestamps: true` (gh-12059)[0m
2025-04-04T18:16:07.6983848Z     [32m  [32mâœ”[39m[0m[90m `timestamps` has `undefined` as default value (gh-12059)[0m
2025-04-04T18:16:07.7310779Z     [32m  [32mâœ”[39m[0m[90m should not modify the object in the $set clause and not error when dealing with or without timestamps (gh-14164)[0m
2025-04-04T18:16:07.7336659Z [0m    bulkSave() (gh-9673)[0m
2025-04-04T18:16:07.7515598Z     [32m  [32mâœ”[39m[0m[90m saves new documents[0m
2025-04-04T18:16:07.7688702Z     [32m  [32mâœ”[39m[0m[90m updates documents[0m
2025-04-04T18:16:07.7847312Z     [32m  [32mâœ”[39m[0m[90m insertMany should throw an error if there were operations that failed validation, but all operations that passed validation succeeded (gh-14572) (gh-13256)[0m
2025-04-04T18:16:07.8054612Z     [32m  [32mâœ”[39m[0m[90m insertMany should return both write errors and validation errors in error.results (gh-15265)[0m
2025-04-04T18:16:07.8240116Z     [32m  [32mâœ”[39m[0m[90m insertMany should return both write errors and validation errors in error.results with rawResult (gh-15265)[0m
2025-04-04T18:16:07.8482569Z     [32m  [32mâœ”[39m[0m[90m returns writeResult on success[0m
2025-04-04T18:16:07.8660702Z     [32m  [32mâœ”[39m[0m[90m throws an error on failure[0m
2025-04-04T18:16:07.8796664Z     [32m  [32mâœ”[39m[0m[90m changes document state from `isNew` `false` to `true`[0m
2025-04-04T18:16:07.8955976Z     [32m  [32mâœ”[39m[0m[90m sets `isNew` to false when a document succeeds and `isNew` does not change when some fail[0m
2025-04-04T18:16:07.9114179Z     [32m  [32mâœ”[39m[0m[90m changes documents state for successful writes[0m
2025-04-04T18:16:07.9270033Z     [32m  [32mâœ”[39m[0m[90m triggers pre/post-save hooks[0m
2025-04-04T18:16:07.9429518Z     [32m  [32mâœ”[39m[0m[90m calls pre-save before actually saving[0m
2025-04-04T18:16:07.9567324Z     [32m  [32mâœ”[39m[0m[90m works if some document is not modified (gh-10437)[0m
2025-04-04T18:16:07.9808763Z     [32m  [32mâœ”[39m[0m[90m should error if no documents were inserted or updated (gh-14763)[0m
2025-04-04T18:16:07.9980301Z     [32m  [32mâœ”[39m[0m[90m should error if not all documents were inserted or updated (gh-14763)[0m
2025-04-04T18:16:08.0034297Z     [32m  [32mâœ”[39m[0m[90m should error if there is a validation error[0m
2025-04-04T18:16:08.0255373Z     [32m  [32mâœ”[39m[0m[90m Using bulkSave should not trigger an error (gh-11071)[0m
2025-04-04T18:16:08.0484775Z     [32m  [32mâœ”[39m[0m[90m accepts `timestamps: false` (gh-12059)[0m
2025-04-04T18:16:08.0622199Z     [32m  [32mâœ”[39m[0m[90m accepts `timestamps: true` (gh-12059)[0m
2025-04-04T18:16:08.0892722Z     [32m  [32mâœ”[39m[0m[90m `timestamps` has `undefined` as default value (gh-12059)[0m
2025-04-04T18:16:08.1107671Z     [32m  [32mâœ”[39m[0m[90m respects `$timestamps()` (gh-12117)[0m
2025-04-04T18:16:08.1129561Z [0m    Setting the explain flag[0m
2025-04-04T18:16:08.1455440Z     [32m  [32mâœ”[39m[0m[90m should give an object back rather than a boolean (gh-8275)[0m
2025-04-04T18:16:08.1479704Z [0m    Model.applyDefaults (gh-11945)[0m
2025-04-04T18:16:08.1507228Z     [32m  [32mâœ”[39m[0m[90m applies defaults to POJOs[0m
2025-04-04T18:16:08.1618015Z     [32m  [32mâœ”[39m[0m[90m applies defaults to documents[0m
2025-04-04T18:16:08.1706301Z [0m    castObject() (gh-11945)[0m
2025-04-04T18:16:08.1728994Z     [32m  [32mâœ”[39m[0m[90m casts values[0m
2025-04-04T18:16:08.1841293Z     [32m  [32mâœ”[39m[0m[90m throws if cannot cast[0m
2025-04-04T18:16:08.1945387Z     [32m  [32mâœ”[39m[0m[90m should not throw an error if `ignoreCastErrors` is set (gh-12156)[0m
2025-04-04T18:16:08.2073591Z     [32m  [32mâœ”[39m[0m[90m handles discriminators (gh-15075)[0m
2025-04-04T18:16:08.2173076Z     [32m  [32mâœ”[39m[0m[90m handles castNonArrays when document array is set to non-array value (gh-15075)[0m
2025-04-04T18:16:08.2283621Z     [32m  [32mâœ”[39m[0m[90m handles document arrays (gh-15164)[0m
2025-04-04T18:16:08.2376936Z [0m    Check if static function that is supplied in schema option is available[0m
2025-04-04T18:16:08.2391707Z     [32m  [32mâœ”[39m[0m[90m should give a static function back rather than undefined[0m
2025-04-04T18:16:08.2483211Z [0m    Bypass middleware[0m
2025-04-04T18:16:08.2608233Z     [32m  [32mâœ”[39m[0m[90m should bypass middleware if save is called on a document with no changes gh-13250[0m
2025-04-04T18:16:08.2693472Z [0m    Model.useConnection() (gh-14802)[0m
2025-04-04T18:16:08.2921986Z     [32m  [32mâœ”[39m[0m[90m updates the model's db property to point to the provided connection instance and vice versa (gh-14802))[0m
2025-04-04T18:16:08.2960976Z     [32m  [32mâœ”[39m[0m[90m should throw an error if no connection is passed[0m
2025-04-04T18:16:08.3059287Z [0m    applyVirtuals[0m
2025-04-04T18:16:08.3086082Z     [32m  [32mâœ”[39m[0m[90m handles basic top-level virtuals[0m
2025-04-04T18:16:08.3198607Z     [32m  [32mâœ”[39m[0m[90m handles virtuals in subdocuments[0m
2025-04-04T18:16:08.3338723Z     [32m  [32mâœ”[39m[0m[90m handles virtuals on nested paths[0m
2025-04-04T18:16:08.3476640Z     [32m  [32mâœ”[39m[0m[90m supports passing an array of virtuals to apply[0m
2025-04-04T18:16:08.3578372Z     [32m  [32mâœ”[39m[0m[90m sets populate virtuals to `null` if `justOne`[0m
2025-04-04T18:16:08.3668913Z [0m    applyTimestamps[0m
2025-04-04T18:16:08.3685473Z     [32m  [32mâœ”[39m[0m[90m handles basic top-level timestamps[0m
2025-04-04T18:16:08.3795239Z     [32m  [32mâœ”[39m[0m[90m no-op if timestamps not set[0m
2025-04-04T18:16:08.3902775Z     [32m  [32mâœ”[39m[0m[90m handles custom timestamp property names[0m
2025-04-04T18:16:08.4039996Z     [32m  [32mâœ”[39m[0m[90m applies timestamps to subdocs[0m
2025-04-04T18:16:08.4173875Z     [32m  [32mâœ”[39m[0m[90m supports isUpdate and currentTime options[0m
2025-04-04T18:16:08.4260342Z [0m    diffIndexes()[0m
2025-04-04T18:16:08.4460880Z     [32m  [32mâœ”[39m[0m[90m avoids trying to drop timeseries collections (gh-14984)[0m
2025-04-04T18:16:08.4489791Z [0m    insertOne() (gh-14843)[0m
2025-04-04T18:16:08.4606155Z     [32m  [32mâœ”[39m[0m[90m should insert a new document[0m
2025-04-04T18:16:08.4803224Z     [32m  [32mâœ”[39m[0m[90m should support validateBeforeSave: false option[0m
2025-04-04T18:16:08.4907375Z 
2025-04-04T18:16:08.4907888Z [0m  model translate aliases[0m
2025-04-04T18:16:08.4922408Z   [32m  [32mâœ”[39m[0m[90m should translate correctly[0m
2025-04-04T18:16:08.4922811Z 
2025-04-04T18:16:08.4924645Z [0m  model: updateOne:[0m
2025-04-04T18:16:08.5101231Z   [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:08.5231200Z   [32m  [32mâœ”[39m[0m[90m casts doc arrays[0m
2025-04-04T18:16:08.5347134Z   [32m  [32mâœ”[39m[0m[90m makes copy of conditions and update options[0m
2025-04-04T18:16:08.5561881Z   [32m  [32mâœ”[39m[0m[90m $addToSet with $ (gh-479)[0m
2025-04-04T18:16:08.5740327Z   [32m  [32mâœ”[39m[0m[90m works with nested positional notation[0m
2025-04-04T18:16:08.5949644Z   [32m  [32mâœ”[39m[0m[90m handles $pull with obj literal (gh-542)[0m
2025-04-04T18:16:08.6074852Z   [32m  [32mâœ”[39m[0m[90m handles $pull of obj literal and nested $in[0m
2025-04-04T18:16:08.6291900Z   [32m  [32mâœ”[39m[0m[90m handles $pull and nested $nin[0m
2025-04-04T18:16:08.6463571Z   [32m  [32mâœ”[39m[0m[90m updates numbers atomically[0m
2025-04-04T18:16:08.6629674Z   [32m  [32mâœ”[39m[0m[90m passes number of affected docs[0m
2025-04-04T18:16:08.6791599Z   [32m  [32mâœ”[39m[0m[90m updates a number to null (gh-640)[0m
2025-04-04T18:16:08.7012058Z   [32m  [32mâœ”[39m[0m[90m handles $pull from Mixed arrays (gh-735)[0m
2025-04-04T18:16:08.7234724Z   [32m  [32mâœ”[39m[0m[90m handles $push with $ positionals (gh-1057)[0m
2025-04-04T18:16:08.7502908Z   [32m  [32mâœ”[39m[0m[90m handles nested paths starting with numbers (gh-1062)[0m
2025-04-04T18:16:08.7859077Z   [32m  [32mâœ”[39m[0m[90m handles positional operators with referenced docs (gh-1572)[0m
2025-04-04T18:16:08.8177298Z   [32m  [32mâœ”[39m[0m[90m use .where for update condition (gh-2170)[0m
2025-04-04T18:16:08.8403573Z   [32m  [32mâœ”[39m[0m[90m casts empty arrays[0m
2025-04-04T18:16:08.8605276Z   [32m  [32mâœ”[39m[0m[90m successfully casts set with nested mixed objects (gh-2796)[0m
2025-04-04T18:16:08.8877174Z   [32m  [32mâœ”[39m[0m[90m handles empty update with promises (gh-2796)[0m
2025-04-04T18:16:08.8998332Z   [32m  [32mâœ”[39m[0m[90m works with undefined date (gh-2833)[0m
2025-04-04T18:16:08.9328949Z   [32m  [32mâœ”[39m[0m[90m does not add virtuals to update (gh-2046)[0m
2025-04-04T18:16:08.9451444Z   [32m  [32mâœ”[39m[0m[90m doesnt modify original argument doc (gh-3008)[0m
2025-04-04T18:16:08.9568970Z [0m    using last[0m
2025-04-04T18:16:08.9712245Z     [32m  [32mâœ”[39m[0m[90m handles date casting (gh-479)[0m
2025-04-04T18:16:08.9865965Z     [32m  [32mâœ”[39m[0m[90m handles $addToSet (gh-545)[0m
2025-04-04T18:16:09.0028323Z     [32m  [32mâœ”[39m[0m[90m handles $addToSet with $each (gh-545)[0m
2025-04-04T18:16:09.0161768Z     [32m  [32mâœ”[39m[0m[90m handles $pop and $unset (gh-574)[0m
2025-04-04T18:16:09.0183019Z [0m    mongodb 2.4 features[0m
2025-04-04T18:16:09.0371664Z     [32m  [32mâœ”[39m[0m[90m $setOnInsert operator[0m
2025-04-04T18:16:09.0671189Z     [32m  [32mâœ”[39m[0m[90m push with $slice[0m
2025-04-04T18:16:09.0693976Z [0m    mongodb 2.6 features[0m
2025-04-04T18:16:09.0937191Z     [32m  [32mâœ”[39m[0m[90m supports $position[0m
2025-04-04T18:16:09.1196817Z     [32m  [32mâœ”[39m[0m[90m supports $currentDate[0m
2025-04-04T18:16:09.1221283Z [0m    defaults and validators (gh-860)[0m
2025-04-04T18:16:09.1396713Z     [32m  [32mâœ”[39m[0m[90m applies defaults on upsert[0m
2025-04-04T18:16:09.1693628Z     [32m  [32mâœ”[39m[0m[90m avoids nested paths if setting parent path (gh-4911)[0m
2025-04-04T18:16:09.1907518Z     [32m  [32mâœ”[39m[0m[90m doesnt set default on upsert if query sets it[0m
2025-04-04T18:16:09.2172668Z     [32m  [32mâœ”[39m[0m[90m properly sets default on upsert if query wont set it[0m
2025-04-04T18:16:09.2453293Z     [32m  [32mâœ”[39m[0m[90m handles defaults on document arrays (gh-4456)[0m
2025-04-04T18:16:09.2584502Z     [32m  [32mâœ”[39m[0m[90m runs validators if theyre set[0m
2025-04-04T18:16:09.2823457Z     [32m  [32mâœ”[39m[0m[90m validators handle $unset and $setOnInsert[0m
2025-04-04T18:16:09.3058802Z     [32m  [32mâœ”[39m[0m[90m global validators option (gh-6578)[0m
2025-04-04T18:16:09.3240651Z     [32m  [32mâœ”[39m[0m[90m min/max, enum, and regex built-in validators work[0m
2025-04-04T18:16:09.3448349Z     [32m  [32mâœ”[39m[0m[90m multiple validation errors[0m
2025-04-04T18:16:09.3675131Z     [32m  [32mâœ”[39m[0m[90m validators ignore $inc[0m
2025-04-04T18:16:09.3898700Z     [32m  [32mâœ”[39m[0m[90m validators handle positional operator (gh-3167)[0m
2025-04-04T18:16:09.4121354Z     [32m  [32mâœ”[39m[0m[90m validators handle arrayFilters (gh-7536)[0m
2025-04-04T18:16:09.4390212Z     [32m  [32mâœ”[39m[0m[90m required and single nested (gh-4479)[0m
2025-04-04T18:16:09.4507346Z [0m    middleware[0m
2025-04-04T18:16:09.4730510Z     [32m  [32mâœ”[39m[0m[90m can specify pre and post hooks[0m
2025-04-04T18:16:09.4904044Z     [32m  [32mâœ”[39m[0m[90m runs before validators (gh-2706)[0m
2025-04-04T18:16:09.5026179Z [0m      objects and arrays[0m
2025-04-04T18:16:09.5136818Z       [32m  [32mâœ”[39m[0m[90m embedded objects (gh-2706)[0m
2025-04-04T18:16:09.5313410Z       [32m  [32mâœ”[39m[0m[90m handles document array validation (gh-2733)[0m
2025-04-04T18:16:09.5470687Z       [32m  [32mâœ”[39m[0m[90m validators on arrays (gh-3724)[0m
2025-04-04T18:16:09.5595534Z [0m    set() (gh-5770)[0m
2025-04-04T18:16:09.5806207Z     [32m  [32mâœ”[39m[0m[90m works with middleware and doesn't change the op[0m
2025-04-04T18:16:09.6030885Z     [32m  [32mâœ”[39m[0m[90m object syntax for path parameter[0m
2025-04-04T18:16:09.6054678Z [0m    bug fixes[0m
2025-04-04T18:16:09.6274314Z     [32m  [32mâœ”[39m[0m[90m can $rename (gh-1845)[0m
2025-04-04T18:16:09.6516714Z     [32m  [32mâœ”[39m[0m[90m throws CastError if $rename fails to cast to string (gh-1845)[0m
2025-04-04T18:16:09.6875306Z     [32m  [32mâœ”[39m[0m[90m allows objects with positional operator (gh-3185)[0m
2025-04-04T18:16:09.7135631Z     [32m  [32mâœ”[39m[0m[90m mixed type casting (gh-3305)[0m
2025-04-04T18:16:09.7462055Z     [32m  [32mâœ”[39m[0m[90m replaceOne[0m
2025-04-04T18:16:09.7672715Z     [32m  [32mâœ”[39m[0m[90m mixed nested type casting (gh-3337)[0m
2025-04-04T18:16:09.8009960Z     [32m  [32mâœ”[39m[0m[90m with single nested (gh-3820)[0m
2025-04-04T18:16:09.8284567Z     [32m  [32mâœ”[39m[0m[90m with single nested and transform (gh-4621)[0m
2025-04-04T18:16:09.8452729Z     [32m  [32mâœ”[39m[0m[90m works with buffers (gh-3496)[0m
2025-04-04T18:16:09.8775300Z     [32m  [32mâœ”[39m[0m[90m .updateOne(doc) (gh-3221)[0m
2025-04-04T18:16:09.8981449Z     [32m  [32mâœ”[39m[0m[90m middleware update with exec (gh-3549)[0m
2025-04-04T18:16:09.9161929Z     [32m  [32mâœ”[39m[0m[90m $push with buffer doesnt throw error (gh-3890)[0m
2025-04-04T18:16:09.9449239Z     [32m  [32mâœ”[39m[0m[90m $set with buffer (gh-3961)[0m
2025-04-04T18:16:09.9730789Z     [32m  [32mâœ”[39m[0m[90m versioning with setDefaultsOnInsert (gh-2593)[0m
2025-04-04T18:16:10.0407713Z     [32m  [32mâœ”[39m[0m[90m updates with timestamps with $set (gh-4989) (gh-7152)[0m[33m (54ms)[0m
2025-04-04T18:16:10.0619252Z     [32m  [32mâœ”[39m[0m[90m lets $currentDate go through with updatedAt (gh-5222)[0m
2025-04-04T18:16:10.0814978Z     [32m  [32mâœ”[39m[0m[90m update validators on single nested (gh-4332)[0m
2025-04-04T18:16:10.1131516Z     [32m  [32mâœ”[39m[0m[90m updates child schema timestamps with $push (gh-4049)[0m
2025-04-04T18:16:10.1428793Z     [32m  [32mâœ”[39m[0m[90m updates child schema timestamps with $set (gh-4049)[0m
2025-04-04T18:16:10.1592597Z     [32m  [32mâœ”[39m[0m[90m handles positional operator with timestamps (gh-4418)[0m
2025-04-04T18:16:10.1912463Z     [32m  [32mâœ”[39m[0m[90m push with timestamps (gh-4514)[0m
2025-04-04T18:16:10.2035054Z     [32m  [32mâœ”[39m[0m[90m addToSet (gh-4953)[0m
2025-04-04T18:16:10.2360690Z     [32m  [32mâœ”[39m[0m[90m overwrite with timestamps (gh-4054)[0m
2025-04-04T18:16:10.2563533Z     [32m  [32mâœ”[39m[0m[90m update with buffer and exec (gh-4609)[0m
2025-04-04T18:16:10.2839890Z     [32m  [32mâœ”[39m[0m[90m single nested with runValidators (gh-4420)[0m
2025-04-04T18:16:10.3110180Z     [32m  [32mâœ”[39m[0m[90m single nested under doc array with runValidators (gh-4960)[0m
2025-04-04T18:16:10.3323283Z     [32m  [32mâœ”[39m[0m[90m handles $set on document array in discriminator with runValidators (gh-12518)[0m
2025-04-04T18:16:10.3584579Z     [32m  [32mâœ”[39m[0m[90m single nested schema with geo (gh-4465)[0m
2025-04-04T18:16:10.3855938Z     [32m  [32mâœ”[39m[0m[90m runs validation on Mixed properties of embedded arrays during updates (gh-4441)[0m
2025-04-04T18:16:10.4153567Z     [32m  [32mâœ”[39m[0m[90m updating single nested doc property casts correctly (gh-4655)[0m
2025-04-04T18:16:10.4391931Z     [32m  [32mâœ”[39m[0m[90m findOneAndUpdate with nested arrays (gh-5032)[0m
2025-04-04T18:16:10.4664607Z     [32m  [32mâœ”[39m[0m[90m findOneAndUpdate with timestamps (gh-5045)[0m
2025-04-04T18:16:10.4829766Z     [32m  [32mâœ”[39m[0m[90m doesnt double-call setters when updating an array (gh-5041)[0m
2025-04-04T18:16:10.5137671Z     [32m  [32mâœ”[39m[0m[90m does not fail if passing whole doc (gh-5088)[0m
2025-04-04T18:16:10.5425031Z     [32m  [32mâœ”[39m[0m[90m does not fail if passing whole doc (gh-5111)[0m
2025-04-04T18:16:10.5651262Z     [32m  [32mâœ”[39m[0m[90m $pullAll with null (gh-5164)[0m
2025-04-04T18:16:10.5976634Z     [32m  [32mâœ”[39m[0m[90m $set array (gh-5403)[0m
2025-04-04T18:16:10.6187797Z     [32m  [32mâœ”[39m[0m[90m doesn't skip casting the query on nested arrays (gh-7098)[0m
2025-04-04T18:16:10.6497009Z     [32m  [32mâœ”[39m[0m[90m defaults with overwrite and no update validators (gh-5384)[0m
2025-04-04T18:16:10.6620910Z     [32m  [32mâœ”[39m[0m[90m update validators with nested required (gh-5269)[0m
2025-04-04T18:16:10.6859904Z     [32m  [32mâœ”[39m[0m[90m $push with updateValidators and top-level doc (gh-5430)[0m
2025-04-04T18:16:10.7246309Z     [32m  [32mâœ”[39m[0m[90m $pull with updateValidators (gh-5555)[0m
2025-04-04T18:16:10.7462332Z     [32m  [32mâœ”[39m[0m[90m $pull with updateValidators and $in (gh-5744)[0m
2025-04-04T18:16:10.7645172Z     [32m  [32mâœ”[39m[0m[90m $pull with updateValidators and required array (gh-6341)[0m
2025-04-04T18:16:10.8079290Z     [32m  [32mâœ”[39m[0m[90m update with Decimal type (gh-5361)[0m
2025-04-04T18:16:10.8311071Z     [32m  [32mâœ”[39m[0m[90m strict false in query (gh-5453)[0m
2025-04-04T18:16:10.8530716Z     [32m  [32mâœ”[39m[0m[90m replaceOne with buffer (gh-6124)[0m
2025-04-04T18:16:10.8651444Z     [32m  [32mâœ”[39m[0m[90m returns error if passing array as conditions (gh-3677)[0m
2025-04-04T18:16:10.8943026Z     [32m  [32mâœ”[39m[0m[90m upsert: 1 (gh-5839)[0m
2025-04-04T18:16:10.9215446Z     [32m  [32mâœ”[39m[0m[90m casting $addToSet without $each (gh-6086)[0m
2025-04-04T18:16:10.9474820Z     [32m  [32mâœ”[39m[0m[90m doesn't add $each when pushing an array into an array (gh-6768)[0m
2025-04-04T18:16:10.9751573Z     [32m  [32mâœ”[39m[0m[90m casting embedded discriminators if path specified in filter (gh-5841)[0m
2025-04-04T18:16:11.0041371Z     [32m  [32mâœ”[39m[0m[90m update with nested id (gh-5640)[0m
2025-04-04T18:16:11.0244090Z     [32m  [32mâœ”[39m[0m[90m $inc cast errors (gh-6770)[0m
2025-04-04T18:16:11.0459926Z     [32m  [32mâœ”[39m[0m[90m does not treat virtuals as an error for strict: throw (gh-6731)[0m
2025-04-04T18:16:11.0623693Z     [32m  [32mâœ”[39m[0m[90m cast error in update conditions (gh-5477)[0m
2025-04-04T18:16:11.0859271Z     [32m  [32mâœ”[39m[0m[90m single embedded schema under document array (gh-4519)[0m
2025-04-04T18:16:11.1197008Z     [32m  [32mâœ”[39m[0m[90m casts objects to array when clobbering with $set (gh-6532)[0m
2025-04-04T18:16:11.1237397Z 
2025-04-04T18:16:11.1238303Z [0m  model: updateOne: [0m
2025-04-04T18:16:11.1392511Z   [32m  [32mâœ”[39m[0m[90m updating a map (gh-7111)[0m
2025-04-04T18:16:11.1564258Z   [32m  [32mâœ”[39m[0m[90m updating a map path underneath a single nested subdoc (gh-9298)[0m
2025-04-04T18:16:11.1663447Z   [32m  [32mâœ”[39m[0m[90m overwrite an array with empty (gh-7135)[0m
2025-04-04T18:16:11.1919996Z   [32m  [32mâœ”[39m[0m[90m sets child timestamps even without $set (gh-7261)[0m
2025-04-04T18:16:11.2052173Z   [32m  [32mâœ”[39m[0m[90m supports discriminators if key is specified in conditions (gh-7843)[0m
2025-04-04T18:16:11.2339548Z   [32m  [32mâœ”[39m[0m[90m immutable createdAt (gh-7917)[0m
2025-04-04T18:16:11.2456971Z   [32m  [32mâœ”[39m[0m[90m overwriting immutable createdAt (gh-8619)[0m
2025-04-04T18:16:11.2606672Z   [32m  [32mâœ”[39m[0m[90m conditional immutable (gh-8001)[0m
2025-04-04T18:16:11.2721887Z   [32m  [32mâœ”[39m[0m[90m allow $pull with non-existent schema field (gh-8166)[0m
2025-04-04T18:16:11.2900974Z   [32m  [32mâœ”[39m[0m[90m update embedded discriminator path if key in $elemMatch (gh-8063)[0m
2025-04-04T18:16:11.3106686Z   [32m  [32mâœ”[39m[0m[90m moves $set of immutable properties to $setOnInsert (gh-8467) (gh-9537)[0m
2025-04-04T18:16:11.3209363Z   [32m  [32mâœ”[39m[0m[90m moves $set of immutable properties to $setOnInsert (gh-8951)[0m
2025-04-04T18:16:11.3392168Z   [32m  [32mâœ”[39m[0m[90m updates buffers with `runValidators` successfully (gh-8580)[0m
2025-04-04T18:16:11.3551493Z   [32m  [32mâœ”[39m[0m[90m allows overriding child strict mode with top-level strict (gh-8961)[0m
2025-04-04T18:16:11.3759239Z   [32m  [32mâœ”[39m[0m[90m handles timestamp properties in nested paths when overwriting parent path (gh-9105)[0m
2025-04-04T18:16:11.3808801Z   [32m  [32mâœ”[39m[0m[90m update validators respect storeSubdocValidationError (gh-9172)[0m
2025-04-04T18:16:11.3969643Z   [32m  [32mâœ”[39m[0m[90m handles spread docs (gh-9518)[0m
2025-04-04T18:16:11.4155428Z   [32m  [32mâœ”[39m[0m[90m works with doubly nested arrays with $pullAll (gh-13190)[0m
2025-04-04T18:16:11.4326572Z   [32m  [32mâœ”[39m[0m[90m should throw when matchedCount === 0 and using orFail() on the query gh-11620[0m
2025-04-04T18:16:11.4588637Z   [32m  [32mâœ”[39m[0m[90m updateOne with top level key that starts with $ (gh-13786)[0m
2025-04-04T18:16:11.4718464Z   [32m  [32mâœ”[39m[0m[90m works with update validators and single nested doc with numberic paths (gh-13977)[0m
2025-04-04T18:16:11.4835727Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators with $pull when discriminator key set in filter (gh-14675)[0m
2025-04-04T18:16:11.5017517Z   [32m  [32mâœ”[39m[0m[90m casts using overwritten discriminator key schema (gh-15051)[0m
2025-04-04T18:16:11.5091554Z [0m    mongodb 42 features[0m
2025-04-04T18:16:11.5266246Z     [32m  [32mâœ”[39m[0m[90m update pipeline (gh-8225)[0m
2025-04-04T18:16:11.5372925Z     [32m  [32mâœ”[39m[0m[90m update pipeline - $unset with string (gh-11106)[0m
2025-04-04T18:16:11.5585967Z     [32m  [32mâœ”[39m[0m[90m update pipeline timestamps (gh-8524)[0m
2025-04-04T18:16:11.5605396Z [0m    overwriteDiscriminatorKey[0m
2025-04-04T18:16:11.5749273Z     [32m  [32mâœ”[39m[0m[90m allows changing discriminator key in update (gh-6087)[0m
2025-04-04T18:16:11.6064554Z [0m    converts dot separated paths to nested structure (gh-10200)[0m
2025-04-04T18:16:11.6086613Z     [32m  [32mâœ”[39m[0m[90m works with new Model(...)[0m
2025-04-04T18:16:11.6238580Z     [32m  [32mâœ”[39m[0m[90m works with Model.create(...)[0m
2025-04-04T18:16:11.6411246Z     [32m  [32mâœ”[39m[0m[90m works with Model.updateOne(...)[0m
2025-04-04T18:16:11.6571874Z     [32m  [32mâœ”[39m[0m[90m works with Model.bulkWrite(...)[0m
2025-04-04T18:16:11.6663142Z 
2025-04-04T18:16:11.6663751Z [0m  model: validate: [0m
2025-04-04T18:16:11.6691935Z   [32m  [32mâœ”[39m[0m[90m Model.validate() (gh-7587)[0m
2025-04-04T18:16:11.6702703Z   [32m  [32mâœ”[39m[0m[90m Model.validate(...) validates paths in arrays (gh-8821)[0m
2025-04-04T18:16:11.6721651Z   [32m  [32mâœ”[39m[0m[90m Model.validate(...) respects discriminators (gh-12621)[0m
2025-04-04T18:16:11.6729607Z   [32m  [32mâœ”[39m[0m[90m Model.validate() works with arrays (gh-10669)[0m
2025-04-04T18:16:11.6736624Z   [32m  [32mâœ”[39m[0m[90m Model.validate(...) uses document instance as context by default (gh-10132)[0m
2025-04-04T18:16:11.6743404Z   [32m  [32mâœ”[39m[0m[90m Model.validate(...) uses object as context by default (gh-10346)[0m
2025-04-04T18:16:11.6755586Z   [32m  [32mâœ”[39m[0m[90m Model.validate(...) supports passing in an object, array or string (gh-10353)[0m
2025-04-04T18:16:11.6766115Z   [32m  [32mâœ”[39m[0m[90m runs validation on casted paths even if cast error happened[0m
2025-04-04T18:16:11.6766676Z 
2025-04-04T18:16:11.6767097Z [0m  model: watch: [0m
2025-04-04T18:16:11.6767567Z [0m    with buffering[0m
2025-04-04T18:16:11.6768999Z     [36m  - watch() before connecting (gh-5964)[0m
2025-04-04T18:16:11.6770071Z     [36m  - watch() close() prevents buffered watch op from running (gh-7022)[0m
2025-04-04T18:16:11.6770897Z     [36m  - watch() close() closes the stream (gh-7022)[0m
2025-04-04T18:16:11.6771194Z 
2025-04-04T18:16:11.6771556Z [0m  is compatible with object created using Object.create(null) (gh-1484)[0m
2025-04-04T18:16:11.6803026Z   [32m  [32mâœ”[39m[0m[90m during construction[0m
2025-04-04T18:16:11.6818363Z   [32m  [32mâœ”[39m[0m[90m with .set(path, obj)[0m
2025-04-04T18:16:11.6830975Z   [32m  [32mâœ”[39m[0m[90m with schema[0m
2025-04-04T18:16:11.6848781Z 
2025-04-04T18:16:11.6849398Z [0m  parallelLimit[0m
2025-04-04T18:16:11.6850861Z   [32m  [32mâœ”[39m[0m[90m works with zero functions[0m
2025-04-04T18:16:11.7871417Z   [32m  [32mâœ”[39m[0m[90m executes functions in parallel[0m[31m (101ms)[0m
2025-04-04T18:16:11.7871932Z 
2025-04-04T18:16:11.7872170Z [0m  id virtual getter[0m
2025-04-04T18:16:11.7906942Z   [32m  [32mâœ”[39m[0m[90m should work as expected with an ObjectId[0m
2025-04-04T18:16:11.8000520Z   [32m  [32mâœ”[39m[0m[90m should be turned off when `id` option is set to false[0m
2025-04-04T18:16:11.8189914Z   [32m  [32mâœ”[39m[0m[90m should be turned off when the schema has a set `id` path[0m
2025-04-04T18:16:11.8292988Z 
2025-04-04T18:16:11.8294124Z [0m  QueryCursor[0m
2025-04-04T18:16:11.8483535Z   [32m  [32mâœ”[39m[0m[90m as readable stream[0m
2025-04-04T18:16:11.8680042Z   [32m  [32mâœ”[39m[0m[90m handles non-boolean lean option (gh-7137)[0m
2025-04-04T18:16:11.9011885Z   [32m  [32mâœ”[39m[0m[90m data before close (gh-4998)[0m
2025-04-04T18:16:11.9190786Z   [32m  [32mâœ”[39m[0m[90m pulls schema-level readPreference (gh-8421)[0m
2025-04-04T18:16:12.0578425Z   [32m  [32mâœ”[39m[0m[90m eachAsync() with parallel > numDocs (gh-8422)[0m[31m (119ms)[0m
2025-04-04T18:16:12.0941209Z   [32m  [32mâœ”[39m[0m[90m eachAsync() with sort, parallel, and sync function (gh-8557)[0m
2025-04-04T18:16:12.1302009Z   [32m  [32mâœ”[39m[0m[90m closing query cursor emits `close` event only once (gh-8835)[0m
2025-04-04T18:16:12.1666915Z   [32m  [32mâœ”[39m[0m[90m closing aggregation cursor emits `close` event only once (gh-8835)[0m
2025-04-04T18:16:12.3959087Z   [32m  [32mâœ”[39m[0m[90m closing query cursor emits `close` event only once with stream pause/resume (gh-10876)[0m[31m (213ms)[0m
2025-04-04T18:16:12.6256069Z   [32m  [32mâœ”[39m[0m[90m closing aggregation cursor emits `close` event only once with stream pause/resume (gh-10876)[0m[31m (213ms)[0m
2025-04-04T18:16:12.8529342Z   [32m  [32mâœ”[39m[0m[90m query cursor emit end event (gh-10902)[0m[31m (212ms)[0m
2025-04-04T18:16:13.0807013Z   [32m  [32mâœ”[39m[0m[90m aggregate cursor emit end event (gh-10902)[0m[31m (213ms)[0m
2025-04-04T18:16:13.1598431Z   [32m  [32mâœ”[39m[0m[90m query cursor emit end event before close event (gh-10902)[0m[33m (63ms)[0m
2025-04-04T18:16:13.2384971Z   [32m  [32mâœ”[39m[0m[90m aggregate cursor emit end event before close event (gh-10902)[0m[33m (64ms)[0m
2025-04-04T18:16:13.2722913Z   [32m  [32mâœ”[39m[0m[90m passes document index as the second argument for query cursor (gh-8972)[0m
2025-04-04T18:16:13.3139875Z   [32m  [32mâœ”[39m[0m[90m passes document index as the second argument for aggregation cursor (gh-8972)[0m
2025-04-04T18:16:13.3460300Z   [32m  [32mâœ”[39m[0m[90m post hooks (gh-9435)[0m
2025-04-04T18:16:13.3770319Z   [32m  [32mâœ”[39m[0m[90m reports CastError with noCursorTimeout set (gh-10150)[0m
2025-04-04T18:16:13.4185101Z   [32m  [32mâœ”[39m[0m[90m reports error in pre save hook (gh-10785)[0m
2025-04-04T18:16:13.4536094Z   [32m  [32mâœ”[39m[0m[90m applies selected fields when using discriminators (gh-11130)[0m
2025-04-04T18:16:13.4835046Z   [32m  [32mâœ”[39m[0m[90m should allow middleware to run before applying _optionsForExec() gh-13417[0m
2025-04-04T18:16:13.5137051Z   [32m  [32mâœ”[39m[0m[90m handles skipMiddlewareFunction() (gh-13411)[0m
2025-04-04T18:16:13.5312169Z   [32m  [32mâœ”[39m[0m[90m supports including fields using plus path that have select: false in schema (gh-13773)[0m
2025-04-04T18:16:13.5619836Z   [32m  [32mâœ”[39m[0m[90m throws if calling skipMiddlewareFunction() with non-empty array (gh-13411)[0m
2025-04-04T18:16:13.5934746Z   [32m  [32mâœ”[39m[0m[90m returns the underlying Node driver cursor with getDriverCursor()[0m
2025-04-04T18:16:13.6089682Z   [32m  [32mâœ”[39m[0m[90m handles destroy() (gh-14966)[0m
2025-04-04T18:16:13.6242401Z   [32m  [32mâœ”[39m[0m[90m handles destroy() before cursor is created (gh-14966)[0m
2025-04-04T18:16:13.6264352Z [0m    #next()[0m
2025-04-04T18:16:13.6406475Z     [32m  [32mâœ”[39m[0m[90m with promises[0m
2025-04-04T18:16:13.6555617Z     [32m  [32mâœ”[39m[0m[90m with limit (gh-4266)[0m
2025-04-04T18:16:13.6838844Z     [32m  [32mâœ”[39m[0m[90m with projection[0m
2025-04-04T18:16:13.7013336Z     [32m  [32mâœ”[39m[0m[90m casting ObjectIds with where() (gh-4355)[0m
2025-04-04T18:16:13.7164360Z     [32m  [32mâœ”[39m[0m[90m cast errors (gh-4355)[0m
2025-04-04T18:16:13.7328727Z     [32m  [32mâœ”[39m[0m[90m with pre-find hooks (gh-5096)[0m
2025-04-04T18:16:13.7347090Z [0m      with populate[0m
2025-04-04T18:16:13.7867071Z       [32m  [32mâœ”[39m[0m[90m with populate without specify batchSize[0m
2025-04-04T18:16:13.8434048Z       [32m  [32mâœ”[39m[0m[90m with populate using custom batchSize[0m
2025-04-04T18:16:13.8468673Z [0m    `transform` option[0m
2025-04-04T18:16:13.8606095Z     [32m  [32mâœ”[39m[0m[90m transforms document[0m
2025-04-04T18:16:13.8625952Z [0m    #map[0m
2025-04-04T18:16:13.8759095Z     [32m  [32mâœ”[39m[0m[90m maps documents[0m
2025-04-04T18:16:13.8922801Z     [32m  [32mâœ”[39m[0m[90m with #next[0m
2025-04-04T18:16:13.8944647Z [0m    #eachAsync()[0m
2025-04-04T18:16:14.0079120Z     [32m  [32mâœ”[39m[0m[90m iterates one-by-one, stopping for promises[0m[31m (101ms)[0m
2025-04-04T18:16:14.0248129Z     [32m  [32mâœ”[39m[0m[90m parallelization[0m
2025-04-04T18:16:14.0269522Z [0m    #lean()[0m
2025-04-04T18:16:14.0404815Z     [32m  [32mâœ”[39m[0m[90m lean[0m
2025-04-04T18:16:14.0555204Z     [32m  [32mâœ”[39m[0m[90m lean = false (gh-7197)[0m
2025-04-04T18:16:14.0574078Z [0m    #close()[0m
2025-04-04T18:16:14.0707988Z     [32m  [32mâœ”[39m[0m[90m works (gh-4258)[0m
2025-04-04T18:16:14.0753052Z 
2025-04-04T18:16:14.0753678Z [0m  query middleware[0m
2025-04-04T18:16:14.0908332Z   [32m  [32mâœ”[39m[0m[90m has a pre find hook[0m
2025-04-04T18:16:14.1122272Z   [32m  [32mâœ”[39m[0m[90m has post find hooks[0m
2025-04-04T18:16:14.1291796Z   [32m  [32mâœ”[39m[0m[90m works when using a chained query builder[0m
2025-04-04T18:16:14.1461070Z   [32m  [32mâœ”[39m[0m[90m has separate pre-findOne() and post-findOne() hooks[0m
2025-04-04T18:16:14.1639000Z   [32m  [32mâœ”[39m[0m[90m with regular expression (gh-6680)[0m
2025-04-04T18:16:14.1822044Z   [32m  [32mâœ”[39m[0m[90m can populate in pre hook[0m
2025-04-04T18:16:14.2008239Z   [32m  [32mâœ”[39m[0m[90m can populate in post hook[0m
2025-04-04T18:16:14.2171744Z   [32m  [32mâœ”[39m[0m[90m has hooks for countDocuments()[0m
2025-04-04T18:16:14.2332178Z   [32m  [32mâœ”[39m[0m[90m has hooks for estimatedDocumentCount()[0m
2025-04-04T18:16:14.2519395Z   [32m  [32mâœ”[39m[0m[90m updateOne() (gh-3997)[0m
2025-04-04T18:16:14.2696135Z   [32m  [32mâœ”[39m[0m[90m updateMany() (gh-3997)[0m
2025-04-04T18:16:14.2875129Z   [32m  [32mâœ”[39m[0m[90m deleteOne() (gh-7195)[0m
2025-04-04T18:16:14.3035172Z   [32m  [32mâœ”[39m[0m[90m deleteMany() (gh-7195)[0m
2025-04-04T18:16:14.3229387Z   [32m  [32mâœ”[39m[0m[90m distinct (gh-5938)[0m
2025-04-04T18:16:14.3339298Z   [32m  [32mâœ”[39m[0m[90m error handlers (gh-2284)[0m
2025-04-04T18:16:14.3370262Z   [32m  [32mâœ”[39m[0m[90m error handlers for validate (gh-4885)[0m
2025-04-04T18:16:14.3498123Z   [32m  [32mâœ”[39m[0m[90m error handlers with findOneAndUpdate and passRawResult (gh-4836)[0m
2025-04-04T18:16:14.3589147Z   [32m  [32mâœ”[39m[0m[90m error handlers with findOneAndUpdate error and passRawResult (gh-4836)[0m
2025-04-04T18:16:14.3655346Z   [32m  [32mâœ”[39m[0m[90m error handlers with error from pre hook (gh-4927)[0m
2025-04-04T18:16:14.3731810Z   [32m  [32mâœ”[39m[0m[90m with clone() (gh-5153)[0m
2025-04-04T18:16:14.3796529Z   [32m  [32mâœ”[39m[0m[90m doesnt double call post(regexp) with updateOne (gh-7418)[0m
2025-04-04T18:16:14.3938755Z   [32m  [32mâœ”[39m[0m[90m deleteOne with `document: true` but no `query` (gh-8555)[0m
2025-04-04T18:16:14.4123421Z   [32m  [32mâœ”[39m[0m[90m allows registering middleware for all queries with regexp (gh-9190)[0m
2025-04-04T18:16:14.4152496Z   [32m  [32mâœ”[39m[0m[90m allows skipping the wrapped function with `skipMiddlewareFunction()` (gh-11426)[0m
2025-04-04T18:16:14.4296818Z   [32m  [32mâœ”[39m[0m[90m allows overwriting result with `overwriteMiddlewareResult()` (gh-11426)[0m
2025-04-04T18:16:14.4399445Z 
2025-04-04T18:16:14.4403537Z [0m  Query[0m
2025-04-04T18:16:14.4512299Z   [32m  [32mâœ”[39m[0m[90m transform (gh-14236) (gh-7142)[0m
2025-04-04T18:16:14.4799183Z   [32m  [32mâœ”[39m[0m[90m allows skipping timestamps in updateOne() (gh-6980)[0m
2025-04-04T18:16:14.5130941Z   [32m  [32mâœ”[39m[0m[90m increments timestamps for nested subdocs (gh-4412)[0m
2025-04-04T18:16:14.5254507Z   [32m  [32mâœ”[39m[0m[90m strictQuery option (gh-4136) (gh-7178)[0m
2025-04-04T18:16:14.5287830Z   [32m  [32mâœ”[39m[0m[90m strictQuery does not inherit from strict (gh-11861)[0m
2025-04-04T18:16:14.5433607Z   [32m  [32mâœ”[39m[0m[90m strictQuery is false by default (gh-11861)[0m
2025-04-04T18:16:14.5530061Z   [32m  [32mâœ”[39m[0m[90m strictQuery = true (gh-6032)[0m
2025-04-04T18:16:14.5713560Z   [32m  [32mâœ”[39m[0m[90m function defaults run after query result is inited (gh-7182)[0m
2025-04-04T18:16:14.5816159Z   [32m  [32mâœ”[39m[0m[90m merging objectids with where() (gh-7360)[0m
2025-04-04T18:16:14.6089589Z   [32m  [32mâœ”[39m[0m[90m maxTimeMS() (gh-7254)[0m
2025-04-04T18:16:14.6349745Z   [32m  [32mâœ”[39m[0m[90m connection-level maxTimeMS() (gh-4066)[0m
2025-04-04T18:16:14.6557445Z   [32m  [32mâœ”[39m[0m[90m mongoose-level maxTimeMS() (gh-4066)[0m
2025-04-04T18:16:14.6658574Z   [32m  [32mâœ”[39m[0m[90m query with top-level _bsontype (gh-8222) (gh-8268)[0m
2025-04-04T18:16:14.6841657Z   [32m  [32mâœ”[39m[0m[90m casts $elemMatch with dbrefs (gh-8577)[0m
2025-04-04T18:16:14.6878977Z   [32m  [32mâœ”[39m[0m[90m throws an error if executed multiple times (gh-7398)[0m
2025-04-04T18:16:14.6937304Z   [32m  [32mâœ”[39m[0m[90m setter priorVal (gh-8629)[0m
2025-04-04T18:16:14.7114440Z   [32m  [32mâœ”[39m[0m[90m casts filter according to discriminator schema if in filter (gh-8881)[0m
2025-04-04T18:16:14.7400876Z   [32m  [32mâœ”[39m[0m[90m casts update object according to child discriminator schema when `discriminatorKey` is present (gh-8982)[0m
2025-04-04T18:16:14.7655717Z   [32m  [32mâœ”[39m[0m[90m allows disabling `setDefaultsOnInsert` (gh-8410)[0m
2025-04-04T18:16:14.7687265Z   [32m  [32mâœ”[39m[0m[90m throws readable error if `$and` and `$or` contain non-objects (gh-8948)[0m
2025-04-04T18:16:14.7874613Z   [32m  [32mâœ”[39m[0m[90m includes `undefined` in filters (gh-3944)[0m
2025-04-04T18:16:14.8034980Z   [32m  [32mâœ”[39m[0m[90m handles push with array filters (gh-9977)[0m
2025-04-04T18:16:14.8078751Z   [32m  [32mâœ”[39m[0m[90m Query#pre() (gh-9784)[0m
2025-04-04T18:16:14.8140128Z   [32m  [32mâœ”[39m[0m[90m applies schema-level `select` on arrays (gh-10029)[0m
2025-04-04T18:16:14.8206651Z   [32m  [32mâœ”[39m[0m[90m sets `writeConcern` option correctly (gh-10009)[0m
2025-04-04T18:16:14.8393840Z   [32m  [32mâœ”[39m[0m[90m no longer has the deprecation warning message with writeConcern gh-10083[0m
2025-04-04T18:16:14.8426128Z   [32m  [32mâœ”[39m[0m[90m sanitizeProjection option (gh-10243)[0m
2025-04-04T18:16:14.8666115Z   [32m  [32mâœ”[39m[0m[90m sanitizeProjection option with plus paths (gh-14333) (gh-10243)[0m
2025-04-04T18:16:14.8700991Z   [32m  [32mâœ”[39m[0m[90m sanitizeFilter option (gh-3944)[0m
2025-04-04T18:16:14.8771310Z   [32m  [32mâœ”[39m[0m[90m sanitizeFilter disables implicit $in (gh-14657)[0m
2025-04-04T18:16:14.8954162Z   [32m  [32mâœ”[39m[0m[90m should not error when $not is used with $size (gh-10716)[0m
2025-04-04T18:16:14.9252246Z   [32m  [32mâœ”[39m[0m[90m should not error when $not is used on an array of strings (gh-11467)[0m
2025-04-04T18:16:14.9367015Z   [32m  [32mâœ”[39m[0m[90m adding `exec` option does not affect the query (gh-11416)[0m
2025-04-04T18:16:14.9539909Z   [32m  [32mâœ”[39m[0m[90m handles queries with EJSON deserialized RegExps (gh-11597)[0m
2025-04-04T18:16:14.9643383Z   [32m  [32mâœ”[39m[0m[90m should return query helper supplied in schema options query property instead of undefined[0m
2025-04-04T18:16:14.9810484Z   [32m  [32mâœ”[39m[0m[90m allows a transform option for lean on a query (gh-10423)[0m
2025-04-04T18:16:15.0043974Z   [32m  [32mâœ”[39m[0m[90m handles a lean transform that deletes _id with populate (gh-12143) (gh-10423)[0m
2025-04-04T18:16:15.0150732Z   [32m  [32mâœ”[39m[0m[90m skips applying default projections over slice projections (gh-11940)[0m
2025-04-04T18:16:15.0358173Z   [32m  [32mâœ”[39m[0m[90m translateAliases option (gh-7511)[0m
2025-04-04T18:16:15.0456550Z   [32m  [32mâœ”[39m[0m[90m translateAliases throws error on conflicting properties (gh-7511)[0m
2025-04-04T18:16:15.0634264Z   [32m  [32mâœ”[39m[0m[90m translateAliases applies before casting (gh-14521) (gh-7511)[0m
2025-04-04T18:16:15.0750013Z   [32m  [32mâœ”[39m[0m[90m schema level translateAliases option (gh-7511)[0m
2025-04-04T18:16:15.0849810Z   [32m  [32mâœ”[39m[0m[90m select: false is ignored for type Map (gh-12445)[0m
2025-04-04T18:16:15.1040915Z   [32m  [32mâœ”[39m[0m[90m Map field with select: false is selected when explicitly requested (gh-12603)[0m
2025-04-04T18:16:15.1067078Z   [32m  [32mâœ”[39m[0m[90m treats ObjectId as object with `_id` for `merge()` (gh-12325)[0m
2025-04-04T18:16:15.1240533Z   [32m  [32mâœ”[39m[0m[90m avoid throwing error when modifying nested field with same name as discriminator key (gh-12517)[0m
2025-04-04T18:16:15.1521317Z   [32m  [32mâœ”[39m[0m[90m avoid throwing error when modifying field with same name as nested discriminator key (gh-12517)[0m
2025-04-04T18:16:15.1839110Z   [32m  [32mâœ”[39m[0m[90m global strictQuery should work if applied after schema creation (gh-12703)[0m
2025-04-04T18:16:15.1982398Z   [32m  [32mâœ”[39m[0m[90m update operation should not remove fields set to undefined (gh-12930)[0m
2025-04-04T18:16:15.2091830Z   [32m  [32mâœ”[39m[0m[90m handles $elemMatch with nested schema (gh-12902)[0m
2025-04-04T18:16:15.2170477Z   [32m  [32mâœ”[39m[0m[90m merges $and, $or conditions (gh-12944)[0m
2025-04-04T18:16:15.2236524Z   [32m  [32mâœ”[39m[0m[90m shallow clones $and, $or if merging with empty filter (gh-14567) (gh-12944)[0m
2025-04-04T18:16:15.2390049Z   [32m  [32mâœ”[39m[0m[90m should avoid sending empty session to MongoDB server (gh-13052)[0m
2025-04-04T18:16:15.2520898Z   [32m  [32mâœ”[39m[0m[90m should avoid sending empty projection to MongoDB server (gh-13065)[0m
2025-04-04T18:16:15.2572909Z   [32m  [32mâœ”[39m[0m[90m should provide a clearer error message when sorting with empty string[0m
2025-04-04T18:16:15.2714889Z   [32m  [32mâœ”[39m[0m[90m allows executing a find() with a subdocument with defaults disabled (gh-13512)[0m
2025-04-04T18:16:15.2875438Z   [32m  [32mâœ”[39m[0m[90m throws a readable error when executing Query instance without a model (gh-13570)[0m
2025-04-04T18:16:15.2983963Z   [32m  [32mâœ”[39m[0m[90m throws a readable error when executing Query instance without an op (gh-13570)[0m
2025-04-04T18:16:15.3123037Z   [32m  [32mâœ”[39m[0m[90m allows deselecting discriminator key (gh-13760) (gh-13679)[0m
2025-04-04T18:16:15.3462994Z   [32m  [32mâœ”[39m[0m[90m does not apply sibling path defaults if using nested projection (gh-14115)[0m
2025-04-04T18:16:15.3496492Z   [32m  [32mâœ”[39m[0m[90m allows overriding sort (gh-14365)[0m
2025-04-04T18:16:15.3639202Z   [32m  [32mâœ”[39m[0m[90m avoids mutating user-provided query selectors (gh-14567)[0m
2025-04-04T18:16:15.3728389Z   [32m  [32mâœ”[39m[0m[90m avoids mutating $or, $and elements when casting (gh-14610)[0m
2025-04-04T18:16:15.3776469Z [0m    constructor[0m
2025-04-04T18:16:15.3778688Z     [32m  [32mâœ”[39m[0m[90m should not corrupt options[0m
2025-04-04T18:16:15.3792030Z [0m    select[0m
2025-04-04T18:16:15.3794088Z     [32m  [32mâœ”[39m[0m[90m (object)[0m
2025-04-04T18:16:15.3808067Z     [32m  [32mâœ”[39m[0m[90m (string)[0m
2025-04-04T18:16:15.3822203Z     [32m  [32mâœ”[39m[0m[90m ("a","b","c")[0m
2025-04-04T18:16:15.3836768Z     [32m  [32mâœ”[39m[0m[90m should not overwrite fields set in prior calls[0m
2025-04-04T18:16:15.3851359Z     [32m  [32mâœ”[39m[0m[90m should remove existing fields from inclusive projection[0m
2025-04-04T18:16:15.3865691Z     [32m  [32mâœ”[39m[0m[90m should remove existing fields from exclusive projection[0m
2025-04-04T18:16:15.3878411Z [0m    projection() (gh-7384)[0m
2025-04-04T18:16:15.3880175Z     [32m  [32mâœ”[39m[0m[90m gets current projection[0m
2025-04-04T18:16:15.3894279Z     [32m  [32mâœ”[39m[0m[90m overwrites current projection[0m
2025-04-04T18:16:15.3907201Z [0m    where[0m
2025-04-04T18:16:15.3909496Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:15.3924062Z     [32m  [32mâœ”[39m[0m[90m throws if non-string or non-object path is passed[0m
2025-04-04T18:16:15.3938178Z     [32m  [32mâœ”[39m[0m[90m does not throw when 0 args passed[0m
2025-04-04T18:16:15.3950716Z [0m    equals[0m
2025-04-04T18:16:15.3952165Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:15.3965399Z [0m    gte[0m
2025-04-04T18:16:15.3967184Z     [32m  [32mâœ”[39m[0m[90m with 2 args[0m
2025-04-04T18:16:15.3982273Z     [32m  [32mâœ”[39m[0m[90m with 1 arg[0m
2025-04-04T18:16:15.3995137Z [0m    gt[0m
2025-04-04T18:16:15.3997695Z     [32m  [32mâœ”[39m[0m[90m with 1 arg[0m
2025-04-04T18:16:15.4029247Z     [32m  [32mâœ”[39m[0m[90m with 2 args[0m
2025-04-04T18:16:15.4042610Z [0m    lte[0m
2025-04-04T18:16:15.4044781Z     [32m  [32mâœ”[39m[0m[90m with 1 arg[0m
2025-04-04T18:16:15.4059297Z     [32m  [32mâœ”[39m[0m[90m with 2 args[0m
2025-04-04T18:16:15.4072857Z [0m    lt[0m
2025-04-04T18:16:15.4074713Z     [32m  [32mâœ”[39m[0m[90m with 1 arg[0m
2025-04-04T18:16:15.4091135Z     [32m  [32mâœ”[39m[0m[90m with 2 args[0m
2025-04-04T18:16:15.4107261Z [0m    combined[0m
2025-04-04T18:16:15.4107721Z [0m      lt and gt[0m
2025-04-04T18:16:15.4109286Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:15.4124375Z [0m    tl on one path and gt on another[0m
2025-04-04T18:16:15.4126140Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:15.4140865Z [0m    ne[0m
2025-04-04T18:16:15.4142574Z     [32m  [32mâœ”[39m[0m[90m with 1 arg[0m
2025-04-04T18:16:15.4158970Z     [32m  [32mâœ”[39m[0m[90m with 2 args[0m
2025-04-04T18:16:15.4173529Z [0m    in[0m
2025-04-04T18:16:15.4175343Z     [32m  [32mâœ”[39m[0m[90m with 1 arg[0m
2025-04-04T18:16:15.4190384Z     [32m  [32mâœ”[39m[0m[90m with 2 args[0m
2025-04-04T18:16:15.4204735Z     [32m  [32mâœ”[39m[0m[90m where a non-array value no via where[0m
2025-04-04T18:16:15.4219000Z     [32m  [32mâœ”[39m[0m[90m where a non-array value via where[0m
2025-04-04T18:16:15.4232208Z [0m    nin[0m
2025-04-04T18:16:15.4233857Z     [32m  [32mâœ”[39m[0m[90m with 1 arg[0m
2025-04-04T18:16:15.4248193Z     [32m  [32mâœ”[39m[0m[90m with 2 args[0m
2025-04-04T18:16:15.4262218Z     [32m  [32mâœ”[39m[0m[90m with a non-array value not via where[0m
2025-04-04T18:16:15.4276249Z     [32m  [32mâœ”[39m[0m[90m with a non-array value via where[0m
2025-04-04T18:16:15.4289105Z [0m    mod[0m
2025-04-04T18:16:15.4291986Z     [32m  [32mâœ”[39m[0m[90m not via where, where [a, b] param[0m
2025-04-04T18:16:15.4307745Z     [32m  [32mâœ”[39m[0m[90m not via where, where a and b params[0m
2025-04-04T18:16:15.4323227Z     [32m  [32mâœ”[39m[0m[90m via where, where [a, b] param[0m
2025-04-04T18:16:15.4339147Z     [32m  [32mâœ”[39m[0m[90m via where, where a and b params[0m
2025-04-04T18:16:15.4353746Z [0m    near[0m
2025-04-04T18:16:15.4356500Z     [32m  [32mâœ”[39m[0m[90m via where, where { center :[lat, long]} param[0m
2025-04-04T18:16:15.4373503Z     [32m  [32mâœ”[39m[0m[90m via where, where [lat, long] param[0m
2025-04-04T18:16:15.4390315Z     [32m  [32mâœ”[39m[0m[90m via where, where lat and long params[0m
2025-04-04T18:16:15.4406928Z     [32m  [32mâœ”[39m[0m[90m not via where, where [lat, long] param[0m
2025-04-04T18:16:15.4423430Z     [32m  [32mâœ”[39m[0m[90m not via where, where lat and long params[0m
2025-04-04T18:16:15.4445059Z     [32m  [32mâœ”[39m[0m[90m via where, where GeoJSON param[0m
2025-04-04T18:16:15.4516440Z     [32m  [32mâœ”[39m[0m[90m with path, where GeoJSON param[0m
2025-04-04T18:16:15.4528423Z [0m    nearSphere[0m
2025-04-04T18:16:15.4530596Z     [32m  [32mâœ”[39m[0m[90m via where, where [lat, long] param[0m
2025-04-04T18:16:15.4545554Z     [32m  [32mâœ”[39m[0m[90m via where, where lat and long params[0m
2025-04-04T18:16:15.4562461Z     [32m  [32mâœ”[39m[0m[90m not via where, where [lat, long] param[0m
2025-04-04T18:16:15.4576522Z     [32m  [32mâœ”[39m[0m[90m not via where, where lat and long params[0m
2025-04-04T18:16:15.4589803Z     [32m  [32mâœ”[39m[0m[90m via where, with object[0m
2025-04-04T18:16:15.4605383Z     [32m  [32mâœ”[39m[0m[90m via where, where GeoJSON param[0m
2025-04-04T18:16:15.4670670Z     [32m  [32mâœ”[39m[0m[90m with path, with GeoJSON[0m
2025-04-04T18:16:15.4731086Z [0m    maxDistance[0m
2025-04-04T18:16:15.4733987Z     [32m  [32mâœ”[39m[0m[90m via where[0m
2025-04-04T18:16:15.4747134Z [0m    within[0m
2025-04-04T18:16:15.4750419Z [0m      box[0m
2025-04-04T18:16:15.4750729Z       [32m  [32mâœ”[39m[0m[90m via where[0m
2025-04-04T18:16:15.4764507Z       [32m  [32mâœ”[39m[0m[90m via where, no object[0m
2025-04-04T18:16:15.4777190Z [0m      center[0m
2025-04-04T18:16:15.4779885Z       [32m  [32mâœ”[39m[0m[90m via where[0m
2025-04-04T18:16:15.4792560Z [0m      centerSphere[0m
2025-04-04T18:16:15.4795417Z       [32m  [32mâœ”[39m[0m[90m via where[0m
2025-04-04T18:16:15.4811220Z [0m      polygon[0m
2025-04-04T18:16:15.4813699Z       [32m  [32mâœ”[39m[0m[90m via where[0m
2025-04-04T18:16:15.4828563Z [0m    exists[0m
2025-04-04T18:16:15.4830674Z     [32m  [32mâœ”[39m[0m[90m 0 args via where[0m
2025-04-04T18:16:15.4846462Z     [32m  [32mâœ”[39m[0m[90m 1 arg via where[0m
2025-04-04T18:16:15.4861873Z     [32m  [32mâœ”[39m[0m[90m where 1 argument not via where[0m
2025-04-04T18:16:15.4877328Z     [32m  [32mâœ”[39m[0m[90m where 2 args not via where[0m
2025-04-04T18:16:15.4892382Z [0m    all[0m
2025-04-04T18:16:15.4894327Z     [32m  [32mâœ”[39m[0m[90m via where[0m
2025-04-04T18:16:15.4910060Z     [32m  [32mâœ”[39m[0m[90m not via where[0m
2025-04-04T18:16:15.4924721Z [0m    find[0m
2025-04-04T18:16:15.4926953Z     [32m  [32mâœ”[39m[0m[90m strict array equivalence condition v[0m
2025-04-04T18:16:15.4942755Z     [32m  [32mâœ”[39m[0m[90m with no args[0m
2025-04-04T18:16:15.4958741Z     [32m  [32mâœ”[39m[0m[90m works with overwriting previous object args (1176)[0m
2025-04-04T18:16:15.4974917Z [0m    size[0m
2025-04-04T18:16:15.4976885Z     [32m  [32mâœ”[39m[0m[90m via where[0m
2025-04-04T18:16:15.4992367Z     [32m  [32mâœ”[39m[0m[90m not via where[0m
2025-04-04T18:16:15.5006904Z [0m    slice[0m
2025-04-04T18:16:15.5008859Z     [32m  [32mâœ”[39m[0m[90m where and positive limit param[0m
2025-04-04T18:16:15.5024380Z     [32m  [32mâœ”[39m[0m[90m where just negative limit param[0m
2025-04-04T18:16:15.5039848Z     [32m  [32mâœ”[39m[0m[90m where [skip, limit] param[0m
2025-04-04T18:16:15.5055083Z     [32m  [32mâœ”[39m[0m[90m where skip and limit params[0m
2025-04-04T18:16:15.5070366Z     [32m  [32mâœ”[39m[0m[90m where just positive limit param[0m
2025-04-04T18:16:15.5085386Z     [32m  [32mâœ”[39m[0m[90m where just negative limit param[0m
2025-04-04T18:16:15.5100901Z     [32m  [32mâœ”[39m[0m[90m where the [skip, limit] param[0m
2025-04-04T18:16:15.5116194Z     [32m  [32mâœ”[39m[0m[90m where the skip and limit params[0m
2025-04-04T18:16:15.5131552Z     [32m  [32mâœ”[39m[0m[90m not via where, with just positive limit param[0m
2025-04-04T18:16:15.5146697Z     [32m  [32mâœ”[39m[0m[90m not via where, where just negative limit param[0m
2025-04-04T18:16:15.5172193Z     [32m  [32mâœ”[39m[0m[90m not via where, where [skip, limit] param[0m
2025-04-04T18:16:15.5187215Z     [32m  [32mâœ”[39m[0m[90m not via where, where skip and limit params[0m
2025-04-04T18:16:15.5201170Z [0m    elemMatch[0m
2025-04-04T18:16:15.5201632Z [0m      not via where[0m
2025-04-04T18:16:15.5203749Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:15.5221531Z       [32m  [32mâœ”[39m[0m[90m where block notation[0m
2025-04-04T18:16:15.5235694Z [0m      via where[0m
2025-04-04T18:16:15.5237672Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:15.5251422Z       [32m  [32mâœ”[39m[0m[90m where block notation[0m
2025-04-04T18:16:15.5263961Z [0m    $where[0m
2025-04-04T18:16:15.5265538Z     [32m  [32mâœ”[39m[0m[90m function arg[0m
2025-04-04T18:16:15.5279892Z     [32m  [32mâœ”[39m[0m[90m string arg[0m
2025-04-04T18:16:15.5292236Z [0m    limit[0m
2025-04-04T18:16:15.5293550Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:15.5309744Z     [32m  [32mâœ”[39m[0m[90m with string limit (gh-11017)[0m
2025-04-04T18:16:15.5322117Z [0m    skip[0m
2025-04-04T18:16:15.5323449Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:15.5336290Z [0m    sort[0m
2025-04-04T18:16:15.5339737Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:15.5352375Z [0m    or[0m
2025-04-04T18:16:15.5354727Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:15.5368320Z [0m    and[0m
2025-04-04T18:16:15.5370660Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:15.5383419Z [0m    populate[0m
2025-04-04T18:16:15.5386633Z     [32m  [32mâœ”[39m[0m[90m converts to PopulateOptions objects[0m
2025-04-04T18:16:15.5400828Z     [32m  [32mâœ”[39m[0m[90m overwrites duplicate paths[0m
2025-04-04T18:16:15.5414731Z     [32m  [32mâœ”[39m[0m[90m accepts space delimited strings[0m
2025-04-04T18:16:15.5427243Z [0m    casting[0m
2025-04-04T18:16:15.5431533Z     [32m  [32mâœ”[39m[0m[90m to an array of mixed[0m
2025-04-04T18:16:15.5593880Z     [32m  [32mâœ”[39m[0m[90m doesn't wipe out $in (gh-6439)[0m
2025-04-04T18:16:15.5629401Z     [32m  [32mâœ”[39m[0m[90m find $ne should not cast single value to array for schematype of Array[0m
2025-04-04T18:16:15.5737494Z     [32m  [32mâœ”[39m[0m[90m subdocument array with $ne: null should not throw[0m
2025-04-04T18:16:15.5802489Z     [32m  [32mâœ”[39m[0m[90m find should not cast single value to array for schematype of Array[0m
2025-04-04T18:16:15.5902700Z     [32m  [32mâœ”[39m[0m[90m an $elemMatch with $in works (gh-1100)[0m
2025-04-04T18:16:15.5967022Z     [32m  [32mâœ”[39m[0m[90m inequality operators for an array[0m
2025-04-04T18:16:15.6157649Z [0m    distinct[0m
2025-04-04T18:16:15.6159324Z     [32m  [32mâœ”[39m[0m[90m op[0m
2025-04-04T18:16:15.6175333Z     [32m  [32mâœ”[39m[0m[90m using options parameter for distinct[0m
2025-04-04T18:16:15.6190629Z [0m    findOne[0m
2025-04-04T18:16:15.6196253Z     [32m  [32mâœ”[39m[0m[90m sets the op[0m
2025-04-04T18:16:15.6260629Z [0m    deleteOne/deleteMany[0m
2025-04-04T18:16:15.6410802Z     [32m  [32mâœ”[39m[0m[90m handles deleteOne[0m
2025-04-04T18:16:15.6568433Z     [32m  [32mâœ”[39m[0m[90m handles deleteMany[0m
2025-04-04T18:16:15.6587103Z [0m    deleteMany[0m
2025-04-04T18:16:15.6602579Z     [32m  [32mâœ”[39m[0m[90m handles cast errors async[0m
2025-04-04T18:16:15.6731700Z     [32m  [32mâœ”[39m[0m[90m supports a single conditions arg[0m
2025-04-04T18:16:15.6889221Z     [32m  [32mâœ”[39m[0m[90m supports a single callback arg[0m
2025-04-04T18:16:15.7040622Z     [32m  [32mâœ”[39m[0m[90m supports conditions and callback args[0m
2025-04-04T18:16:15.7111065Z [0m    querying/updating with model instance containing embedded docs should work (#454)[0m
2025-04-04T18:16:15.7208715Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:15.7230574Z [0m    optionsForExec[0m
2025-04-04T18:16:15.7233541Z     [32m  [32mâœ”[39m[0m[90m should retain key order[0m
2025-04-04T18:16:15.7249334Z     [32m  [32mâœ”[39m[0m[90m applies schema-level writeConcern option[0m
2025-04-04T18:16:15.7263634Z     [32m  [32mâœ”[39m[0m[90m session() (gh-6663)[0m
2025-04-04T18:16:15.7275530Z [0m    options[0m
2025-04-04T18:16:15.7276196Z [0m      tailable[0m
2025-04-04T18:16:15.7278411Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:15.7291518Z       [32m  [32mâœ”[39m[0m[90m supports passing the `awaitData` option[0m
2025-04-04T18:16:15.7303307Z [0m      comment[0m
2025-04-04T18:16:15.7304763Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:15.7318306Z [0m      hint[0m
2025-04-04T18:16:15.7320278Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:15.7332247Z [0m      batchSize[0m
2025-04-04T18:16:15.7333734Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:15.7345511Z [0m      read[0m
2025-04-04T18:16:15.7346110Z [0m        without tags[0m
2025-04-04T18:16:15.7347750Z         [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:15.7359457Z [0m        with tags[0m
2025-04-04T18:16:15.7361943Z         [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:15.7374101Z [0m        inherits its models schema read option[0m
2025-04-04T18:16:15.7380510Z         [32m  [32mâœ”[39m[0m[90m if not set in query[0m
2025-04-04T18:16:15.7394271Z         [32m  [32mâœ”[39m[0m[90m if set in query[0m
2025-04-04T18:16:15.7420544Z         [32m  [32mâœ”[39m[0m[90m and sends it though the driver[0m
2025-04-04T18:16:15.7478683Z [0m    setOptions[0m
2025-04-04T18:16:15.7482743Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:15.7497872Z     [32m  [32mâœ”[39m[0m[90m populate as array in options (gh-4446)[0m
2025-04-04T18:16:15.7512619Z [0m    bug fixes[0m
2025-04-04T18:16:15.7611434Z     [32m  [32mâœ”[39m[0m[90m excludes _id when select false and inclusive mode (gh-3010)[0m
2025-04-04T18:16:15.7689567Z     [32m  [32mâœ”[39m[0m[90m doesnt reverse key order for update docs (gh-3215)[0m
2025-04-04T18:16:15.7768132Z     [32m  [32mâœ”[39m[0m[90m timestamps with $each (gh-4805)[0m
2025-04-04T18:16:15.7836246Z     [32m  [32mâœ”[39m[0m[90m handles nested $ (gh-3265)[0m
2025-04-04T18:16:15.7915075Z     [32m  [32mâœ”[39m[0m[90m $geoWithin with single nested schemas (gh-4044)[0m
2025-04-04T18:16:15.8139019Z     [32m  [32mâœ”[39m[0m[90m setDefaultsOnInsert with empty update (gh-3825)[0m
2025-04-04T18:16:15.8234378Z     [32m  [32mâœ”[39m[0m[90m custom query methods (gh-3714)[0m
2025-04-04T18:16:15.8319204Z     [32m  [32mâœ”[39m[0m[90m string as input (gh-4378)[0m
2025-04-04T18:16:15.8588963Z     [32m  [32mâœ”[39m[0m[90m handles geoWithin with $center and mongoose object (gh-4419)[0m
2025-04-04T18:16:15.8620881Z     [32m  [32mâœ”[39m[0m[90m $not with objects (gh-4495)[0m
2025-04-04T18:16:15.8847277Z     [32m  [32mâœ”[39m[0m[90m geoIntersects with mongoose doc as coords (gh-4408)[0m
2025-04-04T18:16:15.8881740Z     [32m  [32mâœ”[39m[0m[90m string with $not (gh-4592)[0m
2025-04-04T18:16:15.9032753Z     [32m  [32mâœ”[39m[0m[90m does not cast undefined to null in mongoose (gh-6236)[0m
2025-04-04T18:16:15.9158230Z     [32m  [32mâœ”[39m[0m[90m runs query setters with _id field (gh-5351)[0m
2025-04-04T18:16:15.9193863Z     [32m  [32mâœ”[39m[0m[90m runs setters if query field is an array (gh-6277)[0m
2025-04-04T18:16:15.9256492Z     [32m  [32mâœ”[39m[0m[90m $exists under $not (gh-4933)[0m
2025-04-04T18:16:15.9399467Z     [32m  [32mâœ”[39m[0m[90m geojson underneath array (gh-5467)[0m
2025-04-04T18:16:15.9520341Z     [32m  [32mâœ”[39m[0m[90m slice respects schema projections (gh-5450)[0m
2025-04-04T18:16:15.9550614Z     [32m  [32mâœ”[39m[0m[90m overwrites when passing an object when path already set to primitive (gh-6097)[0m
2025-04-04T18:16:15.9619412Z     [32m  [32mâœ”[39m[0m[90m $exists for arrays and embedded docs (gh-4937)[0m
2025-04-04T18:16:15.9686729Z     [32m  [32mâœ”[39m[0m[90m report error in pre hook (gh-5520)[0m
2025-04-04T18:16:15.9748824Z     [32m  [32mâœ”[39m[0m[90m cast error with custom error (gh-5520)[0m
2025-04-04T18:16:15.9899163Z     [32m  [32mâœ”[39m[0m[90m change deleteOne to updateOne for soft deletes using $isDeleted (gh-4428)[0m
2025-04-04T18:16:16.0083082Z     [32m  [32mâœ”[39m[0m[90m child schema with select: false in multiple paths (gh-5603)[0m
2025-04-04T18:16:16.0374111Z     [32m  [32mâœ”[39m[0m[90m errors in post init (gh-5592)[0m
2025-04-04T18:16:16.0406361Z     [32m  [32mâœ”[39m[0m[90m with non-object args (gh-1698)[0m
2025-04-04T18:16:16.4218410Z     [32m  [32mâœ”[39m[0m[90m queries with BSON overflow (gh-5812)[0m[31m (375ms)[0m
2025-04-04T18:16:16.4407004Z     [32m  [32mâœ”[39m[0m[90m explain() (gh-6625)[0m
2025-04-04T18:16:16.4515922Z     [32m  [32mâœ”[39m[0m[90m cast embedded discriminators with dot notation (gh-6027)[0m
2025-04-04T18:16:16.4676686Z     [32m  [32mâœ”[39m[0m[90m cast embedded discriminators with embedded obj (gh-6027)[0m
2025-04-04T18:16:16.4843164Z     [32m  [32mâœ”[39m[0m[90m cast embedded discriminators with $elemMatch discriminator key (gh-7449)[0m
2025-04-04T18:16:16.5050430Z     [32m  [32mâœ”[39m[0m[90m handles geoWithin with mongoose docs (gh-4392)[0m
2025-04-04T18:16:16.5074027Z [0m      collations[0m
2025-04-04T18:16:16.5304128Z       [32m  [32mâœ”[39m[0m[90m collation support (gh-4839)[0m
2025-04-04T18:16:16.5464869Z       [32m  [32mâœ”[39m[0m[90m set on schema (gh-5295)[0m
2025-04-04T18:16:16.5486753Z [0m      gh-1950[0m
2025-04-04T18:16:16.5567826Z       [32m  [32mâœ”[39m[0m[90m ignores sort when passed to countDocuments[0m
2025-04-04T18:16:16.5642195Z       [36m  - ignores count when passed to sort[0m
2025-04-04T18:16:16.5642993Z [0m    handles falsy and object projections with defaults (gh-3256)[0m
2025-04-04T18:16:16.5739861Z     [32m  [32mâœ”[39m[0m[90m falsy projection[0m
2025-04-04T18:16:16.5811694Z     [32m  [32mâœ”[39m[0m[90m slice projection[0m
2025-04-04T18:16:16.5881982Z     [32m  [32mâœ”[39m[0m[90m empty projection[0m
2025-04-04T18:16:16.5899718Z [0m    count[0m
2025-04-04T18:16:16.6216264Z     [32m  [32mâœ”[39m[0m[90m calls utils.toObject on conditions (gh-6323)[0m
2025-04-04T18:16:16.6238251Z [0m    setQuery[0m
2025-04-04T18:16:16.6241018Z     [32m  [32mâœ”[39m[0m[90m replaces existing query with new value (gh-6854)[0m
2025-04-04T18:16:16.6253634Z [0m    orFail (gh-6841)[0m
2025-04-04T18:16:16.6360736Z     [32m  [32mâœ”[39m[0m[90m find()[0m
2025-04-04T18:16:16.6449068Z     [32m  [32mâœ”[39m[0m[90m findOne()[0m
2025-04-04T18:16:16.6527686Z     [32m  [32mâœ”[39m[0m[90m deleteMany()[0m
2025-04-04T18:16:16.6606494Z     [32m  [32mâœ”[39m[0m[90m deleteOne()[0m
2025-04-04T18:16:16.6693149Z     [32m  [32mâœ”[39m[0m[90m replaceOne()[0m
2025-04-04T18:16:16.6771655Z     [32m  [32mâœ”[39m[0m[90m updateMany()[0m
2025-04-04T18:16:16.6850824Z     [32m  [32mâœ”[39m[0m[90m updateOne()[0m
2025-04-04T18:16:16.6929592Z     [32m  [32mâœ”[39m[0m[90m findOneAndUpdate()[0m
2025-04-04T18:16:16.7008842Z     [32m  [32mâœ”[39m[0m[90m findOneAndDelete()[0m
2025-04-04T18:16:16.7183526Z     [32m  [32mâœ”[39m[0m[90m executes before post hooks (gh-7280)[0m
2025-04-04T18:16:16.7298409Z     [32m  [32mâœ”[39m[0m[90m throws DocumentNotFoundError by default execute (gh-7409)[0m
2025-04-04T18:16:16.7371119Z     [32m  [32mâœ”[39m[0m[90m does not fire on CastError (gh-13165)[0m
2025-04-04T18:16:16.7390303Z [0m    getPopulatedPaths[0m
2025-04-04T18:16:16.7403482Z     [32m  [32mâœ”[39m[0m[90m doesn't break on a query without population (gh-6677)[0m
2025-04-04T18:16:16.7655517Z     [32m  [32mâœ”[39m[0m[90m returns an array of populated paths as strings (gh-6677)[0m
2025-04-04T18:16:16.7691373Z     [32m  [32mâœ”[39m[0m[90m returns deep populated paths (gh-7757)[0m
2025-04-04T18:16:16.7824899Z [0m    setUpdate[0m
2025-04-04T18:16:16.7827497Z     [32m  [32mâœ”[39m[0m[90m replaces existing update doc with new value[0m
2025-04-04T18:16:16.7840293Z [0m    get() (gh-7312)[0m
2025-04-04T18:16:16.7842518Z     [32m  [32mâœ”[39m[0m[90m works with using $set[0m
2025-04-04T18:16:16.7856097Z     [32m  [32mâœ”[39m[0m[90m works with $set syntactic sugar[0m
2025-04-04T18:16:16.7868932Z     [32m  [32mâœ”[39m[0m[90m works with mixed[0m
2025-04-04T18:16:16.7956283Z     [32m  [32mâœ”[39m[0m[90m $set overwrites existing[0m
2025-04-04T18:16:16.8030993Z [0m    increments timestamps for arrays of nested subdocs (gh-4412)[0m
2025-04-04T18:16:16.8240034Z     [32m  [32mâœ”[39m[0m[90m $set nested property with numeric position[0m
2025-04-04T18:16:16.8433636Z     [32m  [32mâœ”[39m[0m[90m $set numeric element[0m
2025-04-04T18:16:16.8625177Z     [32m  [32mâœ”[39m[0m[90m $set with positional operator[0m
2025-04-04T18:16:16.8749945Z     [32m  [32mâœ”[39m[0m[90m $set with positional operator and array (gh-7106)[0m
2025-04-04T18:16:16.8832180Z [0m    merge()[0m
2025-04-04T18:16:16.9055971Z     [32m  [32mâœ”[39m[0m[90m copies populate() (gh-1790)[0m
2025-04-04T18:16:16.9089202Z [0m    Query#validate() (gh-7984)[0m
2025-04-04T18:16:16.9182831Z     [32m  [32mâœ”[39m[0m[90m middleware[0m
2025-04-04T18:16:16.9220888Z     [32m  [32mâœ”[39m[0m[90m pre("validate") errors (gh-7187)[0m
2025-04-04T18:16:16.9280188Z [0m    stack traces[0m
2025-04-04T18:16:16.9295088Z     [32m  [32mâœ”[39m[0m[90m includes calling file for filter cast errors (gh-8691)[0m
2025-04-04T18:16:16.9351692Z [0m    clone[0m
2025-04-04T18:16:16.9506449Z     [32m  [32mâœ”[39m[0m[90m with findOne[0m
2025-04-04T18:16:16.9686947Z     [32m  [32mâœ”[39m[0m[90m with deleteOne[0m
2025-04-04T18:16:16.9867814Z     [32m  [32mâœ”[39m[0m[90m with updateOne[0m
2025-04-04T18:16:17.0034499Z     [32m  [32mâœ”[39m[0m[90m with distinct[0m
2025-04-04T18:16:17.0204276Z     [32m  [32mâœ”[39m[0m[90m with hooks (gh-12365)[0m
2025-04-04T18:16:17.0223042Z [0m    set()[0m
2025-04-04T18:16:17.0229253Z     [32m  [32mâœ”[39m[0m[90m overwrites top-level keys if setting to undefined (gh-12155)[0m
2025-04-04T18:16:17.0285650Z [0m    schemaLevelProjections (gh-11474)[0m
2025-04-04T18:16:17.0360944Z     [32m  [32mâœ”[39m[0m[90m disables schema-level select: false[0m
2025-04-04T18:16:17.0510556Z     [32m  [32mâœ”[39m[0m[90m disables schema-level select: true[0m
2025-04-04T18:16:17.0684135Z     [32m  [32mâœ”[39m[0m[90m works via setOptions()[0m
2025-04-04T18:16:17.0844211Z     [32m  [32mâœ”[39m[0m[90m disabled via truthy value[0m
2025-04-04T18:16:17.0898541Z 
2025-04-04T18:16:17.0899258Z [0m  Query:[0m
2025-04-04T18:16:17.0900208Z [0m    toConstructor[0m
2025-04-04T18:16:17.0925517Z     [32m  [32mâœ”[39m[0m[90m creates a query[0m
2025-04-04T18:16:17.0937727Z     [32m  [32mâœ”[39m[0m[90m copies all the right values[0m
2025-04-04T18:16:17.1036996Z     [32m  [32mâœ”[39m[0m[90m gets expected results[0m
2025-04-04T18:16:17.1073967Z     [32m  [32mâœ”[39m[0m[90m can be re-used multiple times[0m
2025-04-04T18:16:17.1077693Z     [32m  [32mâœ”[39m[0m[90m options get merged properly[0m
2025-04-04T18:16:17.1081067Z     [32m  [32mâœ”[39m[0m[90m options get cloned (gh-3176)[0m
2025-04-04T18:16:17.1085296Z     [32m  [32mâœ”[39m[0m[90m creates subclasses of mquery[0m
2025-04-04T18:16:17.1098223Z     [32m  [32mâœ”[39m[0m[90m with findOneAndUpdate (gh-4318)[0m
2025-04-04T18:16:17.1172159Z     [32m  [32mâœ”[39m[0m[90m gets middleware from model (gh-6455)[0m
2025-04-04T18:16:17.1178129Z     [32m  [32mâœ”[39m[0m[90m works with entries-style sort() syntax (gh-8159)[0m
2025-04-04T18:16:17.1197548Z 
2025-04-04T18:16:17.1197981Z [0m  queryhelpers[0m
2025-04-04T18:16:17.1198531Z [0m    applyPaths[0m
2025-04-04T18:16:17.1202699Z     [32m  [32mâœ”[39m[0m[90m adds select: true paths unless excluded using minus path (gh-11694)[0m
2025-04-04T18:16:17.1205275Z     [32m  [32mâœ”[39m[0m[90m supports nested minus path (gh-11694)[0m
2025-04-04T18:16:17.1205943Z 
2025-04-04T18:16:17.1206283Z [0m  schema alias option[0m
2025-04-04T18:16:17.1250427Z   [32m  [32mâœ”[39m[0m[90m works with all basic schema types[0m
2025-04-04T18:16:17.1360897Z   [32m  [32mâœ”[39m[0m[90m works with nested schema types[0m
2025-04-04T18:16:17.1446181Z   [32m  [32mâœ”[39m[0m[90m throws when alias option is invalid[0m
2025-04-04T18:16:17.1459991Z   [32m  [32mâœ”[39m[0m[90m with add() (gh-6593)[0m
2025-04-04T18:16:17.1482482Z   [32m  [32mâœ”[39m[0m[90m nested aliases (gh-6671)[0m
2025-04-04T18:16:17.1502299Z   [32m  [32mâœ”[39m[0m[90m array of aliases (gh-12368)[0m
2025-04-04T18:16:17.1563442Z   [32m  [32mâœ”[39m[0m[90m alias() method (gh-12368)[0m
2025-04-04T18:16:17.1577280Z   [32m  [32mâœ”[39m[0m[90m supports passing the alias name for an index (gh-13276)[0m
2025-04-04T18:16:17.1656071Z   [32m  [32mâœ”[39m[0m[90m should disable the id virtual entirely if there's a field with alias `id` gh-13650[0m
2025-04-04T18:16:17.1753916Z 
2025-04-04T18:16:17.1754313Z [0m  schematype[0m
2025-04-04T18:16:17.1754756Z [0m    boolean[0m
2025-04-04T18:16:17.1763675Z     [32m  [32mâœ”[39m[0m[90m null default is permitted (gh-523)[0m
2025-04-04T18:16:17.1764112Z 
2025-04-04T18:16:17.1764323Z [0m  SchemaDate[0m
2025-04-04T18:16:17.1769571Z   [32m  [32mâœ”[39m[0m[90m accepts a Date[0m
2025-04-04T18:16:17.1770978Z   [32m  [32mâœ”[39m[0m[90m casts a date string to a string[0m
2025-04-04T18:16:17.1772306Z   [32m  [32mâœ”[39m[0m[90m interprets a number as a unix timestamp[0m
2025-04-04T18:16:17.1773763Z   [32m  [32mâœ”[39m[0m[90m attempts to interpret a string as a Date, not a timestamo (gh-5395)[0m
2025-04-04T18:16:17.1775608Z   [32m  [32mâœ”[39m[0m[90m casts any object with a `.valueOf` function to a date[0m
2025-04-04T18:16:17.1777357Z   [32m  [32mâœ”[39m[0m[90m casts string representation of unix timestamps (gh-6443)[0m
2025-04-04T18:16:17.1777886Z 
2025-04-04T18:16:17.1778167Z [0m  schema.documentarray[0m
2025-04-04T18:16:17.1793329Z   [32m  [32mâœ”[39m[0m[90m defaults should be preserved[0m
2025-04-04T18:16:17.1805596Z   [32m  [32mâœ”[39m[0m[90m only sets if document has same schema (gh-3701)[0m
2025-04-04T18:16:17.1810109Z   [32m  [32mâœ”[39m[0m[90m sets $implicitlyCreated if created by interpretAsType (gh-4271)[0m
2025-04-04T18:16:17.1812801Z   [32m  [32mâœ”[39m[0m[90m propagates strictQuery to implicitly created schemas (gh-12796)[0m
2025-04-04T18:16:17.1822406Z   [32m  [32mâœ”[39m[0m[90m supports set with array of document arrays (gh-7799)[0m
2025-04-04T18:16:17.1833009Z   [32m  [32mâœ”[39m[0m[90m supports `set()` (gh-8883)[0m
2025-04-04T18:16:17.1837249Z   [32m  [32mâœ”[39m[0m[90m handles default function that returns null (gh-11058)[0m
2025-04-04T18:16:17.1846732Z   [32m  [32mâœ”[39m[0m[90m doValidate() validates entire subdocument (gh-11770)[0m
2025-04-04T18:16:17.1847213Z 
2025-04-04T18:16:17.1847741Z [0m  schematype mixed[0m
2025-04-04T18:16:17.1848320Z [0m    empty object defaults (gh-1380)[0m
2025-04-04T18:16:17.1853825Z     [32m  [32mâœ”[39m[0m[90m are interpreted as fns that return new empty objects[0m
2025-04-04T18:16:17.1858752Z     [32m  [32mâœ”[39m[0m[90m can be forced to share the object between documents[0m
2025-04-04T18:16:17.1859395Z 
2025-04-04T18:16:17.1859891Z [0m  SchemaNumber[0m
2025-04-04T18:16:17.1862880Z   [32m  [32mâœ”[39m[0m[90m allows 0 with required: true and ref set (gh-11912)[0m
2025-04-04T18:16:17.1867226Z   [32m  [32mâœ”[39m[0m[90m allows calling `min()` with no message arg (gh-15236)[0m
2025-04-04T18:16:17.1867737Z 
2025-04-04T18:16:17.1867987Z [0m  schema.onthefly[0m
2025-04-04T18:16:17.1893324Z   [32m  [32mâœ”[39m[0m[90m setting should cache the schema type and cast values appropriately[0m
2025-04-04T18:16:17.1972309Z   [32m  [32mâœ”[39m[0m[90m should be local to the particular document[0m
2025-04-04T18:16:17.2113047Z   [32m  [32mâœ”[39m[0m[90m querying a document that had an on the fly schema should work[0m
2025-04-04T18:16:17.2191866Z   [32m  [32mâœ”[39m[0m[90m on the fly Embedded Array schemas should cast properly[0m
2025-04-04T18:16:17.2336048Z   [32m  [32mâœ”[39m[0m[90m on the fly Embedded Array schemas should get from a fresh queried document properly[0m
2025-04-04T18:16:17.2408352Z   [32m  [32mâœ”[39m[0m[90m casts on get() (gh-2360)[0m
2025-04-04T18:16:17.2486748Z 
2025-04-04T18:16:17.2487712Z [0m  schema select option[0m
2025-04-04T18:16:17.2651296Z   [32m  [32mâœ”[39m[0m[90m excluding paths through schematype[0m
2025-04-04T18:16:17.2791985Z   [32m  [32mâœ”[39m[0m[90m including paths through schematype[0m
2025-04-04T18:16:17.2826406Z   [32m  [32mâœ”[39m[0m[90m should not project in discriminator key if projected in implicitly with .$ (gh-9361)[0m
2025-04-04T18:16:17.2976972Z   [32m  [32mâœ”[39m[0m[90m conflicting schematype path selection should not error[0m
2025-04-04T18:16:17.3068925Z   [32m  [32mâœ”[39m[0m[90m selecting _id works with excluded schematype path[0m
2025-04-04T18:16:17.3153656Z   [32m  [32mâœ”[39m[0m[90m selecting _id works with excluded schematype path on sub doc[0m
2025-04-04T18:16:17.3339874Z   [32m  [32mâœ”[39m[0m[90m inclusive/exclusive combos should work[0m
2025-04-04T18:16:17.3537038Z   [32m  [32mâœ”[39m[0m[90m when select is false in the schema definition, all inclusive/exclusive combos should work[0m
2025-04-04T18:16:17.3690519Z   [32m  [32mâœ”[39m[0m[90m when select is set to true in the schema definition, all inclusive/exclusive combos should work[0m
2025-04-04T18:16:17.3810953Z   [32m  [32mâœ”[39m[0m[90m does not set defaults for nested objects (gh-4707)[0m
2025-04-04T18:16:17.3909212Z   [32m  [32mâœ”[39m[0m[90m does not create nested objects if not included (gh-4669)[0m
2025-04-04T18:16:17.4060833Z   [32m  [32mâœ”[39m[0m[90m initializes nested defaults with selected objects (gh-2629)[0m
2025-04-04T18:16:17.4209372Z   [32m  [32mâœ”[39m[0m[90m should allow deselecting a field on a query even if the definition has select set to true (gh-11694)[0m
2025-04-04T18:16:17.4285973Z [0m    overriding schematype select options[0m
2025-04-04T18:16:17.4296894Z [0m      works[0m
2025-04-04T18:16:17.4300001Z [0m        for inclusions[0m
2025-04-04T18:16:17.4422340Z         [32m  [32mâœ”[39m[0m[90m with find[0m
2025-04-04T18:16:17.4509067Z         [32m  [32mâœ”[39m[0m[90m for findById[0m
2025-04-04T18:16:17.4596404Z         [32m  [32mâœ”[39m[0m[90m with findOneAndUpdate[0m
2025-04-04T18:16:17.4683734Z         [32m  [32mâœ”[39m[0m[90m for findByIdAndUpdate[0m
2025-04-04T18:16:17.4703534Z [0m        for exclusions[0m
2025-04-04T18:16:17.4765598Z         [32m  [32mâœ”[39m[0m[90m with find[0m
2025-04-04T18:16:17.4844870Z         [32m  [32mâœ”[39m[0m[90m with findById[0m
2025-04-04T18:16:17.4926042Z         [32m  [32mâœ”[39m[0m[90m with findOneAndUpdate[0m
2025-04-04T18:16:17.5001025Z         [32m  [32mâœ”[39m[0m[90m with findOneAndDelete[0m
2025-04-04T18:16:17.5018486Z [0m    exclusion in root schema should override child schema[0m
2025-04-04T18:16:17.5028708Z     [32m  [32mâœ”[39m[0m[90m works (gh-1333)[0m
2025-04-04T18:16:17.5127194Z     [32m  [32mâœ”[39m[0m[90m with nested (gh-7945)[0m
2025-04-04T18:16:17.5204420Z [0m    forcing inclusion of a deselected schema path[0m
2025-04-04T18:16:17.5316301Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:17.5411395Z     [32m  [32mâœ”[39m[0m[90m works if only one plus path and only one deselected field[0m
2025-04-04T18:16:17.5574610Z     [32m  [32mâœ”[39m[0m[90m works with query.slice (gh-1370)[0m
2025-04-04T18:16:17.5726774Z     [32m  [32mâœ”[39m[0m[90m ignores if path does not have select in schema (gh-6785)[0m
2025-04-04T18:16:17.5874277Z     [32m  [32mâœ”[39m[0m[90m omits if not in schema (gh-7017)[0m
2025-04-04T18:16:17.5970017Z 
2025-04-04T18:16:17.5970401Z [0m  SchemaString[0m
2025-04-04T18:16:17.5977635Z   [32m  [32mâœ”[39m[0m[90m works when RegExp has global flag set (gh-9287)[0m
2025-04-04T18:16:17.5978137Z 
2025-04-04T18:16:17.5978373Z [0m  SubdocumentPath[0m
2025-04-04T18:16:17.5983775Z   [32m  [32mâœ”[39m[0m[90m copies over `requiredValidator` (gh-8819)[0m
2025-04-04T18:16:17.5991128Z   [32m  [32mâœ”[39m[0m[90m supports `set()` (gh-8883)[0m
2025-04-04T18:16:17.5998593Z   [32m  [32mâœ”[39m[0m[90m supports setting _id globally (gh-11541) (gh-8883)[0m
2025-04-04T18:16:17.5999580Z [0m    discriminator()[0m
2025-04-04T18:16:17.6000013Z [0m      recursive nested discriminators[0m
2025-04-04T18:16:17.6004982Z       [32m  [32mâœ”[39m[0m[90m allow multiple levels of data in the schema[0m
2025-04-04T18:16:17.6016620Z       [32m  [32mâœ”[39m[0m[90m allow multiple levels of data in a document[0m
2025-04-04T18:16:17.6040626Z       [32m  [32mâœ”[39m[0m[90m allow multiple levels of data in the schema when the base schema has _id without auto[0m
2025-04-04T18:16:17.6052674Z       [32m  [32mâœ”[39m[0m[90m allow multiple levels of data in a document when the base schema has _id without auto[0m
2025-04-04T18:16:17.6053133Z 
2025-04-04T18:16:17.6055667Z [0m  schema[0m
2025-04-04T18:16:17.6073246Z   [32m  [32mâœ”[39m[0m[90m can be created without the "new" keyword[0m
2025-04-04T18:16:17.6098476Z   [32m  [32mâœ”[39m[0m[90m does expose a property for duck-typing instanceof[0m
2025-04-04T18:16:17.6120628Z   [32m  [32mâœ”[39m[0m[90m supports different schematypes[0m
2025-04-04T18:16:17.6136747Z   [32m  [32mâœ”[39m[0m[90m supports dot notation for path accessors[0m
2025-04-04T18:16:17.6151969Z   [32m  [32mâœ”[39m[0m[90m allows paths nested > 2 levels[0m
2025-04-04T18:16:17.6170002Z   [32m  [32mâœ”[39m[0m[90m default definition[0m
2025-04-04T18:16:17.6184851Z   [32m  [32mâœ”[39m[0m[90m Mixed defaults can be empty arrays[0m
2025-04-04T18:16:17.6197990Z   [32m  [32mâœ”[39m[0m[90m methods declaration[0m
2025-04-04T18:16:17.6211241Z   [32m  [32mâœ”[39m[0m[90m static declaration[0m
2025-04-04T18:16:17.6225147Z   [32m  [32mâœ”[39m[0m[90m debugging msgs[0m
2025-04-04T18:16:17.6246964Z   [32m  [32mâœ”[39m[0m[90m required() with doc arrays (gh-3199)[0m
2025-04-04T18:16:17.6266540Z   [32m  [32mâœ”[39m[0m[90m custom typeKey in doc arrays (gh-3560)[0m
2025-04-04T18:16:17.6287569Z   [32m  [32mâœ”[39m[0m[90m required for single nested schemas (gh-3562)[0m
2025-04-04T18:16:17.6313779Z   [32m  [32mâœ”[39m[0m[90m booleans cause cast error for date (gh-3935)[0m
2025-04-04T18:16:17.6329916Z   [32m  [32mâœ”[39m[0m[90m trim: false works with strings (gh-4042)[0m
2025-04-04T18:16:17.6348943Z   [32m  [32mâœ”[39m[0m[90m arrays with typeKey (gh-4548)[0m
2025-04-04T18:16:17.6363482Z   [32m  [32mâœ”[39m[0m[90m arrays of mixed arrays (gh-5416)[0m
2025-04-04T18:16:17.6381855Z   [32m  [32mâœ”[39m[0m[90m throws a sane error if passing a schema to `ref` (gh-6915)[0m
2025-04-04T18:16:17.6396408Z   [32m  [32mâœ”[39m[0m[90m allows using ObjectId type as schema path (gh-7049)[0m
2025-04-04T18:16:17.6410348Z   [32m  [32mâœ”[39m[0m[90m throws error if invalid type (gh-7303)[0m
2025-04-04T18:16:17.6424574Z   [32m  [32mâœ”[39m[0m[90m supports _id: false in paths definition (gh-7480) (gh-7524)[0m
2025-04-04T18:16:17.6440123Z   [32m  [32mâœ”[39m[0m[90m schema.pathType() with positional path that isnt in schema (gh-7935)[0m
2025-04-04T18:16:17.6453872Z   [32m  [32mâœ”[39m[0m[90m supports pre(Array, Function) and post(Array, Function) (gh-7803)[0m
2025-04-04T18:16:17.6467535Z   [32m  [32mâœ”[39m[0m[90m supports array with { type: ObjectID } (gh-8034)[0m
2025-04-04T18:16:17.6482057Z   [32m  [32mâœ”[39m[0m[90m supports getting path under array (gh-8057)[0m
2025-04-04T18:16:17.6500764Z   [32m  [32mâœ”[39m[0m[90m required paths with clone() (gh-8111)[0m
2025-04-04T18:16:17.6574875Z   [32m  [32mâœ”[39m[0m[90m getters/setters with clone() (gh-8124)[0m
2025-04-04T18:16:17.6635546Z   [32m  [32mâœ”[39m[0m[90m required with nullish value (gh-8219)[0m
2025-04-04T18:16:17.6649308Z   [32m  [32mâœ”[39m[0m[90m SchemaStringOptions line up with schema/string (gh-8256)[0m
2025-04-04T18:16:17.6662723Z   [32m  [32mâœ”[39m[0m[90m supports passing schema options to `Schema#path()` (gh-8292)[0m
2025-04-04T18:16:17.6686554Z   [32m  [32mâœ”[39m[0m[90m supports defining `_id: false` on single nested paths (gh-8137)[0m
2025-04-04T18:16:17.6705489Z   [32m  [32mâœ”[39m[0m[90m supports defining `_id: false` on document arrays (gh-8450)[0m
2025-04-04T18:16:17.6720661Z   [32m  [32mâœ”[39m[0m[90m copies `.add()`-ed paths when calling `.add()` with a schema argument (gh-8429)[0m
2025-04-04T18:16:17.6734275Z   [32m  [32mâœ”[39m[0m[90m copies indexes when calling add() with schema instance (gh-12654)[0m
2025-04-04T18:16:17.6748259Z   [32m  [32mâœ”[39m[0m[90m disables `id` virtual if no `_id` path (gh-3936)[0m
2025-04-04T18:16:17.6761671Z   [32m  [32mâœ”[39m[0m[90m treats dotted paths with no parent as a nested path (gh-9020)[0m
2025-04-04T18:16:17.6775442Z   [32m  [32mâœ”[39m[0m[90m allows using `mongoose.Schema.Types.Array` as type (gh-9194)[0m
2025-04-04T18:16:17.6789828Z   [32m  [32mâœ”[39m[0m[90m handles using a schematype when defining a path (gh-9370)[0m
2025-04-04T18:16:17.6804044Z   [32m  [32mâœ”[39m[0m[90m applies correct schema to nested primitive arrays (gh-9429)[0m
2025-04-04T18:16:17.6820065Z   [32m  [32mâœ”[39m[0m[90m supports `of` for array type definition (gh-9564)[0m
2025-04-04T18:16:17.6838916Z   [32m  [32mâœ”[39m[0m[90m should use the top-most class's getter/setter gh-8892[0m
2025-04-04T18:16:17.6939503Z   [32m  [32mâœ”[39m[0m[90m handles loadClass with inheritted getters (gh-9975)[0m
2025-04-04T18:16:17.6955646Z   [32m  [32mâœ”[39m[0m[90m loadClass with static getter (gh-10436)[0m
2025-04-04T18:16:17.6970530Z   [32m  [32mâœ”[39m[0m[90m supports setting `ref` on array SchemaType (gh-10029)[0m
2025-04-04T18:16:17.6986687Z   [32m  [32mâœ”[39m[0m[90m path() gets single nested paths within document arrays (gh-10164)[0m
2025-04-04T18:16:17.7003711Z   [32m  [32mâœ”[39m[0m[90m supports creating nested paths underneath document arrays (gh-10193)[0m
2025-04-04T18:16:17.7018179Z   [32m  [32mâœ”[39m[0m[90m propagates map `ref` down to individual map elements (gh-10329)[0m
2025-04-04T18:16:17.7031899Z   [32m  [32mâœ”[39m[0m[90m handles maps of maps (gh-10644)[0m
2025-04-04T18:16:17.7048449Z   [32m  [32mâœ”[39m[0m[90m handles `type: { subpath: String }` in document array definitions (gh-10750)[0m
2025-04-04T18:16:17.7062999Z   [32m  [32mâœ”[39m[0m[90m handles `Date` with `type` (gh-10807)[0m
2025-04-04T18:16:17.7197103Z   [32m  [32mâœ”[39m[0m[90m setting path with `Mixed` type to an array after number (gh-11417)[0m
2025-04-04T18:16:17.7540846Z   [32m  [32mâœ”[39m[0m[90m sets an _applyDiscriminators property on the schema and add discriminator to appropriate model (gh-7971)[0m
2025-04-04T18:16:17.7676258Z   [32m  [32mâœ”[39m[0m[90m supports numbers with Schema.discriminator() (gh-13788)[0m
2025-04-04T18:16:17.7807060Z   [32m  [32mâœ”[39m[0m[90m can use on as a schema property (gh-11580)[0m
2025-04-04T18:16:17.7836479Z   [32m  [32mâœ”[39m[0m[90m disallows using schemas with schema-level projections with map subdocuments (gh-11698)[0m
2025-04-04T18:16:17.7925610Z   [32m  [32mâœ”[39m[0m[90m allows a lean option on schemas so that all documents are lean when running a query (gh-10090)[0m
2025-04-04T18:16:17.8005489Z   [32m  [32mâœ”[39m[0m[90m disallows setting special properties with `add()` or constructor (gh-12085)[0m
2025-04-04T18:16:17.8029605Z   [32m  [32mâœ”[39m[0m[90m enable defining virtual paths by using schema constructor (gh-11908)[0m
2025-04-04T18:16:17.8044461Z   [32m  [32mâœ”[39m[0m[90m allows defining ObjectIds and Decimal128s using Types.* (gh-12205)[0m
2025-04-04T18:16:17.8061803Z   [32m  [32mâœ”[39m[0m[90m _getSchema finds path underneath nested subdocument with map of mixed (gh-12530)[0m
2025-04-04T18:16:17.8079794Z   [32m  [32mâœ”[39m[0m[90m should not allow to create a path with primitive values (gh-7558)[0m
2025-04-04T18:16:17.8098460Z   [32m  [32mâœ”[39m[0m[90m should allow deleting a virtual path off the schema gh-8397[0m
2025-04-04T18:16:17.8167690Z   [32m  [32mâœ”[39m[0m[90m should allow deleting multiple virtuals gh-8397[0m
2025-04-04T18:16:17.8227646Z   [32m  [32mâœ”[39m[0m[90m should throw an error if attempting to delete a virtual path that does not exist gh-8397[0m
2025-04-04T18:16:17.8244256Z   [32m  [32mâœ”[39m[0m[90m should throw an error if using schema with "timeseries" option as a nested schema[0m
2025-04-04T18:16:17.8346692Z   [32m  [32mâœ”[39m[0m[90m should allow timestamps on a sub document when having _id field in the main document gh-13343[0m
2025-04-04T18:16:17.8500880Z   [32m  [32mâœ”[39m[0m[90m should not save objectids as strings when using the `flattenObjectIds` option (gh-13648)[0m
2025-04-04T18:16:17.8577644Z   [32m  [32mâœ”[39m[0m[90m deduplicates idGetter (gh-14457)[0m
2025-04-04T18:16:17.8606691Z   [32m  [32mâœ”[39m[0m[90m handles recursive definitions in discriminators (gh-13978)[0m
2025-04-04T18:16:17.8765968Z   [32m  [32mâœ”[39m[0m[90m handles recursive definitions of arrays in discriminators (gh-14055)[0m
2025-04-04T18:16:17.8913571Z   [32m  [32mâœ”[39m[0m[90m should have the correct schema definition with array schemas (gh-14416)[0m
2025-04-04T18:16:17.9022240Z   [32m  [32mâœ”[39m[0m[90m handles discriminator options with Schema.prototype.discriminator (gh-14448)[0m
2025-04-04T18:16:17.9229504Z   [32m  [32mâœ”[39m[0m[90m supports schema-level readConcern (gh-14511)[0m
2025-04-04T18:16:17.9289972Z   [32m  [32mâœ”[39m[0m[90m supports casting object to subdocument (gh-14748) (gh-9076)[0m
2025-04-04T18:16:17.9311745Z   [32m  [32mâœ”[39m[0m[90m throws "already has an index" error if duplicate index definition (gh-15056)[0m
2025-04-04T18:16:18.0989679Z   [32m  [32mâœ”[39m[0m[90m path() clears existing child schemas (gh-15253)[0m[31m (166ms)[0m
2025-04-04T18:16:18.1044773Z [0m    nested fields with same name[0m
2025-04-04T18:16:18.1160499Z     [32m  [32mâœ”[39m[0m[90m don't disappear[0m
2025-04-04T18:16:18.1182514Z [0m    casting[0m
2025-04-04T18:16:18.1185319Z     [32m  [32mâœ”[39m[0m[90m number[0m
2025-04-04T18:16:18.1199838Z     [32m  [32mâœ”[39m[0m[90m date[0m
2025-04-04T18:16:18.1214084Z     [32m  [32mâœ”[39m[0m[90m objectid[0m
2025-04-04T18:16:18.1232583Z     [32m  [32mâœ”[39m[0m[90m array[0m
2025-04-04T18:16:18.1252096Z     [32m  [32mâœ”[39m[0m[90m array of arrays[0m
2025-04-04T18:16:18.1268707Z     [32m  [32mâœ”[39m[0m[90m boolean[0m
2025-04-04T18:16:18.1282941Z [0m      string[0m
2025-04-04T18:16:18.1286236Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:18.1301268Z [0m    setters[0m
2025-04-04T18:16:18.1304045Z     [32m  [32mâœ”[39m[0m[90m work[0m
2025-04-04T18:16:18.1320178Z     [32m  [32mâœ”[39m[0m[90m order[0m
2025-04-04T18:16:18.1335948Z     [32m  [32mâœ”[39m[0m[90m scope[0m
2025-04-04T18:16:18.1352020Z     [32m  [32mâœ”[39m[0m[90m casting[0m
2025-04-04T18:16:18.1367483Z     [32m  [32mâœ”[39m[0m[90m applying when none have been defined[0m
2025-04-04T18:16:18.1383182Z     [32m  [32mâœ”[39m[0m[90m assignment of non-functions throw[0m
2025-04-04T18:16:18.1396879Z [0m      array[0m
2025-04-04T18:16:18.1400797Z       [32m  [32mâœ”[39m[0m[90m object setters will be applied for each object in array[0m
2025-04-04T18:16:18.1414521Z [0m      string[0m
2025-04-04T18:16:18.1417376Z       [32m  [32mâœ”[39m[0m[90m lowercase[0m
2025-04-04T18:16:18.1433196Z       [32m  [32mâœ”[39m[0m[90m uppercase[0m
2025-04-04T18:16:18.1449197Z       [32m  [32mâœ”[39m[0m[90m trim[0m
2025-04-04T18:16:18.1463423Z [0m    getters[0m
2025-04-04T18:16:18.1465735Z     [32m  [32mâœ”[39m[0m[90m work[0m
2025-04-04T18:16:18.1481258Z     [32m  [32mâœ”[39m[0m[90m order[0m
2025-04-04T18:16:18.1496744Z     [32m  [32mâœ”[39m[0m[90m scope[0m
2025-04-04T18:16:18.1511998Z     [32m  [32mâœ”[39m[0m[90m casting[0m
2025-04-04T18:16:18.1527275Z     [32m  [32mâœ”[39m[0m[90m applying when none have been defined[0m
2025-04-04T18:16:18.1542530Z     [32m  [32mâœ”[39m[0m[90m assignment of non-functions throw[0m
2025-04-04T18:16:18.1559777Z     [32m  [32mâœ”[39m[0m[90m auto _id[0m
2025-04-04T18:16:18.1573648Z [0m    indexes[0m
2025-04-04T18:16:18.1574061Z [0m      definition[0m
2025-04-04T18:16:18.1583120Z       [32m  [32mâœ”[39m[0m[90m basic[0m
2025-04-04T18:16:18.1602113Z       [32m  [32mâœ”[39m[0m[90m compound[0m
2025-04-04T18:16:18.1619018Z       [32m  [32mâœ”[39m[0m[90m compound based on name (gh-6499)[0m
2025-04-04T18:16:18.1635101Z       [32m  [32mâœ”[39m[0m[90m using "ascending" and "descending" for order (gh-13725)[0m
2025-04-04T18:16:18.1652542Z       [32m  [32mâœ”[39m[0m[90m with single nested doc (gh-6113)[0m
2025-04-04T18:16:18.1674601Z       [32m  [32mâœ”[39m[0m[90m with embedded discriminator (gh-6485)[0m
2025-04-04T18:16:18.1688418Z [0m    plugins[0m
2025-04-04T18:16:18.1691075Z     [32m  [32mâœ”[39m[0m[90m work[0m
2025-04-04T18:16:18.1704377Z     [32m  [32mâœ”[39m[0m[90m options param (gh-12077)[0m
2025-04-04T18:16:18.1716202Z [0m    options[0m
2025-04-04T18:16:18.1718347Z     [32m  [32mâœ”[39m[0m[90m defaults are set[0m
2025-04-04T18:16:18.1737838Z     [32m  [32mâœ”[39m[0m[90m setting[0m
2025-04-04T18:16:18.1750043Z [0m    virtuals[0m
2025-04-04T18:16:18.1752856Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:18.1764612Z [0m      id[0m
2025-04-04T18:16:18.1767511Z       [32m  [32mâœ”[39m[0m[90m default creation of id can be overridden (gh-298)[0m
2025-04-04T18:16:18.1780372Z       [32m  [32mâœ”[39m[0m[90m disabling[0m
2025-04-04T18:16:18.1792124Z [0m      getter[0m
2025-04-04T18:16:18.1794573Z       [32m  [32mâœ”[39m[0m[90m scope[0m
2025-04-04T18:16:18.1808722Z [0m      setter[0m
2025-04-04T18:16:18.1810920Z       [32m  [32mâœ”[39m[0m[90m scope[0m
2025-04-04T18:16:18.1824891Z [0m    other contexts[0m
2025-04-04T18:16:18.1840200Z     [32m  [32mâœ”[39m[0m[90m work[0m
2025-04-04T18:16:18.1854654Z [0m    #add()[0m
2025-04-04T18:16:18.1861732Z     [32m  [32mâœ”[39m[0m[90m does not pollute existing paths[0m
2025-04-04T18:16:18.1877506Z     [32m  [32mâœ”[39m[0m[90m returns the schema instance[0m
2025-04-04T18:16:18.1893506Z     [32m  [32mâœ”[39m[0m[90m returns the schema instance when schema instance is passed[0m
2025-04-04T18:16:18.2012680Z     [32m  [32mâœ”[39m[0m[90m merging nested objects (gh-662)[0m
2025-04-04T18:16:18.2041167Z     [32m  [32mâœ”[39m[0m[90m prefix (gh-1730)[0m
2025-04-04T18:16:18.2055185Z     [32m  [32mâœ”[39m[0m[90m adds another schema (gh-6897)[0m
2025-04-04T18:16:18.2070597Z     [32m  [32mâœ”[39m[0m[90m overwrites existing paths (gh-10203)[0m
2025-04-04T18:16:18.2082553Z [0m    construction[0m
2025-04-04T18:16:18.2092728Z     [32m  [32mâœ”[39m[0m[90m array of object literal missing a type is interpreted as DocumentArray[0m
2025-04-04T18:16:18.2113076Z     [32m  [32mâœ”[39m[0m[90m array of object literal with type.type is interpreted as DocumentArray[0m
2025-04-04T18:16:18.2132568Z     [32m  [32mâœ”[39m[0m[90m does not alter original argument (gh-1364)[0m
2025-04-04T18:16:18.2323423Z     [32m  [32mâœ”[39m[0m[90m properly gets value of plain objects when dealing with refs (gh-1606)[0m
2025-04-04T18:16:18.2353759Z     [32m  [32mâœ”[39m[0m[90m array of of schemas and objects (gh-7218)[0m
2025-04-04T18:16:18.2371315Z     [32m  [32mâœ”[39m[0m[90m copies options from array of schemas[0m
2025-04-04T18:16:18.2389441Z     [32m  [32mâœ”[39m[0m[90m propagates typeKey down to implicitly created single nested schemas (gh-13154)[0m
2025-04-04T18:16:18.2403217Z [0m    property names[0m
2025-04-04T18:16:18.2419695Z     [32m  [32mâœ”[39m[0m[90m that do not conflict do not throw[0m
2025-04-04T18:16:18.2434717Z [0m      reserved keys are log a warning (gh-9010)[0m
2025-04-04T18:16:18.2440961Z       [32m  [32mâœ”[39m[0m[90m `emit` when used as a schema path logs a warning[0m
2025-04-04T18:16:18.2474062Z       [32m  [32mâœ”[39m[0m[90m `emit` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-04T18:16:18.2490328Z       [32m  [32mâœ”[39m[0m[90m `listeners` when used as a schema path logs a warning[0m
2025-04-04T18:16:18.2506305Z       [32m  [32mâœ”[39m[0m[90m `listeners` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-04T18:16:18.2521532Z       [32m  [32mâœ”[39m[0m[90m `removeListener` when used as a schema path logs a warning[0m
2025-04-04T18:16:18.2537212Z       [32m  [32mâœ”[39m[0m[90m `removeListener` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-04T18:16:18.2552859Z       [32m  [32mâœ”[39m[0m[90m `errors` when used as a schema path logs a warning[0m
2025-04-04T18:16:18.2569566Z       [32m  [32mâœ”[39m[0m[90m `errors` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-04T18:16:18.2584859Z       [32m  [32mâœ”[39m[0m[90m `get` when used as a schema path logs a warning[0m
2025-04-04T18:16:18.2600418Z       [32m  [32mâœ”[39m[0m[90m `get` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-04T18:16:18.2615432Z       [32m  [32mâœ”[39m[0m[90m `init` when used as a schema path logs a warning[0m
2025-04-04T18:16:18.2630968Z       [32m  [32mâœ”[39m[0m[90m `init` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-04T18:16:18.2646538Z       [32m  [32mâœ”[39m[0m[90m `isModified` when used as a schema path logs a warning[0m
2025-04-04T18:16:18.2661976Z       [32m  [32mâœ”[39m[0m[90m `isModified` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-04T18:16:18.2679876Z       [32m  [32mâœ”[39m[0m[90m `isNew` when used as a schema path logs a warning[0m
2025-04-04T18:16:18.2698950Z       [32m  [32mâœ”[39m[0m[90m `isNew` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-04T18:16:18.2719665Z       [32m  [32mâœ”[39m[0m[90m `populated` when used as a schema path logs a warning[0m
2025-04-04T18:16:18.2736366Z       [32m  [32mâœ”[39m[0m[90m `populated` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-04T18:16:18.2751425Z       [32m  [32mâœ”[39m[0m[90m `remove` when used as a schema path logs a warning[0m
2025-04-04T18:16:18.2766076Z       [32m  [32mâœ”[39m[0m[90m `remove` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-04T18:16:18.2780746Z       [32m  [32mâœ”[39m[0m[90m `save` when used as a schema path logs a warning[0m
2025-04-04T18:16:18.2796359Z       [32m  [32mâœ”[39m[0m[90m `save` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-04T18:16:18.2810886Z       [32m  [32mâœ”[39m[0m[90m `toObject` when used as a schema path logs a warning[0m
2025-04-04T18:16:18.2825386Z       [32m  [32mâœ”[39m[0m[90m `toObject` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-04T18:16:18.2840147Z       [32m  [32mâœ”[39m[0m[90m `validate` when used as a schema path logs a warning[0m
2025-04-04T18:16:18.2854548Z       [32m  [32mâœ”[39m[0m[90m `validate` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-04T18:16:18.2866263Z [0m    pathType()[0m
2025-04-04T18:16:18.2875980Z     [32m  [32mâœ”[39m[0m[90m handles maps (gh-7448) (gh-7464)[0m
2025-04-04T18:16:18.2887573Z [0m      when called on an explicit real path[0m
2025-04-04T18:16:18.2889366Z       [32m  [32mâœ”[39m[0m[90m returns "real"[0m
2025-04-04T18:16:18.2901031Z [0m      when called on a virtual[0m
2025-04-04T18:16:18.2902092Z       [32m  [32mâœ”[39m[0m[90m returns virtual[0m
2025-04-04T18:16:18.2913687Z [0m      when called on nested structure[0m
2025-04-04T18:16:18.2914739Z       [32m  [32mâœ”[39m[0m[90m returns nested[0m
2025-04-04T18:16:18.2926472Z [0m      when called on undefined path[0m
2025-04-04T18:16:18.2928708Z       [32m  [32mâœ”[39m[0m[90m returns adHocOrUndefined[0m
2025-04-04T18:16:18.2940477Z [0m    remove()[0m
2025-04-04T18:16:18.2947025Z     [32m  [32mâœ”[39m[0m[90m returns the schema instance[0m
2025-04-04T18:16:18.2959571Z     [32m  [32mâœ”[39m[0m[90m removes a single path[0m
2025-04-04T18:16:18.2971745Z     [32m  [32mâœ”[39m[0m[90m removes a nested path[0m
2025-04-04T18:16:18.2983841Z     [32m  [32mâœ”[39m[0m[90m removes all children of a nested path (gh-2398)[0m
2025-04-04T18:16:18.2996183Z     [32m  [32mâœ”[39m[0m[90m removes an array of paths[0m
2025-04-04T18:16:18.3011071Z     [32m  [32mâœ”[39m[0m[90m works properly with virtuals (gh-2398)[0m
2025-04-04T18:16:18.3024668Z     [32m  [32mâœ”[39m[0m[90m methods named toString (gh-4551)[0m
2025-04-04T18:16:18.3038777Z     [32m  [32mâœ”[39m[0m[90m handles default value = 0 (gh-4620)[0m
2025-04-04T18:16:18.3057333Z     [32m  [32mâœ”[39m[0m[90m type: childSchema (gh-5521)[0m
2025-04-04T18:16:18.3072299Z     [32m  [32mâœ”[39m[0m[90m Decimal128 type (gh-4759)[0m
2025-04-04T18:16:18.3089908Z     [32m  [32mâœ”[39m[0m[90m childSchemas prop (gh-5695)[0m
2025-04-04T18:16:18.3101543Z [0m      clone()[0m
2025-04-04T18:16:18.3104640Z       [32m  [32mâœ”[39m[0m[90m copies methods, statics, and query helpers (gh-5752)[0m
2025-04-04T18:16:18.3118710Z       [32m  [32mâœ”[39m[0m[90m copies validators declared with validate() (gh-5607)[0m
2025-04-04T18:16:18.3132760Z       [32m  [32mâœ”[39m[0m[90m copies virtuals (gh-6133)[0m
2025-04-04T18:16:18.3150818Z       [32m  [32mâœ”[39m[0m[90m with nested virtuals (gh-6274)[0m
2025-04-04T18:16:18.3224900Z       [32m  [32mâœ”[39m[0m[90m with alternative option syntaxes (gh-6274)[0m
2025-04-04T18:16:18.3290388Z       [32m  [32mâœ”[39m[0m[90m copies base for using custom types after cloning (gh-7377)[0m
2025-04-04T18:16:18.3306828Z       [32m  [32mâœ”[39m[0m[90m clones schema types (gh-7537)[0m
2025-04-04T18:16:18.3325685Z       [32m  [32mâœ”[39m[0m[90m correctly copies all child schemas (gh-7537)[0m
2025-04-04T18:16:18.3357383Z       [32m  [32mâœ”[39m[0m[90m copies single embedded discriminators (gh-7894)[0m
2025-04-04T18:16:18.3424484Z       [32m  [32mâœ”[39m[0m[90m copies array discriminators (gh-7954)[0m
2025-04-04T18:16:18.3440669Z       [32m  [32mâœ”[39m[0m[90m uses Mongoose instance's Schema constructor (gh-9426)[0m
2025-04-04T18:16:18.3459249Z       [32m  [32mâœ”[39m[0m[90m avoids creating duplicate array constructors when cloning doc array underneath subdoc (gh-13626)[0m
2025-04-04T18:16:18.3483695Z [0m    pick() (gh-8207)[0m
2025-04-04T18:16:18.3490320Z     [32m  [32mâœ”[39m[0m[90m works with nested paths[0m
2025-04-04T18:16:18.3509745Z     [32m  [32mâœ”[39m[0m[90m with single nested paths[0m
2025-04-04T18:16:18.3521885Z [0m    omit() (gh-12931)[0m
2025-04-04T18:16:18.3530068Z     [32m  [32mâœ”[39m[0m[90m works with nested paths[0m
2025-04-04T18:16:18.3546914Z     [32m  [32mâœ”[39m[0m[90m with single nested paths[0m
2025-04-04T18:16:18.3558938Z [0m    path-level custom cast (gh-8300)[0m
2025-04-04T18:16:18.3564696Z     [32m  [32mâœ”[39m[0m[90m with numbers[0m
2025-04-04T18:16:18.3579956Z     [32m  [32mâœ”[39m[0m[90m with function cast error format[0m
2025-04-04T18:16:18.3594197Z     [32m  [32mâœ”[39m[0m[90m with objectids[0m
2025-04-04T18:16:18.3608788Z     [32m  [32mâœ”[39m[0m[90m with boolean[0m
2025-04-04T18:16:18.3620566Z [0m    gh-8849[0m
2025-04-04T18:16:18.3698928Z     [32m  [32mâœ”[39m[0m[90m treats `select: undefined` as not specifying `select` option[0m
2025-04-04T18:16:18.3854825Z     [32m  [32mâœ”[39m[0m[90m treats `select: null` as not specifying `select` option[0m
2025-04-04T18:16:18.3934552Z [0m    mongoose.set(`strictQuery`, value); (gh-6658)[0m
2025-04-04T18:16:18.3937810Z     [32m  [32mâœ”[39m[0m[90m setting `strictQuery` on base sets strictQuery to schema (gh-6658)[0m
2025-04-04T18:16:18.3951648Z     [32m  [32mâœ”[39m[0m[90m `strictQuery` set on base gets overwritten by option set on schema (gh-6658)[0m
2025-04-04T18:16:18.3962856Z [0m    cast option (gh-8407)[0m
2025-04-04T18:16:18.3972799Z     [32m  [32mâœ”[39m[0m[90m disable casting using `false`[0m
2025-04-04T18:16:18.3988689Z     [32m  [32mâœ”[39m[0m[90m custom casters[0m
2025-04-04T18:16:18.4000589Z [0m    jsonSchema() (gh-11162)[0m
2025-04-04T18:16:18.4419140Z     [32m  [32mâœ”[39m[0m[90m handles basic example with only top-level keys[0m[33m (41ms)[0m
2025-04-04T18:16:18.4456753Z     [32m  [32mâœ”[39m[0m[90m handles all primitive data types[0m
2025-04-04T18:16:18.4709192Z     [32m  [32mâœ”[39m[0m[90m handles arrays and document arrays[0m
2025-04-04T18:16:18.4947965Z     [32m  [32mâœ”[39m[0m[90m handles nested paths and subdocuments[0m
2025-04-04T18:16:18.5202792Z     [32m  [32mâœ”[39m[0m[90m handles maps[0m
2025-04-04T18:16:18.5229683Z     [32m  [32mâœ”[39m[0m[90m handles map with required element[0m
2025-04-04T18:16:18.5246338Z     [32m  [32mâœ”[39m[0m[90m handles required enums[0m
2025-04-04T18:16:18.5263682Z     [32m  [32mâœ”[39m[0m[90m throws error on mixed type[0m
2025-04-04T18:16:18.5288492Z 
2025-04-04T18:16:18.5288976Z [0m  SchemaUUID[0m
2025-04-04T18:16:18.5428669Z   [32m  [32mâœ”[39m[0m[90m basic functionality should work[0m
2025-04-04T18:16:18.5457162Z   [32m  [32mâœ”[39m[0m[90m should throw error in case of invalid string[0m
2025-04-04T18:16:18.5641986Z   [32m  [32mâœ”[39m[0m[90m should work with $in and $nin and $all[0m
2025-04-04T18:16:18.5828261Z   [32m  [32mâœ”[39m[0m[90m should not convert to string nullish UUIDs (gh-13032)[0m
2025-04-04T18:16:18.6011086Z   [32m  [32mâœ”[39m[0m[90m works with populate (gh-13267)[0m
2025-04-04T18:16:18.6178491Z   [32m  [32mâœ”[39m[0m[90m handles built-in UUID type (gh-13103)[0m
2025-04-04T18:16:18.6344863Z   [32m  [32mâœ”[39m[0m[90m avoids converting maps of uuids to strings (gh-13657)[0m
2025-04-04T18:16:18.6363963Z   [36m  - should work with $bits* operators[0m
2025-04-04T18:16:18.6364696Z   [36m  - should work with $all operator[0m
2025-04-04T18:16:18.6365471Z   [36m  - should work with $lt, $lte, $gt, $gte operators[0m
2025-04-04T18:16:18.6384033Z 
2025-04-04T18:16:18.6385929Z [0m  schema[0m
2025-04-04T18:16:18.6387145Z [0m    validation[0m
2025-04-04T18:16:18.6394368Z     [32m  [32mâœ”[39m[0m[90m invalid arguments are rejected (1044)[0m
2025-04-04T18:16:18.6400253Z     [32m  [32mâœ”[39m[0m[90m string enum[0m
2025-04-04T18:16:18.6407495Z     [32m  [32mâœ”[39m[0m[90m string regexp[0m
2025-04-04T18:16:18.6416697Z     [32m  [32mâœ”[39m[0m[90m should clear validator errors (gh-2302)[0m
2025-04-04T18:16:18.6427126Z     [32m  [32mâœ”[39m[0m[90m should allow an array of enums (gh-661)[0m
2025-04-04T18:16:18.6432774Z     [32m  [32mâœ”[39m[0m[90m should allow null values for enum gh-3044[0m
2025-04-04T18:16:18.6445980Z     [32m  [32mâœ”[39m[0m[90m should allow an array of subdocuments with enums (gh-3521)[0m
2025-04-04T18:16:18.6459706Z     [32m  [32mâœ”[39m[0m[90m should validate subdocuments subproperty enums (gh-4111)[0m
2025-04-04T18:16:18.6468965Z     [32m  [32mâœ”[39m[0m[90m doesnt do double validation on document arrays (gh-2618)[0m
2025-04-04T18:16:18.6482126Z     [32m  [32mâœ”[39m[0m[90m doesnt do double validation on document arrays underneath nested (gh-5411)[0m
2025-04-04T18:16:18.6493761Z     [32m  [32mâœ”[39m[0m[90m no double validation on set nested docarray (gh-4145)[0m
2025-04-04T18:16:18.6502260Z     [32m  [32mâœ”[39m[0m[90m returns cast errors[0m
2025-04-04T18:16:18.6516072Z     [32m  [32mâœ”[39m[0m[90m handles multiple subdocument errors (gh-2589)[0m
2025-04-04T18:16:18.6546782Z     [32m  [32mâœ”[39m[0m[90m handles subdocument cast errors (gh-2819)[0m
2025-04-04T18:16:18.6554495Z     [32m  [32mâœ”[39m[0m[90m fails when you try to set a nested path to a primitive (gh-2592)[0m
2025-04-04T18:16:18.6561266Z     [32m  [32mâœ”[39m[0m[90m doesnt execute other validators if required fails (gh-2725)[0m
2025-04-04T18:16:18.6566750Z     [32m  [32mâœ”[39m[0m[90m doesnt execute other validators if required fails (gh-3025)[0m
2025-04-04T18:16:18.6572562Z     [32m  [32mâœ”[39m[0m[90m validateSync allows you to filter paths (gh-3153)[0m
2025-04-04T18:16:18.6580398Z     [32m  [32mâœ”[39m[0m[90m validateSync validates array elements when setting pathsToValidate (gh-13159)[0m
2025-04-04T18:16:18.6586648Z     [32m  [32mâœ”[39m[0m[90m adds required validators to the front of the list (gh-2843)[0m
2025-04-04T18:16:18.6593850Z     [32m  [32mâœ”[39m[0m[90m sets path correctly when setter throws exception (gh-2832)[0m
2025-04-04T18:16:18.6603576Z     [32m  [32mâœ”[39m[0m[90m allows you to validate embedded doc that was .create()-ed (gh-2902) (gh-2929)[0m
2025-04-04T18:16:18.6610055Z     [32m  [32mâœ”[39m[0m[90m returns correct kind for user defined custom validators (gh-2885)[0m
2025-04-04T18:16:18.6616320Z     [32m  [32mâœ”[39m[0m[90m enums report kind (gh-3009)[0m
2025-04-04T18:16:18.6631176Z     [32m  [32mâœ”[39m[0m[90m enums on arrays (gh-6102) (gh-8449)[0m
2025-04-04T18:16:18.6638183Z     [32m  [32mâœ”[39m[0m[90m skips conditional required (gh-3539)[0m
2025-04-04T18:16:18.6647019Z     [32m  [32mâœ”[39m[0m[90m handles function for date min/max (gh-7600)[0m
2025-04-04T18:16:18.6653384Z     [32m  [32mâœ”[39m[0m[90m evaluate message function gh6523[0m
2025-04-04T18:16:18.6660518Z     [32m  [32mâœ”[39m[0m[90m Allows for doc to be passed as another parameter (gh-12564)[0m
2025-04-04T18:16:18.6666454Z     [32m  [32mâœ”[39m[0m[90m evaluate message function for required field gh6523[0m
2025-04-04T18:16:18.6683916Z     [32m  [32mâœ”[39m[0m[90m should validate required UUID fields correctly (gh-12991)[0m
2025-04-04T18:16:18.6684852Z [0m      non-required fields[0m
2025-04-04T18:16:18.6689274Z       [32m  [32mâœ”[39m[0m[90m number min and max[0m
2025-04-04T18:16:18.6690268Z [0m        are validated correctly[0m
2025-04-04T18:16:18.6795718Z         [32m  [32mâœ”[39m[0m[90m and can be set to "undefined" (gh-1594)[0m
2025-04-04T18:16:18.6810794Z [0m      required[0m
2025-04-04T18:16:18.6815067Z       [32m  [32mâœ”[39m[0m[90m string required[0m
2025-04-04T18:16:18.6819761Z       [32m  [32mâœ”[39m[0m[90m string conditional required[0m
2025-04-04T18:16:18.6823564Z       [32m  [32mâœ”[39m[0m[90m number required[0m
2025-04-04T18:16:18.6827982Z       [32m  [32mâœ”[39m[0m[90m date required[0m
2025-04-04T18:16:18.6845388Z       [32m  [32mâœ”[39m[0m[90m date not empty string (gh-3132)[0m
2025-04-04T18:16:18.6847209Z       [32m  [32mâœ”[39m[0m[90m objectid required[0m
2025-04-04T18:16:18.6847888Z       [32m  [32mâœ”[39m[0m[90m array required[0m
2025-04-04T18:16:18.6848617Z       [32m  [32mâœ”[39m[0m[90m array required custom required[0m
2025-04-04T18:16:18.6850532Z       [32m  [32mâœ”[39m[0m[90m boolean required[0m
2025-04-04T18:16:18.6853429Z       [32m  [32mâœ”[39m[0m[90m mixed required[0m
2025-04-04T18:16:18.6854241Z [0m      async[0m
2025-04-04T18:16:18.6910787Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:18.6966987Z       [32m  [32mâœ”[39m[0m[90m scope[0m
2025-04-04T18:16:18.6972867Z       [32m  [32mâœ”[39m[0m[90m doValidateSync should ignore async function and script waiting for promises (gh-4885)[0m
2025-04-04T18:16:18.6974239Z [0m      messages[0m
2025-04-04T18:16:18.6974928Z [0m        are customizable[0m
2025-04-04T18:16:18.6992911Z         [32m  [32mâœ”[39m[0m[90m within schema definitions[0m
2025-04-04T18:16:18.7000816Z         [32m  [32mâœ”[39m[0m[90m for custom validators[0m
2025-04-04T18:16:18.7007235Z         [32m  [32mâœ”[39m[0m[90m custom validators with promise (gh-5171)[0m
2025-04-04T18:16:18.7013668Z         [32m  [32mâœ”[39m[0m[90m supports custom properties (gh-2132)[0m
2025-04-04T18:16:18.7021657Z         [32m  [32mâœ”[39m[0m[90m supports dynamic message for validators with callback (gh-1936)[0m
2025-04-04T18:16:18.7022547Z [0m      types[0m
2025-04-04T18:16:18.7023085Z [0m        are customizable[0m
2025-04-04T18:16:18.7029674Z         [32m  [32mâœ”[39m[0m[90m for single custom validators[0m
2025-04-04T18:16:18.7036590Z         [32m  [32mâœ”[39m[0m[90m for many custom validators[0m
2025-04-04T18:16:18.7038064Z [0m      `enum` accepts an object to support TypeScript enums (gh-9546) (gh-9535)[0m
2025-04-04T18:16:18.7043135Z       [32m  [32mâœ”[39m[0m[90m strings[0m
2025-04-04T18:16:18.7048975Z       [32m  [32mâœ”[39m[0m[90m numbers[0m
2025-04-04T18:16:18.7056506Z       [32m  [32mâœ”[39m[0m[90m arrays[0m
2025-04-04T18:16:18.7064079Z       [32m  [32mâœ”[39m[0m[90m passes when using valid data[0m
2025-04-04T18:16:18.7064515Z 
2025-04-04T18:16:18.7064912Z [0m  SchemaType.cast() (gh-7045)[0m
2025-04-04T18:16:18.7069777Z   [32m  [32mâœ”[39m[0m[90m with inheritance[0m
2025-04-04T18:16:18.7079847Z   [32m  [32mâœ”[39m[0m[90m handles objectid[0m
2025-04-04T18:16:18.7082493Z   [32m  [32mâœ”[39m[0m[90m handles disabling casting[0m
2025-04-04T18:16:18.7088572Z   [32m  [32mâœ”[39m[0m[90m handles boolean[0m
2025-04-04T18:16:18.7091361Z   [32m  [32mâœ”[39m[0m[90m handles disabling casting[0m
2025-04-04T18:16:18.7092128Z [0m    string[0m
2025-04-04T18:16:18.7102703Z     [32m  [32mâœ”[39m[0m[90m supports custom cast functions[0m
2025-04-04T18:16:18.7105588Z     [32m  [32mâœ”[39m[0m[90m supports disabling casting[0m
2025-04-04T18:16:18.7106445Z [0m    date[0m
2025-04-04T18:16:18.7114225Z     [32m  [32mâœ”[39m[0m[90m supports custom cast functions[0m
2025-04-04T18:16:18.7117312Z     [32m  [32mâœ”[39m[0m[90m supports disabling casting[0m
2025-04-04T18:16:18.7118011Z [0m    decimal128[0m
2025-04-04T18:16:18.7128358Z     [32m  [32mâœ”[39m[0m[90m supports custom cast functions[0m
2025-04-04T18:16:18.7135269Z     [32m  [32mâœ”[39m[0m[90m supports disabling casting[0m
2025-04-04T18:16:18.7136042Z 
2025-04-04T18:16:18.7137741Z [0m  schematype[0m
2025-04-04T18:16:18.7140995Z   [32m  [32mâœ”[39m[0m[90m honors the selected option[0m
2025-04-04T18:16:18.7146571Z   [32m  [32mâœ”[39m[0m[90m properly handles specifying index in combination with unique or sparse[0m
2025-04-04T18:16:18.7151697Z   [32m  [32mâœ”[39m[0m[90m handles index: false with unique, sparse, text set to false (gh-7620)[0m
2025-04-04T18:16:18.7155242Z   [32m  [32mâœ”[39m[0m[90m handles unique, sparse, text set to false with no index property (gh-10738)[0m
2025-04-04T18:16:18.7158614Z   [32m  [32mâœ”[39m[0m[90m handles function as positional message arg (gh-8360)[0m
2025-04-04T18:16:18.7162176Z   [32m  [32mâœ”[39m[0m[90m merges default validators (gh-14070)[0m
2025-04-04T18:16:18.7167760Z   [32m  [32mâœ”[39m[0m[90m demonstrates the `validateAll()` function (gh-6910)[0m
2025-04-04T18:16:18.7170137Z   [32m  [32mâœ”[39m[0m[90m supports getEmbeddedSchemaType() (gh-8389)[0m
2025-04-04T18:16:18.7171166Z [0m    checkRequired()[0m
2025-04-04T18:16:18.7182513Z     [32m  [32mâœ”[39m[0m[90m with inherits (gh-7486)[0m
2025-04-04T18:16:18.7183160Z [0m    clone()[0m
2025-04-04T18:16:18.7187951Z     [32m  [32mâœ”[39m[0m[90m clones added default[0m
2025-04-04T18:16:18.7190037Z     [32m  [32mâœ”[39m[0m[90m clones added getters[0m
2025-04-04T18:16:18.7193057Z     [32m  [32mâœ”[39m[0m[90m clones added immutable[0m
2025-04-04T18:16:18.7195075Z     [32m  [32mâœ”[39m[0m[90m clones added index[0m
2025-04-04T18:16:18.7197207Z     [32m  [32mâœ”[39m[0m[90m clones added ref[0m
2025-04-04T18:16:18.7199392Z     [32m  [32mâœ”[39m[0m[90m clones added required[0m
2025-04-04T18:16:18.7201517Z     [32m  [32mâœ”[39m[0m[90m clones added select: false[0m
2025-04-04T18:16:18.7203652Z     [32m  [32mâœ”[39m[0m[90m clones added setter[0m
2025-04-04T18:16:18.7205628Z     [32m  [32mâœ”[39m[0m[90m clones added sparse[0m
2025-04-04T18:16:18.7214813Z     [32m  [32mâœ”[39m[0m[90m clones added sparse (index option)[0m
2025-04-04T18:16:18.7215915Z     [32m  [32mâœ”[39m[0m[90m clones added text (index option)[0m
2025-04-04T18:16:18.7216815Z     [32m  [32mâœ”[39m[0m[90m clones added unique (index option)[0m
2025-04-04T18:16:18.7217646Z     [32m  [32mâœ”[39m[0m[90m clones added validator[0m
2025-04-04T18:16:18.7218442Z     [32m  [32mâœ”[39m[0m[90m clones updated caster[0m
2025-04-04T18:16:18.7219064Z [0m    get()[0m
2025-04-04T18:16:18.7219779Z     [32m  [32mâœ”[39m[0m[90m SchemaArray has a `get` method[0m
2025-04-04T18:16:18.7220632Z     [32m  [32mâœ”[39m[0m[90m SchemaBigInt has a `get` method[0m
2025-04-04T18:16:18.7221397Z     [32m  [32mâœ”[39m[0m[90m SchemaBoolean has a `get` method[0m
2025-04-04T18:16:18.7222189Z     [32m  [32mâœ”[39m[0m[90m SchemaBuffer has a `get` method[0m
2025-04-04T18:16:18.7222957Z     [32m  [32mâœ”[39m[0m[90m SchemaDate has a `get` method[0m
2025-04-04T18:16:18.7223735Z     [32m  [32mâœ”[39m[0m[90m SchemaDecimal128 has a `get` method[0m
2025-04-04T18:16:18.7224551Z     [32m  [32mâœ”[39m[0m[90m SchemaDecimal128 has a `get` method[0m
2025-04-04T18:16:18.7225367Z     [32m  [32mâœ”[39m[0m[90m SchemaDocumentArray has a `get` method[0m
2025-04-04T18:16:18.7226321Z     [32m  [32mâœ”[39m[0m[90m SchemaMap has a `get` method[0m
2025-04-04T18:16:18.7227086Z     [32m  [32mâœ”[39m[0m[90m SchemaMixed has a `get` method[0m
2025-04-04T18:16:18.7227829Z     [32m  [32mâœ”[39m[0m[90m SchemaNumber has a `get` method[0m
2025-04-04T18:16:18.7228601Z     [32m  [32mâœ”[39m[0m[90m SchemaObjectId has a `get` method[0m
2025-04-04T18:16:18.7229356Z     [32m  [32mâœ”[39m[0m[90m SchemaString has a `get` method[0m
2025-04-04T18:16:18.7230141Z     [32m  [32mâœ”[39m[0m[90m SchemaSubdocument has a `get` method[0m
2025-04-04T18:16:18.7230916Z     [32m  [32mâœ”[39m[0m[90m SchemaUUID has a `get` method[0m
2025-04-04T18:16:18.7231658Z     [32m  [32mâœ”[39m[0m[90m SchemaDouble has a `get` method[0m
2025-04-04T18:16:18.7232654Z     [32m  [32mâœ”[39m[0m[90m SchemaInt32 has a `get` method[0m
2025-04-04T18:16:18.7233414Z     [32m  [32mâœ”[39m[0m[90m SchemaObjectId has a `get` method[0m
2025-04-04T18:16:18.7234166Z     [32m  [32mâœ”[39m[0m[90m SchemaMixed has a `get` method[0m
2025-04-04T18:16:18.7234909Z     [32m  [32mâœ”[39m[0m[90m SchemaBoolean has a `get` method[0m
2025-04-04T18:16:18.7235713Z     [32m  [32mâœ”[39m[0m[90m SchemaObjectId has a `get` method[0m
2025-04-04T18:16:18.7236496Z [0m    set()[0m
2025-04-04T18:16:18.7237246Z     [32m  [32mâœ”[39m[0m[90m SchemaArray, when given a default option, set its[0m
2025-04-04T18:16:18.7238250Z     [32m  [32mâœ”[39m[0m[90m SchemaBigInt, when given a default option, set its[0m
2025-04-04T18:16:18.7239250Z     [32m  [32mâœ”[39m[0m[90m SchemaBoolean, when given a default option, set its[0m
2025-04-04T18:16:18.7240227Z     [32m  [32mâœ”[39m[0m[90m SchemaBuffer, when given a default option, set its[0m
2025-04-04T18:16:18.7241225Z     [32m  [32mâœ”[39m[0m[90m SchemaDate, when given a default option, set its[0m
2025-04-04T18:16:18.7242213Z     [32m  [32mâœ”[39m[0m[90m SchemaDecimal128, when given a default option, set its[0m
2025-04-04T18:16:18.7243227Z     [32m  [32mâœ”[39m[0m[90m SchemaDecimal128, when given a default option, set its[0m
2025-04-04T18:16:18.7244413Z     [32m  [32mâœ”[39m[0m[90m SchemaMap, when given a default option, set its[0m
2025-04-04T18:16:18.7245361Z     [32m  [32mâœ”[39m[0m[90m SchemaMixed, when given a default option, set its[0m
2025-04-04T18:16:18.7246536Z     [32m  [32mâœ”[39m[0m[90m SchemaNumber, when given a default option, set its[0m
2025-04-04T18:16:18.7248251Z     [32m  [32mâœ”[39m[0m[90m SchemaObjectId, when given a default option, set its[0m
2025-04-04T18:16:18.7249758Z     [32m  [32mâœ”[39m[0m[90m SchemaString, when given a default option, set its[0m
2025-04-04T18:16:18.7251391Z     [32m  [32mâœ”[39m[0m[90m SchemaUUID, when given a default option, set its[0m
2025-04-04T18:16:18.7253132Z     [32m  [32mâœ”[39m[0m[90m SchemaDouble, when given a default option, set its[0m
2025-04-04T18:16:18.7254731Z     [32m  [32mâœ”[39m[0m[90m SchemaInt32, when given a default option, set its[0m
2025-04-04T18:16:18.7256266Z     [32m  [32mâœ”[39m[0m[90m SchemaObjectId, when given a default option, set its[0m
2025-04-04T18:16:18.7257632Z     [32m  [32mâœ”[39m[0m[90m SchemaMixed, when given a default option, set its[0m
2025-04-04T18:16:18.7258942Z     [32m  [32mâœ”[39m[0m[90m SchemaBoolean, when given a default option, set its[0m
2025-04-04T18:16:18.7260180Z     [32m  [32mâœ”[39m[0m[90m SchemaObjectId, when given a default option, set its[0m
2025-04-04T18:16:18.7260957Z [0m      SchemaType.set()[0m
2025-04-04T18:16:18.7261661Z       [32m  [32mâœ”[39m[0m[90m SchemaType.set, is a function[0m
2025-04-04T18:16:18.7413387Z       [32m  [32mâœ”[39m[0m[90m should allow setting values to a given property gh-13510[0m
2025-04-04T18:16:18.7413942Z 
2025-04-04T18:16:18.7414397Z [0m  asyncIterator[0m
2025-04-04T18:16:18.7656463Z   [32m  [32mâœ”[39m[0m[90m supports for/await/of on a query (gh-6737)[0m
2025-04-04T18:16:18.7698519Z   [32m  [32mâœ”[39m[0m[90m supports for/await/of on a aggregation (gh-6737)[0m
2025-04-04T18:16:18.7739067Z   [32m  [32mâœ”[39m[0m[90m supports for/await/of on a query cursor (gh-9403)[0m
2025-04-04T18:16:18.7778678Z   [32m  [32mâœ”[39m[0m[90m supports for/await/of on a aggregation cursor (gh-9403)[0m
2025-04-04T18:16:18.7796927Z 
2025-04-04T18:16:18.7797359Z [0m  Cast Tutorial[0m
2025-04-04T18:16:18.7926302Z   [32m  [32mâœ”[39m[0m[90m get and set[0m
2025-04-04T18:16:18.7936519Z   [32m  [32mâœ”[39m[0m[90m cast values[0m
2025-04-04T18:16:18.7942196Z   [32m  [32mâœ”[39m[0m[90m cast error[0m
2025-04-04T18:16:18.7951664Z   [32m  [32mâœ”[39m[0m[90m not in schema[0m
2025-04-04T18:16:18.7964385Z   [32m  [32mâœ”[39m[0m[90m strictQuery true[0m
2025-04-04T18:16:18.7974285Z   [32m  [32mâœ”[39m[0m[90m strictQuery throw[0m
2025-04-04T18:16:18.7987974Z   [32m  [32mâœ”[39m[0m[90m strictQuery removes casted empty objects[0m
2025-04-04T18:16:18.7995584Z   [32m  [32mâœ”[39m[0m[90m implicit in[0m
2025-04-04T18:16:18.8013939Z 
2025-04-04T18:16:18.8014322Z [0m  custom casting[0m
2025-04-04T18:16:18.8023416Z   [32m  [32mâœ”[39m[0m[90m casting error[0m
2025-04-04T18:16:18.8030135Z   [32m  [32mâœ”[39m[0m[90m casting override[0m
2025-04-04T18:16:18.8030428Z 
2025-04-04T18:16:18.8031185Z [0m  Date Tutorial[0m
2025-04-04T18:16:18.8056958Z   [32m  [32mâœ”[39m[0m[90m Example 1.2: casts strings to dates[0m
2025-04-04T18:16:18.8065301Z   [32m  [32mâœ”[39m[0m[90m Example 1.3: cast error[0m
2025-04-04T18:16:18.8075953Z   [32m  [32mâœ”[39m[0m[90m Example 1.2.1: min, max[0m
2025-04-04T18:16:18.8098992Z   [32m  [32mâœ”[39m[0m[90m Example 1.4.1: moment[0m
2025-04-04T18:16:18.8104880Z   [32m  [32mâœ”[39m[0m[90m Example 1.4.3: numeric strings[0m
2025-04-04T18:16:18.8105313Z [0m    Example 1.3.1[0m
2025-04-04T18:16:18.8316532Z     [32m  [32mâœ”[39m[0m[90m date queries[0m
2025-04-04T18:16:18.8336993Z 
2025-04-04T18:16:18.8337420Z [0m  debug: shell[0m
2025-04-04T18:16:18.8436708Z   [32m  [32mâœ”[39m[0m[90m no-shell[0m
2025-04-04T18:16:18.8447236Z   [32m  [32mâœ”[39m[0m[90m shell[0m
2025-04-04T18:16:18.8530751Z   [32m  [32mâœ”[39m[0m[90m should allow to set the `debug` option on a per-connection basis (gh-12700)[0m
2025-04-04T18:16:18.8667070Z   [32m  [32mâœ”[39m[0m[90m should avoid sending null session option with document ops (gh-13052)[0m
2025-04-04T18:16:18.8704271Z 
2025-04-04T18:16:18.8704601Z [0m  defaults docs[0m
2025-04-04T18:16:18.8865519Z   [32m  [32mâœ”[39m[0m[90m Declaring defaults in your schema[0m
2025-04-04T18:16:18.8872132Z   [32m  [32mâœ”[39m[0m[90m Default functions[0m
2025-04-04T18:16:18.8906431Z   [32m  [32mâœ”[39m[0m[90m The `setDefaultsOnInsert` option[0m
2025-04-04T18:16:18.8913948Z   [32m  [32mâœ”[39m[0m[90m Default functions and `this`[0m
2025-04-04T18:16:18.8927717Z 
2025-04-04T18:16:18.8928310Z [0m  discriminator docs[0m
2025-04-04T18:16:18.8979784Z   [32m  [32mâœ”[39m[0m[90m The `model.discriminator()` function[0m
2025-04-04T18:16:18.9186577Z   [32m  [32mâœ”[39m[0m[90m Discriminators save to the Event model's collection[0m
2025-04-04T18:16:18.9195199Z   [32m  [32mâœ”[39m[0m[90m Discriminator keys[0m
2025-04-04T18:16:18.9224831Z   [32m  [32mâœ”[39m[0m[90m Update discriminator key[0m
2025-04-04T18:16:18.9248819Z   [32m  [32mâœ”[39m[0m[90m use overwriteDiscriminatorKey to change discriminator key[0m
2025-04-04T18:16:18.9277747Z   [32m  [32mâœ”[39m[0m[90m Discriminators add the discriminator key to queries[0m
2025-04-04T18:16:18.9297961Z   [32m  [32mâœ”[39m[0m[90m Discriminators copy pre and post hooks[0m
2025-04-04T18:16:18.9312862Z   [32m  [32mâœ”[39m[0m[90m Handling custom _id fields[0m
2025-04-04T18:16:18.9545065Z   [32m  [32mâœ”[39m[0m[90m Using discriminators with `Model.create()`[0m
2025-04-04T18:16:18.9666447Z   [32m  [32mâœ”[39m[0m[90m Embedded discriminators in arrays[0m
2025-04-04T18:16:18.9791791Z   [32m  [32mâœ”[39m[0m[90m Recursive embedded discriminators in arrays[0m
2025-04-04T18:16:18.9811433Z   [32m  [32mâœ”[39m[0m[90m Single nested discriminators[0m
2025-04-04T18:16:18.9856245Z 
2025-04-04T18:16:18.9856980Z [0m  Tutorial: findOneAndUpdate()[0m
2025-04-04T18:16:19.0112548Z   [32m  [32mâœ”[39m[0m[90m basic case[0m
2025-04-04T18:16:19.0140864Z   [32m  [32mâœ”[39m[0m[90m new option[0m
2025-04-04T18:16:19.0169512Z   [32m  [32mâœ”[39m[0m[90m returnOriginal option[0m
2025-04-04T18:16:19.0215659Z   [32m  [32mâœ”[39m[0m[90m save race condition[0m
2025-04-04T18:16:19.0252094Z   [32m  [32mâœ”[39m[0m[90m upsert[0m
2025-04-04T18:16:19.0286122Z   [32m  [32mâœ”[39m[0m[90m includeResultMetadata[0m
2025-04-04T18:16:19.0304268Z 
2025-04-04T18:16:19.0304821Z [0m  getters/setters[0m
2025-04-04T18:16:19.0320685Z [0m    getters[0m
2025-04-04T18:16:19.0329212Z     [32m  [32mâœ”[39m[0m[90m basic example[0m
2025-04-04T18:16:19.0342039Z     [32m  [32mâœ”[39m[0m[90m skip[0m
2025-04-04T18:16:19.0348499Z [0m    setters[0m
2025-04-04T18:16:19.0356766Z     [32m  [32mâœ”[39m[0m[90m basic[0m
2025-04-04T18:16:19.0574319Z     [32m  [32mâœ”[39m[0m[90m updates[0m
2025-04-04T18:16:19.0597716Z     [32m  [32mâœ”[39m[0m[90m update skip[0m
2025-04-04T18:16:19.0599402Z     [32m  [32mâœ”[39m[0m[90m vs ES6[0m
2025-04-04T18:16:19.0599964Z [0m    localization[0m
2025-04-04T18:16:19.0793795Z     [32m  [32mâœ”[39m[0m[90m locale[0m
2025-04-04T18:16:19.0814344Z 
2025-04-04T18:16:19.0814819Z [0m  Lean Tutorial[0m
2025-04-04T18:16:19.0962993Z   [32m  [32mâœ”[39m[0m[90m compare sizes lean vs not lean[0m
2025-04-04T18:16:19.0984676Z   [32m  [32mâœ”[39m[0m[90m compare types[0m
2025-04-04T18:16:19.1087430Z   [32m  [32mâœ”[39m[0m[90m getters and virtuals[0m
2025-04-04T18:16:19.1203790Z   [32m  [32mâœ”[39m[0m[90m conventional populate[0m
2025-04-04T18:16:19.1253463Z   [32m  [32mâœ”[39m[0m[90m virtual populate[0m
2025-04-04T18:16:19.1284407Z   [32m  [32mâœ”[39m[0m[90m bigint[0m
2025-04-04T18:16:19.1304486Z 
2025-04-04T18:16:19.1304875Z [0m  promises docs[0m
2025-04-04T18:16:19.1421886Z   [32m  [32mâœ”[39m[0m[90m Built-in Promises[0m
2025-04-04T18:16:19.1439174Z   [32m  [32mâœ”[39m[0m[90m Queries are not promises[0m
2025-04-04T18:16:19.1451102Z   [32m  [32mâœ”[39m[0m[90m Queries are thenable[0m
2025-04-04T18:16:19.1466236Z   [32m  [32mâœ”[39m[0m[90m Should You Use `exec()` With `await`?[0m
2025-04-04T18:16:19.1483680Z 
2025-04-04T18:16:19.1483977Z [0m  Advanced Schemas[0m
2025-04-04T18:16:19.1583611Z   [32m  [32mâœ”[39m[0m[90m Creating from ES6 Classes Using `loadClass()`[0m
2025-04-04T18:16:19.1599998Z 
2025-04-04T18:16:19.1600579Z [0m  schemaTypes[0m
2025-04-04T18:16:19.1620865Z   [32m  [32mâœ”[39m[0m[90m Creating a Basic Custom Schema Type[0m
2025-04-04T18:16:19.1636977Z 
2025-04-04T18:16:19.1637560Z [0m  transactions[0m
2025-04-04T18:16:19.1639844Z   [36m  - basic example[0m
2025-04-04T18:16:19.1640407Z   [36m  - withTransaction[0m
2025-04-04T18:16:19.1640874Z   [36m  - abort[0m
2025-04-04T18:16:19.1641271Z   [36m  - save[0m
2025-04-04T18:16:19.1641731Z   [36m  - create (gh-6909)[0m
2025-04-04T18:16:19.1642226Z   [36m  - aggregate[0m
2025-04-04T18:16:19.1642652Z   [36m  - deleteOne and deleteMany (gh-7857)(gh-6805)[0m
2025-04-04T18:16:19.1643082Z   [36m  - remove, update, updateOne (gh-7455)[0m
2025-04-04T18:16:19.1643425Z   [36m  - distinct (gh-8006)[0m
2025-04-04T18:16:19.1643758Z   [36m  - save() with no changes (gh-8571)[0m
2025-04-04T18:16:19.1644215Z   [36m  - transaction() resets $isNew on error[0m
2025-04-04T18:16:19.1644909Z   [36m  - transaction() resets $isNew between retries (gh-13698)[0m
2025-04-04T18:16:19.1645576Z   [36m  - handles resetting array state with $set atomic (gh-13698)[0m
2025-04-04T18:16:19.1646969Z   [36m  - transaction() retains modified status for documents created outside of the transaction then modified inside the transaction (gh-13973)[0m
2025-04-04T18:16:19.1647750Z   [36m  - transaction() avoids duplicating atomic operations (gh-14848)[0m
2025-04-04T18:16:19.1648314Z   [36m  - doesnt apply schema write concern to transaction operations (gh-11382)[0m
2025-04-04T18:16:19.1649079Z   [36m  - allows custom transaction wrappers to store and reset document state with $createModifiedPathsSnapshot (gh-14268)[0m
2025-04-04T18:16:19.1649817Z   [36m  - throws error if using `create()` with multiple docs in a transaction (gh-15091)[0m
2025-04-04T18:16:19.1650288Z [0m    populate (gh-6754)[0m
2025-04-04T18:16:19.1650635Z     [36m  - `populate()` uses the querys session[0m
2025-04-04T18:16:19.1651000Z     [36m  - can override `populate()` session[0m
2025-04-04T18:16:19.1651464Z     [36m  - `Document#populate()` uses the documents `$session()` by default[0m
2025-04-04T18:16:19.1651967Z     [36m  - `Document#populate()` supports overwriting the session[0m
2025-04-04T18:16:19.1652651Z [0m    transactionAsyncLocalStorage option[0m
2025-04-04T18:16:19.1653216Z     [36m  - transaction() sets `session` by default if transactionAsyncLocalStorage option is set[0m
2025-04-04T18:16:19.1653546Z 
2025-04-04T18:16:19.1653679Z [0m  validation docs[0m
2025-04-04T18:16:19.1664500Z   [32m  [32mâœ”[39m[0m[90m Validation[0m
2025-04-04T18:16:19.1682451Z   [32m  [32mâœ”[39m[0m[90m Built-in Validators[0m
2025-04-04T18:16:19.1694858Z   [32m  [32mâœ”[39m[0m[90m Custom Error Messages[0m
2025-04-04T18:16:19.2004497Z   [32m  [32mâœ”[39m[0m[90m The `unique` Option is Not a Validator[0m
2025-04-04T18:16:19.2013744Z   [32m  [32mâœ”[39m[0m[90m Custom Validators[0m
2025-04-04T18:16:19.2024885Z   [32m  [32mâœ”[39m[0m[90m Async Custom Validators[0m
2025-04-04T18:16:19.2035006Z   [32m  [32mâœ”[39m[0m[90m Validation Errors[0m
2025-04-04T18:16:19.2046869Z   [32m  [32mâœ”[39m[0m[90m Cast Errors[0m
2025-04-04T18:16:19.2056007Z   [32m  [32mâœ”[39m[0m[90m Cast Error Message Overwrite[0m
2025-04-04T18:16:19.2065263Z   [32m  [32mâœ”[39m[0m[90m Cast Error Message Function Overwrite[0m
2025-04-04T18:16:19.2076490Z   [32m  [32mâœ”[39m[0m[90m Global SchemaType Validation[0m
2025-04-04T18:16:19.2089502Z   [32m  [32mâœ”[39m[0m[90m Required Validators On Nested Objects[0m
2025-04-04T18:16:19.2127480Z   [32m  [32mâœ”[39m[0m[90m Update Validators[0m
2025-04-04T18:16:19.2138552Z   [32m  [32mâœ”[39m[0m[90m Update Validators and `this`[0m
2025-04-04T18:16:19.2150622Z   [32m  [32mâœ”[39m[0m[90m Update Validators Only Run On Updated Paths[0m
2025-04-04T18:16:19.2434175Z   [32m  [32mâœ”[39m[0m[90m Update Validators Only Run For Some Operations[0m
2025-04-04T18:16:19.2451958Z 
2025-04-04T18:16:19.2452438Z [0m  Virtuals[0m
2025-04-04T18:16:19.2492081Z   [32m  [32mâœ”[39m[0m[90m basic[0m
2025-04-04T18:16:19.2500248Z   [32m  [32mâœ”[39m[0m[90m fullName[0m
2025-04-04T18:16:19.2508377Z   [32m  [32mâœ”[39m[0m[90m toJSON[0m
2025-04-04T18:16:19.2539225Z   [32m  [32mâœ”[39m[0m[90m lean[0m
2025-04-04T18:16:19.2560619Z   [32m  [32mâœ”[39m[0m[90m in query[0m
2025-04-04T18:16:19.2679152Z   [32m  [32mâœ”[39m[0m[90m populate[0m
2025-04-04T18:16:19.2686754Z   [32m  [32mâœ”[39m[0m[90m schema-options fullName[0m
2025-04-04T18:16:19.2739339Z   [32m  [32mâœ”[39m[0m[90m schema-options populate[0m
2025-04-04T18:16:19.2748168Z 
2025-04-04T18:16:19.2748595Z [0m  stringifyFunctionOperators[0m
2025-04-04T18:16:19.2751422Z   [32m  [32mâœ”[39m[0m[90m converts accumulator args to strings (gh-9364)[0m
2025-04-04T18:16:19.2753191Z   [32m  [32mâœ”[39m[0m[90m converts function args to strings (gh-9897)[0m
2025-04-04T18:16:19.2753667Z 
2025-04-04T18:16:19.2753897Z [0m  prepareDiscriminatorPipeline[0m
2025-04-04T18:16:19.2756178Z   [32m  [32mâœ”[39m[0m[90m handles case where initial $match includes the discriminator key (gh-12478)[0m
2025-04-04T18:16:19.2756799Z 
2025-04-04T18:16:19.2757009Z [0m  applyWriteConcern[0m
2025-04-04T18:16:19.2769620Z   [32m  [32mâœ”[39m[0m[90m should not overwrite user specified writeConcern options (gh-13592)[0m
2025-04-04T18:16:19.2785464Z 
2025-04-04T18:16:19.2785731Z [0m  arrayDepth[0m
2025-04-04T18:16:19.2787381Z   [32m  [32mâœ”[39m[0m[90m non-array[0m
2025-04-04T18:16:19.2788431Z   [32m  [32mâœ”[39m[0m[90m simple array with no element[0m
2025-04-04T18:16:19.2789461Z   [32m  [32mâœ”[39m[0m[90m simple array with one element[0m
2025-04-04T18:16:19.2790561Z   [32m  [32mâœ”[39m[0m[90m simple array with many elements[0m
2025-04-04T18:16:19.2791590Z   [32m  [32mâœ”[39m[0m[90m simple array with many elements[0m
2025-04-04T18:16:19.2792602Z   [32m  [32mâœ”[39m[0m[90m complex array with one sub-Array[0m
2025-04-04T18:16:19.2793696Z   [32m  [32mâœ”[39m[0m[90m complex array with deeply nested sub-Arrays[0m
2025-04-04T18:16:19.2794735Z   [32m  [32mâœ”[39m[0m[90m complex array with deeply nested sub-Arrays[0m
2025-04-04T18:16:19.2795969Z   [32m  [32mâœ”[39m[0m[90m complex array with deeply nested sub-Arrays[0m
2025-04-04T18:16:19.2796688Z 
2025-04-04T18:16:19.2797291Z [0m  clone[0m
2025-04-04T18:16:19.2799336Z   [32m  [32mâœ”[39m[0m[90m retains RegExp options gh-1355[0m
2025-04-04T18:16:19.2800741Z   [32m  [32mâœ”[39m[0m[90m clones objects created with Object.create(null)[0m
2025-04-04T18:16:19.2802249Z   [32m  [32mâœ”[39m[0m[90m doesnt minimize empty objects in arrays to null (gh-7322)[0m
2025-04-04T18:16:19.2805189Z   [32m  [32mâœ”[39m[0m[90m skips cloning types that have `toBSON()` if `bson` is set (gh-8299)[0m
2025-04-04T18:16:19.2806254Z [0m    falsy[0m
2025-04-04T18:16:19.2806852Z     [32m  [32mâœ”[39m[0m[90m is null when null[0m
2025-04-04T18:16:19.2807610Z     [32m  [32mâœ”[39m[0m[90m is false when false[0m
2025-04-04T18:16:19.2808464Z     [32m  [32mâœ”[39m[0m[90m is undefined when undefined[0m
2025-04-04T18:16:19.2809397Z     [32m  [32mâœ”[39m[0m[90m is 0 when 0[0m
2025-04-04T18:16:19.2809987Z [0m    Array[0m
2025-04-04T18:16:19.2811444Z     [32m  [32mâœ”[39m[0m[90m clones first level[0m
2025-04-04T18:16:19.2813099Z     [32m  [32mâœ”[39m[0m[90m clones deeper[0m
2025-04-04T18:16:19.2813751Z [0m    mongoose object[0m
2025-04-04T18:16:19.2816246Z     [32m  [32mâœ”[39m[0m[90m use toObject[0m
2025-04-04T18:16:19.2818275Z     [32m  [32mâœ”[39m[0m[90m use toJSON[0m
2025-04-04T18:16:19.2820713Z     [32m  [32mâœ”[39m[0m[90m skipSingleNestedGetters[0m
2025-04-04T18:16:19.2821759Z [0m    global objects[0m
2025-04-04T18:16:19.2822380Z [0m      constructor is Object[0m
2025-04-04T18:16:19.2823190Z       [32m  [32mâœ”[39m[0m[90m !minimize || isArrayChild[0m
2025-04-04T18:16:19.2824355Z       [32m  [32mâœ”[39m[0m[90m !constructor && !minimize || isArrayChild[0m
2025-04-04T18:16:19.2826307Z       [32m  [32mâœ”[39m[0m[90m minimize && !isArrayChild && hasKey[0m
2025-04-04T18:16:19.2827679Z       [32m  [32mâœ”[39m[0m[90m minimize and !isArrayChild && !hasKey[0m
2025-04-04T18:16:19.2828220Z [0m      constructor is Data[0m
2025-04-04T18:16:19.2829249Z       [32m  [32mâœ”[39m[0m[90m return new equal date [0m
2025-04-04T18:16:19.2829757Z [0m      constructor is RegExp[0m
2025-04-04T18:16:19.2831371Z       [32m  [32mâœ”[39m[0m[90m return new equal date [0m
2025-04-04T18:16:19.2832233Z [0m    mongo object[0m
2025-04-04T18:16:19.2833271Z     [32m  [32mâœ”[39m[0m[90m is instance of ObjectId[0m
2025-04-04T18:16:19.2833970Z [0m    schema type[0m
2025-04-04T18:16:19.2835292Z     [32m  [32mâœ”[39m[0m[90m have schemaTypeSymbol property[0m
2025-04-04T18:16:19.2836347Z [0m    bson[0m
2025-04-04T18:16:19.2842193Z     [32m  [32mâœ”[39m[0m[90m Decimal128[0m
2025-04-04T18:16:19.2843685Z     [32m  [32mâœ”[39m[0m[90m Decimal128 (flatternDecimal)[0m
2025-04-04T18:16:19.2845349Z     [32m  [32mâœ”[39m[0m[90m does nothing[0m
2025-04-04T18:16:19.2846169Z [0m    any else[0m
2025-04-04T18:16:19.2848530Z     [32m  [32mâœ”[39m[0m[90m valueOf[0m
2025-04-04T18:16:19.2850191Z     [32m  [32mâœ”[39m[0m[90m cloneObject[0m
2025-04-04T18:16:19.2850572Z 
2025-04-04T18:16:19.2851132Z [0m  modifiedPaths, bad update value which has circular reference field[0m
2025-04-04T18:16:19.2851963Z   [32m  [32mâœ”[39m[0m[90m update value can be null[0m
2025-04-04T18:16:19.2854503Z   [32m  [32mâœ”[39m[0m[90m values with obvious error on circular reference[0m
2025-04-04T18:16:19.2855908Z   [32m  [32mâœ”[39m[0m[90m values with multiple references which are not circular should succeed[0m
2025-04-04T18:16:19.2856497Z 
2025-04-04T18:16:19.2856652Z [0m  eachAsync()[0m
2025-04-04T18:16:20.3808321Z   [32m  [32mâœ”[39m[0m[90m exhausts large cursor without parallel calls (gh-8235)[0m[31m (1095ms)[0m
2025-04-04T18:16:20.5815249Z   [32m  [32mâœ”[39m[0m[90m waits until the end before resolving the promise (gh-8352)[0m[31m (201ms)[0m
2025-04-04T18:16:20.5919469Z   [32m  [32mâœ”[39m[0m[90m it processes the documents in batches successfully[0m
2025-04-04T18:16:20.6041607Z   [32m  [32mâœ”[39m[0m[90m it processes the documents in batches even if the batch size % document count is not zero successfully[0m
2025-04-04T18:16:20.6151675Z   [32m  [32mâœ”[39m[0m[90m it processes the documents in batches with the parallel option provided[0m
2025-04-04T18:16:20.6156691Z   [32m  [32mâœ”[39m[0m[90m executes all documents and aggregates errors if continueOnError set (gh-6355)[0m
2025-04-04T18:16:20.6159189Z   [32m  [32mâœ”[39m[0m[90m returns aggregated error fetching documents with continueOnError (gh-6355)[0m
2025-04-04T18:16:20.7170466Z   [32m  [32mâœ”[39m[0m[90m avoids mutating document batch with parallel (gh-12652)[0m[31m (101ms)[0m
2025-04-04T18:16:20.7183777Z   [32m  [32mâœ”[39m[0m[90m using AbortSignal (gh-12173)[0m
2025-04-04T18:16:20.7184199Z 
2025-04-04T18:16:20.7184560Z [0m  getDeepestSubdocumentForPath[0m
2025-04-04T18:16:20.7192646Z   [32m  [32mâœ”[39m[0m[90m returns top-level document if no subdocs[0m
2025-04-04T18:16:20.7200822Z   [32m  [32mâœ”[39m[0m[90m picks up single nested subdocs along the path[0m
2025-04-04T18:16:20.7209458Z   [32m  [32mâœ”[39m[0m[90m picks up document arrays[0m
2025-04-04T18:16:20.7218324Z   [32m  [32mâœ”[39m[0m[90m picks up doubly nested subdocuments[0m
2025-04-04T18:16:20.7225975Z   [32m  [32mâœ”[39m[0m[90m returns deepest non-null subdoc[0m
2025-04-04T18:16:20.7237364Z   [32m  [32mâœ”[39m[0m[90m picks up single nested subdocs under document arrays[0m
2025-04-04T18:16:20.7238262Z 
2025-04-04T18:16:20.7238517Z [0m  get[0m
2025-04-04T18:16:20.7240399Z   [32m  [32mâœ”[39m[0m[90m gets dotted properties[0m
2025-04-04T18:16:20.7241570Z   [32m  [32mâœ”[39m[0m[90m returns default on undefined[0m
2025-04-04T18:16:20.7242761Z   [32m  [32mâœ”[39m[0m[90m returns default on bottom null[0m
2025-04-04T18:16:20.7243910Z   [32m  [32mâœ”[39m[0m[90m returns default on top-level null[0m
2025-04-04T18:16:20.7246905Z   [32m  [32mâœ”[39m[0m[90m works with maps[0m
2025-04-04T18:16:20.7248209Z   [32m  [32mâœ”[39m[0m[90m works with dotted at top level[0m
2025-04-04T18:16:20.7249508Z   [32m  [32mâœ”[39m[0m[90m works with dotted nested[0m
2025-04-04T18:16:20.7249900Z 
2025-04-04T18:16:20.7250198Z [0m  getFunctionName[0m
2025-04-04T18:16:20.7251465Z   [32m  [32mâœ”[39m[0m[90m return fn.name[0m
2025-04-04T18:16:20.7252690Z   [32m  [32mâœ”[39m[0m[90m return function name[0m
2025-04-04T18:16:20.7253798Z   [32m  [32mâœ”[39m[0m[90m return function functionName[0m
2025-04-04T18:16:20.7254993Z   [32m  [32mâœ”[39m[0m[90m return undefined for arrow function[0m
2025-04-04T18:16:20.7255445Z 
2025-04-04T18:16:20.7255998Z [0m  getModelsMapForPopulate[0m
2025-04-04T18:16:20.7305583Z   [32m  [32mâœ”[39m[0m[90m should error on missing options on populate[0m
2025-04-04T18:16:20.7432790Z 
2025-04-04T18:16:20.7433209Z [0m  getRelatedIndexes[0m
2025-04-04T18:16:20.7440888Z [0m    getRelatedSchemaIndexes[0m
2025-04-04T18:16:20.7452975Z     [32m  [32mâœ”[39m[0m[90m with base model, no discriminator, it gets all indexes[0m
2025-04-04T18:16:20.7671721Z     [32m  [32mâœ”[39m[0m[90m with base model that has discriminator, it ignores discriminator indexes[0m
2025-04-04T18:16:20.7947553Z     [32m  [32mâœ”[39m[0m[90m with base model that has discriminator, it includes discriminator indexes that only checks for existence[0m
2025-04-04T18:16:20.8096614Z     [32m  [32mâœ”[39m[0m[90m with discriminator model, it only gets discriminator indexes[0m
2025-04-04T18:16:20.8355680Z [0m    getRelatedDBIndexes[0m
2025-04-04T18:16:20.8361549Z     [32m  [32mâœ”[39m[0m[90m with base model, no discriminator, it gets all indexes[0m
2025-04-04T18:16:20.8431521Z     [32m  [32mâœ”[39m[0m[90m with base model that has discriminator, it ignores discriminator indexes[0m
2025-04-04T18:16:20.8718195Z     [32m  [32mâœ”[39m[0m[90m with discriminator model, it only gets discriminator indexes[0m
2025-04-04T18:16:20.8997372Z 
2025-04-04T18:16:20.8997917Z [0m  isIndexEqual[0m
2025-04-04T18:16:20.9000008Z   [32m  [32mâœ”[39m[0m[90m ignores default collation options when comparing collations (gh-8994)[0m
2025-04-04T18:16:20.9001393Z   [32m  [32mâœ”[39m[0m[90m works when MongoDB index has collation but Mongoose index doesn't (gh-9224)[0m
2025-04-04T18:16:20.9003443Z   [32m  [32mâœ”[39m[0m[90m handles text indexes (gh-9225)[0m
2025-04-04T18:16:20.9003845Z 
2025-04-04T18:16:20.9004329Z [0m  isIndexSpecEqual[0m
2025-04-04T18:16:20.9006122Z   [32m  [32mâœ”[39m[0m[90m should return true for equal index specifications[0m
2025-04-04T18:16:20.9007404Z   [32m  [32mâœ”[39m[0m[90m should return false for different key order[0m
2025-04-04T18:16:20.9008657Z   [32m  [32mâœ”[39m[0m[90m should return false for different index keys[0m
2025-04-04T18:16:20.9009145Z 
2025-04-04T18:16:20.9009444Z [0m  isAsyncFunction[0m
2025-04-04T18:16:20.9010771Z   [32m  [32mâœ”[39m[0m[90m should return false for non-functions[0m
2025-04-04T18:16:20.9011968Z   [32m  [32mâœ”[39m[0m[90m should return false for sync function[0m
2025-04-04T18:16:20.9013039Z   [32m  [32mâœ”[39m[0m[90m should return true for async function[0m
2025-04-04T18:16:20.9014261Z   [32m  [32mâœ”[39m[0m[90m should return false for sync function returning a Promise[0m
2025-04-04T18:16:20.9014837Z 
2025-04-04T18:16:20.9015128Z [0m  isBsonType[0m
2025-04-04T18:16:20.9016762Z   [32m  [32mâœ”[39m[0m[90m true for any object with _bsontype property equal typename[0m
2025-04-04T18:16:20.9018387Z   [32m  [32mâœ”[39m[0m[90m true for any object without _bsontype property and undefined typename[0m
2025-04-04T18:16:20.9019715Z   [32m  [32mâœ”[39m[0m[90m false for any object with _bsontype property different of typename[0m
2025-04-04T18:16:20.9020777Z   [32m  [32mâœ”[39m[0m[90m false for any object without _bsontype property[0m
2025-04-04T18:16:20.9021659Z   [32m  [32mâœ”[39m[0m[90m true for Decimal128[0m
2025-04-04T18:16:20.9022429Z   [32m  [32mâœ”[39m[0m[90m true for ObjectId[0m
2025-04-04T18:16:20.9024489Z   [32m  [32mâœ”[39m[0m[90m true for Double[0m
2025-04-04T18:16:20.9026025Z   [32m  [32mâœ”[39m[0m[90m true for Int32[0m
2025-04-04T18:16:20.9026391Z 
2025-04-04T18:16:20.9026866Z [0m  isMongooseObject[0m
2025-04-04T18:16:20.9028324Z   [32m  [32mâœ”[39m[0m[90m is when value.$__ != null[0m
2025-04-04T18:16:20.9029765Z   [32m  [32mâœ”[39m[0m[90m is when value is a MongooseArray[0m
2025-04-04T18:16:20.9030959Z   [32m  [32mâœ”[39m[0m[90m is when value.isMongooseBuffer is truthy[0m
2025-04-04T18:16:20.9032007Z   [32m  [32mâœ”[39m[0m[90m is when value.$isMongooseMap is truthy[0m
2025-04-04T18:16:20.9034504Z   [32m  [32mâœ”[39m[0m[90m is not when anything else[0m
2025-04-04T18:16:20.9034925Z 
2025-04-04T18:16:20.9035179Z [0m  isObject[0m
2025-04-04T18:16:20.9035650Z [0m    true for[0m
2025-04-04T18:16:20.9036673Z     [32m  [32mâœ”[39m[0m[90m {}[0m
2025-04-04T18:16:20.9038009Z     [32m  [32mâœ”[39m[0m[90m Buffer[0m
2025-04-04T18:16:20.9039040Z     [32m  [32mâœ”[39m[0m[90m Object[0m
2025-04-04T18:16:20.9039650Z [0m    false for[0m
2025-04-04T18:16:20.9040993Z     [32m  [32mâœ”[39m[0m[90m ""[0m
2025-04-04T18:16:20.9042265Z     [32m  [32mâœ”[39m[0m[90m /.*/[0m
2025-04-04T18:16:20.9043399Z     [32m  [32mâœ”[39m[0m[90m [][0m
2025-04-04T18:16:20.9044446Z     [32m  [32mâœ”[39m[0m[90m Array[0m
2025-04-04T18:16:20.9046110Z     [32m  [32mâœ”[39m[0m[90m Function[0m
2025-04-04T18:16:20.9047302Z     [32m  [32mâœ”[39m[0m[90m RegExp[0m
2025-04-04T18:16:20.9048431Z     [32m  [32mâœ”[39m[0m[90m String[0m
2025-04-04T18:16:20.9049569Z     [32m  [32mâœ”[39m[0m[90m "[object Object]"[0m
2025-04-04T18:16:20.9050623Z 
2025-04-04T18:16:20.9051277Z [0m  isSimpleValidator[0m
2025-04-04T18:16:20.9052461Z   [32m  [32mâœ”[39m[0m[90m empty object[0m
2025-04-04T18:16:20.9053914Z   [32m  [32mâœ”[39m[0m[90m object with one primitive attribute[0m
2025-04-04T18:16:20.9055313Z   [32m  [32mâœ”[39m[0m[90m object with one simple array attribute[0m
2025-04-04T18:16:20.9056704Z   [32m  [32mâœ”[39m[0m[90m object with some native objects[0m
2025-04-04T18:16:20.9057898Z   [32m  [32mâœ”[39m[0m[90m object with one sub object[0m
2025-04-04T18:16:20.9061416Z   [32m  [32mâœ”[39m[0m[90m object with one attribute of type MongooseDocumentArray[0m
2025-04-04T18:16:20.9061992Z 
2025-04-04T18:16:20.9062259Z [0m  getSchemaTypes[0m
2025-04-04T18:16:20.9074922Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators (gh-5970)[0m
2025-04-04T18:16:20.9089341Z   [32m  [32mâœ”[39m[0m[90m multiple embedded discriminators (gh-6064)[0m
2025-04-04T18:16:20.9101750Z   [32m  [32mâœ”[39m[0m[90m handles already populated paths (gh-6798)[0m
2025-04-04T18:16:20.9111331Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators in nested arrays (gh-9984)[0m
2025-04-04T18:16:20.9115638Z   [32m  [32mâœ”[39m[0m[90m finds path underneath nested subdocument with map of mixed (gh-12530)[0m
2025-04-04T18:16:20.9116484Z 
2025-04-04T18:16:20.9116764Z [0m  getVirtual[0m
2025-04-04T18:16:20.9126276Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators (gh-6411)[0m
2025-04-04T18:16:20.9137044Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators under single nested (gh-6488)[0m
2025-04-04T18:16:20.9144076Z   [32m  [32mâœ”[39m[0m[90m handles multiple calls with discriminator under doc array (gh-6644)[0m
2025-04-04T18:16:20.9144731Z 
2025-04-04T18:16:20.9145036Z [0m  applyProjection[0m
2025-04-04T18:16:20.9147689Z   [32m  [32mâœ”[39m[0m[90m handles deep inclusive projections[0m
2025-04-04T18:16:20.9150856Z   [32m  [32mâœ”[39m[0m[90m handles deep exclusive projections[0m
2025-04-04T18:16:20.9153912Z   [32m  [32mâœ”[39m[0m[90m handles projections underneath arrays (gh-14680)[0m
2025-04-04T18:16:20.9154458Z 
2025-04-04T18:16:20.9154747Z [0m  isExclusive[0m
2025-04-04T18:16:20.9155958Z   [32m  [32mâœ”[39m[0m[90m handles $elemMatch (gh-14893)[0m
2025-04-04T18:16:20.9156400Z 
2025-04-04T18:16:20.9156692Z [0m  isInclusive[0m
2025-04-04T18:16:20.9158136Z   [32m  [32mâœ”[39m[0m[90m handles $elemMatch (gh-14893)[0m
2025-04-04T18:16:20.9158589Z 
2025-04-04T18:16:20.9158864Z [0m  isSubpath[0m
2025-04-04T18:16:20.9160105Z   [32m  [32mâœ”[39m[0m[90m handles single-part paths[0m
2025-04-04T18:16:20.9161388Z   [32m  [32mâœ”[39m[0m[90m handles multi-part paths[0m
2025-04-04T18:16:20.9161791Z 
2025-04-04T18:16:20.9162137Z [0m  promiseOrCallback()[0m
2025-04-04T18:16:20.9162585Z [0m    apply callback[0m
2025-04-04T18:16:20.9165211Z     [32m  [32mâœ”[39m[0m[90m without error[0m
2025-04-04T18:16:20.9165674Z [0m      with error[0m
2025-04-04T18:16:20.9167485Z       [32m  [32mâœ”[39m[0m[90m without event emitter[0m
2025-04-04T18:16:20.9169450Z       [32m  [32mâœ”[39m[0m[90m with event emitter[0m
2025-04-04T18:16:20.9170340Z [0m    chain promise[0m
2025-04-04T18:16:20.9170914Z [0m      without error[0m
2025-04-04T18:16:20.9173427Z       [32m  [32mâœ”[39m[0m[90m two args[0m
2025-04-04T18:16:20.9175097Z       [32m  [32mâœ”[39m[0m[90m more args[0m
2025-04-04T18:16:20.9175725Z [0m      with error[0m
2025-04-04T18:16:20.9178076Z       [32m  [32mâœ”[39m[0m[90m without event emitter[0m
2025-04-04T18:16:20.9180346Z       [32m  [32mâœ”[39m[0m[90m with event emitter[0m
2025-04-04T18:16:20.9180738Z 
2025-04-04T18:16:20.9180994Z [0m  castexpr[0m
2025-04-04T18:16:20.9190126Z   [32m  [32mâœ”[39m[0m[90m casts comparisons[0m
2025-04-04T18:16:20.9196417Z   [32m  [32mâœ”[39m[0m[90m casts conditions[0m
2025-04-04T18:16:20.9200247Z   [32m  [32mâœ”[39m[0m[90m casts boolean expressions[0m
2025-04-04T18:16:20.9205258Z   [32m  [32mâœ”[39m[0m[90m cast errors[0m
2025-04-04T18:16:20.9211645Z   [32m  [32mâœ”[39m[0m[90m casts $in[0m
2025-04-04T18:16:20.9215451Z   [32m  [32mâœ”[39m[0m[90m casts $not (gh-11689)[0m
2025-04-04T18:16:20.9218836Z   [32m  [32mâœ”[39m[0m[90m casts $round (gh-13881)[0m
2025-04-04T18:16:20.9222435Z   [32m  [32mâœ”[39m[0m[90m casts $switch (gh-14751)[0m
2025-04-04T18:16:20.9222880Z 
2025-04-04T18:16:20.9223157Z [0m  castUpdate[0m
2025-04-04T18:16:20.9226848Z   [32m  [32mâœ”[39m[0m[90m avoids adding `$each` if `$addToSet` on mixed array (gh-11284)[0m
2025-04-04T18:16:20.9234531Z   [32m  [32mâœ”[39m[0m[90m casts the update correctly when target discriminator type is missing[0m
2025-04-04T18:16:20.9235193Z 
2025-04-04T18:16:20.9235492Z [0m  sanitizeFilter[0m
2025-04-04T18:16:20.9236914Z   [32m  [32mâœ”[39m[0m[90m throws when filter includes a query selector[0m
2025-04-04T18:16:20.9238606Z   [32m  [32mâœ”[39m[0m[90m ignores explicitly defined query selectors[0m
2025-04-04T18:16:20.9240769Z   [32m  [32mâœ”[39m[0m[90m handles $and and $or[0m
2025-04-04T18:16:20.9241161Z 
2025-04-04T18:16:20.9241534Z [0m  selectPopulatedFields[0m
2025-04-04T18:16:20.9243101Z   [32m  [32mâœ”[39m[0m[90m selects refPath[0m
2025-04-04T18:16:20.9245025Z   [32m  [32mâœ”[39m[0m[90m adds refPath to projection if not deselected by user in exclusive projection[0m
2025-04-04T18:16:20.9245694Z 
2025-04-04T18:16:20.9246221Z [0m  Query helpers[0m
2025-04-04T18:16:20.9246822Z [0m    selectPopulatedFields[0m
2025-04-04T18:16:20.9247905Z     [32m  [32mâœ”[39m[0m[90m handles nested populate if parent key is projected in (gh-5669)[0m
2025-04-04T18:16:20.9249571Z     [32m  [32mâœ”[39m[0m[90m handles nested populate if parent key is projected out (gh-5669)[0m
2025-04-04T18:16:20.9250635Z     [32m  [32mâœ”[39m[0m[90m handle explicitly excluded paths (gh-7383)[0m
2025-04-04T18:16:20.9252274Z     [32m  [32mâœ”[39m[0m[90m handles paths selected with elemMatch (gh-9973)[0m
2025-04-04T18:16:20.9252755Z 
2025-04-04T18:16:20.9252989Z [0m  cleanPositionalOperators[0m
2025-04-04T18:16:20.9254084Z   [32m  [32mâœ”[39m[0m[90m replaces trailing array filter[0m
2025-04-04T18:16:20.9255077Z   [32m  [32mâœ”[39m[0m[90m replaces trailing $[0m
2025-04-04T18:16:20.9256233Z   [32m  [32mâœ”[39m[0m[90m replaces interior array filters[0m
2025-04-04T18:16:20.9257217Z   [32m  [32mâœ”[39m[0m[90m replaces interior elemMatch[0m
2025-04-04T18:16:20.9257600Z 
2025-04-04T18:16:20.9258029Z [0m  getPath()[0m
2025-04-04T18:16:20.9262407Z   [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:20.9267548Z   [32m  [32mâœ”[39m[0m[90m nested arrays[0m
2025-04-04T18:16:20.9267923Z 
2025-04-04T18:16:20.9268303Z [0m  getSubdocumentStrictValue[0m
2025-04-04T18:16:20.9271282Z   [32m  [32mâœ”[39m[0m[90m returns top-level document if no subdocs[0m
2025-04-04T18:16:20.9275058Z   [32m  [32mâœ”[39m[0m[90m picks up single nested subdocs along the path[0m
2025-04-04T18:16:20.9279086Z   [32m  [32mâœ”[39m[0m[90m picks up document arrays[0m
2025-04-04T18:16:20.9283360Z   [32m  [32mâœ”[39m[0m[90m picks up doubly nested subdocuments[0m
2025-04-04T18:16:20.9289338Z   [32m  [32mâœ”[39m[0m[90m picks up single nested subdocs under document arrays[0m
2025-04-04T18:16:20.9289976Z 
2025-04-04T18:16:20.9290592Z [0m  setDefaultsOnInsert[0m
2025-04-04T18:16:20.9295016Z   [32m  [32mâœ”[39m[0m[90m properly ignores nested paths (gh-6665)[0m
2025-04-04T18:16:20.9300370Z   [32m  [32mâœ”[39m[0m[90m ignores defaults underneath single nested subdocs (gh-10660)[0m
2025-04-04T18:16:20.9307357Z   [32m  [32mâœ”[39m[0m[90m ignores defaults underneath maps (gh-11235)[0m
2025-04-04T18:16:20.9310524Z   [32m  [32mâœ”[39m[0m[90m sets default if sibling of dotted path is $set (gh-11668)[0m
2025-04-04T18:16:20.9314698Z   [32m  [32mâœ”[39m[0m[90m skips default if parent is $set (gh-12279)[0m
2025-04-04T18:16:20.9315149Z 
2025-04-04T18:16:20.9315315Z [0m  setDottedPath[0m
2025-04-04T18:16:20.9317134Z   [32m  [32mâœ”[39m[0m[90m setDottedPath root element[0m
2025-04-04T18:16:20.9318711Z   [32m  [32mâœ”[39m[0m[90m setDottedPath sub element[0m
2025-04-04T18:16:20.9319083Z 
2025-04-04T18:16:20.9319289Z [0m  applyTimestampsToChildren[0m
2025-04-04T18:16:20.9326016Z   [32m  [32mâœ”[39m[0m[90m applies timestamps to nested subdocs within a $push (gh-11775)[0m
2025-04-04T18:16:20.9326482Z 
2025-04-04T18:16:20.9326695Z [0m  applyTimestampsToUpdate[0m
2025-04-04T18:16:20.9328168Z   [32m  [32mâœ”[39m[0m[90m handles update pipelines (gh-11151)[0m
2025-04-04T18:16:20.9328517Z 
2025-04-04T18:16:20.9328868Z [0m  castArrayFilters[0m
2025-04-04T18:16:20.9333622Z   [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:20.9339758Z   [32m  [32mâœ”[39m[0m[90m casts multiple[0m
2025-04-04T18:16:20.9347503Z   [32m  [32mâœ”[39m[0m[90m casts on multiple fields[0m
2025-04-04T18:16:20.9352980Z   [32m  [32mâœ”[39m[0m[90m sane error on same filter twice[0m
2025-04-04T18:16:20.9358585Z   [32m  [32mâœ”[39m[0m[90m using $in (gh-7431)[0m
2025-04-04T18:16:20.9364923Z   [32m  [32mâœ”[39m[0m[90m all positional operator works (gh-7540)[0m
2025-04-04T18:16:20.9371340Z   [32m  [32mâœ”[39m[0m[90m handles deeply nested arrays (gh-7603)[0m
2025-04-04T18:16:20.9376914Z   [32m  [32mâœ”[39m[0m[90m respects `strictQuery` option (gh-7728)[0m
2025-04-04T18:16:20.9380883Z   [32m  [32mâœ”[39m[0m[90m respects `strict` override (gh-11062)[0m
2025-04-04T18:16:20.9384740Z   [32m  [32mâœ”[39m[0m[90m respects `$or` option (gh-10696)[0m
2025-04-04T18:16:20.9390425Z   [32m  [32mâœ”[39m[0m[90m respects global strictQuery option (gh-11836)[0m
2025-04-04T18:16:20.9406663Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators (gh-12565)[0m
2025-04-04T18:16:20.9415415Z   [32m  [32mâœ”[39m[0m[90m correctly casts array of strings underneath doc array (gh-12565)[0m
2025-04-04T18:16:20.9417180Z 
2025-04-04T18:16:20.9418263Z [0m  removeUnusedArrayFilters[0m
2025-04-04T18:16:20.9419722Z   [32m  [32mâœ”[39m[0m[90m respects `$or` (gh-10696)[0m
2025-04-04T18:16:20.9421174Z 
2025-04-04T18:16:20.9421442Z [0m  timestamps[0m
2025-04-04T18:16:20.9561616Z   [32m  [32mâœ”[39m[0m[90m does not override timestamp params defined in schema (gh-4868)[0m
2025-04-04T18:16:20.9723489Z   [32m  [32mâœ”[39m[0m[90m updatedAt without createdAt (gh-5598)[0m
2025-04-04T18:16:20.9881924Z   [32m  [32mâœ”[39m[0m[90m updatedAt without createdAt for nested (gh-5598)[0m
2025-04-04T18:16:21.0062375Z   [32m  [32mâœ”[39m[0m[90m nested paths (gh-4503)[0m
2025-04-04T18:16:21.0189189Z   [32m  [32mâœ”[39m[0m[90m does not override nested timestamp params defined in schema (gh-4868)[0m
2025-04-04T18:16:21.0293582Z   [32m  [32mâœ”[39m[0m[90m does not override timestamps in nested schema (gh-4868)[0m
2025-04-04T18:16:21.0464969Z   [32m  [32mâœ”[39m[0m[90m no timestamps added when parent/child timestamps explicitly false (gh-7202)[0m
2025-04-04T18:16:21.0571888Z   [32m  [32mâœ”[39m[0m[90m avoids calling createdAt getters when setting updatedAt (gh-7496)[0m
2025-04-04T18:16:21.0692288Z   [32m  [32mâœ”[39m[0m[90m handles custom statics that conflict with built-in functions (gh-7698)[0m
2025-04-04T18:16:21.1352950Z   [32m  [32mâœ”[39m[0m[90m timestamps handle reusing child schemas (gh-7712)[0m[33m (64ms)[0m
2025-04-04T18:16:21.1464488Z   [32m  [32mâœ”[39m[0m[90m respects timestamps: false in child schema (gh-8007)[0m
2025-04-04T18:16:21.2119402Z   [32m  [32mâœ”[39m[0m[90m updates updatedAt when calling update without $set (gh-4768)[0m[33m (58ms)[0m
2025-04-04T18:16:21.2261382Z   [32m  [32mâœ”[39m[0m[90m updates updatedAt when calling update on subchild[0m
2025-04-04T18:16:21.2407909Z   [32m  [32mâœ”[39m[0m[90m sets timestamps on deeply nested docs on upsert (gh-8894)[0m
2025-04-04T18:16:21.2640523Z   [32m  [32mâœ”[39m[0m[90m sets timestamps on bulk write without `$set` (gh-9268)[0m
2025-04-04T18:16:21.2736194Z   [32m  [32mâœ”[39m[0m[90m works with property named "set" (gh-9428)[0m
2025-04-04T18:16:21.2908973Z   [32m  [32mâœ”[39m[0m[90m should not override createdAt when not selected (gh-4340)[0m
2025-04-04T18:16:21.3018224Z   [32m  [32mâœ”[39m[0m[90m timestamps with number types (gh-3957)[0m
2025-04-04T18:16:21.3105413Z   [32m  [32mâœ”[39m[0m[90m timestamps with custom timestamp (gh-3957)[0m
2025-04-04T18:16:21.3279339Z   [32m  [32mâœ”[39m[0m[90m timestamps with custom timestamp using getter method (gh-3957)[0m
2025-04-04T18:16:21.3529167Z   [32m  [32mâœ”[39m[0m[90m shouldnt bump updatedAt in single nested subdocs that are not modified (gh-9357)[0m
2025-04-04T18:16:21.3758252Z   [32m  [32mâœ”[39m[0m[90m bumps updatedAt with mixed $set (gh-9357)[0m
2025-04-04T18:16:21.3849744Z   [32m  [32mâœ”[39m[0m[90m makes createdAt immutable by default (gh-10139)[0m
2025-04-04T18:16:21.4038366Z   [32m  [32mâœ”[39m[0m[90m sets createdAt when using $push/$addToSet on path with positional operator (gh-10447)[0m
2025-04-04T18:16:21.4241035Z   [32m  [32mâœ”[39m[0m[90m sets createdAt when creating new single nested subdoc (gh-11603)[0m
2025-04-04T18:16:21.4374396Z   [32m  [32mâœ”[39m[0m[90m sets timestamps on sub-schema if parent schema does not have timestamps: true (gh-12119)[0m
2025-04-04T18:16:21.4495105Z   [32m  [32mâœ”[39m[0m[90m works with insertMany() and embedded discriminators (gh-12150)[0m
2025-04-04T18:16:21.4663208Z   [32m  [32mâœ”[39m[0m[90m findOneAndUpdate creates subdocuments with timestamps in correct order (gh-12475)[0m
2025-04-04T18:16:21.4833918Z   [32m  [32mâœ”[39m[0m[90m should avoid setting null update when updating document with timestamps gh-13379[0m
2025-04-04T18:16:21.4854369Z [0m    schema options[0m
2025-04-04T18:16:21.4857853Z     [32m  [32mâœ”[39m[0m[90m should have createdAt and updatedAt fields[0m
2025-04-04T18:16:21.4871420Z     [32m  [32mâœ”[39m[0m[90m should have createdAt and updatedAt fields[0m
2025-04-04T18:16:21.4884484Z     [32m  [32mâœ”[39m[0m[90m should have created and updatedAt fields[0m
2025-04-04T18:16:21.4897434Z     [32m  [32mâœ”[39m[0m[90m should have created and updatedAt fields[0m
2025-04-04T18:16:21.4934776Z     [32m  [32mâœ”[39m[0m[90m should have created and updated fields[0m
2025-04-04T18:16:21.4947950Z     [32m  [32mâœ”[39m[0m[90m should have just createdAt if updatedAt set to falsy[0m
2025-04-04T18:16:21.4961040Z     [32m  [32mâœ”[39m[0m[90m should have created and updated fields[0m
2025-04-04T18:16:21.4974926Z     [32m  [32mâœ”[39m[0m[90m TTL index with timestamps (gh-5656)[0m
2025-04-04T18:16:21.4986886Z [0m    auto update createdAt and updatedAt when create/save/update document[0m
2025-04-04T18:16:21.5083633Z     [32m  [32mâœ”[39m[0m[90m should have fields when create[0m
2025-04-04T18:16:21.5210393Z     [32m  [32mâœ”[39m[0m[90m sets timestamps on findOneAndUpdate[0m
2025-04-04T18:16:21.5331743Z     [32m  [32mâœ”[39m[0m[90m sets timestamps on findOneAndReplace (gh-9951)[0m
2025-04-04T18:16:21.5464502Z     [32m  [32mâœ”[39m[0m[90m sets timestamps on replaceOne (gh-9951)[0m
2025-04-04T18:16:21.5593179Z     [32m  [32mâœ”[39m[0m[90m should change updatedAt when save[0m
2025-04-04T18:16:21.5720088Z     [32m  [32mâœ”[39m[0m[90m should not change updatedAt when save with no modifications[0m
2025-04-04T18:16:21.5946408Z     [32m  [32mâœ”[39m[0m[90m can skip with timestamps: false (gh-7357)[0m
2025-04-04T18:16:21.6176910Z     [32m  [32mâœ”[39m[0m[90m can skip with `$timestamps(false)` (gh-12117)[0m
2025-04-04T18:16:21.6423839Z     [32m  [32mâœ”[39m[0m[90m should change updatedAt when findOneAndUpdate[0m
2025-04-04T18:16:21.6635997Z     [32m  [32mâœ”[39m[0m[90m insertMany with createdAt off (gh-6381)[0m
2025-04-04T18:16:21.6777048Z     [32m  [32mâœ”[39m[0m[90m should have fields when updateOne[0m
2025-04-04T18:16:21.6903796Z     [32m  [32mâœ”[39m[0m[90m should change updatedAt when updateOne[0m
2025-04-04T18:16:21.7028472Z     [32m  [32mâœ”[39m[0m[90m should change updatedAt when updateMany[0m
2025-04-04T18:16:21.7234106Z     [32m  [32mâœ”[39m[0m[90m nested docs (gh-4049)[0m
2025-04-04T18:16:21.7468719Z     [32m  [32mâœ”[39m[0m[90m nested docs with push (gh-4049)[0m
2025-04-04T18:16:21.7512425Z 
2025-04-04T18:16:21.7513882Z [0m  types array[0m
2025-04-04T18:16:21.7537299Z   [32m  [32mâœ”[39m[0m[90m behaves and quacks like an Array[0m
2025-04-04T18:16:21.7570159Z   [32m  [32mâœ”[39m[0m[90m is `deepEqual()` another array (gh-7700)[0m
2025-04-04T18:16:21.7639398Z   [32m  [32mâœ”[39m[0m[90m does not mutate passed-in array (gh-10766)[0m
2025-04-04T18:16:21.7707979Z   [32m  [32mâœ”[39m[0m[90m test "castNonArrays" property option[0m
2025-04-04T18:16:21.7783916Z   [32m  [32mâœ”[39m[0m[90m `castNonArrays` on specific paths takes precedence over global option[0m
2025-04-04T18:16:21.7801651Z   [32m  [32mâœ”[39m[0m[90m supports setting nested arrays directly (gh-13372)[0m
2025-04-04T18:16:21.7869848Z   [32m  [32mâœ”[39m[0m[90m calls array setters (gh-11380)[0m
2025-04-04T18:16:21.7928107Z [0m    hasAtomics[0m
2025-04-04T18:16:21.7930248Z     [32m  [32mâœ”[39m[0m[90m does not throw[0m
2025-04-04T18:16:21.7941828Z [0m    indexOf()[0m
2025-04-04T18:16:21.8165338Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:21.8192660Z [0m    includes()[0m
2025-04-04T18:16:21.8413790Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:21.8437089Z [0m    push()[0m
2025-04-04T18:16:21.8524729Z     [32m  [32mâœ”[39m[0m[90m works with numbers[0m
2025-04-04T18:16:21.8634657Z     [32m  [32mâœ”[39m[0m[90m works with strings[0m
2025-04-04T18:16:21.8791000Z     [32m  [32mâœ”[39m[0m[90m works with buffers[0m
2025-04-04T18:16:21.8938235Z     [32m  [32mâœ”[39m[0m[90m works with mixed[0m
2025-04-04T18:16:21.9060783Z     [32m  [32mâœ”[39m[0m[90m works with sub-docs[0m
2025-04-04T18:16:21.9171461Z     [32m  [32mâœ”[39m[0m[90m applies setters (gh-3032)[0m
2025-04-04T18:16:21.9193581Z [0m    splice()[0m
2025-04-04T18:16:21.9284974Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:21.9475083Z     [32m  [32mâœ”[39m[0m[90m on embedded docs[0m
2025-04-04T18:16:21.9494115Z [0m    unshift()[0m
2025-04-04T18:16:21.9604507Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:21.9706245Z     [32m  [32mâœ”[39m[0m[90m applies setters (gh-3032)[0m
2025-04-04T18:16:21.9795590Z [0m    shift()[0m
2025-04-04T18:16:21.9924255Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:21.9948036Z [0m    $shift[0m
2025-04-04T18:16:22.0052624Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:22.0076854Z [0m    pop()[0m
2025-04-04T18:16:22.0210114Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:22.0230054Z [0m    pull()[0m
2025-04-04T18:16:22.0406667Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:22.0513044Z     [32m  [32mâœ”[39m[0m[90m registers $pull atomic if pulling from middle (gh-14502)[0m
2025-04-04T18:16:22.0705718Z     [32m  [32mâœ”[39m[0m[90m handles pulling with no _id (gh-3341)[0m
2025-04-04T18:16:22.0818907Z     [32m  [32mâœ”[39m[0m[90m properly works with undefined[0m
2025-04-04T18:16:22.0897857Z     [32m  [32mâœ”[39m[0m[90m avoids adding default paths to query filter (gh-12294)[0m
2025-04-04T18:16:22.0969821Z     [32m  [32mâœ”[39m[0m[90m avoids adding default paths to query filter with _id (gh-12294)[0m
2025-04-04T18:16:22.1029932Z [0m    $pop()[0m
2025-04-04T18:16:22.1152011Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:22.1171436Z [0m    addToSet()[0m
2025-04-04T18:16:22.1326505Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:22.1431062Z     [32m  [32mâœ”[39m[0m[90m handles sub-documents that do not have an _id gh-1973[0m
2025-04-04T18:16:22.1581021Z     [32m  [32mâœ”[39m[0m[90m applies setters (gh-3032)[0m
2025-04-04T18:16:22.1661917Z [0m    options[0m
2025-04-04T18:16:22.1685317Z     [32m  [32mâœ”[39m[0m[90m castNonArrays (gh-7371) (gh-7479)[0m
2025-04-04T18:16:22.1869085Z     [32m  [32mâœ”[39m[0m[90m works with $addToSet and $push (gh-7479)[0m
2025-04-04T18:16:22.1889377Z [0m    nonAtomicPush()[0m
2025-04-04T18:16:22.1985997Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:22.2008074Z [0m    sort()[0m
2025-04-04T18:16:22.2130004Z     [32m  [32mâœ”[39m[0m[90m order should be saved[0m
2025-04-04T18:16:22.2153357Z [0m    set()[0m
2025-04-04T18:16:22.2264185Z     [32m  [32mâœ”[39m[0m[90m works combined with other ops[0m
2025-04-04T18:16:22.2393945Z     [32m  [32mâœ”[39m[0m[90m works with numbers[0m
2025-04-04T18:16:22.2523725Z     [32m  [32mâœ”[39m[0m[90m works with strings[0m
2025-04-04T18:16:22.2636286Z     [32m  [32mâœ”[39m[0m[90m works with buffers[0m
2025-04-04T18:16:22.2767247Z     [32m  [32mâœ”[39m[0m[90m works with mixed[0m
2025-04-04T18:16:22.2942235Z     [32m  [32mâœ”[39m[0m[90m works with sub-docs[0m
2025-04-04T18:16:22.3086513Z     [32m  [32mâœ”[39m[0m[90m applies setters (gh-3032)[0m
2025-04-04T18:16:22.3209350Z [0m    slice[0m
2025-04-04T18:16:22.3221647Z     [32m  [32mâœ”[39m[0m[90m copies schema correctly (gh-8482)[0m
2025-04-04T18:16:22.3286312Z     [32m  [32mâœ”[39m[0m[90m with unshift (gh-8482)[0m
2025-04-04T18:16:22.3353433Z     [32m  [32mâœ”[39m[0m[90m with push (gh-8655)[0m
2025-04-04T18:16:22.3367710Z [0m    setting a doc array[0m
2025-04-04T18:16:22.3497751Z     [32m  [32mâœ”[39m[0m[90m should adjust path positions[0m
2025-04-04T18:16:22.3517134Z [0m    paths with similar names[0m
2025-04-04T18:16:22.3624377Z     [32m  [32mâœ”[39m[0m[90m should be saved[0m
2025-04-04T18:16:22.3645061Z [0m    of number[0m
2025-04-04T18:16:22.3756090Z     [32m  [32mâœ”[39m[0m[90m allows null and undefined[0m
2025-04-04T18:16:22.3774445Z [0m    bug fixes[0m
2025-04-04T18:16:22.3890044Z     [32m  [32mâœ”[39m[0m[90m modifying subdoc props and manipulating the array works (gh-842)[0m
2025-04-04T18:16:22.3915324Z     [32m  [32mâœ”[39m[0m[90m toObject returns a vanilla JavaScript array (gh-9540)[0m
2025-04-04T18:16:22.4078768Z     [32m  [32mâœ”[39m[0m[90m pushing top level arrays and subarrays works (gh-1073)[0m
2025-04-04T18:16:22.4109055Z     [32m  [32mâœ”[39m[0m[90m finding ids by string (gh-4011)[0m
2025-04-04T18:16:22.4169512Z [0m    default type[0m
2025-04-04T18:16:22.4176561Z     [32m  [32mâœ”[39m[0m[90m casts to Mixed[0m
2025-04-04T18:16:22.4235565Z [0m    removing from an array atomically using MongooseArray#remove[0m
2025-04-04T18:16:22.4362339Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:22.4383527Z [0m      with subdocs[0m
2025-04-04T18:16:22.4461400Z       [32m  [32mâœ”[39m[0m[90m supports passing strings[0m
2025-04-04T18:16:22.4556468Z       [32m  [32mâœ”[39m[0m[90m supports passing numbers[0m
2025-04-04T18:16:22.4655949Z       [32m  [32mâœ”[39m[0m[90m supports passing objectids[0m
2025-04-04T18:16:22.4750970Z       [32m  [32mâœ”[39m[0m[90m supports passing buffers[0m
2025-04-04T18:16:22.4768751Z [0m    built-in array methods that modify element structure return vanilla arrays (gh-8356)[0m
2025-04-04T18:16:22.4775721Z     [32m  [32mâœ”[39m[0m[90m filter[0m
2025-04-04T18:16:22.4793132Z     [32m  [32mâœ”[39m[0m[90m flat[0m
2025-04-04T18:16:22.4810068Z     [32m  [32mâœ”[39m[0m[90m flatMap[0m
2025-04-04T18:16:22.4826773Z     [32m  [32mâœ”[39m[0m[90m map[0m
2025-04-04T18:16:22.4842780Z     [32m  [32mâœ”[39m[0m[90m slice[0m
2025-04-04T18:16:22.4876956Z 
2025-04-04T18:16:22.4877526Z [0m  types.buffer[0m
2025-04-04T18:16:22.4901545Z   [32m  [32mâœ”[39m[0m[90m test that a mongoose buffer behaves and quacks like a buffer[0m
2025-04-04T18:16:22.5052228Z   [32m  [32mâœ”[39m[0m[90m buffer validation[0m
2025-04-04T18:16:22.5170442Z   [32m  [32mâœ”[39m[0m[90m buffer storage[0m
2025-04-04T18:16:22.5305694Z   [32m  [32mâœ”[39m[0m[90m test write markModified[0m
2025-04-04T18:16:22.5416725Z   [32m  [32mâœ”[39m[0m[90m can be set to null[0m
2025-04-04T18:16:22.5684029Z   [32m  [32mâœ”[39m[0m[90m can be updated to null[0m
2025-04-04T18:16:22.5704271Z [0m    #toObject[0m
2025-04-04T18:16:22.5706616Z     [32m  [32mâœ”[39m[0m[90m retains custom subtypes[0m
2025-04-04T18:16:22.5718755Z [0m    subtype[0m
2025-04-04T18:16:22.5725655Z     [32m  [32mâœ”[39m[0m[90m default value[0m
2025-04-04T18:16:22.5791590Z     [32m  [32mâœ”[39m[0m[90m method works[0m
2025-04-04T18:16:22.5946984Z     [32m  [32mâœ”[39m[0m[90m is stored[0m
2025-04-04T18:16:22.6064425Z     [32m  [32mâœ”[39m[0m[90m changes are retained[0m
2025-04-04T18:16:22.6140301Z     [32m  [32mâœ”[39m[0m[90m cast from number (gh-3764)[0m
2025-04-04T18:16:22.6207733Z     [32m  [32mâœ”[39m[0m[90m cast from string[0m
2025-04-04T18:16:22.6276404Z     [32m  [32mâœ”[39m[0m[90m cast from array[0m
2025-04-04T18:16:22.6342476Z     [32m  [32mâœ”[39m[0m[90m cast from Binary[0m
2025-04-04T18:16:22.6408210Z     [32m  [32mâœ”[39m[0m[90m cast from json (gh-6863)[0m
2025-04-04T18:16:22.6471827Z     [32m  [32mâœ”[39m[0m[90m is an `instanceof Buffer`[0m
2025-04-04T18:16:22.6545145Z 
2025-04-04T18:16:22.6545562Z [0m  types.decimal128[0m
2025-04-04T18:16:22.6550882Z   [32m  [32mâœ”[39m[0m[90m casts from type number (gh-6331)[0m
2025-04-04T18:16:22.6557483Z   [32m  [32mâœ”[39m[0m[90m uses valueOf method if one exists (gh-6418)[0m
2025-04-04T18:16:22.6557895Z 
2025-04-04T18:16:22.6558074Z [0m  types.document[0m
2025-04-04T18:16:22.6583515Z   [32m  [32mâœ”[39m[0m[90m test that validate sets errors[0m
2025-04-04T18:16:22.6589361Z   [32m  [32mâœ”[39m[0m[90m objects can be passed to #set[0m
2025-04-04T18:16:22.6592770Z   [32m  [32mâœ”[39m[0m[90m Subdocuments can be passed to #set[0m
2025-04-04T18:16:22.6748601Z   [32m  [32mâœ”[39m[0m[90m Subdocument#remove (gh-531)[0m
2025-04-04T18:16:22.6749400Z [0m    setting nested objects[0m
2025-04-04T18:16:22.6803346Z     [32m  [32mâœ”[39m[0m[90m works (gh-1394)[0m
2025-04-04T18:16:22.6821638Z 
2025-04-04T18:16:22.6822523Z [0m  types.documentarray[0m
2025-04-04T18:16:22.6836356Z   [32m  [32mâœ”[39m[0m[90m behaves and quacks like an array[0m
2025-04-04T18:16:22.6886777Z   [32m  [32mâœ”[39m[0m[90m #id[0m
2025-04-04T18:16:22.7010612Z   [32m  [32mâœ”[39m[0m[90m #push should work on ArraySubdocument more than 2 levels deep[0m
2025-04-04T18:16:22.7153637Z   [32m  [32mâœ”[39m[0m[90m cleans modified subpaths on splice() (gh-7249)[0m
2025-04-04T18:16:22.7182229Z   [32m  [32mâœ”[39m[0m[90m modifies ownerDocument() on set (gh-8479)[0m
2025-04-04T18:16:22.7248758Z   [32m  [32mâœ”[39m[0m[90m modifying subdoc path after `slice()` (gh-8356)[0m
2025-04-04T18:16:22.7387548Z   [32m  [32mâœ”[39m[0m[90m supports setting to newly constructed array with no path or parent (gh-8108)[0m
2025-04-04T18:16:22.7468152Z   [32m  [32mâœ”[39m[0m[90m keeps atomics after setting (gh-10272)[0m
2025-04-04T18:16:22.7541849Z   [32m  [32mâœ”[39m[0m[90m handles `DocumentArray#create()` with populated paths (gh-10749)[0m
2025-04-04T18:16:22.7563762Z   [32m  [32mâœ”[39m[0m[90m applies _id default (gh-12264)[0m
2025-04-04T18:16:22.7630802Z   [32m  [32mâœ”[39m[0m[90m gets correct path when underneath map (gh-12997)[0m
2025-04-04T18:16:22.7701791Z   [32m  [32mâœ”[39m[0m[90m bubbles up validation errors from doubly nested doc arrays (gh-14101)[0m
2025-04-04T18:16:22.7772904Z [0m    inspect[0m
2025-04-04T18:16:22.7774764Z     [32m  [32mâœ”[39m[0m[90m works with bad data[0m
2025-04-04T18:16:22.7786625Z [0m    toObject[0m
2025-04-04T18:16:22.7788147Z     [32m  [32mâœ”[39m[0m[90m works with bad data[0m
2025-04-04T18:16:22.7807777Z     [32m  [32mâœ”[39m[0m[90m passes options to its documents (gh-1415) (gh-4455)[0m
2025-04-04T18:16:22.7830307Z     [32m  [32mâœ”[39m[0m[90m uses the correct transform (gh-1412)[0m
2025-04-04T18:16:22.7941806Z [0m    create()[0m
2025-04-04T18:16:22.7950032Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:22.7962595Z [0m    push()[0m
2025-04-04T18:16:22.8075361Z     [32m  [32mâœ”[39m[0m[90m does not re-cast instances of its embedded doc[0m
2025-04-04T18:16:22.8106268Z     [32m  [32mâœ”[39m[0m[90m corrects #ownerDocument() and index if value was created with array.create() (gh-1385)[0m
2025-04-04T18:16:22.8127465Z     [32m  [32mâœ”[39m[0m[90m corrects #ownerDocument() if value was created with array.create() and set() (gh-7504)[0m
2025-04-04T18:16:22.8199981Z     [32m  [32mâœ”[39m[0m[90m reports validation errors with correct index path (gh-7724)[0m
2025-04-04T18:16:22.8211955Z [0m    required (gh-6364)[0m
2025-04-04T18:16:22.8221309Z     [32m  [32mâœ”[39m[0m[90m on top level[0m
2025-04-04T18:16:22.8242019Z     [32m  [32mâœ”[39m[0m[90m in arr[0m
2025-04-04T18:16:22.8253889Z [0m    invalidate()[0m
2025-04-04T18:16:22.8265522Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-04T18:16:22.8288514Z     [32m  [32mâœ”[39m[0m[90m handles validation failures[0m
2025-04-04T18:16:22.8422182Z     [32m  [32mâœ”[39m[0m[90m clears listeners on cast error (gh-6723)[0m
2025-04-04T18:16:22.8516919Z     [32m  [32mâœ”[39m[0m[90m slice() copies parent and path (gh-8317)[0m
2025-04-04T18:16:22.8581797Z     [32m  [32mâœ”[39m[0m[90m map() works (gh-8317)[0m
2025-04-04T18:16:22.8601352Z     [32m  [32mâœ”[39m[0m[90m slice() after map() works (gh-8399)[0m
2025-04-04T18:16:22.8667818Z     [32m  [32mâœ”[39m[0m[90m unshift() after map() works (gh-9012)[0m
2025-04-04T18:16:22.8744714Z 
2025-04-04T18:16:22.8745293Z [0m  types.embeddeddocument[0m
2025-04-04T18:16:22.8755931Z   [32m  [32mâœ”[39m[0m[90m returns a proper ownerDocument (gh-3589)[0m
2025-04-04T18:16:22.8756385Z 
2025-04-04T18:16:22.8756776Z [0m  types.embeddeddocumentdeclarative[0m
2025-04-04T18:16:22.8757549Z [0m    with a parent with a field with type set to a POJO[0m
2025-04-04T18:16:22.8758221Z [0m      creates subdocument schema if `type` is an object with keys[0m
2025-04-04T18:16:22.8759147Z       [32m  [32mâœ”[39m[0m[90m interprets the POJO as a subschema (gh-7494)[0m
2025-04-04T18:16:22.8764226Z       [32m  [32mâœ”[39m[0m[90m enforces provided schema on the child path, unlike Mixed (gh-7494)[0m
2025-04-04T18:16:22.8770243Z       [32m  [32mâœ”[39m[0m[90m underneath array (gh-8627)[0m
2025-04-04T18:16:22.8773507Z       [32m  [32mâœ”[39m[0m[90m nested array (gh-8627)[0m
2025-04-04T18:16:22.8774473Z [0m    with a parent with a POJO field with a field "type" with a type set to "String"[0m
2025-04-04T18:16:22.8775309Z     [32m  [32mâœ”[39m[0m[90m does not create a path for child in either option[0m
2025-04-04T18:16:22.8776999Z     [32m  [32mâœ”[39m[0m[90m treats type as a property name not a type in both options[0m
2025-04-04T18:16:22.8785455Z     [32m  [32mâœ”[39m[0m[90m enforces provided schema on the child tree in both options, unlike Mixed (gh-7494)[0m
2025-04-04T18:16:22.8786217Z 
2025-04-04T18:16:22.8786396Z [0m  Map[0m
2025-04-04T18:16:22.8888278Z   [32m  [32mâœ”[39m[0m[90m validation[0m
2025-04-04T18:16:22.8969161Z   [32m  [32mâœ”[39m[0m[90m deep set[0m
2025-04-04T18:16:22.9121223Z   [32m  [32mâœ”[39m[0m[90m supports delete() (gh-7743)[0m
2025-04-04T18:16:22.9352111Z   [32m  [32mâœ”[39m[0m[90m query casting[0m
2025-04-04T18:16:22.9472118Z   [32m  [32mâœ”[39m[0m[90m defaults[0m
2025-04-04T18:16:22.9594885Z   [32m  [32mâœ”[39m[0m[90m validation[0m
2025-04-04T18:16:22.9702010Z   [32m  [32mâœ”[39m[0m[90m with single nested subdocs[0m
2025-04-04T18:16:22.9879329Z   [32m  [32mâœ”[39m[0m[90m discriminators[0m
2025-04-04T18:16:23.0207450Z   [32m  [32mâœ”[39m[0m[90m embedded discriminators[0m
2025-04-04T18:16:23.0324865Z   [32m  [32mâœ”[39m[0m[90m toJSON seralizes map paths (gh-6478)[0m
2025-04-04T18:16:23.0569902Z   [32m  [32mâœ”[39m[0m[90m updating map doesnt crash (gh-6750)[0m
2025-04-04T18:16:23.0702728Z   [32m  [32mâœ”[39m[0m[90m works with sub doc hooks (gh-6938)[0m
2025-04-04T18:16:23.0791968Z   [32m  [32mâœ”[39m[0m[90m array of mixed maps (gh-6995)[0m
2025-04-04T18:16:23.0956796Z   [32m  [32mâœ”[39m[0m[90m only runs setters once on init (gh-7272)[0m
2025-04-04T18:16:23.1162968Z   [32m  [32mâœ”[39m[0m[90m init then set marks correct path as modified (gh-7321)[0m
2025-04-04T18:16:23.1257821Z   [32m  [32mâœ”[39m[0m[90m nested maps (gh-7630)[0m
2025-04-04T18:16:23.1345729Z   [32m  [32mâœ”[39m[0m[90m get full path in validator with `propsParameter` (gh-7447)[0m
2025-04-04T18:16:23.1411500Z   [32m  [32mâœ”[39m[0m[90m treats `of` as a schema if typeKey is not set (gh-7859)[0m
2025-04-04T18:16:23.1481014Z   [32m  [32mâœ”[39m[0m[90m works with clone() (gh-8357)[0m
2025-04-04T18:16:23.1546101Z   [32m  [32mâœ”[39m[0m[90m maps of single nested docs with inline _id (gh-8424)[0m
2025-04-04T18:16:23.1695548Z   [32m  [32mâœ”[39m[0m[90m avoids marking path as modified if setting to same value (gh-8652)[0m
2025-04-04T18:16:23.1860874Z   [32m  [32mâœ”[39m[0m[90m handles setting map value to spread document (gh-8652)[0m
2025-04-04T18:16:23.1890242Z   [32m  [32mâœ”[39m[0m[90m runs getters on map values (gh-8730)[0m
2025-04-04T18:16:23.1972373Z   [32m  [32mâœ”[39m[0m[90m handles validation of document array with maps and nested paths (gh-8767)[0m
2025-04-04T18:16:23.2122593Z   [32m  [32mâœ”[39m[0m[90m persists `.clear()` (gh-9493)[0m
2025-04-04T18:16:23.2225432Z   [32m  [32mâœ”[39m[0m[90m supports `null` in map of subdocuments (gh-9628)[0m
2025-04-04T18:16:23.2400066Z   [32m  [32mâœ”[39m[0m[90m tracks changes correctly (gh-9811)[0m
2025-04-04T18:16:23.2518399Z   [32m  [32mâœ”[39m[0m[90m handles map of arrays (gh-9813)[0m
2025-04-04T18:16:23.2797724Z   [32m  [32mâœ”[39m[0m[90m can populate map of subdocs with doc array using ref function (gh-10584)[0m
2025-04-04T18:16:23.2839883Z   [32m  [32mâœ”[39m[0m[90m propagates `flattenMaps` to nested maps (gh-10653)[0m
2025-04-04T18:16:23.3109803Z   [32m  [32mâœ”[39m[0m[90m handles populating map of arrays (gh-12494)[0m
2025-04-04T18:16:23.3222786Z   [32m  [32mâœ”[39m[0m[90m clears nested changes in subdocs (gh-15108)[0m
2025-04-04T18:16:23.3390295Z   [32m  [32mâœ”[39m[0m[90m clears nested changes in doc arrays (gh-15108)[0m
2025-04-04T18:16:23.3538068Z   [32m  [32mâœ”[39m[0m[90m handles loading and modifying map of document arrays (gh-15196)[0m
2025-04-04T18:16:23.3560894Z [0m    populate[0m
2025-04-04T18:16:23.3780974Z     [32m  [32mâœ”[39m[0m[90m populate individual path[0m
2025-04-04T18:16:23.3991249Z     [32m  [32mâœ”[39m[0m[90m populate entire map[0m
2025-04-04T18:16:23.4200027Z     [32m  [32mâœ”[39m[0m[90m populate entire map in doc[0m
2025-04-04T18:16:23.4405950Z     [32m  [32mâœ”[39m[0m[90m avoid populating as map if populate on obj (gh-6460) (gh-8157)[0m
2025-04-04T18:16:23.4643327Z     [32m  [32mâœ”[39m[0m[90m handles setting populated path to doc and then saving (gh-7745)[0m
2025-04-04T18:16:23.4881607Z     [32m  [32mâœ”[39m[0m[90m handles populating path of subdoc (gh-9359)[0m
2025-04-04T18:16:23.4932797Z 
2025-04-04T18:16:23.4933396Z [0m  types.number[0m
2025-04-04T18:16:23.4935050Z   [32m  [32mâœ”[39m[0m[90m an empty string casts to null[0m
2025-04-04T18:16:23.4936436Z   [32m  [32mâœ”[39m[0m[90m a null number should castForQuery to null[0m
2025-04-04T18:16:23.4939572Z   [32m  [32mâœ”[39m[0m[90m array throws cast number error[0m
2025-04-04T18:16:23.4941954Z   [32m  [32mâœ”[39m[0m[90m three throws cast number error[0m
2025-04-04T18:16:23.4944260Z   [32m  [32mâœ”[39m[0m[90m {} throws cast number error[0m
2025-04-04T18:16:23.4946224Z   [32m  [32mâœ”[39m[0m[90m does not throw number cast error[0m
2025-04-04T18:16:23.4947580Z   [32m  [32mâœ”[39m[0m[90m boolean casts to 0/1 (gh-3475)[0m
2025-04-04T18:16:23.4949370Z   [32m  [32mâœ”[39m[0m[90m prefers valueOf function if one exists (gh-6299)[0m
2025-04-04T18:16:23.4952622Z   [32m  [32mâœ”[39m[0m[90m throws a CastError with a bad conditional (gh-6927)[0m
2025-04-04T18:16:23.4953163Z [0m    custom caster (gh-7045)[0m
2025-04-04T18:16:23.4959985Z     [32m  [32mâœ”[39m[0m[90m disallow empty string[0m
2025-04-04T18:16:23.4962280Z     [32m  [32mâœ”[39m[0m[90m disable casting[0m
2025-04-04T18:16:23.4962598Z 
2025-04-04T18:16:23.4963350Z [0m  types.subdocument[0m
2025-04-04T18:16:23.4988811Z   [32m  [32mâœ”[39m[0m[90m returns a proper ownerDocument (gh-3589)[0m
2025-04-04T18:16:23.5001949Z   [32m  [32mâœ”[39m[0m[90m not setting timestamps in subdocuments[0m
2025-04-04T18:16:23.5007872Z [0m    #isModified[0m
2025-04-04T18:16:23.5019548Z     [32m  [32mâœ”[39m[0m[90m defers to parent isModified (gh-8223)[0m
2025-04-04T18:16:23.5053646Z 
2025-04-04T18:16:23.5054235Z [0m  updateValidators[0m
2025-04-04T18:16:23.5055026Z [0m    validators[0m
2025-04-04T18:16:23.5060468Z     [32m  [32mâœ”[39m[0m[90m flattens paths[0m
2025-04-04T18:16:23.5064397Z     [32m  [32mâœ”[39m[0m[90m doesnt flatten dates (gh-3194)[0m
2025-04-04T18:16:23.5067567Z     [32m  [32mâœ”[39m[0m[90m doesnt flatten empty arrays (gh-3554)[0m
2025-04-04T18:16:23.5072762Z     [32m  [32mâœ”[39m[0m[90m doesnt flatten decimal128 (gh-7561)[0m
2025-04-04T18:16:23.5081419Z     [32m  [32mâœ”[39m[0m[90m handles nested paths correctly (gh-3587)[0m
2025-04-04T18:16:23.5081871Z 
2025-04-04T18:16:23.5082309Z [0m  utils[0m
2025-04-04T18:16:23.5084180Z   [32m  [32mâœ”[39m[0m[90m deepEquals on ObjectIds[0m
2025-04-04T18:16:23.5091536Z   [32m  [32mâœ”[39m[0m[90m deepEquals on maps (gh-9549)[0m
2025-04-04T18:16:23.5113629Z   [32m  [32mâœ”[39m[0m[90m deepEquals on MongooseDocumentArray works[0m
2025-04-04T18:16:23.5116366Z   [32m  [32mâœ”[39m[0m[90m deepEquals with MongooseBuffer[0m
2025-04-04T18:16:23.5117867Z   [32m  [32mâœ”[39m[0m[90m `deepEqual` treats objects with different order of keys as different (gh-9571)[0m
2025-04-04T18:16:23.5118957Z   [32m  [32mâœ”[39m[0m[90m deepEqual on arrays and non-arrays (gh-11417)[0m
2025-04-04T18:16:23.5119815Z   [32m  [32mâœ”[39m[0m[90m array.flatten[0m
2025-04-04T18:16:23.5121738Z   [32m  [32mâœ”[39m[0m[90m array.unique[0m
2025-04-04T18:16:23.5122265Z [0m    ActiveRoster[0m
2025-04-04T18:16:23.5127592Z     [32m  [32mâœ”[39m[0m[90m should detect a path as required if it has been required[0m
2025-04-04T18:16:23.5128732Z     [32m  [32mâœ”[39m[0m[90m should detect a path as inited if it has been inited[0m
2025-04-04T18:16:23.5129766Z     [32m  [32mâœ”[39m[0m[90m should detect a path as modified[0m
2025-04-04T18:16:23.5131128Z     [32m  [32mâœ”[39m[0m[90m should remove a path from an old state upon a state change[0m
2025-04-04T18:16:23.5134469Z     [32m  [32mâœ”[39m[0m[90m forEach should be able to iterate through the paths belonging to one state[0m
2025-04-04T18:16:23.5136221Z     [32m  [32mâœ”[39m[0m[90m forEach should be able to iterate through the paths in the union of two or more states[0m
2025-04-04T18:16:23.5137968Z     [32m  [32mâœ”[39m[0m[90m forEach should iterate through all paths that have any state if given no state arguments[0m
2025-04-04T18:16:23.5139205Z     [32m  [32mâœ”[39m[0m[90m should be able to detect if at least one path exists in a set of states[0m
2025-04-04T18:16:23.5142014Z     [32m  [32mâœ”[39m[0m[90m should be able to `map` over the set of paths in a given state[0m
2025-04-04T18:16:23.5143644Z     [32m  [32mâœ”[39m[0m[90m should `map` over all states' paths if no states are specified in a `map` invocation[0m
2025-04-04T18:16:23.5144425Z [0m    merge[0m
2025-04-04T18:16:23.5146651Z     [32m  [32mâœ”[39m[0m[90m merges two objects together without overriding properties & methods[0m
2025-04-04T18:16:23.5147430Z [0m    mergeClone[0m
2025-04-04T18:16:23.5148484Z     [32m  [32mâœ”[39m[0m[90m handles object with valueOf() (gh-6059)[0m
2025-04-04T18:16:23.5156409Z     [32m  [32mâœ”[39m[0m[90m copies dates correctly (gh-6145)[0m
2025-04-04T18:16:23.5157056Z [0m    errorToPOJO(...)[0m
2025-04-04T18:16:23.5157673Z     [32m  [32mâœ”[39m[0m[90m converts an error to a POJO[0m
2025-04-04T18:16:23.5158528Z     [32m  [32mâœ”[39m[0m[90m throws an error when argument is not an error object[0m
2025-04-04T18:16:23.5159441Z     [32m  [32mâœ”[39m[0m[90m works with classes that extend `Error`[0m
2025-04-04T18:16:23.5160012Z [0m    toCollectionName[0m
2025-04-04T18:16:23.5160653Z     [32m  [32mâœ”[39m[0m[90m returns the same name for system.profile[0m
2025-04-04T18:16:23.5161440Z     [32m  [32mâœ”[39m[0m[90m returns the same name for system.indexes[0m
2025-04-04T18:16:23.5162223Z     [32m  [32mâœ”[39m[0m[90m throws an error when name is not a string[0m
2025-04-04T18:16:23.5163031Z     [32m  [32mâœ”[39m[0m[90m throws an error when name is an empty string[0m
2025-04-04T18:16:23.5163930Z     [32m  [32mâœ”[39m[0m[90m uses the pluralize function when provided[0m
2025-04-04T18:16:23.5164361Z 
2025-04-04T18:16:23.5164568Z [0m  versioning[0m
2025-04-04T18:16:23.5197451Z   [32m  [32mâœ”[39m[0m[90m is only added to parent schema (gh-1265)[0m
2025-04-04T18:16:23.5459199Z   [32m  [32mâœ”[39m[0m[90m versioning without version key[0m
2025-04-04T18:16:23.5614585Z   [32m  [32mâœ”[39m[0m[90m version works with strict docs[0m
2025-04-04T18:16:23.5802012Z   [32m  [32mâœ”[39m[0m[90m version works with existing unversioned docs[0m
2025-04-04T18:16:23.5937651Z   [32m  [32mâœ”[39m[0m[90m versionKey is configurable[0m
2025-04-04T18:16:23.6168395Z   [32m  [32mâœ”[39m[0m[90m can be disabled[0m
2025-04-04T18:16:23.6335415Z   [32m  [32mâœ”[39m[0m[90m works with numbericAlpha paths[0m
2025-04-04T18:16:23.6558346Z   [32m  [32mâœ”[39m[0m[90m allows concurrent push[0m
2025-04-04T18:16:23.6692548Z   [32m  [32mâœ”[39m[0m[90m allows concurrent push and pull[0m
2025-04-04T18:16:23.6849673Z   [32m  [32mâœ”[39m[0m[90m throws if you set a positional path after pulling[0m
2025-04-04T18:16:23.6986986Z   [32m  [32mâœ”[39m[0m[90m allows pull/push after $set[0m
2025-04-04T18:16:23.7103919Z   [32m  [32mâœ”[39m[0m[90m should add version to where clause[0m
2025-04-04T18:16:23.7234666Z   [32m  [32mâœ”[39m[0m[90m $set after pull/push throws[0m
2025-04-04T18:16:23.7372804Z   [32m  [32mâœ”[39m[0m[90m doesnt persist conflicting changes[0m
2025-04-04T18:16:23.7517932Z   [32m  [32mâœ”[39m[0m[90m increments version on push[0m
2025-04-04T18:16:23.7698521Z   [32m  [32mâœ”[39m[0m[90m does not increment version when setting nested paths[0m
2025-04-04T18:16:23.7806700Z   [32m  [32mâœ”[39m[0m[90m increments version when modifying mixed array[0m
2025-04-04T18:16:23.8020071Z   [32m  [32mâœ”[39m[0m[90m increments version when $set-ing an array[0m
2025-04-04T18:16:23.8158765Z   [32m  [32mâœ”[39m[0m[90m increments version and converts to $set when mixing $shift and $addToSet[0m
2025-04-04T18:16:23.8290868Z   [32m  [32mâœ”[39m[0m[90m should not increment version for non-versioned fields[0m
2025-04-04T18:16:23.8430891Z   [32m  [32mâœ”[39m[0m[90m should not increment version for non-versioned sub-document fields[0m
2025-04-04T18:16:23.8640559Z   [32m  [32mâœ”[39m[0m[90m should persist correctly when optimisticConcurrency is true gh-10128[0m
2025-04-04T18:16:23.8787971Z   [32m  [32mâœ”[39m[0m[90m throws VersionError when saving with no changes and optimistic concurrency is true (gh-11295)[0m
2025-04-04T18:16:23.9001538Z   [32m  [32mâœ”[39m[0m[90m should support optimisticConcurrency being an array of strings[0m
2025-04-04T18:16:23.9146962Z   [32m  [32mâœ”[39m[0m[90m gh-1898[0m
2025-04-04T18:16:23.9356544Z   [32m  [32mâœ”[39m[0m[90m can remove version key from toObject() (gh-2675)[0m
2025-04-04T18:16:23.9591465Z   [32m  [32mâœ”[39m[0m[90m pull doesnt add version where clause (gh-6190)[0m
2025-04-04T18:16:23.9752970Z   [32m  [32mâœ”[39m[0m[90m copying doc works (gh-5779)[0m
2025-04-04T18:16:23.9960425Z   [32m  [32mâœ”[39m[0m[90m optimistic concurrency (gh-9001) (gh-5424)[0m
2025-04-04T18:16:24.0163599Z   [32m  [32mâœ”[39m[0m[90m adds version to filter if pushing to a nested array (gh-11108)[0m
2025-04-04T18:16:24.0329853Z   [32m  [32mâœ”[39m[0m[90m can store version key in nested property (gh-10980)[0m
2025-04-04T18:16:24.0438054Z [0m    doc.increment()[0m
2025-04-04T18:16:24.0585600Z     [32m  [32mâœ”[39m[0m[90m works without any other changes (gh-1475)[0m
2025-04-04T18:16:24.0617542Z 
2025-04-04T18:16:24.0618219Z [0m  VirtualType[0m
2025-04-04T18:16:24.0618824Z [0m    clone[0m
2025-04-04T18:16:24.0621067Z     [32m  [32mâœ”[39m[0m[90m copies path and options correctly (gh-8587)[0m
2025-04-04T18:16:24.0621657Z 
2025-04-04T18:16:24.0792214Z 
2025-04-04T18:16:24.0793207Z [92m [0m[32m 3735 passing[0m[90m (58s)[0m
2025-04-04T18:16:24.0794333Z [36m [0m[36m 54 pending[0m
2025-04-04T18:16:24.0794812Z [31m  1 failing[0m
2025-04-04T18:16:24.0795028Z 
2025-04-04T18:16:24.0798621Z [0m  1) model: findOneAndReplace:
2025-04-04T18:16:24.0799059Z        middleware
2025-04-04T18:16:24.0799432Z          works with exec() (gh-439):
2025-04-04T18:16:24.0801552Z [0m[31m     Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/home/runner/work/mongoose/mongoose/test/model.findOneAndReplace.test.js)[0m[90m
2025-04-04T18:16:24.0803005Z       at listOnTimeout (node:internal/timers:569:17)
2025-04-04T18:16:24.0803380Z       at process.processTimers (node:internal/timers:512:7)
2025-04-04T18:16:24.0803707Z [0m
2025-04-04T18:16:24.0803808Z 
2025-04-04T18:16:24.0803816Z 
2025-04-04T18:16:27.1492937Z ##[error]Process completed with exit code 1.
