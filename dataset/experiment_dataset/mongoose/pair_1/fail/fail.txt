2025-04-11T19:22:17.7227652Z Requested labels: ubuntu-22.04
2025-04-11T19:22:17.7227925Z Job defined at: Automattic/mongoose/.github/workflows/test.yml@refs/heads/8.14
2025-04-11T19:22:17.7228060Z Waiting for a runner to pick up this job...
2025-04-11T19:22:19.8233830Z Job is waiting for a hosted runner to come online.
2025-04-11T19:22:21.7954357Z Job is about to start running on the hosted runner: GitHub Actions 266 (hosted)
2025-04-11T19:22:23.4494975Z Current runner version: '2.323.0'
2025-04-11T19:22:23.4519671Z ##[group]Operating System
2025-04-11T19:22:23.4520613Z Ubuntu
2025-04-11T19:22:23.4521214Z 22.04.5
2025-04-11T19:22:23.4521704Z LTS
2025-04-11T19:22:23.4522124Z ##[endgroup]
2025-04-11T19:22:23.4522715Z ##[group]Runner Image
2025-04-11T19:22:23.4523281Z Image: ubuntu-22.04
2025-04-11T19:22:23.4523830Z Version: 20250406.1.0
2025-04-11T19:22:23.4524868Z Included Software: https://github.com/actions/runner-images/blob/ubuntu22/20250406.1/images/ubuntu/Ubuntu2204-Readme.md
2025-04-11T19:22:23.4526250Z Image Release: https://github.com/actions/runner-images/releases/tag/ubuntu22%2F20250406.1
2025-04-11T19:22:23.4527172Z ##[endgroup]
2025-04-11T19:22:23.4527737Z ##[group]Runner Image Provisioner
2025-04-11T19:22:23.4528334Z 2.0.422.1
2025-04-11T19:22:23.4528870Z ##[endgroup]
2025-04-11T19:22:23.4529840Z ##[group]GITHUB_TOKEN Permissions
2025-04-11T19:22:23.4531754Z Contents: read
2025-04-11T19:22:23.4532363Z Metadata: read
2025-04-11T19:22:23.4533122Z ##[endgroup]
2025-04-11T19:22:23.4535935Z Secret source: Actions
2025-04-11T19:22:23.4536668Z Prepare workflow directory
2025-04-11T19:22:23.4894957Z Prepare all required actions
2025-04-11T19:22:23.4931655Z Getting action download info
2025-04-11T19:22:23.7311106Z Download action repository 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' (SHA:11bd71901bbe5b1630ceea73d27597364c9af683)
2025-04-11T19:22:23.8325162Z Download action repository 'actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e' (SHA:cdca7365b2dadb8aad0a33bc7601856ffabcc48e)
2025-04-11T19:22:24.0339221Z ##[group]Download immutable action package 'actions/cache@v4'
2025-04-11T19:22:24.0341193Z Version: 4.2.3
2025-04-11T19:22:24.0342807Z Digest: sha256:c8a3bb963e1f1826d8fcc8d1354f0dd29d8ac1db1d4f6f20247055ae11b81ed9
2025-04-11T19:22:24.0344371Z Source commit SHA: 5a3ec84eff668545956fd18022155c47e93e2684
2025-04-11T19:22:24.0345428Z ##[endgroup]
2025-04-11T19:22:24.1388830Z Download action repository 'denoland/setup-deno@v2' (SHA:909cc5acb0fdd60627fb858598759246509fa755)
2025-04-11T19:22:24.5078817Z Complete job name: Deno tests
2025-04-11T19:22:24.5760300Z ##[group]Run actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
2025-04-11T19:22:24.5761397Z with:
2025-04-11T19:22:24.5761807Z   repository: Automattic/mongoose
2025-04-11T19:22:24.5762452Z   token: ***
2025-04-11T19:22:24.5762835Z   ssh-strict: true
2025-04-11T19:22:24.5763219Z   ssh-user: git
2025-04-11T19:22:24.5763628Z   persist-credentials: true
2025-04-11T19:22:24.5764073Z   clean: true
2025-04-11T19:22:24.5764477Z   sparse-checkout-cone-mode: true
2025-04-11T19:22:24.5764953Z   fetch-depth: 1
2025-04-11T19:22:24.5765337Z   fetch-tags: false
2025-04-11T19:22:24.5765745Z   show-progress: true
2025-04-11T19:22:24.5766148Z   lfs: false
2025-04-11T19:22:24.5766528Z   submodules: false
2025-04-11T19:22:24.5766933Z   set-safe-directory: true
2025-04-11T19:22:24.5767601Z env:
2025-04-11T19:22:24.5767981Z   MONGOMS_VERSION: 6.0.15
2025-04-11T19:22:24.5768438Z   MONGOMS_PREFER_GLOBAL_PATH: 1
2025-04-11T19:22:24.5768915Z   FORCE_COLOR: true
2025-04-11T19:22:24.5769332Z ##[endgroup]
2025-04-11T19:22:24.8035767Z Syncing repository: Automattic/mongoose
2025-04-11T19:22:24.8037578Z ##[group]Getting Git version info
2025-04-11T19:22:24.8038331Z Working directory is '/home/runner/work/mongoose/mongoose'
2025-04-11T19:22:24.8039372Z [command]/usr/bin/git version
2025-04-11T19:22:24.8122358Z git version 2.49.0
2025-04-11T19:22:24.8151342Z ##[endgroup]
2025-04-11T19:22:24.8166514Z Temporarily overriding HOME='/home/runner/work/_temp/90ef009e-7035-4bfc-a0cd-3da350c864df' before making global git config changes
2025-04-11T19:22:24.8169277Z Adding repository directory to the temporary git global config as a safe directory
2025-04-11T19:22:24.8180500Z [command]/usr/bin/git config --global --add safe.directory /home/runner/work/mongoose/mongoose
2025-04-11T19:22:24.8215515Z Deleting the contents of '/home/runner/work/mongoose/mongoose'
2025-04-11T19:22:24.8219717Z ##[group]Initializing the repository
2025-04-11T19:22:24.8305885Z [command]/usr/bin/git init /home/runner/work/mongoose/mongoose
2025-04-11T19:22:24.8307919Z hint: Using 'master' as the name for the initial branch. This default branch name
2025-04-11T19:22:24.8310073Z hint: is subject to change. To configure the initial branch name to use in all
2025-04-11T19:22:24.8312236Z hint: of your new repositories, which will suppress this warning, call:
2025-04-11T19:22:24.8313657Z hint:
2025-04-11T19:22:24.8314589Z hint: 	git config --global init.defaultBranch <name>
2025-04-11T19:22:24.8315691Z hint:
2025-04-11T19:22:24.8316772Z hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
2025-04-11T19:22:24.8318478Z hint: 'development'. The just-created branch can be renamed via this command:
2025-04-11T19:22:24.8319337Z hint:
2025-04-11T19:22:24.8319767Z hint: 	git branch -m <name>
2025-04-11T19:22:24.8321166Z Initialized empty Git repository in /home/runner/work/mongoose/mongoose/.git/
2025-04-11T19:22:24.8322828Z [command]/usr/bin/git remote add origin https://github.com/Automattic/mongoose
2025-04-11T19:22:24.8347511Z ##[endgroup]
2025-04-11T19:22:24.8349005Z ##[group]Disabling automatic garbage collection
2025-04-11T19:22:24.8352445Z [command]/usr/bin/git config --local gc.auto 0
2025-04-11T19:22:24.8381094Z ##[endgroup]
2025-04-11T19:22:24.8382593Z ##[group]Setting up auth
2025-04-11T19:22:24.8388572Z [command]/usr/bin/git config --local --name-only --get-regexp core\.sshCommand
2025-04-11T19:22:24.8419966Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :"
2025-04-11T19:22:24.8735972Z [command]/usr/bin/git config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
2025-04-11T19:22:24.8764265Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :"
2025-04-11T19:22:24.8982924Z [command]/usr/bin/git config --local http.https://github.com/.extraheader AUTHORIZATION: basic ***
2025-04-11T19:22:24.9019781Z ##[endgroup]
2025-04-11T19:22:24.9021040Z ##[group]Fetching the repository
2025-04-11T19:22:24.9029306Z [command]/usr/bin/git -c protocol.version=2 fetch --no-tags --prune --no-recurse-submodules --depth=1 origin +6044d8ed2348ab4a4d662a2cffbbf7a8f5c70f0f:refs/remotes/origin/8.14
2025-04-11T19:22:25.4604423Z From https://github.com/Automattic/mongoose
2025-04-11T19:22:25.4608417Z  * [new ref]         6044d8ed2348ab4a4d662a2cffbbf7a8f5c70f0f -> origin/8.14
2025-04-11T19:22:25.4650696Z ##[endgroup]
2025-04-11T19:22:25.4652672Z ##[group]Determining the checkout info
2025-04-11T19:22:25.4655098Z ##[endgroup]
2025-04-11T19:22:25.4656480Z [command]/usr/bin/git sparse-checkout disable
2025-04-11T19:22:25.4699257Z [command]/usr/bin/git config --local --unset-all extensions.worktreeConfig
2025-04-11T19:22:25.4730996Z ##[group]Checking out the ref
2025-04-11T19:22:25.4734936Z [command]/usr/bin/git checkout --progress --force -B 8.14 refs/remotes/origin/8.14
2025-04-11T19:22:25.5253960Z Switched to a new branch '8.14'
2025-04-11T19:22:25.5256177Z branch '8.14' set up to track 'origin/8.14'.
2025-04-11T19:22:25.5265440Z ##[endgroup]
2025-04-11T19:22:25.5303927Z [command]/usr/bin/git log -1 --format=%H
2025-04-11T19:22:25.5325758Z 6044d8ed2348ab4a4d662a2cffbbf7a8f5c70f0f
2025-04-11T19:22:25.5625195Z ##[group]Run actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e
2025-04-11T19:22:25.5626876Z with:
2025-04-11T19:22:25.5627734Z   node-version: 22
2025-04-11T19:22:25.5628670Z   always-auth: false
2025-04-11T19:22:25.5629631Z   check-latest: false
2025-04-11T19:22:25.5631146Z   token: ***
2025-04-11T19:22:25.5632012Z env:
2025-04-11T19:22:25.5632886Z   MONGOMS_VERSION: 6.0.15
2025-04-11T19:22:25.5633950Z   MONGOMS_PREFER_GLOBAL_PATH: 1
2025-04-11T19:22:25.5635060Z   FORCE_COLOR: true
2025-04-11T19:22:25.5635991Z ##[endgroup]
2025-04-11T19:22:25.7379643Z Found in cache @ /opt/hostedtoolcache/node/22.14.0/x64
2025-04-11T19:22:25.7385579Z ##[group]Environment details
2025-04-11T19:22:31.3293364Z node: v22.14.0
2025-04-11T19:22:31.3293980Z npm: 10.9.2
2025-04-11T19:22:31.3294318Z yarn: 1.22.22
2025-04-11T19:22:31.3296684Z ##[endgroup]
2025-04-11T19:22:31.3438406Z ##[group]Run actions/cache@v4
2025-04-11T19:22:31.3438662Z with:
2025-04-11T19:22:31.3438855Z   path: ~/.cache/mongodb-binaries
2025-04-11T19:22:31.3439092Z   key: deno-6.0.15
2025-04-11T19:22:31.3439296Z   enableCrossOsArchive: false
2025-04-11T19:22:31.3439528Z   fail-on-cache-miss: false
2025-04-11T19:22:31.3439749Z   lookup-only: false
2025-04-11T19:22:31.3439943Z   save-always: false
2025-04-11T19:22:31.3440352Z env:
2025-04-11T19:22:31.3440550Z   MONGOMS_VERSION: 6.0.15
2025-04-11T19:22:31.3440770Z   MONGOMS_PREFER_GLOBAL_PATH: 1
2025-04-11T19:22:31.3440990Z   FORCE_COLOR: true
2025-04-11T19:22:31.3441182Z ##[endgroup]
2025-04-11T19:22:31.5355609Z Cache hit for: deno-6.0.15
2025-04-11T19:22:31.9289545Z Received 39400999 of 39400999 (100.0%), 107.7 MBs/sec
2025-04-11T19:22:31.9290598Z Cache Size: ~38 MB (39400999 B)
2025-04-11T19:22:31.9324143Z [command]/usr/bin/tar -xf /home/runner/work/_temp/8aca8f24-34e4-401e-89a5-a8e522cd2f47/cache.tzst -P -C /home/runner/work/mongoose/mongoose --use-compress-program unzstd
2025-04-11T19:22:32.1763793Z Cache restored successfully
2025-04-11T19:22:32.2036083Z Cache restored from key: deno-6.0.15
2025-04-11T19:22:32.2185115Z ##[group]Run denoland/setup-deno@v2
2025-04-11T19:22:32.2185408Z with:
2025-04-11T19:22:32.2185596Z   deno-version: v2.1.x
2025-04-11T19:22:32.2185826Z   deno-binary-name: deno
2025-04-11T19:22:32.2186042Z env:
2025-04-11T19:22:32.2186229Z   MONGOMS_VERSION: 6.0.15
2025-04-11T19:22:32.2186483Z   MONGOMS_PREFER_GLOBAL_PATH: 1
2025-04-11T19:22:32.2186768Z   FORCE_COLOR: true
2025-04-11T19:22:32.2186964Z ##[endgroup]
2025-04-11T19:22:32.5541612Z Going to install stable version 2.1.11.
2025-04-11T19:22:32.5544153Z Downloading Deno from https://github.com/denoland/deno/releases/download/v2.1.11/deno-x86_64-unknown-linux-gnu.zip.
2025-04-11T19:22:32.9402042Z [command]/usr/bin/unzip -o -q /home/runner/work/_temp/1287946d-0718-42c0-bb5a-08473c8d6f10
2025-04-11T19:22:34.0612346Z Cached Deno to /opt/hostedtoolcache/deno/2.1.11/x64.
2025-04-11T19:22:34.0625456Z Installation complete.
2025-04-11T19:22:34.0757561Z ##[group]Run deno --version
2025-04-11T19:22:34.0757889Z [36;1mdeno --version[0m
2025-04-11T19:22:34.0852627Z shell: /usr/bin/bash -e {0}
2025-04-11T19:22:34.0852918Z env:
2025-04-11T19:22:34.0853128Z   MONGOMS_VERSION: 6.0.15
2025-04-11T19:22:34.0853404Z   MONGOMS_PREFER_GLOBAL_PATH: 1
2025-04-11T19:22:34.0853678Z   FORCE_COLOR: true
2025-04-11T19:22:34.0853903Z ##[endgroup]
2025-04-11T19:22:34.0988590Z deno 2.1.10 (stable, release, x86_64-unknown-linux-gnu)
2025-04-11T19:22:34.0989183Z v8 13.0.245.12-rusty
2025-04-11T19:22:34.0989560Z typescript 5.6.2
2025-04-11T19:22:34.1022034Z ##[group]Run npm install
2025-04-11T19:22:34.1022318Z [36;1mnpm install[0m
2025-04-11T19:22:34.1071153Z shell: /usr/bin/bash -e {0}
2025-04-11T19:22:34.1071389Z env:
2025-04-11T19:22:34.1071581Z   MONGOMS_VERSION: 6.0.15
2025-04-11T19:22:34.1071817Z   MONGOMS_PREFER_GLOBAL_PATH: 1
2025-04-11T19:22:34.1072048Z   FORCE_COLOR: true
2025-04-11T19:22:34.1072237Z ##[endgroup]
2025-04-11T19:22:57.3929261Z npm warn deprecated inflight@1.0.6: This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.
2025-04-11T19:22:57.8081115Z npm warn deprecated lodash.get@4.4.2: This package is deprecated. Use the optional chaining (?.) operator instead.
2025-04-11T19:22:58.6592738Z npm warn deprecated rimraf@3.0.2: Rimraf versions prior to v4 are no longer supported
2025-04-11T19:22:58.8257667Z npm warn deprecated @humanwhocodes/object-schema@2.0.3: Use @eslint/object-schema instead
2025-04-11T19:22:58.9188622Z npm warn deprecated @humanwhocodes/config-array@0.13.0: Use @eslint/config-array instead
2025-04-11T19:22:59.2173915Z npm warn deprecated calmcard@0.1.1: no longer maintained
2025-04-11T19:22:59.2457964Z npm warn deprecated nopter@0.3.0: try optionator
2025-04-11T19:22:59.4439511Z npm warn deprecated urlobj@0.0.11: use universal-url, minurl, relateurl, url-relation
2025-04-11T19:22:59.8213834Z npm warn deprecated q@1.5.1: You or someone you depend on is using Q, the JavaScript Promise library that gave JavaScript developers strong feelings about promises. They can almost certainly migrate to the native JavaScript promise now. Thank you literally everyone for joining me in this bet against the odds. Be excellent to each other.
2025-04-11T19:22:59.8216092Z npm warn deprecated
2025-04-11T19:22:59.8217161Z npm warn deprecated (For a CapTP with native promises, see @endo/eventual-send and @endo/captp)
2025-04-11T19:22:59.8570275Z npm warn deprecated lodash.isequal@4.5.0: This package is deprecated. Use require('node:util').isDeepStrictEqual instead.
2025-04-11T19:23:00.1249340Z npm warn deprecated glob@7.2.3: Glob versions prior to v9 are no longer supported
2025-04-11T19:23:00.2865812Z npm warn deprecated glob@7.2.3: Glob versions prior to v9 are no longer supported
2025-04-11T19:23:00.5024525Z npm warn deprecated uuid@2.0.3: Please upgrade  to version 7 or higher.  Older versions may use Math.random() in certain circumstances, which is known to be problematic.  See https://v8.dev/blog/math-random for details.
2025-04-11T19:23:00.5036143Z npm warn deprecated glob@7.2.3: Glob versions prior to v9 are no longer supported
2025-04-11T19:23:01.5180634Z npm warn deprecated eslint@8.57.1: This version is no longer supported. Please see https://eslint.org/version-support for other options.
2025-04-11T19:23:02.2838998Z 
2025-04-11T19:23:02.2839853Z added 1005 packages, and audited 1006 packages in 28s
2025-04-11T19:23:02.2840687Z 
2025-04-11T19:23:02.2841077Z 202 packages are looking for funding
2025-04-11T19:23:02.2841581Z   run `npm fund` for details
2025-04-11T19:23:02.2874829Z 
2025-04-11T19:23:02.2875596Z 9 vulnerabilities (4 moderate, 5 high)
2025-04-11T19:23:02.2875949Z 
2025-04-11T19:23:02.2876306Z To address issues that do not require attention, run:
2025-04-11T19:23:02.2876853Z   npm audit fix
2025-04-11T19:23:02.2877000Z 
2025-04-11T19:23:02.2877241Z To address all issues (including breaking changes), run:
2025-04-11T19:23:02.2877616Z   npm audit fix --force
2025-04-11T19:23:02.2877767Z 
2025-04-11T19:23:02.2877898Z Run `npm audit` for details.
2025-04-11T19:23:02.3480674Z ##[group]Run npm run test-deno
2025-04-11T19:23:02.3481024Z [36;1mnpm run test-deno[0m
2025-04-11T19:23:02.3538980Z shell: /usr/bin/bash -e {0}
2025-04-11T19:23:02.3539222Z env:
2025-04-11T19:23:02.3539403Z   MONGOMS_VERSION: 6.0.15
2025-04-11T19:23:02.3539636Z   MONGOMS_PREFER_GLOBAL_PATH: 1
2025-04-11T19:23:02.3539881Z   FORCE_COLOR: true
2025-04-11T19:23:02.3540070Z ##[endgroup]
2025-04-11T19:23:02.4618527Z 
2025-04-11T19:23:02.4619096Z > mongoose@8.13.2 test-deno
2025-04-11T19:23:02.4619959Z > deno run --allow-env --allow-read --allow-net --allow-run --allow-sys --allow-write ./test/deno.js
2025-04-11T19:23:02.4620694Z 
2025-04-11T19:23:03.1844821Z [0m[32mDownload[0m https://deno.land/std/flags/mod.ts
2025-04-11T19:23:03.5164918Z [0m[33mWarning[0m Implicitly using latest version (0.224.0) for https://deno.land/std/flags/mod.ts
2025-04-11T19:23:03.5166819Z [0m[32mDownload[0m https://deno.land/std@0.224.0/flags/mod.ts
2025-04-11T19:23:03.5334907Z [0m[32mDownload[0m https://deno.land/std@0.224.0/assert/assert_exists.ts
2025-04-11T19:23:03.5845192Z [0m[32mDownload[0m https://deno.land/std@0.224.0/assert/assertion_error.ts
2025-04-11T19:23:04.1047551Z [31m
2025-04-11T19:23:04.1048056Z You're not testing shards!
2025-04-11T19:23:04.1049921Z Please set the MONGOOSE_SHARD_TEST_URI env variable.
2025-04-11T19:23:04.1050900Z e.g: `mongodb://127.0.0.1:27017/database
2025-04-11T19:23:04.1051596Z Sharding must already be enabled on your database
2025-04-11T19:23:04.1052526Z [39m
2025-04-11T19:23:04.1773007Z 
2025-04-11T19:23:04.1816398Z [0m[0m
2025-04-11T19:23:04.2475508Z [0m  SchemaDate[0m
2025-04-11T19:23:04.2566770Z   [32m  [32m✔[39m[0m[90m accepts a Date[0m
2025-04-11T19:23:04.2613215Z   [32m  [32m✔[39m[0m[90m casts a date string to a string[0m
2025-04-11T19:23:04.2659195Z   [32m  [32m✔[39m[0m[90m interprets a number as a unix timestamp[0m
2025-04-11T19:23:04.2705900Z   [32m  [32m✔[39m[0m[90m attempts to interpret a string as a Date, not a timestamo (gh-5395)[0m
2025-04-11T19:23:04.2751942Z   [32m  [32m✔[39m[0m[90m casts any object with a `.valueOf` function to a date[0m
2025-04-11T19:23:04.2798377Z   [32m  [32m✔[39m[0m[90m casts string representation of unix timestamps (gh-6443)[0m
2025-04-11T19:23:04.2831327Z 
2025-04-11T19:23:04.2832476Z [0m  sharding[0m
2025-04-11T19:23:04.2869873Z   [32m  [32m✔[39m[0m[90m should handle shard keys properly (gh-2127)[0m
2025-04-11T19:23:04.2901953Z 
2025-04-11T19:23:04.2902372Z [0m  toObject()[0m
2025-04-11T19:23:04.2945767Z   [32m  [32m✔[39m[0m[90m should inherit options from schema[0m
2025-04-11T19:23:04.2991273Z   [32m  [32m✔[39m[0m[90m can overwrite schema-set default options[0m
2025-04-11T19:23:04.3037286Z   [32m  [32m✔[39m[0m[90m doesnt crash with empty object (gh-3130)[0m
2025-04-11T19:23:04.3069383Z 
2025-04-11T19:23:04.3069947Z [0m  VirtualType[0m
2025-04-11T19:23:04.3081619Z [0m    clone[0m
2025-04-11T19:23:04.3126978Z     [32m  [32m✔[39m[0m[90m copies path and options correctly (gh-8587)[0m
2025-04-11T19:23:04.3180478Z 
2025-04-11T19:23:04.3181258Z [0m  model: findByIdAndUpdate:[0m
2025-04-11T19:23:04.3601720Z   [32m  [32m✔[39m[0m[90m returns the edited document with previous and target discriminators types defined[0m
2025-04-11T19:23:04.3812754Z   [32m  [32m✔[39m[0m[90m returns the edited document with only previous discriminator type defined[0m
2025-04-11T19:23:04.3897423Z 
2025-04-11T19:23:04.3898226Z [0m  ValidationError[0m
2025-04-11T19:23:04.3935338Z   [32m  [32m✔[39m[0m[90m JSON.stringify() with message (gh-5309) (gh-9296)[0m
2025-04-11T19:23:04.3979383Z   [32m  [32m✔[39m[0m[90m default error message[0m
2025-04-11T19:23:04.4066561Z   [32m  [32m✔[39m[0m[90m should have error name in Cast error gh-10166[0m
2025-04-11T19:23:04.4088590Z [0m    #infiniteRecursion[0m
2025-04-11T19:23:04.4161221Z     [32m  [32m✔[39m[0m[90m does not cause RangeError (gh-1834)[0m
2025-04-11T19:23:04.4204841Z [0m    #minDate[0m
2025-04-11T19:23:04.4262567Z     [32m  [32m✔[39m[0m[90m causes a validation error[0m
2025-04-11T19:23:04.4306268Z [0m    #maxDate[0m
2025-04-11T19:23:04.4359396Z     [32m  [32m✔[39m[0m[90m causes a validation error[0m
2025-04-11T19:23:04.4403143Z [0m    #minLength[0m
2025-04-11T19:23:04.4456948Z     [32m  [32m✔[39m[0m[90m causes a validation error[0m
2025-04-11T19:23:04.4530058Z     [32m  [32m✔[39m[0m[90m with correct error message (gh-4207)[0m
2025-04-11T19:23:04.4574128Z [0m    #maxLength[0m
2025-04-11T19:23:04.4633352Z     [32m  [32m✔[39m[0m[90m causes a validation error[0m
2025-04-11T19:23:04.4676929Z [0m    #toString[0m
2025-04-11T19:23:04.4739077Z     [32m  [32m✔[39m[0m[90m does not cause RangeError (gh-1296)[0m
2025-04-11T19:23:04.4782350Z [0m    formatMessage[0m
2025-04-11T19:23:04.4826599Z     [32m  [32m✔[39m[0m[90m replaces properties in a message[0m
2025-04-11T19:23:04.4870053Z [0m    when user code defines a r/o Error#toJSON[0m
2025-04-11T19:23:04.4915428Z     [36m  - should not fail[0m
2025-04-11T19:23:04.4969822Z 
2025-04-11T19:23:04.4971847Z [0m  mongoose module:[0m
2025-04-11T19:23:04.5012112Z   [32m  [32m✔[39m[0m[90m legacy pluralize by default (gh-5958)[0m
2025-04-11T19:23:04.5057039Z   [32m  [32m✔[39m[0m[90m returns legacy pluralize function by default[0m
2025-04-11T19:23:04.5104535Z   [32m  [32m✔[39m[0m[90m sets custom pluralize function (gh-5877)[0m
2025-04-11T19:23:04.5269549Z   [32m  [32m✔[39m[0m[90m debug to stream (gh-7018)[0m
2025-04-11T19:23:04.5369251Z   [32m  [32m✔[39m[0m[90m should collect the args correctly gh-13364[0m
2025-04-11T19:23:04.5413666Z   [32m  [32m✔[39m[0m[90m {g,s}etting options[0m
2025-04-11T19:23:04.5462288Z   [32m  [32m✔[39m[0m[90m allows `const { model } = mongoose` (gh-3768)[0m
2025-04-11T19:23:04.5506538Z   [32m  [32m✔[39m[0m[90m options object (gh-8144)[0m
2025-04-11T19:23:04.5554563Z   [32m  [32m✔[39m[0m[90m bufferCommands option (gh-5879) (gh-9179)[0m
2025-04-11T19:23:04.5609458Z   [32m  [32m✔[39m[0m[90m cloneSchemas option (gh-6274)[0m
2025-04-11T19:23:04.5646925Z   [32m  [32m✔[39m[0m[90m supports disabling `id` via global plugin (gh-10701)[0m
2025-04-11T19:23:04.5693003Z   [32m  [32m✔[39m[0m[90m objectIdGetter option (gh-6588)[0m
2025-04-11T19:23:04.5791752Z   [32m  [32m✔[39m[0m[90m runValidators option (gh-6865) (gh-6578)[0m
2025-04-11T19:23:04.5858795Z   [32m  [32m✔[39m[0m[90m toJSON options (gh-6815)[0m
2025-04-11T19:23:04.5908835Z   [32m  [32m✔[39m[0m[90m toObject options (gh-6815)[0m
2025-04-11T19:23:04.5976999Z   [32m  [32m✔[39m[0m[90m strict option (gh-6858)[0m
2025-04-11T19:23:04.6209004Z   [32m  [32m✔[39m[0m[90m declaring global plugins (gh-5690)[0m
2025-04-11T19:23:04.6265279Z   [32m  [32m✔[39m[0m[90m declaring global plugins with tags (gh-9780)[0m
2025-04-11T19:23:04.6327765Z   [32m  [32m✔[39m[0m[90m global plugins on nested schemas underneath embedded discriminators (gh-7370)[0m
2025-04-11T19:23:04.6384504Z   [32m  [32m✔[39m[0m[90m global plugins with applyPluginsToDiscriminators (gh-7435)[0m
2025-04-11T19:23:04.6437223Z   [32m  [32m✔[39m[0m[90m global plugins with applyPluginsToChildSchemas (gh-13887)[0m
2025-04-11T19:23:04.6491016Z   [32m  [32m✔[39m[0m[90m global plugins recompile schemas (gh-7572)[0m
2025-04-11T19:23:04.6554907Z   [32m  [32m✔[39m[0m[90m top-level ObjectId, Decimal128, Mixed (gh-6760)[0m
2025-04-11T19:23:04.6765860Z   [32m  [32m✔[39m[0m[90m stubbing now() for timestamps (gh-6728)[0m
2025-04-11T19:23:04.6813593Z   [32m  [32m✔[39m[0m[90m isolates custom types between mongoose instances (gh-6933) (gh-7158)[0m
2025-04-11T19:23:04.6861272Z   [32m  [32m✔[39m[0m[90m throws an error on setting invalid options (gh-6899)[0m
2025-04-11T19:23:04.6910945Z   [32m  [32m✔[39m[0m[90m clones schema when instance of another Mongoose instance's Schema class (gh-11047)[0m
2025-04-11T19:23:04.6964396Z   [32m  [32m✔[39m[0m[90m deleteModel()[0m
2025-04-11T19:23:04.7010960Z   [32m  [32m✔[39m[0m[90m isValidObjectId (gh-3823)[0m
2025-04-11T19:23:04.7056471Z   [32m  [32m✔[39m[0m[90m isObjectIdOrHexString (gh-11419)[0m
2025-04-11T19:23:04.7359546Z   [32m  [32m✔[39m[0m[90m global `strictPopulate` works when false (gh-10694)[0m
2025-04-11T19:23:04.7538549Z   [32m  [32m✔[39m[0m[90m global `strictPopulate` works when true (gh-10694)[0m
2025-04-11T19:23:04.7703895Z   [32m  [32m✔[39m[0m[90m allows global `strictPopulate` to be overriden on specific queries set to true (gh-10694)[0m
2025-04-11T19:23:04.7924787Z   [32m  [32m✔[39m[0m[90m allows global `strictPopulate` to be overriden on specific queries set to false (gh-10694)[0m
2025-04-11T19:23:04.8030416Z   [32m  [32m✔[39m[0m[90m supports skipOriginalStackTraces option (gh-15194)[0m
2025-04-11T19:23:04.8051870Z [0m    default connection works[0m
2025-04-11T19:23:04.8131168Z     [32m  [32m✔[39m[0m[90m without options[0m
2025-04-11T19:23:04.8228522Z     [32m  [32m✔[39m[0m[90m with promise (gh-3790)[0m
2025-04-11T19:23:04.8271918Z [0m    disconnection of all connections[0m
2025-04-11T19:23:04.8352018Z     [32m  [32m✔[39m[0m[90m with callback[0m
2025-04-11T19:23:04.8453371Z     [32m  [32m✔[39m[0m[90m with promise (gh-3790)[0m
2025-04-11T19:23:04.8485952Z [0m      no callback[0m
2025-04-11T19:23:04.8604508Z       [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:23:04.8669590Z [0m    model()[0m
2025-04-11T19:23:04.8715285Z     [32m  [32m✔[39m[0m[90m accessing a model that hasn't been defined[0m
2025-04-11T19:23:04.8789279Z     [32m  [32m✔[39m[0m[90m returns the model at creation[0m
2025-04-11T19:23:04.8860074Z     [32m  [32m✔[39m[0m[90m prevents overwriting pre-existing models[0m
2025-04-11T19:23:04.8930362Z     [32m  [32m✔[39m[0m[90m allows passing identical name + schema args[0m
2025-04-11T19:23:04.8999112Z     [32m  [32m✔[39m[0m[90m allows passing identical name+schema+collection args (gh-5767)[0m
2025-04-11T19:23:04.9065251Z     [32m  [32m✔[39m[0m[90m throws on unknown model name[0m
2025-04-11T19:23:04.9097640Z [0m      passing collection name[0m
2025-04-11T19:23:04.9108877Z [0m        when model name already exists[0m
2025-04-11T19:23:04.9180879Z         [32m  [32m✔[39m[0m[90m returns a new uncached model[0m
2025-04-11T19:23:04.9245612Z [0m      passing object literal schemas[0m
2025-04-11T19:23:04.9311891Z       [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:23:04.9377029Z [0m    connecting with a signature of uri, options, function[0m
2025-04-11T19:23:04.9461316Z     [32m  [32m✔[39m[0m[90m with single mongod[0m
2025-04-11T19:23:04.9559297Z     [32m  [32m✔[39m[0m[90m with replica set[0m
2025-04-11T19:23:04.9602948Z [0m    exports[0m
2025-04-11T19:23:04.9648950Z     [32m  [32m✔[39m[0m[90m of module[0m
2025-04-11T19:23:04.9716970Z     [32m  [32m✔[39m[0m[90m of new Mongoose instances[0m
2025-04-11T19:23:04.9823713Z     [32m  [32m✔[39m[0m[90m of result from .connect() (gh-3940)[0m
2025-04-11T19:23:05.0939194Z     [32m  [32m✔[39m[0m[90m connect with url doesnt cause unhandled rejection (gh-6997)[0m[31m (105ms)[0m
2025-04-11T19:23:05.1176978Z     [32m  [32m✔[39m[0m[90m can set `setDefaultsOnInsert` as a global option (gh-9032)[0m
2025-04-11T19:23:05.1420639Z     [32m  [32m✔[39m[0m[90m setting `setDefaultOnInsert` on operation has priority over base option (gh-9032)[0m
2025-04-11T19:23:05.1486858Z     [32m  [32m✔[39m[0m[90m should prevent non-hexadecimal strings (gh-9996)[0m
2025-04-11T19:23:05.1554251Z     [32m  [32m✔[39m[0m[90m Allows a syncIndexes shorthand mongoose.syncIndexes (gh-10893)[0m
2025-04-11T19:23:05.1626065Z     [32m  [32m✔[39m[0m[90m Allows for the removal of indexes via string or object (gh-11547)[0m
2025-04-11T19:23:05.1658889Z [0m      global `allowDiskUse` (gh-11478)[0m
2025-04-11T19:23:05.1809995Z       [32m  [32m✔[39m[0m[90m is `undefined` by default[0m
2025-04-11T19:23:05.1965328Z       [32m  [32m✔[39m[0m[90m works when set to `true` and no option provided[0m
2025-04-11T19:23:05.2128731Z       [32m  [32m✔[39m[0m[90m can be overridden by a specific query[0m
2025-04-11T19:23:05.2183132Z [0m      global `timestamps.createdAt.immutable` (gh-10139)[0m
2025-04-11T19:23:05.2240231Z       [32m  [32m✔[39m[0m[90m is `true` by default[0m
2025-04-11T19:23:05.2329437Z       [32m  [32m✔[39m[0m[90m can be overridden to `false`[0m
2025-04-11T19:23:05.2394730Z [0m    global id option[0m
2025-04-11T19:23:05.2607637Z     [32m  [32m✔[39m[0m[90m can disable the id virtual on schemas gh-11966[0m
2025-04-11T19:23:05.2651714Z [0m    set()[0m
2025-04-11T19:23:05.2696847Z     [32m  [32m✔[39m[0m[90m should be able to set a option through set with (key, value)[0m
2025-04-11T19:23:05.2763241Z     [32m  [32m✔[39m[0m[90m should be able to set a option through a object with {key: value}[0m
2025-04-11T19:23:05.2831784Z     [32m  [32m✔[39m[0m[90m should throw a single error when using a invalid key[0m
2025-04-11T19:23:05.2899643Z     [32m  [32m✔[39m[0m[90m should throw a error with many errors when using multiple invalid keys[0m
2025-04-11T19:23:05.2956243Z     [32m  [32m✔[39m[0m[90m should apply all values, even if there are errors[0m
2025-04-11T19:23:05.3014565Z     [32m  [32m✔[39m[0m[90m should throw a single error when using a invalid key when getting[0m
2025-04-11T19:23:05.3057809Z [0m    createInitialConnection (gh-8302)[0m
2025-04-11T19:23:05.3102750Z     [32m  [32m✔[39m[0m[90m should delete existing connection when setting createInitialConnection to false[0m
2025-04-11T19:23:05.3170754Z     [32m  [32m✔[39m[0m[90m should create connection when createConnection is called[0m
2025-04-11T19:23:05.3258019Z     [32m  [32m✔[39m[0m[90m should create a new connection automatically when connect() is called if no existing default connection[0m
2025-04-11T19:23:05.3342830Z     [32m  [32m✔[39m[0m[90m should not delete default connection if it has models[0m
2025-04-11T19:23:05.3453381Z     [32m  [32m✔[39m[0m[90m should not delete default connection if it is connected[0m
2025-04-11T19:23:05.3531192Z 
2025-04-11T19:23:05.3531568Z [0m  parallelLimit[0m
2025-04-11T19:23:05.3568777Z   [32m  [32m✔[39m[0m[90m works with zero functions[0m
2025-04-11T19:23:05.4649308Z   [32m  [32m✔[39m[0m[90m executes functions in parallel[0m[31m (103ms)[0m
2025-04-11T19:23:05.4681189Z 
2025-04-11T19:23:05.4681671Z [0m  model[0m
2025-04-11T19:23:05.4695612Z [0m    hydrate()[0m
2025-04-11T19:23:05.4789883Z     [32m  [32m✔[39m[0m[90m hydrates documents with no modified paths[0m
2025-04-11T19:23:05.4862843Z     [32m  [32m✔[39m[0m[90m runs validators[0m
2025-04-11T19:23:05.4938846Z     [32m  [32m✔[39m[0m[90m supports projection (gh-9209)[0m
2025-04-11T19:23:05.4996076Z     [32m  [32m✔[39m[0m[90m works correctly with model discriminators[0m
2025-04-11T19:23:05.5079894Z     [32m  [32m✔[39m[0m[90m should deeply hydrate the document with the `hydratedPopulatedDocs` option (gh-4727)[0m
2025-04-11T19:23:05.5366623Z     [32m  [32m✔[39m[0m[90m should hydrate documents in virtual populate (gh-14503)[0m
2025-04-11T19:23:05.5442214Z     [32m  [32m✔[39m[0m[90m sets hydrated docs as populated (gh-15048)[0m
2025-04-11T19:23:05.5702034Z     [32m  [32m✔[39m[0m[90m marks deeply nested docs as hydrated underneath virtuals (gh-15110)[0m
2025-04-11T19:23:05.5881170Z     [32m  [32m✔[39m[0m[90m marks deeply nested docs as hydrated underneath conventional (gh-15110)[0m
2025-04-11T19:23:05.5958376Z 
2025-04-11T19:23:05.5958810Z [0m  types.decimal128[0m
2025-04-11T19:23:05.6004487Z   [32m  [32m✔[39m[0m[90m casts from type number (gh-6331)[0m
2025-04-11T19:23:05.6055561Z   [32m  [32m✔[39m[0m[90m uses valueOf method if one exists (gh-6418)[0m
2025-04-11T19:23:05.6087538Z 
2025-04-11T19:23:05.6088393Z [0m  document modified[0m
2025-04-11T19:23:05.6112503Z [0m    modified states[0m
2025-04-11T19:23:05.6295882Z     [32m  [32m✔[39m[0m[90m reset after save[0m
2025-04-11T19:23:05.6529088Z     [32m  [32m✔[39m[0m[90m of embedded docs reset after save[0m
2025-04-11T19:23:05.6594666Z [0m    isDefault[0m
2025-04-11T19:23:05.6648798Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:23:05.6854976Z [0m    isModified[0m
2025-04-11T19:23:05.6907671Z     [32m  [32m✔[39m[0m[90m should not throw with no argument[0m
2025-04-11T19:23:05.7046878Z     [32m  [32m✔[39m[0m[90m when modifying keys[0m
2025-04-11T19:23:05.7182612Z     [32m  [32m✔[39m[0m[90m setting a key identically to its current value should not dirty the key[0m
2025-04-11T19:23:05.7312465Z     [32m  [32m✔[39m[0m[90m should support passing a string of keys separated by a blank space as the first argument[0m
2025-04-11T19:23:05.7576996Z     [32m  [32m✔[39m[0m[90m on entire document[0m
2025-04-11T19:23:05.7955586Z     [32m  [32m✔[39m[0m[90m should let you set ref paths (gh-1530)[0m
2025-04-11T19:23:05.8066724Z     [32m  [32m✔[39m[0m[90m properly sets populated for gh-1530 (gh-2678)[0m
2025-04-11T19:23:05.8437477Z     [32m  [32m✔[39m[0m[90m should support setting mixed paths by string (gh-1418)[0m
2025-04-11T19:23:05.8800789Z     [32m  [32m✔[39m[0m[90m should mark multi-level nested schemas as modified (gh-1754)[0m
2025-04-11T19:23:06.3765880Z     [32m  [32m✔[39m[0m[90m should reset the modified state after calling unmarkModified[0m[31m (486ms)[0m
2025-04-11T19:23:06.3819998Z [0m      on DocumentArray[0m
2025-04-11T19:23:06.3896987Z       [32m  [32m✔[39m[0m[90m work[0m
2025-04-11T19:23:06.5016350Z       [32m  [32m✔[39m[0m[90m with push (gh-14024)[0m
2025-04-11T19:23:06.5127373Z       [32m  [32m✔[39m[0m[90m with push and set (gh-14024)[0m
2025-04-11T19:23:06.5251695Z       [32m  [32m✔[39m[0m[90m with accessors[0m
2025-04-11T19:23:06.5326233Z [0m      on MongooseArray[0m
2025-04-11T19:23:06.5384763Z       [32m  [32m✔[39m[0m[90m atomic methods[0m
2025-04-11T19:23:06.5512201Z       [32m  [32m✔[39m[0m[90m native methods[0m
2025-04-11T19:23:06.5587915Z [0m      manually populating arrays[0m
2025-04-11T19:23:06.5676852Z       [32m  [32m✔[39m[0m[90m gh-1530 for arrays (gh-3575)[0m
2025-04-11T19:23:06.5968926Z       [32m  [32m✔[39m[0m[90m setting nested arrays (gh-3721)[0m
2025-04-11T19:23:06.6105839Z       [32m  [32m✔[39m[0m[90m with discriminators (gh-3575)[0m
2025-04-11T19:23:06.6505887Z       [32m  [32m✔[39m[0m[90m updates embedded doc parents upon direct assignment (gh-5189)[0m
2025-04-11T19:23:06.6649569Z 
2025-04-11T19:23:06.6650302Z [0m  model: validate: [0m
2025-04-11T19:23:06.6709145Z   [32m  [32m✔[39m[0m[90m Model.validate() (gh-7587)[0m
2025-04-11T19:23:06.6761035Z   [32m  [32m✔[39m[0m[90m Model.validate(...) validates paths in arrays (gh-8821)[0m
2025-04-11T19:23:06.6824008Z   [32m  [32m✔[39m[0m[90m Model.validate(...) respects discriminators (gh-12621)[0m
2025-04-11T19:23:06.6873209Z   [32m  [32m✔[39m[0m[90m Model.validate() works with arrays (gh-10669)[0m
2025-04-11T19:23:06.6922491Z   [32m  [32m✔[39m[0m[90m Model.validate(...) uses document instance as context by default (gh-10132)[0m
2025-04-11T19:23:06.6971179Z   [32m  [32m✔[39m[0m[90m Model.validate(...) uses object as context by default (gh-10346)[0m
2025-04-11T19:23:06.7023169Z   [32m  [32m✔[39m[0m[90m Model.validate(...) supports passing in an object, array or string (gh-10353)[0m
2025-04-11T19:23:06.7080574Z   [32m  [32m✔[39m[0m[90m runs validation on casted paths even if cast error happened[0m
2025-04-11T19:23:06.7112901Z 
2025-04-11T19:23:06.7113198Z [0m  collections:[0m
2025-04-11T19:23:06.7265702Z   [32m  [32m✔[39m[0m[90m should buffer commands until connection is established[0m
2025-04-11T19:23:06.7466844Z   [32m  [32m✔[39m[0m[90m returns a promise if buffering and no callback (gh-7676)[0m
2025-04-11T19:23:06.8526637Z   [32m  [32m✔[39m[0m[90m returns a promise if buffering and callback with find() (gh-14184)[0m[31m (102ms)[0m
2025-04-11T19:23:06.9585755Z   [32m  [32m✔[39m[0m[90m handles bufferTimeoutMS in schemaUserProvidedOptions[0m[31m (102ms)[0m
2025-04-11T19:23:06.9635188Z   [32m  [32m✔[39m[0m[90m methods should that throw (unimplemented)[0m
2025-04-11T19:23:06.9702902Z   [32m  [32m✔[39m[0m[90m buffers for sync methods (gh-10610)[0m
2025-04-11T19:23:06.9771046Z 
2025-04-11T19:23:06.9771730Z [0m  is compatible with object created using Object.create(null) (gh-1484)[0m
2025-04-11T19:23:07.0006796Z   [32m  [32m✔[39m[0m[90m during construction[0m
2025-04-11T19:23:07.0061218Z   [32m  [32m✔[39m[0m[90m with .set(path, obj)[0m
2025-04-11T19:23:07.0118063Z   [32m  [32m✔[39m[0m[90m with schema[0m
2025-04-11T19:23:07.0179589Z 
2025-04-11T19:23:07.0181284Z [0m  model[0m
2025-04-11T19:23:07.0494074Z   [32m  [32m✔[39m[0m[90m attempting to populate on base model a virtual path defined on discriminator does not throw an error (gh-8924)[0m
2025-04-11T19:23:07.0570075Z   [32m  [32m✔[39m[0m[90m accepts a POJO as a schema for discriminators (gh-8984)[0m
2025-04-11T19:23:07.0775134Z   [32m  [32m✔[39m[0m[90m removes paths underneath mixed type if discriminator schema sets path to mixed (gh-9042)[0m
2025-04-11T19:23:07.0974534Z   [32m  [32m✔[39m[0m[90m doesnt remove paths at the same level (gh-9362)[0m
2025-04-11T19:23:07.1186580Z   [32m  [32m✔[39m[0m[90m overwrites if discriminator schema sets a path to single nested but base schema sets to doc array (gh-9354)[0m
2025-04-11T19:23:07.1376272Z   [32m  [32m✔[39m[0m[90m can use compiled model schema as a discriminator (gh-9238)[0m
2025-04-11T19:23:07.1866326Z   [32m  [32m✔[39m[0m[90m embedded discriminator array of arrays (gh-9984)[0m
2025-04-11T19:23:07.1950973Z   [32m  [32m✔[39m[0m[90m recursive embedded discriminator using schematype (gh-9600)[0m
2025-04-11T19:23:07.2051368Z   [32m  [32m✔[39m[0m[90m takes discriminator schema's single nested over base schema's (gh-10157)[0m
2025-04-11T19:23:07.2395141Z   [32m  [32m✔[39m[0m[90m allows using array as tied value (gh-10303)[0m
2025-04-11T19:23:07.2608440Z   [32m  [32m✔[39m[0m[90m handles nested discriminators (gh-10702)[0m
2025-04-11T19:23:07.2686136Z   [32m  [32m✔[39m[0m[90m Should allow reusing discriminators (gh-10931)[0m
2025-04-11T19:23:07.3163448Z   [32m  [32m✔[39m[0m[90m handles updating multiple properties nested underneath a discriminator (gh-11428)[0m
2025-04-11T19:23:07.3389426Z   [32m  [32m✔[39m[0m[90m allows defining discriminator at the subSchema level in the subschema (gh-7971)[0m
2025-04-11T19:23:07.3590819Z   [32m  [32m✔[39m[0m[90m handles discriminators on maps of subdocuments (gh-11720)[0m
2025-04-11T19:23:07.3680314Z   [32m  [32m✔[39m[0m[90m supports `mergeHooks` option to use the discriminator schema's hooks over the base schema's (gh-12472)[0m
2025-04-11T19:23:07.3998124Z   [32m  [32m✔[39m[0m[90m supports `mergePlugins` option to use the discriminator schema's plugins over the base schema's (gh-12604)[0m
2025-04-11T19:23:07.4527777Z   [32m  [32m✔[39m[0m[90m applies built-in plugins if mergePlugins and mergeHooks disabled (gh-12696) (gh-12604)[0m
2025-04-11T19:23:07.4600342Z   [32m  [32m✔[39m[0m[90m should not throw an error when the user is not modifying anything involving discriminators gh-12135[0m
2025-04-11T19:23:07.4795131Z   [32m  [32m✔[39m[0m[90m should throw an error because of the different typeKeys gh-12135[0m
2025-04-11T19:23:07.4903003Z   [32m  [32m✔[39m[0m[90m handles customizable discriminator options gh-12135[0m
2025-04-11T19:23:07.5100781Z   [32m  [32m✔[39m[0m[90m uses "value" over "name" for multi-dimensonal arrays (gh-13201)[0m
2025-04-11T19:23:07.5172764Z   [32m  [32m✔[39m[0m[90m runs base schema paths validators and setters before child schema validators and setters (gh-13794)[0m
2025-04-11T19:23:07.5389142Z   [32m  [32m✔[39m[0m[90m should not fail when using a discriminator key multiple times (gh-13906)[0m
2025-04-11T19:23:07.5935974Z   [32m  [32m✔[39m[0m[90m correctly gathers subdocs with discriminators (gh-15088)[0m
2025-04-11T19:23:07.6170717Z   [32m  [32m✔[39m[0m[90m triggers save hooks on subdocuments (gh-15092)[0m
2025-04-11T19:23:07.6211428Z [0m    discriminator()[0m
2025-04-11T19:23:07.6284717Z     [32m  [32m✔[39m[0m[90m model defaults without discriminator[0m
2025-04-11T19:23:07.6707214Z     [32m  [32m✔[39m[0m[90m is instance of root[0m
2025-04-11T19:23:07.6806998Z     [32m  [32m✔[39m[0m[90m can define static and instance methods[0m
2025-04-11T19:23:07.7009556Z     [32m  [32m✔[39m[0m[90m can define virtuals and methods using schema options (gh-12246)[0m
2025-04-11T19:23:07.7198353Z     [32m  [32m✔[39m[0m[90m sets schema root discriminator mapping[0m
2025-04-11T19:23:07.7281292Z     [32m  [32m✔[39m[0m[90m sets schema discriminator type mapping[0m
2025-04-11T19:23:07.7354911Z     [32m  [32m✔[39m[0m[90m adds discriminatorKey to schema with default as name[0m
2025-04-11T19:23:07.7443565Z     [32m  [32m✔[39m[0m[90m adds discriminator to Model.discriminators object[0m
2025-04-11T19:23:07.7552915Z     [32m  [32m✔[39m[0m[90m throws error on invalid schema[0m
2025-04-11T19:23:07.7635709Z     [32m  [32m✔[39m[0m[90m throws error when attempting to nest discriminators[0m
2025-04-11T19:23:07.7722196Z     [32m  [32m✔[39m[0m[90m throws error when discriminator has mapped discriminator key in schema[0m
2025-04-11T19:23:07.7809405Z     [32m  [32m✔[39m[0m[90m throws error when discriminator has mapped discriminator key in schema with discriminatorKey option set[0m
2025-04-11T19:23:07.7927961Z     [32m  [32m✔[39m[0m[90m throws error when discriminator with taken name is added[0m
2025-04-11T19:23:07.8946921Z     [32m  [32m✔[39m[0m[90m throws error if model name is taken (gh-4148)[0m
2025-04-11T19:23:07.9116197Z     [32m  [32m✔[39m[0m[90m works with nested schemas (gh-2821)[0m
2025-04-11T19:23:07.9450678Z     [32m  [32m✔[39m[0m[90m embedded with single nested subdocs (gh-5244)[0m
2025-04-11T19:23:07.9694239Z     [32m  [32m✔[39m[0m[90m embedded with single nested subdocs and tied value (gh-8164) (gh-9108)[0m
2025-04-11T19:23:08.0115882Z     [32m  [32m✔[39m[0m[90m supports ObjectId as tied value (gh-10130)[0m
2025-04-11T19:23:08.0325362Z     [32m  [32m✔[39m[0m[90m Embedded discriminators in nested doc arrays (gh-6202)[0m
2025-04-11T19:23:08.0412336Z     [32m  [32m✔[39m[0m[90m throws an error if calling discriminator on non-doc array (gh-6202)[0m
2025-04-11T19:23:08.0533502Z     [32m  [32m✔[39m[0m[90m supports using a schema that was used for another discriminator (gh-7200)[0m
2025-04-11T19:23:08.0904572Z     [32m  [32m✔[39m[0m[90m should copy plugins[0m
2025-04-11T19:23:08.0954514Z [0m      options[0m
2025-04-11T19:23:08.1010517Z       [32m  [32m✔[39m[0m[90m allows toObject to be overridden[0m
2025-04-11T19:23:08.1104751Z       [32m  [32m✔[39m[0m[90m allows toJSON to be overridden[0m
2025-04-11T19:23:08.1212610Z       [32m  [32m✔[39m[0m[90m is not customizable[0m
2025-04-11T19:23:08.1275120Z [0m      root schema inheritance[0m
2025-04-11T19:23:08.1330378Z       [32m  [32m✔[39m[0m[90m inherits field mappings[0m
2025-04-11T19:23:08.1423721Z       [32m  [32m✔[39m[0m[90m inherits validators[0m
2025-04-11T19:23:08.1534940Z       [32m  [32m✔[39m[0m[90m does not inherit and override fields that exist[0m
2025-04-11T19:23:08.1658338Z       [32m  [32m✔[39m[0m[90m inherits methods[0m
2025-04-11T19:23:08.1760733Z       [32m  [32m✔[39m[0m[90m inherits statics[0m
2025-04-11T19:23:08.1866369Z       [32m  [32m✔[39m[0m[90m inherits virtual (g.s)etters[0m
2025-04-11T19:23:08.1972495Z       [32m  [32m✔[39m[0m[90m does not inherit indexes[0m
2025-04-11T19:23:08.2077069Z       [32m  [32m✔[39m[0m[90m gets options overridden by root options except toJSON and toObject[0m
2025-04-11T19:23:08.2186731Z       [32m  [32m✔[39m[0m[90m does not allow setting discriminator key (gh-2041)[0m
2025-04-11T19:23:08.2302482Z       [32m  [32m✔[39m[0m[90m deduplicates hooks (gh-2945)[0m
2025-04-11T19:23:08.2517694Z       [32m  [32m✔[39m[0m[90m with typeKey (gh-4339)[0m
2025-04-11T19:23:08.2735422Z       [32m  [32m✔[39m[0m[90m embedded discriminators with array defaults (gh-7687)[0m
2025-04-11T19:23:08.2969956Z       [32m  [32m✔[39m[0m[90m embedded discriminators with create() (gh-5001)[0m
2025-04-11T19:23:08.3197612Z       [32m  [32m✔[39m[0m[90m embedded discriminator with numeric type (gh-7808)[0m
2025-04-11T19:23:08.3497843Z       [32m  [32m✔[39m[0m[90m supports clone() (gh-4983)[0m
2025-04-11T19:23:08.3615453Z       [32m  [32m✔[39m[0m[90m clone() allows reusing schemas (gh-5098)[0m
2025-04-11T19:23:08.3964257Z       [32m  [32m✔[39m[0m[90m clone() does not modify original schema `obj` (gh-14821)[0m
2025-04-11T19:23:08.4208816Z       [32m  [32m✔[39m[0m[90m clone() allows reusing with different models (gh-5721)[0m
2025-04-11T19:23:08.4533363Z       [32m  [32m✔[39m[0m[90m incorrect discriminator key throws readable error with create (gh-6434)[0m
2025-04-11T19:23:08.4767308Z       [32m  [32m✔[39m[0m[90m copies query hooks (gh-5147)[0m
2025-04-11T19:23:08.4985391Z       [32m  [32m✔[39m[0m[90m reusing schema for discriminators (gh-5684)[0m
2025-04-11T19:23:08.5162428Z       [32m  [32m✔[39m[0m[90m overwrites nested paths in parent schema (gh-6076)[0m
2025-04-11T19:23:08.5487142Z       [32m  [32m✔[39m[0m[90m nested discriminator key with projecting in parent (gh-5775)[0m
2025-04-11T19:23:08.5772789Z       [32m  [32m✔[39m[0m[90m with $meta projection (gh-5859)[0m
2025-04-11T19:23:08.6011957Z       [32m  [32m✔[39m[0m[90m embedded discriminators with $push (gh-5009)[0m
2025-04-11T19:23:08.6240734Z       [32m  [32m✔[39m[0m[90m embedded discriminators with $push + $each (gh-5070)[0m
2025-04-11T19:23:08.6473283Z       [32m  [32m✔[39m[0m[90m embedded discriminators with $set (gh-5130)[0m
2025-04-11T19:23:08.6696471Z       [32m  [32m✔[39m[0m[90m embedded in document arrays (gh-2723)[0m
2025-04-11T19:23:08.6756448Z [0m        applyPluginsToDiscriminators[0m
2025-04-11T19:23:08.6832861Z         [32m  [32m✔[39m[0m[90m works (gh-4965)[0m
2025-04-11T19:23:08.6971593Z         [32m  [32m✔[39m[0m[90m works with customized options (gh-7458)[0m
2025-04-11T19:23:08.7063350Z [0m      embedded discriminators + hooks (gh-5706)[0m
2025-04-11T19:23:08.7225481Z       [32m  [32m✔[39m[0m[90m should call the hooks on the embedded document defined by both the parent and discriminated schemas[0m
2025-04-11T19:23:08.7433827Z       [32m  [32m✔[39m[0m[90m should call the hooks on the embedded document in an embedded array defined by both the parent and discriminated schemas[0m
2025-04-11T19:23:08.7514490Z [0m    bug fixes[0m
2025-04-11T19:23:08.7569848Z     [32m  [32m✔[39m[0m[90m discriminators with classes modifies class in place (gh-5175)[0m
2025-04-11T19:23:08.7656264Z     [32m  [32m✔[39m[0m[90m allows overwriting base class methods (gh-5227)[0m
2025-04-11T19:23:08.7765146Z     [32m  [32m✔[39m[0m[90m supports adding properties (gh-5104) (gh-5635)[0m
2025-04-11T19:23:08.7859980Z     [32m  [32m✔[39m[0m[90m with subclassing (gh-7547)[0m
2025-04-11T19:23:08.7951274Z     [32m  [32m✔[39m[0m[90m uses correct discriminator when using `new BaseModel` (gh-7586)[0m
2025-04-11T19:23:08.8043119Z     [32m  [32m✔[39m[0m[90m uses correct discriminator when using `new BaseModel` with value (gh-7851)[0m
2025-04-11T19:23:08.8244038Z     [32m  [32m✔[39m[0m[90m allows setting custom discriminator key in schema (gh-7807)[0m
2025-04-11T19:23:08.8558717Z     [32m  [32m✔[39m[0m[90m does not project in embedded discriminator key if it is the only selected field (gh-7574)[0m
2025-04-11T19:23:08.8661483Z     [32m  [32m✔[39m[0m[90m merges schemas instead of overwriting (gh-7884)[0m
2025-04-11T19:23:08.8881180Z     [32m  [32m✔[39m[0m[90m _id: false in discriminator nested schema (gh-8274)[0m
2025-04-11T19:23:08.9002315Z     [32m  [32m✔[39m[0m[90m with discriminators in embedded arrays (gh-8273)[0m
2025-04-11T19:23:08.9125486Z [0m    Discriminator Key test[0m
2025-04-11T19:23:08.9390818Z     [32m  [32m✔[39m[0m[90m gh-9015[0m
2025-04-11T19:23:08.9485586Z 
2025-04-11T19:23:08.9486458Z [0m  schema select option[0m
2025-04-11T19:23:08.9700494Z   [32m  [32m✔[39m[0m[90m excluding paths through schematype[0m
2025-04-11T19:23:08.9896147Z   [32m  [32m✔[39m[0m[90m including paths through schematype[0m
2025-04-11T19:23:08.9968995Z   [32m  [32m✔[39m[0m[90m should not project in discriminator key if projected in implicitly with .$ (gh-9361)[0m
2025-04-11T19:23:09.0225677Z   [32m  [32m✔[39m[0m[90m conflicting schematype path selection should not error[0m
2025-04-11T19:23:09.0299708Z   [32m  [32m✔[39m[0m[90m selecting _id works with excluded schematype path[0m
2025-04-11T19:23:09.0398795Z   [32m  [32m✔[39m[0m[90m selecting _id works with excluded schematype path on sub doc[0m
2025-04-11T19:23:09.0633739Z   [32m  [32m✔[39m[0m[90m inclusive/exclusive combos should work[0m
2025-04-11T19:23:09.0908154Z   [32m  [32m✔[39m[0m[90m when select is false in the schema definition, all inclusive/exclusive combos should work[0m
2025-04-11T19:23:09.1161740Z   [32m  [32m✔[39m[0m[90m when select is set to true in the schema definition, all inclusive/exclusive combos should work[0m
2025-04-11T19:23:09.1324101Z   [32m  [32m✔[39m[0m[90m does not set defaults for nested objects (gh-4707)[0m
2025-04-11T19:23:09.1523458Z   [32m  [32m✔[39m[0m[90m does not create nested objects if not included (gh-4669)[0m
2025-04-11T19:23:09.1690264Z   [32m  [32m✔[39m[0m[90m initializes nested defaults with selected objects (gh-2629)[0m
2025-04-11T19:23:09.1852129Z   [32m  [32m✔[39m[0m[90m should allow deselecting a field on a query even if the definition has select set to true (gh-11694)[0m
2025-04-11T19:23:09.1889961Z [0m    overriding schematype select options[0m
2025-04-11T19:23:09.1913467Z [0m      works[0m
2025-04-11T19:23:09.1928033Z [0m        for inclusions[0m
2025-04-11T19:23:09.2015563Z         [32m  [32m✔[39m[0m[90m with find[0m
2025-04-11T19:23:09.2211516Z         [32m  [32m✔[39m[0m[90m for findById[0m
2025-04-11T19:23:09.2405934Z         [32m  [32m✔[39m[0m[90m with findOneAndUpdate[0m
2025-04-11T19:23:09.2596930Z         [32m  [32m✔[39m[0m[90m for findByIdAndUpdate[0m
2025-04-11T19:23:09.2679997Z [0m        for exclusions[0m
2025-04-11T19:23:09.2811694Z         [32m  [32m✔[39m[0m[90m with find[0m
2025-04-11T19:23:09.3004664Z         [32m  [32m✔[39m[0m[90m with findById[0m
2025-04-11T19:23:09.3196784Z         [32m  [32m✔[39m[0m[90m with findOneAndUpdate[0m
2025-04-11T19:23:09.3376993Z         [32m  [32m✔[39m[0m[90m with findOneAndDelete[0m
2025-04-11T19:23:09.3481435Z [0m    exclusion in root schema should override child schema[0m
2025-04-11T19:23:09.3534784Z     [32m  [32m✔[39m[0m[90m works (gh-1333)[0m
2025-04-11T19:23:09.3729188Z     [32m  [32m✔[39m[0m[90m with nested (gh-7945)[0m
2025-04-11T19:23:09.3788693Z [0m    forcing inclusion of a deselected schema path[0m
2025-04-11T19:23:09.3971265Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:23:09.4162401Z     [32m  [32m✔[39m[0m[90m works if only one plus path and only one deselected field[0m
2025-04-11T19:23:09.4348832Z     [32m  [32m✔[39m[0m[90m works with query.slice (gh-1370)[0m
2025-04-11T19:23:09.4528199Z     [32m  [32m✔[39m[0m[90m ignores if path does not have select in schema (gh-6785)[0m
2025-04-11T19:23:09.4685931Z     [32m  [32m✔[39m[0m[90m omits if not in schema (gh-7017)[0m
2025-04-11T19:23:09.4781222Z 
2025-04-11T19:23:09.4781972Z [0m  versioning[0m
2025-04-11T19:23:09.4858367Z   [32m  [32m✔[39m[0m[90m is only added to parent schema (gh-1265)[0m
2025-04-11T19:23:09.5120396Z   [32m  [32m✔[39m[0m[90m versioning without version key[0m
2025-04-11T19:23:09.5394084Z   [32m  [32m✔[39m[0m[90m version works with strict docs[0m
2025-04-11T19:23:09.5569661Z   [32m  [32m✔[39m[0m[90m version works with existing unversioned docs[0m
2025-04-11T19:23:09.5796330Z   [32m  [32m✔[39m[0m[90m versionKey is configurable[0m
2025-04-11T19:23:09.6082186Z   [32m  [32m✔[39m[0m[90m can be disabled[0m
2025-04-11T19:23:09.6248234Z   [32m  [32m✔[39m[0m[90m works with numbericAlpha paths[0m
2025-04-11T19:23:09.6457914Z   [32m  [32m✔[39m[0m[90m allows concurrent push[0m
2025-04-11T19:23:09.6658830Z   [32m  [32m✔[39m[0m[90m allows concurrent push and pull[0m
2025-04-11T19:23:09.6871006Z   [32m  [32m✔[39m[0m[90m throws if you set a positional path after pulling[0m
2025-04-11T19:23:09.7091598Z   [32m  [32m✔[39m[0m[90m allows pull/push after $set[0m
2025-04-11T19:23:09.7281370Z   [32m  [32m✔[39m[0m[90m should add version to where clause[0m
2025-04-11T19:23:09.7504151Z   [32m  [32m✔[39m[0m[90m $set after pull/push throws[0m
2025-04-11T19:23:09.7734580Z   [32m  [32m✔[39m[0m[90m doesnt persist conflicting changes[0m
2025-04-11T19:23:09.7963171Z   [32m  [32m✔[39m[0m[90m increments version on push[0m
2025-04-11T19:23:09.8180643Z   [32m  [32m✔[39m[0m[90m does not increment version when setting nested paths[0m
2025-04-11T19:23:09.8350854Z   [32m  [32m✔[39m[0m[90m increments version when modifying mixed array[0m
2025-04-11T19:23:09.8548583Z   [32m  [32m✔[39m[0m[90m increments version when $set-ing an array[0m
2025-04-11T19:23:09.8755245Z   [32m  [32m✔[39m[0m[90m increments version and converts to $set when mixing $shift and $addToSet[0m
2025-04-11T19:23:09.8950399Z   [32m  [32m✔[39m[0m[90m should not increment version for non-versioned fields[0m
2025-04-11T19:23:09.9157286Z   [32m  [32m✔[39m[0m[90m should not increment version for non-versioned sub-document fields[0m
2025-04-11T19:23:09.9398952Z   [32m  [32m✔[39m[0m[90m should persist correctly when optimisticConcurrency is true gh-10128[0m
2025-04-11T19:23:09.9639833Z   [32m  [32m✔[39m[0m[90m throws VersionError when saving with no changes and optimistic concurrency is true (gh-11295)[0m
2025-04-11T19:23:09.9883307Z   [32m  [32m✔[39m[0m[90m should support optimisticConcurrency being an array of strings[0m
2025-04-11T19:23:10.0123902Z   [32m  [32m✔[39m[0m[90m gh-1898[0m
2025-04-11T19:23:10.0332139Z   [32m  [32m✔[39m[0m[90m can remove version key from toObject() (gh-2675)[0m
2025-04-11T19:23:10.0587408Z   [32m  [32m✔[39m[0m[90m pull doesnt add version where clause (gh-6190)[0m
2025-04-11T19:23:10.0827766Z   [32m  [32m✔[39m[0m[90m copying doc works (gh-5779)[0m
2025-04-11T19:23:10.1067895Z   [32m  [32m✔[39m[0m[90m optimistic concurrency (gh-9001) (gh-5424)[0m
2025-04-11T19:23:10.1342606Z   [32m  [32m✔[39m[0m[90m adds version to filter if pushing to a nested array (gh-11108)[0m
2025-04-11T19:23:10.1564524Z   [32m  [32m✔[39m[0m[90m can store version key in nested property (gh-10980)[0m
2025-04-11T19:23:10.1603197Z [0m    doc.increment()[0m
2025-04-11T19:23:10.1755056Z     [32m  [32m✔[39m[0m[90m works without any other changes (gh-1475)[0m
2025-04-11T19:23:10.1847105Z 
2025-04-11T19:23:10.1847896Z [0m  model field selection[0m
2025-04-11T19:23:10.2016050Z   [32m  [32m✔[39m[0m[90m excluded fields should be undefined[0m
2025-04-11T19:23:10.2181938Z   [32m  [32m✔[39m[0m[90m excluded fields should be undefined and defaults applied to other fields[0m
2025-04-11T19:23:10.2356106Z   [32m  [32m✔[39m[0m[90m where subset of fields excludes _id[0m
2025-04-11T19:23:10.2549860Z   [32m  [32m✔[39m[0m[90m works with subset of fields, excluding _id[0m
2025-04-11T19:23:10.2723148Z   [32m  [32m✔[39m[0m[90m works with just _id and findOneAndUpdate (gh-3407)[0m
2025-04-11T19:23:10.2995264Z   [32m  [32m✔[39m[0m[90m works with subset of fields excluding emebedded doc _id (gh-541)[0m
2025-04-11T19:23:10.3143493Z   [32m  [32m✔[39m[0m[90m included fields should have defaults applied when no value exists in db (gh-870)[0m
2025-04-11T19:23:10.3382023Z   [32m  [32m✔[39m[0m[90m including subdoc field excludes other subdoc fields (gh-1027)[0m
2025-04-11T19:23:10.3626628Z   [32m  [32m✔[39m[0m[90m excluding nested subdoc fields (gh-1027)[0m
2025-04-11T19:23:10.3808322Z   [32m  [32m✔[39m[0m[90m selecting an array of docs applies defaults properly (gh-1108)[0m
2025-04-11T19:23:10.4030543Z   [32m  [32m✔[39m[0m[90m select properties named length (gh-3903)[0m
2025-04-11T19:23:10.4306993Z   [32m  [32m✔[39m[0m[90m appropriately filters subdocuments based on properties (gh-1280)[0m
2025-04-11T19:23:10.4680778Z   [32m  [32m✔[39m[0m[90m sets defaults correctly in child docs with projection (gh-7159)[0m
2025-04-11T19:23:10.4911074Z   [32m  [32m✔[39m[0m[90m when `select: true` in schema, works with $elemMatch in projection[0m
2025-04-11T19:23:10.5127071Z   [32m  [32m✔[39m[0m[90m selection specified in query overwrites option in schema[0m
2025-04-11T19:23:10.5379834Z   [32m  [32m✔[39m[0m[90m selecting with `false` instead of `0` doesn't overwrite schema `select: false` (gh-8923)[0m
2025-04-11T19:23:10.5596267Z   [32m  [32m✔[39m[0m[90m handles deselecting _id when other field has schema-level `select: false` (gh-12670)[0m
2025-04-11T19:23:10.5636364Z [0m    with $elemMatch projection[0m
2025-04-11T19:23:10.5835572Z     [32m  [32m✔[39m[0m[90m casts elemMatch args (gh-1091)[0m
2025-04-11T19:23:10.6104726Z     [32m  [32m✔[39m[0m[90m saves modified elemMatch paths (gh-1334)[0m
2025-04-11T19:23:10.6337755Z     [32m  [32m✔[39m[0m[90m works with $ positional in select (gh-2031)[0m
2025-04-11T19:23:10.6438419Z 
2025-04-11T19:23:10.6439020Z [0m  model: findOneAndDelete:[0m
2025-04-11T19:23:10.6630934Z   [32m  [32m✔[39m[0m[90m returns the original document[0m
2025-04-11T19:23:10.6709462Z   [32m  [32m✔[39m[0m[90m options/conditions/doc are merged when no callback is passed[0m
2025-04-11T19:23:10.6922627Z   [32m  [32m✔[39m[0m[90m returns the original document[0m
2025-04-11T19:23:10.6996104Z   [32m  [32m✔[39m[0m[90m options/conditions/doc are merged when no callback is passed[0m
2025-04-11T19:23:10.7106469Z   [32m  [32m✔[39m[0m[90m supports v3 select string syntax[0m
2025-04-11T19:23:10.7205743Z   [32m  [32m✔[39m[0m[90m supports v3 select object syntax[0m
2025-04-11T19:23:10.7322218Z   [32m  [32m✔[39m[0m[90m supports v3 sort string syntax[0m
2025-04-11T19:23:10.7431918Z   [32m  [32m✔[39m[0m[90m supports v3 sort object syntax[0m
2025-04-11T19:23:10.7754632Z   [32m  [32m✔[39m[0m[90m supports population (gh-1395)[0m
2025-04-11T19:23:10.7842782Z   [32m  [32m✔[39m[0m[90m only calls setters once (gh-6203)[0m
2025-04-11T19:23:10.8179523Z   [32m  [32m✔[39m[0m[90m supports the `includeResultMetadata` option (gh-13539)[0m
2025-04-11T19:23:10.8218309Z [0m    middleware[0m
2025-04-11T19:23:10.8395720Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:23:10.8605583Z     [32m  [32m✔[39m[0m[90m works with exec() (gh-439)[0m
2025-04-11T19:23:10.8708095Z 
2025-04-11T19:23:10.8708707Z [0m  document: strict mode:[0m
2025-04-11T19:23:10.8764812Z   [32m  [32m✔[39m[0m[90m nested doc[0m
2025-04-11T19:23:10.9093007Z   [32m  [32m✔[39m[0m[90m sub doc[0m
2025-04-11T19:23:10.9159556Z   [32m  [32m✔[39m[0m[90m virtuals[0m
2025-04-11T19:23:10.9389145Z   [32m  [32m✔[39m[0m[90m can be overridden during set()[0m
2025-04-11T19:23:10.9547875Z   [32m  [32m✔[39m[0m[90m can be overridden during update()[0m
2025-04-11T19:23:10.9693328Z   [32m  [32m✔[39m[0m[90m can be overwritten with findOneAndUpdate (gh-1967)[0m
2025-04-11T19:23:10.9774269Z   [32m  [32m✔[39m[0m[90m handles setting `schema.options.strict` (gh-7103)[0m
2025-04-11T19:23:10.9850620Z [0m    should work[0m
2025-04-11T19:23:11.0043561Z     [32m  [32m✔[39m[0m[90m when creating models with non-strict schemas (gh-4274)[0m
2025-04-11T19:23:11.0136387Z     [32m  [32m✔[39m[0m[90m when creating models with strict schemas[0m
2025-04-11T19:23:11.0286644Z     [32m  [32m✔[39m[0m[90m when overriding strictness[0m
2025-04-11T19:23:11.0571568Z     [32m  [32m✔[39m[0m[90m when using Model#create[0m
2025-04-11T19:23:11.0634268Z [0m    "throws" mode[0m
2025-04-11T19:23:11.0704177Z     [32m  [32m✔[39m[0m[90m throws on set() of unknown property[0m
2025-04-11T19:23:11.0821465Z     [32m  [32m✔[39m[0m[90m fails with extra fields[0m
2025-04-11T19:23:11.0942437Z     [32m  [32m✔[39m[0m[90m doesnt throw with refs (gh-2665)[0m
2025-04-11T19:23:11.1057289Z     [32m  [32m✔[39m[0m[90m set nested to num throws ObjectExpectedError (gh-3735)[0m
2025-04-11T19:23:11.1185868Z 
2025-04-11T19:23:11.1186546Z [0m  model middleware[0m
2025-04-11T19:23:11.1385854Z   [32m  [32m✔[39m[0m[90m post save[0m
2025-04-11T19:23:11.1553415Z   [32m  [32m✔[39m[0m[90m sync error in post save (gh-3483)[0m
2025-04-11T19:23:11.2639188Z   [32m  [32m✔[39m[0m[90m pre hook promises (gh-3779)[0m[31m (102ms)[0m
2025-04-11T19:23:11.3813099Z   [32m  [32m✔[39m[0m[90m post hook promises (gh-3779)[0m[31m (112ms)[0m
2025-04-11T19:23:11.3973144Z   [32m  [32m✔[39m[0m[90m validate middleware runs before save middleware (gh-2462)[0m
2025-04-11T19:23:11.4057495Z   [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:23:11.4259368Z   [32m  [32m✔[39m[0m[90m gh-1829[0m
2025-04-11T19:23:11.4438361Z   [32m  [32m✔[39m[0m[90m sync error in pre save (gh-3483)[0m
2025-04-11T19:23:11.4593545Z   [32m  [32m✔[39m[0m[90m sync error in pre save after next() (gh-3483)[0m
2025-04-11T19:23:11.4755321Z   [32m  [32m✔[39m[0m[90m validate + remove[0m
2025-04-11T19:23:11.4926382Z   [32m  [32m✔[39m[0m[90m static hooks (gh-5982)[0m
2025-04-11T19:23:11.6185875Z   [32m  [32m✔[39m[0m[90m deleteOne hooks (gh-7538)[0m[31m (119ms)[0m
2025-04-11T19:23:11.6223933Z [0m    post init hooks[0m
2025-04-11T19:23:11.6378418Z     [32m  [32m✔[39m[0m[90m success[0m
2025-04-11T19:23:11.6567334Z     [32m  [32m✔[39m[0m[90m with errors[0m
2025-04-11T19:23:11.6621430Z [0m    createCollection middleware[0m
2025-04-11T19:23:11.6719152Z     [32m  [32m✔[39m[0m[90m calls createCollection hooks[0m
2025-04-11T19:23:11.6814460Z     [32m  [32m✔[39m[0m[90m allows skipping createCollection from hooks[0m
2025-04-11T19:23:11.6872442Z [0m    bulkWrite middleware[0m
2025-04-11T19:23:11.6953154Z     [32m  [32m✔[39m[0m[90m calls bulkWrite hooks[0m
2025-04-11T19:23:11.7166792Z     [32m  [32m✔[39m[0m[90m allows updating ops[0m
2025-04-11T19:23:11.7362304Z     [32m  [32m✔[39m[0m[90m supports error handlers[0m
2025-04-11T19:23:11.7551088Z     [32m  [32m✔[39m[0m[90m supports skipping wrapped function[0m
2025-04-11T19:23:11.7645251Z 
2025-04-11T19:23:11.7645769Z [0m  discriminator docs[0m
2025-04-11T19:23:11.7748098Z   [32m  [32m✔[39m[0m[90m The `model.discriminator()` function[0m
2025-04-11T19:23:11.7872660Z   [32m  [32m✔[39m[0m[90m Discriminators save to the Event model's collection[0m
2025-04-11T19:23:11.7924796Z   [32m  [32m✔[39m[0m[90m Discriminator keys[0m
2025-04-11T19:23:11.7995683Z   [32m  [32m✔[39m[0m[90m Update discriminator key[0m
2025-04-11T19:23:11.8065154Z   [32m  [32m✔[39m[0m[90m use overwriteDiscriminatorKey to change discriminator key[0m
2025-04-11T19:23:11.8135491Z   [32m  [32m✔[39m[0m[90m Discriminators add the discriminator key to queries[0m
2025-04-11T19:23:11.8197489Z   [32m  [32m✔[39m[0m[90m Discriminators copy pre and post hooks[0m
2025-04-11T19:23:11.8256133Z   [32m  [32m✔[39m[0m[90m Handling custom _id fields[0m
2025-04-11T19:23:11.8592690Z   [32m  [32m✔[39m[0m[90m Using discriminators with `Model.create()`[0m
2025-04-11T19:23:11.8757715Z   [32m  [32m✔[39m[0m[90m Embedded discriminators in arrays[0m
2025-04-11T19:23:11.8934920Z   [32m  [32m✔[39m[0m[90m Recursive embedded discriminators in arrays[0m
2025-04-11T19:23:11.8998653Z   [32m  [32m✔[39m[0m[90m Single nested discriminators[0m
2025-04-11T19:23:11.9053005Z 
2025-04-11T19:23:11.9053423Z [0m  asyncIterator[0m
2025-04-11T19:23:11.9399875Z   [32m  [32m✔[39m[0m[90m supports for/await/of on a query (gh-6737)[0m
2025-04-11T19:23:11.9489741Z   [32m  [32m✔[39m[0m[90m supports for/await/of on a aggregation (gh-6737)[0m
2025-04-11T19:23:11.9575420Z   [32m  [32m✔[39m[0m[90m supports for/await/of on a query cursor (gh-9403)[0m
2025-04-11T19:23:11.9659110Z   [32m  [32m✔[39m[0m[90m supports for/await/of on a aggregation cursor (gh-9403)[0m
2025-04-11T19:23:11.9721419Z 
2025-04-11T19:23:11.9721765Z [0m  Lean Tutorial[0m
2025-04-11T19:23:11.9781772Z   [36m  - compare sizes lean vs not lean[0m
2025-04-11T19:23:11.9844914Z   [32m  [32m✔[39m[0m[90m compare types[0m
2025-04-11T19:23:12.0002408Z   [32m  [32m✔[39m[0m[90m getters and virtuals[0m
2025-04-11T19:23:12.0172894Z   [32m  [32m✔[39m[0m[90m conventional populate[0m
2025-04-11T19:23:12.0279281Z   [32m  [32m✔[39m[0m[90m virtual populate[0m
2025-04-11T19:23:12.0358251Z   [32m  [32m✔[39m[0m[90m bigint[0m
2025-04-11T19:23:12.0419424Z 
2025-04-11T19:23:12.0419904Z [0m  debug: shell[0m
2025-04-11T19:23:12.0586830Z   [32m  [32m✔[39m[0m[90m no-shell[0m
2025-04-11T19:23:12.0642292Z   [32m  [32m✔[39m[0m[90m shell[0m
2025-04-11T19:23:12.0850436Z   [32m  [32m✔[39m[0m[90m should allow to set the `debug` option on a per-connection basis (gh-12700)[0m
2025-04-11T19:23:12.1066769Z   [32m  [32m✔[39m[0m[90m should avoid sending null session option with document ops (gh-13052)[0m
2025-04-11T19:23:12.1160379Z 
2025-04-11T19:23:12.1160804Z [0m  defaults docs[0m
2025-04-11T19:23:12.1389400Z   [32m  [32m✔[39m[0m[90m Declaring defaults in your schema[0m
2025-04-11T19:23:12.1437871Z   [32m  [32m✔[39m[0m[90m Default functions[0m
2025-04-11T19:23:12.1521233Z   [32m  [32m✔[39m[0m[90m The `setDefaultsOnInsert` option[0m
2025-04-11T19:23:12.1571205Z   [32m  [32m✔[39m[0m[90m Default functions and `this`[0m
2025-04-11T19:23:12.1640774Z 
2025-04-11T19:23:12.1641268Z [0m  Tutorial: findOneAndUpdate()[0m
2025-04-11T19:23:12.1874484Z   [32m  [32m✔[39m[0m[90m basic case[0m
2025-04-11T19:23:12.1945925Z   [32m  [32m✔[39m[0m[90m new option[0m
2025-04-11T19:23:12.2016048Z   [32m  [32m✔[39m[0m[90m returnOriginal option[0m
2025-04-11T19:23:12.2107871Z   [32m  [32m✔[39m[0m[90m save race condition[0m
2025-04-11T19:23:12.2211860Z   [32m  [32m✔[39m[0m[90m upsert[0m
2025-04-11T19:23:12.2300318Z   [32m  [32m✔[39m[0m[90m includeResultMetadata[0m
2025-04-11T19:23:12.2360648Z 
2025-04-11T19:23:12.2361287Z [0m  validation docs[0m
2025-04-11T19:23:12.2426467Z   [32m  [32m✔[39m[0m[90m Validation[0m
2025-04-11T19:23:12.2482455Z   [32m  [32m✔[39m[0m[90m Built-in Validators[0m
2025-04-11T19:23:12.2535131Z   [32m  [32m✔[39m[0m[90m Custom Error Messages[0m
2025-04-11T19:23:12.2895521Z   [32m  [32m✔[39m[0m[90m The `unique` Option is Not a Validator[0m
2025-04-11T19:23:12.2947626Z   [32m  [32m✔[39m[0m[90m Custom Validators[0m
2025-04-11T19:23:12.3002449Z   [32m  [32m✔[39m[0m[90m Async Custom Validators[0m
2025-04-11T19:23:12.3054799Z   [32m  [32m✔[39m[0m[90m Validation Errors[0m
2025-04-11T19:23:12.3111671Z   [32m  [32m✔[39m[0m[90m Cast Errors[0m
2025-04-11T19:23:12.3169219Z   [32m  [32m✔[39m[0m[90m Cast Error Message Overwrite[0m
2025-04-11T19:23:12.3227352Z   [32m  [32m✔[39m[0m[90m Cast Error Message Function Overwrite[0m
2025-04-11T19:23:12.3274045Z   [32m  [32m✔[39m[0m[90m Global SchemaType Validation[0m
2025-04-11T19:23:12.3333018Z   [32m  [32m✔[39m[0m[90m Required Validators On Nested Objects[0m
2025-04-11T19:23:12.3389971Z   [32m  [32m✔[39m[0m[90m Update Validators[0m
2025-04-11T19:23:12.3437161Z   [32m  [32m✔[39m[0m[90m Update Validators and `this`[0m
2025-04-11T19:23:12.3486662Z   [32m  [32m✔[39m[0m[90m Update Validators Only Run On Updated Paths[0m
2025-04-11T19:23:12.3593596Z   [32m  [32m✔[39m[0m[90m Update Validators Only Run For Some Operations[0m
2025-04-11T19:23:12.3644400Z 
2025-04-11T19:23:12.3644795Z [0m  getters/setters[0m
2025-04-11T19:23:12.3676416Z [0m    getters[0m
2025-04-11T19:23:12.3728386Z     [32m  [32m✔[39m[0m[90m basic example[0m
2025-04-11T19:23:12.3799137Z     [32m  [32m✔[39m[0m[90m skip[0m
2025-04-11T19:23:12.3848781Z [0m    setters[0m
2025-04-11T19:23:12.3902280Z     [32m  [32m✔[39m[0m[90m basic[0m
2025-04-11T19:23:12.4001071Z     [32m  [32m✔[39m[0m[90m updates[0m
2025-04-11T19:23:12.4087147Z     [32m  [32m✔[39m[0m[90m update skip[0m
2025-04-11T19:23:12.4153353Z     [32m  [32m✔[39m[0m[90m vs ES6[0m
2025-04-11T19:23:12.4196668Z [0m    localization[0m
2025-04-11T19:23:12.4434278Z     [32m  [32m✔[39m[0m[90m locale[0m
2025-04-11T19:23:12.4517933Z 
2025-04-11T19:23:12.4518327Z [0m  Advanced Schemas[0m
2025-04-11T19:23:12.4612371Z   [32m  [32m✔[39m[0m[90m Creating from ES6 Classes Using `loadClass()`[0m
2025-04-11T19:23:12.4661890Z 
2025-04-11T19:23:12.4662411Z [0m  Cast Tutorial[0m
2025-04-11T19:23:12.4750021Z   [32m  [32m✔[39m[0m[90m get and set[0m
2025-04-11T19:23:12.4804055Z   [32m  [32m✔[39m[0m[90m cast values[0m
2025-04-11T19:23:12.4860069Z   [32m  [32m✔[39m[0m[90m cast error[0m
2025-04-11T19:23:12.4911839Z   [32m  [32m✔[39m[0m[90m not in schema[0m
2025-04-11T19:23:12.4972887Z   [32m  [32m✔[39m[0m[90m strictQuery true[0m
2025-04-11T19:23:12.5027119Z   [32m  [32m✔[39m[0m[90m strictQuery throw[0m
2025-04-11T19:23:12.5088186Z   [32m  [32m✔[39m[0m[90m strictQuery removes casted empty objects[0m
2025-04-11T19:23:12.5140032Z   [32m  [32m✔[39m[0m[90m implicit in[0m
2025-04-11T19:23:12.5200308Z 
2025-04-11T19:23:12.5200628Z [0m  Date Tutorial[0m
2025-04-11T19:23:12.5260300Z   [32m  [32m✔[39m[0m[90m Example 1.2: casts strings to dates[0m
2025-04-11T19:23:12.5312088Z   [32m  [32m✔[39m[0m[90m Example 1.3: cast error[0m
2025-04-11T19:23:12.5364081Z   [32m  [32m✔[39m[0m[90m Example 1.2.1: min, max[0m
2025-04-11T19:23:12.5480418Z   [32m  [32m✔[39m[0m[90m Example 1.4.1: moment[0m
2025-04-11T19:23:12.5515658Z   [32m  [32m✔[39m[0m[90m Example 1.4.3: numeric strings[0m
2025-04-11T19:23:12.5537435Z [0m    Example 1.3.1[0m
2025-04-11T19:23:12.5784419Z     [32m  [32m✔[39m[0m[90m date queries[0m
2025-04-11T19:23:12.5868400Z 
2025-04-11T19:23:12.5869125Z [0m  transactions[0m
2025-04-11T19:23:12.5882710Z   [36m  - basic example[0m
2025-04-11T19:23:12.5883368Z   [36m  - withTransaction[0m
2025-04-11T19:23:12.5883893Z   [36m  - abort[0m
2025-04-11T19:23:12.5884333Z   [36m  - save[0m
2025-04-11T19:23:12.5884843Z   [36m  - create (gh-6909)[0m
2025-04-11T19:23:12.5885382Z   [36m  - aggregate[0m
2025-04-11T19:23:12.5885994Z   [36m  - deleteOne and deleteMany (gh-7857)(gh-6805)[0m
2025-04-11T19:23:12.5886533Z   [36m  - remove, update, updateOne (gh-7455)[0m
2025-04-11T19:23:12.5886971Z   [36m  - distinct (gh-8006)[0m
2025-04-11T19:23:12.5887410Z   [36m  - save() with no changes (gh-8571)[0m
2025-04-11T19:23:12.5887888Z   [36m  - transaction() resets $isNew on error[0m
2025-04-11T19:23:12.5888469Z   [36m  - transaction() resets $isNew between retries (gh-13698)[0m
2025-04-11T19:23:12.5889122Z   [36m  - handles resetting array state with $set atomic (gh-13698)[0m
2025-04-11T19:23:12.5890405Z   [36m  - transaction() retains modified status for documents created outside of the transaction then modified inside the transaction (gh-13973)[0m
2025-04-11T19:23:12.5891478Z   [36m  - transaction() avoids duplicating atomic operations (gh-14848)[0m
2025-04-11T19:23:12.5892240Z   [36m  - doesnt apply schema write concern to transaction operations (gh-11382)[0m
2025-04-11T19:23:12.5893286Z   [36m  - allows custom transaction wrappers to store and reset document state with $createModifiedPathsSnapshot (gh-14268)[0m
2025-04-11T19:23:12.5894292Z   [36m  - throws error if using `create()` with multiple docs in a transaction (gh-15091)[0m
2025-04-11T19:23:12.5895212Z [0m    populate (gh-6754)[0m
2025-04-11T19:23:12.5896825Z     [36m  - `populate()` uses the querys session[0m
2025-04-11T19:23:12.5897577Z     [36m  - can override `populate()` session[0m
2025-04-11T19:23:12.5898221Z     [36m  - `Document#populate()` uses the documents `$session()` by default[0m
2025-04-11T19:23:12.5898916Z     [36m  - `Document#populate()` supports overwriting the session[0m
2025-04-11T19:23:12.5908290Z [0m    transactionAsyncLocalStorage option[0m
2025-04-11T19:23:12.5919777Z     [36m  - transaction() sets `session` by default if transactionAsyncLocalStorage option is set[0m
2025-04-11T19:23:12.5941038Z 
2025-04-11T19:23:12.5941387Z [0m  custom casting[0m
2025-04-11T19:23:12.5988038Z   [32m  [32m✔[39m[0m[90m casting error[0m
2025-04-11T19:23:12.6037546Z   [32m  [32m✔[39m[0m[90m casting override[0m
2025-04-11T19:23:12.6258717Z 
2025-04-11T19:23:12.6259527Z [0m  schemaTypes[0m
2025-04-11T19:23:12.6318856Z   [32m  [32m✔[39m[0m[90m Creating a Basic Custom Schema Type[0m
2025-04-11T19:23:12.6374743Z 
2025-04-11T19:23:12.6375045Z [0m  Virtuals[0m
2025-04-11T19:23:12.6456118Z   [32m  [32m✔[39m[0m[90m basic[0m
2025-04-11T19:23:12.6505647Z   [32m  [32m✔[39m[0m[90m fullName[0m
2025-04-11T19:23:12.6549847Z   [32m  [32m✔[39m[0m[90m toJSON[0m
2025-04-11T19:23:12.6625675Z   [32m  [32m✔[39m[0m[90m lean[0m
2025-04-11T19:23:12.6696629Z   [32m  [32m✔[39m[0m[90m in query[0m
2025-04-11T19:23:12.6873522Z   [32m  [32m✔[39m[0m[90m populate[0m
2025-04-11T19:23:12.6925290Z   [32m  [32m✔[39m[0m[90m schema-options fullName[0m
2025-04-11T19:23:12.7038807Z   [32m  [32m✔[39m[0m[90m schema-options populate[0m
2025-04-11T19:23:12.7094699Z 
2025-04-11T19:23:12.7095256Z [0m  promises docs[0m
2025-04-11T19:23:12.7254375Z   [32m  [32m✔[39m[0m[90m Built-in Promises[0m
2025-04-11T19:23:12.7318048Z   [32m  [32m✔[39m[0m[90m Queries are not promises[0m
2025-04-11T19:23:12.7379126Z   [32m  [32m✔[39m[0m[90m Queries are thenable[0m
2025-04-11T19:23:12.7440718Z   [36m  - Should You Use `exec()` With `await`?[0m
2025-04-11T19:23:12.7492927Z 
2025-04-11T19:23:12.7493329Z [0m  getVirtual[0m
2025-04-11T19:23:12.7546753Z   [32m  [32m✔[39m[0m[90m handles embedded discriminators (gh-6411)[0m
2025-04-11T19:23:12.7600942Z   [32m  [32m✔[39m[0m[90m handles embedded discriminators under single nested (gh-6488)[0m
2025-04-11T19:23:12.7650376Z   [32m  [32m✔[39m[0m[90m handles multiple calls with discriminator under doc array (gh-6644)[0m
2025-04-11T19:23:12.7682304Z 
2025-04-11T19:23:12.7682677Z [0m  applyTimestampsToUpdate[0m
2025-04-11T19:23:12.7717525Z   [32m  [32m✔[39m[0m[90m handles update pipelines (gh-11151)[0m
2025-04-11T19:23:12.7749563Z 
2025-04-11T19:23:12.7749883Z [0m  promiseOrCallback()[0m
2025-04-11T19:23:12.7761240Z [0m    apply callback[0m
2025-04-11T19:23:12.7805726Z     [32m  [32m✔[39m[0m[90m without error[0m
2025-04-11T19:23:12.7838157Z [0m      with error[0m
2025-04-11T19:23:12.7894287Z       [32m  [32m✔[39m[0m[90m without event emitter[0m
2025-04-11T19:23:12.7981282Z       [32m  [32m✔[39m[0m[90m with event emitter[0m
2025-04-11T19:23:12.8046071Z [0m    chain promise[0m
2025-04-11T19:23:12.8056936Z [0m      without error[0m
2025-04-11T19:23:12.8111793Z       [32m  [32m✔[39m[0m[90m two args[0m
2025-04-11T19:23:12.8198660Z       [32m  [32m✔[39m[0m[90m more args[0m
2025-04-11T19:23:12.8252561Z [0m      with error[0m
2025-04-11T19:23:12.8307214Z       [32m  [32m✔[39m[0m[90m without event emitter[0m
2025-04-11T19:23:12.8394466Z       [32m  [32m✔[39m[0m[90m with event emitter[0m
2025-04-11T19:23:12.8469251Z 
2025-04-11T19:23:12.8469648Z [0m  castArrayFilters[0m
2025-04-11T19:23:12.8509953Z   [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:23:12.8558501Z   [32m  [32m✔[39m[0m[90m casts multiple[0m
2025-04-11T19:23:12.8607271Z   [32m  [32m✔[39m[0m[90m casts on multiple fields[0m
2025-04-11T19:23:12.8657219Z   [32m  [32m✔[39m[0m[90m sane error on same filter twice[0m
2025-04-11T19:23:12.8705376Z   [32m  [32m✔[39m[0m[90m using $in (gh-7431)[0m
2025-04-11T19:23:12.8754697Z   [32m  [32m✔[39m[0m[90m all positional operator works (gh-7540)[0m
2025-04-11T19:23:12.8803161Z   [32m  [32m✔[39m[0m[90m handles deeply nested arrays (gh-7603)[0m
2025-04-11T19:23:12.8852860Z   [32m  [32m✔[39m[0m[90m respects `strictQuery` option (gh-7728)[0m
2025-04-11T19:23:12.8898845Z   [32m  [32m✔[39m[0m[90m respects `strict` override (gh-11062)[0m
2025-04-11T19:23:12.8944642Z   [32m  [32m✔[39m[0m[90m respects `$or` option (gh-10696)[0m
2025-04-11T19:23:12.8994427Z   [32m  [32m✔[39m[0m[90m respects global strictQuery option (gh-11836)[0m
2025-04-11T19:23:12.9049677Z   [32m  [32m✔[39m[0m[90m handles embedded discriminators (gh-12565)[0m
2025-04-11T19:23:12.9101574Z   [32m  [32m✔[39m[0m[90m correctly casts array of strings underneath doc array (gh-12565)[0m
2025-04-11T19:23:12.9133598Z 
2025-04-11T19:23:12.9134390Z [0m  getSubdocumentStrictValue[0m
2025-04-11T19:23:12.9169747Z   [32m  [32m✔[39m[0m[90m returns top-level document if no subdocs[0m
2025-04-11T19:23:12.9204832Z   [32m  [32m✔[39m[0m[90m picks up single nested subdocs along the path[0m
2025-04-11T19:23:12.9251856Z   [32m  [32m✔[39m[0m[90m picks up document arrays[0m
2025-04-11T19:23:12.9298427Z   [32m  [32m✔[39m[0m[90m picks up doubly nested subdocuments[0m
2025-04-11T19:23:12.9345077Z   [32m  [32m✔[39m[0m[90m picks up single nested subdocs under document arrays[0m
2025-04-11T19:23:12.9377680Z 
2025-04-11T19:23:12.9378095Z [0m  setDefaultsOnInsert[0m
2025-04-11T19:23:12.9414072Z   [32m  [32m✔[39m[0m[90m properly ignores nested paths (gh-6665)[0m
2025-04-11T19:23:12.9460588Z   [32m  [32m✔[39m[0m[90m ignores defaults underneath single nested subdocs (gh-10660)[0m
2025-04-11T19:23:12.9510456Z   [32m  [32m✔[39m[0m[90m ignores defaults underneath maps (gh-11235)[0m
2025-04-11T19:23:12.9555925Z   [32m  [32m✔[39m[0m[90m sets default if sibling of dotted path is $set (gh-11668)[0m
2025-04-11T19:23:12.9602197Z   [32m  [32m✔[39m[0m[90m skips default if parent is $set (gh-12279)[0m
2025-04-11T19:23:12.9634229Z 
2025-04-11T19:23:12.9634644Z [0m  isSimpleValidator[0m
2025-04-11T19:23:12.9667861Z   [32m  [32m✔[39m[0m[90m empty object[0m
2025-04-11T19:23:12.9711900Z   [32m  [32m✔[39m[0m[90m object with one primitive attribute[0m
2025-04-11T19:23:12.9756186Z   [32m  [32m✔[39m[0m[90m object with one simple array attribute[0m
2025-04-11T19:23:12.9799751Z   [32m  [32m✔[39m[0m[90m object with some native objects[0m
2025-04-11T19:23:12.9843397Z   [32m  [32m✔[39m[0m[90m object with one sub object[0m
2025-04-11T19:23:12.9887554Z   [32m  [32m✔[39m[0m[90m object with one attribute of type MongooseDocumentArray[0m
2025-04-11T19:23:12.9919870Z 
2025-04-11T19:23:12.9920535Z [0m  isMongooseObject[0m
2025-04-11T19:23:12.9954826Z   [32m  [32m✔[39m[0m[90m is when value.$__ != null[0m
2025-04-11T19:23:13.0000384Z   [32m  [32m✔[39m[0m[90m is when value is a MongooseArray[0m
2025-04-11T19:23:13.0044831Z   [32m  [32m✔[39m[0m[90m is when value.isMongooseBuffer is truthy[0m
2025-04-11T19:23:13.0088296Z   [32m  [32m✔[39m[0m[90m is when value.$isMongooseMap is truthy[0m
2025-04-11T19:23:13.0134827Z   [32m  [32m✔[39m[0m[90m is not when anything else[0m
2025-04-11T19:23:13.0167390Z 
2025-04-11T19:23:13.0167683Z [0m  eachAsync()[0m
2025-04-11T19:23:14.0922844Z   [32m  [32m✔[39m[0m[90m exhausts large cursor without parallel calls (gh-8235)[0m[31m (1073ms)[0m
2025-04-11T19:23:14.3046717Z   [32m  [32m✔[39m[0m[90m waits until the end before resolving the promise (gh-8352)[0m[31m (208ms)[0m
2025-04-11T19:23:14.3204021Z   [32m  [32m✔[39m[0m[90m it processes the documents in batches successfully[0m
2025-04-11T19:23:14.3359058Z   [32m  [32m✔[39m[0m[90m it processes the documents in batches even if the batch size % document count is not zero successfully[0m
2025-04-11T19:23:14.3512512Z   [32m  [32m✔[39m[0m[90m it processes the documents in batches with the parallel option provided[0m
2025-04-11T19:23:14.3603114Z   [32m  [32m✔[39m[0m[90m executes all documents and aggregates errors if continueOnError set (gh-6355)[0m
2025-04-11T19:23:14.3658965Z   [32m  [32m✔[39m[0m[90m returns aggregated error fetching documents with continueOnError (gh-6355)[0m
2025-04-11T19:23:14.5820716Z   [32m  [32m✔[39m[0m[90m avoids mutating document batch with parallel (gh-12652)[0m[31m (211ms)[0m
2025-04-11T19:23:14.5897988Z   [32m  [32m✔[39m[0m[90m using AbortSignal (gh-12173)[0m
2025-04-11T19:23:14.5930555Z 
2025-04-11T19:23:14.5931072Z [0m  isBsonType[0m
2025-04-11T19:23:14.5964756Z   [32m  [32m✔[39m[0m[90m true for any object with _bsontype property equal typename[0m
2025-04-11T19:23:14.6008549Z   [32m  [32m✔[39m[0m[90m true for any object without _bsontype property and undefined typename[0m
2025-04-11T19:23:14.6052300Z   [32m  [32m✔[39m[0m[90m false for any object with _bsontype property different of typename[0m
2025-04-11T19:23:14.6095678Z   [32m  [32m✔[39m[0m[90m false for any object without _bsontype property[0m
2025-04-11T19:23:14.6139976Z   [32m  [32m✔[39m[0m[90m true for Decimal128[0m
2025-04-11T19:23:14.6183869Z   [32m  [32m✔[39m[0m[90m true for ObjectId[0m
2025-04-11T19:23:14.6228089Z   [32m  [32m✔[39m[0m[90m true for Double[0m
2025-04-11T19:23:14.6272327Z   [32m  [32m✔[39m[0m[90m true for Int32[0m
2025-04-11T19:23:14.6304929Z 
2025-04-11T19:23:14.6305456Z [0m  getSchemaTypes[0m
2025-04-11T19:23:14.6351363Z   [32m  [32m✔[39m[0m[90m handles embedded discriminators (gh-5970)[0m
2025-04-11T19:23:14.6408638Z   [32m  [32m✔[39m[0m[90m multiple embedded discriminators (gh-6064)[0m
2025-04-11T19:23:14.6466336Z   [32m  [32m✔[39m[0m[90m handles already populated paths (gh-6798)[0m
2025-04-11T19:23:14.6517091Z   [32m  [32m✔[39m[0m[90m handles embedded discriminators in nested arrays (gh-9984)[0m
2025-04-11T19:23:14.6564335Z   [32m  [32m✔[39m[0m[90m finds path underneath nested subdocument with map of mixed (gh-12530)[0m
2025-04-11T19:23:14.6596402Z 
2025-04-11T19:23:14.6596942Z [0m  cleanPositionalOperators[0m
2025-04-11T19:23:14.6630399Z   [32m  [32m✔[39m[0m[90m replaces trailing array filter[0m
2025-04-11T19:23:14.6673841Z   [32m  [32m✔[39m[0m[90m replaces trailing $[0m
2025-04-11T19:23:14.6717424Z   [32m  [32m✔[39m[0m[90m replaces interior array filters[0m
2025-04-11T19:23:14.6761168Z   [32m  [32m✔[39m[0m[90m replaces interior elemMatch[0m
2025-04-11T19:23:14.6793201Z 
2025-04-11T19:23:14.6793636Z [0m  setDottedPath[0m
2025-04-11T19:23:14.6826900Z   [32m  [32m✔[39m[0m[90m setDottedPath root element[0m
2025-04-11T19:23:14.6871399Z   [32m  [32m✔[39m[0m[90m setDottedPath sub element[0m
2025-04-11T19:23:14.6904000Z 
2025-04-11T19:23:14.6904566Z [0m  isSubpath[0m
2025-04-11T19:23:14.6939055Z   [32m  [32m✔[39m[0m[90m handles single-part paths[0m
2025-04-11T19:23:14.6982210Z   [32m  [32m✔[39m[0m[90m handles multi-part paths[0m
2025-04-11T19:23:14.7014272Z 
2025-04-11T19:23:14.7014795Z [0m  getPath()[0m
2025-04-11T19:23:14.7051367Z   [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:23:14.7098599Z   [32m  [32m✔[39m[0m[90m nested arrays[0m
2025-04-11T19:23:14.7130563Z 
2025-04-11T19:23:14.7131141Z [0m  getModelsMapForPopulate[0m
2025-04-11T19:23:14.7218259Z   [32m  [32m✔[39m[0m[90m should error on missing options on populate[0m
2025-04-11T19:23:14.7306423Z 
2025-04-11T19:23:14.7306864Z [0m  isExclusive[0m
2025-04-11T19:23:14.7340685Z   [32m  [32m✔[39m[0m[90m handles $elemMatch (gh-14893)[0m
2025-04-11T19:23:14.7361705Z 
2025-04-11T19:23:14.7362057Z [0m  applyProjection[0m
2025-04-11T19:23:14.7397349Z   [32m  [32m✔[39m[0m[90m handles deep inclusive projections[0m
2025-04-11T19:23:14.7442023Z   [32m  [32m✔[39m[0m[90m handles deep exclusive projections[0m
2025-04-11T19:23:14.7487194Z   [32m  [32m✔[39m[0m[90m handles projections underneath arrays (gh-14680)[0m
2025-04-11T19:23:14.7519069Z 
2025-04-11T19:23:14.7519400Z [0m  isObject[0m
2025-04-11T19:23:14.7530685Z [0m    true for[0m
2025-04-11T19:23:14.7575025Z     [32m  [32m✔[39m[0m[90m {}[0m
2025-04-11T19:23:14.7640280Z     [32m  [32m✔[39m[0m[90m Buffer[0m
2025-04-11T19:23:14.7705319Z     [32m  [32m✔[39m[0m[90m Object[0m
2025-04-11T19:23:14.7748664Z [0m    false for[0m
2025-04-11T19:23:14.7792394Z     [32m  [32m✔[39m[0m[90m ""[0m
2025-04-11T19:23:14.7857610Z     [32m  [32m✔[39m[0m[90m /.*/[0m
2025-04-11T19:23:14.7922438Z     [32m  [32m✔[39m[0m[90m [][0m
2025-04-11T19:23:14.7987507Z     [32m  [32m✔[39m[0m[90m Array[0m
2025-04-11T19:23:14.8052814Z     [32m  [32m✔[39m[0m[90m Function[0m
2025-04-11T19:23:14.8117789Z     [32m  [32m✔[39m[0m[90m RegExp[0m
2025-04-11T19:23:14.8182782Z     [32m  [32m✔[39m[0m[90m String[0m
2025-04-11T19:23:14.8247809Z     [32m  [32m✔[39m[0m[90m "[object Object]"[0m
2025-04-11T19:23:14.8301483Z 
2025-04-11T19:23:14.8301794Z [0m  arrayDepth[0m
2025-04-11T19:23:14.8335197Z   [32m  [32m✔[39m[0m[90m non-array[0m
2025-04-11T19:23:14.8378857Z   [32m  [32m✔[39m[0m[90m simple array with no element[0m
2025-04-11T19:23:14.8422800Z   [32m  [32m✔[39m[0m[90m simple array with one element[0m
2025-04-11T19:23:14.8466569Z   [32m  [32m✔[39m[0m[90m simple array with many elements[0m
2025-04-11T19:23:14.8510951Z   [32m  [32m✔[39m[0m[90m simple array with many elements[0m
2025-04-11T19:23:14.8554492Z   [32m  [32m✔[39m[0m[90m complex array with one sub-Array[0m
2025-04-11T19:23:14.8598413Z   [32m  [32m✔[39m[0m[90m complex array with deeply nested sub-Arrays[0m
2025-04-11T19:23:14.8642120Z   [32m  [32m✔[39m[0m[90m complex array with deeply nested sub-Arrays[0m
2025-04-11T19:23:14.8685779Z   [32m  [32m✔[39m[0m[90m complex array with deeply nested sub-Arrays[0m
2025-04-11T19:23:14.8717580Z 
2025-04-11T19:23:14.8718081Z [0m  getDeepestSubdocumentForPath[0m
2025-04-11T19:23:14.8756561Z   [32m  [32m✔[39m[0m[90m returns top-level document if no subdocs[0m
2025-04-11T19:23:14.8808353Z   [32m  [32m✔[39m[0m[90m picks up single nested subdocs along the path[0m
2025-04-11T19:23:14.8859698Z   [32m  [32m✔[39m[0m[90m picks up document arrays[0m
2025-04-11T19:23:14.8911561Z   [32m  [32m✔[39m[0m[90m picks up doubly nested subdocuments[0m
2025-04-11T19:23:14.8962678Z   [32m  [32m✔[39m[0m[90m returns deepest non-null subdoc[0m
2025-04-11T19:23:14.9016058Z   [32m  [32m✔[39m[0m[90m picks up single nested subdocs under document arrays[0m
2025-04-11T19:23:14.9059891Z 
2025-04-11T19:23:14.9060489Z [0m  castUpdate[0m
2025-04-11T19:23:14.9096310Z   [32m  [32m✔[39m[0m[90m avoids adding `$each` if `$addToSet` on mixed array (gh-11284)[0m
2025-04-11T19:23:14.9146086Z   [32m  [32m✔[39m[0m[90m casts the update correctly when target discriminator type is missing[0m
2025-04-11T19:23:14.9177828Z 
2025-04-11T19:23:14.9178491Z [0m  isIndexSpecEqual[0m
2025-04-11T19:23:14.9212709Z   [32m  [32m✔[39m[0m[90m should return true for equal index specifications[0m
2025-04-11T19:23:14.9256328Z   [32m  [32m✔[39m[0m[90m should return false for different key order[0m
2025-04-11T19:23:14.9300326Z   [32m  [32m✔[39m[0m[90m should return false for different index keys[0m
2025-04-11T19:23:14.9331921Z 
2025-04-11T19:23:14.9332165Z [0m  get[0m
2025-04-11T19:23:14.9365811Z   [32m  [32m✔[39m[0m[90m gets dotted properties[0m
2025-04-11T19:23:14.9409668Z   [32m  [32m✔[39m[0m[90m returns default on undefined[0m
2025-04-11T19:23:14.9442744Z   [32m  [32m✔[39m[0m[90m returns default on bottom null[0m
2025-04-11T19:23:14.9486982Z   [32m  [32m✔[39m[0m[90m returns default on top-level null[0m
2025-04-11T19:23:14.9530764Z   [32m  [32m✔[39m[0m[90m works with maps[0m
2025-04-11T19:23:14.9575041Z   [32m  [32m✔[39m[0m[90m works with dotted at top level[0m
2025-04-11T19:23:14.9618683Z   [32m  [32m✔[39m[0m[90m works with dotted nested[0m
2025-04-11T19:23:14.9640323Z 
2025-04-11T19:23:14.9640772Z [0m  getRelatedIndexes[0m
2025-04-11T19:23:14.9665404Z [0m    getRelatedSchemaIndexes[0m
2025-04-11T19:23:14.9716399Z     [32m  [32m✔[39m[0m[90m with base model, no discriminator, it gets all indexes[0m
2025-04-11T19:23:14.9999546Z     [32m  [32m✔[39m[0m[90m with base model that has discriminator, it ignores discriminator indexes[0m
2025-04-11T19:23:15.0395607Z     [32m  [32m✔[39m[0m[90m with base model that has discriminator, it includes discriminator indexes that only checks for existence[0m
2025-04-11T19:23:15.0607714Z     [32m  [32m✔[39m[0m[90m with discriminator model, it only gets discriminator indexes[0m
2025-04-11T19:23:15.0902642Z [0m    getRelatedDBIndexes[0m
2025-04-11T19:23:15.0951705Z     [32m  [32m✔[39m[0m[90m with base model, no discriminator, it gets all indexes[0m
2025-04-11T19:23:15.1071353Z     [32m  [32m✔[39m[0m[90m with base model that has discriminator, it ignores discriminator indexes[0m
2025-04-11T19:23:15.1387601Z     [32m  [32m✔[39m[0m[90m with discriminator model, it only gets discriminator indexes[0m
2025-04-11T19:23:15.1732825Z 
2025-04-11T19:23:15.1733386Z [0m  modifiedPaths, bad update value which has circular reference field[0m
2025-04-11T19:23:15.1766353Z   [32m  [32m✔[39m[0m[90m update value can be null[0m
2025-04-11T19:23:15.1813409Z   [32m  [32m✔[39m[0m[90m values with obvious error on circular reference[0m
2025-04-11T19:23:15.1857519Z   [32m  [32m✔[39m[0m[90m values with multiple references which are not circular should succeed[0m
2025-04-11T19:23:15.1889463Z 
2025-04-11T19:23:15.1889816Z [0m  isInclusive[0m
2025-04-11T19:23:15.1923470Z   [32m  [32m✔[39m[0m[90m handles $elemMatch (gh-14893)[0m
2025-04-11T19:23:15.1955550Z 
2025-04-11T19:23:15.1955976Z [0m  applyWriteConcern[0m
2025-04-11T19:23:15.2000972Z   [32m  [32m✔[39m[0m[90m should not overwrite user specified writeConcern options (gh-13592)[0m
2025-04-11T19:23:15.2057060Z 
2025-04-11T19:23:15.2057491Z [0m  sanitizeFilter[0m
2025-04-11T19:23:15.2092065Z   [32m  [32m✔[39m[0m[90m throws when filter includes a query selector[0m
2025-04-11T19:23:15.2136381Z   [32m  [32m✔[39m[0m[90m ignores explicitly defined query selectors[0m
2025-04-11T19:23:15.2181706Z   [32m  [32m✔[39m[0m[90m handles $and and $or[0m
2025-04-11T19:23:15.2214034Z 
2025-04-11T19:23:15.2214418Z [0m  isAsyncFunction[0m
2025-04-11T19:23:15.2247798Z   [32m  [32m✔[39m[0m[90m should return false for non-functions[0m
2025-04-11T19:23:15.2291716Z   [32m  [32m✔[39m[0m[90m should return false for sync function[0m
2025-04-11T19:23:15.2335469Z   [32m  [32m✔[39m[0m[90m should return true for async function[0m
2025-04-11T19:23:15.2379231Z   [32m  [32m✔[39m[0m[90m should return false for sync function returning a Promise[0m
2025-04-11T19:23:15.2411241Z 
2025-04-11T19:23:15.2411618Z [0m  castexpr[0m
2025-04-11T19:23:15.2454088Z   [32m  [32m✔[39m[0m[90m casts comparisons[0m
2025-04-11T19:23:15.2502419Z   [32m  [32m✔[39m[0m[90m casts conditions[0m
2025-04-11T19:23:15.2547368Z   [32m  [32m✔[39m[0m[90m casts boolean expressions[0m
2025-04-11T19:23:15.2600269Z   [32m  [32m✔[39m[0m[90m cast errors[0m
2025-04-11T19:23:15.2649486Z   [32m  [32m✔[39m[0m[90m casts $in[0m
2025-04-11T19:23:15.2695833Z   [32m  [32m✔[39m[0m[90m casts $not (gh-11689)[0m
2025-04-11T19:23:15.2741705Z   [32m  [32m✔[39m[0m[90m casts $round (gh-13881)[0m
2025-04-11T19:23:15.2787481Z   [32m  [32m✔[39m[0m[90m casts $switch (gh-14751)[0m
2025-04-11T19:23:15.2819580Z 
2025-04-11T19:23:15.2819963Z [0m  applyTimestampsToChildren[0m
2025-04-11T19:23:15.2860448Z   [32m  [32m✔[39m[0m[90m applies timestamps to nested subdocs within a $push (gh-11775)[0m
2025-04-11T19:23:15.2892315Z 
2025-04-11T19:23:15.2892626Z [0m  getFunctionName[0m
2025-04-11T19:23:15.2925882Z   [32m  [32m✔[39m[0m[90m return fn.name[0m
2025-04-11T19:23:15.2969462Z   [32m  [32m✔[39m[0m[90m return function name[0m
2025-04-11T19:23:15.3021797Z   [32m  [32m✔[39m[0m[90m return function functionName[0m
2025-04-11T19:23:15.3065757Z   [32m  [32m✔[39m[0m[90m return undefined for arrow function[0m
2025-04-11T19:23:15.3097881Z 
2025-04-11T19:23:15.3098260Z [0m  selectPopulatedFields[0m
2025-04-11T19:23:15.3128633Z   [32m  [32m✔[39m[0m[90m selects refPath[0m
2025-04-11T19:23:15.3172812Z   [32m  [32m✔[39m[0m[90m adds refPath to projection if not deselected by user in exclusive projection[0m
2025-04-11T19:23:15.3204745Z 
2025-04-11T19:23:15.3205357Z [0m  clone[0m
2025-04-11T19:23:15.3240032Z   [32m  [32m✔[39m[0m[90m retains RegExp options gh-1355[0m
2025-04-11T19:23:15.3284094Z   [32m  [32m✔[39m[0m[90m clones objects created with Object.create(null)[0m
2025-04-11T19:23:15.3328186Z   [32m  [32m✔[39m[0m[90m doesnt minimize empty objects in arrays to null (gh-7322)[0m
2025-04-11T19:23:15.3372626Z   [32m  [32m✔[39m[0m[90m skips cloning types that have `toBSON()` if `bson` is set (gh-8299)[0m
2025-04-11T19:23:15.3393889Z [0m    falsy[0m
2025-04-11T19:23:15.3437838Z     [32m  [32m✔[39m[0m[90m is null when null[0m
2025-04-11T19:23:15.3502913Z     [32m  [32m✔[39m[0m[90m is false when false[0m
2025-04-11T19:23:15.3567930Z     [32m  [32m✔[39m[0m[90m is undefined when undefined[0m
2025-04-11T19:23:15.3632839Z     [32m  [32m✔[39m[0m[90m is 0 when 0[0m
2025-04-11T19:23:15.3675963Z [0m    Array[0m
2025-04-11T19:23:15.3721061Z     [32m  [32m✔[39m[0m[90m clones first level[0m
2025-04-11T19:23:15.3786429Z     [32m  [32m✔[39m[0m[90m clones deeper[0m
2025-04-11T19:23:15.3829904Z [0m    mongoose object[0m
2025-04-11T19:23:15.3874284Z     [32m  [32m✔[39m[0m[90m use toObject[0m
2025-04-11T19:23:15.3939853Z     [32m  [32m✔[39m[0m[90m use toJSON[0m
2025-04-11T19:23:15.4006103Z     [32m  [32m✔[39m[0m[90m skipSingleNestedGetters[0m
2025-04-11T19:23:15.4049229Z [0m    global objects[0m
2025-04-11T19:23:15.4060599Z [0m      constructor is Object[0m
2025-04-11T19:23:15.4115347Z       [32m  [32m✔[39m[0m[90m !minimize || isArrayChild[0m
2025-04-11T19:23:15.4202200Z       [32m  [32m✔[39m[0m[90m !constructor && !minimize || isArrayChild[0m
2025-04-11T19:23:15.4289044Z       [32m  [32m✔[39m[0m[90m minimize && !isArrayChild && hasKey[0m
2025-04-11T19:23:15.4365028Z       [32m  [32m✔[39m[0m[90m minimize and !isArrayChild && !hasKey[0m
2025-04-11T19:23:15.4418861Z [0m      constructor is Data[0m
2025-04-11T19:23:15.4462699Z       [32m  [32m✔[39m[0m[90m return new equal date [0m
2025-04-11T19:23:15.4516569Z [0m      constructor is RegExp[0m
2025-04-11T19:23:15.4571996Z       [32m  [32m✔[39m[0m[90m return new equal date [0m
2025-04-11T19:23:15.4636573Z [0m    mongo object[0m
2025-04-11T19:23:15.4681065Z     [32m  [32m✔[39m[0m[90m is instance of ObjectId[0m
2025-04-11T19:23:15.4724648Z [0m    schema type[0m
2025-04-11T19:23:15.4768916Z     [32m  [32m✔[39m[0m[90m have schemaTypeSymbol property[0m
2025-04-11T19:23:15.4811933Z [0m    bson[0m
2025-04-11T19:23:15.4857676Z     [32m  [32m✔[39m[0m[90m Decimal128[0m
2025-04-11T19:23:15.4923951Z     [32m  [32m✔[39m[0m[90m Decimal128 (flatternDecimal)[0m
2025-04-11T19:23:15.4989406Z     [32m  [32m✔[39m[0m[90m does nothing[0m
2025-04-11T19:23:15.5032475Z [0m    any else[0m
2025-04-11T19:23:15.5076494Z     [32m  [32m✔[39m[0m[90m valueOf[0m
2025-04-11T19:23:15.5141983Z     [32m  [32m✔[39m[0m[90m cloneObject[0m
2025-04-11T19:23:15.5195690Z 
2025-04-11T19:23:15.5195992Z [0m  isIndexEqual[0m
2025-04-11T19:23:15.5231068Z   [32m  [32m✔[39m[0m[90m ignores default collation options when comparing collations (gh-8994)[0m
2025-04-11T19:23:15.5275200Z   [32m  [32m✔[39m[0m[90m works when MongoDB index has collation but Mongoose index doesn't (gh-9224)[0m
2025-04-11T19:23:15.5319222Z   [32m  [32m✔[39m[0m[90m handles text indexes (gh-9225)[0m
2025-04-11T19:23:15.5351192Z 
2025-04-11T19:23:15.5351570Z [0m  stringifyFunctionOperators[0m
2025-04-11T19:23:15.5385976Z   [32m  [32m✔[39m[0m[90m converts accumulator args to strings (gh-9364)[0m
2025-04-11T19:23:15.5430310Z   [32m  [32m✔[39m[0m[90m converts function args to strings (gh-9897)[0m
2025-04-11T19:23:15.5462437Z 
2025-04-11T19:23:15.5462824Z [0m  prepareDiscriminatorPipeline[0m
2025-04-11T19:23:15.5496645Z   [32m  [32m✔[39m[0m[90m handles case where initial $match includes the discriminator key (gh-12478)[0m
2025-04-11T19:23:15.5528548Z 
2025-04-11T19:23:15.5528918Z [0m  removeUnusedArrayFilters[0m
2025-04-11T19:23:15.5563330Z   [32m  [32m✔[39m[0m[90m respects `$or` (gh-10696)[0m
2025-04-11T19:23:15.5595423Z 
2025-04-11T19:23:15.5595792Z [0m  Query helpers[0m
2025-04-11T19:23:15.5606877Z [0m    selectPopulatedFields[0m
2025-04-11T19:23:15.5651906Z     [32m  [32m✔[39m[0m[90m handles nested populate if parent key is projected in (gh-5669)[0m
2025-04-11T19:23:15.5717057Z     [32m  [32m✔[39m[0m[90m handles nested populate if parent key is projected out (gh-5669)[0m
2025-04-11T19:23:15.5782343Z     [32m  [32m✔[39m[0m[90m handle explicitly excluded paths (gh-7383)[0m
2025-04-11T19:23:15.5847779Z     [32m  [32m✔[39m[0m[90m handles paths selected with elemMatch (gh-9973)[0m
2025-04-11T19:23:15.5901405Z 
2025-04-11T19:23:15.5901930Z [0m  Map[0m
2025-04-11T19:23:15.6055297Z   [32m  [32m✔[39m[0m[90m validation[0m
2025-04-11T19:23:15.6122317Z   [32m  [32m✔[39m[0m[90m deep set[0m
2025-04-11T19:23:15.6329936Z   [32m  [32m✔[39m[0m[90m supports delete() (gh-7743)[0m
2025-04-11T19:23:15.6584326Z   [32m  [32m✔[39m[0m[90m query casting[0m
2025-04-11T19:23:15.6750340Z   [32m  [32m✔[39m[0m[90m defaults[0m
2025-04-11T19:23:15.6910597Z   [32m  [32m✔[39m[0m[90m validation[0m
2025-04-11T19:23:15.7088828Z   [32m  [32m✔[39m[0m[90m with single nested subdocs[0m
2025-04-11T19:23:15.7325929Z   [32m  [32m✔[39m[0m[90m discriminators[0m
2025-04-11T19:23:15.7535139Z   [32m  [32m✔[39m[0m[90m embedded discriminators[0m
2025-04-11T19:23:15.7703067Z   [32m  [32m✔[39m[0m[90m toJSON seralizes map paths (gh-6478)[0m
2025-04-11T19:23:15.7914890Z   [32m  [32m✔[39m[0m[90m updating map doesnt crash (gh-6750)[0m
2025-04-11T19:23:15.8088050Z   [32m  [32m✔[39m[0m[90m works with sub doc hooks (gh-6938)[0m
2025-04-11T19:23:15.8266769Z   [32m  [32m✔[39m[0m[90m array of mixed maps (gh-6995)[0m
2025-04-11T19:23:15.8449678Z   [32m  [32m✔[39m[0m[90m only runs setters once on init (gh-7272)[0m
2025-04-11T19:23:15.8642695Z   [32m  [32m✔[39m[0m[90m init then set marks correct path as modified (gh-7321)[0m
2025-04-11T19:23:15.8809960Z   [32m  [32m✔[39m[0m[90m nested maps (gh-7630)[0m
2025-04-11T19:23:15.8879914Z   [32m  [32m✔[39m[0m[90m get full path in validator with `propsParameter` (gh-7447)[0m
2025-04-11T19:23:15.8985376Z   [32m  [32m✔[39m[0m[90m treats `of` as a schema if typeKey is not set (gh-7859)[0m
2025-04-11T19:23:15.9093660Z   [32m  [32m✔[39m[0m[90m works with clone() (gh-8357)[0m
2025-04-11T19:23:15.9201886Z   [32m  [32m✔[39m[0m[90m maps of single nested docs with inline _id (gh-8424)[0m
2025-04-11T19:23:15.9424468Z   [32m  [32m✔[39m[0m[90m avoids marking path as modified if setting to same value (gh-8652)[0m
2025-04-11T19:23:15.9612299Z   [32m  [32m✔[39m[0m[90m handles setting map value to spread document (gh-8652)[0m
2025-04-11T19:23:15.9678961Z   [32m  [32m✔[39m[0m[90m runs getters on map values (gh-8730)[0m
2025-04-11T19:23:15.9793690Z   [32m  [32m✔[39m[0m[90m handles validation of document array with maps and nested paths (gh-8767)[0m
2025-04-11T19:23:16.0004845Z   [32m  [32m✔[39m[0m[90m persists `.clear()` (gh-9493)[0m
2025-04-11T19:23:16.0179028Z   [32m  [32m✔[39m[0m[90m supports `null` in map of subdocuments (gh-9628)[0m
2025-04-11T19:23:16.0337282Z   [32m  [32m✔[39m[0m[90m tracks changes correctly (gh-9811)[0m
2025-04-11T19:23:16.0534891Z   [32m  [32m✔[39m[0m[90m handles map of arrays (gh-9813)[0m
2025-04-11T19:23:16.0866380Z   [32m  [32m✔[39m[0m[90m can populate map of subdocs with doc array using ref function (gh-10584)[0m
2025-04-11T19:23:16.0940670Z   [32m  [32m✔[39m[0m[90m propagates `flattenMaps` to nested maps (gh-10653)[0m
2025-04-11T19:23:16.1235116Z   [32m  [32m✔[39m[0m[90m handles populating map of arrays (gh-12494)[0m
2025-04-11T19:23:16.1420594Z   [32m  [32m✔[39m[0m[90m clears nested changes in subdocs (gh-15108)[0m
2025-04-11T19:23:16.1605829Z   [32m  [32m✔[39m[0m[90m clears nested changes in doc arrays (gh-15108)[0m
2025-04-11T19:23:16.1812215Z   [32m  [32m✔[39m[0m[90m handles loading and modifying map of document arrays (gh-15196)[0m
2025-04-11T19:23:16.1850505Z [0m    populate[0m
2025-04-11T19:23:16.2086472Z     [32m  [32m✔[39m[0m[90m populate individual path[0m
2025-04-11T19:23:16.2354419Z     [32m  [32m✔[39m[0m[90m populate entire map[0m
2025-04-11T19:23:16.2607670Z     [32m  [32m✔[39m[0m[90m populate entire map in doc[0m
2025-04-11T19:23:16.2852524Z     [32m  [32m✔[39m[0m[90m avoid populating as map if populate on obj (gh-6460) (gh-8157)[0m
2025-04-11T19:23:16.3132468Z     [32m  [32m✔[39m[0m[90m handles setting populated path to doc and then saving (gh-7745)[0m
2025-04-11T19:23:16.3412272Z     [32m  [32m✔[39m[0m[90m handles populating path of subdoc (gh-9359)[0m
2025-04-11T19:23:16.3508883Z 
2025-04-11T19:23:16.3509193Z [0m  geojson[0m
2025-04-11T19:23:16.3687737Z   [32m  [32m✔[39m[0m[90m driver query[0m
2025-04-11T19:23:16.3881927Z   [32m  [32m✔[39m[0m[90m within helper[0m
2025-04-11T19:23:16.4080452Z   [32m  [32m✔[39m[0m[90m index[0m
2025-04-11T19:23:16.4286678Z   [32m  [32m✔[39m[0m[90m near[0m
2025-04-11T19:23:16.4354683Z 
2025-04-11T19:23:16.4361120Z [0m  document[0m
2025-04-11T19:23:16.4415732Z   [32m  [32m✔[39m[0m[90m test shortcut setters[0m
2025-04-11T19:23:16.4473811Z   [32m  [32m✔[39m[0m[90m test accessor of id[0m
2025-04-11T19:23:16.4533607Z   [32m  [32m✔[39m[0m[90m test shortcut of id hexString[0m
2025-04-11T19:23:16.4614508Z   [32m  [32m✔[39m[0m[90m toObject options[0m
2025-04-11T19:23:16.5033523Z   [32m  [32m✔[39m[0m[90m toObject transform[0m
2025-04-11T19:23:16.5110400Z   [32m  [32m✔[39m[0m[90m propagates toObject transform function to all subdocuments (gh-14589)[0m
2025-04-11T19:23:16.5217396Z   [32m  [32m✔[39m[0m[90m disabling aliases in toObject options (gh-7548)[0m
2025-04-11T19:23:16.5455695Z   [32m  [32m✔[39m[0m[90m can save multiple times with changes to complex subdocuments (gh-8531)[0m
2025-04-11T19:23:16.5643311Z   [32m  [32m✔[39m[0m[90m saves even if `_id` is null (gh-6406)[0m
2025-04-11T19:23:16.5786224Z   [32m  [32m✔[39m[0m[90m allows you to skip validation on save (gh-2981)[0m
2025-04-11T19:23:16.6035295Z   [32m  [32m✔[39m[0m[90m doesnt use custom toObject options on save[0m
2025-04-11T19:23:16.6103880Z   [32m  [32m✔[39m[0m[90m toObject should not set undefined values to null[0m
2025-04-11T19:23:16.6176593Z   [32m  [32m✔[39m[0m[90m methods on embedded docs should work[0m
2025-04-11T19:23:16.6954460Z   [32m  [32m✔[39m[0m[90m setting a positional path does not cast value to array[0m
2025-04-11T19:23:16.7042509Z   [32m  [32m✔[39m[0m[90m no maxListeners warning should occur[0m
2025-04-11T19:23:16.7406700Z   [32m  [32m✔[39m[0m[90m unselected required fields should pass validation[0m
2025-04-11T19:23:16.7573661Z   [32m  [32m✔[39m[0m[90m #invalidate[0m
2025-04-11T19:23:16.7641181Z   [32m  [32m✔[39m[0m[90m properly calls queue functions (gh-2856)[0m
2025-04-11T19:23:16.7877401Z   [32m  [32m✔[39m[0m[90m does not save duplicate items after two saves (gh-6900)[0m
2025-04-11T19:23:16.7957538Z   [32m  [32m✔[39m[0m[90m validateSync() on embedded doc (gh-6931)[0m
2025-04-11T19:23:16.8064247Z   [32m  [32m✔[39m[0m[90m retains user-defined key order with nested docs (gh-6944)[0m
2025-04-11T19:23:16.8274373Z   [32m  [32m✔[39m[0m[90m does not mark modified if setting nested subdoc to same value (gh-7048)[0m
2025-04-11T19:23:16.8448447Z   [32m  [32m✔[39m[0m[90m allow saving validation error in db (gh-7127)[0m
2025-04-11T19:23:16.8516992Z   [32m  [32m✔[39m[0m[90m handles mixed arrays with all syntaxes (gh-7109)[0m
2025-04-11T19:23:16.8619886Z   [32m  [32m✔[39m[0m[90m propsParameter option (gh-7145)[0m
2025-04-11T19:23:16.8731168Z   [32m  [32m✔[39m[0m[90m surfaces errors in subdoc pre validate (gh-7187)[0m
2025-04-11T19:23:16.8841813Z   [32m  [32m✔[39m[0m[90m runs setter only once when doing .set() underneath single nested (gh-7196)[0m
2025-04-11T19:23:16.9047637Z   [32m  [32m✔[39m[0m[90m should enable key with dot(.) on mixed types with checkKeys (gh-7144)[0m
2025-04-11T19:23:16.9225126Z   [32m  [32m✔[39m[0m[90m doesnt mark array as modified on init if embedded schema has default (gh-7227)[0m
2025-04-11T19:23:16.9404710Z   [32m  [32m✔[39m[0m[90m casts defaults for doc arrays (gh-7337)[0m
2025-04-11T19:23:16.9579413Z   [32m  [32m✔[39m[0m[90m updateOne() hooks (gh-7133) (gh-7423)[0m
2025-04-11T19:23:16.9743100Z   [32m  [32m✔[39m[0m[90m doesnt mark single nested doc date as modified if setting with string (gh-7264)[0m
2025-04-11T19:23:16.9814116Z   [32m  [32m✔[39m[0m[90m handles null `fields` param to constructor (gh-7271)[0m
2025-04-11T19:23:16.9931702Z   [32m  [32m✔[39m[0m[90m flattenMaps option for toObject() (gh-10872) (gh-7274) (gh-10486)[0m
2025-04-11T19:23:17.0125771Z   [32m  [32m✔[39m[0m[90m flattenObjectIds option for toObject() (gh-13341) (gh-2790)[0m
2025-04-11T19:23:17.0344991Z   [32m  [32m✔[39m[0m[90m `collection` property with strict: false (gh-7276)[0m
2025-04-11T19:23:17.0424333Z   [32m  [32m✔[39m[0m[90m should validateSync() all elements in doc array (gh-6746)[0m
2025-04-11T19:23:17.0576309Z   [32m  [32m✔[39m[0m[90m handles fake constructor (gh-7290)[0m
2025-04-11T19:23:17.0691811Z   [32m  [32m✔[39m[0m[90m handles fake __proto__ (gh-7290)[0m
2025-04-11T19:23:17.0891754Z   [32m  [32m✔[39m[0m[90m cast error with string path set to array in db (gh-7619)[0m
2025-04-11T19:23:17.1062693Z   [32m  [32m✔[39m[0m[90m doesnt crash if nested path with `get()` (gh-7316)[0m
2025-04-11T19:23:17.1259025Z   [32m  [32m✔[39m[0m[90m copies atomics from existing document array when setting doc array (gh-7472)[0m
2025-04-11T19:23:17.1462035Z   [32m  [32m✔[39m[0m[90m doesnt fail with custom update function (gh-7342)[0m
2025-04-11T19:23:17.1535136Z   [32m  [32m✔[39m[0m[90m setters that modify `this` should work on single nested when overwriting (gh-7585)[0m
2025-04-11T19:23:17.1644124Z   [32m  [32m✔[39m[0m[90m handles setting embedded doc to Object.assign() from another doc (gh-7645)[0m
2025-04-11T19:23:17.1888799Z   [32m  [32m✔[39m[0m[90m setting single nested subdoc with custom date types and getters/setters (gh-7601)[0m
2025-04-11T19:23:17.2064259Z   [32m  [32m✔[39m[0m[90m get() and set() underneath alias (gh-7592)[0m
2025-04-11T19:23:17.2130654Z   [32m  [32m✔[39m[0m[90m get() with getters: false (gh-7233)[0m
2025-04-11T19:23:17.2243394Z   [32m  [32m✔[39m[0m[90m overwriting single nested (gh-7660)[0m
2025-04-11T19:23:17.2354298Z   [32m  [32m✔[39m[0m[90m setting path to non-POJO object (gh-7639)[0m
2025-04-11T19:23:17.2457710Z   [32m  [32m✔[39m[0m[90m supports setting date properties with strict: false (gh-7907)[0m
2025-04-11T19:23:17.2700920Z   [32m  [32m✔[39m[0m[90m supports setting values to undefined with strict: false (gh-15192)[0m
2025-04-11T19:23:17.2793190Z   [32m  [32m✔[39m[0m[90m handles .set() on doc array within embedded discriminator (gh-7656)[0m
2025-04-11T19:23:17.2909049Z   [32m  [32m✔[39m[0m[90m $isEmpty() (gh-5369)[0m
2025-04-11T19:23:17.3027532Z   [32m  [32m✔[39m[0m[90m push() onto discriminator doc array (gh-7704)[0m
2025-04-11T19:23:17.3435162Z   [32m  [32m✔[39m[0m[90m doesnt call getter when saving (gh-7719)[0m
2025-04-11T19:23:17.3501156Z   [32m  [32m✔[39m[0m[90m skips malformed validators property (gh-7720)[0m
2025-04-11T19:23:17.3759242Z   [32m  [32m✔[39m[0m[90m nested set on subdocs works (gh-7748)[0m
2025-04-11T19:23:17.3927267Z   [32m  [32m✔[39m[0m[90m does not convert array to object with strict: false (gh-7733)[0m
2025-04-11T19:23:17.4105972Z   [32m  [32m✔[39m[0m[90m does not crash with array property named "undefined" (gh-7756)[0m
2025-04-11T19:23:17.4280661Z   [32m  [32m✔[39m[0m[90m fires pre save hooks on nested child schemas (gh-7792)[0m
2025-04-11T19:23:17.4352294Z   [32m  [32m✔[39m[0m[90m takes message from async custom validator promise rejection (gh-4913)[0m
2025-04-11T19:23:17.4534360Z   [32m  [32m✔[39m[0m[90m handles nested properties named `schema` (gh-7831)[0m
2025-04-11T19:23:17.4704918Z   [32m  [32m✔[39m[0m[90m handles nested properties named `on` (gh-11656)[0m
2025-04-11T19:23:17.4784027Z   [32m  [32m✔[39m[0m[90m copies virtuals from array subdocs when casting array of docs with same schema (gh-7898)[0m
2025-04-11T19:23:17.5026134Z   [32m  [32m✔[39m[0m[90m consistent post order traversal for array subdocs (gh-7929)[0m
2025-04-11T19:23:17.5437411Z   [32m  [32m✔[39m[0m[90m respects projection for getters (gh-7940)[0m
2025-04-11T19:23:17.5613093Z   [32m  [32m✔[39m[0m[90m loads doc with a `once` property successfully (gh-7958)[0m
2025-04-11T19:23:17.5780027Z   [32m  [32m✔[39m[0m[90m caster that converts to Number class works (gh-8150)[0m
2025-04-11T19:23:17.5948753Z   [32m  [32m✔[39m[0m[90m handles objectids and decimals with strict: false (gh-7973)[0m
2025-04-11T19:23:17.6026438Z   [32m  [32m✔[39m[0m[90m allows enum on array of array of strings (gh-7926)[0m
2025-04-11T19:23:17.6301431Z   [32m  [32m✔[39m[0m[90m allows saving an unchanged document if required populated path is null (gh-8018)[0m
2025-04-11T19:23:17.6373745Z   [32m  [32m✔[39m[0m[90m only calls validator once on mixed validator (gh-8067)[0m
2025-04-11T19:23:17.6482498Z   [32m  [32m✔[39m[0m[90m only calls validator once on nested mixed validator (gh-8117)[0m
2025-04-11T19:23:17.6755334Z   [32m  [32m✔[39m[0m[90m handles populate() with custom type that does not cast to doc (gh-8062)[0m
2025-04-11T19:23:17.6829295Z   [32m  [32m✔[39m[0m[90m can inspect() on a document array (gh-8037)[0m
2025-04-11T19:23:17.7133598Z   [32m  [32m✔[39m[0m[90m always passes unpopulated paths to validators (gh-8042)[0m
2025-04-11T19:23:17.7322162Z   [32m  [32m✔[39m[0m[90m set() merge option with single nested (gh-8201)[0m
2025-04-11T19:23:17.7393935Z   [32m  [32m✔[39m[0m[90m set() merge option with double nested[0m
2025-04-11T19:23:17.7611672Z   [32m  [32m✔[39m[0m[90m setting single nested subdoc with timestamps (gh-8251)[0m
2025-04-11T19:23:17.7788827Z   [32m  [32m✔[39m[0m[90m passing an object with toBSON() into `save()` (gh-8299)[0m
2025-04-11T19:23:17.7862468Z   [32m  [32m✔[39m[0m[90m handles getter setting virtual on manually populated doc when calling toJSON (gh-8295)[0m
2025-04-11T19:23:17.8023992Z   [32m  [32m✔[39m[0m[90m enum validator for number (gh-8139)[0m
2025-04-11T19:23:17.8128132Z   [32m  [32m✔[39m[0m[90m enum object syntax for number (gh-10648) (gh-8139)[0m
2025-04-11T19:23:17.8239660Z   [32m  [32m✔[39m[0m[90m support `pathsToValidate()` option for `validate()` (gh-7587)[0m
2025-04-11T19:23:17.8459717Z   [32m  [32m✔[39m[0m[90m array push with $position (gh-14244) (gh-4322)[0m
2025-04-11T19:23:17.8530922Z   [32m  [32m✔[39m[0m[90m setting a path to a single nested document should update the single nested doc parent (gh-8400)[0m
2025-04-11T19:23:17.8810679Z   [32m  [32m✔[39m[0m[90m setting an array to an array with some populated documents depopulates the whole array (gh-8443)[0m
2025-04-11T19:23:17.8887257Z   [32m  [32m✔[39m[0m[90m handles errors with name set to "ValidationError" (gh-8466)[0m
2025-04-11T19:23:17.8994877Z   [32m  [32m✔[39m[0m[90m throws an error if running validate() multiple times in parallel (gh-8468)[0m
2025-04-11T19:23:17.9230841Z   [32m  [32m✔[39m[0m[90m avoids parallel validate error when validating nested path with double nested subdocs (gh-8486)[0m
2025-04-11T19:23:17.9301150Z   [32m  [32m✔[39m[0m[90m supports function for date min/max validator error (gh-8512)[0m
2025-04-11T19:23:17.9510442Z   [32m  [32m✔[39m[0m[90m sets parent and ownerDocument correctly with document array default (gh-8509)[0m
2025-04-11T19:23:17.9707556Z   [32m  [32m✔[39m[0m[90m doesnt add `null` if property is undefined with minimize false (gh-8504)[0m
2025-04-11T19:23:17.9780705Z   [32m  [32m✔[39m[0m[90m creates document array defaults in forward order, not reverse (gh-8514)[0m
2025-04-11T19:23:17.9897520Z   [32m  [32m✔[39m[0m[90m can call subdocument validate multiple times in parallel (gh-8539)[0m
2025-04-11T19:23:17.9998185Z   [32m  [32m✔[39m[0m[90m sets `Document#op` when calling `validate()` (gh-8439)[0m
2025-04-11T19:23:18.0124094Z   [32m  [32m✔[39m[0m[90m schema-level transform (gh-8403)[0m
2025-04-11T19:23:18.0226558Z   [32m  [32m✔[39m[0m[90m transforms nested paths (gh-9543)[0m
2025-04-11T19:23:18.0485462Z   [32m  [32m✔[39m[0m[90m handles setting numeric paths with single nested subdocs (gh-8583)[0m
2025-04-11T19:23:18.0557234Z   [32m  [32m✔[39m[0m[90m setting nested array path to non-nested array wraps values top-down (gh-8544)[0m
2025-04-11T19:23:18.0658612Z   [32m  [32m✔[39m[0m[90m doesnt wrap empty nested array with insufficient depth[0m
2025-04-11T19:23:18.0774500Z   [32m  [32m✔[39m[0m[90m doesnt wipe out nested keys when setting nested key to empty object with minimize (gh-8565)[0m
2025-04-11T19:23:18.0942922Z   [32m  [32m✔[39m[0m[90m allows calling `validate()` in post validate hook without causing parallel validation error (gh-8597)[0m
2025-04-11T19:23:18.1188794Z   [32m  [32m✔[39m[0m[90m sets defaults when setting single nested subdoc (gh-8603)[0m
2025-04-11T19:23:18.1261463Z   [32m  [32m✔[39m[0m[90m handles validating single nested paths when specified in `pathsToValidate` (gh-8626)[0m
2025-04-11T19:23:18.1325470Z   [32m  [32m✔[39m[0m[90m copies immutable fields when constructing new doc from old doc (gh-8642)[0m
2025-04-11T19:23:18.1542947Z   [32m  [32m✔[39m[0m[90m can save nested array after setting (gh-8689)[0m
2025-04-11T19:23:18.1617946Z   [32m  [32m✔[39m[0m[90m handles validator errors on subdoc paths (gh-5226)[0m
2025-04-11T19:23:18.1731642Z   [32m  [32m✔[39m[0m[90m reports array cast error with index (gh-8888)[0m
2025-04-11T19:23:18.1897319Z   [32m  [32m✔[39m[0m[90m sets defaults if setting nested path to empty object with minimize false (gh-8829)[0m
2025-04-11T19:23:18.1967169Z   [32m  [32m✔[39m[0m[90m clears cast errors when setting an array subpath (gh-9080)[0m
2025-04-11T19:23:18.2200864Z   [32m  [32m✔[39m[0m[90m saves successfully if you splice() a sliced array (gh-9011)[0m
2025-04-11T19:23:18.2398950Z   [32m  [32m✔[39m[0m[90m handles modifying a subpath of a nested array of documents (gh-8926)[0m
2025-04-11T19:23:18.2588223Z   [32m  [32m✔[39m[0m[90m Document#save accepts `timestamps` option (gh-8947) for update[0m
2025-04-11T19:23:18.2755215Z   [32m  [32m✔[39m[0m[90m Document#save accepts `timestamps` option (gh-8947) on inserting a new document[0m
2025-04-11T19:23:18.2915032Z   [32m  [32m✔[39m[0m[90m Sets default when passing undefined as value for a key in a nested subdoc (gh-12102) (gh-9039)[0m
2025-04-11T19:23:18.2980521Z   [32m  [32m✔[39m[0m[90m allows accessing $locals when initializing (gh-9098)[0m
2025-04-11T19:23:18.3088611Z   [32m  [32m✔[39m[0m[90m supports skipping defaults on a document (gh-8271)[0m
2025-04-11T19:23:18.3197620Z   [32m  [32m✔[39m[0m[90m throws an error when `transform` returns a promise (gh-9163)[0m
2025-04-11T19:23:18.3416859Z   [32m  [32m✔[39m[0m[90m uses strict equality when checking mixed paths for modifications (gh-9165)[0m
2025-04-11T19:23:18.3485614Z   [32m  [32m✔[39m[0m[90m supports `useProjection` option for `toObject()` (gh-9118)[0m
2025-04-11T19:23:18.3716031Z   [32m  [32m✔[39m[0m[90m clears out priorDoc after overwriting single nested subdoc (gh-9208)[0m
2025-04-11T19:23:18.3901510Z   [32m  [32m✔[39m[0m[90m handles immutable properties underneath single nested subdocs when overwriting (gh-9281)[0m
2025-04-11T19:23:18.4070063Z   [32m  [32m✔[39m[0m[90m allows removing boolean key by setting it to `undefined` (gh-9275)[0m
2025-04-11T19:23:18.4340958Z   [32m  [32m✔[39m[0m[90m keeps manually populated paths when setting a nested path to itself (gh-9293)[0m
2025-04-11T19:23:18.4522732Z   [32m  [32m✔[39m[0m[90m doesnt wipe out nested paths when setting a nested path to itself (gh-9313)[0m
2025-04-11T19:23:18.4715854Z   [32m  [32m✔[39m[0m[90m allows saving after setting document array to itself (gh-9266)[0m
2025-04-11T19:23:18.4784221Z   [32m  [32m✔[39m[0m[90m allows accessing document values from function default on array (gh-9351) (gh-6155)[0m
2025-04-11T19:23:18.5019859Z   [32m  [32m✔[39m[0m[90m handles pulling array subdocs when _id is an alias (gh-9319)[0m
2025-04-11T19:23:18.5083168Z   [32m  [32m✔[39m[0m[90m allows setting nested path to instance of model (gh-9392)[0m
2025-04-11T19:23:18.5325251Z   [32m  [32m✔[39m[0m[90m unmarks modified if setting a value to the same value as it was previously (gh-9396)[0m
2025-04-11T19:23:18.5505225Z   [32m  [32m✔[39m[0m[90m unmarks modified if setting a value to the same subdoc as it was previously (gh-9396)[0m
2025-04-11T19:23:18.5690992Z   [32m  [32m✔[39m[0m[90m does not unmark modified if there is no initial value (gh-9396)[0m
2025-04-11T19:23:18.5913100Z   [32m  [32m✔[39m[0m[90m correctly tracks saved state for deeply nested objects (gh-10773) (gh-9396)[0m
2025-04-11T19:23:18.6009259Z   [32m  [32m✔[39m[0m[90m marks path as errored if default function throws (gh-9408)[0m
2025-04-11T19:23:18.6115100Z   [32m  [32m✔[39m[0m[90m passes subdoc with initial values set to default function when init-ing (gh-9408)[0m
2025-04-11T19:23:18.6226821Z   [32m  [32m✔[39m[0m[90m passes document as an argument for `required` function in schema definition (gh-9433)[0m
2025-04-11T19:23:18.6334048Z   [32m  [32m✔[39m[0m[90m works with path named isSelected (gh-9438)[0m
2025-04-11T19:23:18.6444444Z   [32m  [32m✔[39m[0m[90m init tracks cast error reason (gh-9448)[0m
2025-04-11T19:23:18.6555495Z   [32m  [32m✔[39m[0m[90m correctly handles setting nested path underneath single nested subdocs (gh-9459)[0m
2025-04-11T19:23:18.6659034Z   [32m  [32m✔[39m[0m[90m $isValid() with space-delimited and array syntax (gh-9474)[0m
2025-04-11T19:23:18.6887336Z   [32m  [32m✔[39m[0m[90m avoids overwriting array subdocument when setting dotted path that is not selected (gh-9427)[0m
2025-04-11T19:23:18.7067992Z   [32m  [32m✔[39m[0m[90m ignore getters when diffing objects for change tracking (gh-9501)[0m
2025-04-11T19:23:18.7294117Z   [32m  [32m✔[39m[0m[90m allows defining middleware for all document hooks using regexp (gh-9190)[0m
2025-04-11T19:23:18.7518583Z   [32m  [32m✔[39m[0m[90m correctly handles setting nested props to other nested props (gh-9519)[0m
2025-04-11T19:23:18.7586301Z   [32m  [32m✔[39m[0m[90m sets fields after an undefined field (gh-9585)[0m
2025-04-11T19:23:18.7688763Z   [32m  [32m✔[39m[0m[90m passes document to `default` functions (gh-9633)[0m
2025-04-11T19:23:18.7795610Z   [32m  [32m✔[39m[0m[90m handles pre hook throwing a sync error (gh-9659)[0m
2025-04-11T19:23:18.7887597Z   [32m  [32m✔[39m[0m[90m returns undefined rather than entire object when calling `get()` with empty string (gh-9681)[0m
2025-04-11T19:23:18.8129979Z   [32m  [32m✔[39m[0m[90m keeps atomics when assigning array to filtered array (gh-9651)[0m
2025-04-11T19:23:18.8197058Z   [32m  [32m✔[39m[0m[90m does not pass doc to ObjectId or Date.now (gh-9633) (gh-9636)[0m
2025-04-11T19:23:18.8475940Z   [32m  [32m✔[39m[0m[90m supports getting a list of populated docs (gh-9702)[0m
2025-04-11T19:23:18.8702159Z   [32m  [32m✔[39m[0m[90m with virtual populate (gh-10148)[0m
2025-04-11T19:23:18.8888829Z   [32m  [32m✔[39m[0m[90m handles paths named `db` (gh-9798)[0m
2025-04-11T19:23:18.9085012Z   [32m  [32m✔[39m[0m[90m handles paths named `schema` gh-8798[0m
2025-04-11T19:23:18.9287363Z   [32m  [32m✔[39m[0m[90m handles nested paths named `schema` gh-8798[0m
2025-04-11T19:23:18.9542372Z   [32m  [32m✔[39m[0m[90m object setters will be applied for each object in array after populate (gh-9838)[0m
2025-04-11T19:23:18.9723672Z   [32m  [32m✔[39m[0m[90m gh9884[0m
2025-04-11T19:23:18.9891701Z   [32m  [32m✔[39m[0m[90m Makes sure pre deleteOne hook is executed (gh-9885)[0m
2025-04-11T19:23:19.0078170Z   [32m  [32m✔[39m[0m[90m gh9880[0m
2025-04-11T19:23:19.0282785Z   [32m  [32m✔[39m[0m[90m handles directly setting embedded document array element with projection (gh-9909)[0m
2025-04-11T19:23:19.0521820Z   [32m  [32m✔[39m[0m[90m toObject() uses child schema `flattenMaps` option by default (gh-9995)[0m
2025-04-11T19:23:19.0693514Z   [32m  [32m✔[39m[0m[90m does not double validate paths under mixed objects (gh-10141)[0m
2025-04-11T19:23:19.0894119Z   [32m  [32m✔[39m[0m[90m clears child document modified when setting map path underneath single nested (gh-10295)[0m
2025-04-11T19:23:19.1077941Z   [32m  [32m✔[39m[0m[90m avoids infinite recursion when setting single nested subdoc to array (gh-10351)[0m
2025-04-11T19:23:19.1150840Z   [32m  [32m✔[39m[0m[90m skips recursive merging (gh-9121)[0m
2025-04-11T19:23:19.1214267Z   [32m  [32m✔[39m[0m[90m does not pull non-schema paths from parent documents into nested paths (gh-10449)[0m
2025-04-11T19:23:19.1427876Z   [32m  [32m✔[39m[0m[90m sets properties in the order they are defined in the schema (gh-4665)[0m
2025-04-11T19:23:19.1715525Z   [32m  [32m✔[39m[0m[90m depopulate all should depopulate nested array population (gh-10592)[0m
2025-04-11T19:23:19.1896693Z   [32m  [32m✔[39m[0m[90m should allow dashes in the path name (gh-10677)[0m
2025-04-11T19:23:19.1969154Z   [32m  [32m✔[39m[0m[90m inits non-schema values if strict is false (gh-10828)[0m
2025-04-11T19:23:19.2082501Z   [32m  [32m✔[39m[0m[90m avoids depopulating when setting array of subdocs from different doc (gh-10819)[0m
2025-04-11T19:23:19.2349551Z   [32m  [32m✔[39m[0m[90m allows validating doc again if pre validate errors out (gh-10830)[0m
2025-04-11T19:23:19.2417138Z   [32m  [32m✔[39m[0m[90m ensures that doc.ownerDocument() and doc.parent() by default return this on the root document (gh-10884)[0m
2025-04-11T19:23:19.2532559Z   [32m  [32m✔[39m[0m[90m catches errors in `required` functions (gh-10968)[0m
2025-04-11T19:23:19.2771879Z   [32m  [32m✔[39m[0m[90m does not allow overwriting schema methods with strict: false (gh-11001)[0m
2025-04-11T19:23:19.2868426Z   [32m  [32m✔[39m[0m[90m allows setting nested to instance of document (gh-11011)[0m
2025-04-11T19:23:19.3131348Z   [32m  [32m✔[39m[0m[90m cleans modified paths on deeply nested subdocuments (gh-11060)[0m
2025-04-11T19:23:19.3362470Z   [32m  [32m✔[39m[0m[90m can manually populate subdocument refs (gh-10856)[0m
2025-04-11T19:23:19.3568007Z   [32m  [32m✔[39m[0m[90m can manually populate subdocument refs in `create()` (gh-10856)[0m
2025-04-11T19:23:19.3847117Z   [32m  [32m✔[39m[0m[90m populating subdocument refs underneath maps throws (gh-12494) (gh-10856)[0m
2025-04-11T19:23:19.4014431Z   [32m  [32m✔[39m[0m[90m handles save with undefined nested doc under subdoc (gh-11110)[0m
2025-04-11T19:23:19.4191079Z   [32m  [32m✔[39m[0m[90m correctly handles modifying array subdoc after setting array subdoc to same value (gh-11172)[0m
2025-04-11T19:23:19.4256515Z   [32m  [32m✔[39m[0m[90m handles `String` with `type` (gh-11199)[0m
2025-04-11T19:23:19.4807317Z   [32m  [32m✔[39m[0m[90m applies subdocument defaults when projecting dotted subdocument fields[0m[33m (45ms)[0m
2025-04-11T19:23:19.5001394Z   [32m  [32m✔[39m[0m[90m handles initing nested properties in non-strict documents (gh-11309)[0m
2025-04-11T19:23:19.5172920Z   [32m  [32m✔[39m[0m[90m saves changes when setting a nested path to itself (gh-11395)[0m
2025-04-11T19:23:19.5239231Z   [32m  [32m✔[39m[0m[90m avoids setting nested properties on top-level document when init-ing with strict: false (gh-11526) (gh-11309)[0m
2025-04-11T19:23:19.5449895Z   [32m  [32m✔[39m[0m[90m handles deeply nested subdocuments when getting paths to validate (gh-11501)[0m
2025-04-11T19:23:19.5527344Z   [32m  [32m✔[39m[0m[90m handles casting array of spread documents (gh-11522)[0m
2025-04-11T19:23:19.5739724Z   [32m  [32m✔[39m[0m[90m avoids setting modified on subdocument defaults (gh-11528)[0m
2025-04-11T19:23:19.5902691Z   [32m  [32m✔[39m[0m[90m works when passing dot notation to mixed property (gh-1946)[0m
2025-04-11T19:23:19.6075265Z   [32m  [32m✔[39m[0m[90m correctly validates deeply nested document arrays (gh-11564)[0m
2025-04-11T19:23:19.6255283Z   [32m  [32m✔[39m[0m[90m reruns validation when modifying a document array path under a nested path after save (gh-11672)[0m
2025-04-11T19:23:19.6440883Z   [32m  [32m✔[39m[0m[90m avoids setting nested paths to null when they are set to `undefined` (gh-11723)[0m
2025-04-11T19:23:19.6639336Z   [32m  [32m✔[39m[0m[90m cleans modified subpaths when setting nested path under array to null when subpaths are modified (gh-11764)[0m
2025-04-11T19:23:19.6921980Z   [32m  [32m✔[39m[0m[90m avoids manually populating document that is manually populated in another doc with different unpopulatedValue (gh-11442) (gh-11008)[0m
2025-04-11T19:23:19.6999943Z   [32m  [32m✔[39m[0m[90m $getAllSubdocs gets document arrays underneath a nested path (gh-11917)[0m
2025-04-11T19:23:19.7115991Z   [32m  [32m✔[39m[0m[90m handles validation errors on deeply nested subdocuments underneath a nested path (gh-12021)[0m
2025-04-11T19:23:19.7316247Z   [32m  [32m✔[39m[0m[90m supports virtuals named `isValid` (gh-12124) (gh-6262)[0m
2025-04-11T19:23:19.7471543Z   [32m  [32m✔[39m[0m[90m handles maps when applying defaults to nested paths (gh-12220)[0m
2025-04-11T19:23:19.7617265Z   [32m  [32m✔[39m[0m[90m correct context for default functions in subdocuments with init (gh-12328)[0m
2025-04-11T19:23:19.7861144Z   [32m  [32m✔[39m[0m[90m applies defaults to pushed subdocs after initing document (gh-12515)[0m
2025-04-11T19:23:19.8046946Z   [32m  [32m✔[39m[0m[90m If the field does not exist, $inc should create it and set is value to the specified one (gh-12435)[0m
2025-04-11T19:23:19.8285417Z   [32m  [32m✔[39m[0m[90m avoids overwriting array if saving with no changes with array deselected (gh-12414)[0m
2025-04-11T19:23:19.8479780Z   [32m  [32m✔[39m[0m[90m $clone() (gh-11849)[0m
2025-04-11T19:23:19.8667037Z   [32m  [32m✔[39m[0m[90m $clone() with single nested and doc array (gh-14353) (gh-11849)[0m
2025-04-11T19:23:19.8838464Z   [32m  [32m✔[39m[0m[90m can create document with document array and top-level key named `schema` (gh-12480)[0m
2025-04-11T19:23:19.9058640Z   [32m  [32m✔[39m[0m[90m handles setting array to itself after saving and pushing a new value (gh-12656)[0m
2025-04-11T19:23:19.9227553Z   [32m  [32m✔[39m[0m[90m should not trigger isModified when setting a nested boolean to the same value as previously  (gh-12992)[0m
2025-04-11T19:23:19.9391219Z   [32m  [32m✔[39m[0m[90m saves single nested subdoc defaults (gh-12905)[0m
2025-04-11T19:23:19.9496588Z   [32m  [32m✔[39m[0m[90m $shift() triggers $pop[0m
2025-04-11T19:23:19.9568802Z   [32m  [32m✔[39m[0m[90m avoids setting array default if document array projected out by sibling projection (gh-13003)[0m
2025-04-11T19:23:19.9805404Z   [32m  [32m✔[39m[0m[90m avoids overwriting array with sibling projection (gh-13043)[0m
2025-04-11T19:23:19.9973945Z   [32m  [32m✔[39m[0m[90m can set() from top-level on nested schema with strict: false (gh-13327)[0m
2025-04-11T19:23:20.0148091Z   [32m  [32m✔[39m[0m[90m can set() from top-level on path underneath map of mixed (gh-13327)[0m
2025-04-11T19:23:20.0313122Z   [32m  [32m✔[39m[0m[90m should allow storing keys with dots in name in mixed under nested (gh-13530)[0m
2025-04-11T19:23:20.0479014Z   [32m  [32m✔[39m[0m[90m cleans up all array subdocs modified state on save (gh-13582)[0m
2025-04-11T19:23:20.0671166Z   [32m  [32m✔[39m[0m[90m cleans up all nested subdocs modified state on save (gh-13609)[0m
2025-04-11T19:23:20.0868276Z   [32m  [32m✔[39m[0m[90m avoids prototype pollution on init[0m
2025-04-11T19:23:20.1052907Z   [32m  [32m✔[39m[0m[90m does not modify array when calling getters (gh-13748)[0m
2025-04-11T19:23:20.1244409Z   [32m  [32m✔[39m[0m[90m sets defaults on subdocs with subdoc projection (gh-13720)[0m
2025-04-11T19:23:20.1424336Z   [32m  [32m✔[39m[0m[90m handles bigint (gh-13791)[0m
2025-04-11T19:23:20.1618060Z   [32m  [32m✔[39m[0m[90m should allow null values in list in self assignment (gh-13859)[0m
2025-04-11T19:23:20.1816727Z   [32m  [32m✔[39m[0m[90m bulkSave() picks up changes in pre("save") middleware (gh-13799)[0m
2025-04-11T19:23:20.2000369Z   [32m  [32m✔[39m[0m[90m bulkSave() allows skipping validation with validateBeforeSave (gh-15156)[0m
2025-04-11T19:23:20.2075802Z   [32m  [32m✔[39m[0m[90m handles default embedded discriminator values (gh-13835)[0m
2025-04-11T19:23:20.2292613Z   [32m  [32m✔[39m[0m[90m avoids saving changes to deselected paths (gh-13145) (gh-13062)[0m
2025-04-11T19:23:20.2496151Z   [32m  [32m✔[39m[0m[90m fires pre validate hooks on 4 level single nested subdocs (gh-13876)[0m
2025-04-11T19:23:20.2714640Z   [32m  [32m✔[39m[0m[90m fires pre validate hooks on 5 level deep single nested subdoc when modifying after save() (gh-14591)[0m
2025-04-11T19:23:20.2780504Z   [32m  [32m✔[39m[0m[90m returns constructor if using $model() with no args (gh-13878)[0m
2025-04-11T19:23:20.3029274Z   [32m  [32m✔[39m[0m[90m avoids creating separate subpaths entry for every element in array (gh-13874)[0m
2025-04-11T19:23:20.3224432Z   [32m  [32m✔[39m[0m[90m handles embedded discriminators defined using Schema.prototype.discriminator (gh-13898)[0m
2025-04-11T19:23:20.3400403Z   [32m  [32m✔[39m[0m[90m handles embedded discriminators defined using Schema.prototype.discriminator after defining schema (gh-14109) (gh-13898)[0m
2025-04-11T19:23:20.3583005Z   [32m  [32m✔[39m[0m[90m handles embedded discriminators on nested path defined using Schema.prototype.discriminator (gh-14109) (gh-13898)[0m
2025-04-11T19:23:20.3748975Z   [32m  [32m✔[39m[0m[90m handles middleware on embedded discriminators on nested path defined using Schema.prototype.discriminator (gh-14961)[0m
2025-04-11T19:23:20.3990324Z   [32m  [32m✔[39m[0m[90m handles reusing schema with embedded discriminators defined using Schema.prototype.discriminator (gh-14162)[0m
2025-04-11T19:23:20.4187507Z   [32m  [32m✔[39m[0m[90m handles embedded recursive discriminators on nested path defined using Schema.prototype.discriminator (gh-14245)[0m
2025-04-11T19:23:20.4359671Z   [32m  [32m✔[39m[0m[90m can use `collection` as schema name (gh-13956)[0m
2025-04-11T19:23:20.4520077Z   [32m  [32m✔[39m[0m[90m avoids adding nested paths to markModified() output if adding a new field (gh-14024)[0m
2025-04-11T19:23:20.4697645Z   [32m  [32m✔[39m[0m[90m should allow null values in list in self assignment (gh-14172) (gh-13859)[0m
2025-04-11T19:23:20.4878628Z   [32m  [32m✔[39m[0m[90m avoids overwriting dotted paths in mixed path underneath nested path (gh-14178)[0m
2025-04-11T19:23:20.4949608Z   [32m  [32m✔[39m[0m[90m handles setting nested path to null (gh-14205)[0m
2025-04-11T19:23:20.5074639Z   [32m  [32m✔[39m[0m[90m handles setting nested path to undefined (gh-14205)[0m
2025-04-11T19:23:20.5277279Z   [32m  [32m✔[39m[0m[90m handles setting nested path to spread doc with extra properties (gh-14269)[0m
2025-04-11T19:23:20.5363150Z   [32m  [32m✔[39m[0m[90m includes virtuals in doc array toString() output if virtuals enabled on toObject (gh-14315)[0m
2025-04-11T19:23:20.5633208Z   [32m  [32m✔[39m[0m[90m minimizes when updating existing documents (gh-13782)[0m
2025-04-11T19:23:20.5835011Z   [32m  [32m✔[39m[0m[90m saves when setting subdocument to empty object (gh-14420) (gh-13782)[0m
2025-04-11T19:23:20.6022563Z   [32m  [32m✔[39m[0m[90m validate supports validateAllPaths[0m
2025-04-11T19:23:20.6229959Z   [32m  [32m✔[39m[0m[90m validateSync() supports validateAllPaths[0m
2025-04-11T19:23:20.6424882Z   [32m  [32m✔[39m[0m[90m minimize unsets property rather than setting to null (gh-14445)[0m
2025-04-11T19:23:20.6719169Z   [32m  [32m✔[39m[0m[90m avoids depopulating populated subdocs underneath document arrays when copying to another document (gh-14418)[0m
2025-04-11T19:23:20.6934790Z   [32m  [32m✔[39m[0m[90m handles virtuals that are stored as objects but getter returns string with toJSON (gh-14446)[0m
2025-04-11T19:23:20.7015470Z   [32m  [32m✔[39m[0m[90m isDirectModified on paths underneath direct modified subdoc (gh-14502)[0m
2025-04-11T19:23:20.7276739Z   [32m  [32m✔[39m[0m[90m avoids leaving subdoc _id in default state when setting subdocument to same value (gh-14722)[0m
2025-04-11T19:23:20.7457585Z   [32m  [32m✔[39m[0m[90m $clearModifiedPaths (gh-14268)[0m
2025-04-11T19:23:20.7651036Z   [32m  [32m✔[39m[0m[90m $createModifiedPathsSnapshot and $restoreModifiedPathsSnapshot (gh-14268)[0m
2025-04-11T19:23:20.7839791Z   [32m  [32m✔[39m[0m[90m post deleteOne hook (gh-9885)[0m
2025-04-11T19:23:20.7916264Z   [32m  [32m✔[39m[0m[90m applies virtuals to subschemas if top-level schema has virtuals: true (gh-14771)[0m
2025-04-11T19:23:20.8129039Z   [32m  [32m✔[39m[0m[90m calls required with correct context on single nested properties (gh-14788)[0m
2025-04-11T19:23:20.8380902Z   [32m  [32m✔[39m[0m[90m applies toObject() getters to 3 level deep subdocuments (gh-14840) (gh-14835)[0m
2025-04-11T19:23:21.0847122Z   [32m  [32m✔[39m[0m[90m handles inserting and saving large document with 10-level deep subdocs (gh-14897)[0m[31m (240ms)[0m
2025-04-11T19:23:21.1037402Z   [32m  [32m✔[39m[0m[90m avoids flattening objectids on insertMany (gh-14935)[0m
2025-04-11T19:23:21.1197729Z   [32m  [32m✔[39m[0m[90m handles buffers stored as EJSON POJO (gh-14911)[0m
2025-04-11T19:23:21.1389930Z   [32m  [32m✔[39m[0m[90m clears modified subpaths when setting deeply nested subdoc to null (gh-14952)[0m
2025-04-11T19:23:21.1562752Z   [32m  [32m✔[39m[0m[90m handles custom error message for duplicate key errors (gh-12844)[0m
2025-04-11T19:23:21.1636142Z   [32m  [32m✔[39m[0m[90m supports global transforms per schematype (gh-15084)[0m
2025-04-11T19:23:21.1949181Z   [32m  [32m✔[39m[0m[90m supports schemaFieldsOnly option for toObject() (gh-15258)[0m
2025-04-11T19:23:21.2148507Z   [32m  [32m✔[39m[0m[90m supports schemaFieldsOnly on nested paths, subdocuments, and arrays (gh-15258)[0m
2025-04-11T19:23:21.8916334Z   [32m  [32m✔[39m[0m[90m handles undoReset() on deep recursive subdocuments (gh-15255)[0m[31m (671ms)[0m
2025-04-11T19:23:21.9163523Z   [32m  [32m✔[39m[0m[90m handles selected paths on root discriminator (gh-15308)[0m
2025-04-11T19:23:21.9338437Z   [32m  [32m✔[39m[0m[90m avoids double validating document arrays underneath single nested (gh-15335)[0m
2025-04-11T19:23:21.9378794Z [0m    constructor[0m
2025-04-11T19:23:21.9425115Z     [32m  [32m✔[39m[0m[90m supports passing in schema directly (gh-8237)[0m
2025-04-11T19:23:21.9484992Z [0m    deleteOne[0m
2025-04-11T19:23:21.9637990Z     [32m  [32m✔[39m[0m[90m deletes the document[0m
2025-04-11T19:23:21.9699341Z [0m    updateOne[0m
2025-04-11T19:23:21.9828035Z     [32m  [32m✔[39m[0m[90m updates the document[0m
2025-04-11T19:23:21.9911682Z     [32m  [32m✔[39m[0m[90m returns a query[0m
2025-04-11T19:23:22.0097518Z     [32m  [32m✔[39m[0m[90m middleware (gh-8262)[0m
2025-04-11T19:23:22.0157719Z [0m    replaceOne[0m
2025-04-11T19:23:22.0316596Z     [32m  [32m✔[39m[0m[90m replaces the document[0m
2025-04-11T19:23:22.0376771Z [0m    shortcut getters[0m
2025-04-11T19:23:22.0423458Z     [32m  [32m✔[39m[0m[90m return undefined for properties with a null/undefined parent object (gh-1326)[0m
2025-04-11T19:23:22.0512822Z     [32m  [32m✔[39m[0m[90m work[0m
2025-04-11T19:23:22.0571471Z [0m    toObject[0m
2025-04-11T19:23:22.0759136Z     [32m  [32m✔[39m[0m[90m does not apply toObject functions of subdocuments to root document[0m
2025-04-11T19:23:22.0852058Z     [32m  [32m✔[39m[0m[90m handles child schema transforms[0m
2025-04-11T19:23:22.1137721Z     [32m  [32m✔[39m[0m[90m doesnt clobber child schema options when called with no params (gh-2035)[0m
2025-04-11T19:23:22.1232973Z     [32m  [32m✔[39m[0m[90m respects child schemas minimize (gh-9405)[0m
2025-04-11T19:23:22.1511091Z     [32m  [32m✔[39m[0m[90m minimizes single nested subdocs (gh-11247)[0m
2025-04-11T19:23:22.1715101Z     [32m  [32m✔[39m[0m[90m does not minimize single nested subdocs if they are required (gh-14058) (gh-11247)[0m
2025-04-11T19:23:22.1808320Z     [32m  [32m✔[39m[0m[90m should propagate toObject to implicitly created schemas (gh-13599) (gh-13325)[0m
2025-04-11T19:23:22.1891563Z [0m    toJSON[0m
2025-04-11T19:23:22.1945788Z     [32m  [32m✔[39m[0m[90m toJSON options[0m
2025-04-11T19:23:22.2028715Z     [32m  [32m✔[39m[0m[90m jsonifying an object[0m
2025-04-11T19:23:22.2329344Z     [32m  [32m✔[39m[0m[90m jsonifying an object's populated items works (gh-1376)[0m
2025-04-11T19:23:22.2523920Z     [32m  [32m✔[39m[0m[90m jsonifying with undefined path (gh-11922)[0m
2025-04-11T19:23:22.2618238Z     [32m  [32m✔[39m[0m[90m should propagate toJSON to implicitly created schemas (gh-13599) (gh-13325)[0m
2025-04-11T19:23:22.2707272Z [0m    inspect[0m
2025-04-11T19:23:22.2837037Z     [32m  [32m✔[39m[0m[90m inspect inherits schema options (gh-4001)[0m
2025-04-11T19:23:22.3082847Z     [32m  [32m✔[39m[0m[90m does not apply transform to populated docs (gh-4213)[0m
2025-04-11T19:23:22.3179499Z     [32m  [32m✔[39m[0m[90m handles infinite recursion (gh-11756)[0m
2025-04-11T19:23:22.3500553Z     [32m  [32m✔[39m[0m[90m populate on nested path (gh-5703)[0m
2025-04-11T19:23:22.3563825Z [0m    #update[0m
2025-04-11T19:23:22.3574700Z     [36m  - returns a Query[0m
2025-04-11T19:23:22.3575741Z     [36m  - calling update on document should relay to its model (gh-794)[0m
2025-04-11T19:23:22.3585798Z [0m    Errors[0m
2025-04-11T19:23:22.3631816Z     [32m  [32m✔[39m[0m[90m MongooseErrors should be instances of Error (gh-209)[0m
2025-04-11T19:23:22.3724024Z     [32m  [32m✔[39m[0m[90m ValidationErrors should be instances of Error[0m
2025-04-11T19:23:22.3782013Z [0m    #validate[0m
2025-04-11T19:23:22.3962437Z     [32m  [32m✔[39m[0m[90m works (gh-891)[0m
2025-04-11T19:23:22.4056611Z     [32m  [32m✔[39m[0m[90m can return a promise[0m
2025-04-11T19:23:22.4171043Z     [32m  [32m✔[39m[0m[90m doesnt have stale cast errors (gh-2766)[0m
2025-04-11T19:23:22.4331345Z     [32m  [32m✔[39m[0m[90m cast errors persist across validate() calls (gh-2766)[0m
2025-04-11T19:23:22.4417036Z     [32m  [32m✔[39m[0m[90m returns a promise when there are no validators[0m
2025-04-11T19:23:22.4629727Z     [32m  [32m✔[39m[0m[90m validator should run only once gh-1743[0m
2025-04-11T19:23:22.4880285Z     [32m  [32m✔[39m[0m[90m validator should run only once per sub-doc gh-1743[0m
2025-04-11T19:23:22.4931869Z [0m      works on arrays[0m
2025-04-11T19:23:22.5086244Z       [32m  [32m✔[39m[0m[90m with required[0m
2025-04-11T19:23:22.5288981Z       [32m  [32m✔[39m[0m[90m with custom validator[0m
2025-04-11T19:23:22.5491202Z       [32m  [32m✔[39m[0m[90m with both required + custom validator[0m
2025-04-11T19:23:22.5575759Z [0m    #equals[0m
2025-04-11T19:23:22.5586599Z [0m      should work[0m
2025-04-11T19:23:22.5662118Z       [32m  [32m✔[39m[0m[90m with string _ids[0m
2025-04-11T19:23:22.5892539Z       [32m  [32m✔[39m[0m[90m with number _ids[0m
2025-04-11T19:23:22.5998046Z       [32m  [32m✔[39m[0m[90m with ObjectId _ids[0m
2025-04-11T19:23:22.6093599Z       [32m  [32m✔[39m[0m[90m with Buffer _ids[0m
2025-04-11T19:23:22.6198167Z       [32m  [32m✔[39m[0m[90m with _id disabled (gh-1687)[0m
2025-04-11T19:23:22.6280281Z [0m    setter[0m
2025-04-11T19:23:22.6327874Z     [32m  [32m✔[39m[0m[90m works with undefined (gh-1892)[0m
2025-04-11T19:23:22.6420792Z     [32m  [32m✔[39m[0m[90m passes priorVal (gh-8629)[0m
2025-04-11T19:23:22.6505475Z [0m      order[0m
2025-04-11T19:23:22.6561727Z       [32m  [32m✔[39m[0m[90m is applied correctly[0m
2025-04-11T19:23:22.6631748Z [0m      on nested paths[0m
2025-04-11T19:23:22.6643090Z [0m        using set(path, object)[0m
2025-04-11T19:23:22.6711077Z         [32m  [32m✔[39m[0m[90m overwrites the entire object[0m
2025-04-11T19:23:22.6840738Z         [32m  [32m✔[39m[0m[90m allows positional syntax on mixed nested paths (gh-6738)[0m
2025-04-11T19:23:22.6984544Z         [32m  [32m✔[39m[0m[90m gh-1954[0m
2025-04-11T19:23:22.7077201Z [0m        when overwriting with a document instance[0m
2025-04-11T19:23:22.7145219Z         [32m  [32m✔[39m[0m[90m does not cause StackOverflows (gh-1234)[0m
2025-04-11T19:23:22.7248782Z [0m    virtual[0m
2025-04-11T19:23:22.7299685Z     [32m  [32m✔[39m[0m[90m passes doc as third param for arrow functions (gh-4143)[0m
2025-04-11T19:23:22.7379944Z [0m      setter[0m
2025-04-11T19:23:22.7439820Z       [32m  [32m✔[39m[0m[90m works with objects[0m
2025-04-11T19:23:22.7563889Z       [32m  [32m✔[39m[0m[90m works with arrays[0m
2025-04-11T19:23:22.7676030Z       [32m  [32m✔[39m[0m[90m works with numbers[0m
2025-04-11T19:23:22.7807731Z       [32m  [32m✔[39m[0m[90m works with strings[0m
2025-04-11T19:23:22.7903450Z [0m    gh-2082[0m
2025-04-11T19:23:22.8090643Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:23:22.8141692Z [0m    gh-1933[0m
2025-04-11T19:23:22.8302625Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:23:22.8363714Z [0m    gh-1638[0m
2025-04-11T19:23:22.8562843Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:23:22.8626693Z [0m    gh-2434[0m
2025-04-11T19:23:22.8788211Z     [32m  [32m✔[39m[0m[90m will save the new value[0m
2025-04-11T19:23:22.8848943Z [0m    gh-8371[0m
2025-04-11T19:23:22.9048800Z     [32m  [32m✔[39m[0m[90m setting isNew to true makes save tries to insert a new document (gh-8371)[0m
2025-04-11T19:23:22.9284335Z     [32m  [32m✔[39m[0m[90m setting isNew to true throws an error when a document already exists (gh-8371)[0m
2025-04-11T19:23:22.9578383Z     [32m  [32m✔[39m[0m[90m saving a document with no changes, throws an error when document is not found[0m
2025-04-11T19:23:22.9832280Z     [32m  [32m✔[39m[0m[90m saving a document when version bump required, throws a VersionError when document is not found (gh-10974)[0m
2025-04-11T19:23:23.0101233Z     [32m  [32m✔[39m[0m[90m saving a document with changes, throws an error when document is not found[0m
2025-04-11T19:23:23.0163581Z [0m    bug fixes[0m
2025-04-11T19:23:23.0377600Z     [32m  [32m✔[39m[0m[90m applies toJSON transform correctly for populated docs (gh-2910) (gh-2990)[0m
2025-04-11T19:23:23.0583143Z     [32m  [32m✔[39m[0m[90m single nested schema transform with save() (gh-5807)[0m
2025-04-11T19:23:23.0675734Z     [32m  [32m✔[39m[0m[90m setters firing with objects on real paths (gh-2943)[0m
2025-04-11T19:23:23.0793589Z     [32m  [32m✔[39m[0m[90m set data from subdoc keys (gh-3346)[0m
2025-04-11T19:23:23.0911904Z     [32m  [32m✔[39m[0m[90m doesnt attempt to cast generic objects as strings (gh-3030)[0m
2025-04-11T19:23:23.1139520Z     [32m  [32m✔[39m[0m[90m single embedded schemas 1 (gh-2689)[0m
2025-04-11T19:23:23.1233731Z     [32m  [32m✔[39m[0m[90m single embedded schemas with validation (gh-2689)[0m
2025-04-11T19:23:23.1346563Z     [32m  [32m✔[39m[0m[90m single embedded parent() (gh-5134)[0m
2025-04-11T19:23:23.1576136Z     [32m  [32m✔[39m[0m[90m single embedded schemas with markmodified (gh-2689)[0m
2025-04-11T19:23:23.1778416Z     [32m  [32m✔[39m[0m[90m single embedded schemas + update validators (gh-2689)[0m
2025-04-11T19:23:23.2033110Z     [32m  [32m✔[39m[0m[90m single embedded schema update validators ignore _id (gh-6269)[0m
2025-04-11T19:23:23.2085903Z [0m      gh-2782[0m
2025-04-11T19:23:23.2150753Z       [32m  [32m✔[39m[0m[90m should set data from a sub doc[0m
2025-04-11T19:23:23.2284680Z [0m    error processing (gh-2284)[0m
2025-04-11T19:23:23.2338895Z     [32m  [32m✔[39m[0m[90m save errors[0m
2025-04-11T19:23:23.2452703Z     [32m  [32m✔[39m[0m[90m validate errors (gh-4885)[0m
2025-04-11T19:23:23.2673051Z     [32m  [32m✔[39m[0m[90m does not filter validation on unmodified paths when validateModifiedOnly not set (gh-7421)[0m
2025-04-11T19:23:23.2869154Z     [32m  [32m✔[39m[0m[90m filters out validation on unmodified paths when validateModifiedOnly set (gh-7421) (gh-9963)[0m
2025-04-11T19:23:23.3024857Z     [32m  [32m✔[39m[0m[90m does not filter validation on modified paths when validateModifiedOnly set (gh-7421)[0m
2025-04-11T19:23:23.3206191Z     [32m  [32m✔[39m[0m[90m validateModifiedOnly with pre existing validation error (gh-8091)[0m
2025-04-11T19:23:23.3392750Z     [32m  [32m✔[39m[0m[90m should use schema-level validateModifiedOnly option if not in options[0m
2025-04-11T19:23:23.3570691Z     [32m  [32m✔[39m[0m[90m handles non-errors[0m
2025-04-11T19:23:23.3770750Z     [32m  [32m✔[39m[0m[90m fully validates modified subdocs (gh-14677)[0m
2025-04-11T19:23:23.3987390Z     [32m  [32m✔[39m[0m[90m fully validates modified single nested subdocs (gh-14677)[0m
2025-04-11T19:23:23.4049527Z [0m    bug fixes[0m
2025-04-11T19:23:23.4298181Z     [32m  [32m✔[39m[0m[90m single embedded schemas with populate (gh-3501)[0m
2025-04-11T19:23:23.4390963Z     [32m  [32m✔[39m[0m[90m single embedded schemas with methods (gh-3534)[0m
2025-04-11T19:23:23.4645547Z     [32m  [32m✔[39m[0m[90m single embedded schemas with models (gh-3535)[0m
2025-04-11T19:23:23.4733695Z     [32m  [32m✔[39m[0m[90m single embedded schemas with indexes (gh-3594)[0m
2025-04-11T19:23:23.4919738Z     [32m  [32m✔[39m[0m[90m removing single embedded docs (gh-3596)[0m
2025-04-11T19:23:23.5122983Z     [32m  [32m✔[39m[0m[90m setting single embedded docs (gh-3601)[0m
2025-04-11T19:23:23.5309271Z     [32m  [32m✔[39m[0m[90m single embedded docs init obeys strict mode (gh-3642)[0m
2025-04-11T19:23:23.5490862Z     [32m  [32m✔[39m[0m[90m single embedded docs post hooks (gh-3679)[0m
2025-04-11T19:23:23.5685900Z     [32m  [32m✔[39m[0m[90m single embedded docs .set() (gh-3686)[0m
2025-04-11T19:23:23.5918011Z     [32m  [32m✔[39m[0m[90m single embedded docs with arrays pre hooks (gh-3680)[0m
2025-04-11T19:23:23.6019804Z     [32m  [32m✔[39m[0m[90m nested single embedded doc validation (gh-3702)[0m
2025-04-11T19:23:23.6130590Z     [32m  [32m✔[39m[0m[90m handles virtuals with dots correctly (gh-3618)[0m
2025-04-11T19:23:23.6336821Z     [32m  [32m✔[39m[0m[90m handles pushing with numeric keys (gh-3623)[0m
2025-04-11T19:23:23.6565957Z     [32m  [32m✔[39m[0m[90m handles 0 for numeric subdoc ids (gh-3776)[0m
2025-04-11T19:23:23.6661307Z     [32m  [32m✔[39m[0m[90m handles conflicting names (gh-3867)[0m
2025-04-11T19:23:23.6942670Z     [32m  [32m✔[39m[0m[90m populate with lean (gh-3873)[0m
2025-04-11T19:23:23.7139421Z     [32m  [32m✔[39m[0m[90m init single nested subdoc with select (gh-3880)[0m
2025-04-11T19:23:23.7341328Z     [32m  [32m✔[39m[0m[90m single nested subdoc isModified() (gh-3910)[0m
2025-04-11T19:23:23.7520471Z     [32m  [32m✔[39m[0m[90m pre and post as schema keys (gh-3902)[0m
2025-04-11T19:23:23.7781667Z     [32m  [32m✔[39m[0m[90m manual population and isNew (gh-3982)[0m
2025-04-11T19:23:23.8053629Z     [32m  [32m✔[39m[0m[90m manual populattion with ref function (gh-15138)[0m
2025-04-11T19:23:23.8292541Z     [32m  [32m✔[39m[0m[90m manual population with refPath (gh-7070)[0m
2025-04-11T19:23:23.8490492Z     [32m  [32m✔[39m[0m[90m doesnt skipId for single nested subdocs (gh-4008)[0m
2025-04-11T19:23:23.8680374Z     [32m  [32m✔[39m[0m[90m single embedded docs with $near (gh-4014)[0m
2025-04-11T19:23:23.8771275Z     [32m  [32m✔[39m[0m[90m skip validation if required returns false (gh-4094)[0m
2025-04-11T19:23:23.8979877Z     [32m  [32m✔[39m[0m[90m ability to overwrite array default (gh-4109)[0m
2025-04-11T19:23:23.9174501Z     [32m  [32m✔[39m[0m[90m can set array default to null (gh-14717)[0m
2025-04-11T19:23:23.9380665Z     [32m  [32m✔[39m[0m[90m validation works when setting array index (gh-3816)[0m
2025-04-11T19:23:23.9582747Z     [32m  [32m✔[39m[0m[90m validateSync works when setting array index nested (gh-5389)[0m
2025-04-11T19:23:23.9672523Z     [32m  [32m✔[39m[0m[90m single embedded with defaults have $parent (gh-4115)[0m
2025-04-11T19:23:23.9899215Z     [32m  [32m✔[39m[0m[90m removing parent doc calls deleteOne hooks on subdocs (gh-2348) (gh-4566)[0m
2025-04-11T19:23:24.0079620Z     [32m  [32m✔[39m[0m[90m set() empty obj unmodifies subpaths (gh-4182)[0m
2025-04-11T19:23:24.0265133Z     [32m  [32m✔[39m[0m[90m clears subpaths when removing single nested (gh-4216)[0m
2025-04-11T19:23:24.0468512Z     [32m  [32m✔[39m[0m[90m setting path to empty object works (gh-4218)[0m
2025-04-11T19:23:24.0663643Z     [32m  [32m✔[39m[0m[90m setting path to object with strict and no paths in the schema (gh-6436) (gh-4218)[0m
2025-04-11T19:23:24.0752873Z     [32m  [32m✔[39m[0m[90m minimize + empty object (gh-4337)[0m
2025-04-11T19:23:24.0979960Z     [32m  [32m✔[39m[0m[90m directModifiedPaths() (gh-7373)[0m
2025-04-11T19:23:24.1164682Z     [32m  [32m✔[39m[0m[90m single nested isNew (gh-4369)[0m
2025-04-11T19:23:24.1258138Z     [32m  [32m✔[39m[0m[90m deep default array values (gh-4540)[0m
2025-04-11T19:23:24.1477744Z     [32m  [32m✔[39m[0m[90m default values with subdoc array (gh-4390)[0m
2025-04-11T19:23:24.1577879Z     [32m  [32m✔[39m[0m[90m handles invalid dates (gh-4404)[0m
2025-04-11T19:23:24.1683701Z     [32m  [32m✔[39m[0m[90m setting array subpath (gh-4472)[0m
2025-04-11T19:23:24.1936412Z     [32m  [32m✔[39m[0m[90m ignore paths (gh-4480)[0m
2025-04-11T19:23:24.2176424Z     [32m  [32m✔[39m[0m[90m ignore subdocs paths (gh-4480) (gh-6152)[0m
2025-04-11T19:23:24.2376074Z     [32m  [32m✔[39m[0m[90m composite _ids (gh-4542)[0m
2025-04-11T19:23:24.2465958Z     [32m  [32m✔[39m[0m[90m validateSync with undefined and conditional required (gh-4607)[0m
2025-04-11T19:23:24.2584771Z     [32m  [32m✔[39m[0m[90m conditional required on single nested (gh-4663)[0m
2025-04-11T19:23:24.2801182Z     [32m  [32m✔[39m[0m[90m setting full path under single nested schema works (gh-4578) (gh-4528)[0m
2025-04-11T19:23:24.3009589Z     [32m  [32m✔[39m[0m[90m setting a nested path retains nested modified paths (gh-5206)[0m
2025-04-11T19:23:24.3101978Z     [32m  [32m✔[39m[0m[90m toObject() does not depopulate top level (gh-3057)[0m
2025-04-11T19:23:24.3252232Z     [32m  [32m✔[39m[0m[90m toObject() respects schema-level depopulate (gh-6313)[0m
2025-04-11T19:23:24.3410275Z     [32m  [32m✔[39m[0m[90m single nested doc conditional required (gh-4654)[0m
2025-04-11T19:23:24.3625322Z     [32m  [32m✔[39m[0m[90m handles setting single nested schema to equal value (gh-4676)[0m
2025-04-11T19:23:24.3836421Z     [32m  [32m✔[39m[0m[90m handles setting single nested doc to null after setting (gh-4766)[0m
2025-04-11T19:23:24.4058461Z     [32m  [32m✔[39m[0m[90m buffers with subtypes as ids (gh-4506)[0m
2025-04-11T19:23:24.4157481Z     [32m  [32m✔[39m[0m[90m embedded docs dont mark parent as invalid (gh-4681)[0m
2025-04-11T19:23:24.4437358Z     [32m  [32m✔[39m[0m[90m should depopulate the shard key when saving (gh-4658)[0m
2025-04-11T19:23:24.4537798Z     [32m  [32m✔[39m[0m[90m handles setting virtual subpaths (gh-4716)[0m
2025-04-11T19:23:24.4757737Z     [32m  [32m✔[39m[0m[90m handles selected nested elements with defaults (gh-4739) (gh-11376)[0m
2025-04-11T19:23:24.4854702Z     [32m  [32m✔[39m[0m[90m handles mark valid in subdocs correctly (gh-4778)[0m
2025-04-11T19:23:24.5087369Z     [32m  [32m✔[39m[0m[90m timestamps set to false works (gh-7074)[0m
2025-04-11T19:23:24.5284405Z     [32m  [32m✔[39m[0m[90m timestamps with nested paths (gh-5051)[0m
2025-04-11T19:23:24.5376261Z     [32m  [32m✔[39m[0m[90m Declaring defaults in your schema with timestamps defined (gh-6024)[0m
2025-04-11T19:23:24.5616320Z     [32m  [32m✔[39m[0m[90m supports $where in pre save hook (gh-4004)[0m
2025-04-11T19:23:24.5865523Z     [32m  [32m✔[39m[0m[90m toObject() with buffer and minimize (gh-4800)[0m
2025-04-11T19:23:24.5957402Z     [32m  [32m✔[39m[0m[90m buffer subtype prop (gh-5530)[0m
2025-04-11T19:23:24.6188777Z     [32m  [32m✔[39m[0m[90m runs validate hooks on single nested subdocs if not directly modified (gh-3884)[0m
2025-04-11T19:23:24.6383850Z     [32m  [32m✔[39m[0m[90m runs validate hooks on arrays subdocs if not directly modified (gh-5861)[0m
2025-04-11T19:23:24.6572956Z     [32m  [32m✔[39m[0m[90m does not run schema type validator on single nested if not direct modified (gh-5885)[0m
2025-04-11T19:23:24.6669678Z     [32m  [32m✔[39m[0m[90m runs schema type validator on single nested if parent has default (gh-7493)[0m
2025-04-11T19:23:24.6806767Z     [32m  [32m✔[39m[0m[90m does not overwrite when setting nested (gh-4793)[0m
2025-04-11T19:23:24.7003497Z     [32m  [32m✔[39m[0m[90m hooks/middleware for custom methods (gh-6385) (gh-7456)[0m
2025-04-11T19:23:24.7117393Z     [32m  [32m✔[39m[0m[90m custom methods with promises (gh-6385)[0m
2025-04-11T19:23:24.7234789Z     [32m  [32m✔[39m[0m[90m toString() as custom method (gh-6538)[0m
2025-04-11T19:23:24.7376869Z     [32m  [32m✔[39m[0m[90m setting to discriminator (gh-4935)[0m
2025-04-11T19:23:24.7633201Z     [32m  [32m✔[39m[0m[90m handles errors in sync validators (gh-2185)[0m
2025-04-11T19:23:24.7865555Z     [32m  [32m✔[39m[0m[90m allows hook as a schema key (gh-5047)[0m
2025-04-11T19:23:24.8059103Z     [32m  [32m✔[39m[0m[90m save errors with callback and promise work (gh-5216)[0m
2025-04-11T19:23:24.8260338Z     [32m  [32m✔[39m[0m[90m post hooks on child subdocs run after save (gh-5085)[0m
2025-04-11T19:23:24.8455739Z     [32m  [32m✔[39m[0m[90m post hooks on array child subdocs run after save (gh-5085) (gh-6926)[0m
2025-04-11T19:23:24.8544379Z     [32m  [32m✔[39m[0m[90m nested docs toObject() clones (gh-5008)[0m
2025-04-11T19:23:24.8656455Z     [32m  [32m✔[39m[0m[90m toObject() with null (gh-5143)[0m
2025-04-11T19:23:24.8772621Z     [32m  [32m✔[39m[0m[90m handles array subdocs with single nested subdoc default (gh-5162)[0m
2025-04-11T19:23:24.8889074Z     [32m  [32m✔[39m[0m[90m iterating through nested doc keys (gh-5078)[0m
2025-04-11T19:23:24.9002695Z     [32m  [32m✔[39m[0m[90m deeply nested virtual paths (gh-5250)[0m
2025-04-11T19:23:24.9303499Z     [32m  [32m✔[39m[0m[90m nested virtual when populating with parent projected out (gh-7491)[0m
2025-04-11T19:23:24.9407971Z     [32m  [32m✔[39m[0m[90m JSON.stringify nested errors (gh-5208)[0m
2025-04-11T19:23:24.9528882Z     [32m  [32m✔[39m[0m[90m handles errors in subdoc pre validate (gh-5215)[0m
2025-04-11T19:23:24.9649729Z     [32m  [32m✔[39m[0m[90m custom error types (gh-4009)[0m
2025-04-11T19:23:24.9854948Z     [32m  [32m✔[39m[0m[90m saving a doc with nested string array (gh-5282)[0m
2025-04-11T19:23:25.0071186Z     [32m  [32m✔[39m[0m[90m push() onto a nested doc array (gh-6398)[0m
2025-04-11T19:23:25.0285439Z     [32m  [32m✔[39m[0m[90m push() onto a triple nested doc array (gh-6602) (gh-6398)[0m
2025-04-11T19:23:25.0486538Z     [32m  [32m✔[39m[0m[90m null _id (gh-5236)[0m
2025-04-11T19:23:25.0583361Z     [32m  [32m✔[39m[0m[90m setting populated path with typeKey (gh-5313)[0m
2025-04-11T19:23:25.0865319Z     [32m  [32m✔[39m[0m[90m save twice with write concern (gh-5294)[0m
2025-04-11T19:23:25.1056075Z     [32m  [32m✔[39m[0m[90m undefined field with conditional required (gh-5296)[0m
2025-04-11T19:23:25.1146831Z     [32m  [32m✔[39m[0m[90m dotted virtuals in toObject (gh-5473)[0m
2025-04-11T19:23:25.1374907Z     [32m  [32m✔[39m[0m[90m dotted virtuals in toObject (gh-5506)[0m
2025-04-11T19:23:25.1463899Z     [32m  [32m✔[39m[0m[90m parent props not in child (gh-5470)[0m
2025-04-11T19:23:25.1694254Z     [32m  [32m✔[39m[0m[90m modifying array with existing ids (gh-5523)[0m
2025-04-11T19:23:25.1903715Z     [32m  [32m✔[39m[0m[90m consistent setter context for single nested (gh-5363)[0m
2025-04-11T19:23:25.2129216Z     [32m  [32m✔[39m[0m[90m deeply nested subdocs and markModified (gh-5406)[0m
2025-04-11T19:23:25.2341377Z     [32m  [32m✔[39m[0m[90m single nested subdoc post deleteOne hooks (gh-5388)[0m
2025-04-11T19:23:25.2435262Z     [32m  [32m✔[39m[0m[90m push populated doc onto empty array triggers manual population (gh-5504)[0m
2025-04-11T19:23:25.2656954Z     [32m  [32m✔[39m[0m[90m single nested conditional required scope (gh-5569)[0m
2025-04-11T19:23:25.2752873Z     [32m  [32m✔[39m[0m[90m single nested setters only get called once (gh-5601)[0m
2025-04-11T19:23:25.2873613Z     [32m  [32m✔[39m[0m[90m single getters only get called once (gh-7442)[0m
2025-04-11T19:23:25.3007596Z     [32m  [32m✔[39m[0m[90m calls subdocument getters if child schema has getters: true (gh-12105)[0m
2025-04-11T19:23:25.3320803Z     [32m  [32m✔[39m[0m[90m setting doc array to array of top-level docs works (gh-5632)[0m
2025-04-11T19:23:25.3520270Z     [32m  [32m✔[39m[0m[90m Using set as a schema path (gh-1939)[0m
2025-04-11T19:23:25.3616900Z     [32m  [32m✔[39m[0m[90m handles array defaults correctly (gh-5780)[0m
2025-04-11T19:23:25.3843484Z     [32m  [32m✔[39m[0m[90m sets path to the empty string on save after query (gh-6477)[0m
2025-04-11T19:23:25.4025777Z     [32m  [32m✔[39m[0m[90m sets path to the default boolean on save after query (gh-6477)[0m
2025-04-11T19:23:25.4119730Z     [32m  [32m✔[39m[0m[90m virtuals with no getters return undefined (gh-6223)[0m
2025-04-11T19:23:25.4233128Z     [32m  [32m✔[39m[0m[90m add default getter/setter (gh-6262)[0m
2025-04-11T19:23:25.4350819Z     [32m  [32m✔[39m[0m[90m calls array getters (gh-9889)[0m
2025-04-11T19:23:25.4577753Z     [32m  [32m✔[39m[0m[90m doesnt call setters when init-ing an array (gh-9889)[0m
2025-04-11T19:23:25.4672501Z     [32m  [32m✔[39m[0m[90m nested virtuals + nested toJSON (gh-6294)[0m
2025-04-11T19:23:25.4800613Z     [32m  [32m✔[39m[0m[90m Disallows writing to __proto__ and other special properties[0m
2025-04-11T19:23:25.5094607Z     [32m  [32m✔[39m[0m[90m save() depopulates pushed arrays (gh-6048)[0m
2025-04-11T19:23:25.5353846Z     [32m  [32m✔[39m[0m[90m Handles setting populated path set via `Document#populate()` (gh-7302)[0m
2025-04-11T19:23:25.5566713Z     [32m  [32m✔[39m[0m[90m Single nested subdocs using discriminator can be modified (gh-5693)[0m
2025-04-11T19:23:25.5670414Z     [32m  [32m✔[39m[0m[90m required function only gets called once (gh-6801)[0m
2025-04-11T19:23:25.5953432Z     [32m  [32m✔[39m[0m[90m required function called again after save() (gh-6892)[0m
2025-04-11T19:23:25.6205085Z     [32m  [32m✔[39m[0m[90m doc array: set then remove (gh-3511)[0m
2025-04-11T19:23:25.6513815Z     [32m  [32m✔[39m[0m[90m doc array: modify then sort (gh-7556)[0m
2025-04-11T19:23:25.6753015Z     [32m  [32m✔[39m[0m[90m modifying unselected nested object (gh-5800)[0m
2025-04-11T19:23:25.6984867Z     [32m  [32m✔[39m[0m[90m set() underneath embedded discriminator (gh-6482)[0m
2025-04-11T19:23:25.7231198Z     [32m  [32m✔[39m[0m[90m set() underneath array embedded discriminator (gh-6526)[0m
2025-04-11T19:23:25.7445603Z     [32m  [32m✔[39m[0m[90m consistent context for nested docs (gh-5347)[0m
2025-04-11T19:23:25.7540711Z     [32m  [32m✔[39m[0m[90m accessing arrays in setters on initial document creation (gh-6155)[0m
2025-04-11T19:23:25.7668322Z     [32m  [32m✔[39m[0m[90m handles 2nd level nested field with null child (gh-6187)[0m
2025-04-11T19:23:25.7898816Z     [32m  [32m✔[39m[0m[90m does not call default function on init if value set (gh-6410)[0m
2025-04-11T19:23:25.7994543Z     [32m  [32m✔[39m[0m[90m doesnt double-call getters when using get() (gh-6779)[0m
2025-04-11T19:23:25.8114934Z     [32m  [32m✔[39m[0m[90m returns doubly nested field in inline sub schema when using get() (gh-6925)[0m
2025-04-11T19:23:25.8321141Z     [32m  [32m✔[39m[0m[90m defaults should see correct isNew (gh-3793)[0m
2025-04-11T19:23:25.8553881Z     [32m  [32m✔[39m[0m[90m modify multiple subdoc paths (gh-4405)[0m
2025-04-11T19:23:25.8815348Z     [32m  [32m✔[39m[0m[90m doesnt try to cast populated embedded docs (gh-6390)[0m
2025-04-11T19:23:25.8870689Z [0m      modifiedPaths[0m
2025-04-11T19:23:25.9042997Z       [32m  [32m✔[39m[0m[90m doesnt markModified child paths if parent is modified (gh-4224)[0m
2025-04-11T19:23:25.9158979Z       [32m  [32m✔[39m[0m[90m includeChildren option (gh-6134)[0m
2025-04-11T19:23:25.9293057Z       [32m  [32m✔[39m[0m[90m includeChildren option with arrays (gh-5904)[0m
2025-04-11T19:23:25.9426446Z       [32m  [32m✔[39m[0m[90m 1 level down nested paths get marked modified on initial set (gh-7313) (gh-6944)[0m
2025-04-11T19:23:25.9514223Z [0m      convertToFalse and convertToTrue (gh-6758)[0m
2025-04-11T19:23:25.9704054Z       [32m  [32m✔[39m[0m[90m lets you add custom strings that get converted to true/false[0m
2025-04-11T19:23:25.9816228Z       [32m  [32m✔[39m[0m[90m allows adding `null` to list of values that convert to false (gh-9223)[0m
2025-04-11T19:23:25.9913779Z [0m    clobbered Array.prototype[0m
2025-04-11T19:23:25.9967198Z     [32m  [32m✔[39m[0m[90m handles clobbered Array.prototype.remove (gh-6431)[0m
2025-04-11T19:23:26.0233054Z     [32m  [32m✔[39m[0m[90m calls array validators again after save (gh-6818)[0m
2025-04-11T19:23:26.0335033Z     [32m  [32m✔[39m[0m[90m set single nested to num throws ObjectExpectedError (gh-6710) (gh-6753)[0m
2025-04-11T19:23:26.0464642Z     [32m  [32m✔[39m[0m[90m set array to false throws ObjectExpectedError (gh-7242)[0m
2025-04-11T19:23:26.0553438Z [0m    overwrite() (gh-7830)[0m
2025-04-11T19:23:26.0706822Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:23:26.0875488Z     [32m  [32m✔[39m[0m[90m skips version key[0m
2025-04-11T19:23:26.1056027Z     [32m  [32m✔[39m[0m[90m skips discriminator key[0m
2025-04-11T19:23:26.1362543Z     [32m  [32m✔[39m[0m[90m overwrites maps (gh-9549)[0m
2025-04-11T19:23:26.1424005Z [0m    immutable properties (gh-7671)[0m
2025-04-11T19:23:26.1474976Z     [32m  [32m✔[39m[0m[90m SchemaType#immutable()[0m
2025-04-11T19:23:26.1866805Z     [32m  [32m✔[39m[0m[90m with save()[0m
2025-04-11T19:23:26.2086027Z     [32m  [32m✔[39m[0m[90m with update[0m
2025-04-11T19:23:26.2345255Z     [32m  [32m✔[39m[0m[90m conditional immutable (gh-8001)[0m
2025-04-11T19:23:26.2591768Z     [32m  [32m✔[39m[0m[90m immutable with strict mode (gh-8149)[0m
2025-04-11T19:23:26.2657471Z [0m    Document#getChanges(...) (gh-9096)[0m
2025-04-11T19:23:26.2802791Z     [32m  [32m✔[39m[0m[90m returns an empty object when there are no changes[0m
2025-04-11T19:23:26.2995440Z     [32m  [32m✔[39m[0m[90m returns only the changed paths[0m
2025-04-11T19:23:26.3058814Z [0m    reserved keywords can be used optionally (gh-9010)[0m
2025-04-11T19:23:26.3069583Z [0m      Document#validate(...)[0m
2025-04-11T19:23:26.3131392Z       [32m  [32m✔[39m[0m[90m is available as `$validate`[0m
2025-04-11T19:23:26.3273479Z       [32m  [32m✔[39m[0m[90m can be used as a property in documents[0m
2025-04-11T19:23:26.3364950Z [0m      Document#save(...)[0m
2025-04-11T19:23:26.3524180Z       [32m  [32m✔[39m[0m[90m is available as `$save`[0m
2025-04-11T19:23:26.3640326Z       [32m  [32m✔[39m[0m[90m can be used as a property in documents[0m
2025-04-11T19:23:26.3726035Z [0m      Document#isModified(...)[0m
2025-04-11T19:23:26.3881927Z       [32m  [32m✔[39m[0m[90m is available as `$isModified`[0m
2025-04-11T19:23:26.3995165Z       [32m  [32m✔[39m[0m[90m can be used as a property in documents[0m
2025-04-11T19:23:26.4087223Z [0m      Document#isNew[0m
2025-04-11T19:23:26.4236228Z       [32m  [32m✔[39m[0m[90m is available as `$isNew`[0m
2025-04-11T19:23:26.4346168Z       [32m  [32m✔[39m[0m[90m can be used as a property in documents[0m
2025-04-11T19:23:26.4435872Z [0m      Document#populated(...)[0m
2025-04-11T19:23:26.4662578Z       [32m  [32m✔[39m[0m[90m is available as `$populated`[0m
2025-04-11T19:23:26.4775266Z       [32m  [32m✔[39m[0m[90m can be used as a property in documents[0m
2025-04-11T19:23:26.4867136Z [0m      Document#toObject(...)[0m
2025-04-11T19:23:26.5025978Z       [32m  [32m✔[39m[0m[90m is available as `$toObject`[0m
2025-04-11T19:23:26.5144310Z       [32m  [32m✔[39m[0m[90m can be used as a property in documents[0m
2025-04-11T19:23:26.5235295Z [0m      Document#init(...)[0m
2025-04-11T19:23:26.5295329Z       [32m  [32m✔[39m[0m[90m is available as `$init`[0m
2025-04-11T19:23:26.5423344Z       [32m  [32m✔[39m[0m[90m can be used as a property in documents[0m
2025-04-11T19:23:26.5514797Z [0m      Document#collection[0m
2025-04-11T19:23:26.5525822Z       [36m  - is available as `$collection`[0m
2025-04-11T19:23:26.5526523Z       [36m  - can be used as a property in documents[0m
2025-04-11T19:23:26.5536694Z [0m      Document#errors[0m
2025-04-11T19:23:26.5596691Z       [32m  [32m✔[39m[0m[90m is available as `$errors`[0m
2025-04-11T19:23:26.5724438Z       [32m  [32m✔[39m[0m[90m can be used as a property in documents[0m
2025-04-11T19:23:26.5813091Z [0m      Document#removeListener[0m
2025-04-11T19:23:26.5872361Z       [32m  [32m✔[39m[0m[90m is available as `$removeListener`[0m
2025-04-11T19:23:26.5997288Z       [32m  [32m✔[39m[0m[90m can be used as a property in documents[0m
2025-04-11T19:23:26.6085459Z [0m      Document#listeners[0m
2025-04-11T19:23:26.6144692Z       [32m  [32m✔[39m[0m[90m is available as `$listeners`[0m
2025-04-11T19:23:26.6271237Z       [32m  [32m✔[39m[0m[90m can be used as a property in documents[0m
2025-04-11T19:23:26.6355144Z [0m      Document#on[0m
2025-04-11T19:23:26.6414085Z       [32m  [32m✔[39m[0m[90m is available as `$on`[0m
2025-04-11T19:23:26.6576001Z       [32m  [32m✔[39m[0m[90m can be used as a property in documents[0m
2025-04-11T19:23:26.6686062Z [0m      Document#emit[0m
2025-04-11T19:23:26.6747199Z       [32m  [32m✔[39m[0m[90m is available as `$emit`[0m
2025-04-11T19:23:26.6882287Z       [32m  [32m✔[39m[0m[90m can be used as a property in documents[0m
2025-04-11T19:23:26.6968951Z [0m      Document#get[0m
2025-04-11T19:23:26.7027774Z       [32m  [32m✔[39m[0m[90m is available as `$get`[0m
2025-04-11T19:23:26.7153991Z       [32m  [32m✔[39m[0m[90m can be used as a property in documents[0m
2025-04-11T19:23:26.7250825Z [0m    virtuals `pathsToSkip` (gh-10120)[0m
2025-04-11T19:23:26.7302952Z     [32m  [32m✔[39m[0m[90m adds support for `pathsToSkip` for virtuals feat-10120[0m
2025-04-11T19:23:26.7429825Z     [32m  [32m✔[39m[0m[90m supports passing a list of virtuals to `toObject()` (gh-10120)[0m
2025-04-11T19:23:26.7515853Z [0m    validation `pathsToSkip` (gh-10230)[0m
2025-04-11T19:23:26.7572558Z     [32m  [32m✔[39m[0m[90m support `pathsToSkip` option for `Document#validate()`[0m
2025-04-11T19:23:26.7687999Z     [32m  [32m✔[39m[0m[90m support `pathsToSkip` option for `Document#validate()`[0m
2025-04-11T19:23:26.7805659Z     [32m  [32m✔[39m[0m[90m support `pathsToSkip` option for `Document#validateSync()`[0m
2025-04-11T19:23:26.7880892Z     [36m  - support `pathsToSkip` option for `Model.validate()`[0m
2025-04-11T19:23:26.7921177Z     [32m  [32m✔[39m[0m[90m `pathsToSkip` accepts space separated paths[0m
2025-04-11T19:23:26.8005071Z [0m    $inc (gh-11915)[0m
2025-04-11T19:23:26.8171543Z     [32m  [32m✔[39m[0m[90m stores CastError if trying to $inc a non-numeric path[0m
2025-04-11T19:23:26.8363682Z     [32m  [32m✔[39m[0m[90m should correctly increment even if the document has not saved after each increment gh-13274[0m
2025-04-11T19:23:26.8415823Z [0m      top-level path[0m
2025-04-11T19:23:26.8607234Z       [32m  [32m✔[39m[0m[90m sends a $inc command for a given path[0m
2025-04-11T19:23:26.8944722Z       [32m  [32m✔[39m[0m[90m calls setters on the value passed to `$inc()` (gh-13158)[0m
2025-04-11T19:23:26.9193915Z       [32m  [32m✔[39m[0m[90m avoids updating value if setter fails (gh-13158)[0m
2025-04-11T19:23:26.9412713Z       [32m  [32m✔[39m[0m[90m works as a $set if the document is new[0m
2025-04-11T19:23:26.9652662Z       [32m  [32m✔[39m[0m[90m treats as a $set if set after $inc[0m
2025-04-11T19:23:26.9874805Z       [32m  [32m✔[39m[0m[90m tries to cast to number[0m
2025-04-11T19:23:27.0091775Z       [32m  [32m✔[39m[0m[90m stores CastError if can't convert to number[0m
2025-04-11T19:23:27.0165420Z [0m      nested paths[0m
2025-04-11T19:23:27.0348460Z       [32m  [32m✔[39m[0m[90m handles nested paths[0m
2025-04-11T19:23:27.0576654Z       [32m  [32m✔[39m[0m[90m treats as $set if overwriting nested path[0m
2025-04-11T19:23:27.0650540Z [0m      subdocuments[0m
2025-04-11T19:23:27.0825046Z       [32m  [32m✔[39m[0m[90m handles paths underneath subdocuments[0m
2025-04-11T19:23:27.1072939Z       [32m  [32m✔[39m[0m[90m treats as a $set if setting subdocument after $inc[0m
2025-04-11T19:23:27.1144963Z [0m      document array[0m
2025-04-11T19:23:27.1336043Z       [32m  [32m✔[39m[0m[90m handles paths underneath subdocuments[0m
2025-04-11T19:23:27.1562066Z       [32m  [32m✔[39m[0m[90m works on pushed subdocs[0m
2025-04-11T19:23:27.1786637Z       [32m  [32m✔[39m[0m[90m Splice call registers path modification[0m
2025-04-11T19:23:27.1870936Z [0m    gh-2306[0m
2025-04-11T19:23:27.1925342Z     [32m  [32m✔[39m[0m[90m allow define virtual on non-object path[0m
2025-04-11T19:23:27.2045946Z     [32m  [32m✔[39m[0m[90m works on document arrays[0m
2025-04-11T19:23:27.2168458Z 
2025-04-11T19:23:27.2169857Z [0m  Check if instance function that is supplied in schema option is available[0m
2025-04-11T19:23:27.2207925Z   [32m  [32m✔[39m[0m[90m should give an instance function back rather than undefined[0m
2025-04-11T19:23:27.2239799Z 
2025-04-11T19:23:27.2244807Z [0m  model: populate:[0m
2025-04-11T19:23:27.2498189Z   [32m  [32m✔[39m[0m[90m populating array of object[0m
2025-04-11T19:23:27.2768682Z   [32m  [32m✔[39m[0m[90m deep population (gh-3103)[0m
2025-04-11T19:23:27.3016538Z   [32m  [32m✔[39m[0m[90m populating a single ref[0m
2025-04-11T19:23:27.3231227Z   [32m  [32m✔[39m[0m[90m not failing on null as ref[0m
2025-04-11T19:23:27.3407176Z   [32m  [32m✔[39m[0m[90m not failing on empty object as ref[0m
2025-04-11T19:23:27.3642842Z   [32m  [32m✔[39m[0m[90m across DBs[0m
2025-04-11T19:23:27.3878313Z   [32m  [32m✔[39m[0m[90m an error in single ref population propagates[0m
2025-04-11T19:23:27.4146025Z   [32m  [32m✔[39m[0m[90m populating with partial fields selection[0m
2025-04-11T19:23:27.4414213Z   [32m  [32m✔[39m[0m[90m population of single oid with partial field selection and filter[0m
2025-04-11T19:23:27.4670996Z   [32m  [32m✔[39m[0m[90m population of undefined fields in a collection of docs[0m
2025-04-11T19:23:27.4971414Z   [32m  [32m✔[39m[0m[90m undefined for nested paths (gh-3859)[0m
2025-04-11T19:23:27.5269616Z   [32m  [32m✔[39m[0m[90m population and changing a reference[0m
2025-04-11T19:23:27.5549871Z   [32m  [32m✔[39m[0m[90m populating with partial fields selection and changing ref[0m
2025-04-11T19:23:27.5804168Z   [32m  [32m✔[39m[0m[90m populating an array of refs and fetching many[0m
2025-04-11T19:23:27.6062296Z   [32m  [32m✔[39m[0m[90m an error in array reference population propagates[0m
2025-04-11T19:23:27.6317458Z   [32m  [32m✔[39m[0m[90m populating an array of references with fields selection[0m
2025-04-11T19:23:27.6604644Z   [32m  [32m✔[39m[0m[90m populating an array of references and filtering[0m
2025-04-11T19:23:27.6875555Z   [32m  [32m✔[39m[0m[90m populating an array of references and multi-filtering[0m
2025-04-11T19:23:27.7142698Z   [32m  [32m✔[39m[0m[90m populating an array of references and multi-filtering with field selection[0m
2025-04-11T19:23:27.7621024Z   [32m  [32m✔[39m[0m[90m populating an array of refs changing one and removing one[0m[33m (39ms)[0m
2025-04-11T19:23:27.7929171Z   [32m  [32m✔[39m[0m[90m clears cache when array has been re-assigned (gh-2176)[0m
2025-04-11T19:23:27.8191690Z   [32m  [32m✔[39m[0m[90m populating subdocuments partially[0m
2025-04-11T19:23:27.8463986Z   [32m  [32m✔[39m[0m[90m populating subdocuments partially with conditions[0m
2025-04-11T19:23:27.8806501Z   [32m  [32m✔[39m[0m[90m populating subdocs with invalid/missing subproperties[0m
2025-04-11T19:23:27.9226966Z   [32m  [32m✔[39m[0m[90m properly handles limit per document (gh-2151)[0m
2025-04-11T19:23:27.9458917Z   [32m  [32m✔[39m[0m[90m populating subdocuments partially with empty array (gh-481)[0m
2025-04-11T19:23:27.9688299Z   [32m  [32m✔[39m[0m[90m populating subdocuments partially with null array[0m
2025-04-11T19:23:27.9925971Z   [32m  [32m✔[39m[0m[90m populating subdocuments with array including nulls[0m
2025-04-11T19:23:28.0177954Z   [32m  [32m✔[39m[0m[90m supports `retainNullValues` to override filtering out null docs (gh-6432)[0m
2025-04-11T19:23:28.0449445Z   [32m  [32m✔[39m[0m[90m supports `retainNullValues` while suppressing _id of subdocument[0m
2025-04-11T19:23:28.0836368Z   [32m  [32m✔[39m[0m[90m populating more than one array at a time[0m
2025-04-11T19:23:28.1242257Z   [32m  [32m✔[39m[0m[90m populating multiple children of a sub-array at a time[0m
2025-04-11T19:23:28.1661316Z   [32m  [32m✔[39m[0m[90m passing sort options to the populate method[0m
2025-04-11T19:23:28.1937159Z   [32m  [32m✔[39m[0m[90m limit should apply to each returned doc, not in aggregate (gh-1490)[0m
2025-04-11T19:23:28.2012004Z   [32m  [32m✔[39m[0m[90m refs should cast to ObjectId from hexstrings[0m
2025-04-11T19:23:28.2289636Z   [32m  [32m✔[39m[0m[90m populate should work on String _ids[0m
2025-04-11T19:23:28.2728700Z   [32m  [32m✔[39m[0m[90m required works on ref fields (gh-577)[0m
2025-04-11T19:23:28.2981533Z   [32m  [32m✔[39m[0m[90m populate should work on Number _ids[0m
2025-04-11T19:23:28.3330624Z   [32m  [32m✔[39m[0m[90m populate works with schemas with both id and _id defined[0m
2025-04-11T19:23:28.3618901Z   [32m  [32m✔[39m[0m[90m Update works with populated arrays (gh-602)[0m
2025-04-11T19:23:28.3879730Z   [32m  [32m✔[39m[0m[90m toJSON should also be called for refs (gh-675)[0m
2025-04-11T19:23:28.4127511Z   [32m  [32m✔[39m[0m[90m populate should work on Buffer _ids (gh-686)[0m
2025-04-11T19:23:28.4396733Z   [32m  [32m✔[39m[0m[90m populated Buffer _ids should be requireable[0m
2025-04-11T19:23:28.4638079Z   [32m  [32m✔[39m[0m[90m populating with custom model selection (gh-773)[0m
2025-04-11T19:23:28.4899994Z   [32m  [32m✔[39m[0m[90m strips out not-matched ids when populating a hydrated doc (gh-6435)[0m
2025-04-11T19:23:28.5160623Z   [32m  [32m✔[39m[0m[90m avoids setting empty array on lean document when populate result is undefined (gh-10599)[0m
2025-04-11T19:23:28.5445735Z   [32m  [32m✔[39m[0m[90m supports ref: Model with virtual populate (gh-10695)[0m
2025-04-11T19:23:28.5736908Z   [32m  [32m✔[39m[0m[90m supports ref on subdocuments (gh-10856)[0m
2025-04-11T19:23:28.6013757Z   [32m  [32m✔[39m[0m[90m no-op when populating a single nested subdoc underneath a doc array with no ref (gh-11538) (gh-10856)[0m
2025-04-11T19:23:28.6300541Z   [32m  [32m✔[39m[0m[90m supports ref on array containing subdocuments (gh-10856)[0m
2025-04-11T19:23:28.6600767Z   [32m  [32m✔[39m[0m[90m uses `Model` by default when doing `Model.populate()` on a POJO (gh-10978)[0m
2025-04-11T19:23:28.6899137Z   [32m  [32m✔[39m[0m[90m can reference parent connection models by name after `useDb()` (gh-11003)[0m
2025-04-11T19:23:28.7431073Z   [32m  [32m✔[39m[0m[90m handles refPath underneath map of subdocuments (gh-9359)[0m[33m (46ms)[0m
2025-04-11T19:23:28.7697720Z   [32m  [32m✔[39m[0m[90m handles virtual populate with `justOne` underneath document array and sort (gh-12730) (gh-10552)[0m
2025-04-11T19:23:28.8115753Z   [32m  [32m✔[39m[0m[90m merges match when match is on `_id` (gh-12834)[0m
2025-04-11T19:23:28.8441349Z   [32m  [32m✔[39m[0m[90m supports removing and then recreating populate virtual using schema clone (gh-13085)[0m
2025-04-11T19:23:28.8701555Z   [32m  [32m✔[39m[0m[90m handles populating underneath document arrays that have null (gh-13839)[0m
2025-04-11T19:23:28.8998396Z   [32m  [32m✔[39m[0m[90m calls match function with virtual as parameter (gh-12443)[0m
2025-04-11T19:23:28.9274486Z   [32m  [32m✔[39m[0m[90m allows pushing to model populated in a query cursor (gh-13575)[0m
2025-04-11T19:23:28.9566698Z   [32m  [32m✔[39m[0m[90m sets populated docs in correct order when populating virtual underneath document array with justOne (gh-14018)[0m
2025-04-11T19:23:28.9888102Z   [32m  [32m✔[39m[0m[90m calls transform with single ObjectId when populating justOne path underneath array (gh-14073)[0m
2025-04-11T19:23:29.0193160Z   [32m  [32m✔[39m[0m[90m allows deselecting discriminator key when populating (gh-3230) (gh-13760) (gh-13679)[0m
2025-04-11T19:23:29.0489975Z   [32m  [32m✔[39m[0m[90m calls setter on virtual populated path with populated doc (gh-14285)[0m
2025-04-11T19:23:29.0808910Z   [32m  [32m✔[39m[0m[90m handles ref() function that returns a model (gh-14249)[0m
2025-04-11T19:23:29.1064187Z   [32m  [32m✔[39m[0m[90m avoids filtering out `null` values when applying match function (gh-14494)[0m
2025-04-11T19:23:29.1303437Z   [32m  [32m✔[39m[0m[90m avoids depopulating manually populated doc as getter value (gh-14759)[0m
2025-04-11T19:23:29.1542655Z   [32m  [32m✔[39m[0m[90m avoids populating manually populated doc as getter value (gh-14827)[0m
2025-04-11T19:23:29.1799332Z   [32m  [32m✔[39m[0m[90m makes sure that populate works correctly with duplicate foreignField with lean(); (gh-14794)[0m
2025-04-11T19:23:29.2102132Z   [32m  [32m✔[39m[0m[90m depopulates if pushing ObjectId to a populated array (gh-1635)[0m
2025-04-11T19:23:29.2358621Z   [32m  [32m✔[39m[0m[90m handles converting uuid documents to strings when calling toObject() (gh-14869)[0m
2025-04-11T19:23:29.2634719Z   [32m  [32m✔[39m[0m[90m avoids repopulating if forceRepopulate is disabled (gh-14979)[0m
2025-04-11T19:23:29.3016378Z   [32m  [32m✔[39m[0m[90m handles forceRepopulate as a global option (gh-14979)[0m
2025-04-11T19:23:29.3287361Z   [32m  [32m✔[39m[0m[90m handles populating UUID fields (gh-15315)[0m
2025-04-11T19:23:29.3337165Z [0m    deep populate[0m
2025-04-11T19:23:29.3619742Z     [32m  [32m✔[39m[0m[90m deep population with refs (gh-3507)[0m
2025-04-11T19:23:29.3940980Z     [32m  [32m✔[39m[0m[90m multiple paths with same options (gh-3808)[0m
2025-04-11T19:23:29.4010557Z [0m    populating sub docs[0m
2025-04-11T19:23:29.4244779Z     [32m  [32m✔[39m[0m[90m works with findById[0m
2025-04-11T19:23:29.4555277Z     [32m  [32m✔[39m[0m[90m works when first doc returned has empty array for populated path (gh-1055)[0m
2025-04-11T19:23:29.4625429Z [0m    specifying a custom model without specifying a ref in schema[0m
2025-04-11T19:23:29.4833878Z     [32m  [32m✔[39m[0m[90m with String _id[0m
2025-04-11T19:23:29.5089328Z     [32m  [32m✔[39m[0m[90m with Number _id[0m
2025-04-11T19:23:29.5354916Z     [32m  [32m✔[39m[0m[90m with Buffer _id[0m
2025-04-11T19:23:29.5609714Z     [32m  [32m✔[39m[0m[90m with ObjectId _id[0m
2025-04-11T19:23:29.5678184Z [0m    specifying all params using an object[0m
2025-04-11T19:23:29.6005953Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:23:29.6075991Z [0m    Model.populate()[0m
2025-04-11T19:23:29.6340011Z     [32m  [32m✔[39m[0m[90m returns a promise[0m
2025-04-11T19:23:29.6672204Z     [32m  [32m✔[39m[0m[90m of individual document works[0m
2025-04-11T19:23:29.6731685Z [0m      a document already populated[0m
2025-04-11T19:23:29.6742427Z [0m        when paths are not modified[0m
2025-04-11T19:23:29.7062127Z         [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:23:29.7153722Z [0m        when paths are modified[0m
2025-04-11T19:23:29.7458617Z         [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:23:29.7562713Z [0m      of multiple documents[0m
2025-04-11T19:23:29.7853123Z       [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:23:29.7945753Z [0m    populating combined with lean (gh-1260)[0m
2025-04-11T19:23:29.8164609Z     [32m  [32m✔[39m[0m[90m with findOne[0m
2025-04-11T19:23:29.8487353Z     [32m  [32m✔[39m[0m[90m with find[0m
2025-04-11T19:23:29.8557405Z [0m    records paths and _ids used in population[0m
2025-04-11T19:23:29.8848741Z     [32m  [32m✔[39m[0m[90m with findOne[0m
2025-04-11T19:23:29.9171671Z     [32m  [32m✔[39m[0m[90m with find[0m
2025-04-11T19:23:29.9243818Z [0m    deselecting _id[0m
2025-04-11T19:23:29.9254021Z [0m      in a subdocument[0m
2025-04-11T19:23:29.9601425Z       [32m  [32m✔[39m[0m[90m works (gh-14231)[0m
2025-04-11T19:23:29.9959702Z       [32m  [32m✔[39m[0m[90m with lean[0m
2025-04-11T19:23:30.0042810Z [0m      of documents being populated[0m
2025-04-11T19:23:30.0338705Z       [32m  [32m✔[39m[0m[90m still works (gh-1441)[0m
2025-04-11T19:23:30.0429638Z [0m    DynRef[0m
2025-04-11T19:23:30.0767802Z     [32m  [32m✔[39m[0m[90m Simple populate[0m
2025-04-11T19:23:30.1114283Z     [32m  [32m✔[39m[0m[90m Array populate[0m
2025-04-11T19:23:30.1556117Z     [32m  [32m✔[39m[0m[90m with nonexistant refPath (gh-4637)[0m
2025-04-11T19:23:30.2024395Z     [32m  [32m✔[39m[0m[90m array with empty refPath (gh-5377)[0m
2025-04-11T19:23:30.2561775Z     [32m  [32m✔[39m[0m[90m with non-arrays (gh-5114)[0m
2025-04-11T19:23:30.3226723Z     [32m  [32m✔[39m[0m[90m with different schema types for local fields (gh-6870)[0m
2025-04-11T19:23:30.3734330Z     [32m  [32m✔[39m[0m[90m with refPath and array of ids with parent refPath[0m
2025-04-11T19:23:30.4164298Z     [32m  [32m✔[39m[0m[90m with nested nonexistant refPath (gh-6457)[0m
2025-04-11T19:23:30.4664759Z     [32m  [32m✔[39m[0m[90m where first doc doesnt have a refPath (gh-6913[0m
2025-04-11T19:23:30.5073607Z     [32m  [32m✔[39m[0m[90m readable error with deselected refPath (gh-6834)[0m
2025-04-11T19:23:30.5146877Z [0m    leaves Documents within Mixed properties alone (gh-1471)[0m
2025-04-11T19:23:30.5435345Z     [32m  [32m✔[39m[0m[90m when saving new docs[0m
2025-04-11T19:23:30.5786918Z     [32m  [32m✔[39m[0m[90m when saving existing docs 5T5[0m
2025-04-11T19:23:30.5862378Z [0m    github issues[0m
2025-04-11T19:23:30.6140903Z     [32m  [32m✔[39m[0m[90m populating an array of refs, slicing, and fetching many (gh-5737)[0m
2025-04-11T19:23:30.6425211Z     [32m  [32m✔[39m[0m[90m populate + slice (gh-5737a)[0m
2025-04-11T19:23:30.6729401Z     [32m  [32m✔[39m[0m[90m handles multiple spaces in between paths to populate (gh-13951)[0m
2025-04-11T19:23:30.7017784Z     [32m  [32m✔[39m[0m[90m maps results back to correct document (gh-1444)[0m
2025-04-11T19:23:30.7393001Z     [32m  [32m✔[39m[0m[90m handles skip[0m
2025-04-11T19:23:30.7773551Z     [32m  [32m✔[39m[0m[90m handles slice (gh-1934)[0m
2025-04-11T19:23:30.8114509Z     [32m  [32m✔[39m[0m[90m fails if sorting with a doc array subprop (gh-2202)[0m
2025-04-11T19:23:30.8349127Z     [32m  [32m✔[39m[0m[90m handles toObject() (gh-3279)[0m
2025-04-11T19:23:30.8606013Z     [32m  [32m✔[39m[0m[90m populate option (gh-2321)[0m
2025-04-11T19:23:30.9017105Z     [32m  [32m✔[39m[0m[90m discriminator child schemas (gh-3878)[0m
2025-04-11T19:23:30.9262582Z     [32m  [32m✔[39m[0m[90m set to obj w/ same id doesnt mark modified (gh-3992)[0m
2025-04-11T19:23:30.9857498Z     [32m  [32m✔[39m[0m[90m deep populate single -> array (gh-3904)[0m[33m (50ms)[0m
2025-04-11T19:23:31.0436157Z     [32m  [32m✔[39m[0m[90m deep populate array -> array (gh-3954)[0m[33m (48ms)[0m
2025-04-11T19:23:31.0909767Z     [32m  [32m✔[39m[0m[90m 4 level population (gh-3973)[0m[33m (38ms)[0m
2025-04-11T19:23:31.1532720Z     [32m  [32m✔[39m[0m[90m deep populate two paths (gh-3974)[0m[33m (52ms)[0m
2025-04-11T19:23:31.2962287Z     [32m  [32m✔[39m[0m[90m out-of-order discriminators (gh-4073)[0m[31m (133ms)[0m
2025-04-11T19:23:31.3310695Z     [32m  [32m✔[39m[0m[90m dynref bug (gh-4104)[0m
2025-04-11T19:23:31.3608830Z     [32m  [32m✔[39m[0m[90m returned array has toObject() (gh-4656)[0m
2025-04-11T19:23:31.3876322Z     [32m  [32m✔[39m[0m[90m empty array (gh-4284)[0m
2025-04-11T19:23:31.4089986Z     [32m  [32m✔[39m[0m[90m empty populate string is a no-op (gh-4702)[0m
2025-04-11T19:23:31.4414072Z     [32m  [32m✔[39m[0m[90m checks field name correctly with nested arrays (gh-4365)[0m
2025-04-11T19:23:31.4721010Z     [32m  [32m✔[39m[0m[90m virtual populate with embedded discriminators (gh-6273)[0m
2025-04-11T19:23:31.5011204Z     [32m  [32m✔[39m[0m[90m populates virtual of embedded discriminator with dynamic ref (gh-6554)[0m
2025-04-11T19:23:31.5373319Z     [32m  [32m✔[39m[0m[90m populates virtual of embedded discriminator with dynamic ref when more than one model name is returned (gh-6612)[0m
2025-04-11T19:23:31.5689649Z     [32m  [32m✔[39m[0m[90m uses getter if one is defined on the localField (gh-6618)[0m
2025-04-11T19:23:31.6012310Z     [32m  [32m✔[39m[0m[90m populate child with same name as parent (gh-6839) (gh-6908)[0m
2025-04-11T19:23:31.6287474Z     [32m  [32m✔[39m[0m[90m passes scope as Model instance (gh-6726)[0m
2025-04-11T19:23:31.6563106Z     [32m  [32m✔[39m[0m[90m respects schema array even if underlying doc doesnt use array (gh-6908)[0m
2025-04-11T19:23:31.6809922Z     [32m  [32m✔[39m[0m[90m save objectid with populated refPath (gh-6714)[0m
2025-04-11T19:23:31.7153286Z     [32m  [32m✔[39m[0m[90m correct model and justOne when double populating (gh-6978)[0m
2025-04-11T19:23:31.7534598Z     [32m  [32m✔[39m[0m[90m correctly finds justOne when double-populating underneath an array (gh-6798)[0m
2025-04-11T19:23:31.7806502Z     [32m  [32m✔[39m[0m[90m handles virtual justOne if it is not set (gh-6988)[0m
2025-04-11T19:23:31.8076591Z     [32m  [32m✔[39m[0m[90m handles virtual justOne if it is not set, is lean, and subfields are selected[0m
2025-04-11T19:23:31.8405837Z     [32m  [32m✔[39m[0m[90m does not set `justOne` if underneath Mixed (gh-6985)[0m
2025-04-11T19:23:31.8719396Z     [32m  [32m✔[39m[0m[90m supports setting `justOne` as an option (gh-6985)[0m
2025-04-11T19:23:31.9052831Z     [32m  [32m✔[39m[0m[90m multiple localFields and foreignFields (gh-5704)[0m
2025-04-11T19:23:31.9459481Z     [32m  [32m✔[39m[0m[90m lean populate underneath array (gh-7052)[0m
2025-04-11T19:23:31.9743319Z     [32m  [32m✔[39m[0m[90m handles plus path projections with virtual populate (gh-7050)[0m
2025-04-11T19:23:32.0214092Z     [32m  [32m✔[39m[0m[90m set model as ref in schema (gh-7253)[0m[33m (38ms)[0m
2025-04-11T19:23:32.0741283Z     [32m  [32m✔[39m[0m[90m count option (gh-4469) (gh-7380)[0m[33m (42ms)[0m
2025-04-11T19:23:32.1149529Z     [32m  [32m✔[39m[0m[90m count option ignores skip (gh-4469) (gh-8476)[0m
2025-04-11T19:23:32.1992448Z     [32m  [32m✔[39m[0m[90m count with deeply nested (gh-7573)[0m[33m (62ms)[0m
2025-04-11T19:23:32.2632439Z     [32m  [32m✔[39m[0m[90m explicit model option overrides refPath (gh-7273)[0m[33m (53ms)[0m
2025-04-11T19:23:32.3133445Z     [32m  [32m✔[39m[0m[90m clone option means identical ids get separate copies of doc (gh-3258)[0m[33m (40ms)[0m
2025-04-11T19:23:32.3771477Z     [32m  [32m✔[39m[0m[90m handles double nested array `foreignField` (gh-7374)[0m[33m (53ms)[0m
2025-04-11T19:23:32.4927109Z     [32m  [32m✔[39m[0m[90m populate single path with numeric path underneath doc array (gh-7273)[0m[31m (105ms)[0m
2025-04-11T19:23:32.5192000Z     [32m  [32m✔[39m[0m[90m supports populating a path in a document array embedded in an array (gh-7647)[0m
2025-04-11T19:23:32.5472800Z     [32m  [32m✔[39m[0m[90m handles populating deeply nested path if value in db is a primitive (gh-7545)[0m
2025-04-11T19:23:32.5735763Z     [32m  [32m✔[39m[0m[90m sets populate virtual to empty array if local field empty (gh-8230)[0m
2025-04-11T19:23:32.5994129Z     [32m  [32m✔[39m[0m[90m sets populate virtual with count to 0 if local field empty (gh-7731)[0m
2025-04-11T19:23:32.6282620Z     [32m  [32m✔[39m[0m[90m can populate an array property whose name conflicts with array method (gh-7782)[0m
2025-04-11T19:23:32.6638689Z     [32m  [32m✔[39m[0m[90m supports cross-db populate with refPath (gh-6520)[0m
2025-04-11T19:23:32.7027003Z     [32m  [32m✔[39m[0m[90m ref function for conventional populate (gh-7669)[0m
2025-04-11T19:23:32.7297455Z     [32m  [32m✔[39m[0m[90m virtual refPath (gh-7848)[0m
2025-04-11T19:23:32.7670524Z     [32m  [32m✔[39m[0m[90m handles refPath on discriminator when populating top-level model (gh-5109)[0m
2025-04-11T19:23:32.8018100Z     [32m  [32m✔[39m[0m[90m refPath with virtual (gh-7341)[0m
2025-04-11T19:23:32.8299684Z     [32m  [32m✔[39m[0m[90m count with subdocs (gh-7573)[0m
2025-04-11T19:23:32.8652759Z     [32m  [32m✔[39m[0m[90m returns an array when count on an array localField (gh-11307) (gh-7573)[0m
2025-04-11T19:23:32.8980611Z     [32m  [32m✔[39m[0m[90m handles virtual populate of an embedded discriminator nested path (gh-6488) (gh-8173)[0m
2025-04-11T19:23:32.9283747Z     [32m  [32m✔[39m[0m[90m accessing populate virtual prop (gh-13189) (gh-8198)[0m
2025-04-11T19:23:32.9612762Z     [32m  [32m✔[39m[0m[90m doesnt insert empty document when populating a path within a non-existent document array (gh-8432)[0m
2025-04-11T19:23:32.9971110Z     [32m  [32m✔[39m[0m[90m doesnt insert empty document when lean populating a path within an underneath non-existent document array (gh-14098)[0m
2025-04-11T19:23:33.0186686Z     [32m  [32m✔[39m[0m[90m sets empty array if populating undefined path (gh-8455)[0m
2025-04-11T19:23:33.0585351Z     [32m  [32m✔[39m[0m[90m succeeds with refPath if embedded discriminator has path with same name but no refPath (gh-8452) (gh-8499)[0m
2025-04-11T19:23:33.0885902Z     [32m  [32m✔[39m[0m[90m excluding foreignField using minus path deselects foreignField (gh-8460)[0m
2025-04-11T19:23:33.1204636Z     [32m  [32m✔[39m[0m[90m supports top-level match option (gh-8475)[0m
2025-04-11T19:23:33.1600948Z     [32m  [32m✔[39m[0m[90m supports top-level skip and limit options (gh-8445)[0m
2025-04-11T19:23:33.1942800Z     [32m  [32m✔[39m[0m[90m top-level limit properly applies limit per document (gh-8657)[0m
2025-04-11T19:23:33.2304038Z     [32m  [32m✔[39m[0m[90m correct limit with populate (gh-7318)[0m
2025-04-11T19:23:33.2656033Z     [32m  [32m✔[39m[0m[90m perDocumentLimit as option to `populate()` method (gh-7318) (gh-9418)[0m
2025-04-11T19:23:33.2997028Z     [32m  [32m✔[39m[0m[90m works when embedded discriminator array has populated path but not refPath (gh-8527)[0m
2025-04-11T19:23:33.3222075Z     [32m  [32m✔[39m[0m[90m handles populating embedded discriminators with `refPath` when none of the subdocs have `refPath` (gh-8553)[0m
2025-04-11T19:23:33.3553074Z     [32m  [32m✔[39m[0m[90m throws an error when using limit with perDocumentLimit[0m
2025-04-11T19:23:33.3831149Z     [32m  [32m✔[39m[0m[90m handles function refPath with discriminators (gh-8731)[0m
2025-04-11T19:23:33.4084743Z     [32m  [32m✔[39m[0m[90m recursive virtuals with `populate` option (gh-11700)[0m
2025-04-11T19:23:33.4383076Z     [32m  [32m✔[39m[0m[90m no-op if populating on a document array with no ref (gh-8946)[0m
2025-04-11T19:23:33.4659516Z     [32m  [32m✔[39m[0m[90m no-op if populating a nested path (gh-9073)[0m
2025-04-11T19:23:33.4989329Z     [32m  [32m✔[39m[0m[90m handles populating primitive array under document array with discriminator (gh-9148)[0m
2025-04-11T19:23:33.5385386Z     [32m  [32m✔[39m[0m[90m handles deselecting _id with `perDocumentLimit` (gh-8460) (gh-9175)[0m
2025-04-11T19:23:33.5661122Z     [32m  [32m✔[39m[0m[90m handles embedded discriminator `refPath` with multiple documents (gh-8731) (gh-9153)[0m
2025-04-11T19:23:33.6003532Z     [32m  [32m✔[39m[0m[90m Sets the populated document's parent() (gh-8092)[0m
2025-04-11T19:23:33.6423543Z     [32m  [32m✔[39m[0m[90m populates single nested discriminator underneath doc array when populated docs have different model but same id (gh-9244)[0m
2025-04-11T19:23:33.6702515Z     [32m  [32m✔[39m[0m[90m skips checking `refPath` if the path to populate is undefined (gh-9340)[0m
2025-04-11T19:23:33.6966449Z     [32m  [32m✔[39m[0m[90m supports default populate options (gh-6029)[0m
2025-04-11T19:23:33.7252727Z     [32m  [32m✔[39m[0m[90m avoids propagating lean virtuals to children (gh-9592)[0m
2025-04-11T19:23:33.7577419Z     [32m  [32m✔[39m[0m[90m gh-9833[0m
2025-04-11T19:23:33.7920685Z     [32m  [32m✔[39m[0m[90m sets not-found values to null for paths that are not in the schema (gh-9913)[0m
2025-04-11T19:23:33.8232848Z     [32m  [32m✔[39m[0m[90m handles perDocumentLimit where multiple documents reference the same populated doc (gh-9906)[0m
2025-04-11T19:23:33.8883345Z     [32m  [32m✔[39m[0m[90m supports `transform` option (gh-3375)[0m[33m (56ms)[0m
2025-04-11T19:23:33.9167350Z     [32m  [32m✔[39m[0m[90m avoids calling `transform()` with `lean()` when no results (gh-12739)[0m
2025-04-11T19:23:33.9505242Z     [32m  [32m✔[39m[0m[90m transform to primitive (gh-10064)[0m
2025-04-11T19:23:33.9797132Z     [32m  [32m✔[39m[0m[90m transform with virtual populate, justOne = true (gh-3375)[0m
2025-04-11T19:23:34.0079457Z     [32m  [32m✔[39m[0m[90m transform with virtual populate, justOne = false (gh-3375)[0m
2025-04-11T19:23:34.0478691Z     [32m  [32m✔[39m[0m[90m supports populating dotted subpath of a populated doc that has the same id as a populated doc (gh-10005)[0m
2025-04-11T19:23:34.0779528Z     [32m  [32m✔[39m[0m[90m prevents already populated fields from becoming null gh-10068[0m
2025-04-11T19:23:34.1031551Z     [32m  [32m✔[39m[0m[90m populates lean subdoc with `_id` property (gh-10069)[0m
2025-04-11T19:23:34.1328646Z     [32m  [32m✔[39m[0m[90m handles virtual populate when foreignField is an array with duplicates (gh-10117)[0m
2025-04-11T19:23:34.1635521Z     [32m  [32m✔[39m[0m[90m handles virtual populate with `$elemMatch` in custom match when `foreignField` is an array (gh-10117)[0m
2025-04-11T19:23:34.1858133Z     [32m  [32m✔[39m[0m[90m populates immutable array paths (gh-10159)[0m
2025-04-11T19:23:34.2155476Z     [32m  [32m✔[39m[0m[90m populates paths under mixed schematypes where some documents have non-object properties (gh-10191)[0m
2025-04-11T19:23:34.2497168Z     [32m  [32m✔[39m[0m[90m populates embedded discriminator with tied value (gh-10231)[0m
2025-04-11T19:23:34.2723900Z     [32m  [32m✔[39m[0m[90m supports populating an array of immutable elements (gh-10264)[0m
2025-04-11T19:23:34.2994657Z     [32m  [32m✔[39m[0m[90m populates nested path in schema using `Model.populate()` static (gh-10335)[0m
2025-04-11T19:23:34.3388072Z     [32m  [32m✔[39m[0m[90m calls subdocument ref functions with subdocument as context (gh-8469)[0m
2025-04-11T19:23:34.3455254Z [0m      populate virtuals (gh-2562)[0m
2025-04-11T19:23:34.3752580Z       [32m  [32m✔[39m[0m[90m basic populate virtuals[0m
2025-04-11T19:23:34.4181777Z       [32m  [32m✔[39m[0m[90m match (gh-6787)[0m
2025-04-11T19:23:34.4529316Z       [32m  [32m✔[39m[0m[90m match prevents using $where[0m
2025-04-11T19:23:34.4972425Z       [32m  [32m✔[39m[0m[90m multiple source docs[0m
2025-04-11T19:23:34.5203916Z       [32m  [32m✔[39m[0m[90m catchable error if localField or foreignField not specified (gh-6767)[0m
2025-04-11T19:23:34.5684002Z       [32m  [32m✔[39m[0m[90m source array[0m
2025-04-11T19:23:34.5994112Z       [32m  [32m✔[39m[0m[90m multiple paths (gh-4234)[0m
2025-04-11T19:23:34.6303176Z       [32m  [32m✔[39m[0m[90m in embedded array (gh-4928)[0m
2025-04-11T19:23:34.6627173Z       [32m  [32m✔[39m[0m[90m in embedded array with sort (gh-10552)[0m
2025-04-11T19:23:34.6942078Z       [32m  [32m✔[39m[0m[90m in embedded array with sort and one result (gh-10552)[0m
2025-04-11T19:23:34.7298498Z       [32m  [32m✔[39m[0m[90m justOne option (gh-4263)[0m
2025-04-11T19:23:34.7613401Z       [32m  [32m✔[39m[0m[90m justOne + lean (gh-6234)[0m
2025-04-11T19:23:34.7896911Z       [32m  [32m✔[39m[0m[90m sets empty array if lean with justOne = false and no results (gh-10992)[0m
2025-04-11T19:23:34.8214966Z       [32m  [32m✔[39m[0m[90m justOne underneath array (gh-6867)[0m
2025-04-11T19:23:34.8522685Z       [32m  [32m✔[39m[0m[90m with no results and justOne (gh-4284)[0m
2025-04-11T19:23:34.8886328Z       [32m  [32m✔[39m[0m[90m with multiple results and justOne (gh-4329)[0m
2025-04-11T19:23:34.9199279Z       [32m  [32m✔[39m[0m[90m virtuals with getters (gh-9343)[0m
2025-04-11T19:23:34.9503779Z       [32m  [32m✔[39m[0m[90m virtuals with `get` option (gh-9343)[0m
2025-04-11T19:23:34.9834593Z       [32m  [32m✔[39m[0m[90m hydrates properly (gh-4618)[0m
2025-04-11T19:23:35.0206043Z       [32m  [32m✔[39m[0m[90m with functions for localField and foreignField (gh-5704)[0m
2025-04-11T19:23:35.0580748Z       [32m  [32m✔[39m[0m[90m with functions for ref (gh-5602)[0m
2025-04-11T19:23:35.1036605Z       [32m  [32m✔[39m[0m[90m with functions for match (gh-7397)[0m
2025-04-11T19:23:35.1445101Z       [32m  [32m✔[39m[0m[90m with functions for match and foreignField (gh-7397)[0m
2025-04-11T19:23:35.1924288Z       [32m  [32m✔[39m[0m[90m with function for refPath (gh-6669)[0m
2025-04-11T19:23:35.2296438Z       [32m  [32m✔[39m[0m[90m with no results (gh-4284)[0m
2025-04-11T19:23:35.2536362Z       [32m  [32m✔[39m[0m[90m virtual is undefined when not populated (gh-7795)[0m
2025-04-11T19:23:35.2916440Z       [32m  [32m✔[39m[0m[90m deep populate virtual -> conventional (gh-4261)[0m
2025-04-11T19:23:35.3298584Z       [32m  [32m✔[39m[0m[90m deep populate virtual -> virtual (gh-4278)[0m
2025-04-11T19:23:35.3706162Z       [32m  [32m✔[39m[0m[90m source array (gh-4585)[0m
2025-04-11T19:23:35.3977565Z       [32m  [32m✔[39m[0m[90m lean with single result and no justOne (gh-4288)[0m
2025-04-11T19:23:35.4463841Z       [32m  [32m✔[39m[0m[90m gh-4923[0m[33m (38ms)[0m
2025-04-11T19:23:35.4787121Z       [32m  [32m✔[39m[0m[90m supports setting default options in schema (gh-4741)[0m
2025-04-11T19:23:35.4916886Z       [32m  [32m✔[39m[0m[90m handles populate with 0 args (gh-5036)[0m
2025-04-11T19:23:35.5059536Z       [32m  [32m✔[39m[0m[90m attaches `_id` property to ref ids (gh-6359) (gh-6115)[0m
2025-04-11T19:23:35.5602281Z       [32m  [32m✔[39m[0m[90m handles populating with discriminators that may not have a ref (gh-4817)[0m
2025-04-11T19:23:35.5882755Z       [32m  [32m✔[39m[0m[90m populate with no ref using Model.populate (gh-4843)[0m
2025-04-11T19:23:35.6237698Z       [32m  [32m✔[39m[0m[90m nested populate, virtual -> normal (gh-4631)[0m
2025-04-11T19:23:35.6656015Z       [32m  [32m✔[39m[0m[90m populate with Decimal128 as ref (gh-4759)[0m
2025-04-11T19:23:35.6992446Z       [32m  [32m✔[39m[0m[90m handles circular virtual -> regular (gh-5128)[0m
2025-04-11T19:23:35.7362887Z       [32m  [32m✔[39m[0m[90m handles nested virtuals (gh-4851)[0m
2025-04-11T19:23:35.7694793Z       [32m  [32m✔[39m[0m[90m nested virtuals if top-level prop doesnt exist (gh-5431)[0m
2025-04-11T19:23:35.8022463Z       [32m  [32m✔[39m[0m[90m nested virtuals + doc.populate() (gh-5240)[0m
2025-04-11T19:23:35.8334471Z       [32m  [32m✔[39m[0m[90m no ref + cursor (gh-5334)[0m
2025-04-11T19:23:35.8903441Z       [32m  [32m✔[39m[0m[90m retains limit when using cursor (gh-5468)[0m[33m (45ms)[0m
2025-04-11T19:23:35.9229609Z       [32m  [32m✔[39m[0m[90m virtuals + doc.populate() (gh-5311)[0m
2025-04-11T19:23:35.9514266Z       [32m  [32m✔[39m[0m[90m empty virtual with Model.populate (gh-5331)[0m
2025-04-11T19:23:35.9826844Z       [32m  [32m✔[39m[0m[90m virtual populate in single nested doc (gh-4715)[0m
2025-04-11T19:23:36.0061237Z       [32m  [32m✔[39m[0m[90m populate with missing schema (gh-5364)[0m
2025-04-11T19:23:36.0183274Z       [32m  [32m✔[39m[0m[90m populate with missing schema (gh-5460)[0m
2025-04-11T19:23:36.0663684Z       [32m  [32m✔[39m[0m[90m array underneath non-existent array (gh-6245)[0m
2025-04-11T19:23:36.0977440Z       [32m  [32m✔[39m[0m[90m virtuals with justOne false and foreign field not found (gh-5336)[0m
2025-04-11T19:23:36.1266512Z       [32m  [32m✔[39m[0m[90m virtuals with justOne true and foreign field not found (gh-5336)[0m
2025-04-11T19:23:36.1579446Z       [32m  [32m✔[39m[0m[90m select foreignField automatically (gh-4959)[0m
2025-04-11T19:23:36.1897586Z       [32m  [32m✔[39m[0m[90m does not set `populated()` until populate is done (gh-5564)[0m
2025-04-11T19:23:36.2218698Z       [32m  [32m✔[39m[0m[90m virtual populate toJSON output (gh-5542)[0m
2025-04-11T19:23:36.2532616Z       [32m  [32m✔[39m[0m[90m works if foreignField parent is selected (gh-5037)[0m
2025-04-11T19:23:36.3019760Z       [32m  [32m✔[39m[0m[90m subPopulate under discriminators race condition (gh-5858)[0m
2025-04-11T19:23:36.3328877Z       [32m  [32m✔[39m[0m[90m populating nested discriminator path (gh-5970)[0m
2025-04-11T19:23:36.3774348Z       [32m  [32m✔[39m[0m[90m specify model in populate (gh-4264)[0m
2025-04-11T19:23:36.3848373Z [0m        selectPopulatedFields (gh-5669)[0m
2025-04-11T19:23:36.4145729Z         [32m  [32m✔[39m[0m[90m auto select populated fields (gh-5669) (gh-5685)[0m
2025-04-11T19:23:36.4466074Z         [32m  [32m✔[39m[0m[90m disabling at schema level (gh-6546)[0m
2025-04-11T19:23:36.4818567Z         [32m  [32m✔[39m[0m[90m disabling at global level (gh-6546)[0m
2025-04-11T19:23:36.5154906Z         [32m  [32m✔[39m[0m[90m schema overwrites global (gh-6546)[0m
2025-04-11T19:23:36.5263688Z [0m      populates an array of objects[0m
2025-04-11T19:23:36.5691032Z       [32m  [32m✔[39m[0m[90m subpopulates array w/ space separated path (gh-6284)[0m
2025-04-11T19:23:36.6067472Z       [32m  [32m✔[39m[0m[90m populates array of space separated path objs (gh-6414)[0m
2025-04-11T19:23:36.6813002Z       [32m  [32m✔[39m[0m[90m handles subpopulation with options (gh-6528)[0m[33m (41ms)[0m
2025-04-11T19:23:36.7218892Z       [32m  [32m✔[39m[0m[90m honors top-level match with subPopulation (gh-6451)[0m
2025-04-11T19:23:36.7540228Z       [32m  [32m✔[39m[0m[90m handles embedded discriminator (gh-6487)[0m
2025-04-11T19:23:36.7914706Z       [32m  [32m✔[39m[0m[90m handles virtual embedded discriminator underneath single nested (gh-6571)[0m
2025-04-11T19:23:36.8204041Z       [32m  [32m✔[39m[0m[90m populates undefined nested fields without error (gh-6845)[0m
2025-04-11T19:23:36.8580608Z       [32m  [32m✔[39m[0m[90m populates refPath from array element (gh-6509)[0m
2025-04-11T19:23:36.8672907Z [0m      lean + deep populate (gh-6498)[0m
2025-04-11T19:23:36.9055478Z       [32m  [32m✔[39m[0m[90m document, and subdocuments are not lean by default[0m
2025-04-11T19:23:36.9524302Z       [32m  [32m✔[39m[0m[90m .lean() makes query result, and all populated fields lean[0m
2025-04-11T19:23:36.9956556Z       [32m  [32m✔[39m[0m[90m disabling lean at some populating level reflects on it, and descendants[0m
2025-04-11T19:23:37.0396552Z       [32m  [32m✔[39m[0m[90m enabling lean at some populating level reflects on it, and descendants[0m
2025-04-11T19:23:37.0884835Z       [32m  [32m✔[39m[0m[90m disabling lean on nested population overwrites parent lean[0m
2025-04-11T19:23:37.0967572Z [0m      gh-8247[0m
2025-04-11T19:23:37.1215804Z       [32m  [32m✔[39m[0m[90m checking `populated()` on a document array element (gh-8247)[0m
2025-04-11T19:23:37.1645787Z       [32m  [32m✔[39m[0m[90m updates top-level populated() when pushing elements onto a document array with single populated path (gh-8247) (gh-8265)[0m
2025-04-11T19:23:37.2135675Z       [32m  [32m✔[39m[0m[90m retainNullValues stores `null` in array if foreign doc not found (gh-8293)[0m
2025-04-11T19:23:37.2563895Z       [32m  [32m✔[39m[0m[90m virtual populate with discriminator that has a custom discriminator value (gh-8324)[0m
2025-04-11T19:23:37.3084272Z       [32m  [32m✔[39m[0m[90m virtual populate with multiple `localField` and `foreignField` (gh-6608)[0m[33m (38ms)[0m
2025-04-11T19:23:37.3172181Z [0m      gh-8760[0m
2025-04-11T19:23:37.3431441Z       [32m  [32m✔[39m[0m[90m clone with lean creates identical copies from the same document[0m
2025-04-11T19:23:37.3754506Z       [32m  [32m✔[39m[0m[90m clone with populate and lean makes child lean[0m
2025-04-11T19:23:37.4069993Z       [32m  [32m✔[39m[0m[90m can populate subdocs where one is discriminator and the other is not (gh-8837)[0m
2025-04-11T19:23:37.4416500Z       [32m  [32m✔[39m[0m[90m can populate virtuals defined on child discriminators (gh-8924)[0m
2025-04-11T19:23:37.4509989Z [0m    strictPopulate[0m
2025-04-11T19:23:37.4913764Z     [32m  [32m✔[39m[0m[90m does not throw an error when using strictPopulate on a nested path (gh-13863)[0m
2025-04-11T19:23:37.5253887Z     [32m  [32m✔[39m[0m[90m reports full path when throwing `strictPopulate` error with deep populate (gh-10923)[0m
2025-04-11T19:23:37.5541633Z     [32m  [32m✔[39m[0m[90m propagates toObject options to populate virtuals (gh-13325)[0m
2025-04-11T19:23:37.5759507Z     [32m  [32m✔[39m[0m[90m respects strictPopulate schema option (gh-11290)[0m
2025-04-11T19:23:37.6244463Z     [32m  [32m✔[39m[0m[90m allows overwriting localField and foreignField when populating a virtual gh-6963[0m[33m (39ms)[0m
2025-04-11T19:23:37.6396226Z 
2025-04-11T19:23:37.6397093Z [0m  utils[0m
2025-04-11T19:23:37.6431755Z   [32m  [32m✔[39m[0m[90m deepEquals on ObjectIds[0m
2025-04-11T19:23:37.6475934Z   [32m  [32m✔[39m[0m[90m deepEquals on maps (gh-9549)[0m
2025-04-11T19:23:37.6538722Z   [32m  [32m✔[39m[0m[90m deepEquals on MongooseDocumentArray works[0m
2025-04-11T19:23:37.6584233Z   [32m  [32m✔[39m[0m[90m deepEquals with MongooseBuffer[0m
2025-04-11T19:23:37.6628520Z   [32m  [32m✔[39m[0m[90m `deepEqual` treats objects with different order of keys as different (gh-9571)[0m
2025-04-11T19:23:37.6672016Z   [32m  [32m✔[39m[0m[90m deepEqual on arrays and non-arrays (gh-11417)[0m
2025-04-11T19:23:37.6716011Z   [32m  [32m✔[39m[0m[90m array.flatten[0m
2025-04-11T19:23:37.6760427Z   [32m  [32m✔[39m[0m[90m array.unique[0m
2025-04-11T19:23:37.6782270Z [0m    ActiveRoster[0m
2025-04-11T19:23:37.6826830Z     [32m  [32m✔[39m[0m[90m should detect a path as required if it has been required[0m
2025-04-11T19:23:37.6892014Z     [32m  [32m✔[39m[0m[90m should detect a path as inited if it has been inited[0m
2025-04-11T19:23:37.6957005Z     [32m  [32m✔[39m[0m[90m should detect a path as modified[0m
2025-04-11T19:23:37.7022177Z     [32m  [32m✔[39m[0m[90m should remove a path from an old state upon a state change[0m
2025-04-11T19:23:37.7088115Z     [32m  [32m✔[39m[0m[90m forEach should be able to iterate through the paths belonging to one state[0m
2025-04-11T19:23:37.7153650Z     [32m  [32m✔[39m[0m[90m forEach should be able to iterate through the paths in the union of two or more states[0m
2025-04-11T19:23:37.7219137Z     [32m  [32m✔[39m[0m[90m forEach should iterate through all paths that have any state if given no state arguments[0m
2025-04-11T19:23:37.7284610Z     [32m  [32m✔[39m[0m[90m should be able to detect if at least one path exists in a set of states[0m
2025-04-11T19:23:37.7350570Z     [32m  [32m✔[39m[0m[90m should be able to `map` over the set of paths in a given state[0m
2025-04-11T19:23:37.7416220Z     [32m  [32m✔[39m[0m[90m should `map` over all states' paths if no states are specified in a `map` invocation[0m
2025-04-11T19:23:37.7459132Z [0m    merge[0m
2025-04-11T19:23:37.7504056Z     [32m  [32m✔[39m[0m[90m merges two objects together without overriding properties & methods[0m
2025-04-11T19:23:37.7547138Z [0m    mergeClone[0m
2025-04-11T19:23:37.7591645Z     [32m  [32m✔[39m[0m[90m handles object with valueOf() (gh-6059)[0m
2025-04-11T19:23:37.7657198Z     [32m  [32m✔[39m[0m[90m copies dates correctly (gh-6145)[0m
2025-04-11T19:23:37.7700611Z [0m    errorToPOJO(...)[0m
2025-04-11T19:23:37.7747177Z     [32m  [32m✔[39m[0m[90m converts an error to a POJO[0m
2025-04-11T19:23:37.7813337Z     [32m  [32m✔[39m[0m[90m throws an error when argument is not an error object[0m
2025-04-11T19:23:37.7880938Z     [32m  [32m✔[39m[0m[90m works with classes that extend `Error`[0m
2025-04-11T19:23:37.7923990Z [0m    toCollectionName[0m
2025-04-11T19:23:37.7967909Z     [32m  [32m✔[39m[0m[90m returns the same name for system.profile[0m
2025-04-11T19:23:37.8032973Z     [32m  [32m✔[39m[0m[90m returns the same name for system.indexes[0m
2025-04-11T19:23:37.8099356Z     [32m  [32m✔[39m[0m[90m throws an error when name is not a string[0m
2025-04-11T19:23:37.8165222Z     [32m  [32m✔[39m[0m[90m throws an error when name is an empty string[0m
2025-04-11T19:23:37.8230426Z     [32m  [32m✔[39m[0m[90m uses the pluralize function when provided[0m
2025-04-11T19:23:37.8284089Z 
2025-04-11T19:23:37.8284456Z [0m  types.embeddeddocument[0m
2025-04-11T19:23:37.8345235Z   [32m  [32m✔[39m[0m[90m returns a proper ownerDocument (gh-3589)[0m
2025-04-11T19:23:37.8377319Z 
2025-04-11T19:23:37.8377618Z [0m  schema alias option[0m
2025-04-11T19:23:37.8564160Z   [32m  [32m✔[39m[0m[90m works with all basic schema types[0m
2025-04-11T19:23:37.8742963Z   [32m  [32m✔[39m[0m[90m works with nested schema types[0m
2025-04-11T19:23:37.8812760Z   [32m  [32m✔[39m[0m[90m throws when alias option is invalid[0m
2025-04-11T19:23:37.8871741Z   [32m  [32m✔[39m[0m[90m with add() (gh-6593)[0m
2025-04-11T19:23:37.8938576Z   [32m  [32m✔[39m[0m[90m nested aliases (gh-6671)[0m
2025-04-11T19:23:37.9001605Z   [32m  [32m✔[39m[0m[90m array of aliases (gh-12368)[0m
2025-04-11T19:23:37.9103313Z   [32m  [32m✔[39m[0m[90m alias() method (gh-12368)[0m
2025-04-11T19:23:37.9163091Z   [32m  [32m✔[39m[0m[90m supports passing the alias name for an index (gh-13276)[0m
2025-04-11T19:23:37.9329060Z   [32m  [32m✔[39m[0m[90m should disable the id virtual entirely if there's a field with alias `id` gh-13650[0m
2025-04-11T19:23:37.9401624Z 
2025-04-11T19:23:37.9436662Z [0m  collections: capped:[0m
2025-04-11T19:23:37.9437412Z   [32m  [32m✔[39m[0m[90m schemas should have option size[0m
2025-04-11T19:23:38.0606536Z   [32m  [32m✔[39m[0m[90m creation[0m[31m (113ms)[0m
2025-04-11T19:23:38.0791496Z   [32m  [32m✔[39m[0m[90m skips when setting autoCreate to false (gh-8566)[0m
2025-04-11T19:23:38.0850599Z 
2025-04-11T19:23:38.0851373Z [0m  query middleware[0m
2025-04-11T19:23:38.1069638Z   [32m  [32m✔[39m[0m[90m has a pre find hook[0m
2025-04-11T19:23:38.1305789Z   [32m  [32m✔[39m[0m[90m has post find hooks[0m
2025-04-11T19:23:38.1565306Z   [32m  [32m✔[39m[0m[90m works when using a chained query builder[0m
2025-04-11T19:23:38.1798594Z   [32m  [32m✔[39m[0m[90m has separate pre-findOne() and post-findOne() hooks[0m
2025-04-11T19:23:38.2043933Z   [32m  [32m✔[39m[0m[90m with regular expression (gh-6680)[0m
2025-04-11T19:23:38.2279794Z   [32m  [32m✔[39m[0m[90m can populate in pre hook[0m
2025-04-11T19:23:38.2528160Z   [32m  [32m✔[39m[0m[90m can populate in post hook[0m
2025-04-11T19:23:38.2765719Z   [32m  [32m✔[39m[0m[90m has hooks for countDocuments()[0m
2025-04-11T19:23:38.3009455Z   [32m  [32m✔[39m[0m[90m has hooks for estimatedDocumentCount()[0m
2025-04-11T19:23:38.3269846Z   [32m  [32m✔[39m[0m[90m updateOne() (gh-3997)[0m
2025-04-11T19:23:38.3517395Z   [32m  [32m✔[39m[0m[90m updateMany() (gh-3997)[0m
2025-04-11T19:23:38.3756269Z   [32m  [32m✔[39m[0m[90m deleteOne() (gh-7195)[0m
2025-04-11T19:23:38.3998304Z   [32m  [32m✔[39m[0m[90m deleteMany() (gh-7195)[0m
2025-04-11T19:23:38.4269679Z   [32m  [32m✔[39m[0m[90m distinct (gh-5938)[0m
2025-04-11T19:23:38.4448779Z   [32m  [32m✔[39m[0m[90m error handlers (gh-2284)[0m
2025-04-11T19:23:38.4525913Z   [32m  [32m✔[39m[0m[90m error handlers for validate (gh-4885)[0m
2025-04-11T19:23:38.4738442Z   [32m  [32m✔[39m[0m[90m error handlers with findOneAndUpdate and passRawResult (gh-4836)[0m
2025-04-11T19:23:38.4816904Z   [32m  [32m✔[39m[0m[90m error handlers with findOneAndUpdate error and passRawResult (gh-4836)[0m
2025-04-11T19:23:38.4928744Z   [32m  [32m✔[39m[0m[90m error handlers with error from pre hook (gh-4927)[0m
2025-04-11T19:23:38.5037143Z   [32m  [32m✔[39m[0m[90m with clone() (gh-5153)[0m
2025-04-11T19:23:38.5141076Z   [32m  [32m✔[39m[0m[90m doesnt double call post(regexp) with updateOne (gh-7418)[0m
2025-04-11T19:23:38.5351597Z   [32m  [32m✔[39m[0m[90m deleteOne with `document: true` but no `query` (gh-8555)[0m
2025-04-11T19:23:38.5533450Z   [32m  [32m✔[39m[0m[90m allows registering middleware for all queries with regexp (gh-9190)[0m
2025-04-11T19:23:38.5616993Z   [32m  [32m✔[39m[0m[90m allows skipping the wrapped function with `skipMiddlewareFunction()` (gh-11426)[0m
2025-04-11T19:23:38.5858099Z   [32m  [32m✔[39m[0m[90m allows overwriting result with `overwriteMiddlewareResult()` (gh-11426)[0m
2025-04-11T19:23:38.5934063Z 
2025-04-11T19:23:38.5934511Z [0m  esm:[0m
2025-04-11T19:23:38.5968074Z   [32m  [32m✔[39m[0m[90m should have default export[0m
2025-04-11T19:23:38.6011947Z   [32m  [32m✔[39m[0m[90m should have mongoose export[0m
2025-04-11T19:23:38.6043706Z 
2025-04-11T19:23:38.6044769Z [0m  document.populate[0m
2025-04-11T19:23:38.6350379Z   [32m  [32m✔[39m[0m[90m works with await[0m
2025-04-11T19:23:38.6682229Z   [32m  [32m✔[39m[0m[90m populating using space delimited paths with options[0m
2025-04-11T19:23:38.6980942Z   [32m  [32m✔[39m[0m[90m using multiple populate calls[0m
2025-04-11T19:23:38.7283376Z   [32m  [32m✔[39m[0m[90m with custom model selection[0m
2025-04-11T19:23:38.7564501Z   [32m  [32m✔[39m[0m[90m one path, model selection as second argument[0m
2025-04-11T19:23:38.7903407Z   [32m  [32m✔[39m[0m[90m multiple paths, model selection as second argument[0m
2025-04-11T19:23:38.8214944Z   [32m  [32m✔[39m[0m[90m multiple paths, mixed argument types[0m
2025-04-11T19:23:38.8507168Z   [32m  [32m✔[39m[0m[90m multiple paths, multiple options[0m
2025-04-11T19:23:38.8793196Z   [32m  [32m✔[39m[0m[90m a property not in schema[0m
2025-04-11T19:23:38.9058766Z   [32m  [32m✔[39m[0m[90m of empty array[0m
2025-04-11T19:23:38.9331758Z   [32m  [32m✔[39m[0m[90m of array of null/undefined[0m
2025-04-11T19:23:38.9611860Z   [32m  [32m✔[39m[0m[90m of null property[0m
2025-04-11T19:23:38.9894813Z   [32m  [32m✔[39m[0m[90m String _ids[0m
2025-04-11T19:23:39.0335960Z   [32m  [32m✔[39m[0m[90m Buffer _ids[0m
2025-04-11T19:23:39.0634939Z   [32m  [32m✔[39m[0m[90m Number _ids[0m
2025-04-11T19:23:39.0919826Z   [32m  [32m✔[39m[0m[90m depopulates when setting `_id` (gh-3308)[0m
2025-04-11T19:23:39.1268364Z   [32m  [32m✔[39m[0m[90m does not allow you to call populate() on nested docs (gh-4552)[0m
2025-04-11T19:23:39.1756456Z   [32m  [32m✔[39m[0m[90m handles pulling from populated array (gh-3579)[0m
2025-04-11T19:23:39.2264386Z   [32m  [32m✔[39m[0m[90m populated() works with nested subdocs (gh-7685)[0m
2025-04-11T19:23:39.3048077Z   [32m  [32m✔[39m[0m[90m works with single strings (gh-11160)[0m[33m (51ms)[0m
2025-04-11T19:23:39.3542350Z   [32m  [32m✔[39m[0m[90m works when populating a nested document inside an array parent (gh-14435)[0m
2025-04-11T19:23:39.4100915Z   [32m  [32m✔[39m[0m[90m supports populate with ordered option (gh-15231)[0m
2025-04-11T19:23:39.4640824Z   [32m  [32m✔[39m[0m[90m handles re-populating map of array of refs (gh-9359)[0m
2025-04-11T19:23:39.4689675Z [0m    populating two paths[0m
2025-04-11T19:23:39.4979852Z     [32m  [32m✔[39m[0m[90m with space delmited string works[0m
2025-04-11T19:23:39.5048356Z [0m    sub-level properties[0m
2025-04-11T19:23:39.5334287Z     [32m  [32m✔[39m[0m[90m with string arg[0m
2025-04-11T19:23:39.5401151Z [0m    of new document[0m
2025-04-11T19:23:39.5678227Z     [32m  [32m✔[39m[0m[90m should save just the populated _id (gh-1442)[0m
2025-04-11T19:23:39.5744025Z [0m    gh-2214[0m
2025-04-11T19:23:39.6169189Z     [32m  [32m✔[39m[0m[90m should return a real document array when populating[0m
2025-04-11T19:23:39.6239019Z [0m    gh-7889[0m
2025-04-11T19:23:39.6750942Z     [32m  [32m✔[39m[0m[90m should save item added to array after populating the array[0m
2025-04-11T19:23:39.6821179Z [0m    depopulate[0m
2025-04-11T19:23:39.7332968Z     [32m  [32m✔[39m[0m[90m can depopulate specific path (gh-2509)[0m
2025-04-11T19:23:39.7858001Z     [32m  [32m✔[39m[0m[90m depopulates all (gh-6073)[0m
2025-04-11T19:23:39.8262363Z     [32m  [32m✔[39m[0m[90m doesn't throw when called on a doc that is not populated (gh-6075)[0m
2025-04-11T19:23:39.8820465Z     [32m  [32m✔[39m[0m[90m depopulates virtuals (gh-6075)[0m
2025-04-11T19:23:39.9281334Z     [32m  [32m✔[39m[0m[90m depopulates field with empty array (gh-7740)[0m
2025-04-11T19:23:39.9867561Z     [32m  [32m✔[39m[0m[90m depopulates after pushing manually populated (gh-2509)[0m
2025-04-11T19:23:39.9939478Z [0m    #populated() with virtuals (gh-7440)[0m
2025-04-11T19:23:40.0361314Z     [32m  [32m✔[39m[0m[90m works with justOne: false[0m
2025-04-11T19:23:40.0835971Z     [32m  [32m✔[39m[0m[90m works with justOne: true[0m
2025-04-11T19:23:40.0910509Z [0m    #populated() with getters on embedded schema (gh-7521)[0m
2025-04-11T19:23:40.1401873Z     [32m  [32m✔[39m[0m[90m works with populate[0m
2025-04-11T19:23:40.1510487Z 
2025-04-11T19:23:40.1511082Z [0m  document[0m
2025-04-11T19:23:40.1563622Z   [32m  [32m✔[39m[0m[90m isSelected()[0m
2025-04-11T19:23:40.1610632Z   [32m  [32m✔[39m[0m[90m isDirectSelected (gh-5063)[0m
2025-04-11T19:23:40.1642708Z 
2025-04-11T19:23:40.1643202Z [0m  SchemaString[0m
2025-04-11T19:23:40.1684462Z   [32m  [32m✔[39m[0m[90m works when RegExp has global flag set (gh-9287)[0m
2025-04-11T19:23:40.1716186Z 
2025-04-11T19:23:40.1716563Z [0m  types.subdocument[0m
2025-04-11T19:23:40.1786019Z   [32m  [32m✔[39m[0m[90m returns a proper ownerDocument (gh-3589)[0m
2025-04-11T19:23:40.1843404Z   [32m  [32m✔[39m[0m[90m not setting timestamps in subdocuments[0m
2025-04-11T19:23:40.1898448Z   [32m  [32m✔[39m[0m[90m respects schematype-level minimize (gh-15313)[0m
2025-04-11T19:23:40.1912124Z [0m    #isModified[0m
2025-04-11T19:23:40.1964652Z     [32m  [32m✔[39m[0m[90m defers to parent isModified (gh-8223)[0m
2025-04-11T19:23:40.2060340Z 
2025-04-11T19:23:40.2060870Z [0m  types.document[0m
2025-04-11T19:23:40.2117783Z   [32m  [32m✔[39m[0m[90m test that validate sets errors[0m
2025-04-11T19:23:40.2152717Z   [32m  [32m✔[39m[0m[90m objects can be passed to #set[0m
2025-04-11T19:23:40.2198245Z   [32m  [32m✔[39m[0m[90m Subdocuments can be passed to #set[0m
2025-04-11T19:23:40.2437257Z   [32m  [32m✔[39m[0m[90m Subdocument#remove (gh-531)[0m
2025-04-11T19:23:40.2458738Z [0m    setting nested objects[0m
2025-04-11T19:23:40.2563938Z     [32m  [32m✔[39m[0m[90m works (gh-1394)[0m
2025-04-11T19:23:40.2646777Z 
2025-04-11T19:23:40.2647186Z [0m  model aggregate[0m
2025-04-11T19:23:40.2872947Z [0m    works[0m
2025-04-11T19:23:40.2928501Z     [32m  [32m✔[39m[0m[90m when return promise[0m
2025-04-11T19:23:40.3002994Z     [32m  [32m✔[39m[0m[90m with arrays[0m
2025-04-11T19:23:40.3080010Z     [32m  [32m✔[39m[0m[90m with Aggregate syntax[0m
2025-04-11T19:23:40.3152593Z     [32m  [32m✔[39m[0m[90m with Aggregate syntax if callback not provided[0m
2025-04-11T19:23:40.3217722Z     [32m  [32m✔[39m[0m[90m when returning Aggregate[0m
2025-04-11T19:23:40.3346127Z     [32m  [32m✔[39m[0m[90m can use helper for $out[0m
2025-04-11T19:23:40.3423175Z 
2025-04-11T19:23:40.3424243Z [0m  model[0m
2025-04-11T19:23:40.3436168Z [0m    discriminator()[0m
2025-04-11T19:23:40.3461205Z [0m      pushing discriminated objects[0m
2025-04-11T19:23:40.3662880Z       [32m  [32m✔[39m[0m[90m into non-discriminated arrays works[0m
2025-04-11T19:23:40.4120357Z [0m      find[0m
2025-04-11T19:23:40.4448025Z       [32m  [32m✔[39m[0m[90m hydrates correct models[0m
2025-04-11T19:23:40.4898346Z       [32m  [32m✔[39m[0m[90m hydrates correct models when fields selection set as string[0m
2025-04-11T19:23:40.5287919Z       [32m  [32m✔[39m[0m[90m hydrates correct models when fields selection set as object[0m
2025-04-11T19:23:40.5699244Z       [32m  [32m✔[39m[0m[90m casts underneath $or if discriminator key in filter (gh-9018)[0m
2025-04-11T19:23:40.6072068Z       [32m  [32m✔[39m[0m[90m discriminator model only finds documents of its type when fields selection set as string inclusive[0m
2025-04-11T19:23:40.6416956Z       [32m  [32m✔[39m[0m[90m discriminator model only finds documents of its type when fields selection set as string exclusive[0m
2025-04-11T19:23:40.6771088Z       [32m  [32m✔[39m[0m[90m discriminator model only finds documents of its type when fields selection set as empty string[0m
2025-04-11T19:23:40.7124606Z       [32m  [32m✔[39m[0m[90m discriminator model only finds documents of its type when fields selection set as object inclusive[0m
2025-04-11T19:23:40.7539844Z       [32m  [32m✔[39m[0m[90m discriminator model only finds documents of its type when fields selection set as object exclusive[0m
2025-04-11T19:23:40.7883715Z       [32m  [32m✔[39m[0m[90m discriminator model only finds documents of its type when fields selection set as empty object[0m
2025-04-11T19:23:40.7946437Z [0m        discriminator model only finds documents of its type[0m
2025-04-11T19:23:40.7957110Z [0m          using "ModelDiscriminator#findById"[0m
2025-04-11T19:23:40.8319072Z           [32m  [32m✔[39m[0m[90m to find a document of the appropriate discriminator[0m
2025-04-11T19:23:40.8414215Z [0m          using "ModelDiscriminator#find"[0m
2025-04-11T19:23:40.8709548Z           [32m  [32m✔[39m[0m[90m to find documents of the appropriate discriminator[0m
2025-04-11T19:23:40.8827468Z [0m      findOne[0m
2025-04-11T19:23:40.9116141Z       [32m  [32m✔[39m[0m[90m when selecting `select: false` field (gh-4629) (gh-11546)[0m
2025-04-11T19:23:40.9554920Z       [32m  [32m✔[39m[0m[90m select: false in base schema (gh-5448)[0m
2025-04-11T19:23:40.9923446Z       [32m  [32m✔[39m[0m[90m hydrates correct model[0m
2025-04-11T19:23:41.0288024Z       [32m  [32m✔[39m[0m[90m hydrates correct model when fields selection set as string inclusive[0m
2025-04-11T19:23:41.0722382Z       [32m  [32m✔[39m[0m[90m hydrates correct model when fields selection set as string exclusive[0m
2025-04-11T19:23:41.1084193Z       [32m  [32m✔[39m[0m[90m hydrates correct model when fields selection set as empty string[0m
2025-04-11T19:23:41.1461297Z       [32m  [32m✔[39m[0m[90m hydrates correct model when fields selection set as object inclusive[0m
2025-04-11T19:23:41.1819322Z       [32m  [32m✔[39m[0m[90m hydrates correct model when fields selection set as object exclusive[0m
2025-04-11T19:23:41.2186107Z       [32m  [32m✔[39m[0m[90m hydrates correct model when fields selection set as empty object[0m
2025-04-11T19:23:41.2550716Z       [32m  [32m✔[39m[0m[90m discriminator model only finds a document of its type[0m
2025-04-11T19:23:41.2945535Z       [32m  [32m✔[39m[0m[90m discriminator model only finds a document of its type when fields selection set as string inclusive[0m
2025-04-11T19:23:41.3318383Z       [32m  [32m✔[39m[0m[90m discriminator model only finds a document of its type when fields selection set as string exclusive[0m
2025-04-11T19:23:41.3718938Z       [32m  [32m✔[39m[0m[90m discriminator model only finds a document of its type when fields selection set as empty string[0m
2025-04-11T19:23:41.4109481Z       [32m  [32m✔[39m[0m[90m discriminator model only finds a document of its type when fields selection set as object inclusive[0m
2025-04-11T19:23:41.4491664Z       [32m  [32m✔[39m[0m[90m discriminator model only finds a document of its type when fields selection set as object exclusive[0m
2025-04-11T19:23:41.4875450Z       [32m  [32m✔[39m[0m[90m discriminator model only finds a document of its type when fields selection set as empty object[0m
2025-04-11T19:23:41.4953254Z [0m      findOneAndUpdate[0m
2025-04-11T19:23:41.5279904Z       [32m  [32m✔[39m[0m[90m does not update models of other types[0m
2025-04-11T19:23:41.5643759Z       [32m  [32m✔[39m[0m[90m updates models of its own type[0m
2025-04-11T19:23:41.6002265Z       [32m  [32m✔[39m[0m[90m base model modifies any event type[0m
2025-04-11T19:23:41.6078992Z [0m      population/reference mapping[0m
2025-04-11T19:23:41.6611823Z       [32m  [32m✔[39m[0m[90m populates and hydrates correct models[0m[33m (46ms)[0m
2025-04-11T19:23:41.7241577Z       [32m  [32m✔[39m[0m[90m reference in child schemas (gh-2719)[0m[33m (50ms)[0m
2025-04-11T19:23:41.7749541Z       [32m  [32m✔[39m[0m[90m populates parent array reference (gh-4643)[0m[33m (38ms)[0m
2025-04-11T19:23:41.8222205Z       [32m  [32m✔[39m[0m[90m updating discriminator key (gh-5613)[0m
2025-04-11T19:23:41.8684692Z       [32m  [32m✔[39m[0m[90m disallows updating discriminator key using `$unset` (gh-11456)[0m
2025-04-11T19:23:41.9148895Z       [32m  [32m✔[39m[0m[90m allows updating discriminator key using `overwriteDiscriminatorKey` with `strict: throw` (gh-12513)[0m
2025-04-11T19:23:41.9621807Z       [32m  [32m✔[39m[0m[90m allows updating document where discriminator key is present in payload but have the same value (13055)[0m
2025-04-11T19:23:42.0298380Z       [32m  [32m✔[39m[0m[90m reference in child schemas (gh-2719-2)[0m
2025-04-11T19:23:42.0904052Z       [32m  [32m✔[39m[0m[90m correctly populates doc with nonexistent discriminator key (gh-10082)[0m[33m (48ms)[0m
2025-04-11T19:23:42.0984814Z [0m      deleteOne and deleteMany (gh-8471)[0m
2025-04-11T19:23:42.1514267Z       [32m  [32m✔[39m[0m[90m adds discriminator filter if no conditions passed[0m[33m (46ms)[0m
2025-04-11T19:23:42.1591710Z [0m      aggregate[0m
2025-04-11T19:23:42.1602727Z [0m        using "RootModel#aggregate"[0m
2025-04-11T19:23:42.2009571Z         [32m  [32m✔[39m[0m[90m to aggregate documents of all discriminators[0m
2025-04-11T19:23:42.2095823Z [0m        using "ModelDiscriminator#aggregate"[0m
2025-04-11T19:23:42.2506639Z         [32m  [32m✔[39m[0m[90m only aggregates documents of the appropriate discriminator[0m
2025-04-11T19:23:42.3162449Z         [32m  [32m✔[39m[0m[90m hides fields when discriminated model has select (gh-4991)[0m
2025-04-11T19:23:42.3824839Z         [32m  [32m✔[39m[0m[90m doesnt exclude field if slice (gh-4991)[0m
2025-04-11T19:23:42.4283170Z         [32m  [32m✔[39m[0m[90m merges the first pipeline stages if applicable[0m
2025-04-11T19:23:42.4431270Z 
2025-04-11T19:23:42.4432371Z [0m  model query casting[0m
2025-04-11T19:23:42.4598887Z   [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:23:42.4694365Z   [32m  [32m✔[39m[0m[90m returns cast errors[0m
2025-04-11T19:23:42.4958126Z   [32m  [32m✔[39m[0m[90m casts $modifiers[0m
2025-04-11T19:23:42.5188708Z   [32m  [32m✔[39m[0m[90m casts $in values of arrays (gh-199)[0m
2025-04-11T19:23:42.5493567Z   [32m  [32m✔[39m[0m[90m casts $in values of arrays with single item instead of array (gh-3238)[0m
2025-04-11T19:23:42.5830020Z   [32m  [32m✔[39m[0m[90m casts $nin values of arrays (gh-232)[0m
2025-04-11T19:23:42.6057908Z   [32m  [32m✔[39m[0m[90m works when finding by Date (gh-204)[0m
2025-04-11T19:23:42.6265993Z   [32m  [32m✔[39m[0m[90m works with $type matching[0m
2025-04-11T19:23:42.6476157Z   [32m  [32m✔[39m[0m[90m works when finding Boolean with $in (gh-998)[0m
2025-04-11T19:23:42.6674901Z   [32m  [32m✔[39m[0m[90m works when finding Boolean with $ne (gh-1093)[0m
2025-04-11T19:23:42.6754500Z   [32m  [32m✔[39m[0m[90m properly casts $and (gh-1180)[0m
2025-04-11T19:23:42.7021949Z   [32m  [32m✔[39m[0m[90m works with $all (gh-3394)[0m
2025-04-11T19:23:42.7113263Z   [32m  [32m✔[39m[0m[90m date with $not + $type (gh-4632)[0m
2025-04-11T19:23:42.7282026Z   [32m  [32m✔[39m[0m[90m setOnInsert with custom type (gh-5126)[0m
2025-04-11T19:23:42.7581074Z   [32m  [32m✔[39m[0m[90m lowercase in query (gh-4569)[0m
2025-04-11T19:23:42.7679830Z   [32m  [32m✔[39m[0m[90m runSettersOnQuery only once on find (gh-5434)[0m
2025-04-11T19:23:42.7833991Z   [32m  [32m✔[39m[0m[90m setters run only once on findOne (gh-6157)[0m
2025-04-11T19:23:42.8178953Z   [32m  [32m✔[39m[0m[90m runSettersOnQuery as query option (gh-5350)[0m
2025-04-11T19:23:42.8424203Z   [32m  [32m✔[39m[0m[90m _id = 0 (gh-4610)[0m
2025-04-11T19:23:42.8518670Z   [32m  [32m✔[39m[0m[90m converts to CastError (gh-6803)[0m
2025-04-11T19:23:42.8882466Z   [32m  [32m✔[39m[0m[90m minDistance (gh-4197)[0m
2025-04-11T19:23:42.9116581Z   [32m  [32m✔[39m[0m[90m array ops don't break with strict:false (gh-6952)[0m
2025-04-11T19:23:42.9352946Z   [32m  [32m✔[39m[0m[90m should not throw a cast error when dealing with an array of an array of strings in combination with $elemMatch and $not (gh-13880)[0m
2025-04-11T19:23:42.9626604Z   [32m  [32m✔[39m[0m[90m should not throw a cast error when dealing with an array of objects in combination with $elemMatch (gh-13974)[0m
2025-04-11T19:23:42.9874579Z   [32m  [32m✔[39m[0m[90m should not throw a cast error when dealing with an array of objects in combination with $elemMatch and nested $and[0m
2025-04-11T19:23:42.9919179Z [0m    $near[0m
2025-04-11T19:23:43.0121426Z     [32m  [32m✔[39m[0m[90m with arrays[0m
2025-04-11T19:23:43.0350660Z     [32m  [32m✔[39m[0m[90m with objects[0m
2025-04-11T19:23:43.0584395Z     [32m  [32m✔[39m[0m[90m with nested objects[0m
2025-04-11T19:23:43.0654965Z [0m    $nearSphere[0m
2025-04-11T19:23:43.0854025Z     [32m  [32m✔[39m[0m[90m with arrays[0m
2025-04-11T19:23:43.1084160Z     [32m  [32m✔[39m[0m[90m with objects[0m
2025-04-11T19:23:43.1338148Z     [32m  [32m✔[39m[0m[90m with nested objects[0m
2025-04-11T19:23:43.1405536Z [0m    $within[0m
2025-04-11T19:23:43.1416406Z [0m      $centerSphere[0m
2025-04-11T19:23:43.1608247Z       [32m  [32m✔[39m[0m[90m with arrays[0m
2025-04-11T19:23:43.1855672Z       [32m  [32m✔[39m[0m[90m with objects[0m
2025-04-11T19:23:43.2264265Z       [32m  [32m✔[39m[0m[90m with nested objects[0m
2025-04-11T19:23:43.2346903Z [0m      $center[0m
2025-04-11T19:23:43.2552673Z       [32m  [32m✔[39m[0m[90m with arrays[0m
2025-04-11T19:23:43.2814319Z       [32m  [32m✔[39m[0m[90m with objects[0m
2025-04-11T19:23:43.3071774Z       [32m  [32m✔[39m[0m[90m with nested objects[0m
2025-04-11T19:23:43.3152125Z [0m      $polygon[0m
2025-04-11T19:23:43.3367488Z       [32m  [32m✔[39m[0m[90m with arrays[0m
2025-04-11T19:23:43.3634417Z       [32m  [32m✔[39m[0m[90m with objects[0m
2025-04-11T19:23:43.3897030Z       [32m  [32m✔[39m[0m[90m with nested objects[0m
2025-04-11T19:23:43.3976920Z [0m      $box[0m
2025-04-11T19:23:43.4189753Z       [32m  [32m✔[39m[0m[90m with arrays[0m
2025-04-11T19:23:43.4467997Z       [32m  [32m✔[39m[0m[90m with objects[0m
2025-04-11T19:23:43.4756942Z       [32m  [32m✔[39m[0m[90m with nested objects[0m
2025-04-11T19:23:43.4853748Z [0m    $options[0m
2025-04-11T19:23:43.4923758Z     [32m  [32m✔[39m[0m[90m works on arrays gh-1462[0m
2025-04-11T19:23:43.5052286Z     [32m  [32m✔[39m[0m[90m does not cast with uppercase (gh-7800)[0m
2025-04-11T19:23:43.5172523Z [0m    $elemMatch[0m
2025-04-11T19:23:43.5339793Z     [32m  [32m✔[39m[0m[90m should cast String to ObjectId in $elemMatch[0m
2025-04-11T19:23:43.5592481Z     [32m  [32m✔[39m[0m[90m should cast String to ObjectId in $elemMatch inside $not[0m
2025-04-11T19:23:43.5861176Z     [32m  [32m✔[39m[0m[90m should cast subdoc _id typed as String to String in $elemMatch gh3719[0m
2025-04-11T19:23:43.6105090Z     [32m  [32m✔[39m[0m[90m should cast subdoc _id typed as String to String in $elemMatch inside $not gh3719[0m
2025-04-11T19:23:43.6370741Z     [32m  [32m✔[39m[0m[90m casts $nor within $elemMatch (gh-9479)[0m
2025-04-11T19:23:43.6476452Z 
2025-04-11T19:23:43.6477037Z [0m  schema.onthefly[0m
2025-04-11T19:23:43.6529211Z   [32m  [32m✔[39m[0m[90m setting should cache the schema type and cast values appropriately[0m
2025-04-11T19:23:43.6656189Z   [32m  [32m✔[39m[0m[90m should be local to the particular document[0m
2025-04-11T19:23:43.6883815Z   [32m  [32m✔[39m[0m[90m querying a document that had an on the fly schema should work[0m
2025-04-11T19:23:43.6958611Z   [32m  [32m✔[39m[0m[90m on the fly Embedded Array schemas should cast properly[0m
2025-04-11T19:23:43.7200521Z   [32m  [32m✔[39m[0m[90m on the fly Embedded Array schemas should get from a fresh queried document properly[0m
2025-04-11T19:23:43.7272455Z   [32m  [32m✔[39m[0m[90m casts on get() (gh-2360)[0m
2025-04-11T19:23:43.7391303Z 
2025-04-11T19:23:43.7392348Z [0m  timestamps[0m
2025-04-11T19:23:43.7592343Z   [32m  [32m✔[39m[0m[90m does not override timestamp params defined in schema (gh-4868)[0m
2025-04-11T19:23:43.7784706Z   [32m  [32m✔[39m[0m[90m updatedAt without createdAt (gh-5598)[0m
2025-04-11T19:23:43.7979767Z   [32m  [32m✔[39m[0m[90m updatedAt without createdAt for nested (gh-5598)[0m
2025-04-11T19:23:43.8167609Z   [32m  [32m✔[39m[0m[90m nested paths (gh-4503)[0m
2025-04-11T19:23:43.8356384Z   [32m  [32m✔[39m[0m[90m does not override nested timestamp params defined in schema (gh-4868)[0m
2025-04-11T19:23:43.8806622Z   [32m  [32m✔[39m[0m[90m does not override timestamps in nested schema (gh-4868)[0m
2025-04-11T19:23:43.8977818Z   [32m  [32m✔[39m[0m[90m no timestamps added when parent/child timestamps explicitly false (gh-7202)[0m
2025-04-11T19:23:43.9144163Z   [32m  [32m✔[39m[0m[90m avoids calling createdAt getters when setting updatedAt (gh-7496)[0m
2025-04-11T19:23:43.9330768Z   [32m  [32m✔[39m[0m[90m handles custom statics that conflict with built-in functions (gh-7698)[0m
2025-04-11T19:23:44.0136726Z   [32m  [32m✔[39m[0m[90m timestamps handle reusing child schemas (gh-7712)[0m[33m (74ms)[0m
2025-04-11T19:23:44.0342803Z   [32m  [32m✔[39m[0m[90m respects timestamps: false in child schema (gh-8007)[0m
2025-04-11T19:23:44.1053566Z   [32m  [32m✔[39m[0m[90m updates updatedAt when calling update without $set (gh-4768)[0m[33m (65ms)[0m
2025-04-11T19:23:44.1267202Z   [32m  [32m✔[39m[0m[90m updates updatedAt when calling update on subchild[0m
2025-04-11T19:23:44.1466488Z   [32m  [32m✔[39m[0m[90m sets timestamps on deeply nested docs on upsert (gh-8894)[0m
2025-04-11T19:23:44.1778124Z   [32m  [32m✔[39m[0m[90m sets timestamps on bulk write without `$set` (gh-9268)[0m
2025-04-11T19:23:44.1956999Z   [32m  [32m✔[39m[0m[90m works with property named "set" (gh-9428)[0m
2025-04-11T19:23:44.2160941Z   [32m  [32m✔[39m[0m[90m should not override createdAt when not selected (gh-4340)[0m
2025-04-11T19:23:44.2337833Z   [32m  [32m✔[39m[0m[90m timestamps with number types (gh-3957)[0m
2025-04-11T19:23:44.2514229Z   [32m  [32m✔[39m[0m[90m timestamps with custom timestamp (gh-3957)[0m
2025-04-11T19:23:44.2686283Z   [32m  [32m✔[39m[0m[90m timestamps with custom timestamp using getter method (gh-3957)[0m
2025-04-11T19:23:44.3005268Z   [32m  [32m✔[39m[0m[90m shouldnt bump updatedAt in single nested subdocs that are not modified (gh-9357)[0m
2025-04-11T19:23:44.3314155Z   [32m  [32m✔[39m[0m[90m bumps updatedAt with mixed $set (gh-9357)[0m
2025-04-11T19:23:44.3489881Z   [32m  [32m✔[39m[0m[90m makes createdAt immutable by default (gh-10139)[0m
2025-04-11T19:23:44.3699034Z   [32m  [32m✔[39m[0m[90m sets createdAt when using $push/$addToSet on path with positional operator (gh-10447)[0m
2025-04-11T19:23:44.3968567Z   [32m  [32m✔[39m[0m[90m sets createdAt when creating new single nested subdoc (gh-11603)[0m
2025-04-11T19:23:44.4185788Z   [32m  [32m✔[39m[0m[90m sets timestamps on sub-schema if parent schema does not have timestamps: true (gh-12119)[0m
2025-04-11T19:23:44.4368921Z   [32m  [32m✔[39m[0m[90m works with insertMany() and embedded discriminators (gh-12150)[0m
2025-04-11T19:23:44.4646754Z   [32m  [32m✔[39m[0m[90m findOneAndUpdate creates subdocuments with timestamps in correct order (gh-12475)[0m
2025-04-11T19:23:44.4858422Z   [32m  [32m✔[39m[0m[90m should avoid setting null update when updating document with timestamps gh-13379[0m
2025-04-11T19:23:44.4902359Z [0m    schema options[0m
2025-04-11T19:23:44.4948307Z     [32m  [32m✔[39m[0m[90m should have createdAt and updatedAt fields[0m
2025-04-11T19:23:44.5031083Z     [32m  [32m✔[39m[0m[90m should have createdAt and updatedAt fields[0m
2025-04-11T19:23:44.5112748Z     [32m  [32m✔[39m[0m[90m should have created and updatedAt fields[0m
2025-04-11T19:23:44.5195323Z     [32m  [32m✔[39m[0m[90m should have created and updatedAt fields[0m
2025-04-11T19:23:44.5276517Z     [32m  [32m✔[39m[0m[90m should have created and updated fields[0m
2025-04-11T19:23:44.5359024Z     [32m  [32m✔[39m[0m[90m should have just createdAt if updatedAt set to falsy[0m
2025-04-11T19:23:44.5440502Z     [32m  [32m✔[39m[0m[90m should have created and updated fields[0m
2025-04-11T19:23:44.5525986Z     [32m  [32m✔[39m[0m[90m TTL index with timestamps (gh-5656)[0m
2025-04-11T19:23:44.5584490Z [0m    auto update createdAt and updatedAt when create/save/update document[0m
2025-04-11T19:23:44.5755098Z     [32m  [32m✔[39m[0m[90m should have fields when create[0m
2025-04-11T19:23:44.5967492Z     [32m  [32m✔[39m[0m[90m sets timestamps on findOneAndUpdate[0m
2025-04-11T19:23:44.6183615Z     [32m  [32m✔[39m[0m[90m sets timestamps on findOneAndReplace (gh-9951)[0m
2025-04-11T19:23:44.6430779Z     [32m  [32m✔[39m[0m[90m sets timestamps on replaceOne (gh-9951)[0m
2025-04-11T19:23:44.6654563Z     [32m  [32m✔[39m[0m[90m should change updatedAt when save[0m
2025-04-11T19:23:44.6881848Z     [32m  [32m✔[39m[0m[90m should not change updatedAt when save with no modifications[0m
2025-04-11T19:23:44.7217310Z     [32m  [32m✔[39m[0m[90m can skip with timestamps: false (gh-7357)[0m
2025-04-11T19:23:44.7548933Z     [32m  [32m✔[39m[0m[90m can skip with `$timestamps(false)` (gh-12117)[0m
2025-04-11T19:23:44.7899709Z     [32m  [32m✔[39m[0m[90m should change updatedAt when findOneAndUpdate[0m
2025-04-11T19:23:44.8237708Z     [32m  [32m✔[39m[0m[90m insertMany with createdAt off (gh-6381)[0m
2025-04-11T19:23:44.8465247Z     [32m  [32m✔[39m[0m[90m should have fields when updateOne[0m
2025-04-11T19:23:44.8701006Z     [32m  [32m✔[39m[0m[90m should change updatedAt when updateOne[0m
2025-04-11T19:23:44.8919400Z     [32m  [32m✔[39m[0m[90m should change updatedAt when updateMany[0m
2025-04-11T19:23:44.9212059Z     [32m  [32m✔[39m[0m[90m nested docs (gh-4049)[0m
2025-04-11T19:23:44.9530641Z     [32m  [32m✔[39m[0m[90m nested docs with push (gh-4049)[0m
2025-04-11T19:23:44.9640321Z 
2025-04-11T19:23:44.9640831Z [0m  queryhelpers[0m
2025-04-11T19:23:44.9652329Z [0m    applyPaths[0m
2025-04-11T19:23:44.9699681Z     [32m  [32m✔[39m[0m[90m adds select: true paths unless excluded using minus path (gh-11694)[0m
2025-04-11T19:23:44.9766128Z     [32m  [32m✔[39m[0m[90m supports nested minus path (gh-11694)[0m
2025-04-11T19:23:44.9819567Z 
2025-04-11T19:23:44.9820072Z [0m  model[0m
2025-04-11T19:23:44.9831762Z [0m    create()[0m
2025-04-11T19:23:45.0032035Z     [32m  [32m✔[39m[0m[90m accepts an array and returns an array[0m
2025-04-11T19:23:45.0097739Z     [32m  [32m✔[39m[0m[90m fires callback when passed 0 docs[0m
2025-04-11T19:23:45.0163772Z     [32m  [32m✔[39m[0m[90m fires callback when empty array passed[0m
2025-04-11T19:23:45.0237182Z     [32m  [32m✔[39m[0m[90m supports passing options[0m
2025-04-11T19:23:45.0304039Z     [32m  [32m✔[39m[0m[90m returns a promise[0m
2025-04-11T19:23:45.1426037Z     [32m  [32m✔[39m[0m[90m creates in parallel[0m[31m (105ms)[0m
2025-04-11T19:23:45.1685001Z     [32m  [32m✔[39m[0m[90m should return the first error immediately if "aggregateErrors" is not explicitly set[0m
2025-04-11T19:23:45.1897130Z     [32m  [32m✔[39m[0m[90m should not return errors immediately if "aggregateErrors" is "true"[0m
2025-04-11T19:23:45.1929430Z [0m      callback is optional[0m
2025-04-11T19:23:45.1991182Z       [32m  [32m✔[39m[0m[90m with one doc[0m
2025-04-11T19:23:45.2087528Z       [32m  [32m✔[39m[0m[90m with more than one doc[0m
2025-04-11T19:23:45.2182700Z       [32m  [32m✔[39m[0m[90m with array of docs[0m
2025-04-11T19:23:45.2283853Z       [32m  [32m✔[39m[0m[90m and should reject promise on error[0m
2025-04-11T19:23:45.2375765Z       [32m  [32m✔[39m[0m[90m when passed an empty array, returns an empty array[0m
2025-04-11T19:23:45.2476826Z       [32m  [32m✔[39m[0m[90m treats undefined first arg as doc rather than callback (gh-9765)[0m
2025-04-11T19:23:45.2584311Z       [32m  [32m✔[39m[0m[90m ignores undefined last arg (gh-13487)[0m
2025-04-11T19:23:45.2638257Z [0m      ordered[0m
2025-04-11T19:23:45.2958397Z       [32m  [32m✔[39m[0m[90m runs the document insertion in a series when using the ordered option gh-4038[0m
2025-04-11T19:23:45.3197996Z       [32m  [32m✔[39m[0m[90m should throw an error only after all the documents have finished saving gh-4628[0m
2025-04-11T19:23:45.3384116Z       [32m  [32m✔[39m[0m[90m should return the first error immediately if "aggregateErrors" is not explicitly set (ordered)[0m
2025-04-11T19:23:45.3583300Z       [32m  [32m✔[39m[0m[90m should not return errors immediately if "aggregateErrors" is "true" (ordered)[0m
2025-04-11T19:23:45.3691822Z 
2025-04-11T19:23:45.3692376Z [0m  SubdocumentPath[0m
2025-04-11T19:23:45.3729975Z   [32m  [32m✔[39m[0m[90m copies over `requiredValidator` (gh-8819)[0m
2025-04-11T19:23:45.3781885Z   [32m  [32m✔[39m[0m[90m supports `set()` (gh-8883)[0m
2025-04-11T19:23:45.3833694Z   [32m  [32m✔[39m[0m[90m supports setting _id globally (gh-11541) (gh-8883)[0m
2025-04-11T19:23:45.3855433Z [0m    discriminator()[0m
2025-04-11T19:23:45.3866490Z [0m      recursive nested discriminators[0m
2025-04-11T19:23:45.3925529Z       [32m  [32m✔[39m[0m[90m allow multiple levels of data in the schema[0m
2025-04-11T19:23:45.4022865Z       [32m  [32m✔[39m[0m[90m allow multiple levels of data in a document[0m
2025-04-11T19:23:45.4114346Z       [32m  [32m✔[39m[0m[90m allow multiple levels of data in the schema when the base schema has _id without auto[0m
2025-04-11T19:23:45.4212670Z       [32m  [32m✔[39m[0m[90m allow multiple levels of data in a document when the base schema has _id without auto[0m
2025-04-11T19:23:45.4303399Z 
2025-04-11T19:23:45.4304603Z [0m  schematype[0m
2025-04-11T19:23:45.4340547Z   [32m  [32m✔[39m[0m[90m honors the selected option[0m
2025-04-11T19:23:45.4387749Z   [32m  [32m✔[39m[0m[90m properly handles specifying index in combination with unique or sparse[0m
2025-04-11T19:23:45.4435439Z   [32m  [32m✔[39m[0m[90m handles index: false with unique, sparse, text set to false (gh-7620)[0m
2025-04-11T19:23:45.4480382Z   [32m  [32m✔[39m[0m[90m handles unique, sparse, text set to false with no index property (gh-10738)[0m
2025-04-11T19:23:45.4525185Z   [32m  [32m✔[39m[0m[90m handles function as positional message arg (gh-8360)[0m
2025-04-11T19:23:45.4571127Z   [32m  [32m✔[39m[0m[90m merges default validators (gh-14070)[0m
2025-04-11T19:23:45.4619080Z   [32m  [32m✔[39m[0m[90m demonstrates the `validateAll()` function (gh-6910)[0m
2025-04-11T19:23:45.4664701Z   [32m  [32m✔[39m[0m[90m supports getEmbeddedSchemaType() (gh-8389)[0m
2025-04-11T19:23:45.4686240Z [0m    checkRequired()[0m
2025-04-11T19:23:45.4740585Z     [32m  [32m✔[39m[0m[90m with inherits (gh-7486)[0m
2025-04-11T19:23:45.4773199Z [0m    clone()[0m
2025-04-11T19:23:45.4819128Z     [32m  [32m✔[39m[0m[90m clones added default[0m
2025-04-11T19:23:45.4885211Z     [32m  [32m✔[39m[0m[90m clones added getters[0m
2025-04-11T19:23:45.4951892Z     [32m  [32m✔[39m[0m[90m clones added immutable[0m
2025-04-11T19:23:45.5017852Z     [32m  [32m✔[39m[0m[90m clones added index[0m
2025-04-11T19:23:45.5084007Z     [32m  [32m✔[39m[0m[90m clones added ref[0m
2025-04-11T19:23:45.5150457Z     [32m  [32m✔[39m[0m[90m clones added required[0m
2025-04-11T19:23:45.5205845Z     [32m  [32m✔[39m[0m[90m clones added select: false[0m
2025-04-11T19:23:45.5271960Z     [32m  [32m✔[39m[0m[90m clones added setter[0m
2025-04-11T19:23:45.5338507Z     [32m  [32m✔[39m[0m[90m clones added sparse[0m
2025-04-11T19:23:45.5404822Z     [32m  [32m✔[39m[0m[90m clones added sparse (index option)[0m
2025-04-11T19:23:45.5470682Z     [32m  [32m✔[39m[0m[90m clones added text (index option)[0m
2025-04-11T19:23:45.5536405Z     [32m  [32m✔[39m[0m[90m clones added unique (index option)[0m
2025-04-11T19:23:45.5602287Z     [32m  [32m✔[39m[0m[90m clones added validator[0m
2025-04-11T19:23:45.5668413Z     [32m  [32m✔[39m[0m[90m clones updated caster[0m
2025-04-11T19:23:45.5712049Z [0m    get()[0m
2025-04-11T19:23:45.5756038Z     [32m  [32m✔[39m[0m[90m SchemaArray has a `get` method[0m
2025-04-11T19:23:45.5821071Z     [32m  [32m✔[39m[0m[90m SchemaBigInt has a `get` method[0m
2025-04-11T19:23:45.5885837Z     [32m  [32m✔[39m[0m[90m SchemaBoolean has a `get` method[0m
2025-04-11T19:23:45.5950943Z     [32m  [32m✔[39m[0m[90m SchemaBuffer has a `get` method[0m
2025-04-11T19:23:45.6015371Z     [32m  [32m✔[39m[0m[90m SchemaDate has a `get` method[0m
2025-04-11T19:23:45.6080857Z     [32m  [32m✔[39m[0m[90m SchemaDecimal128 has a `get` method[0m
2025-04-11T19:23:45.6145591Z     [32m  [32m✔[39m[0m[90m SchemaDecimal128 has a `get` method[0m
2025-04-11T19:23:45.6210592Z     [32m  [32m✔[39m[0m[90m SchemaDocumentArray has a `get` method[0m
2025-04-11T19:23:45.6275092Z     [32m  [32m✔[39m[0m[90m SchemaMap has a `get` method[0m
2025-04-11T19:23:45.6340008Z     [32m  [32m✔[39m[0m[90m SchemaMixed has a `get` method[0m
2025-04-11T19:23:45.6404903Z     [32m  [32m✔[39m[0m[90m SchemaNumber has a `get` method[0m
2025-04-11T19:23:45.6469834Z     [32m  [32m✔[39m[0m[90m SchemaObjectId has a `get` method[0m
2025-04-11T19:23:45.6534854Z     [32m  [32m✔[39m[0m[90m SchemaString has a `get` method[0m
2025-04-11T19:23:45.6599687Z     [32m  [32m✔[39m[0m[90m SchemaSubdocument has a `get` method[0m
2025-04-11T19:23:45.6664445Z     [32m  [32m✔[39m[0m[90m SchemaUUID has a `get` method[0m
2025-04-11T19:23:45.6729332Z     [32m  [32m✔[39m[0m[90m SchemaDouble has a `get` method[0m
2025-04-11T19:23:45.6783454Z     [32m  [32m✔[39m[0m[90m SchemaInt32 has a `get` method[0m
2025-04-11T19:23:45.6848194Z     [32m  [32m✔[39m[0m[90m SchemaObjectId has a `get` method[0m
2025-04-11T19:23:45.6912924Z     [32m  [32m✔[39m[0m[90m SchemaMixed has a `get` method[0m
2025-04-11T19:23:45.6978306Z     [32m  [32m✔[39m[0m[90m SchemaBoolean has a `get` method[0m
2025-04-11T19:23:45.7042626Z     [32m  [32m✔[39m[0m[90m SchemaObjectId has a `get` method[0m
2025-04-11T19:23:45.7086043Z [0m    set()[0m
2025-04-11T19:23:45.7133184Z     [32m  [32m✔[39m[0m[90m SchemaArray, when given a default option, set its[0m
2025-04-11T19:23:45.7199126Z     [32m  [32m✔[39m[0m[90m SchemaBigInt, when given a default option, set its[0m
2025-04-11T19:23:45.7264918Z     [32m  [32m✔[39m[0m[90m SchemaBoolean, when given a default option, set its[0m
2025-04-11T19:23:45.7330690Z     [32m  [32m✔[39m[0m[90m SchemaBuffer, when given a default option, set its[0m
2025-04-11T19:23:45.7395869Z     [32m  [32m✔[39m[0m[90m SchemaDate, when given a default option, set its[0m
2025-04-11T19:23:45.7461491Z     [32m  [32m✔[39m[0m[90m SchemaDecimal128, when given a default option, set its[0m
2025-04-11T19:23:45.7527175Z     [32m  [32m✔[39m[0m[90m SchemaDecimal128, when given a default option, set its[0m
2025-04-11T19:23:45.7593102Z     [32m  [32m✔[39m[0m[90m SchemaMap, when given a default option, set its[0m
2025-04-11T19:23:45.7658811Z     [32m  [32m✔[39m[0m[90m SchemaMixed, when given a default option, set its[0m
2025-04-11T19:23:45.7724652Z     [32m  [32m✔[39m[0m[90m SchemaNumber, when given a default option, set its[0m
2025-04-11T19:23:45.7789911Z     [32m  [32m✔[39m[0m[90m SchemaObjectId, when given a default option, set its[0m
2025-04-11T19:23:45.7855647Z     [32m  [32m✔[39m[0m[90m SchemaString, when given a default option, set its[0m
2025-04-11T19:23:45.7921882Z     [32m  [32m✔[39m[0m[90m SchemaUUID, when given a default option, set its[0m
2025-04-11T19:23:45.7987767Z     [32m  [32m✔[39m[0m[90m SchemaDouble, when given a default option, set its[0m
2025-04-11T19:23:45.8053530Z     [32m  [32m✔[39m[0m[90m SchemaInt32, when given a default option, set its[0m
2025-04-11T19:23:45.8118758Z     [32m  [32m✔[39m[0m[90m SchemaObjectId, when given a default option, set its[0m
2025-04-11T19:23:45.8184094Z     [32m  [32m✔[39m[0m[90m SchemaMixed, when given a default option, set its[0m
2025-04-11T19:23:45.8249342Z     [32m  [32m✔[39m[0m[90m SchemaBoolean, when given a default option, set its[0m
2025-04-11T19:23:45.8314477Z     [32m  [32m✔[39m[0m[90m SchemaObjectId, when given a default option, set its[0m
2025-04-11T19:23:45.8346798Z [0m      SchemaType.set()[0m
2025-04-11T19:23:45.8401356Z       [32m  [32m✔[39m[0m[90m SchemaType.set, is a function[0m
2025-04-11T19:23:45.8671896Z       [32m  [32m✔[39m[0m[90m should allow setting values to a given property gh-13510[0m
2025-04-11T19:23:45.8747076Z 
2025-04-11T19:23:45.8748380Z [0m  schema[0m
2025-04-11T19:23:45.8761058Z [0m    validation[0m
2025-04-11T19:23:45.8818742Z     [32m  [32m✔[39m[0m[90m invalid arguments are rejected (1044)[0m
2025-04-11T19:23:45.8888154Z     [32m  [32m✔[39m[0m[90m string enum[0m
2025-04-11T19:23:45.8958660Z     [32m  [32m✔[39m[0m[90m string regexp[0m
2025-04-11T19:23:45.9032478Z     [32m  [32m✔[39m[0m[90m should clear validator errors (gh-2302)[0m
2025-04-11T19:23:45.9106655Z     [32m  [32m✔[39m[0m[90m should allow an array of enums (gh-661)[0m
2025-04-11T19:23:45.9176261Z     [32m  [32m✔[39m[0m[90m should allow null values for enum gh-3044[0m
2025-04-11T19:23:45.9254354Z     [32m  [32m✔[39m[0m[90m should allow an array of subdocuments with enums (gh-3521)[0m
2025-04-11T19:23:45.9332442Z     [32m  [32m✔[39m[0m[90m should validate subdocuments subproperty enums (gh-4111)[0m
2025-04-11T19:23:45.9406421Z     [32m  [32m✔[39m[0m[90m doesnt do double validation on document arrays (gh-2618)[0m
2025-04-11T19:23:45.9485471Z     [32m  [32m✔[39m[0m[90m doesnt do double validation on document arrays underneath nested (gh-5411)[0m
2025-04-11T19:23:45.9562826Z     [32m  [32m✔[39m[0m[90m no double validation on set nested docarray (gh-4145)[0m
2025-04-11T19:23:45.9639425Z     [32m  [32m✔[39m[0m[90m returns cast errors[0m
2025-04-11T19:23:45.9725338Z     [32m  [32m✔[39m[0m[90m handles multiple subdocument errors (gh-2589)[0m
2025-04-11T19:23:45.9839409Z     [32m  [32m✔[39m[0m[90m handles subdocument cast errors (gh-2819)[0m
2025-04-11T19:23:45.9910580Z     [32m  [32m✔[39m[0m[90m fails when you try to set a nested path to a primitive (gh-2592)[0m
2025-04-11T19:23:45.9980856Z     [32m  [32m✔[39m[0m[90m doesnt execute other validators if required fails (gh-2725)[0m
2025-04-11T19:23:46.0050683Z     [32m  [32m✔[39m[0m[90m doesnt execute other validators if required fails (gh-3025)[0m
2025-04-11T19:23:46.0120582Z     [32m  [32m✔[39m[0m[90m validateSync allows you to filter paths (gh-3153)[0m
2025-04-11T19:23:46.0181512Z     [32m  [32m✔[39m[0m[90m validateSync validates array elements when setting pathsToValidate (gh-13159)[0m
2025-04-11T19:23:46.0251106Z     [32m  [32m✔[39m[0m[90m adds required validators to the front of the list (gh-2843)[0m
2025-04-11T19:23:46.0323534Z     [32m  [32m✔[39m[0m[90m sets path correctly when setter throws exception (gh-2832)[0m
2025-04-11T19:23:46.0398536Z     [32m  [32m✔[39m[0m[90m allows you to validate embedded doc that was .create()-ed (gh-2902) (gh-2929)[0m
2025-04-11T19:23:46.0468512Z     [32m  [32m✔[39m[0m[90m returns correct kind for user defined custom validators (gh-2885)[0m
2025-04-11T19:23:46.0537720Z     [32m  [32m✔[39m[0m[90m enums report kind (gh-3009)[0m
2025-04-11T19:23:46.0620282Z     [32m  [32m✔[39m[0m[90m enums on arrays (gh-6102) (gh-8449)[0m
2025-04-11T19:23:46.0689706Z     [32m  [32m✔[39m[0m[90m skips conditional required (gh-3539)[0m
2025-04-11T19:23:46.0762027Z     [32m  [32m✔[39m[0m[90m handles function for date min/max (gh-7600)[0m
2025-04-11T19:23:46.0832240Z     [32m  [32m✔[39m[0m[90m evaluate message function gh6523[0m
2025-04-11T19:23:46.0903041Z     [32m  [32m✔[39m[0m[90m Allows for doc to be passed as another parameter (gh-12564)[0m
2025-04-11T19:23:46.0973904Z     [32m  [32m✔[39m[0m[90m evaluate message function for required field gh6523[0m
2025-04-11T19:23:46.1058825Z     [32m  [32m✔[39m[0m[90m should validate required UUID fields correctly (gh-12991)[0m
2025-04-11T19:23:46.1091280Z [0m      non-required fields[0m
2025-04-11T19:23:46.1149475Z       [32m  [32m✔[39m[0m[90m number min and max[0m
2025-04-11T19:23:46.1192812Z [0m        are validated correctly[0m
2025-04-11T19:23:46.1363704Z         [32m  [32m✔[39m[0m[90m and can be set to "undefined" (gh-1594)[0m
2025-04-11T19:23:46.1468371Z [0m      required[0m
2025-04-11T19:23:46.1526138Z       [32m  [32m✔[39m[0m[90m string required[0m
2025-04-11T19:23:46.1616059Z       [32m  [32m✔[39m[0m[90m string conditional required[0m
2025-04-11T19:23:46.1704915Z       [32m  [32m✔[39m[0m[90m number required[0m
2025-04-11T19:23:46.1794383Z       [32m  [32m✔[39m[0m[90m date required[0m
2025-04-11T19:23:46.1882841Z       [32m  [32m✔[39m[0m[90m date not empty string (gh-3132)[0m
2025-04-11T19:23:46.1973932Z       [32m  [32m✔[39m[0m[90m objectid required[0m
2025-04-11T19:23:46.2064138Z       [32m  [32m✔[39m[0m[90m array required[0m
2025-04-11T19:23:46.2154135Z       [32m  [32m✔[39m[0m[90m array required custom required[0m
2025-04-11T19:23:46.2243374Z       [32m  [32m✔[39m[0m[90m boolean required[0m
2025-04-11T19:23:46.2332656Z       [32m  [32m✔[39m[0m[90m mixed required[0m
2025-04-11T19:23:46.2386670Z [0m      async[0m
2025-04-11T19:23:46.2504792Z       [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:23:46.2654972Z       [32m  [32m✔[39m[0m[90m scope[0m
2025-04-11T19:23:46.2744143Z       [32m  [32m✔[39m[0m[90m doValidateSync should ignore async function and script waiting for promises (gh-4885)[0m
2025-04-11T19:23:46.2797564Z [0m      messages[0m
2025-04-11T19:23:46.2808626Z [0m        are customizable[0m
2025-04-11T19:23:46.2889532Z         [32m  [32m✔[39m[0m[90m within schema definitions[0m
2025-04-11T19:23:46.3004851Z         [32m  [32m✔[39m[0m[90m for custom validators[0m
2025-04-11T19:23:46.3117465Z         [32m  [32m✔[39m[0m[90m custom validators with promise (gh-5171)[0m
2025-04-11T19:23:46.3230645Z         [32m  [32m✔[39m[0m[90m supports custom properties (gh-2132)[0m
2025-04-11T19:23:46.3344170Z         [32m  [32m✔[39m[0m[90m supports dynamic message for validators with callback (gh-1936)[0m
2025-04-11T19:23:46.3419109Z [0m      types[0m
2025-04-11T19:23:46.3430754Z [0m        are customizable[0m
2025-04-11T19:23:46.3502033Z         [32m  [32m✔[39m[0m[90m for single custom validators[0m
2025-04-11T19:23:46.3616327Z         [32m  [32m✔[39m[0m[90m for many custom validators[0m
2025-04-11T19:23:46.3692036Z [0m      `enum` accepts an object to support TypeScript enums (gh-9546) (gh-9535)[0m
2025-04-11T19:23:46.3750981Z       [32m  [32m✔[39m[0m[90m strings[0m
2025-04-11T19:23:46.3842927Z       [32m  [32m✔[39m[0m[90m numbers[0m
2025-04-11T19:23:46.3936416Z       [32m  [32m✔[39m[0m[90m arrays[0m
2025-04-11T19:23:46.4029389Z       [32m  [32m✔[39m[0m[90m passes when using valid data[0m
2025-04-11T19:23:46.4105158Z 
2025-04-11T19:23:46.4105419Z [0m  SchemaNumber[0m
2025-04-11T19:23:46.4141463Z   [32m  [32m✔[39m[0m[90m allows 0 with required: true and ref set (gh-11912)[0m
2025-04-11T19:23:46.4187730Z   [32m  [32m✔[39m[0m[90m allows calling `min()` with no message arg (gh-15236)[0m
2025-04-11T19:23:46.4219570Z 
2025-04-11T19:23:46.4221261Z [0m  connections:[0m
2025-04-11T19:23:46.4254828Z   [32m  [32m✔[39m[0m[90m should allow closing a closed connection[0m
2025-04-11T19:23:46.4308517Z   [32m  [32m✔[39m[0m[90m should return an error if malformed uri passed[0m
2025-04-11T19:23:46.5395124Z   [32m  [32m✔[39m[0m[90m force close (gh-5664)[0m[31m (104ms)[0m
2025-04-11T19:23:46.5478394Z   [32m  [32m✔[39m[0m[90m destroy connection and remove it permanently[0m
2025-04-11T19:23:46.5566147Z   [32m  [32m✔[39m[0m[90m verify that attempt to re-open destroyed connection throws error, via promise[0m
2025-04-11T19:23:46.5639949Z   [32m  [32m✔[39m[0m[90m verify that attempt to re-open destroyed connection throws error, via callback[0m
2025-04-11T19:23:46.6713195Z   [32m  [32m✔[39m[0m[90m force close with connection created after close (gh-5664)[0m[31m (102ms)[0m
2025-04-11T19:23:46.6876802Z   [32m  [32m✔[39m[0m[90m bufferCommands (gh-5720)[0m
2025-04-11T19:23:46.6938088Z   [32m  [32m✔[39m[0m[90m dbName option (gh-6106)[0m
2025-04-11T19:23:46.7000502Z   [32m  [32m✔[39m[0m[90m uses default database in uri if options.dbName is not provided[0m
2025-04-11T19:23:46.7116337Z   [32m  [32m✔[39m[0m[90m startSession() (gh-6653)[0m
2025-04-11T19:23:46.7316471Z   [32m  [32m✔[39m[0m[90m deleteModel()[0m
2025-04-11T19:23:46.8389859Z   [32m  [32m✔[39m[0m[90m throws a MongooseServerSelectionError on server selection timeout (gh-8451)[0m[31m (103ms)[0m
2025-04-11T19:23:46.9460911Z   [32m  [32m✔[39m[0m[90m avoids unhandled error on createConnection() if error handler registered (gh-14377)[0m[31m (102ms)[0m
2025-04-11T19:23:46.9506950Z   [36m  - `watch()` on a whole collection (gh-8425)[0m
2025-04-11T19:23:46.9596594Z   [32m  [32m✔[39m[0m[90m useDB inherits config from default connection (gh-8267)[0m
2025-04-11T19:23:46.9756156Z   [32m  [32m✔[39m[0m[90m allows setting client on a disconnected connection (gh-9164)[0m
2025-04-11T19:23:46.9817504Z   [32m  [32m✔[39m[0m[90m connection.asPromise() resolves to a connection instance (gh-9496)[0m
2025-04-11T19:23:46.9875442Z   [32m  [32m✔[39m[0m[90m allows overwriting models (gh-9406)[0m
2025-04-11T19:23:46.9932166Z   [32m  [32m✔[39m[0m[90m allows setting `overwriteModels` globally (gh-9406)[0m
2025-04-11T19:23:46.9976789Z   [32m  [32m✔[39m[0m[90m Connection id should be scoped per Mongoose Instance (gh-10025)[0m
2025-04-11T19:23:47.0030866Z   [32m  [32m✔[39m[0m[90m model() works with 1 argument and overwriteModels set to true (gh-12359)[0m
2025-04-11T19:23:47.0128595Z   [31m  1) creates collection if creating model while connection is disconnected with bufferCommands=false[0m
2025-04-11T19:23:47.0173525Z   [32m  [32m✔[39m[0m[90m should create connections with unique IDs also if one has been destroyed (gh-12966)[0m
2025-04-11T19:23:47.0217882Z   [32m  [32m✔[39m[0m[90m should not create default connection with createInitialConnection = false (gh-12965)[0m
2025-04-11T19:23:47.0298308Z   [32m  [32m✔[39m[0m[90m with autoCreate = false after schema create (gh-12940)[0m
2025-04-11T19:23:47.0335656Z   [32m  [32m✔[39m[0m[90m does not wait for buffering if autoCreate: false (gh-15241)[0m
2025-04-11T19:23:47.0380502Z   [32m  [32m✔[39m[0m[90m should not create default connection with createInitialConnection = false (gh-12965)[0m
2025-04-11T19:23:47.0424512Z   [36m  - should demonstrate the withSession() function (gh-14330)[0m
2025-04-11T19:23:47.0511104Z   [32m  [32m✔[39m[0m[90m listDatabases() should return a list of database objects with a name property (gh-9048)[0m
2025-04-11T19:23:47.0675470Z   [36m  - connection bulkWrite() ordered (gh-15028)[0m
2025-04-11T19:23:47.0814126Z   [36m  - connection bulkWrite() unordered (gh-15028)[0m
2025-04-11T19:23:47.1935645Z   [32m  [32m✔[39m[0m[90m buffers connection helpers[0m[31m (108ms)[0m
2025-04-11T19:23:47.2987804Z   [32m  [32m✔[39m[0m[90m connection helpers buffering times out[0m[31m (101ms)[0m
2025-04-11T19:23:47.3460950Z   [32m  [32m✔[39m[0m[90m supports db-level aggregate on connection (gh-15118)[0m[33m (42ms)[0m
2025-04-11T19:23:47.3482225Z [0m    openUri (gh-5304)[0m
2025-04-11T19:23:47.3605652Z     [32m  [32m✔[39m[0m[90m with mongoose.createConnection()[0m
2025-04-11T19:23:47.3702724Z     [32m  [32m✔[39m[0m[90m with autoIndex (gh-5423)[0m
2025-04-11T19:23:47.3912619Z     [32m  [32m✔[39m[0m[90m with autoCreate (gh-6489)[0m
2025-04-11T19:23:47.4041220Z     [32m  [32m✔[39m[0m[90m with autoCreate = false (gh-8814)[0m
2025-04-11T19:23:47.4236278Z     [32m  [32m✔[39m[0m[90m autoCreate when collection already exists does not fail (gh-7122)[0m
2025-04-11T19:23:47.4303538Z     [32m  [32m✔[39m[0m[90m throws helpful error with undefined uri (gh-6763)[0m
2025-04-11T19:23:47.4416057Z     [32m  [32m✔[39m[0m[90m resolving with q (gh-5714)[0m
2025-04-11T19:23:47.4567729Z     [32m  [32m✔[39m[0m[90m connection plugins (gh-7378)[0m
2025-04-11T19:23:47.4611774Z [0m    helpers[0m
2025-04-11T19:23:47.4684378Z     [32m  [32m✔[39m[0m[90m dropDatabase()[0m
2025-04-11T19:23:47.4818908Z     [32m  [32m✔[39m[0m[90m dropCollection()[0m
2025-04-11T19:23:47.5001758Z     [32m  [32m✔[39m[0m[90m createCollection()[0m
2025-04-11T19:23:47.5180484Z     [32m  [32m✔[39m[0m[90m listCollections()[0m
2025-04-11T19:23:47.5251435Z [0m    events[0m
2025-04-11T19:23:47.5405721Z     [32m  [32m✔[39m[0m[90m operation-start[0m
2025-04-11T19:23:47.5481162Z     [32m  [32m✔[39m[0m[90m operation-end[0m
2025-04-11T19:23:47.5559986Z     [32m  [32m✔[39m[0m[90m commandStarted, commandFailed, commandSucceeded (gh-14611)[0m
2025-04-11T19:23:47.5631984Z [0m    errors[0m
2025-04-11T19:23:47.5677678Z     [32m  [32m✔[39m[0m[90m .catch() means error does not get thrown (gh-5229)[0m
2025-04-11T19:23:47.5756149Z     [32m  [32m✔[39m[0m[90m promise is rejected even if there is an error event listener (gh-7850)[0m
2025-04-11T19:23:47.5813585Z     [32m  [32m✔[39m[0m[90m readyState is disconnected if initial connection fails (gh-6244)[0m
2025-04-11T19:23:47.5856612Z [0m    .model()[0m
2025-04-11T19:23:47.5915031Z     [32m  [32m✔[39m[0m[90m allows passing a schema[0m
2025-04-11T19:23:47.5985942Z     [32m  [32m✔[39m[0m[90m should properly assign the db[0m
2025-04-11T19:23:47.6057068Z     [32m  [32m✔[39m[0m[90m prevents overwriting pre-existing models[0m
2025-04-11T19:23:47.6127541Z     [32m  [32m✔[39m[0m[90m allows passing identical name + schema args[0m
2025-04-11T19:23:47.6188823Z     [32m  [32m✔[39m[0m[90m throws on unknown model name[0m
2025-04-11T19:23:47.6221205Z [0m      passing collection name[0m
2025-04-11T19:23:47.6232387Z [0m        when model name already exists[0m
2025-04-11T19:23:47.6308028Z         [32m  [32m✔[39m[0m[90m returns a new uncached model[0m
2025-04-11T19:23:47.6377747Z [0m      passing object literal schemas[0m
2025-04-11T19:23:47.6565602Z       [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:23:47.6659618Z [0m    modelNames()[0m
2025-04-11T19:23:47.6721870Z     [32m  [32m✔[39m[0m[90m returns names of all models registered on it[0m
2025-04-11T19:23:47.6765150Z [0m    connection pool sharing: [0m
2025-04-11T19:23:47.6854380Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:23:47.7119027Z     [32m  [32m✔[39m[0m[90m saves correctly[0m
2025-04-11T19:23:47.7196838Z     [32m  [32m✔[39m[0m[90m emits connecting events on both[0m
2025-04-11T19:23:47.7273809Z     [32m  [32m✔[39m[0m[90m emits connected events on both[0m
2025-04-11T19:23:47.7351097Z     [32m  [32m✔[39m[0m[90m emits open events on both[0m
2025-04-11T19:23:47.7434079Z     [32m  [32m✔[39m[0m[90m emits disconnecting events on both, closing initial db[0m
2025-04-11T19:23:47.7533131Z     [32m  [32m✔[39m[0m[90m emits disconnecting events on both, closing secondary db[0m
2025-04-11T19:23:47.7621511Z     [32m  [32m✔[39m[0m[90m emits disconnected events on both, closing initial db[0m
2025-04-11T19:23:47.7717197Z     [32m  [32m✔[39m[0m[90m emits disconnected events on both, closing secondary db[0m
2025-04-11T19:23:47.7823972Z     [32m  [32m✔[39m[0m[90m closes correctly for all dbs, closing initial db[0m
2025-04-11T19:23:47.7948120Z     [32m  [32m✔[39m[0m[90m handles re-opening base connection (gh-11240)[0m
2025-04-11T19:23:47.8043406Z     [32m  [32m✔[39m[0m[90m closes correctly for all dbs, closing secondary db[0m
2025-04-11T19:23:47.8139486Z     [32m  [32m✔[39m[0m[90m cache connections to the same db[0m
2025-04-11T19:23:47.8298648Z     [32m  [32m✔[39m[0m[90m supports removing db (gh-11821)[0m
2025-04-11T19:23:47.8342303Z [0m    shouldAuthenticate()[0m
2025-04-11T19:23:47.8354935Z [0m      when using standard authentication[0m
2025-04-11T19:23:47.8365886Z [0m        when username and password are undefined[0m
2025-04-11T19:23:47.8461570Z         [32m  [32m✔[39m[0m[90m should return false[0m
2025-04-11T19:23:47.8526931Z [0m        when username and password are empty strings[0m
2025-04-11T19:23:47.8622969Z         [32m  [32m✔[39m[0m[90m should return false[0m
2025-04-11T19:23:47.8687914Z [0m        when both username and password are defined[0m
2025-04-11T19:23:47.8824126Z         [32m  [32m✔[39m[0m[90m should return true[0m
2025-04-11T19:23:47.8890970Z [0m      when using MONGODB-X509 authentication[0m
2025-04-11T19:23:47.8901819Z [0m        when username and password are undefined[0m
2025-04-11T19:23:47.8997814Z         [32m  [32m✔[39m[0m[90m should return false[0m
2025-04-11T19:23:47.9063013Z [0m        when only username is defined[0m
2025-04-11T19:23:47.9167013Z         [32m  [32m✔[39m[0m[90m should return false[0m
2025-04-11T19:23:47.9233905Z [0m        when both username and password are defined[0m
2025-04-11T19:23:47.9345923Z         [32m  [32m✔[39m[0m[90m should return false[0m
2025-04-11T19:23:47.9433518Z [0m    passing a function into createConnection[0m
2025-04-11T19:23:47.9587367Z     [32m  [32m✔[39m[0m[90m should store the name of the function (gh-6517)[0m
2025-04-11T19:23:47.9631350Z [0m    when connecting with a secondary read preference(gh-9374)[0m
2025-04-11T19:23:47.9642470Z [0m      mongoose.connect[0m
2025-04-11T19:23:47.9745529Z       [32m  [32m✔[39m[0m[90m forces autoIndex & autoCreate to be false if read preference is secondary or secondaryPreferred[0m
2025-04-11T19:23:47.9835315Z       [32m  [32m✔[39m[0m[90m throws if options try to set autoIndex to true[0m
2025-04-11T19:23:47.9924232Z       [32m  [32m✔[39m[0m[90m throws if options.config.autoIndex is true, even if options.autoIndex is false[0m
2025-04-11T19:23:47.9978044Z [0m      mongoose.createConnection[0m
2025-04-11T19:23:48.0099865Z       [32m  [32m✔[39m[0m[90m forces autoIndex & autoCreate to be false if read preference is secondary or secondaryPreferred (gh-9374)[0m
2025-04-11T19:23:48.0216260Z       [32m  [32m✔[39m[0m[90m keeps autoIndex & autoCreate as true by default if read preference is primaryPreferred (gh-9374)[0m
2025-04-11T19:23:48.0304959Z       [32m  [32m✔[39m[0m[90m throws if options try to set autoIndex to true[0m
2025-04-11T19:23:48.0394176Z       [32m  [32m✔[39m[0m[90m throws if options.config.autoIndex is true, even if options.autoIndex is false[0m
2025-04-11T19:23:48.0458594Z [0m    Automatic init[0m
2025-04-11T19:23:48.0783298Z     [32m  [32m✔[39m[0m[90m re-runs init() if connecting after disconnecting (gh-12047)[0m
2025-04-11T19:23:48.1041500Z     [32m  [32m✔[39m[0m[90m re-runs init() if running setClient() after disconnecting (gh-12047)[0m
2025-04-11T19:23:48.1086999Z [0m    Connection#syncIndexes() (gh-10893) (gh-11039)[0m
2025-04-11T19:23:48.1394948Z     [32m  [32m✔[39m[0m[90m Allows a syncIndexes option with connection mongoose.connection.syncIndexes (gh-10893)[0m
2025-04-11T19:23:48.1733672Z     [32m  [32m✔[39m[0m[90m does not sync indexes automatically when `autoIndex: true` (gh-11039)[0m
2025-04-11T19:23:48.2403961Z     [32m  [32m✔[39m[0m[90m stops as soon as one model fails with `continueOnError: false` (gh-11039)[0m[33m (53ms)[0m
2025-04-11T19:23:48.2717269Z     [32m  [32m✔[39m[0m[90m error includes a property with all the errors when `continueOnError: false`[0m
2025-04-11T19:23:48.3014150Z     [32m  [32m✔[39m[0m[90m `continueOnError` is false by default[0m
2025-04-11T19:23:48.3480358Z     [32m  [32m✔[39m[0m[90m when `continueOnError: true` it will continue to sync indexes even if one model fails[0m[33m (39ms)[0m
2025-04-11T19:23:48.3912444Z     [32m  [32m✔[39m[0m[90m when `continueOnError: true` it will return a map of modelNames and their sync results/errors[0m
2025-04-11T19:23:48.4415519Z     [32m  [32m✔[39m[0m[90m mongoose.syncIndexes(...) accepts `continueOnError`[0m[33m (42ms)[0m
2025-04-11T19:23:48.4496219Z [0m    createCollections()[0m
2025-04-11T19:23:48.4772020Z     [32m  [32m✔[39m[0m[90m should create collections for all models on the connection with the createCollections() function (gh-13300)[0m
2025-04-11T19:23:48.4814845Z [0m    processConnectionOptions[0m
2025-04-11T19:23:48.4879052Z     [32m  [32m✔[39m[0m[90m should not throw an error when attempting to mutate unmutable options object gh-13335[0m
2025-04-11T19:23:48.4946511Z 
2025-04-11T19:23:48.4946924Z [0m  model: populate:[0m
2025-04-11T19:23:48.4958250Z [0m    setting populated paths (gh-570)[0m
2025-04-11T19:23:48.4969207Z [0m      should not cast to _id of type ObjectId[0m
2025-04-11T19:23:48.5427116Z       [32m  [32m✔[39m[0m[90m if a document[0m
2025-04-11T19:23:48.5630436Z       [32m  [32m✔[39m[0m[90m if an object[0m
2025-04-11T19:23:48.5698173Z [0m      should not cast to _id of type String[0m
2025-04-11T19:23:48.5944821Z       [32m  [32m✔[39m[0m[90m if a document[0m
2025-04-11T19:23:48.6111723Z       [32m  [32m✔[39m[0m[90m if an object[0m
2025-04-11T19:23:48.6187590Z [0m      should not cast to _id of type Number[0m
2025-04-11T19:23:48.6452149Z       [32m  [32m✔[39m[0m[90m if a document[0m
2025-04-11T19:23:48.6623532Z       [32m  [32m✔[39m[0m[90m if an object[0m
2025-04-11T19:23:48.6710874Z [0m      should not cast to _id of type Buffer[0m
2025-04-11T19:23:48.7310393Z       [32m  [32m✔[39m[0m[90m if a document[0m[33m (43ms)[0m
2025-04-11T19:23:48.7501201Z       [32m  [32m✔[39m[0m[90m if an object[0m
2025-04-11T19:23:48.7610392Z 
2025-04-11T19:23:48.7610856Z [0m  model translate aliases[0m
2025-04-11T19:23:48.7660576Z   [32m  [32m✔[39m[0m[90m should translate correctly[0m
2025-04-11T19:23:48.7681971Z 
2025-04-11T19:23:48.7682628Z [0m  cast: [0m
2025-04-11T19:23:48.7719587Z   [32m  [32m✔[39m[0m[90m uses nested schema strict by default (gh-11291)[0m
2025-04-11T19:23:48.7767090Z   [32m  [32m✔[39m[0m[90m casts $comment (gh-14576)[0m
2025-04-11T19:23:48.7813514Z   [32m  [32m✔[39m[0m[90m avoids setting stripped out nested schema values to undefined (gh-11291)[0m
2025-04-11T19:23:48.7858053Z   [32m  [32m✔[39m[0m[90m uses schema-level strictQuery over schema-level strict (gh-12508)[0m
2025-04-11T19:23:48.7907770Z   [32m  [32m✔[39m[0m[90m handles $in with discriminators if $in has exactly 1 element (gh-13492)[0m
2025-04-11T19:23:48.7952525Z   [32m  [32m✔[39m[0m[90m treats unknown operators as passthrough (gh-15170)[0m
2025-04-11T19:23:48.7974161Z [0m    when casting an array[0m
2025-04-11T19:23:48.8019189Z     [32m  [32m✔[39m[0m[90m casts array with ObjectIds to $in query[0m
2025-04-11T19:23:48.8086246Z     [32m  [32m✔[39m[0m[90m casts array with ObjectIds to $in query when values are strings[0m
2025-04-11T19:23:48.8155283Z     [32m  [32m✔[39m[0m[90m throws when ObjectIds not valid[0m
2025-04-11T19:23:48.8221376Z     [32m  [32m✔[39m[0m[90m casts array with Strings to $in query[0m
2025-04-11T19:23:48.8289091Z     [32m  [32m✔[39m[0m[90m casts array with Strings when necessary[0m
2025-04-11T19:23:48.8355199Z     [32m  [32m✔[39m[0m[90m casts array with Numbers to $in query[0m
2025-04-11T19:23:48.8423143Z     [32m  [32m✔[39m[0m[90m casts $in and $nin with empty array (gh-5913) (gh-7806)[0m
2025-04-11T19:23:48.8489411Z     [32m  [32m✔[39m[0m[90m casts array with Numbers to $in query when values are strings[0m
2025-04-11T19:23:48.8561347Z     [32m  [32m✔[39m[0m[90m throws when Numbers are not valid[0m
2025-04-11T19:23:48.8604327Z [0m    $all[0m
2025-04-11T19:23:48.8651931Z     [32m  [32m✔[39m[0m[90m casts $elemMatch (gh-11314)[0m
2025-04-11T19:23:48.8695299Z [0m    bitwise query operators: [0m
2025-04-11T19:23:48.8740775Z     [32m  [32m✔[39m[0m[90m with a number[0m
2025-04-11T19:23:48.8797538Z     [32m  [32m✔[39m[0m[90m with an array[0m
2025-04-11T19:23:48.8863861Z     [32m  [32m✔[39m[0m[90m with a buffer[0m
2025-04-11T19:23:48.8930482Z     [32m  [32m✔[39m[0m[90m with int32 (gh-15170)[0m
2025-04-11T19:23:48.8998051Z     [32m  [32m✔[39m[0m[90m throws when invalid[0m
2025-04-11T19:23:48.9041154Z [0m    $expr[0m
2025-04-11T19:23:48.9086520Z     [32m  [32m✔[39m[0m[90m does not get filtered out (gh-10662)[0m
2025-04-11T19:23:48.9139803Z 
2025-04-11T19:23:48.9141704Z [0m  model: findOneAndUpdate:[0m
2025-04-11T19:23:48.9273729Z   [32m  [32m✔[39m[0m[90m returns the edited document[0m
2025-04-11T19:23:48.9494730Z   [32m  [32m✔[39m[0m[90m returns the original document[0m
2025-04-11T19:23:48.9698782Z   [32m  [32m✔[39m[0m[90m allows upserting[0m
2025-04-11T19:23:48.9782166Z   [32m  [32m✔[39m[0m[90m options/conditions/doc are merged when no callback is passed[0m
2025-04-11T19:23:49.0067696Z   [32m  [32m✔[39m[0m[90m updates numbers atomically[0m
2025-04-11T19:23:49.0338728Z   [32m  [32m✔[39m[0m[90m honors strict schemas[0m
2025-04-11T19:23:49.0579970Z   [32m  [32m✔[39m[0m[90m returns errors with strict:throw schemas[0m
2025-04-11T19:23:49.0796144Z   [32m  [32m✔[39m[0m[90m returns the original document[0m
2025-04-11T19:23:49.0876677Z   [32m  [32m✔[39m[0m[90m options/conditions/doc are merged when no callback is passed[0m
2025-04-11T19:23:49.0992814Z   [32m  [32m✔[39m[0m[90m supports v3 select string syntax[0m
2025-04-11T19:23:49.1107012Z   [32m  [32m✔[39m[0m[90m supports v3 select object syntax[0m
2025-04-11T19:23:49.1424566Z   [32m  [32m✔[39m[0m[90m supports v3 sort string syntax[0m
2025-04-11T19:23:49.1523140Z   [32m  [32m✔[39m[0m[90m supports v3 sort object syntax[0m
2025-04-11T19:23:49.1805052Z   [32m  [32m✔[39m[0m[90m supports $elemMatch with $in (gh-1091 gh-1100)[0m
2025-04-11T19:23:49.2110646Z   [32m  [32m✔[39m[0m[90m supports population (gh-1395)[0m
2025-04-11T19:23:49.2354289Z   [32m  [32m✔[39m[0m[90m returns null when doing an upsert & new=false gh-1533[0m
2025-04-11T19:23:49.2624227Z   [32m  [32m✔[39m[0m[90m return hydrated document (gh-7734 gh-7735)[0m
2025-04-11T19:23:49.2869918Z   [32m  [32m✔[39m[0m[90m return includeResultMetadata when doing an upsert & new=false gh-7770[0m
2025-04-11T19:23:49.3111793Z   [32m  [32m✔[39m[0m[90m allows properties to be set to null gh-1643[0m
2025-04-11T19:23:49.3452989Z   [32m  [32m✔[39m[0m[90m can do various deep equal checks (lodash.isEqual, lodash.isEqualWith, assert.deepEqual, utils.deepEqual) on object id after findOneAndUpdate (gh-2070)[0m
2025-04-11T19:23:49.3705750Z   [32m  [32m✔[39m[0m[90m adds __v on upsert (gh-2122) (gh-4505)[0m
2025-04-11T19:23:49.3947368Z   [32m  [32m✔[39m[0m[90m doesn't add __v on upsert if `$set` (gh-4505) (gh-5973)[0m
2025-04-11T19:23:49.4176241Z   [32m  [32m✔[39m[0m[90m doesn't add __v on upsert if `$set` with `update()` (gh-5973)[0m
2025-04-11T19:23:49.4428951Z   [32m  [32m✔[39m[0m[90m works with nested schemas and $pull+$or (gh-1932)[0m
2025-04-11T19:23:49.4520902Z   [32m  [32m✔[39m[0m[90m accepts undefined[0m
2025-04-11T19:23:49.4689726Z   [32m  [32m✔[39m[0m[90m cast errors for empty objects as object ids (gh-2732)[0m
2025-04-11T19:23:49.4865220Z   [32m  [32m✔[39m[0m[90m cast errors for empty objects as object ids (gh-2732)[0m
2025-04-11T19:23:49.5186515Z   [32m  [32m✔[39m[0m[90m with versionKey in top-level and a `$` key (gh-7003)[0m
2025-04-11T19:23:49.5430389Z   [32m  [32m✔[39m[0m[90m empty update with timestamps (gh-7041)[0m
2025-04-11T19:23:49.5671440Z   [32m  [32m✔[39m[0m[90m skipping updatedAt and createdAt (gh-3934)[0m
2025-04-11T19:23:49.5897084Z   [32m  [32m✔[39m[0m[90m runs lowercase on $addToSet, $push, etc (gh-4185)[0m
2025-04-11T19:23:49.6123432Z   [32m  [32m✔[39m[0m[90m returnOriginal (gh-7846)[0m
2025-04-11T19:23:49.6341643Z   [32m  [32m✔[39m[0m[90m updating embedded discriminator with discriminator key in update (gh-8378)[0m
2025-04-11T19:23:49.6575164Z   [32m  [32m✔[39m[0m[90m setDefaultsOnInsert with doubly nested subdocs (gh-8392)[0m
2025-04-11T19:23:49.6800962Z   [32m  [32m✔[39m[0m[90m calls setters on mixed type (gh-8444)[0m
2025-04-11T19:23:49.7040441Z   [32m  [32m✔[39m[0m[90m returnDocument should work (gh-10321)[0m
2025-04-11T19:23:49.7274605Z   [32m  [32m✔[39m[0m[90m supports overwriting nested map paths (gh-10485)[0m
2025-04-11T19:23:49.7528570Z   [32m  [32m✔[39m[0m[90m supports $set on elements of map of subdocuments (gh-10720)[0m
2025-04-11T19:23:49.7636364Z   [32m  [32m✔[39m[0m[90m handles validating deeply nested subdocuments (gh-11394)[0m
2025-04-11T19:23:49.7929624Z   [32m  [32m✔[39m[0m[90m casts array filters (gh-13219)[0m
2025-04-11T19:23:49.8022712Z   [32m  [32m✔[39m[0m[90m throws error if filter is not an object (gh-13264)[0m
2025-04-11T19:23:49.8359763Z   [32m  [32m✔[39m[0m[90m handles plus path in projection (gh-13413)[0m
2025-04-11T19:23:49.8580451Z   [32m  [32m✔[39m[0m[90m allows setting paths with dots in non-strict paths (gh-13434) (gh-10200)[0m
2025-04-11T19:23:49.8817878Z   [32m  [32m✔[39m[0m[90m supports the `includeResultMetadata` option (gh-13539)[0m
2025-04-11T19:23:49.9043445Z   [32m  [32m✔[39m[0m[90m successfully runs findOneAndUpdate with no update and versionKey set to false (gh-13783)[0m
2025-04-11T19:23:49.9264144Z   [32m  [32m✔[39m[0m[90m skips adding defaults to filter when passing empty update (gh-13962)[0m
2025-04-11T19:23:49.9360064Z   [32m  [32m✔[39m[0m[90m sets CastError path to full path (gh-14114)[0m
2025-04-11T19:23:49.9475807Z [0m    will correctly[0m
2025-04-11T19:23:49.9726441Z     [32m  [32m✔[39m[0m[90m update subdocument in array item[0m
2025-04-11T19:23:49.9794930Z [0m    middleware[0m
2025-04-11T19:23:49.9858483Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:23:50.0012385Z     [32m  [32m✔[39m[0m[90m works with exec()[0m
2025-04-11T19:23:50.0120535Z [0m    validators (gh-860)[0m
2025-04-11T19:23:50.0335735Z     [32m  [32m✔[39m[0m[90m applies defaults on upsert[0m
2025-04-11T19:23:50.0566745Z     [32m  [32m✔[39m[0m[90m doesnt set default on upsert if query sets it[0m
2025-04-11T19:23:50.0798424Z     [32m  [32m✔[39m[0m[90m properly sets default on upsert if query wont set it[0m
2025-04-11T19:23:50.1034035Z     [32m  [32m✔[39m[0m[90m skips setting defaults within maps (gh-7909)[0m
2025-04-11T19:23:50.1137903Z     [32m  [32m✔[39m[0m[90m runs validators if theyre set[0m
2025-04-11T19:23:50.1292807Z     [32m  [32m✔[39m[0m[90m validators handle $unset and $setOnInsert[0m
2025-04-11T19:23:50.1459308Z     [32m  [32m✔[39m[0m[90m min/max, enum, and regex built-in validators work[0m
2025-04-11T19:23:50.1596633Z     [32m  [32m✔[39m[0m[90m multiple validation errors[0m
2025-04-11T19:23:50.1857884Z     [32m  [32m✔[39m[0m[90m validators ignore $inc[0m
2025-04-11T19:23:50.2084360Z     [32m  [32m✔[39m[0m[90m validators ignore paths underneath mixed (gh-8659)[0m
2025-04-11T19:23:50.2334169Z     [32m  [32m✔[39m[0m[90m should work with arrays (gh-3035)[0m
2025-04-11T19:23:50.2586896Z     [32m  [32m✔[39m[0m[90m should allow null values in query (gh-3135)[0m
2025-04-11T19:23:50.2809001Z     [32m  [32m✔[39m[0m[90m should work with array documents (gh-3034)[0m
2025-04-11T19:23:50.3041248Z     [32m  [32m✔[39m[0m[90m handles setting array (gh-3107)[0m
2025-04-11T19:23:50.3304356Z     [32m  [32m✔[39m[0m[90m handles nested cast errors (gh-3468)[0m
2025-04-11T19:23:50.3426774Z     [32m  [32m✔[39m[0m[90m cast errors with nested schemas (gh-3580)[0m
2025-04-11T19:23:50.3701467Z     [32m  [32m✔[39m[0m[90m pull with nested schemas (gh-3616)[0m
2025-04-11T19:23:50.3824818Z     [32m  [32m✔[39m[0m[90m setting nested schema (gh-3889)[0m
2025-04-11T19:23:50.3919859Z [0m    bug fixes[0m
2025-04-11T19:23:50.4071669Z     [32m  [32m✔[39m[0m[90m passes raw result if includeResultMetadata specified (gh-4925)[0m
2025-04-11T19:23:50.4347504Z     [32m  [32m✔[39m[0m[90m handles setting single embedded docs to null (gh-4281)[0m
2025-04-11T19:23:50.4469792Z     [32m  [32m✔[39m[0m[90m custom validator on mixed field (gh-4305)[0m
2025-04-11T19:23:50.4619413Z     [32m  [32m✔[39m[0m[90m single nested doc cast errors (gh-3602)[0m
2025-04-11T19:23:50.4891487Z     [32m  [32m✔[39m[0m[90m projection option as alias for fields (gh-4315)[0m
2025-04-11T19:23:50.5005524Z     [32m  [32m✔[39m[0m[90m handles upserting a non-existing field (gh-4757)[0m
2025-04-11T19:23:50.5255907Z     [32m  [32m✔[39m[0m[90m strict option (gh-5108)[0m
2025-04-11T19:23:50.5481719Z     [32m  [32m✔[39m[0m[90m correct key order (gh-6484)[0m
2025-04-11T19:23:50.5721293Z     [32m  [32m✔[39m[0m[90m should not apply schema transforms (gh-4574)[0m
2025-04-11T19:23:50.6227576Z     [32m  [32m✔[39m[0m[90m update using $ (gh-5628)[0m
2025-04-11T19:23:50.6466783Z     [32m  [32m✔[39m[0m[90m projection with $elemMatch (gh-5661)[0m
2025-04-11T19:23:50.6589282Z     [32m  [32m✔[39m[0m[90m multi cast error (gh-5609)[0m
2025-04-11T19:23:50.6742089Z     [32m  [32m✔[39m[0m[90m update validators with pushing null (gh-5710)[0m
2025-04-11T19:23:50.6879456Z     [32m  [32m✔[39m[0m[90m only calls setters once (gh-6203)[0m
2025-04-11T19:23:50.7045738Z     [32m  [32m✔[39m[0m[90m only calls setters once (gh-6203)[0m
2025-04-11T19:23:50.7306532Z     [32m  [32m✔[39m[0m[90m update validators with pull + $in (gh-6240)[0m
2025-04-11T19:23:50.7532466Z     [32m  [32m✔[39m[0m[90m avoids edge case with middleware cloning buffers (gh-5702)[0m
2025-04-11T19:23:50.7764962Z     [32m  [32m✔[39m[0m[90m setting subtype when saving (gh-5551)[0m
2025-04-11T19:23:50.7995015Z     [32m  [32m✔[39m[0m[90m properly handles casting nested objects in update (gh-4724)[0m
2025-04-11T19:23:50.8119472Z     [32m  [32m✔[39m[0m[90m doesnt do double validation on document arrays during updates (gh-4440)[0m
2025-04-11T19:23:50.8364831Z     [32m  [32m✔[39m[0m[90m runs setters on array elements (gh-7679)[0m
2025-04-11T19:23:50.8485241Z     [32m  [32m✔[39m[0m[90m avoid calling $pull in doc array (gh-6971) (gh-6889)[0m
2025-04-11T19:23:50.8619327Z     [32m  [32m✔[39m[0m[90m $pull with `required` and runValidators (gh-6972)[0m
2025-04-11T19:23:50.8759104Z 
2025-04-11T19:23:50.8760021Z [0m  types.documentarray[0m
2025-04-11T19:23:50.8797186Z   [32m  [32m✔[39m[0m[90m behaves and quacks like an array[0m
2025-04-11T19:23:50.8874307Z   [32m  [32m✔[39m[0m[90m #id[0m
2025-04-11T19:23:50.9085907Z   [32m  [32m✔[39m[0m[90m #push should work on ArraySubdocument more than 2 levels deep[0m
2025-04-11T19:23:50.9295102Z   [32m  [32m✔[39m[0m[90m cleans modified subpaths on splice() (gh-7249)[0m
2025-04-11T19:23:50.9370467Z   [32m  [32m✔[39m[0m[90m modifies ownerDocument() on set (gh-8479)[0m
2025-04-11T19:23:50.9472284Z   [32m  [32m✔[39m[0m[90m modifying subdoc path after `slice()` (gh-8356)[0m
2025-04-11T19:23:50.9680386Z   [32m  [32m✔[39m[0m[90m supports setting to newly constructed array with no path or parent (gh-8108)[0m
2025-04-11T19:23:50.9758117Z   [32m  [32m✔[39m[0m[90m keeps atomics after setting (gh-10272)[0m
2025-04-11T19:23:50.9869879Z   [32m  [32m✔[39m[0m[90m handles `DocumentArray#create()` with populated paths (gh-10749)[0m
2025-04-11T19:23:50.9934950Z   [32m  [32m✔[39m[0m[90m applies _id default (gh-12264)[0m
2025-04-11T19:23:51.0041100Z   [32m  [32m✔[39m[0m[90m gets correct path when underneath map (gh-12997)[0m
2025-04-11T19:23:51.0150815Z   [32m  [32m✔[39m[0m[90m bubbles up validation errors from doubly nested doc arrays (gh-14101)[0m
2025-04-11T19:23:51.0217933Z [0m    inspect[0m
2025-04-11T19:23:51.0262547Z     [32m  [32m✔[39m[0m[90m works with bad data[0m
2025-04-11T19:23:51.0324171Z [0m    toObject[0m
2025-04-11T19:23:51.0368758Z     [32m  [32m✔[39m[0m[90m works with bad data[0m
2025-04-11T19:23:51.0458483Z     [32m  [32m✔[39m[0m[90m passes options to its documents (gh-1415) (gh-4455)[0m
2025-04-11T19:23:51.0549869Z     [32m  [32m✔[39m[0m[90m uses the correct transform (gh-1412)[0m
2025-04-11T19:23:51.0687782Z [0m    create()[0m
2025-04-11T19:23:51.0738887Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:23:51.0798684Z [0m    push()[0m
2025-04-11T19:23:51.0982213Z     [32m  [32m✔[39m[0m[90m does not re-cast instances of its embedded doc[0m
2025-04-11T19:23:51.1075997Z     [32m  [32m✔[39m[0m[90m corrects #ownerDocument() and index if value was created with array.create() (gh-1385)[0m
2025-04-11T19:23:51.1166018Z     [32m  [32m✔[39m[0m[90m corrects #ownerDocument() if value was created with array.create() and set() (gh-7504)[0m
2025-04-11T19:23:51.1286646Z     [32m  [32m✔[39m[0m[90m reports validation errors with correct index path (gh-7724)[0m
2025-04-11T19:23:51.1344027Z [0m    required (gh-6364)[0m
2025-04-11T19:23:51.1396633Z     [32m  [32m✔[39m[0m[90m on top level[0m
2025-04-11T19:23:51.1487691Z     [32m  [32m✔[39m[0m[90m in arr[0m
2025-04-11T19:23:51.1544983Z [0m    invalidate()[0m
2025-04-11T19:23:51.1601064Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:23:51.1693574Z     [32m  [32m✔[39m[0m[90m handles validation failures[0m
2025-04-11T19:23:51.1908123Z     [32m  [32m✔[39m[0m[90m clears listeners on cast error (gh-6723)[0m
2025-04-11T19:23:51.1998643Z     [32m  [32m✔[39m[0m[90m slice() copies parent and path (gh-8317)[0m
2025-04-11T19:23:51.2112741Z     [32m  [32m✔[39m[0m[90m map() works (gh-8317)[0m
2025-04-11T19:23:51.2200478Z     [32m  [32m✔[39m[0m[90m slice() after map() works (gh-8399)[0m
2025-04-11T19:23:51.2314346Z     [32m  [32m✔[39m[0m[90m unshift() after map() works (gh-9012)[0m
2025-04-11T19:23:51.2438605Z 
2025-04-11T19:23:51.2439496Z [0m  model: findOneAndReplace:[0m
2025-04-11T19:23:51.2650777Z   [32m  [32m✔[39m[0m[90m returns the original document[0m
2025-04-11T19:23:51.2728385Z   [32m  [32m✔[39m[0m[90m options/conditions/doc are merged when no callback is passed[0m
2025-04-11T19:23:51.2953012Z   [32m  [32m✔[39m[0m[90m returns the original document[0m
2025-04-11T19:23:51.3029619Z   [32m  [32m✔[39m[0m[90m options/conditions/doc are merged when no callback is passed[0m
2025-04-11T19:23:51.3138113Z   [32m  [32m✔[39m[0m[90m supports v3 select string syntax[0m
2025-04-11T19:23:51.3245380Z   [32m  [32m✔[39m[0m[90m supports v3 select object syntax[0m
2025-04-11T19:23:51.3351899Z   [32m  [32m✔[39m[0m[90m supports v3 sort string syntax[0m
2025-04-11T19:23:51.3456050Z   [32m  [32m✔[39m[0m[90m supports v3 sort object syntax[0m
2025-04-11T19:23:51.3854700Z   [32m  [32m✔[39m[0m[90m supports population (gh-1395)[0m
2025-04-11T19:23:51.3949428Z   [32m  [32m✔[39m[0m[90m only calls setters once (gh-6203)[0m
2025-04-11T19:23:51.4235371Z   [32m  [32m✔[39m[0m[90m works (gh-7654)[0m
2025-04-11T19:23:51.4443215Z   [32m  [32m✔[39m[0m[90m schema-level projection (gh-7654)[0m
2025-04-11T19:23:51.4659936Z   [32m  [32m✔[39m[0m[90m supports `new` in addition to `returnOriginal` (gh-7846)[0m
2025-04-11T19:23:51.4885167Z   [32m  [32m✔[39m[0m[90m orFail() (gh-8030)[0m
2025-04-11T19:23:51.5106946Z   [32m  [32m✔[39m[0m[90m skips validation if `runValidators` === false (gh-11559)[0m
2025-04-11T19:23:51.5197491Z   [32m  [32m✔[39m[0m[90m respects query-level strict option (gh-13507)[0m
2025-04-11T19:23:51.5347574Z   [32m  [32m✔[39m[0m[90m respects schema-level strict option (gh-13507)[0m
2025-04-11T19:23:51.5526115Z   [32m  [32m✔[39m[0m[90m does not send overwrite or timestamps option to MongoDB[0m
2025-04-11T19:23:51.5815926Z   [32m  [32m✔[39m[0m[90m supports the `includeResultMetadata` option (gh-13539)[0m
2025-04-11T19:23:51.5859399Z [0m    middleware[0m
2025-04-11T19:23:51.6037006Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:23:51.6238069Z     [32m  [32m✔[39m[0m[90m works with exec() (gh-439)[0m
2025-04-11T19:23:51.6388771Z 
2025-04-11T19:23:51.6389735Z [0m  QueryCursor[0m
2025-04-11T19:23:51.6597205Z   [32m  [32m✔[39m[0m[90m as readable stream[0m
2025-04-11T19:23:51.6818811Z   [32m  [32m✔[39m[0m[90m handles non-boolean lean option (gh-7137)[0m
2025-04-11T19:23:51.7186446Z   [32m  [32m✔[39m[0m[90m data before close (gh-4998)[0m
2025-04-11T19:23:51.7404653Z   [32m  [32m✔[39m[0m[90m pulls schema-level readPreference (gh-8421)[0m
2025-04-11T19:23:51.8833294Z   [32m  [32m✔[39m[0m[90m eachAsync() with parallel > numDocs (gh-8422)[0m[31m (120ms)[0m
2025-04-11T19:23:51.9268654Z   [32m  [32m✔[39m[0m[90m eachAsync() with sort, parallel, and sync function (gh-8557)[0m
2025-04-11T19:23:51.9695162Z   [32m  [32m✔[39m[0m[90m closing query cursor emits `close` event only once (gh-8835)[0m
2025-04-11T19:23:52.0130046Z   [32m  [32m✔[39m[0m[90m closing aggregation cursor emits `close` event only once (gh-8835)[0m
2025-04-11T19:23:52.2528910Z   [32m  [32m✔[39m[0m[90m closing query cursor emits `close` event only once with stream pause/resume (gh-10876)[0m[31m (214ms)[0m
2025-04-11T19:23:52.4908101Z   [32m  [32m✔[39m[0m[90m closing aggregation cursor emits `close` event only once with stream pause/resume (gh-10876)[0m[31m (215ms)[0m
2025-04-11T19:23:52.7289426Z   [32m  [32m✔[39m[0m[90m query cursor emit end event (gh-10902)[0m[31m (216ms)[0m
2025-04-11T19:23:52.9667134Z   [32m  [32m✔[39m[0m[90m aggregate cursor emit end event (gh-10902)[0m[31m (215ms)[0m
2025-04-11T19:23:53.0570784Z   [32m  [32m✔[39m[0m[90m query cursor emit end event before close event (gh-10902)[0m[33m (67ms)[0m
2025-04-11T19:23:53.1444413Z   [32m  [32m✔[39m[0m[90m aggregate cursor emit end event before close event (gh-10902)[0m[33m (66ms)[0m
2025-04-11T19:23:53.1852658Z   [32m  [32m✔[39m[0m[90m passes document index as the second argument for query cursor (gh-8972)[0m
2025-04-11T19:23:53.2274444Z   [32m  [32m✔[39m[0m[90m passes document index as the second argument for aggregation cursor (gh-8972)[0m
2025-04-11T19:23:53.2688643Z   [32m  [32m✔[39m[0m[90m post hooks (gh-9435)[0m
2025-04-11T19:23:53.3107566Z   [32m  [32m✔[39m[0m[90m reports CastError with noCursorTimeout set (gh-10150)[0m
2025-04-11T19:23:53.3607831Z   [32m  [32m✔[39m[0m[90m reports error in pre save hook (gh-10785)[0m
2025-04-11T19:23:53.4076920Z   [32m  [32m✔[39m[0m[90m applies selected fields when using discriminators (gh-11130)[0m
2025-04-11T19:23:53.4492175Z   [32m  [32m✔[39m[0m[90m should allow middleware to run before applying _optionsForExec() gh-13417[0m
2025-04-11T19:23:53.4900394Z   [32m  [32m✔[39m[0m[90m handles skipMiddlewareFunction() (gh-13411)[0m
2025-04-11T19:23:53.5139505Z   [32m  [32m✔[39m[0m[90m supports including fields using plus path that have select: false in schema (gh-13773)[0m
2025-04-11T19:23:53.5516466Z   [32m  [32m✔[39m[0m[90m throws if calling skipMiddlewareFunction() with non-empty array (gh-13411)[0m
2025-04-11T19:23:53.5918322Z   [32m  [32m✔[39m[0m[90m returns the underlying Node driver cursor with getDriverCursor()[0m
2025-04-11T19:23:53.6127709Z   [32m  [32m✔[39m[0m[90m handles destroy() (gh-14966)[0m
2025-04-11T19:23:53.6318471Z   [32m  [32m✔[39m[0m[90m handles destroy() before cursor is created (gh-14966)[0m
2025-04-11T19:23:53.6354867Z [0m    #next()[0m
2025-04-11T19:23:53.6540376Z     [32m  [32m✔[39m[0m[90m with promises[0m
2025-04-11T19:23:53.6777881Z     [32m  [32m✔[39m[0m[90m with limit (gh-4266)[0m
2025-04-11T19:23:53.7176746Z     [32m  [32m✔[39m[0m[90m with projection[0m
2025-04-11T19:23:53.7416451Z     [32m  [32m✔[39m[0m[90m casting ObjectIds with where() (gh-4355)[0m
2025-04-11T19:23:53.7639942Z     [32m  [32m✔[39m[0m[90m cast errors (gh-4355)[0m
2025-04-11T19:23:53.7871125Z     [32m  [32m✔[39m[0m[90m with pre-find hooks (gh-5096)[0m
2025-04-11T19:23:53.7923498Z [0m      with populate[0m
2025-04-11T19:23:53.8633552Z       [32m  [32m✔[39m[0m[90m with populate without specify batchSize[0m
2025-04-11T19:23:53.9373142Z       [32m  [32m✔[39m[0m[90m with populate using custom batchSize[0m
2025-04-11T19:23:53.9469743Z [0m    `transform` option[0m
2025-04-11T19:23:53.9662888Z     [32m  [32m✔[39m[0m[90m transforms document[0m
2025-04-11T19:23:53.9728104Z [0m    #map[0m
2025-04-11T19:23:53.9925989Z     [32m  [32m✔[39m[0m[90m maps documents[0m
2025-04-11T19:23:54.0159005Z     [32m  [32m✔[39m[0m[90m with #next[0m
2025-04-11T19:23:54.0224181Z [0m    #eachAsync()[0m
2025-04-11T19:23:54.1450365Z     [32m  [32m✔[39m[0m[90m iterates one-by-one, stopping for promises[0m[31m (103ms)[0m
2025-04-11T19:23:54.1701987Z     [32m  [32m✔[39m[0m[90m parallelization[0m
2025-04-11T19:23:54.1766697Z [0m    #lean()[0m
2025-04-11T19:23:54.1963111Z     [32m  [32m✔[39m[0m[90m lean[0m
2025-04-11T19:23:54.2191292Z     [32m  [32m✔[39m[0m[90m lean = false (gh-7197)[0m
2025-04-11T19:23:54.2256496Z [0m    #close()[0m
2025-04-11T19:23:54.2449123Z     [32m  [32m✔[39m[0m[90m works (gh-4258)[0m
2025-04-11T19:23:54.2543409Z 
2025-04-11T19:23:54.2543937Z [0m  SchemaUUID[0m
2025-04-11T19:23:54.2739672Z   [32m  [32m✔[39m[0m[90m basic functionality should work[0m
2025-04-11T19:23:54.2809562Z   [32m  [32m✔[39m[0m[90m should throw error in case of invalid string[0m
2025-04-11T19:23:54.3046178Z   [32m  [32m✔[39m[0m[90m should work with $in and $nin and $all[0m
2025-04-11T19:23:54.3274983Z   [32m  [32m✔[39m[0m[90m should not convert to string nullish UUIDs (gh-13032)[0m
2025-04-11T19:23:54.3522667Z   [32m  [32m✔[39m[0m[90m works with populate (gh-13267)[0m
2025-04-11T19:23:54.3759057Z   [32m  [32m✔[39m[0m[90m handles built-in UUID type (gh-13103)[0m
2025-04-11T19:23:54.3992777Z   [32m  [32m✔[39m[0m[90m avoids converting maps of uuids to strings (gh-13657)[0m
2025-04-11T19:23:54.4036019Z   [36m  - should work with $bits* operators[0m
2025-04-11T19:23:54.4036619Z   [36m  - should work with $all operator[0m
2025-04-11T19:23:54.4037052Z   [36m  - should work with $lt, $lte, $gt, $gte operators[0m
2025-04-11T19:23:54.4076698Z 
2025-04-11T19:23:54.4077313Z [0m  updateValidators[0m
2025-04-11T19:23:54.4088550Z [0m    validators[0m
2025-04-11T19:23:54.4135730Z     [32m  [32m✔[39m[0m[90m flattens paths[0m
2025-04-11T19:23:54.4202417Z     [32m  [32m✔[39m[0m[90m doesnt flatten dates (gh-3194)[0m
2025-04-11T19:23:54.4268734Z     [32m  [32m✔[39m[0m[90m doesnt flatten empty arrays (gh-3554)[0m
2025-04-11T19:23:54.4338209Z     [32m  [32m✔[39m[0m[90m doesnt flatten decimal128 (gh-7561)[0m
2025-04-11T19:23:54.4396195Z     [32m  [32m✔[39m[0m[90m handles nested paths correctly (gh-3587)[0m
2025-04-11T19:23:54.4449390Z 
2025-04-11T19:23:54.4451535Z [0m  model: updateOne:[0m
2025-04-11T19:23:54.4692617Z   [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:23:54.4904544Z   [32m  [32m✔[39m[0m[90m casts doc arrays[0m
2025-04-11T19:23:54.5109189Z   [32m  [32m✔[39m[0m[90m makes copy of conditions and update options[0m
2025-04-11T19:23:54.5322630Z   [32m  [32m✔[39m[0m[90m $addToSet with $ (gh-479)[0m
2025-04-11T19:23:54.5529766Z   [32m  [32m✔[39m[0m[90m works with nested positional notation[0m
2025-04-11T19:23:54.5740590Z   [32m  [32m✔[39m[0m[90m handles $pull with obj literal (gh-542)[0m
2025-04-11T19:23:54.5946704Z   [32m  [32m✔[39m[0m[90m handles $pull of obj literal and nested $in[0m
2025-04-11T19:23:54.6177938Z   [32m  [32m✔[39m[0m[90m handles $pull and nested $nin[0m
2025-04-11T19:23:54.6399180Z   [32m  [32m✔[39m[0m[90m updates numbers atomically[0m
2025-04-11T19:23:54.6619132Z   [32m  [32m✔[39m[0m[90m passes number of affected docs[0m
2025-04-11T19:23:54.6831666Z   [32m  [32m✔[39m[0m[90m updates a number to null (gh-640)[0m
2025-04-11T19:23:54.7178656Z   [32m  [32m✔[39m[0m[90m handles $pull from Mixed arrays (gh-735)[0m
2025-04-11T19:23:54.7557903Z   [32m  [32m✔[39m[0m[90m handles $push with $ positionals (gh-1057)[0m
2025-04-11T19:23:54.7861982Z   [32m  [32m✔[39m[0m[90m handles nested paths starting with numbers (gh-1062)[0m
2025-04-11T19:23:54.8189322Z   [32m  [32m✔[39m[0m[90m handles positional operators with referenced docs (gh-1572)[0m
2025-04-11T19:23:54.8548505Z   [32m  [32m✔[39m[0m[90m use .where for update condition (gh-2170)[0m
2025-04-11T19:23:54.8848749Z   [32m  [32m✔[39m[0m[90m casts empty arrays[0m
2025-04-11T19:23:54.9165146Z   [32m  [32m✔[39m[0m[90m successfully casts set with nested mixed objects (gh-2796)[0m
2025-04-11T19:23:54.9471445Z   [32m  [32m✔[39m[0m[90m handles empty update with promises (gh-2796)[0m
2025-04-11T19:23:54.9661042Z   [32m  [32m✔[39m[0m[90m works with undefined date (gh-2833)[0m
2025-04-11T19:23:54.9993990Z   [32m  [32m✔[39m[0m[90m does not add virtuals to update (gh-2046)[0m
2025-04-11T19:23:55.0199513Z   [32m  [32m✔[39m[0m[90m doesnt modify original argument doc (gh-3008)[0m
2025-04-11T19:23:55.0274615Z [0m    using last[0m
2025-04-11T19:23:55.0479607Z     [32m  [32m✔[39m[0m[90m handles date casting (gh-479)[0m
2025-04-11T19:23:55.0713857Z     [32m  [32m✔[39m[0m[90m handles $addToSet (gh-545)[0m
2025-04-11T19:23:55.0964808Z     [32m  [32m✔[39m[0m[90m handles $addToSet with $each (gh-545)[0m
2025-04-11T19:23:55.1207610Z     [32m  [32m✔[39m[0m[90m handles $pop and $unset (gh-574)[0m
2025-04-11T19:23:55.1272512Z [0m    mongodb 2.4 features[0m
2025-04-11T19:23:55.1561101Z     [32m  [32m✔[39m[0m[90m $setOnInsert operator[0m
2025-04-11T19:23:55.1903082Z     [32m  [32m✔[39m[0m[90m push with $slice[0m
2025-04-11T19:23:55.1969803Z [0m    mongodb 2.6 features[0m
2025-04-11T19:23:55.2249600Z     [32m  [32m✔[39m[0m[90m supports $position[0m
2025-04-11T19:23:55.2594770Z     [32m  [32m✔[39m[0m[90m supports $currentDate[0m
2025-04-11T19:23:55.2664136Z [0m    defaults and validators (gh-860)[0m
2025-04-11T19:23:55.2943089Z     [32m  [32m✔[39m[0m[90m applies defaults on upsert[0m
2025-04-11T19:23:55.3288146Z     [32m  [32m✔[39m[0m[90m avoids nested paths if setting parent path (gh-4911)[0m
2025-04-11T19:23:55.3616970Z     [32m  [32m✔[39m[0m[90m doesnt set default on upsert if query sets it[0m
2025-04-11T19:23:55.3928794Z     [32m  [32m✔[39m[0m[90m properly sets default on upsert if query wont set it[0m
2025-04-11T19:23:55.4241264Z     [32m  [32m✔[39m[0m[90m handles defaults on document arrays (gh-4456)[0m
2025-04-11T19:23:55.4479506Z     [32m  [32m✔[39m[0m[90m runs validators if theyre set[0m
2025-04-11T19:23:55.4734193Z     [32m  [32m✔[39m[0m[90m validators handle $unset and $setOnInsert[0m
2025-04-11T19:23:55.4968557Z     [32m  [32m✔[39m[0m[90m global validators option (gh-6578)[0m
2025-04-11T19:23:55.5199606Z     [32m  [32m✔[39m[0m[90m min/max, enum, and regex built-in validators work[0m
2025-04-11T19:23:55.5445730Z     [32m  [32m✔[39m[0m[90m multiple validation errors[0m
2025-04-11T19:23:55.5701593Z     [32m  [32m✔[39m[0m[90m validators ignore $inc[0m
2025-04-11T19:23:55.5950567Z     [32m  [32m✔[39m[0m[90m validators handle positional operator (gh-3167)[0m
2025-04-11T19:23:55.6305032Z     [32m  [32m✔[39m[0m[90m validators handle arrayFilters (gh-7536)[0m
2025-04-11T19:23:55.6558592Z     [32m  [32m✔[39m[0m[90m required and single nested (gh-4479)[0m
2025-04-11T19:23:55.6649263Z [0m    middleware[0m
2025-04-11T19:23:55.6941478Z     [32m  [32m✔[39m[0m[90m can specify pre and post hooks[0m
2025-04-11T19:23:55.7188703Z     [32m  [32m✔[39m[0m[90m runs before validators (gh-2706)[0m
2025-04-11T19:23:55.7267272Z [0m      objects and arrays[0m
2025-04-11T19:23:55.7464407Z       [32m  [32m✔[39m[0m[90m embedded objects (gh-2706)[0m
2025-04-11T19:23:55.7752660Z       [32m  [32m✔[39m[0m[90m handles document array validation (gh-2733)[0m
2025-04-11T19:23:55.8016189Z       [32m  [32m✔[39m[0m[90m validators on arrays (gh-3724)[0m
2025-04-11T19:23:55.8115444Z [0m    set() (gh-5770)[0m
2025-04-11T19:23:55.8438522Z     [32m  [32m✔[39m[0m[90m works with middleware and doesn't change the op[0m
2025-04-11T19:23:55.8777735Z     [32m  [32m✔[39m[0m[90m object syntax for path parameter[0m
2025-04-11T19:23:55.8849041Z [0m    bug fixes[0m
2025-04-11T19:23:55.9145954Z     [32m  [32m✔[39m[0m[90m can $rename (gh-1845)[0m
2025-04-11T19:23:55.9434310Z     [32m  [32m✔[39m[0m[90m throws CastError if $rename fails to cast to string (gh-1845)[0m
2025-04-11T19:23:55.9793920Z     [32m  [32m✔[39m[0m[90m allows objects with positional operator (gh-3185)[0m
2025-04-11T19:23:56.0123919Z     [32m  [32m✔[39m[0m[90m mixed type casting (gh-3305)[0m
2025-04-11T19:23:56.0461442Z     [32m  [32m✔[39m[0m[90m replaceOne[0m
2025-04-11T19:23:56.0796690Z     [32m  [32m✔[39m[0m[90m mixed nested type casting (gh-3337)[0m
2025-04-11T19:23:56.1122218Z     [32m  [32m✔[39m[0m[90m with single nested (gh-3820)[0m
2025-04-11T19:23:56.1454148Z     [32m  [32m✔[39m[0m[90m with single nested and transform (gh-4621)[0m
2025-04-11T19:23:56.1725640Z     [32m  [32m✔[39m[0m[90m works with buffers (gh-3496)[0m
2025-04-11T19:23:56.2074727Z     [32m  [32m✔[39m[0m[90m .updateOne(doc) (gh-3221)[0m
2025-04-11T19:23:56.2418134Z     [32m  [32m✔[39m[0m[90m middleware update with exec (gh-3549)[0m
2025-04-11T19:23:56.2639615Z     [32m  [32m✔[39m[0m[90m $push with buffer doesnt throw error (gh-3890)[0m
2025-04-11T19:23:56.2974107Z     [32m  [32m✔[39m[0m[90m $set with buffer (gh-3961)[0m
2025-04-11T19:23:56.3283507Z     [32m  [32m✔[39m[0m[90m versioning with setDefaultsOnInsert (gh-2593)[0m
2025-04-11T19:23:56.4103849Z     [32m  [32m✔[39m[0m[90m updates with timestamps with $set (gh-4989) (gh-7152)[0m[33m (62ms)[0m
2025-04-11T19:23:56.4443285Z     [32m  [32m✔[39m[0m[90m lets $currentDate go through with updatedAt (gh-5222)[0m
2025-04-11T19:23:56.4675508Z     [32m  [32m✔[39m[0m[90m update validators on single nested (gh-4332)[0m
2025-04-11T19:23:56.5037335Z     [32m  [32m✔[39m[0m[90m updates child schema timestamps with $push (gh-4049)[0m
2025-04-11T19:23:56.5370571Z     [32m  [32m✔[39m[0m[90m updates child schema timestamps with $set (gh-4049)[0m
2025-04-11T19:23:56.5595082Z     [32m  [32m✔[39m[0m[90m handles positional operator with timestamps (gh-4418)[0m
2025-04-11T19:23:56.5948981Z     [32m  [32m✔[39m[0m[90m push with timestamps (gh-4514)[0m
2025-04-11T19:23:56.6488521Z     [32m  [32m✔[39m[0m[90m addToSet (gh-4953)[0m
2025-04-11T19:23:56.6852463Z     [32m  [32m✔[39m[0m[90m overwrite with timestamps (gh-4054)[0m
2025-04-11T19:23:56.7192282Z     [32m  [32m✔[39m[0m[90m update with buffer and exec (gh-4609)[0m
2025-04-11T19:23:56.7510510Z     [32m  [32m✔[39m[0m[90m single nested with runValidators (gh-4420)[0m
2025-04-11T19:23:56.7835778Z     [32m  [32m✔[39m[0m[90m single nested under doc array with runValidators (gh-4960)[0m
2025-04-11T19:23:56.8083106Z     [32m  [32m✔[39m[0m[90m handles $set on document array in discriminator with runValidators (gh-12518)[0m
2025-04-11T19:23:56.8435169Z     [32m  [32m✔[39m[0m[90m single nested schema with geo (gh-4465)[0m
2025-04-11T19:23:56.8775325Z     [32m  [32m✔[39m[0m[90m runs validation on Mixed properties of embedded arrays during updates (gh-4441)[0m
2025-04-11T19:23:56.9121555Z     [32m  [32m✔[39m[0m[90m updating single nested doc property casts correctly (gh-4655)[0m
2025-04-11T19:23:56.9450651Z     [32m  [32m✔[39m[0m[90m findOneAndUpdate with nested arrays (gh-5032)[0m
2025-04-11T19:23:56.9781940Z     [32m  [32m✔[39m[0m[90m findOneAndUpdate with timestamps (gh-5045)[0m
2025-04-11T19:23:57.0003167Z     [32m  [32m✔[39m[0m[90m doesnt double-call setters when updating an array (gh-5041)[0m
2025-04-11T19:23:57.0358330Z     [32m  [32m✔[39m[0m[90m does not fail if passing whole doc (gh-5088)[0m
2025-04-11T19:23:57.0708724Z     [32m  [32m✔[39m[0m[90m does not fail if passing whole doc (gh-5111)[0m
2025-04-11T19:23:57.1049223Z     [32m  [32m✔[39m[0m[90m $pullAll with null (gh-5164)[0m
2025-04-11T19:23:57.1384039Z     [32m  [32m✔[39m[0m[90m $set array (gh-5403)[0m
2025-04-11T19:23:57.1786313Z     [32m  [32m✔[39m[0m[90m doesn't skip casting the query on nested arrays (gh-7098)[0m
2025-04-11T19:23:57.2123103Z     [32m  [32m✔[39m[0m[90m defaults with overwrite and no update validators (gh-5384)[0m
2025-04-11T19:23:57.2356719Z     [32m  [32m✔[39m[0m[90m update validators with nested required (gh-5269)[0m
2025-04-11T19:23:57.2598890Z     [32m  [32m✔[39m[0m[90m $push with updateValidators and top-level doc (gh-5430)[0m
2025-04-11T19:23:57.3026380Z     [32m  [32m✔[39m[0m[90m $pull with updateValidators (gh-5555)[0m
2025-04-11T19:23:57.3383758Z     [32m  [32m✔[39m[0m[90m $pull with updateValidators and $in (gh-5744)[0m
2025-04-11T19:23:57.3603037Z     [32m  [32m✔[39m[0m[90m $pull with updateValidators and required array (gh-6341)[0m
2025-04-11T19:23:57.4115262Z     [32m  [32m✔[39m[0m[90m update with Decimal type (gh-5361)[0m
2025-04-11T19:23:57.4434910Z     [32m  [32m✔[39m[0m[90m strict false in query (gh-5453)[0m
2025-04-11T19:23:57.4778766Z     [32m  [32m✔[39m[0m[90m replaceOne with buffer (gh-6124)[0m
2025-04-11T19:23:57.5025057Z     [32m  [32m✔[39m[0m[90m returns error if passing array as conditions (gh-3677)[0m
2025-04-11T19:23:57.5411202Z     [32m  [32m✔[39m[0m[90m upsert: 1 (gh-5839)[0m
2025-04-11T19:23:57.5788675Z     [32m  [32m✔[39m[0m[90m casting $addToSet without $each (gh-6086)[0m
2025-04-11T19:23:57.6151718Z     [32m  [32m✔[39m[0m[90m doesn't add $each when pushing an array into an array (gh-6768)[0m
2025-04-11T19:23:57.6556925Z     [32m  [32m✔[39m[0m[90m casting embedded discriminators if path specified in filter (gh-5841)[0m
2025-04-11T19:23:57.6923787Z     [32m  [32m✔[39m[0m[90m update with nested id (gh-5640)[0m
2025-04-11T19:23:57.7281648Z     [32m  [32m✔[39m[0m[90m $inc cast errors (gh-6770)[0m
2025-04-11T19:23:57.7528589Z     [32m  [32m✔[39m[0m[90m does not treat virtuals as an error for strict: throw (gh-6731)[0m
2025-04-11T19:23:57.7793237Z     [32m  [32m✔[39m[0m[90m cast error in update conditions (gh-5477)[0m
2025-04-11T19:23:57.8101966Z     [32m  [32m✔[39m[0m[90m single embedded schema under document array (gh-4519)[0m
2025-04-11T19:23:57.8513448Z     [32m  [32m✔[39m[0m[90m casts objects to array when clobbering with $set (gh-6532)[0m
2025-04-11T19:23:57.8623317Z 
2025-04-11T19:23:57.8624257Z [0m  model: updateOne: [0m
2025-04-11T19:23:57.8824445Z   [32m  [32m✔[39m[0m[90m updating a map (gh-7111)[0m
2025-04-11T19:23:57.9036002Z   [32m  [32m✔[39m[0m[90m updating a map path underneath a single nested subdoc (gh-9298)[0m
2025-04-11T19:23:57.9130956Z   [32m  [32m✔[39m[0m[90m overwrite an array with empty (gh-7135)[0m
2025-04-11T19:23:57.9475145Z   [32m  [32m✔[39m[0m[90m sets child timestamps even without $set (gh-7261)[0m
2025-04-11T19:23:57.9734646Z   [32m  [32m✔[39m[0m[90m supports discriminators if key is specified in conditions (gh-7843)[0m
2025-04-11T19:23:57.9932374Z   [32m  [32m✔[39m[0m[90m immutable createdAt (gh-7917)[0m
2025-04-11T19:23:58.0131657Z   [32m  [32m✔[39m[0m[90m overwriting immutable createdAt (gh-8619)[0m
2025-04-11T19:23:58.0348561Z   [32m  [32m✔[39m[0m[90m conditional immutable (gh-8001)[0m
2025-04-11T19:23:58.0536954Z   [32m  [32m✔[39m[0m[90m allow $pull with non-existent schema field (gh-8166)[0m
2025-04-11T19:23:58.0782918Z   [32m  [32m✔[39m[0m[90m update embedded discriminator path if key in $elemMatch (gh-8063)[0m
2025-04-11T19:23:58.0992294Z   [32m  [32m✔[39m[0m[90m moves $set of immutable properties to $setOnInsert (gh-8467) (gh-9537)[0m
2025-04-11T19:23:58.1185038Z   [32m  [32m✔[39m[0m[90m moves $set of immutable properties to $setOnInsert (gh-8951)[0m
2025-04-11T19:23:58.1395196Z   [32m  [32m✔[39m[0m[90m updates buffers with `runValidators` successfully (gh-8580)[0m
2025-04-11T19:23:58.1640386Z   [32m  [32m✔[39m[0m[90m allows overriding child strict mode with top-level strict (gh-8961)[0m
2025-04-11T19:23:58.1979955Z   [32m  [32m✔[39m[0m[90m handles timestamp properties in nested paths when overwriting parent path (gh-9105)[0m
2025-04-11T19:23:58.2074351Z   [32m  [32m✔[39m[0m[90m update validators respect storeSubdocValidationError (gh-9172)[0m
2025-04-11T19:23:58.2294250Z   [32m  [32m✔[39m[0m[90m handles spread docs (gh-9518)[0m
2025-04-11T19:23:58.2498920Z   [32m  [32m✔[39m[0m[90m works with doubly nested arrays with $pullAll (gh-13190)[0m
2025-04-11T19:23:58.2687833Z   [32m  [32m✔[39m[0m[90m should throw when matchedCount === 0 and using orFail() on the query gh-11620[0m
2025-04-11T19:23:58.2976269Z   [32m  [32m✔[39m[0m[90m updateOne with top level key that starts with $ (gh-13786)[0m
2025-04-11T19:23:58.3166294Z   [32m  [32m✔[39m[0m[90m works with update validators and single nested doc with numberic paths (gh-13977)[0m
2025-04-11T19:23:58.3371017Z   [32m  [32m✔[39m[0m[90m handles embedded discriminators with $pull when discriminator key set in filter (gh-14675)[0m
2025-04-11T19:23:58.3584815Z   [32m  [32m✔[39m[0m[90m casts using overwritten discriminator key schema (gh-15051)[0m
2025-04-11T19:23:58.3630334Z [0m    mongodb 42 features[0m
2025-04-11T19:23:58.3919023Z     [32m  [32m✔[39m[0m[90m update pipeline (gh-8225)[0m
2025-04-11T19:23:58.4132191Z     [32m  [32m✔[39m[0m[90m update pipeline - $unset with string (gh-11106)[0m
2025-04-11T19:23:58.4354912Z     [32m  [32m✔[39m[0m[90m update pipeline timestamps (gh-8524)[0m
2025-04-11T19:23:58.4419944Z [0m    overwriteDiscriminatorKey[0m
2025-04-11T19:23:58.4688107Z     [32m  [32m✔[39m[0m[90m allows changing discriminator key in update (gh-6087)[0m
2025-04-11T19:23:58.4755519Z [0m    converts dot separated paths to nested structure (gh-10200)[0m
2025-04-11T19:23:58.4815123Z     [32m  [32m✔[39m[0m[90m works with new Model(...)[0m
2025-04-11T19:23:58.5055968Z     [32m  [32m✔[39m[0m[90m works with Model.create(...)[0m
2025-04-11T19:23:58.5310468Z     [32m  [32m✔[39m[0m[90m works with Model.updateOne(...)[0m
2025-04-11T19:23:58.5553192Z     [32m  [32m✔[39m[0m[90m works with Model.bulkWrite(...)[0m
2025-04-11T19:23:58.5659759Z 
2025-04-11T19:23:58.5660523Z [0m  Query:[0m
2025-04-11T19:23:58.5671408Z [0m    toConstructor[0m
2025-04-11T19:23:58.5740266Z     [32m  [32m✔[39m[0m[90m creates a query[0m
2025-04-11T19:23:58.5815177Z     [32m  [32m✔[39m[0m[90m copies all the right values[0m
2025-04-11T19:23:58.5908097Z     [32m  [32m✔[39m[0m[90m gets expected results[0m
2025-04-11T19:23:58.6017223Z     [32m  [32m✔[39m[0m[90m can be re-used multiple times[0m
2025-04-11T19:23:58.6080486Z     [32m  [32m✔[39m[0m[90m options get merged properly[0m
2025-04-11T19:23:58.6147503Z     [32m  [32m✔[39m[0m[90m options get cloned (gh-3176)[0m
2025-04-11T19:23:58.6215973Z     [32m  [32m✔[39m[0m[90m creates subclasses of mquery[0m
2025-04-11T19:23:58.6294114Z     [32m  [32m✔[39m[0m[90m with findOneAndUpdate (gh-4318)[0m
2025-04-11T19:23:58.6445850Z     [32m  [32m✔[39m[0m[90m gets middleware from model (gh-6455)[0m
2025-04-11T19:23:58.6516894Z     [32m  [32m✔[39m[0m[90m works with entries-style sort() syntax (gh-8159)[0m
2025-04-11T19:23:58.6599822Z 
2025-04-11T19:23:58.6600448Z [0m  id virtual getter[0m
2025-04-11T19:23:58.6672597Z   [32m  [32m✔[39m[0m[90m should work as expected with an ObjectId[0m
2025-04-11T19:23:58.6867819Z   [32m  [32m✔[39m[0m[90m should be turned off when `id` option is set to false[0m
2025-04-11T19:23:58.7047342Z   [32m  [32m✔[39m[0m[90m should be turned off when the schema has a set `id` path[0m
2025-04-11T19:23:58.7128844Z 
2025-04-11T19:23:58.7129641Z [0m  documents should not be converted to _id (gh-1408)[0m
2025-04-11T19:23:58.7656579Z   [32m  [32m✔[39m[0m[90m if an embedded doc[0m[33m (49ms)[0m
2025-04-11T19:23:58.7687534Z 
2025-04-11T19:23:58.7688383Z [0m  insertMany()[0m
2025-04-11T19:23:58.7881646Z   [32m  [32m✔[39m[0m[90m with timestamps (gh-723)[0m
2025-04-11T19:23:58.8084619Z   [32m  [32m✔[39m[0m[90m timestamps respect $timestamps() (gh-12117)[0m
2025-04-11T19:23:58.8298091Z   [32m  [32m✔[39m[0m[90m insertMany() with nested timestamps (gh-12060)[0m
2025-04-11T19:23:58.8482077Z   [32m  [32m✔[39m[0m[90m insertMany() (gh-723)[0m
2025-04-11T19:23:58.8802473Z   [32m  [32m✔[39m[0m[90m insertMany() ordered option for constraint errors (gh-3893)[0m
2025-04-11T19:23:58.9089474Z   [32m  [32m✔[39m[0m[90m insertMany() ordered option for validation errors (gh-5068)[0m
2025-04-11T19:23:58.9336644Z   [32m  [32m✔[39m[0m[90m insertMany() `writeErrors` if only one error (gh-8938)[0m
2025-04-11T19:23:58.9420507Z   [32m  [32m✔[39m[0m[90m insertMany() ordered option for single validation error[0m
2025-04-11T19:23:58.9622987Z   [32m  [32m✔[39m[0m[90m insertMany() hooks (gh-3846)[0m
2025-04-11T19:23:58.9766746Z   [32m  [32m✔[39m[0m[90m returns empty array if no documents (gh-8130)[0m
2025-04-11T19:23:58.9997001Z   [32m  [32m✔[39m[0m[90m insertMany() multi validation error with ordered false (gh-5337)[0m
2025-04-11T19:23:59.0084670Z   [32m  [32m✔[39m[0m[90m insertMany() validation error with ordered true when all documents are invalid[0m
2025-04-11T19:23:59.0198306Z   [32m  [32m✔[39m[0m[90m insertMany() validation error with ordered false when all documents are invalid[0m
2025-04-11T19:23:59.0415529Z   [32m  [32m✔[39m[0m[90m insertMany() validation error with ordered false and rawResult for checking which documents failed (gh-12791)[0m
2025-04-11T19:23:59.0586630Z   [32m  [32m✔[39m[0m[90m insertMany() validation error with ordered false and rawResult for mixed write and validation error (gh-12791)[0m
2025-04-11T19:23:59.0890801Z   [32m  [32m✔[39m[0m[90m insertMany() populate option (gh-9720)[0m
2025-04-11T19:23:59.1060676Z   [32m  [32m✔[39m[0m[90m insertMany() sets `isNew` for inserted documents with `ordered = false` (gh-9677)[0m
2025-04-11T19:23:59.1235281Z   [32m  [32m✔[39m[0m[90m insertMany() returns only inserted docs with `ordered = true`[0m
2025-04-11T19:23:59.1316053Z   [32m  [32m✔[39m[0m[90m insertMany() validation error with ordered true and rawResult true when all documents are invalid[0m
2025-04-11T19:23:59.1440408Z   [32m  [32m✔[39m[0m[90m insertMany() validation error with ordered false and rawResult true when all documents are invalid[0m
2025-04-11T19:23:59.1688939Z   [32m  [32m✔[39m[0m[90m insertMany() depopulate (gh-4590)[0m
2025-04-11T19:23:59.1930389Z   [32m  [32m✔[39m[0m[90m insertMany() with error handlers (gh-6228)[0m
2025-04-11T19:23:59.1994374Z   [32m  [32m✔[39m[0m[90m insertMany() with non object array error can be catched (gh-8363)[0m
2025-04-11T19:23:59.2189084Z   [32m  [32m✔[39m[0m[90m insertMany() return docs with empty modifiedPaths (gh-7852)[0m
2025-04-11T19:23:59.2267587Z   [32m  [32m✔[39m[0m[90m insertMany with Decimal (gh-5190)[0m
2025-04-11T19:23:59.2308275Z [0m    insertMany() lean option to bypass validation (gh-8234)[0m
2025-04-11T19:23:59.2452342Z     [32m  [32m✔[39m[0m[90m insertMany() should bypass validation if lean option set to `true`[0m
2025-04-11T19:23:59.2549219Z     [32m  [32m✔[39m[0m[90m insertMany() should validate if lean option not set[0m
2025-04-11T19:23:59.2639271Z     [32m  [32m✔[39m[0m[90m insertMany() should validate if lean option set to `false`[0m
2025-04-11T19:23:59.2734585Z 
2025-04-11T19:23:59.2735306Z [0m  types.buffer[0m
2025-04-11T19:23:59.2785203Z   [32m  [32m✔[39m[0m[90m test that a mongoose buffer behaves and quacks like a buffer[0m
2025-04-11T19:23:59.2950772Z   [32m  [32m✔[39m[0m[90m buffer validation[0m
2025-04-11T19:23:59.3119816Z   [32m  [32m✔[39m[0m[90m buffer storage[0m
2025-04-11T19:23:59.3290565Z   [32m  [32m✔[39m[0m[90m test write markModified[0m
2025-04-11T19:23:59.3499426Z   [32m  [32m✔[39m[0m[90m can be set to null[0m
2025-04-11T19:23:59.3702808Z   [32m  [32m✔[39m[0m[90m can be updated to null[0m
2025-04-11T19:23:59.3745903Z [0m    #toObject[0m
2025-04-11T19:23:59.3790883Z     [32m  [32m✔[39m[0m[90m retains custom subtypes[0m
2025-04-11T19:23:59.3850372Z [0m    subtype[0m
2025-04-11T19:23:59.3900903Z     [32m  [32m✔[39m[0m[90m default value[0m
2025-04-11T19:23:59.4023152Z     [32m  [32m✔[39m[0m[90m method works[0m
2025-04-11T19:23:59.4253526Z     [32m  [32m✔[39m[0m[90m is stored[0m
2025-04-11T19:23:59.4488198Z     [32m  [32m✔[39m[0m[90m changes are retained[0m
2025-04-11T19:23:59.4584377Z     [32m  [32m✔[39m[0m[90m cast from number (gh-3764)[0m
2025-04-11T19:23:59.4703583Z     [32m  [32m✔[39m[0m[90m cast from string[0m
2025-04-11T19:23:59.4820407Z     [32m  [32m✔[39m[0m[90m cast from array[0m
2025-04-11T19:23:59.4937163Z     [32m  [32m✔[39m[0m[90m cast from Binary[0m
2025-04-11T19:23:59.5056574Z     [32m  [32m✔[39m[0m[90m cast from json (gh-6863)[0m
2025-04-11T19:23:59.5172136Z     [32m  [32m✔[39m[0m[90m is an `instanceof Buffer`[0m
2025-04-11T19:23:59.5297869Z 
2025-04-11T19:23:59.5298342Z [0m  pre/post hooks, type of this[0m
2025-04-11T19:23:59.5708020Z   [32m  [32m✔[39m[0m[90m dynamic type of this in pre/post hooks[0m
2025-04-11T19:23:59.5789489Z 
2025-04-11T19:23:59.5795485Z [0m  Model[0m
2025-04-11T19:23:59.6027636Z   [32m  [32m✔[39m[0m[90m can be created using _id as embedded document[0m
2025-04-11T19:23:59.6117416Z   [32m  [32m✔[39m[0m[90m gh-2140[0m
2025-04-11T19:23:59.6272659Z   [32m  [32m✔[39m[0m[90m collection name can be specified through schema[0m
2025-04-11T19:23:59.6520752Z   [32m  [32m✔[39m[0m[90m saving a model with a null value should perpetuate that null value to the db[0m
2025-04-11T19:23:59.6773399Z   [32m  [32m✔[39m[0m[90m saves subdocuments middleware correctly[0m
2025-04-11T19:23:59.6966054Z   [32m  [32m✔[39m[0m[90m instantiating a model with a hash that maps to at least 1 undefined value[0m
2025-04-11T19:23:59.7194451Z   [32m  [32m✔[39m[0m[90m modified nested objects which contain MongoseNumbers should not cause a RangeError on save (gh-714)[0m
2025-04-11T19:23:59.7434202Z   [32m  [32m✔[39m[0m[90m no RangeError on deleteOne() of a doc with Number _id (gh-714)[0m
2025-04-11T19:23:59.7635761Z   [32m  [32m✔[39m[0m[90m over-writing a number should persist to the db (gh-342)[0m
2025-04-11T19:23:59.7841379Z   [32m  [32m✔[39m[0m[90m changing a number non-atomically (gh-203)[0m
2025-04-11T19:23:59.8091982Z   [32m  [32m✔[39m[0m[90m doubly nested array saving and loading[0m
2025-04-11T19:23:59.8326073Z   [32m  [32m✔[39m[0m[90m multiple number push() calls[0m
2025-04-11T19:23:59.8571474Z   [32m  [32m✔[39m[0m[90m multiple push() calls[0m
2025-04-11T19:23:59.8795947Z   [32m  [32m✔[39m[0m[90m activePaths should be updated for nested modifieds[0m
2025-04-11T19:23:59.9007916Z   [32m  [32m✔[39m[0m[90m activePaths should be updated for nested modifieds as promise[0m
2025-04-11T19:23:59.9219538Z   [32m  [32m✔[39m[0m[90m $pull should affect what you see in an array before a save[0m
2025-04-11T19:23:59.9470514Z   [32m  [32m✔[39m[0m[90m $shift[0m
2025-04-11T19:23:59.9676283Z   [32m  [32m✔[39m[0m[90m updating an embedded document in an embedded array (gh-255)[0m
2025-04-11T19:24:00.0040748Z   [32m  [32m✔[39m[0m[90m updating an embedded array document to an Object value (gh-334)[0m
2025-04-11T19:24:00.0258843Z   [32m  [32m✔[39m[0m[90m saving an embedded document twice should not push that doc onto the parent doc twice (gh-267)[0m
2025-04-11T19:24:00.0469088Z   [32m  [32m✔[39m[0m[90m removing a subdocument atomically[0m
2025-04-11T19:24:00.0670780Z   [32m  [32m✔[39m[0m[90m single pull embedded doc[0m
2025-04-11T19:24:00.0899469Z   [32m  [32m✔[39m[0m[90m saving mixed data[0m
2025-04-11T19:24:00.0975549Z   [32m  [32m✔[39m[0m[90m populating mixed data from the constructor (gh-200)[0m
2025-04-11T19:24:00.1275535Z   [32m  [32m✔[39m[0m[90m "type" is allowed as a key[0m
2025-04-11T19:24:00.1476375Z   [32m  [32m✔[39m[0m[90m unaltered model does not clear the doc (gh-195)[0m
2025-04-11T19:24:00.1732322Z   [32m  [32m✔[39m[0m[90m subdocuments with changed values should persist the values[0m
2025-04-11T19:24:00.1939033Z   [32m  [32m✔[39m[0m[90m a single instantiated document should be able to update its embedded documents more than once[0m
2025-04-11T19:24:00.2168035Z   [32m  [32m✔[39m[0m[90m should not throw range error when using Number _id and saving existing doc (gh-691)[0m
2025-04-11T19:24:00.2343799Z   [32m  [32m✔[39m[0m[90m path is cast to correct value when retreived from db[0m
2025-04-11T19:24:00.2727630Z   [32m  [32m✔[39m[0m[90m setting a path to undefined should retain the value as undefined[0m
2025-04-11T19:24:00.2811033Z   [32m  [32m✔[39m[0m[90m allow for object passing to ref paths (gh-1606)[0m
2025-04-11T19:24:00.3040915Z   [32m  [32m✔[39m[0m[90m setters trigger on null values (gh-1445)[0m
2025-04-11T19:24:00.3414829Z   [32m  [32m✔[39m[0m[90m dropDatabase() after init allows re-init (gh-6967)[0m
2025-04-11T19:24:00.3651169Z   [32m  [32m✔[39m[0m[90m replaceOne always sets version key in top-level (gh-7138)[0m
2025-04-11T19:24:00.3735379Z   [32m  [32m✔[39m[0m[90m can JSON.stringify(Model.schema) with nested (gh-7220)[0m
2025-04-11T19:24:00.4046957Z   [32m  [32m✔[39m[0m[90m sets $session() before pre save hooks run (gh-7742)[0m
2025-04-11T19:24:00.4295133Z   [32m  [32m✔[39m[0m[90m sets $session() before pre deleteOne hooks run (gh-7742)[0m
2025-04-11T19:24:00.4534894Z   [32m  [32m✔[39m[0m[90m set $session() before pre validate hooks run on bulkWrite and insertMany (gh-7769)[0m
2025-04-11T19:24:00.4777203Z   [32m  [32m✔[39m[0m[90m custom statics that overwrite query functions dont get hooks by default (gh-7790)[0m
2025-04-11T19:24:00.4996413Z   [32m  [32m✔[39m[0m[90m custom statics that overwrite aggregate functions dont get hooks by default (gh-14903)[0m
2025-04-11T19:24:00.5236995Z   [32m  [32m✔[39m[0m[90m custom statics that overwrite model functions dont get hooks by default[0m
2025-04-11T19:24:00.5318554Z   [32m  [32m✔[39m[0m[90m custom statics that overwrite document functions dont get hooks by default[0m
2025-04-11T19:24:00.5614837Z   [32m  [32m✔[39m[0m[90m error handling middleware passes saved doc (gh-7832)[0m
2025-04-11T19:24:00.5699069Z   [32m  [32m✔[39m[0m[90m throws readable error if calling Model function with bad context (gh-7957)[0m
2025-04-11T19:24:00.5991518Z   [32m  [32m✔[39m[0m[90m sets correct `Document#op` with `save()` (gh-8439)[0m
2025-04-11T19:24:00.6268599Z   [32m  [32m✔[39m[0m[90m bulkWrite sets discriminator filters (gh-8590)[0m
2025-04-11T19:24:00.6571436Z   [32m  [32m✔[39m[0m[90m bulkWrite skips defaults based on global setDefaultsOnInsert (gh-13823)[0m
2025-04-11T19:24:00.6805781Z   [32m  [32m✔[39m[0m[90m bulkWrite upsert works when update casts to empty (gh-8698)[0m
2025-04-11T19:24:00.6894326Z   [32m  [32m✔[39m[0m[90m bulkWrite upsert with non-schema path in filter (gh-8698)[0m
2025-04-11T19:24:00.7253574Z   [32m  [32m✔[39m[0m[90m bulkWrite can disable timestamps with updateOne, and updateMany[0m
2025-04-11T19:24:00.7647009Z   [32m  [32m✔[39m[0m[90m bulkwrite should not change updatedAt on subdocs when timestamps set to false (gh-13611)[0m
2025-04-11T19:24:00.7863401Z   [32m  [32m✔[39m[0m[90m bulkWrite can overwrite schema `strict` option for filters and updates (gh-8778)[0m
2025-04-11T19:24:00.8012940Z   [32m  [32m✔[39m[0m[90m cast errors have `kind` field (gh-8953)[0m
2025-04-11T19:24:00.8369753Z   [32m  [32m✔[39m[0m[90m casts bulkwrite timestamps to `Number` when specified (gh-9030)[0m
2025-04-11T19:24:00.8453995Z   [32m  [32m✔[39m[0m[90m Model.bulkWrite(...) does not throw an error when provided an empty array (gh-9131)[0m
2025-04-11T19:24:00.8746361Z   [32m  [32m✔[39m[0m[90m Model.bulkWrite(...) does not throw an error with upsert:true, setDefaultsOnInsert: true (gh-9157)[0m
2025-04-11T19:24:00.8896907Z   [32m  [32m✔[39m[0m[90m Model.bulkWrite(...) does not hang with empty array and ordered: false (gh-13664)[0m
2025-04-11T19:24:00.9213227Z   [32m  [32m✔[39m[0m[90m allows calling `create()` after `bulkWrite()` (gh-9350)[0m
2025-04-11T19:24:00.9296186Z   [32m  [32m✔[39m[0m[90m skips applying init hooks if `document` option set to `false` (gh-9316)[0m
2025-04-11T19:24:00.9602058Z   [32m  [32m✔[39m[0m[90m retains atomics after failed `save()` (gh-9327)[0m
2025-04-11T19:24:00.9887896Z   [32m  [32m✔[39m[0m[90m doesnt wipe out changes made while `save()` is in flight (gh-9327)[0m
2025-04-11T19:24:01.0134949Z   [32m  [32m✔[39m[0m[90m saves all error object properties to paths with type `Mixed` (gh-10126)[0m
2025-04-11T19:24:01.0303441Z   [32m  [32m✔[39m[0m[90m supports skipping defaults on a find operation gh-7287[0m
2025-04-11T19:24:01.0632557Z   [32m  [32m✔[39m[0m[90m casts ObjectIds with `ref` in schema when calling `hydrate()` (gh-11052)[0m
2025-04-11T19:24:01.0724698Z   [32m  [32m✔[39m[0m[90m respects `hydrate()` projection (gh-11375)[0m
2025-04-11T19:24:01.0888717Z   [32m  [32m✔[39m[0m[90m supports setters option for `hydrate()` (gh-11653)[0m
2025-04-11T19:24:01.1218042Z   [32m  [32m✔[39m[0m[90m sets index collation based on schema collation (gh-7621)[0m
2025-04-11T19:24:01.1481202Z   [32m  [32m✔[39m[0m[90m works if passing class that extends Document to `loadClass()` (gh-12254)[0m
2025-04-11T19:24:01.1775996Z   [32m  [32m✔[39m[0m[90m handles shared schema methods (gh-12423)[0m
2025-04-11T19:24:01.2013384Z   [32m  [32m✔[39m[0m[90m respects schema-level `collectionOptions` for setting options to createCollection()[0m
2025-04-11T19:24:01.2090880Z   [32m  [32m✔[39m[0m[90m throws helpful error when calling Model() with string instead of model() (gh-14281)[0m
2025-04-11T19:24:01.2204485Z   [32m  [32m✔[39m[0m[90m supports recompiling model with new schema additions (gh-14296)[0m
2025-04-11T19:24:01.2369970Z   [32m  [32m✔[39m[0m[90m supports recompiling model with new discriminators (gh-14444) (gh-14296)[0m
2025-04-11T19:24:01.2539350Z   [32m  [32m✔[39m[0m[90m overwrites existing discriminators when calling recompileSchema (gh-14527) (gh-14444)[0m
2025-04-11T19:24:01.2999523Z   [32m  [32m✔[39m[0m[90m does not throw with multiple self-referencing discriminator schemas applied to schema (gh-15120)[0m
2025-04-11T19:24:01.3229966Z   [32m  [32m✔[39m[0m[90m inserts versionKey even if schema has `toObject.versionKey` set to false (gh-14344)[0m
2025-04-11T19:24:01.3447525Z   [32m  [32m✔[39m[0m[90m insertMany should throw an error if there were operations that failed validation, but all operations that passed validation succeeded (gh-13256)[0m
2025-04-11T19:24:01.3528346Z   [32m  [32m✔[39m[0m[90m throws error if calling `updateMany()` with no update param (gh-15190)[0m
2025-04-11T19:24:01.3643227Z [0m    constructor[0m
2025-04-11T19:24:01.3700475Z     [32m  [32m✔[39m[0m[90m works without "new" keyword[0m
2025-04-11T19:24:01.3808168Z     [32m  [32m✔[39m[0m[90m works "new" keyword[0m
2025-04-11T19:24:01.3879883Z [0m    isNew[0m
2025-04-11T19:24:01.3935789Z     [32m  [32m✔[39m[0m[90m is true on instantiation[0m
2025-04-11T19:24:01.4010324Z [0m    schema[0m
2025-04-11T19:24:01.4065390Z     [32m  [32m✔[39m[0m[90m should exist[0m
2025-04-11T19:24:01.4179868Z     [32m  [32m✔[39m[0m[90m emits init event[0m
2025-04-11T19:24:01.4293552Z [0m    structure[0m
2025-04-11T19:24:01.4354207Z     [32m  [32m✔[39m[0m[90m default when instantiated[0m
2025-04-11T19:24:01.4461513Z     [32m  [32m✔[39m[0m[90m a hash with one null value[0m
2025-04-11T19:24:01.4650509Z     [32m  [32m✔[39m[0m[90m when saved[0m
2025-04-11T19:24:01.4702689Z [0m      array[0m
2025-04-11T19:24:01.4713380Z [0m        defaults[0m
2025-04-11T19:24:01.4795873Z         [32m  [32m✔[39m[0m[90m to a non-empty array[0m
2025-04-11T19:24:01.4945348Z         [32m  [32m✔[39m[0m[90m empty[0m
2025-04-11T19:24:01.5043538Z [0m      init[0m
2025-04-11T19:24:01.5117781Z       [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:01.5239411Z       [32m  [32m✔[39m[0m[90m partially[0m
2025-04-11T19:24:01.5364233Z       [32m  [32m✔[39m[0m[90m with partial hash[0m
2025-04-11T19:24:01.5489514Z       [32m  [32m✔[39m[0m[90m isNew on embedded documents[0m
2025-04-11T19:24:01.5706751Z       [32m  [32m✔[39m[0m[90m isNew on embedded documents after saving[0m
2025-04-11T19:24:01.5781490Z [0m    methods[0m
2025-04-11T19:24:01.5839279Z     [32m  [32m✔[39m[0m[90m can be defined[0m
2025-04-11T19:24:01.5977877Z     [32m  [32m✔[39m[0m[90m can be defined on embedded documents[0m
2025-04-11T19:24:01.6162688Z     [32m  [32m✔[39m[0m[90m can be defined with nested key[0m
2025-04-11T19:24:01.6272629Z [0m    statics[0m
2025-04-11T19:24:01.6327598Z     [32m  [32m✔[39m[0m[90m can be defined[0m
2025-04-11T19:24:01.6403210Z [0m    casting as validation errors[0m
2025-04-11T19:24:01.6568319Z     [32m  [32m✔[39m[0m[90m error[0m
2025-04-11T19:24:01.6686290Z     [32m  [32m✔[39m[0m[90m nested error[0m
2025-04-11T19:24:01.6785755Z     [32m  [32m✔[39m[0m[90m subdocument cast error[0m
2025-04-11T19:24:01.6913363Z     [32m  [32m✔[39m[0m[90m subdocument validation error[0m
2025-04-11T19:24:01.7106107Z     [32m  [32m✔[39m[0m[90m subdocument error when adding a subdoc[0m
2025-04-11T19:24:01.7317195Z     [32m  [32m✔[39m[0m[90m updates[0m
2025-04-11T19:24:01.7404631Z     [32m  [32m✔[39m[0m[90m $pull[0m
2025-04-11T19:24:01.7633201Z     [32m  [32m✔[39m[0m[90m $push[0m
2025-04-11T19:24:01.7821628Z     [32m  [32m✔[39m[0m[90m Number arrays[0m
2025-04-11T19:24:01.8070594Z     [32m  [32m✔[39m[0m[90m date casting compat with datejs (gh-502)[0m
2025-04-11T19:24:01.8137221Z [0m    validation[0m
2025-04-11T19:24:01.8321698Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:01.8562869Z     [32m  [32m✔[39m[0m[90m custom messaging[0m
2025-04-11T19:24:01.8670644Z     [32m  [32m✔[39m[0m[90m with Model.schema.path introspection (gh-272)[0m
2025-04-11T19:24:01.8929706Z     [32m  [32m✔[39m[0m[90m of required undefined values[0m
2025-04-11T19:24:01.9059218Z     [32m  [32m✔[39m[0m[90m save callback should only execute once (gh-319)[0m
2025-04-11T19:24:01.9370950Z     [32m  [32m✔[39m[0m[90m query result[0m
2025-04-11T19:24:01.9612968Z     [32m  [32m✔[39m[0m[90m of required previously existing null values[0m
2025-04-11T19:24:01.9846104Z     [32m  [32m✔[39m[0m[90m nested[0m
2025-04-11T19:24:02.0065863Z     [32m  [32m✔[39m[0m[90m of nested subdocuments[0m
2025-04-11T19:24:02.0175067Z     [32m  [32m✔[39m[0m[90m without saving[0m
2025-04-11T19:24:02.0322451Z     [32m  [32m✔[39m[0m[90m when required is set to false[0m
2025-04-11T19:24:02.0423039Z [0m      middleware[0m
2025-04-11T19:24:02.0617719Z       [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:02.0708806Z [0m    defaults application[0m
2025-04-11T19:24:02.0758908Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:02.0905465Z     [32m  [32m✔[39m[0m[90m nested[0m
2025-04-11T19:24:02.1050638Z     [32m  [32m✔[39m[0m[90m subdocument[0m
2025-04-11T19:24:02.1336718Z     [32m  [32m✔[39m[0m[90m allows nulls[0m
2025-04-11T19:24:02.1404564Z [0m    virtuals[0m
2025-04-11T19:24:02.1464729Z     [32m  [32m✔[39m[0m[90m getters[0m
2025-04-11T19:24:02.1574217Z     [32m  [32m✔[39m[0m[90m set()[0m
2025-04-11T19:24:02.1836358Z     [32m  [32m✔[39m[0m[90m should not be saved to the db[0m
2025-04-11T19:24:02.1944710Z     [32m  [32m✔[39m[0m[90m nested[0m
2025-04-11T19:24:02.2047546Z [0m    .deleteOne()[0m
2025-04-11T19:24:02.2244819Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:02.2534324Z     [32m  [32m✔[39m[0m[90m errors when id deselected (gh-3118)[0m
2025-04-11T19:24:02.2786611Z     [32m  [32m✔[39m[0m[90m should not remove any records when deleting by id undefined[0m
2025-04-11T19:24:02.3046250Z     [32m  [32m✔[39m[0m[90m should not remove all documents in the collection (gh-3326)[0m
2025-04-11T19:24:02.3110443Z [0m    getters[0m
2025-04-11T19:24:02.3174935Z     [32m  [32m✔[39m[0m[90m with same name on embedded docs do not class[0m
2025-04-11T19:24:02.3381186Z     [32m  [32m✔[39m[0m[90m should not be triggered at construction (gh-685)[0m
2025-04-11T19:24:02.3508800Z     [32m  [32m✔[39m[0m[90m with type defined with { type: Native } (gh-190)[0m
2025-04-11T19:24:02.3599850Z [0m      nested[0m
2025-04-11T19:24:02.3671485Z       [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:02.3817935Z       [32m  [32m✔[39m[0m[90m works with object literals[0m
2025-04-11T19:24:02.4058685Z       [32m  [32m✔[39m[0m[90m object property access works when root initd with null[0m
2025-04-11T19:24:02.4295006Z       [32m  [32m✔[39m[0m[90m object property access works when root initd with undefined[0m
2025-04-11T19:24:02.4526181Z       [32m  [32m✔[39m[0m[90m pre-existing null object re-save[0m
2025-04-11T19:24:02.4792224Z       [32m  [32m✔[39m[0m[90m array of Mixed on existing doc can be pushed to[0m
2025-04-11T19:24:02.5067616Z       [32m  [32m✔[39m[0m[90m props can be set directly when property was named "type"[0m
2025-04-11T19:24:02.5156556Z [0m    setters[0m
2025-04-11T19:24:02.5406897Z     [32m  [32m✔[39m[0m[90m are used on embedded docs (gh-365 gh-390 gh-422)[0m
2025-04-11T19:24:02.5480649Z [0m    atomic subdocument[0m
2025-04-11T19:24:02.6006843Z     [32m  [32m✔[39m[0m[90m saving[0m[33m (47ms)[0m
2025-04-11T19:24:02.6271553Z     [32m  [32m✔[39m[0m[90m setting (gh-310)[0m
2025-04-11T19:24:02.6338784Z [0m    saving embedded arrays[0m
2025-04-11T19:24:02.6571746Z     [32m  [32m✔[39m[0m[90m of Numbers atomically[0m
2025-04-11T19:24:02.6845577Z     [32m  [32m✔[39m[0m[90m of Strings atomically[0m
2025-04-11T19:24:02.7129378Z     [32m  [32m✔[39m[0m[90m of Buffers atomically[0m
2025-04-11T19:24:02.7402721Z     [32m  [32m✔[39m[0m[90m works with modified element properties + doc removal (gh-975)[0m
2025-04-11T19:24:02.7633257Z     [32m  [32m✔[39m[0m[90m updating an embedded document in an embedded array with set call[0m
2025-04-11T19:24:02.7700578Z [0m    embedded array filtering[0m
2025-04-11T19:24:02.7880744Z     [32m  [32m✔[39m[0m[90m by the id shortcut function[0m
2025-04-11T19:24:02.8092966Z     [32m  [32m✔[39m[0m[90m by the id with cast error[0m
2025-04-11T19:24:02.8305784Z     [32m  [32m✔[39m[0m[90m by the id shortcut with no match[0m
2025-04-11T19:24:02.8372740Z [0m    hooks[0m
2025-04-11T19:24:02.8383548Z [0m      pre[0m
2025-04-11T19:24:02.8577699Z       [32m  [32m✔[39m[0m[90m with undefined and null[0m
2025-04-11T19:24:02.8849114Z       [32m  [32m✔[39m[0m[90m called on all sub levels[0m
2025-04-11T19:24:02.8993676Z       [32m  [32m✔[39m[0m[90m error on any sub level[0m
2025-04-11T19:24:02.9079920Z [0m        init[0m
2025-04-11T19:24:02.9275567Z         [32m  [32m✔[39m[0m[90m has access to the true ObjectId when used with querying (gh-289)[0m
2025-04-11T19:24:02.9379072Z [0m      post[0m
2025-04-11T19:24:02.9596229Z       [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:02.9910752Z       [32m  [32m✔[39m[0m[90m on embedded docs[0m
2025-04-11T19:24:03.0206591Z       [32m  [32m✔[39m[0m[90m callback should receive parameter of type document after bulkSave (gh-13026)[0m
2025-04-11T19:24:03.0299020Z [0m    #exec()[0m
2025-04-11T19:24:03.0469287Z     [32m  [32m✔[39m[0m[90m countDocuments()[0m
2025-04-11T19:24:03.0677952Z     [32m  [32m✔[39m[0m[90m estimatedDocumentCount()[0m
2025-04-11T19:24:03.0882046Z     [32m  [32m✔[39m[0m[90m updateOne()[0m
2025-04-11T19:24:03.1104302Z     [32m  [32m✔[39m[0m[90m findOne()[0m
2025-04-11T19:24:03.2848102Z     [32m  [32m✔[39m[0m[90m find()[0m[31m (164ms)[0m
2025-04-11T19:24:03.3110030Z     [32m  [32m✔[39m[0m[90m op can be changed[0m
2025-04-11T19:24:03.3156808Z [0m      promises[0m
2025-04-11T19:24:03.3345529Z       [32m  [32m✔[39m[0m[90m findOne()[0m
2025-04-11T19:24:03.3686536Z       [32m  [32m✔[39m[0m[90m find()[0m
2025-04-11T19:24:03.3778179Z [0m    console.log[0m
2025-04-11T19:24:03.3849063Z     [32m  [32m✔[39m[0m[90m hides private props[0m
2025-04-11T19:24:03.3950473Z [0m    pathnames[0m
2025-04-11T19:24:03.4016397Z     [32m  [32m✔[39m[0m[90m named path can be used[0m
2025-04-11T19:24:03.4151737Z [0m    RegExps[0m
2025-04-11T19:24:03.4332332Z     [32m  [32m✔[39m[0m[90m can be saved[0m
2025-04-11T19:24:03.4401059Z [0m    save()[0m
2025-04-11T19:24:03.4473454Z     [32m  [32m✔[39m[0m[90m rejects new documents that have no _id set (1595)[0m
2025-04-11T19:24:03.4813347Z     [32m  [32m✔[39m[0m[90m no TypeError when attempting to save more than once after using atomics[0m
2025-04-11T19:24:03.5107196Z     [32m  [32m✔[39m[0m[90m should clear $versionError and saveOptions after saved (gh-8040)[0m
2025-04-11T19:24:03.5392340Z     [32m  [32m✔[39m[0m[90m should only save paths specificed in the `pathsToSave` array (gh-9583)[0m
2025-04-11T19:24:03.5746627Z     [32m  [32m✔[39m[0m[90m should have `pathsToSave` work with subdocs (gh-9583)[0m
2025-04-11T19:24:03.6041452Z     [32m  [32m✔[39m[0m[90m should have `pathsToSave` work with doc arrays (gh-9583)[0m
2025-04-11T19:24:03.6099839Z [0m      when no callback is passed[0m
2025-04-11T19:24:03.6178108Z       [32m  [32m✔[39m[0m[90m should emit error on its Model when there are listeners[0m
2025-04-11T19:24:03.6318637Z [0m    _delta()[0m
2025-04-11T19:24:03.6518280Z     [32m  [32m✔[39m[0m[90m should overwrite arrays when directly set (gh-1126)[0m
2025-04-11T19:24:03.6783916Z     [32m  [32m✔[39m[0m[90m should use $set when subdoc changed before pulling (gh-1303)[0m
2025-04-11T19:24:03.6855358Z [0m    backward compatibility[0m
2025-04-11T19:24:03.7056025Z     [32m  [32m✔[39m[0m[90m with conflicted data in db[0m
2025-04-11T19:24:03.7326824Z     [32m  [32m✔[39m[0m[90m with positional notation on path not existing in schema (gh-1048)[0m
2025-04-11T19:24:03.7392513Z [0m    non-schema adhoc property assignments[0m
2025-04-11T19:24:03.7547377Z     [32m  [32m✔[39m[0m[90m are not saved[0m
2025-04-11T19:24:03.7601794Z [0m    setting an unset value[0m
2025-04-11T19:24:03.7815101Z     [32m  [32m✔[39m[0m[90m is saved (gh-742)[0m
2025-04-11T19:24:03.8075044Z     [32m  [32m✔[39m[0m[90m is saved object with proper defaults[0m
2025-04-11T19:24:03.8143221Z [0m    unsetting a default value[0m
2025-04-11T19:24:03.8316031Z     [32m  [32m✔[39m[0m[90m should be ignored (gh-758)[0m
2025-04-11T19:24:03.8387235Z [0m    Skip setting default value for Geospatial-indexed fields (gh-1668)[0m
2025-04-11T19:24:03.8581925Z     [32m  [32m✔[39m[0m[90m 2dsphere indexed field with value is saved[0m
2025-04-11T19:24:03.8814818Z     [32m  [32m✔[39m[0m[90m 2dsphere indexed field without value is saved (gh-1668)[0m
2025-04-11T19:24:03.9142825Z     [32m  [32m✔[39m[0m[90m 2dsphere indexed field in subdoc without value is saved[0m
2025-04-11T19:24:03.9337792Z     [32m  [32m✔[39m[0m[90m 2dsphere indexed field with geojson without value is saved (gh-3233)[0m
2025-04-11T19:24:03.9656911Z     [32m  [32m✔[39m[0m[90m Doc with 2dsphere indexed field without initial value can be updated[0m
2025-04-11T19:24:03.9959236Z     [32m  [32m✔[39m[0m[90m 2dsphere indexed required field without value is rejected[0m
2025-04-11T19:24:04.0281198Z     [32m  [32m✔[39m[0m[90m 2dsphere field without value but with schema default is saved[0m
2025-04-11T19:24:04.0587631Z     [32m  [32m✔[39m[0m[90m 2d indexed field without value is saved[0m
2025-04-11T19:24:04.0647184Z     [36m  - Compound index with 2dsphere field without value is saved[0m
2025-04-11T19:24:04.0648060Z     [36m  - Compound index on field earlier declared with 2dsphere index is saved[0m
2025-04-11T19:24:04.0658232Z [0m    max bson size error[0m
2025-04-11T19:24:04.2509881Z     [32m  [32m✔[39m[0m[90m save max bson size error with buffering (gh-3906)[0m[31m (179ms)[0m
2025-04-11T19:24:04.4176252Z     [32m  [32m✔[39m[0m[90m reports max bson size error in save (gh-3906)[0m[31m (153ms)[0m
2025-04-11T19:24:04.4280590Z [0m    bug fixes[0m
2025-04-11T19:24:04.4522598Z     [32m  [32m✔[39m[0m[90m doesnt crash (gh-1920)[0m
2025-04-11T19:24:04.4797624Z     [32m  [32m✔[39m[0m[90m doesnt reset "modified" status for fields[0m
2025-04-11T19:24:04.5076197Z     [32m  [32m✔[39m[0m[90m deleteOne() with options (gh-7857)[0m
2025-04-11T19:24:04.5345001Z     [32m  [32m✔[39m[0m[90m deleteMany() with options (gh-6805)[0m
2025-04-11T19:24:04.5455215Z     [32m  [32m✔[39m[0m[90m run default function with correct this scope in DocumentArray (gh-6840)[0m
2025-04-11T19:24:04.5621703Z     [32m  [32m✔[39m[0m[90m method with same name as prop should throw (gh-4475)[0m
2025-04-11T19:24:04.5888217Z     [32m  [32m✔[39m[0m[90m create() reuses existing doc if one passed in (gh-4449)[0m
2025-04-11T19:24:04.5994051Z     [32m  [32m✔[39m[0m[90m disabling id getter with .set() (gh-5548)[0m
2025-04-11T19:24:04.6346067Z     [32m  [32m✔[39m[0m[90m creates new array when initializing from existing doc (gh-4449)[0m
2025-04-11T19:24:04.6663480Z     [32m  [32m✔[39m[0m[90m deleteOne with cast error (gh-5323)[0m
2025-04-11T19:24:04.6766520Z     [32m  [32m✔[39m[0m[90m .create() with non-object (gh-2037)[0m
2025-04-11T19:24:04.7085193Z     [32m  [32m✔[39m[0m[90m bulkWrite casting updateMany, deleteOne, deleteMany (gh-3998)[0m
2025-04-11T19:24:04.7357180Z     [32m  [32m✔[39m[0m[90m bulkWrite casting replaceOne (gh-3998)[0m
2025-04-11T19:24:04.7618908Z     [32m  [32m✔[39m[0m[90m alias with lean virtual (gh-6069)[0m
2025-04-11T19:24:04.7959101Z     [32m  [32m✔[39m[0m[90m marks array as modified when initializing non-array from db (gh-2442)[0m
2025-04-11T19:24:04.8210967Z     [32m  [32m✔[39m[0m[90m Throws when saving same doc in parallel w/ callback (gh-6456)[0m
2025-04-11T19:24:04.8334209Z     [32m  [32m✔[39m[0m[90m using `new db.model()()` (gh-6698)[0m
2025-04-11T19:24:04.8653457Z     [32m  [32m✔[39m[0m[90m allows calling save in a post save hook (gh-6611)[0m
2025-04-11T19:24:04.8918631Z     [32m  [32m✔[39m[0m[90m createCollection() respects schema collation (gh-6489)[0m
2025-04-11T19:24:04.9261942Z     [32m  [32m✔[39m[0m[90m createCollection() respects timeseries (gh-10611)[0m
2025-04-11T19:24:04.9613639Z     [32m  [32m✔[39m[0m[90m createCollection() enforces expireAfterSeconds (gh-11229)[0m
2025-04-11T19:24:04.9932772Z     [32m  [32m✔[39m[0m[90m createCollection() enforces expires (gh-11229)[0m
2025-04-11T19:24:05.0252169Z     [32m  [32m✔[39m[0m[90m createCollection() enforces expireAfterSeconds when set by Schema (gh-11229)[0m
2025-04-11T19:24:05.0574780Z     [32m  [32m✔[39m[0m[90m createCollection() enforces expires when set by Schema (gh-11229)[0m
2025-04-11T19:24:05.0844812Z     [32m  [32m✔[39m[0m[90m createCollection() respects clusteredIndex[0m
2025-04-11T19:24:06.1197832Z     [32m  [32m✔[39m[0m[90m mongodb actually removes expired documents (gh-11229)[0m[31m (1026ms)[0m
2025-04-11T19:24:06.1441535Z     [32m  [32m✔[39m[0m[90m createCollection() handles NamespaceExists errors (gh-9447)[0m
2025-04-11T19:24:06.1498780Z [0m      3.6 features[0m
2025-04-11T19:24:06.1844153Z       [32m  [32m✔[39m[0m[90m arrayFilter (gh-5965)[0m
2025-04-11T19:24:06.2263176Z       [32m  [32m✔[39m[0m[90m arrayFilter casting (gh-5965) (gh-7079)[0m
2025-04-11T19:24:06.2671801Z       [32m  [32m✔[39m[0m[90m avoids unused array filter error (gh-9468)[0m
2025-04-11T19:24:06.2748994Z [0m        watch()[0m
2025-04-11T19:24:06.2763323Z         [36m  - watch() (gh-5964)[0m
2025-04-11T19:24:06.2765798Z         [36m  - bubbles up resumeTokenChanged events (gh-13607)[0m
2025-04-11T19:24:06.2766474Z         [36m  - using next() and hasNext() (gh-11527)[0m
2025-04-11T19:24:06.2767012Z         [36m  - fullDocument (gh-11936)[0m
2025-04-11T19:24:06.2767835Z         [36m  - fullDocument with immediate watcher and hydrate (gh-14049)[0m
2025-04-11T19:24:06.2768642Z         [36m  - respects discriminators (gh-11007)[0m
2025-04-11T19:24:06.2769336Z         [36m  - watch() before connecting (gh-5964)[0m
2025-04-11T19:24:06.2770444Z         [36m  - watch() close() prevents buffered watch op from running (gh-7022)[0m
2025-04-11T19:24:06.2771309Z         [36m  - watch() close() closes the stream (gh-7022)[0m
2025-04-11T19:24:06.2772044Z         [36m  - bubbles up resumeTokenChanged events (gh-14349)[0m
2025-04-11T19:24:06.2777038Z [0m        sessions (gh-6362)[0m
2025-04-11T19:24:06.2997793Z         [32m  [32m✔[39m[0m[90m startSession()[0m
2025-04-11T19:24:06.3354762Z         [32m  [32m✔[39m[0m[90m startSession() before connecting[0m
2025-04-11T19:24:06.3884074Z         [32m  [32m✔[39m[0m[90m sets session when pulling a document from db[0m
2025-04-11T19:24:06.4252699Z         [32m  [32m✔[39m[0m[90m sets session on child doc when creating new doc (gh-7104)[0m
2025-04-11T19:24:06.4602040Z         [32m  [32m✔[39m[0m[90m sets session when pulling multiple docs from db[0m
2025-04-11T19:24:06.4950959Z         [32m  [32m✔[39m[0m[90m supports overwriting `session` in save()[0m
2025-04-11T19:24:06.5056497Z [0m      bulkWrite casting[0m
2025-04-11T19:24:06.5323106Z       [32m  [32m✔[39m[0m[90m basic casting (gh-3998)[0m
2025-04-11T19:24:06.5586277Z       [32m  [32m✔[39m[0m[90m setDefaultsOnInsert (gh-5708)[0m
2025-04-11T19:24:06.5896423Z       [32m  [32m✔[39m[0m[90m timestamps (gh-5708)[0m
2025-04-11T19:24:06.6048279Z       [32m  [32m✔[39m[0m[90m throwOnValidationError (gh-14572)[0m
2025-04-11T19:24:06.6416169Z       [32m  [32m✔[39m[0m[90m handles array filters (gh-14978)[0m
2025-04-11T19:24:06.6823738Z       [32m  [32m✔[39m[0m[90m handles overwriteDiscriminatorKey (gh-15218) (gh-15040)[0m
2025-04-11T19:24:06.8114544Z       [32m  [32m✔[39m[0m[90m with child timestamps and array filters (gh-7032)[0m[31m (116ms)[0m
2025-04-11T19:24:06.8266854Z       [32m  [32m✔[39m[0m[90m throws readable error if invalid op[0m
2025-04-11T19:24:06.8710614Z       [32m  [32m✔[39m[0m[90m with timestamps and replaceOne (gh-5708)[0m
2025-04-11T19:24:06.9104090Z       [32m  [32m✔[39m[0m[90m with timestamps from merged schema (gh-13409)[0m
2025-04-11T19:24:06.9495455Z       [32m  [32m✔[39m[0m[90m with child timestamps (gh-7032)[0m
2025-04-11T19:24:06.9814566Z       [32m  [32m✔[39m[0m[90m sets version key (gh-13944)[0m
2025-04-11T19:24:07.0125264Z       [32m  [32m✔[39m[0m[90m with single nested and setOnInsert (gh-7534)[0m
2025-04-11T19:24:07.0419201Z       [32m  [32m✔[39m[0m[90m throws an error if no update object is provided (gh-8331)[0m
2025-04-11T19:24:07.1021171Z       [32m  [32m✔[39m[0m[90m casts according to child discriminator if `discriminatorKey` is present (gh-8982)[0m[33m (48ms)[0m
2025-04-11T19:24:07.1354204Z       [32m  [32m✔[39m[0m[90m insertOne and replaceOne should not throw an error when set `timestamps: false` in schmea (gh-10048)[0m
2025-04-11T19:24:07.1502355Z       [32m  [32m✔[39m[0m[90m casts objects with null prototype (gh-10512)[0m
2025-04-11T19:24:07.1701521Z       [32m  [32m✔[39m[0m[90m sends valid ops if ordered = false (gh-13176)[0m
2025-04-11T19:24:07.2056821Z       [32m  [32m✔[39m[0m[90m decorates write error with validation errors if unordered fails (gh-13176)[0m
2025-04-11T19:24:07.2323888Z       [32m  [32m✔[39m[0m[90m bulkWrite should throw an error if there were operations that failed validation, but all operations that passed validation succeeded (gh-13256)[0m
2025-04-11T19:24:07.2629083Z       [32m  [32m✔[39m[0m[90m casts $elemMatch filter (gh-14678)[0m
2025-04-11T19:24:07.2785812Z       [32m  [32m✔[39m[0m[90m throwOnValidationError (gh-14572) (gh-13256)[0m
2025-04-11T19:24:07.3178661Z       [32m  [32m✔[39m[0m[90m bulkWrite should throw an error if there were operations that failed validation, but all operations that passed validation succeeded (gh-13256)[0m
2025-04-11T19:24:07.3484481Z       [32m  [32m✔[39m[0m[90m bulkWrite should return both write errors and validation errors in error.results (gh-15265)[0m
2025-04-11T19:24:07.3572475Z [0m      Model.syncIndexes()[0m
2025-04-11T19:24:07.3840529Z       [32m  [32m✔[39m[0m[90m adds indexes to the collection[0m
2025-04-11T19:24:07.4128364Z       [32m  [32m✔[39m[0m[90m avoids creating collection if autoCreate: false[0m
2025-04-11T19:24:07.4545773Z       [32m  [32m✔[39m[0m[90m drops indexes that are not present in schema[0m
2025-04-11T19:24:07.4938926Z       [32m  [32m✔[39m[0m[90m when two different models connect to the same collection, syncIndexes(...) respects the last call[0m
2025-04-11T19:24:07.5372154Z       [32m  [32m✔[39m[0m[90m when two models have the same collection name, same field but different options, syncIndexes(...) respects the last call[0m
2025-04-11T19:24:07.5808275Z       [32m  [32m✔[39m[0m[90m when syncIndexes(...) is called twice with no changes on the model, the second call should not do anything[0m
2025-04-11T19:24:07.6221101Z       [32m  [32m✔[39m[0m[90m when called with different key order, it treats different order as different indexes (gh-8135)[0m
2025-04-11T19:24:07.6611638Z       [32m  [32m✔[39m[0m[90m syncIndexes(...) compound index including `_id` (gh-8559)[0m
2025-04-11T19:24:07.6926678Z       [32m  [32m✔[39m[0m[90m syncIndexes() allows overwriting `background` option (gh-8645)[0m
2025-04-11T19:24:07.7261593Z       [32m  [32m✔[39m[0m[90m syncIndexes() does not call createIndex for indexes that already exist[0m
2025-04-11T19:24:07.7649636Z       [32m  [32m✔[39m[0m[90m syncIndexes() supports hideIndexes (gh-14868)[0m
2025-04-11T19:24:07.7937683Z       [32m  [32m✔[39m[0m[90m should not drop a text index on .syncIndexes() call (gh-10850)[0m
2025-04-11T19:24:07.8399695Z       [32m  [32m✔[39m[0m[90m adding discriminators should not drop the parent model's indexes[0m
2025-04-11T19:24:07.8906005Z       [32m  [32m✔[39m[0m[90m syncing model with multiple discriminators works[0m
2025-04-11T19:24:07.9408356Z       [32m  [32m✔[39m[0m[90m syncing one discriminator's indexes should not drop the main model's indexes[0m
2025-04-11T19:24:08.0293988Z       [32m  [32m✔[39m[0m[90m syncing main model does not sync discrimator indexes[0m[33m (74ms)[0m
2025-04-11T19:24:08.0845989Z       [32m  [32m✔[39m[0m[90m syncing discriminator does not attempt to sync parent model's indexes[0m
2025-04-11T19:24:08.1131694Z       [32m  [32m✔[39m[0m[90m creates indexes only when they do not exist on the mongodb server (gh-12250)[0m
2025-04-11T19:24:08.1232643Z [0m    exists() (gh-6872) (gh-8097) (gh-11138)[0m
2025-04-11T19:24:08.1295012Z     [32m  [32m✔[39m[0m[90m returns a query[0m
2025-04-11T19:24:08.1650864Z     [32m  [32m✔[39m[0m[90m returns lean document with `_id` only if document exists[0m
2025-04-11T19:24:08.1778326Z     [32m  [32m✔[39m[0m[90m returns `null` when no document exists[0m
2025-04-11T19:24:08.2086162Z     [32m  [32m✔[39m[0m[90m returns `null` if no doc exists[0m
2025-04-11T19:24:08.2234962Z     [32m  [32m✔[39m[0m[90m options (gh-8075)[0m
2025-04-11T19:24:08.2334946Z [0m    returnOriginal (gh-9183)[0m
2025-04-11T19:24:08.2534464Z     [32m  [32m✔[39m[0m[90m Setting `returnOriginal` works[0m
2025-04-11T19:24:08.2878983Z     [32m  [32m✔[39m[0m[90m `returnOriginal` can be overwritten[0m
2025-04-11T19:24:08.2959528Z [0m    buildBulkWriteOperations() (gh-9673)[0m
2025-04-11T19:24:08.3176910Z     [32m  [32m✔[39m[0m[90m builds write operations[0m
2025-04-11T19:24:08.3300919Z     [32m  [32m✔[39m[0m[90m throws an error when one document is invalid[0m
2025-04-11T19:24:08.3491439Z     [32m  [32m✔[39m[0m[90m throws an error if documents is not an array[0m
2025-04-11T19:24:08.3672538Z     [32m  [32m✔[39m[0m[90m throws an error if one element is not a document[0m
2025-04-11T19:24:08.3845989Z     [32m  [32m✔[39m[0m[90m skips validation when given `skipValidation` true[0m
2025-04-11T19:24:08.4256401Z     [32m  [32m✔[39m[0m[90m saves changes in discriminators if calling `bulkSave()` on base model (gh-13907)[0m
2025-04-11T19:24:08.4505686Z     [32m  [32m✔[39m[0m[90m accepts `timestamps: false` (gh-12059)[0m
2025-04-11T19:24:08.4777975Z     [32m  [32m✔[39m[0m[90m accepts `timestamps: true` (gh-12059)[0m
2025-04-11T19:24:08.5071874Z     [32m  [32m✔[39m[0m[90m `timestamps` has `undefined` as default value (gh-12059)[0m
2025-04-11T19:24:08.5415742Z     [32m  [32m✔[39m[0m[90m should not modify the object in the $set clause and not error when dealing with or without timestamps (gh-14164)[0m
2025-04-11T19:24:08.5500371Z [0m    bulkSave() (gh-9673)[0m
2025-04-11T19:24:08.5729295Z     [32m  [32m✔[39m[0m[90m saves new documents[0m
2025-04-11T19:24:08.6025471Z     [32m  [32m✔[39m[0m[90m updates documents[0m
2025-04-11T19:24:08.6358444Z     [32m  [32m✔[39m[0m[90m insertMany should throw an error if there were operations that failed validation, but all operations that passed validation succeeded (gh-14572) (gh-13256)[0m
2025-04-11T19:24:08.6641575Z     [32m  [32m✔[39m[0m[90m insertMany should return both write errors and validation errors in error.results (gh-15265)[0m
2025-04-11T19:24:08.6904113Z     [32m  [32m✔[39m[0m[90m insertMany should return both write errors and validation errors in error.results with rawResult (gh-15265)[0m
2025-04-11T19:24:08.7196036Z     [32m  [32m✔[39m[0m[90m returns writeResult on success[0m
2025-04-11T19:24:08.7454530Z     [32m  [32m✔[39m[0m[90m throws an error on failure[0m
2025-04-11T19:24:08.7666638Z     [32m  [32m✔[39m[0m[90m changes document state from `isNew` `false` to `true`[0m
2025-04-11T19:24:08.7932719Z     [32m  [32m✔[39m[0m[90m sets `isNew` to false when a document succeeds and `isNew` does not change when some fail[0m
2025-04-11T19:24:08.8201272Z     [32m  [32m✔[39m[0m[90m changes documents state for successful writes[0m
2025-04-11T19:24:08.8415254Z     [32m  [32m✔[39m[0m[90m triggers pre/post-save hooks[0m
2025-04-11T19:24:08.8777634Z     [32m  [32m✔[39m[0m[90m calls pre-save before actually saving[0m
2025-04-11T19:24:08.9045325Z     [32m  [32m✔[39m[0m[90m works if some document is not modified (gh-10437)[0m
2025-04-11T19:24:08.9347617Z     [32m  [32m✔[39m[0m[90m should error if no documents were inserted or updated (gh-14763)[0m
2025-04-11T19:24:08.9709286Z     [32m  [32m✔[39m[0m[90m should error if not all documents were inserted or updated (gh-14763)[0m
2025-04-11T19:24:08.9847171Z     [32m  [32m✔[39m[0m[90m should error if there is a validation error[0m
2025-04-11T19:24:09.0288287Z     [32m  [32m✔[39m[0m[90m Using bulkSave should not trigger an error (gh-11071)[0m
2025-04-11T19:24:09.0553406Z     [32m  [32m✔[39m[0m[90m accepts `timestamps: false` (gh-12059)[0m
2025-04-11T19:24:09.0794367Z     [32m  [32m✔[39m[0m[90m accepts `timestamps: true` (gh-12059)[0m
2025-04-11T19:24:09.1074533Z     [32m  [32m✔[39m[0m[90m `timestamps` has `undefined` as default value (gh-12059)[0m
2025-04-11T19:24:09.1336556Z     [32m  [32m✔[39m[0m[90m respects `$timestamps()` (gh-12117)[0m
2025-04-11T19:24:09.1412223Z [0m    Setting the explain flag[0m
2025-04-11T19:24:09.1809747Z     [32m  [32m✔[39m[0m[90m should give an object back rather than a boolean (gh-8275)[0m
2025-04-11T19:24:09.1889780Z [0m    Model.applyDefaults (gh-11945)[0m
2025-04-11T19:24:09.1966943Z     [32m  [32m✔[39m[0m[90m applies defaults to POJOs[0m
2025-04-11T19:24:09.2147824Z     [32m  [32m✔[39m[0m[90m applies defaults to documents[0m
2025-04-11T19:24:09.2274791Z [0m    castObject() (gh-11945)[0m
2025-04-11T19:24:09.2346899Z     [32m  [32m✔[39m[0m[90m casts values[0m
2025-04-11T19:24:09.2593956Z     [32m  [32m✔[39m[0m[90m throws if cannot cast[0m
2025-04-11T19:24:09.2800346Z     [32m  [32m✔[39m[0m[90m should not throw an error if `ignoreCastErrors` is set (gh-12156)[0m
2025-04-11T19:24:09.3002666Z     [32m  [32m✔[39m[0m[90m handles discriminators (gh-15075)[0m
2025-04-11T19:24:09.3169917Z     [32m  [32m✔[39m[0m[90m handles castNonArrays when document array is set to non-array value (gh-15075)[0m
2025-04-11T19:24:09.3341547Z     [32m  [32m✔[39m[0m[90m handles document arrays (gh-15164)[0m
2025-04-11T19:24:09.3466004Z [0m    Check if static function that is supplied in schema option is available[0m
2025-04-11T19:24:09.3529637Z     [32m  [32m✔[39m[0m[90m should give a static function back rather than undefined[0m
2025-04-11T19:24:09.3686738Z [0m    Bypass middleware[0m
2025-04-11T19:24:09.3903427Z     [32m  [32m✔[39m[0m[90m should bypass middleware if save is called on a document with no changes gh-13250[0m
2025-04-11T19:24:09.3979890Z [0m    Model.useConnection() (gh-14802)[0m
2025-04-11T19:24:09.4269954Z     [32m  [32m✔[39m[0m[90m updates the model's db property to point to the provided connection instance and vice versa (gh-14802))[0m
2025-04-11T19:24:09.4396870Z     [32m  [32m✔[39m[0m[90m should throw an error if no connection is passed[0m
2025-04-11T19:24:09.4542010Z [0m    applyVirtuals[0m
2025-04-11T19:24:09.4603365Z     [32m  [32m✔[39m[0m[90m handles basic top-level virtuals[0m
2025-04-11T19:24:09.4804960Z     [32m  [32m✔[39m[0m[90m handles virtuals in subdocuments[0m
2025-04-11T19:24:09.4978455Z     [32m  [32m✔[39m[0m[90m handles virtuals on nested paths[0m
2025-04-11T19:24:09.5147876Z     [32m  [32m✔[39m[0m[90m supports passing an array of virtuals to apply[0m
2025-04-11T19:24:09.5330362Z     [32m  [32m✔[39m[0m[90m sets populate virtuals to `null` if `justOne`[0m
2025-04-11T19:24:09.5479927Z [0m    applyTimestamps[0m
2025-04-11T19:24:09.5546836Z     [32m  [32m✔[39m[0m[90m handles basic top-level timestamps[0m
2025-04-11T19:24:09.6054568Z     [32m  [32m✔[39m[0m[90m no-op if timestamps not set[0m
2025-04-11T19:24:09.6272812Z     [32m  [32m✔[39m[0m[90m handles custom timestamp property names[0m
2025-04-11T19:24:09.6450837Z     [32m  [32m✔[39m[0m[90m applies timestamps to subdocs[0m
2025-04-11T19:24:09.6647747Z     [32m  [32m✔[39m[0m[90m supports isUpdate and currentTime options[0m
2025-04-11T19:24:09.6772374Z [0m    diffIndexes()[0m
2025-04-11T19:24:09.7106357Z     [32m  [32m✔[39m[0m[90m avoids trying to drop timeseries collections (gh-14984)[0m
2025-04-11T19:24:09.7188973Z [0m    insertOne() (gh-14843)[0m
2025-04-11T19:24:09.7433033Z     [32m  [32m✔[39m[0m[90m should insert a new document[0m
2025-04-11T19:24:09.7801299Z     [32m  [32m✔[39m[0m[90m should support validateBeforeSave: false option[0m
2025-04-11T19:24:09.7921408Z 
2025-04-11T19:24:09.7922081Z [0m  model: querying:[0m
2025-04-11T19:24:09.8134330Z   [32m  [32m✔[39m[0m[90m find returns a Query[0m
2025-04-11T19:24:09.8284988Z   [32m  [32m✔[39m[0m[90m findOne returns a Query[0m
2025-04-11T19:24:09.8673900Z   [32m  [32m✔[39m[0m[90m by Date (gh-336)[0m
2025-04-11T19:24:09.9019465Z   [32m  [32m✔[39m[0m[90m mixed types with $elemMatch (gh-591)[0m
2025-04-11T19:24:09.9497892Z   [32m  [32m✔[39m[0m[90m works with different methods and query types[0m[33m (38ms)[0m
2025-04-11T19:24:10.0016437Z   [32m  [32m✔[39m[0m[90m with conditionals[0m[33m (42ms)[0m
2025-04-11T19:24:10.0205311Z   [32m  [32m✔[39m[0m[90m with previously existing null values in the db[0m
2025-04-11T19:24:10.0459711Z   [32m  [32m✔[39m[0m[90m with unused values in the db[0m
2025-04-11T19:24:10.0751395Z   [32m  [32m✔[39m[0m[90m does not apply string schema setters on $regex (gh-11426)[0m
2025-04-11T19:24:10.0881896Z [0m    distinct[0m
2025-04-11T19:24:10.0948358Z     [32m  [32m✔[39m[0m[90m returns a Query[0m
2025-04-11T19:24:10.1338105Z     [32m  [32m✔[39m[0m[90m executes when you exec[0m
2025-04-11T19:24:10.1744789Z     [32m  [32m✔[39m[0m[90m permits excluding conditions gh-1541[0m
2025-04-11T19:24:10.1828470Z [0m    updateOne[0m
2025-04-11T19:24:10.1883952Z     [32m  [32m✔[39m[0m[90m returns a Query[0m
2025-04-11T19:24:10.2205228Z     [32m  [32m✔[39m[0m[90m can handle minimize option (gh-3381)[0m
2025-04-11T19:24:10.2271398Z [0m    findOne[0m
2025-04-11T19:24:10.2518543Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:10.2761830Z     [32m  [32m✔[39m[0m[90m casts $modifiers[0m
2025-04-11T19:24:10.3007123Z     [32m  [32m✔[39m[0m[90m querying if an array contains one of multiple members $in a set[0m
2025-04-11T19:24:10.3256876Z     [32m  [32m✔[39m[0m[90m querying if an array contains one of multiple members $in a set 2[0m
2025-04-11T19:24:10.3746890Z     [32m  [32m✔[39m[0m[90m querying via $where a string[0m[33m (39ms)[0m
2025-04-11T19:24:10.3999021Z     [32m  [32m✔[39m[0m[90m querying via $where a function[0m
2025-04-11T19:24:10.4259450Z     [32m  [32m✔[39m[0m[90m based on nested fields[0m
2025-04-11T19:24:10.4524052Z     [32m  [32m✔[39m[0m[90m based on embedded doc fields (gh-242, gh-463)[0m
2025-04-11T19:24:10.4762310Z     [32m  [32m✔[39m[0m[90m works with nested docs and string ids (gh-389)[0m
2025-04-11T19:24:10.4998883Z     [32m  [32m✔[39m[0m[90m using #all with nested #elemMatch[0m
2025-04-11T19:24:10.5274690Z     [32m  [32m✔[39m[0m[90m using #or with nested #elemMatch[0m
2025-04-11T19:24:10.5516111Z     [32m  [32m✔[39m[0m[90m buffer $in array[0m
2025-04-11T19:24:10.5769337Z     [32m  [32m✔[39m[0m[90m regex with Array (gh-599)[0m
2025-04-11T19:24:10.6004390Z     [32m  [32m✔[39m[0m[90m regex with options[0m
2025-04-11T19:24:10.6229657Z     [32m  [32m✔[39m[0m[90m works with $elemMatch and $in combo (gh-1100)[0m
2025-04-11T19:24:10.6292323Z [0m    findById[0m
2025-04-11T19:24:10.6469691Z     [32m  [32m✔[39m[0m[90m handles undefined[0m
2025-04-11T19:24:10.6706333Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:10.6984944Z     [32m  [32m✔[39m[0m[90m works with partial initialization[0m
2025-04-11T19:24:10.7206004Z     [32m  [32m✔[39m[0m[90m querying if an array contains at least a certain single member (gh-220)[0m
2025-04-11T19:24:10.7455781Z     [32m  [32m✔[39m[0m[90m where an array where the $slice operator[0m
2025-04-11T19:24:10.7528770Z [0m    find[0m
2025-04-11T19:24:10.7730014Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:10.8047869Z     [32m  [32m✔[39m[0m[90m returns docs where an array that contains one specific member[0m
2025-04-11T19:24:10.8363495Z     [32m  [32m✔[39m[0m[90m works when comparing $ne with single value against an array[0m
2025-04-11T19:24:10.8636453Z     [32m  [32m✔[39m[0m[90m with partial initialization[0m
2025-04-11T19:24:10.8951363Z     [32m  [32m✔[39m[0m[90m where $exists[0m
2025-04-11T19:24:10.9185393Z     [32m  [32m✔[39m[0m[90m works with $elemMatch (gh-1100)[0m
2025-04-11T19:24:10.9451111Z     [32m  [32m✔[39m[0m[90m where $mod[0m
2025-04-11T19:24:10.9727700Z     [32m  [32m✔[39m[0m[90m where $not[0m
2025-04-11T19:24:11.0071528Z     [32m  [32m✔[39m[0m[90m where or()[0m
2025-04-11T19:24:11.0358995Z     [32m  [32m✔[39m[0m[90m using $or with array of Document[0m
2025-04-11T19:24:11.0608456Z     [32m  [32m✔[39m[0m[90m where $ne[0m
2025-04-11T19:24:11.0998482Z     [32m  [32m✔[39m[0m[90m where $nor[0m
2025-04-11T19:24:11.1285727Z     [32m  [32m✔[39m[0m[90m STRICT null matches[0m
2025-04-11T19:24:11.1557867Z     [32m  [32m✔[39m[0m[90m null matches null and undefined[0m
2025-04-11T19:24:11.1849952Z     [32m  [32m✔[39m[0m[90m a document whose arrays contain at least $all string values[0m
2025-04-11T19:24:11.2166142Z     [32m  [32m✔[39m[0m[90m using #nor with nested #elemMatch[0m
2025-04-11T19:24:11.2439024Z     [32m  [32m✔[39m[0m[90m strings via regexp[0m
2025-04-11T19:24:11.2753799Z     [32m  [32m✔[39m[0m[90m a document whose arrays contain at least $all values[0m
2025-04-11T19:24:11.3004402Z     [32m  [32m✔[39m[0m[90m where $size[0m
2025-04-11T19:24:11.3318537Z     [32m  [32m✔[39m[0m[90m $gt, $lt, $lte, $gte work on strings[0m
2025-04-11T19:24:11.3395796Z [0m      text search indexes[0m
2025-04-11T19:24:11.3688471Z       [32m  [32m✔[39m[0m[90m works with text search ensure indexes [0m
2025-04-11T19:24:11.3972608Z       [32m  [32m✔[39m[0m[90m works when text search is called by a schema (gh-3824) (gh-6851)[0m
2025-04-11T19:24:11.4071942Z [0m    limit[0m
2025-04-11T19:24:11.4268032Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:11.4347347Z [0m    skip[0m
2025-04-11T19:24:11.4544097Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:11.4622020Z [0m    sort[0m
2025-04-11T19:24:11.4818784Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:11.5135666Z     [32m  [32m✔[39m[0m[90m handles sorting by text score[0m
2025-04-11T19:24:11.5267263Z [0m    nested mixed "x.y.z"[0m
2025-04-11T19:24:11.5340662Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:11.5431596Z [0m    $all[0m
2025-04-11T19:24:11.5681939Z     [32m  [32m✔[39m[0m[90m with ObjectIds (gh-690)[0m
2025-04-11T19:24:11.6019520Z     [32m  [32m✔[39m[0m[90m with Dates[0m
2025-04-11T19:24:11.6429214Z     [32m  [32m✔[39m[0m[90m with $elemMatch (gh-3163)[0m
2025-04-11T19:24:11.6515872Z [0m    and[0m
2025-04-11T19:24:11.6749257Z     [32m  [32m✔[39m[0m[90m works with queries gh-1188[0m
2025-04-11T19:24:11.6879904Z     [32m  [32m✔[39m[0m[90m works with nested query selectors gh-1884[0m
2025-04-11T19:24:11.7012314Z [0m    2d[0m
2025-04-11T19:24:11.7243976Z     [32m  [32m✔[39m[0m[90m $near (gh-309)[0m
2025-04-11T19:24:11.7572055Z     [32m  [32m✔[39m[0m[90m $within arrays (gh-586)[0m
2025-04-11T19:24:11.7863279Z     [32m  [32m✔[39m[0m[90m $nearSphere with arrays (gh-610)[0m
2025-04-11T19:24:11.8136009Z     [32m  [32m✔[39m[0m[90m $nearSphere with invalid coordinate does not crash (gh-1874)[0m
2025-04-11T19:24:11.8415578Z     [32m  [32m✔[39m[0m[90m $maxDistance with arrays[0m
2025-04-11T19:24:11.8479141Z [0m    2dsphere[0m
2025-04-11T19:24:11.8620425Z     [32m  [32m✔[39m[0m[90m index is allowed in schema[0m
2025-04-11T19:24:11.8682675Z [0m      $geometry[0m
2025-04-11T19:24:11.8878109Z       [32m  [32m✔[39m[0m[90m Polygon[0m
2025-04-11T19:24:11.8952559Z [0m      $geoIntersects[0m
2025-04-11T19:24:11.9162831Z       [32m  [32m✔[39m[0m[90m LineString[0m
2025-04-11T19:24:11.9414359Z       [32m  [32m✔[39m[0m[90m MultiLineString[0m
2025-04-11T19:24:11.9680019Z       [32m  [32m✔[39m[0m[90m MultiPolygon[0m
2025-04-11T19:24:11.9752072Z [0m      $near[0m
2025-04-11T19:24:11.9975108Z       [32m  [32m✔[39m[0m[90m Point[0m
2025-04-11T19:24:12.0231386Z       [32m  [32m✔[39m[0m[90m works with GeoJSON (gh-1482)[0m
2025-04-11T19:24:12.0483326Z       [32m  [32m✔[39m[0m[90m works with legacy 2dsphere pair in schema (gh-6937)[0m
2025-04-11T19:24:12.0575369Z [0m    hashed indexes[0m
2025-04-11T19:24:12.0835454Z     [32m  [32m✔[39m[0m[90m work[0m
2025-04-11T19:24:12.0899366Z [0m    lean[0m
2025-04-11T19:24:12.1074177Z     [32m  [32m✔[39m[0m[90m find[0m
2025-04-11T19:24:12.1289442Z     [32m  [32m✔[39m[0m[90m removes the __v property if versionKey: false is set (gh-8934)[0m
2025-04-11T19:24:12.1479040Z     [32m  [32m✔[39m[0m[90m findOne[0m
2025-04-11T19:24:12.1580435Z     [32m  [32m✔[39m[0m[90m properly casts nested and/or queries (gh-676)[0m
2025-04-11T19:24:12.1747092Z     [32m  [32m✔[39m[0m[90m properly casts deeply nested and/or queries (gh-676)[0m
2025-04-11T19:24:12.2040793Z     [32m  [32m✔[39m[0m[90m casts $elemMatch (gh-2199)[0m
2025-04-11T19:24:12.2152750Z     [32m  [32m✔[39m[0m[90m does not run resetId setter on query (gh-6093)[0m
2025-04-11T19:24:12.2253874Z [0m      $eq[0m
2025-04-11T19:24:12.2331562Z       [32m  [32m✔[39m[0m[90m casts $eq (gh-2752)[0m
2025-04-11T19:24:12.2461467Z 
2025-04-11T19:24:12.2462069Z [0m  Double[0m
2025-04-11T19:24:12.2502835Z   [32m  [32m✔[39m[0m[90m is a valid schema type[0m
2025-04-11T19:24:12.2524792Z [0m    supports the required property[0m
2025-04-11T19:24:12.2575538Z     [32m  [32m✔[39m[0m[90m when value is null[0m
2025-04-11T19:24:12.2646084Z     [32m  [32m✔[39m[0m[90m when value is non-null[0m
2025-04-11T19:24:12.2689385Z [0m    special inputs[0m
2025-04-11T19:24:12.2726492Z     [32m  [32m✔[39m[0m[90m supports undefined as input[0m
2025-04-11T19:24:12.2795077Z     [32m  [32m✔[39m[0m[90m supports null as input[0m
2025-04-11T19:24:12.2838541Z [0m    valid casts[0m
2025-04-11T19:24:12.2887313Z     [32m  [32m✔[39m[0m[90m casts from decimal string[0m
2025-04-11T19:24:12.2956499Z     [32m  [32m✔[39m[0m[90m casts from exponential string[0m
2025-04-11T19:24:12.3026234Z     [32m  [32m✔[39m[0m[90m casts from infinite string[0m
2025-04-11T19:24:12.3095585Z     [32m  [32m✔[39m[0m[90m casts from NaN string[0m
2025-04-11T19:24:12.3164216Z     [32m  [32m✔[39m[0m[90m casts from number[0m
2025-04-11T19:24:12.3232848Z     [32m  [32m✔[39m[0m[90m casts from bigint[0m
2025-04-11T19:24:12.3301391Z     [32m  [32m✔[39m[0m[90m casts from BSON.Long[0m
2025-04-11T19:24:12.3370420Z     [32m  [32m✔[39m[0m[90m casts from BSON.Double[0m
2025-04-11T19:24:12.3438301Z     [32m  [32m✔[39m[0m[90m casts boolean true to 1[0m
2025-04-11T19:24:12.3508080Z     [32m  [32m✔[39m[0m[90m casts boolean false to 0[0m
2025-04-11T19:24:12.3566237Z     [32m  [32m✔[39m[0m[90m casts empty string to null[0m
2025-04-11T19:24:12.3635260Z     [32m  [32m✔[39m[0m[90m supports valueOf() function [0m
2025-04-11T19:24:12.3678454Z [0m    cast errors[0m
2025-04-11T19:24:12.3689661Z [0m      when a non-numeric string is provided to an Double field[0m
2025-04-11T19:24:12.3758399Z       [32m  [32m✔[39m[0m[90m throws a CastError upon validation[0m
2025-04-11T19:24:12.3822972Z [0m    custom casters[0m
2025-04-11T19:24:12.3876524Z     [32m  [32m✔[39m[0m[90m supports cast disabled[0m
2025-04-11T19:24:12.3946324Z     [32m  [32m✔[39m[0m[90m supports custom cast[0m
2025-04-11T19:24:12.3989833Z [0m    mongoDB integration[0m
2025-04-11T19:24:12.4331830Z     [32m  [32m✔[39m[0m[90m can query with comparison operators[0m
2025-04-11T19:24:12.4582221Z     [32m  [32m✔[39m[0m[90m supports populate()[0m
2025-04-11T19:24:12.4615026Z [0m      $type compatibility[0m
2025-04-11T19:24:12.4697343Z       [32m  [32m✔[39m[0m[90m is queryable as a JS number in MongoDB[0m
2025-04-11T19:24:12.4806798Z       [32m  [32m✔[39m[0m[90m is NOT queryable as a BSON Integer in MongoDB if the value is NOT integer[0m
2025-04-11T19:24:12.4914725Z       [32m  [32m✔[39m[0m[90m is queryable as a BSON Double in MongoDB when a non-integer is provided[0m
2025-04-11T19:24:12.5022111Z       [32m  [32m✔[39m[0m[90m is queryable as a BSON Double in MongoDB when an integer is provided[0m
2025-04-11T19:24:12.5130934Z 
2025-04-11T19:24:12.5131499Z [0m  schema.documentarray[0m
2025-04-11T19:24:12.5185345Z   [32m  [32m✔[39m[0m[90m defaults should be preserved[0m
2025-04-11T19:24:12.5243071Z   [32m  [32m✔[39m[0m[90m only sets if document has same schema (gh-3701)[0m
2025-04-11T19:24:12.5290645Z   [32m  [32m✔[39m[0m[90m sets $implicitlyCreated if created by interpretAsType (gh-4271)[0m
2025-04-11T19:24:12.5335836Z   [32m  [32m✔[39m[0m[90m propagates strictQuery to implicitly created schemas (gh-12796)[0m
2025-04-11T19:24:12.5389143Z   [32m  [32m✔[39m[0m[90m supports set with array of document arrays (gh-7799)[0m
2025-04-11T19:24:12.5442311Z   [32m  [32m✔[39m[0m[90m supports `set()` (gh-8883)[0m
2025-04-11T19:24:12.5490625Z   [32m  [32m✔[39m[0m[90m handles default function that returns null (gh-11058)[0m
2025-04-11T19:24:12.5544782Z   [32m  [32m✔[39m[0m[90m doValidate() validates entire subdocument (gh-11770)[0m
2025-04-11T19:24:12.5576864Z 
2025-04-11T19:24:12.5577736Z [0m  SchemaType.cast() (gh-7045)[0m
2025-04-11T19:24:12.5616578Z   [32m  [32m✔[39m[0m[90m with inheritance[0m
2025-04-11T19:24:12.5668390Z   [32m  [32m✔[39m[0m[90m handles objectid[0m
2025-04-11T19:24:12.5715365Z   [32m  [32m✔[39m[0m[90m handles disabling casting[0m
2025-04-11T19:24:12.5764118Z   [32m  [32m✔[39m[0m[90m handles boolean[0m
2025-04-11T19:24:12.5811028Z   [32m  [32m✔[39m[0m[90m handles disabling casting[0m
2025-04-11T19:24:12.5833049Z [0m    string[0m
2025-04-11T19:24:12.5882716Z     [32m  [32m✔[39m[0m[90m supports custom cast functions[0m
2025-04-11T19:24:12.5950003Z     [32m  [32m✔[39m[0m[90m supports disabling casting[0m
2025-04-11T19:24:12.5994101Z [0m    date[0m
2025-04-11T19:24:12.6044080Z     [32m  [32m✔[39m[0m[90m supports custom cast functions[0m
2025-04-11T19:24:12.6111668Z     [32m  [32m✔[39m[0m[90m supports disabling casting[0m
2025-04-11T19:24:12.6155936Z [0m    decimal128[0m
2025-04-11T19:24:12.6206071Z     [32m  [32m✔[39m[0m[90m supports custom cast functions[0m
2025-04-11T19:24:12.6274794Z     [32m  [32m✔[39m[0m[90m supports disabling casting[0m
2025-04-11T19:24:12.6328610Z 
2025-04-11T19:24:12.6328897Z [0m  schematype[0m
2025-04-11T19:24:12.6339964Z [0m    boolean[0m
2025-04-11T19:24:12.6394385Z     [32m  [32m✔[39m[0m[90m null default is permitted (gh-523)[0m
2025-04-11T19:24:12.6448979Z 
2025-04-11T19:24:12.6450329Z [0m  types array[0m
2025-04-11T19:24:12.6500329Z   [32m  [32m✔[39m[0m[90m behaves and quacks like an Array[0m
2025-04-11T19:24:12.6570802Z   [32m  [32m✔[39m[0m[90m is `deepEqual()` another array (gh-7700)[0m
2025-04-11T19:24:12.6678127Z   [32m  [32m✔[39m[0m[90m does not mutate passed-in array (gh-10766)[0m
2025-04-11T19:24:12.6791481Z   [32m  [32m✔[39m[0m[90m test "castNonArrays" property option[0m
2025-04-11T19:24:12.6892553Z   [32m  [32m✔[39m[0m[90m `castNonArrays` on specific paths takes precedence over global option[0m
2025-04-11T19:24:12.6956903Z   [32m  [32m✔[39m[0m[90m supports setting nested arrays directly (gh-13372)[0m
2025-04-11T19:24:12.7062573Z   [32m  [32m✔[39m[0m[90m calls array setters (gh-11380)[0m
2025-04-11T19:24:12.7139529Z [0m    hasAtomics[0m
2025-04-11T19:24:12.7184269Z     [32m  [32m✔[39m[0m[90m does not throw[0m
2025-04-11T19:24:12.7240566Z [0m    indexOf()[0m
2025-04-11T19:24:12.7547147Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:12.7609016Z [0m    includes()[0m
2025-04-11T19:24:12.7916471Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:12.7979558Z [0m    push()[0m
2025-04-11T19:24:12.8215700Z     [32m  [32m✔[39m[0m[90m works with numbers[0m
2025-04-11T19:24:12.8438747Z     [32m  [32m✔[39m[0m[90m works with strings[0m
2025-04-11T19:24:12.8652567Z     [32m  [32m✔[39m[0m[90m works with buffers[0m
2025-04-11T19:24:12.8874355Z     [32m  [32m✔[39m[0m[90m works with mixed[0m
2025-04-11T19:24:12.9090925Z     [32m  [32m✔[39m[0m[90m works with sub-docs[0m
2025-04-11T19:24:12.9295270Z     [32m  [32m✔[39m[0m[90m applies setters (gh-3032)[0m
2025-04-11T19:24:12.9357577Z [0m    splice()[0m
2025-04-11T19:24:12.9531977Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:12.9748894Z     [32m  [32m✔[39m[0m[90m on embedded docs[0m
2025-04-11T19:24:12.9808625Z [0m    unshift()[0m
2025-04-11T19:24:13.0009004Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:13.0199937Z     [32m  [32m✔[39m[0m[90m applies setters (gh-3032)[0m
2025-04-11T19:24:13.0259240Z [0m    shift()[0m
2025-04-11T19:24:13.0438457Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:13.0498495Z [0m    $shift[0m
2025-04-11T19:24:13.0681942Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:13.0741307Z [0m    pop()[0m
2025-04-11T19:24:13.0922955Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:13.0983863Z [0m    pull()[0m
2025-04-11T19:24:13.1200972Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:13.1403975Z     [32m  [32m✔[39m[0m[90m registers $pull atomic if pulling from middle (gh-14502)[0m
2025-04-11T19:24:13.1631018Z     [32m  [32m✔[39m[0m[90m handles pulling with no _id (gh-3341)[0m
2025-04-11T19:24:13.1857517Z     [32m  [32m✔[39m[0m[90m properly works with undefined[0m
2025-04-11T19:24:13.1950501Z     [32m  [32m✔[39m[0m[90m avoids adding default paths to query filter (gh-12294)[0m
2025-04-11T19:24:13.2077956Z     [32m  [32m✔[39m[0m[90m avoids adding default paths to query filter with _id (gh-12294)[0m
2025-04-11T19:24:13.2161065Z [0m    $pop()[0m
2025-04-11T19:24:13.2335919Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:13.2396858Z [0m    addToSet()[0m
2025-04-11T19:24:13.2623911Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:13.2831003Z     [32m  [32m✔[39m[0m[90m handles sub-documents that do not have an _id gh-1973[0m
2025-04-11T19:24:13.3022165Z     [32m  [32m✔[39m[0m[90m applies setters (gh-3032)[0m
2025-04-11T19:24:13.3080836Z [0m    options[0m
2025-04-11T19:24:13.3149616Z     [32m  [32m✔[39m[0m[90m castNonArrays (gh-7371) (gh-7479)[0m
2025-04-11T19:24:13.3415311Z     [32m  [32m✔[39m[0m[90m works with $addToSet and $push (gh-7479)[0m
2025-04-11T19:24:13.3476256Z [0m    nonAtomicPush()[0m
2025-04-11T19:24:13.3652747Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:13.3714191Z [0m    sort()[0m
2025-04-11T19:24:13.3895703Z     [32m  [32m✔[39m[0m[90m order should be saved[0m
2025-04-11T19:24:13.3955156Z [0m    set()[0m
2025-04-11T19:24:13.4153660Z     [32m  [32m✔[39m[0m[90m works combined with other ops[0m
2025-04-11T19:24:13.4370576Z     [32m  [32m✔[39m[0m[90m works with numbers[0m
2025-04-11T19:24:13.4586650Z     [32m  [32m✔[39m[0m[90m works with strings[0m
2025-04-11T19:24:13.4795687Z     [32m  [32m✔[39m[0m[90m works with buffers[0m
2025-04-11T19:24:13.5013924Z     [32m  [32m✔[39m[0m[90m works with mixed[0m
2025-04-11T19:24:13.5279836Z     [32m  [32m✔[39m[0m[90m works with sub-docs[0m
2025-04-11T19:24:13.5520582Z     [32m  [32m✔[39m[0m[90m applies setters (gh-3032)[0m
2025-04-11T19:24:13.5582172Z [0m    slice[0m
2025-04-11T19:24:13.5632118Z     [32m  [32m✔[39m[0m[90m copies schema correctly (gh-8482)[0m
2025-04-11T19:24:13.5736024Z     [32m  [32m✔[39m[0m[90m with unshift (gh-8482)[0m
2025-04-11T19:24:13.5847970Z     [32m  [32m✔[39m[0m[90m with push (gh-8655)[0m
2025-04-11T19:24:13.5907325Z [0m    setting a doc array[0m
2025-04-11T19:24:13.6091836Z     [32m  [32m✔[39m[0m[90m should adjust path positions[0m
2025-04-11T19:24:13.6154188Z [0m    paths with similar names[0m
2025-04-11T19:24:13.6341580Z     [32m  [32m✔[39m[0m[90m should be saved[0m
2025-04-11T19:24:13.6401912Z [0m    of number[0m
2025-04-11T19:24:13.6594439Z     [32m  [32m✔[39m[0m[90m allows null and undefined[0m
2025-04-11T19:24:13.6656348Z [0m    bug fixes[0m
2025-04-11T19:24:13.6850471Z     [32m  [32m✔[39m[0m[90m modifying subdoc props and manipulating the array works (gh-842)[0m
2025-04-11T19:24:13.6939374Z     [32m  [32m✔[39m[0m[90m toObject returns a vanilla JavaScript array (gh-9540)[0m
2025-04-11T19:24:13.7179749Z     [32m  [32m✔[39m[0m[90m pushing top level arrays and subarrays works (gh-1073)[0m
2025-04-11T19:24:13.7271397Z     [32m  [32m✔[39m[0m[90m finding ids by string (gh-4011)[0m
2025-04-11T19:24:13.7359200Z [0m    default type[0m
2025-04-11T19:24:13.7408826Z     [32m  [32m✔[39m[0m[90m casts to Mixed[0m
2025-04-11T19:24:13.7501432Z [0m    removing from an array atomically using MongooseArray#remove[0m
2025-04-11T19:24:13.7658025Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:13.7707312Z [0m      with subdocs[0m
2025-04-11T19:24:13.7850229Z       [32m  [32m✔[39m[0m[90m supports passing strings[0m
2025-04-11T19:24:13.8031315Z       [32m  [32m✔[39m[0m[90m supports passing numbers[0m
2025-04-11T19:24:13.8213505Z       [32m  [32m✔[39m[0m[90m supports passing objectids[0m
2025-04-11T19:24:13.8404806Z       [32m  [32m✔[39m[0m[90m supports passing buffers[0m
2025-04-11T19:24:13.8488509Z [0m    built-in array methods that modify element structure return vanilla arrays (gh-8356)[0m
2025-04-11T19:24:13.8538663Z     [32m  [32m✔[39m[0m[90m filter[0m
2025-04-11T19:24:13.8625241Z     [32m  [32m✔[39m[0m[90m flat[0m
2025-04-11T19:24:13.8710976Z     [32m  [32m✔[39m[0m[90m flatMap[0m
2025-04-11T19:24:13.8796575Z     [32m  [32m✔[39m[0m[90m map[0m
2025-04-11T19:24:13.8882143Z     [32m  [32m✔[39m[0m[90m slice[0m
2025-04-11T19:24:13.8985722Z 
2025-04-11T19:24:13.8986081Z [0m  schematype mixed[0m
2025-04-11T19:24:13.8997297Z [0m    empty object defaults (gh-1380)[0m
2025-04-11T19:24:13.9046777Z     [32m  [32m✔[39m[0m[90m are interpreted as fns that return new empty objects[0m
2025-04-11T19:24:13.9115244Z     [32m  [32m✔[39m[0m[90m can be forced to share the object between documents[0m
2025-04-11T19:24:13.9168638Z 
2025-04-11T19:24:13.9168924Z [0m  types.number[0m
2025-04-11T19:24:13.9202685Z   [32m  [32m✔[39m[0m[90m an empty string casts to null[0m
2025-04-11T19:24:13.9246443Z   [32m  [32m✔[39m[0m[90m a null number should castForQuery to null[0m
2025-04-11T19:24:13.9294368Z   [32m  [32m✔[39m[0m[90m array throws cast number error[0m
2025-04-11T19:24:13.9341503Z   [32m  [32m✔[39m[0m[90m three throws cast number error[0m
2025-04-11T19:24:13.9388198Z   [32m  [32m✔[39m[0m[90m {} throws cast number error[0m
2025-04-11T19:24:13.9432726Z   [32m  [32m✔[39m[0m[90m does not throw number cast error[0m
2025-04-11T19:24:13.9476666Z   [32m  [32m✔[39m[0m[90m boolean casts to 0/1 (gh-3475)[0m
2025-04-11T19:24:13.9521036Z   [32m  [32m✔[39m[0m[90m prefers valueOf function if one exists (gh-6299)[0m
2025-04-11T19:24:13.9568923Z   [32m  [32m✔[39m[0m[90m throws a CastError with a bad conditional (gh-6927)[0m
2025-04-11T19:24:13.9590552Z [0m    custom caster (gh-7045)[0m
2025-04-11T19:24:13.9639169Z     [32m  [32m✔[39m[0m[90m disallow empty string[0m
2025-04-11T19:24:13.9707191Z     [32m  [32m✔[39m[0m[90m disable casting[0m
2025-04-11T19:24:13.9760849Z 
2025-04-11T19:24:13.9761103Z [0m  BigInt[0m
2025-04-11T19:24:13.9799616Z   [32m  [32m✔[39m[0m[90m is a valid schema type[0m
2025-04-11T19:24:13.9847253Z   [32m  [32m✔[39m[0m[90m casting from strings and numbers[0m
2025-04-11T19:24:13.9898609Z   [32m  [32m✔[39m[0m[90m handles cast errors[0m
2025-04-11T19:24:13.9947982Z   [32m  [32m✔[39m[0m[90m supports required[0m
2025-04-11T19:24:13.9969813Z [0m    MongoDB integration[0m
2025-04-11T19:24:14.0128493Z     [32m  [32m✔[39m[0m[90m is stored as a long in MongoDB[0m
2025-04-11T19:24:14.0214526Z     [32m  [32m✔[39m[0m[90m becomes a bigint with lean using useBigInt64[0m
2025-04-11T19:24:14.0326263Z     [32m  [32m✔[39m[0m[90m can query with comparison operators[0m
2025-04-11T19:24:14.0570586Z     [32m  [32m✔[39m[0m[90m supports populate()[0m
2025-04-11T19:24:14.0634462Z 
2025-04-11T19:24:14.0635173Z [0m  Int32[0m
2025-04-11T19:24:14.0674778Z   [32m  [32m✔[39m[0m[90m is a valid schema type[0m
2025-04-11T19:24:14.0696640Z [0m    supports the required property[0m
2025-04-11T19:24:14.0746290Z     [32m  [32m✔[39m[0m[90m when value is null[0m
2025-04-11T19:24:14.0816144Z     [32m  [32m✔[39m[0m[90m when value is non-null[0m
2025-04-11T19:24:14.0859363Z [0m    special inputs[0m
2025-04-11T19:24:14.0906714Z     [32m  [32m✔[39m[0m[90m supports INT32_MIN as input[0m
2025-04-11T19:24:14.0975053Z     [32m  [32m✔[39m[0m[90m supports INT32_MAX as input[0m
2025-04-11T19:24:14.1045011Z     [32m  [32m✔[39m[0m[90m supports undefined as input[0m
2025-04-11T19:24:14.1113359Z     [32m  [32m✔[39m[0m[90m supports null as input[0m
2025-04-11T19:24:14.1156617Z [0m    valid casts[0m
2025-04-11T19:24:14.1203618Z     [32m  [32m✔[39m[0m[90m casts from string[0m
2025-04-11T19:24:14.1272072Z     [32m  [32m✔[39m[0m[90m casts from number[0m
2025-04-11T19:24:14.1340552Z     [32m  [32m✔[39m[0m[90m casts from bigint[0m
2025-04-11T19:24:14.1409683Z     [32m  [32m✔[39m[0m[90m casts from BSON.Int32[0m
2025-04-11T19:24:14.1478124Z     [32m  [32m✔[39m[0m[90m casts from BSON.Double provided its value is an integer[0m
2025-04-11T19:24:14.1546469Z     [32m  [32m✔[39m[0m[90m casts boolean true to 1[0m
2025-04-11T19:24:14.1614754Z     [32m  [32m✔[39m[0m[90m casts boolean false to 0[0m
2025-04-11T19:24:14.1683651Z     [32m  [32m✔[39m[0m[90m casts empty string to null[0m
2025-04-11T19:24:14.1752893Z     [32m  [32m✔[39m[0m[90m supports valueOf() function [0m
2025-04-11T19:24:14.1785411Z [0m      long[0m
2025-04-11T19:24:14.1844087Z       [32m  [32m✔[39m[0m[90m casts from BSON.Long provided its value is within bounds of Int32[0m
2025-04-11T19:24:14.1940876Z       [32m  [32m✔[39m[0m[90m calls Long.toNumber when casting long[0m
2025-04-11T19:24:14.2006450Z [0m    cast errors[0m
2025-04-11T19:24:14.2017611Z [0m      when a non-integer decimal input is provided to an Int32 field[0m
2025-04-11T19:24:14.2083091Z       [32m  [32m✔[39m[0m[90m throws a CastError upon validation[0m
2025-04-11T19:24:14.2137196Z [0m      when a non-numeric string is provided to an Int32 field[0m
2025-04-11T19:24:14.2201492Z       [32m  [32m✔[39m[0m[90m throws a CastError upon validation[0m
2025-04-11T19:24:14.2255602Z [0m      when a non-integer decimal string is provided to an Int32 field[0m
2025-04-11T19:24:14.2320645Z       [32m  [32m✔[39m[0m[90m throws a CastError upon validation[0m
2025-04-11T19:24:14.2374476Z [0m      when NaN is provided to an Int32 field[0m
2025-04-11T19:24:14.2427467Z       [32m  [32m✔[39m[0m[90m throws a CastError upon validation[0m
2025-04-11T19:24:14.2481542Z [0m      when value above INT32_MAX is provided to an Int32 field[0m
2025-04-11T19:24:14.2545204Z       [32m  [32m✔[39m[0m[90m throws a CastError upon validation[0m
2025-04-11T19:24:14.2599298Z [0m      when value below INT32_MIN is provided to an Int32 field[0m
2025-04-11T19:24:14.2662894Z       [32m  [32m✔[39m[0m[90m throws a CastError upon validation[0m
2025-04-11T19:24:14.2727399Z [0m    custom casters[0m
2025-04-11T19:24:14.2781229Z     [32m  [32m✔[39m[0m[90m supports cast disabled[0m
2025-04-11T19:24:14.2851547Z     [32m  [32m✔[39m[0m[90m supports custom cast[0m
2025-04-11T19:24:14.2895289Z [0m    mongoDB integration[0m
2025-04-11T19:24:14.3013282Z     [32m  [32m✔[39m[0m[90m can query with comparison operators[0m
2025-04-11T19:24:14.3114767Z     [31m  2) supports populate()[0m
2025-04-11T19:24:14.3147499Z [0m      $type compatibility[0m
2025-04-11T19:24:14.3221550Z       [32m  [32m✔[39m[0m[90m is queryable as a JS number in MongoDB[0m
2025-04-11T19:24:14.3329954Z       [32m  [32m✔[39m[0m[90m is queryable as a BSON Int32 in MongoDB[0m
2025-04-11T19:24:14.3433715Z       [32m  [32m✔[39m[0m[90m is NOT queryable as a BSON Double in MongoDB[0m
2025-04-11T19:24:14.3538233Z 
2025-04-11T19:24:14.3539062Z [0m  model: populate: divergent arrays[0m
2025-04-11T19:24:14.3620668Z [0m    from match[0m
2025-04-11T19:24:14.3677319Z     [32m  [32m✔[39m[0m[90m using $set[0m
2025-04-11T19:24:14.3752349Z     [32m  [32m✔[39m[0m[90m using $pop 1[0m
2025-04-11T19:24:14.3826512Z     [32m  [32m✔[39m[0m[90m using $pop -1[0m
2025-04-11T19:24:14.3869616Z [0m    from skip[0m
2025-04-11T19:24:14.3880764Z [0m      2[0m
2025-04-11T19:24:14.3944973Z       [32m  [32m✔[39m[0m[90m using $set[0m
2025-04-11T19:24:14.4040715Z       [32m  [32m✔[39m[0m[90m using $pop 1[0m
2025-04-11T19:24:14.4135553Z       [32m  [32m✔[39m[0m[90m using $pop -1[0m
2025-04-11T19:24:14.4189322Z [0m      0[0m
2025-04-11T19:24:14.4275083Z       [32m  [32m✔[39m[0m[90m using $set[0m
2025-04-11T19:24:14.4397020Z       [32m  [32m✔[39m[0m[90m using $pop 1[0m
2025-04-11T19:24:14.4513535Z       [32m  [32m✔[39m[0m[90m using $pop -1[0m
2025-04-11T19:24:14.4580851Z [0m    from limit[0m
2025-04-11T19:24:14.4593691Z [0m      0[0m
2025-04-11T19:24:14.4669712Z       [32m  [32m✔[39m[0m[90m using $set[0m
2025-04-11T19:24:14.4777003Z       [32m  [32m✔[39m[0m[90m using $pop 1[0m
2025-04-11T19:24:14.4871910Z       [32m  [32m✔[39m[0m[90m using $pop -1[0m
2025-04-11T19:24:14.4925872Z [0m      1[0m
2025-04-11T19:24:14.4990972Z       [32m  [32m✔[39m[0m[90m using $set[0m
2025-04-11T19:24:14.5086429Z       [32m  [32m✔[39m[0m[90m using $pop 1[0m
2025-04-11T19:24:14.5182083Z       [32m  [32m✔[39m[0m[90m using $pop -1[0m
2025-04-11T19:24:14.5247070Z [0m    from deselected _id[0m
2025-04-11T19:24:14.5258019Z [0m      using string and only -_id[0m
2025-04-11T19:24:14.5327471Z       [32m  [32m✔[39m[0m[90m using $set[0m
2025-04-11T19:24:14.5423946Z       [32m  [32m✔[39m[0m[90m using $pop 1[0m
2025-04-11T19:24:14.5519321Z       [32m  [32m✔[39m[0m[90m using $pop -1[0m
2025-04-11T19:24:14.5573604Z [0m      using string[0m
2025-04-11T19:24:14.5638496Z       [32m  [32m✔[39m[0m[90m using $set[0m
2025-04-11T19:24:14.5735495Z       [32m  [32m✔[39m[0m[90m using $pop 1[0m
2025-04-11T19:24:14.5831279Z       [32m  [32m✔[39m[0m[90m using $pop -1[0m
2025-04-11T19:24:14.5885260Z [0m      using object and only _id: 0[0m
2025-04-11T19:24:14.5949877Z       [32m  [32m✔[39m[0m[90m using $set[0m
2025-04-11T19:24:14.6060600Z       [32m  [32m✔[39m[0m[90m using $pop 1[0m
2025-04-11T19:24:14.6156363Z       [32m  [32m✔[39m[0m[90m using $pop -1[0m
2025-04-11T19:24:14.6210361Z [0m      using object[0m
2025-04-11T19:24:14.6275515Z       [32m  [32m✔[39m[0m[90m using $set[0m
2025-04-11T19:24:14.6371084Z       [32m  [32m✔[39m[0m[90m using $pop 1[0m
2025-04-11T19:24:14.6466647Z       [32m  [32m✔[39m[0m[90m using $pop -1[0m
2025-04-11T19:24:14.6562167Z 
2025-04-11T19:24:14.6562447Z [0m  model: watch: [0m
2025-04-11T19:24:14.6573531Z [0m    with buffering[0m
2025-04-11T19:24:14.6585647Z     [36m  - watch() before connecting (gh-5964)[0m
2025-04-11T19:24:14.6586284Z     [36m  - watch() close() prevents buffered watch op from running (gh-7022)[0m
2025-04-11T19:24:14.6586870Z     [36m  - watch() close() closes the stream (gh-7022)[0m
2025-04-11T19:24:14.6607147Z 
2025-04-11T19:24:14.6607504Z [0m  types.embeddeddocumentdeclarative[0m
2025-04-11T19:24:14.6618748Z [0m    with a parent with a field with type set to a POJO[0m
2025-04-11T19:24:14.6629817Z [0m      creates subdocument schema if `type` is an object with keys[0m
2025-04-11T19:24:14.6684411Z       [32m  [32m✔[39m[0m[90m interprets the POJO as a subschema (gh-7494)[0m
2025-04-11T19:24:14.6778143Z       [32m  [32m✔[39m[0m[90m enforces provided schema on the child path, unlike Mixed (gh-7494)[0m
2025-04-11T19:24:14.6869323Z       [32m  [32m✔[39m[0m[90m underneath array (gh-8627)[0m
2025-04-11T19:24:14.6959280Z       [32m  [32m✔[39m[0m[90m nested array (gh-8627)[0m
2025-04-11T19:24:14.7024643Z [0m    with a parent with a POJO field with a field "type" with a type set to "String"[0m
2025-04-11T19:24:14.7068154Z     [32m  [32m✔[39m[0m[90m does not create a path for child in either option[0m
2025-04-11T19:24:14.7133459Z     [32m  [32m✔[39m[0m[90m treats type as a property name not a type in both options[0m
2025-04-11T19:24:14.7206429Z     [32m  [32m✔[39m[0m[90m enforces provided schema on the child tree in both options, unlike Mixed (gh-7494)[0m
2025-04-11T19:24:14.7259830Z 
2025-04-11T19:24:14.7260701Z [0m  model[0m
2025-04-11T19:24:14.7420449Z   [32m  [32m✔[39m[0m[90m sets correct partialFilterExpression for document array (gh-9091)[0m
2025-04-11T19:24:14.7577353Z   [32m  [32m✔[39m[0m[90m skips automatic indexing on childSchema if autoIndex: false (gh-9150)[0m
2025-04-11T19:24:14.7615151Z [0m    indexes[0m
2025-04-11T19:24:14.7811792Z     [32m  [32m✔[39m[0m[90m are created when model is compiled[0m
2025-04-11T19:24:14.8029349Z     [32m  [32m✔[39m[0m[90m of embedded documents[0m
2025-04-11T19:24:14.8203110Z     [32m  [32m✔[39m[0m[90m of embedded documents unless excludeIndexes (gh-5575) (gh-8343)[0m
2025-04-11T19:24:14.8493180Z     [32m  [32m✔[39m[0m[90m of multiple embedded documents with same schema[0m
2025-04-11T19:24:14.8718941Z     [32m  [32m✔[39m[0m[90m compound: on embedded docs[0m
2025-04-11T19:24:14.8808932Z     [32m  [32m✔[39m[0m[90m nested embedded docs (gh-5199)[0m
2025-04-11T19:24:14.8892829Z     [32m  [32m✔[39m[0m[90m primitive arrays (gh-3347)[0m
2025-04-11T19:24:14.9151949Z     [32m  [32m✔[39m[0m[90m error should emit on the model[0m
2025-04-11T19:24:14.9389774Z     [32m  [32m✔[39m[0m[90m when one index creation errors[0m
2025-04-11T19:24:14.9584178Z     [32m  [32m✔[39m[0m[90m creates descending indexes from schema definition(gh-8895)[0m
2025-04-11T19:24:14.9632967Z [0m      auto creation[0m
2025-04-11T19:24:15.0805597Z       [32m  [32m✔[39m[0m[90m can be disabled[0m[31m (112ms)[0m
2025-04-11T19:24:15.0864362Z [0m        global autoIndexes (gh-1875)[0m
2025-04-11T19:24:15.1017885Z         [32m  [32m✔[39m[0m[90m will create indexes as a default[0m
2025-04-11T19:24:15.2310066Z         [32m  [32m✔[39m[0m[90m will not create indexes if the global auto index is false and schema option isnt set (gh-1875)[0m[31m (116ms)[0m
2025-04-11T19:24:15.2401694Z [0m      model.ensureIndexes()[0m
2025-04-11T19:24:15.2412544Z       [36m  - is a function[0m
2025-04-11T19:24:15.2412964Z       [36m  - returns a Promise[0m
2025-04-11T19:24:15.2413294Z       [36m  - creates indexes[0m
2025-04-11T19:24:15.2434729Z [0m    discriminators with unique[0m
2025-04-11T19:24:15.2992049Z     [32m  [32m✔[39m[0m[90m converts to partial unique index (gh-6347)[0m[33m (51ms)[0m
2025-04-11T19:24:15.3188800Z     [32m  [32m✔[39m[0m[90m decorated discriminator index with syncIndexes (gh-6347)[0m
2025-04-11T19:24:15.3396665Z     [32m  [32m✔[39m[0m[90m uses schema-level collation by default (gh-9912)[0m
2025-04-11T19:24:15.3627822Z     [32m  [32m✔[39m[0m[90m different collation with syncIndexes() (gh-8521)[0m
2025-04-11T19:24:15.3998757Z     [32m  [32m✔[39m[0m[90m reports syncIndexes() error (gh-9303)[0m
2025-04-11T19:24:15.4212765Z     [32m  [32m✔[39m[0m[90m should not re-create a compound text index that involves non-text indexes, using syncIndexes (gh-13136)[0m
2025-04-11T19:24:15.4392127Z     [32m  [32m✔[39m[0m[90m should not find a diff when calling diffIndexes after syncIndexes involving a text and non-text compound index (gh-13136)[0m
2025-04-11T19:24:15.4629397Z     [32m  [32m✔[39m[0m[90m cleanIndexes (gh-6676)[0m
2025-04-11T19:24:15.4795796Z     [32m  [32m✔[39m[0m[90m should prevent collation on text indexes (gh-10044)[0m
2025-04-11T19:24:15.5181568Z     [32m  [32m✔[39m[0m[90m should do a dryRun feat-10316[0m
2025-04-11T19:24:15.5274713Z     [32m  [32m✔[39m[0m[90m running diffIndexes with a non-existent collection should not throw an error (gh-14010)[0m
2025-04-11T19:24:15.5391363Z 
2025-04-11T19:24:15.5392781Z [0m  aggregate: [0m
2025-04-11T19:24:15.5548538Z   [32m  [32m✔[39m[0m[90m cursor (gh-3160)[0m
2025-04-11T19:24:15.5626442Z   [32m  [32m✔[39m[0m[90m catch() (gh-7267)[0m
2025-04-11T19:24:15.5718805Z   [32m  [32m✔[39m[0m[90m cursor() without options (gh-3855)[0m
2025-04-11T19:24:15.5829972Z   [32m  [32m✔[39m[0m[90m cursor() with useMongooseAggCursor (gh-5145)[0m
2025-04-11T19:24:15.6023144Z   [32m  [32m✔[39m[0m[90m cursor() with useMongooseAggCursor works (gh-5145) (gh-5394)[0m
2025-04-11T19:24:15.7270481Z   [32m  [32m✔[39m[0m[90m cursor() eachAsync (gh-4300)[0m[31m (118ms)[0m
2025-04-11T19:24:15.8480888Z   [32m  [32m✔[39m[0m[90m cursor() eachAsync with options (parallel)[0m[31m (114ms)[0m
2025-04-11T19:24:15.8547209Z   [32m  [32m✔[39m[0m[90m is now a proper aggregate cursor vs what it was before gh-10410[0m
2025-04-11T19:24:15.8759612Z   [32m  [32m✔[39m[0m[90m query by document (gh-4866)[0m
2025-04-11T19:24:15.8916322Z   [32m  [32m✔[39m[0m[90m sort by text score (gh-5258)[0m
2025-04-11T19:24:15.9128296Z   [32m  [32m✔[39m[0m[90m cursor supports transform option (gh-14331)[0m
2025-04-11T19:24:15.9258397Z   [32m  [32m✔[39m[0m[90m should not throw error if database connection has not been established (gh-13125)[0m
2025-04-11T19:24:15.9340806Z   [32m  [32m✔[39m[0m[90m throws error if calling near() with empty coordinates (gh-15188)[0m
2025-04-11T19:24:15.9624059Z   [32m  [32m✔[39m[0m[90m cursor() errors out if schema pre aggregate hook throws an error (gh-15279)[0m
2025-04-11T19:24:15.9663429Z [0m    append[0m
2025-04-11T19:24:15.9708482Z     [32m  [32m✔[39m[0m[90m (pipeline)[0m
2025-04-11T19:24:15.9790750Z     [32m  [32m✔[39m[0m[90m supports array as single argument[0m
2025-04-11T19:24:15.9874749Z     [32m  [32m✔[39m[0m[90m throws if non-operator parameter is passed[0m
2025-04-11T19:24:15.9956816Z     [32m  [32m✔[39m[0m[90m does not throw when 0 args passed[0m
2025-04-11T19:24:16.0038686Z     [32m  [32m✔[39m[0m[90m does not throw when empty array is passed as single argument[0m
2025-04-11T19:24:16.0097935Z [0m    project[0m
2025-04-11T19:24:16.0143444Z     [32m  [32m✔[39m[0m[90m (object)[0m
2025-04-11T19:24:16.0226049Z     [32m  [32m✔[39m[0m[90m (string)[0m
2025-04-11T19:24:16.0308566Z     [32m  [32m✔[39m[0m[90m ("a","b","c")[0m
2025-04-11T19:24:16.0390940Z     [32m  [32m✔[39m[0m[90m ["a","b","c"][0m
2025-04-11T19:24:16.0451399Z [0m    group[0m
2025-04-11T19:24:16.0496219Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:16.0555465Z [0m    skip[0m
2025-04-11T19:24:16.0600323Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:16.0659495Z [0m    limit[0m
2025-04-11T19:24:16.0704046Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:16.0763021Z [0m    unwind[0m
2025-04-11T19:24:16.0808321Z     [32m  [32m✔[39m[0m[90m ("field")[0m
2025-04-11T19:24:16.0867507Z [0m    match[0m
2025-04-11T19:24:16.0912317Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:16.0972596Z [0m    sort[0m
2025-04-11T19:24:16.1017173Z     [32m  [32m✔[39m[0m[90m (object)[0m
2025-04-11T19:24:16.1099605Z     [32m  [32m✔[39m[0m[90m (string)[0m
2025-04-11T19:24:16.1173189Z     [32m  [32m✔[39m[0m[90m ("a","b","c")[0m
2025-04-11T19:24:16.1255079Z     [32m  [32m✔[39m[0m[90m ["a","b","c"][0m
2025-04-11T19:24:16.1314009Z [0m    near[0m
2025-04-11T19:24:16.1359070Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:16.1442161Z     [32m  [32m✔[39m[0m[90m works with discriminators (gh-3304)[0m
2025-04-11T19:24:16.1500940Z [0m    lookup[0m
2025-04-11T19:24:16.1545311Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:16.1604824Z [0m    unionWith[0m
2025-04-11T19:24:16.1649186Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:16.1708688Z [0m    sample[0m
2025-04-11T19:24:16.1753995Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:16.1812997Z [0m    densify[0m
2025-04-11T19:24:16.1857591Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:16.1916445Z [0m    fill[0m
2025-04-11T19:24:16.1960926Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:16.2022587Z [0m    model()[0m
2025-04-11T19:24:16.2067004Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:16.2126241Z [0m    redact[0m
2025-04-11T19:24:16.2171428Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:16.2253453Z     [32m  [32m✔[39m[0m[90m works with (condition, string, string)[0m
2025-04-11T19:24:16.2312498Z [0m    Mongo 3.4 operators[0m
2025-04-11T19:24:16.2418011Z [0m      graphLookup[0m
2025-04-11T19:24:16.2473613Z       [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:16.2577827Z       [32m  [32m✔[39m[0m[90m automatically prepends $ to the startWith field[0m
2025-04-11T19:24:16.2681924Z       [32m  [32m✔[39m[0m[90m Throws if no options are passed to graphLookup[0m
2025-04-11T19:24:16.2754502Z [0m      addFields[0m
2025-04-11T19:24:16.2810870Z       [32m  [32m✔[39m[0m[90m should throw if passed a non object[0m
2025-04-11T19:24:16.2914174Z       [32m  [32m✔[39m[0m[90m should throw if passed null[0m
2025-04-11T19:24:16.3017274Z       [32m  [32m✔[39m[0m[90m should throw if passed an Array[0m
2025-04-11T19:24:16.3120950Z       [32m  [32m✔[39m[0m[90m (object)[0m
2025-04-11T19:24:16.3190439Z [0m      facet[0m
2025-04-11T19:24:16.3246143Z       [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:16.3315754Z [0m      replaceRoot[0m
2025-04-11T19:24:16.3371189Z       [32m  [32m✔[39m[0m[90m works with a string[0m
2025-04-11T19:24:16.3473804Z       [32m  [32m✔[39m[0m[90m works with an object (gh-6474)[0m
2025-04-11T19:24:16.3543712Z [0m      count[0m
2025-04-11T19:24:16.3598926Z       [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:16.3668506Z [0m      sortByCount[0m
2025-04-11T19:24:16.3723890Z       [32m  [32m✔[39m[0m[90m works with a string argument[0m
2025-04-11T19:24:16.3829385Z       [32m  [32m✔[39m[0m[90m works with an object argument[0m
2025-04-11T19:24:16.3933466Z       [32m  [32m✔[39m[0m[90m throws if the argument is neither a string or object[0m
2025-04-11T19:24:16.4013374Z [0m    exec[0m
2025-04-11T19:24:16.4337114Z     [32m  [32m✔[39m[0m[90m project[0m
2025-04-11T19:24:16.4654889Z     [32m  [32m✔[39m[0m[90m group[0m
2025-04-11T19:24:16.4975627Z     [32m  [32m✔[39m[0m[90m skip[0m
2025-04-11T19:24:16.5278906Z     [32m  [32m✔[39m[0m[90m limit[0m
2025-04-11T19:24:16.5587018Z     [32m  [32m✔[39m[0m[90m unwind[0m
2025-04-11T19:24:16.5905732Z     [32m  [32m✔[39m[0m[90m unwind with obj[0m
2025-04-11T19:24:16.6225967Z     [32m  [32m✔[39m[0m[90m unwind throws with bad arg[0m
2025-04-11T19:24:16.6546121Z     [32m  [32m✔[39m[0m[90m match[0m
2025-04-11T19:24:16.6865559Z     [32m  [32m✔[39m[0m[90m sort[0m
2025-04-11T19:24:16.7263468Z     [32m  [32m✔[39m[0m[90m graphLookup[0m
2025-04-11T19:24:16.7708501Z     [32m  [32m✔[39m[0m[90m facet[0m
2025-04-11T19:24:16.8023197Z     [32m  [32m✔[39m[0m[90m complex pipeline[0m
2025-04-11T19:24:16.8332955Z     [32m  [32m✔[39m[0m[90m pipeline() (gh-5825)[0m
2025-04-11T19:24:16.8762704Z     [32m  [32m✔[39m[0m[90m explain()[0m
2025-04-11T19:24:16.9196967Z     [32m  [32m✔[39m[0m[90m handles aggregation options[0m
2025-04-11T19:24:16.9535805Z     [32m  [32m✔[39m[0m[90m readPref from schema (gh-5522)[0m
2025-04-11T19:24:16.9616033Z [0m      error when empty pipeline[0m
2025-04-11T19:24:16.9906802Z       [32m  [32m✔[39m[0m[90m without a callback[0m
2025-04-11T19:24:16.9979575Z [0m      error when not bound to a model[0m
2025-04-11T19:24:17.0266534Z       [32m  [32m✔[39m[0m[90m with callback[0m
2025-04-11T19:24:17.0341022Z [0m      middleware (gh-5251)[0m
2025-04-11T19:24:17.0637215Z       [32m  [32m✔[39m[0m[90m pre[0m
2025-04-11T19:24:17.1128141Z       [32m  [32m✔[39m[0m[90m setting option in pre (gh-7606)[0m
2025-04-11T19:24:17.1611670Z       [32m  [32m✔[39m[0m[90m adding to pipeline in pre (gh-8017)[0m
2025-04-11T19:24:17.1954920Z       [32m  [32m✔[39m[0m[90m post[0m
2025-04-11T19:24:17.2297158Z       [32m  [32m✔[39m[0m[90m error handler with agg error[0m
2025-04-11T19:24:17.2634757Z       [32m  [32m✔[39m[0m[90m error handler with pre error[0m
2025-04-11T19:24:17.3003457Z       [32m  [32m✔[39m[0m[90m with agg cursor[0m
2025-04-11T19:24:17.3346634Z       [32m  [32m✔[39m[0m[90m with explain() (gh-5887)[0m
2025-04-11T19:24:17.3436701Z [0m    Mongo 3.6 options[0m
2025-04-11T19:24:17.3697526Z     [32m  [32m✔[39m[0m[90m adds hint option[0m
2025-04-11T19:24:17.3795609Z 
2025-04-11T19:24:17.3796011Z [0m  driver[0m
2025-04-11T19:24:17.3847263Z   [32m  [32m✔[39m[0m[90m can set custom driver (gh-11900)[0m
2025-04-11T19:24:17.3910428Z   [32m  [32m✔[39m[0m[90m multiple drivers (gh-12638)[0m
2025-04-11T19:24:17.3942345Z 
2025-04-11T19:24:17.3945607Z [0m  Query[0m
2025-04-11T19:24:17.4089549Z   [32m  [32m✔[39m[0m[90m transform (gh-14236) (gh-7142)[0m
2025-04-11T19:24:17.4426066Z   [32m  [32m✔[39m[0m[90m allows skipping timestamps in updateOne() (gh-6980)[0m
2025-04-11T19:24:17.4836118Z   [32m  [32m✔[39m[0m[90m increments timestamps for nested subdocs (gh-4412)[0m
2025-04-11T19:24:17.5003924Z   [32m  [32m✔[39m[0m[90m strictQuery option (gh-4136) (gh-7178)[0m
2025-04-11T19:24:17.5081440Z   [32m  [32m✔[39m[0m[90m strictQuery does not inherit from strict (gh-11861)[0m
2025-04-11T19:24:17.5287562Z   [32m  [32m✔[39m[0m[90m strictQuery is false by default (gh-11861)[0m
2025-04-11T19:24:17.5452346Z   [32m  [32m✔[39m[0m[90m strictQuery = true (gh-6032)[0m
2025-04-11T19:24:17.5630081Z   [32m  [32m✔[39m[0m[90m function defaults run after query result is inited (gh-7182)[0m
2025-04-11T19:24:17.5784958Z   [32m  [32m✔[39m[0m[90m merging objectids with where() (gh-7360)[0m
2025-04-11T19:24:17.6051739Z   [32m  [32m✔[39m[0m[90m maxTimeMS() (gh-7254)[0m
2025-04-11T19:24:17.6322822Z   [32m  [32m✔[39m[0m[90m connection-level maxTimeMS() (gh-4066)[0m
2025-04-11T19:24:17.6594924Z   [32m  [32m✔[39m[0m[90m mongoose-level maxTimeMS() (gh-4066)[0m
2025-04-11T19:24:17.6773559Z   [32m  [32m✔[39m[0m[90m query with top-level _bsontype (gh-8222) (gh-8268)[0m
2025-04-11T19:24:17.7271684Z   [32m  [32m✔[39m[0m[90m casts $elemMatch with dbrefs (gh-8577)[0m[33m (43ms)[0m
2025-04-11T19:24:17.7360311Z   [32m  [32m✔[39m[0m[90m throws an error if executed multiple times (gh-7398)[0m
2025-04-11T19:24:17.7462820Z   [32m  [32m✔[39m[0m[90m setter priorVal (gh-8629)[0m
2025-04-11T19:24:17.7715915Z   [32m  [32m✔[39m[0m[90m casts filter according to discriminator schema if in filter (gh-8881)[0m
2025-04-11T19:24:17.7928259Z   [32m  [32m✔[39m[0m[90m casts update object according to child discriminator schema when `discriminatorKey` is present (gh-8982)[0m
2025-04-11T19:24:17.8093877Z   [32m  [32m✔[39m[0m[90m allows disabling `setDefaultsOnInsert` (gh-8410)[0m
2025-04-11T19:24:17.8171450Z   [32m  [32m✔[39m[0m[90m throws readable error if `$and` and `$or` contain non-objects (gh-8948)[0m
2025-04-11T19:24:17.8415043Z   [32m  [32m✔[39m[0m[90m includes `undefined` in filters (gh-3944)[0m
2025-04-11T19:24:17.8628569Z   [32m  [32m✔[39m[0m[90m handles push with array filters (gh-9977)[0m
2025-04-11T19:24:17.8710879Z   [32m  [32m✔[39m[0m[90m Query#pre() (gh-9784)[0m
2025-04-11T19:24:17.8832659Z   [32m  [32m✔[39m[0m[90m applies schema-level `select` on arrays (gh-10029)[0m
2025-04-11T19:24:17.8940984Z   [32m  [32m✔[39m[0m[90m sets `writeConcern` option correctly (gh-10009)[0m
2025-04-11T19:24:17.9151678Z   [32m  [32m✔[39m[0m[90m no longer has the deprecation warning message with writeConcern gh-10083[0m
2025-04-11T19:24:17.9217447Z   [32m  [32m✔[39m[0m[90m sanitizeProjection option (gh-10243)[0m
2025-04-11T19:24:17.9462884Z   [32m  [32m✔[39m[0m[90m sanitizeProjection option with plus paths (gh-14333) (gh-10243)[0m
2025-04-11T19:24:17.9531764Z   [32m  [32m✔[39m[0m[90m sanitizeFilter option (gh-3944)[0m
2025-04-11T19:24:17.9676839Z   [32m  [32m✔[39m[0m[90m sanitizeFilter disables implicit $in (gh-14657)[0m
2025-04-11T19:24:17.9907272Z   [32m  [32m✔[39m[0m[90m should not error when $not is used with $size (gh-10716)[0m
2025-04-11T19:24:18.0229349Z   [32m  [32m✔[39m[0m[90m should not error when $not is used on an array of strings (gh-11467)[0m
2025-04-11T19:24:18.0394635Z   [32m  [32m✔[39m[0m[90m adding `exec` option does not affect the query (gh-11416)[0m
2025-04-11T19:24:18.0584853Z   [32m  [32m✔[39m[0m[90m handles queries with EJSON deserialized RegExps (gh-11597)[0m
2025-04-11T19:24:18.0770889Z   [32m  [32m✔[39m[0m[90m should return query helper supplied in schema options query property instead of undefined[0m
2025-04-11T19:24:18.0960700Z   [32m  [32m✔[39m[0m[90m allows a transform option for lean on a query (gh-10423)[0m
2025-04-11T19:24:18.1211880Z   [32m  [32m✔[39m[0m[90m handles a lean transform that deletes _id with populate (gh-12143) (gh-10423)[0m
2025-04-11T19:24:18.1390331Z   [32m  [32m✔[39m[0m[90m skips applying default projections over slice projections (gh-11940)[0m
2025-04-11T19:24:18.1618143Z   [32m  [32m✔[39m[0m[90m translateAliases option (gh-7511)[0m
2025-04-11T19:24:18.1775120Z   [32m  [32m✔[39m[0m[90m translateAliases throws error on conflicting properties (gh-7511)[0m
2025-04-11T19:24:18.1934531Z   [32m  [32m✔[39m[0m[90m translateAliases applies before casting (gh-14521) (gh-7511)[0m
2025-04-11T19:24:18.2104107Z   [32m  [32m✔[39m[0m[90m schema level translateAliases option (gh-7511)[0m
2025-04-11T19:24:18.2284360Z   [32m  [32m✔[39m[0m[90m select: false is ignored for type Map (gh-12445)[0m
2025-04-11T19:24:18.2473812Z   [32m  [32m✔[39m[0m[90m Map field with select: false is selected when explicitly requested (gh-12603)[0m
2025-04-11T19:24:18.2527369Z   [32m  [32m✔[39m[0m[90m treats ObjectId as object with `_id` for `merge()` (gh-12325)[0m
2025-04-11T19:24:18.2789703Z   [32m  [32m✔[39m[0m[90m avoid throwing error when modifying nested field with same name as discriminator key (gh-12517)[0m
2025-04-11T19:24:18.3032166Z   [32m  [32m✔[39m[0m[90m avoid throwing error when modifying field with same name as nested discriminator key (gh-12517)[0m
2025-04-11T19:24:18.3267302Z   [32m  [32m✔[39m[0m[90m global strictQuery should work if applied after schema creation (gh-12703)[0m
2025-04-11T19:24:18.3467563Z   [32m  [32m✔[39m[0m[90m update operation should not remove fields set to undefined (gh-12930)[0m
2025-04-11T19:24:18.3645618Z   [32m  [32m✔[39m[0m[90m handles $elemMatch with nested schema (gh-12902)[0m
2025-04-11T19:24:18.3712279Z   [32m  [32m✔[39m[0m[90m merges $and, $or conditions (gh-12944)[0m
2025-04-11T19:24:18.3816348Z   [32m  [32m✔[39m[0m[90m shallow clones $and, $or if merging with empty filter (gh-14567) (gh-12944)[0m
2025-04-11T19:24:18.4015433Z   [32m  [32m✔[39m[0m[90m should avoid sending empty session to MongoDB server (gh-13052)[0m
2025-04-11T19:24:18.4205304Z   [32m  [32m✔[39m[0m[90m should avoid sending empty projection to MongoDB server (gh-13065)[0m
2025-04-11T19:24:18.4296447Z   [32m  [32m✔[39m[0m[90m should provide a clearer error message when sorting with empty string[0m
2025-04-11T19:24:18.4499354Z   [32m  [32m✔[39m[0m[90m allows executing a find() with a subdocument with defaults disabled (gh-13512)[0m
2025-04-11T19:24:18.4673474Z   [32m  [32m✔[39m[0m[90m throws a readable error when executing Query instance without a model (gh-13570)[0m
2025-04-11T19:24:18.4827257Z   [32m  [32m✔[39m[0m[90m throws a readable error when executing Query instance without an op (gh-13570)[0m
2025-04-11T19:24:18.5054288Z   [32m  [32m✔[39m[0m[90m allows deselecting discriminator key (gh-13760) (gh-13679)[0m
2025-04-11T19:24:18.5298392Z   [32m  [32m✔[39m[0m[90m does not apply sibling path defaults if using nested projection (gh-14115)[0m
2025-04-11T19:24:18.5364443Z   [32m  [32m✔[39m[0m[90m allows overriding sort (gh-14365)[0m
2025-04-11T19:24:18.5573710Z   [32m  [32m✔[39m[0m[90m avoids mutating user-provided query selectors (gh-14567)[0m
2025-04-11T19:24:18.5652963Z   [32m  [32m✔[39m[0m[90m avoids mutating $or, $and elements when casting (gh-14610)[0m
2025-04-11T19:24:18.5716351Z [0m    constructor[0m
2025-04-11T19:24:18.5761254Z     [32m  [32m✔[39m[0m[90m should not corrupt options[0m
2025-04-11T19:24:18.5818640Z [0m    select[0m
2025-04-11T19:24:18.5862944Z     [32m  [32m✔[39m[0m[90m (object)[0m
2025-04-11T19:24:18.5942232Z     [32m  [32m✔[39m[0m[90m (string)[0m
2025-04-11T19:24:18.6023647Z     [32m  [32m✔[39m[0m[90m ("a","b","c")[0m
2025-04-11T19:24:18.6108245Z     [32m  [32m✔[39m[0m[90m should not overwrite fields set in prior calls[0m
2025-04-11T19:24:18.6185162Z     [32m  [32m✔[39m[0m[90m should remove existing fields from inclusive projection[0m
2025-04-11T19:24:18.6265905Z     [32m  [32m✔[39m[0m[90m should remove existing fields from exclusive projection[0m
2025-04-11T19:24:18.6323261Z [0m    projection() (gh-7384)[0m
2025-04-11T19:24:18.6367532Z     [32m  [32m✔[39m[0m[90m gets current projection[0m
2025-04-11T19:24:18.6447447Z     [32m  [32m✔[39m[0m[90m overwrites current projection[0m
2025-04-11T19:24:18.6504634Z [0m    where[0m
2025-04-11T19:24:18.6549000Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:18.6630014Z     [32m  [32m✔[39m[0m[90m throws if non-string or non-object path is passed[0m
2025-04-11T19:24:18.6709065Z     [32m  [32m✔[39m[0m[90m does not throw when 0 args passed[0m
2025-04-11T19:24:18.6766122Z [0m    equals[0m
2025-04-11T19:24:18.6810288Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:18.6869076Z [0m    gte[0m
2025-04-11T19:24:18.6913573Z     [32m  [32m✔[39m[0m[90m with 2 args[0m
2025-04-11T19:24:18.6993570Z     [32m  [32m✔[39m[0m[90m with 1 arg[0m
2025-04-11T19:24:18.7050943Z [0m    gt[0m
2025-04-11T19:24:18.7095138Z     [32m  [32m✔[39m[0m[90m with 1 arg[0m
2025-04-11T19:24:18.7174544Z     [32m  [32m✔[39m[0m[90m with 2 args[0m
2025-04-11T19:24:18.7232977Z [0m    lte[0m
2025-04-11T19:24:18.7277305Z     [32m  [32m✔[39m[0m[90m with 1 arg[0m
2025-04-11T19:24:18.7358539Z     [32m  [32m✔[39m[0m[90m with 2 args[0m
2025-04-11T19:24:18.7419855Z [0m    lt[0m
2025-04-11T19:24:18.7464166Z     [32m  [32m✔[39m[0m[90m with 1 arg[0m
2025-04-11T19:24:18.7545140Z     [32m  [32m✔[39m[0m[90m with 2 args[0m
2025-04-11T19:24:18.7603656Z [0m    combined[0m
2025-04-11T19:24:18.7614503Z [0m      lt and gt[0m
2025-04-11T19:24:18.7669630Z       [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:18.7749863Z [0m    tl on one path and gt on another[0m
2025-04-11T19:24:18.7793934Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:18.7852436Z [0m    ne[0m
2025-04-11T19:24:18.7896760Z     [32m  [32m✔[39m[0m[90m with 1 arg[0m
2025-04-11T19:24:18.7977852Z     [32m  [32m✔[39m[0m[90m with 2 args[0m
2025-04-11T19:24:18.8036296Z [0m    in[0m
2025-04-11T19:24:18.8080625Z     [32m  [32m✔[39m[0m[90m with 1 arg[0m
2025-04-11T19:24:18.8163422Z     [32m  [32m✔[39m[0m[90m with 2 args[0m
2025-04-11T19:24:18.8244729Z     [32m  [32m✔[39m[0m[90m where a non-array value no via where[0m
2025-04-11T19:24:18.8325603Z     [32m  [32m✔[39m[0m[90m where a non-array value via where[0m
2025-04-11T19:24:18.8385243Z [0m    nin[0m
2025-04-11T19:24:18.8429516Z     [32m  [32m✔[39m[0m[90m with 1 arg[0m
2025-04-11T19:24:18.8512244Z     [32m  [32m✔[39m[0m[90m with 2 args[0m
2025-04-11T19:24:18.8592254Z     [32m  [32m✔[39m[0m[90m with a non-array value not via where[0m
2025-04-11T19:24:18.8689331Z     [32m  [32m✔[39m[0m[90m with a non-array value via where[0m
2025-04-11T19:24:18.8747912Z [0m    mod[0m
2025-04-11T19:24:18.8792969Z     [32m  [32m✔[39m[0m[90m not via where, where [a, b] param[0m
2025-04-11T19:24:18.8874019Z     [32m  [32m✔[39m[0m[90m not via where, where a and b params[0m
2025-04-11T19:24:18.8955529Z     [32m  [32m✔[39m[0m[90m via where, where [a, b] param[0m
2025-04-11T19:24:18.9024352Z     [32m  [32m✔[39m[0m[90m via where, where a and b params[0m
2025-04-11T19:24:18.9080654Z [0m    near[0m
2025-04-11T19:24:18.9125407Z     [32m  [32m✔[39m[0m[90m via where, where { center :[lat, long]} param[0m
2025-04-11T19:24:18.9206468Z     [32m  [32m✔[39m[0m[90m via where, where [lat, long] param[0m
2025-04-11T19:24:18.9286166Z     [32m  [32m✔[39m[0m[90m via where, where lat and long params[0m
2025-04-11T19:24:18.9365695Z     [32m  [32m✔[39m[0m[90m not via where, where [lat, long] param[0m
2025-04-11T19:24:18.9444843Z     [32m  [32m✔[39m[0m[90m not via where, where lat and long params[0m
2025-04-11T19:24:18.9519521Z     [32m  [32m✔[39m[0m[90m via where, where GeoJSON param[0m
2025-04-11T19:24:18.9634200Z     [32m  [32m✔[39m[0m[90m with path, where GeoJSON param[0m
2025-04-11T19:24:18.9693885Z [0m    nearSphere[0m
2025-04-11T19:24:18.9739006Z     [32m  [32m✔[39m[0m[90m via where, where [lat, long] param[0m
2025-04-11T19:24:18.9818420Z     [32m  [32m✔[39m[0m[90m via where, where lat and long params[0m
2025-04-11T19:24:18.9893572Z     [32m  [32m✔[39m[0m[90m not via where, where [lat, long] param[0m
2025-04-11T19:24:18.9964488Z     [32m  [32m✔[39m[0m[90m not via where, where lat and long params[0m
2025-04-11T19:24:19.0043698Z     [32m  [32m✔[39m[0m[90m via where, with object[0m
2025-04-11T19:24:19.0131895Z     [32m  [32m✔[39m[0m[90m via where, where GeoJSON param[0m
2025-04-11T19:24:19.0244120Z     [32m  [32m✔[39m[0m[90m with path, with GeoJSON[0m
2025-04-11T19:24:19.0331332Z [0m    maxDistance[0m
2025-04-11T19:24:19.0375810Z     [32m  [32m✔[39m[0m[90m via where[0m
2025-04-11T19:24:19.0433237Z [0m    within[0m
2025-04-11T19:24:19.0444094Z [0m      box[0m
2025-04-11T19:24:19.0500969Z       [32m  [32m✔[39m[0m[90m via where[0m
2025-04-11T19:24:19.0602294Z       [32m  [32m✔[39m[0m[90m via where, no object[0m
2025-04-11T19:24:19.0670634Z [0m      center[0m
2025-04-11T19:24:19.0726574Z       [32m  [32m✔[39m[0m[90m via where[0m
2025-04-11T19:24:19.0794482Z [0m      centerSphere[0m
2025-04-11T19:24:19.0851412Z       [32m  [32m✔[39m[0m[90m via where[0m
2025-04-11T19:24:19.0920217Z [0m      polygon[0m
2025-04-11T19:24:19.0975763Z       [32m  [32m✔[39m[0m[90m via where[0m
2025-04-11T19:24:19.1054356Z [0m    exists[0m
2025-04-11T19:24:19.1099712Z     [32m  [32m✔[39m[0m[90m 0 args via where[0m
2025-04-11T19:24:19.1179442Z     [32m  [32m✔[39m[0m[90m 1 arg via where[0m
2025-04-11T19:24:19.1261556Z     [32m  [32m✔[39m[0m[90m where 1 argument not via where[0m
2025-04-11T19:24:19.1345196Z     [32m  [32m✔[39m[0m[90m where 2 args not via where[0m
2025-04-11T19:24:19.1406915Z [0m    all[0m
2025-04-11T19:24:19.1453070Z     [32m  [32m✔[39m[0m[90m via where[0m
2025-04-11T19:24:19.1533373Z     [32m  [32m✔[39m[0m[90m not via where[0m
2025-04-11T19:24:19.1589850Z [0m    find[0m
2025-04-11T19:24:19.1634160Z     [32m  [32m✔[39m[0m[90m strict array equivalence condition v[0m
2025-04-11T19:24:19.1712931Z     [32m  [32m✔[39m[0m[90m with no args[0m
2025-04-11T19:24:19.1792725Z     [32m  [32m✔[39m[0m[90m works with overwriting previous object args (1176)[0m
2025-04-11T19:24:19.1849082Z [0m    size[0m
2025-04-11T19:24:19.1893224Z     [32m  [32m✔[39m[0m[90m via where[0m
2025-04-11T19:24:19.1972858Z     [32m  [32m✔[39m[0m[90m not via where[0m
2025-04-11T19:24:19.2029408Z [0m    slice[0m
2025-04-11T19:24:19.2074215Z     [32m  [32m✔[39m[0m[90m where and positive limit param[0m
2025-04-11T19:24:19.2153298Z     [32m  [32m✔[39m[0m[90m where just negative limit param[0m
2025-04-11T19:24:19.2233087Z     [32m  [32m✔[39m[0m[90m where [skip, limit] param[0m
2025-04-11T19:24:19.2312420Z     [32m  [32m✔[39m[0m[90m where skip and limit params[0m
2025-04-11T19:24:19.2391890Z     [32m  [32m✔[39m[0m[90m where just positive limit param[0m
2025-04-11T19:24:19.2472126Z     [32m  [32m✔[39m[0m[90m where just negative limit param[0m
2025-04-11T19:24:19.2551446Z     [32m  [32m✔[39m[0m[90m where the [skip, limit] param[0m
2025-04-11T19:24:19.2630858Z     [32m  [32m✔[39m[0m[90m where the skip and limit params[0m
2025-04-11T19:24:19.2709910Z     [32m  [32m✔[39m[0m[90m not via where, with just positive limit param[0m
2025-04-11T19:24:19.2791549Z     [32m  [32m✔[39m[0m[90m not via where, where just negative limit param[0m
2025-04-11T19:24:19.2870836Z     [32m  [32m✔[39m[0m[90m not via where, where [skip, limit] param[0m
2025-04-11T19:24:19.2950273Z     [32m  [32m✔[39m[0m[90m not via where, where skip and limit params[0m
2025-04-11T19:24:19.3006334Z [0m    elemMatch[0m
2025-04-11T19:24:19.3017011Z [0m      not via where[0m
2025-04-11T19:24:19.3073341Z       [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:19.3175175Z       [32m  [32m✔[39m[0m[90m where block notation[0m
2025-04-11T19:24:19.3242375Z [0m      via where[0m
2025-04-11T19:24:19.3297040Z       [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:19.3398030Z       [32m  [32m✔[39m[0m[90m where block notation[0m
2025-04-11T19:24:19.3476891Z [0m    $where[0m
2025-04-11T19:24:19.3521391Z     [32m  [32m✔[39m[0m[90m function arg[0m
2025-04-11T19:24:19.3600818Z     [32m  [32m✔[39m[0m[90m string arg[0m
2025-04-11T19:24:19.3657158Z [0m    limit[0m
2025-04-11T19:24:19.3701316Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:19.3785383Z     [32m  [32m✔[39m[0m[90m with string limit (gh-11017)[0m
2025-04-11T19:24:19.3853538Z [0m    skip[0m
2025-04-11T19:24:19.3897586Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:19.3954412Z [0m    sort[0m
2025-04-11T19:24:19.4002217Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:19.4059379Z [0m    or[0m
2025-04-11T19:24:19.4103797Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:19.4162366Z [0m    and[0m
2025-04-11T19:24:19.4207071Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:19.4266207Z [0m    populate[0m
2025-04-11T19:24:19.4311558Z     [32m  [32m✔[39m[0m[90m converts to PopulateOptions objects[0m
2025-04-11T19:24:19.4396429Z     [32m  [32m✔[39m[0m[90m overwrites duplicate paths[0m
2025-04-11T19:24:19.4477711Z     [32m  [32m✔[39m[0m[90m accepts space delimited strings[0m
2025-04-11T19:24:19.4536187Z [0m    casting[0m
2025-04-11T19:24:19.4583739Z     [32m  [32m✔[39m[0m[90m to an array of mixed[0m
2025-04-11T19:24:19.4818296Z     [32m  [32m✔[39m[0m[90m doesn't wipe out $in (gh-6439)[0m
2025-04-11T19:24:19.4900741Z     [32m  [32m✔[39m[0m[90m find $ne should not cast single value to array for schematype of Array[0m
2025-04-11T19:24:19.5042060Z     [32m  [32m✔[39m[0m[90m subdocument array with $ne: null should not throw[0m
2025-04-11T19:24:19.5152728Z     [32m  [32m✔[39m[0m[90m find should not cast single value to array for schematype of Array[0m
2025-04-11T19:24:19.5297230Z     [32m  [32m✔[39m[0m[90m an $elemMatch with $in works (gh-1100)[0m
2025-04-11T19:24:19.5408838Z     [32m  [32m✔[39m[0m[90m inequality operators for an array[0m
2025-04-11T19:24:19.5532165Z [0m    distinct[0m
2025-04-11T19:24:19.5576421Z     [32m  [32m✔[39m[0m[90m op[0m
2025-04-11T19:24:19.5656697Z     [32m  [32m✔[39m[0m[90m using options parameter for distinct[0m
2025-04-11T19:24:19.5713369Z [0m    findOne[0m
2025-04-11T19:24:19.5761795Z     [32m  [32m✔[39m[0m[90m sets the op[0m
2025-04-11T19:24:19.5858666Z [0m    deleteOne/deleteMany[0m
2025-04-11T19:24:19.6064044Z     [32m  [32m✔[39m[0m[90m handles deleteOne[0m
2025-04-11T19:24:19.6309954Z     [32m  [32m✔[39m[0m[90m handles deleteMany[0m
2025-04-11T19:24:19.6369949Z [0m    deleteMany[0m
2025-04-11T19:24:19.6428592Z     [32m  [32m✔[39m[0m[90m handles cast errors async[0m
2025-04-11T19:24:19.6632471Z     [32m  [32m✔[39m[0m[90m supports a single conditions arg[0m
2025-04-11T19:24:19.6828203Z     [32m  [32m✔[39m[0m[90m supports a single callback arg[0m
2025-04-11T19:24:19.7016228Z     [32m  [32m✔[39m[0m[90m supports conditions and callback args[0m
2025-04-11T19:24:19.7075681Z [0m    querying/updating with model instance containing embedded docs should work (#454)[0m
2025-04-11T19:24:19.7233764Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:19.7292849Z [0m    optionsForExec[0m
2025-04-11T19:24:19.7337893Z     [32m  [32m✔[39m[0m[90m should retain key order[0m
2025-04-11T19:24:19.7418088Z     [32m  [32m✔[39m[0m[90m applies schema-level writeConcern option[0m
2025-04-11T19:24:19.7499649Z     [32m  [32m✔[39m[0m[90m session() (gh-6663)[0m
2025-04-11T19:24:19.7545472Z [0m    options[0m
2025-04-11T19:24:19.7556159Z [0m      tailable[0m
2025-04-11T19:24:19.7612919Z       [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:19.7716357Z       [32m  [32m✔[39m[0m[90m supports passing the `awaitData` option[0m
2025-04-11T19:24:19.7785750Z [0m      comment[0m
2025-04-11T19:24:19.7840838Z       [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:19.7910264Z [0m      hint[0m
2025-04-11T19:24:19.7965806Z       [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:19.8034987Z [0m      batchSize[0m
2025-04-11T19:24:19.8089962Z       [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:19.8159214Z [0m      read[0m
2025-04-11T19:24:19.8170373Z [0m        without tags[0m
2025-04-11T19:24:19.8236275Z         [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:19.8315157Z [0m        with tags[0m
2025-04-11T19:24:19.8381032Z         [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:19.8461062Z [0m        inherits its models schema read option[0m
2025-04-11T19:24:19.8531111Z         [32m  [32m✔[39m[0m[90m if not set in query[0m
2025-04-11T19:24:19.8653857Z         [32m  [32m✔[39m[0m[90m if set in query[0m
2025-04-11T19:24:19.8791989Z         [32m  [32m✔[39m[0m[90m and sends it though the driver[0m
2025-04-11T19:24:19.8899819Z [0m    setOptions[0m
2025-04-11T19:24:19.8946261Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:19.9026832Z     [32m  [32m✔[39m[0m[90m populate as array in options (gh-4446)[0m
2025-04-11T19:24:19.9083846Z [0m    bug fixes[0m
2025-04-11T19:24:19.9251596Z     [32m  [32m✔[39m[0m[90m excludes _id when select false and inclusive mode (gh-3010)[0m
2025-04-11T19:24:19.9348173Z     [32m  [32m✔[39m[0m[90m doesnt reverse key order for update docs (gh-3215)[0m
2025-04-11T19:24:19.9480933Z     [32m  [32m✔[39m[0m[90m timestamps with $each (gh-4805)[0m
2025-04-11T19:24:19.9596444Z     [32m  [32m✔[39m[0m[90m handles nested $ (gh-3265)[0m
2025-04-11T19:24:19.9726688Z     [32m  [32m✔[39m[0m[90m $geoWithin with single nested schemas (gh-4044)[0m
2025-04-11T19:24:20.0024954Z     [32m  [32m✔[39m[0m[90m setDefaultsOnInsert with empty update (gh-3825)[0m
2025-04-11T19:24:20.0209823Z     [32m  [32m✔[39m[0m[90m custom query methods (gh-3714)[0m
2025-04-11T19:24:20.0299925Z     [32m  [32m✔[39m[0m[90m string as input (gh-4378)[0m
2025-04-11T19:24:20.0571696Z     [32m  [32m✔[39m[0m[90m handles geoWithin with $center and mongoose object (gh-4419)[0m
2025-04-11T19:24:20.0659757Z     [32m  [32m✔[39m[0m[90m $not with objects (gh-4495)[0m
2025-04-11T19:24:20.0928163Z     [32m  [32m✔[39m[0m[90m geoIntersects with mongoose doc as coords (gh-4408)[0m
2025-04-11T19:24:20.1022575Z     [32m  [32m✔[39m[0m[90m string with $not (gh-4592)[0m
2025-04-11T19:24:20.1219796Z     [32m  [32m✔[39m[0m[90m does not cast undefined to null in mongoose (gh-6236)[0m
2025-04-11T19:24:20.1414086Z     [32m  [32m✔[39m[0m[90m runs query setters with _id field (gh-5351)[0m
2025-04-11T19:24:20.1514208Z     [32m  [32m✔[39m[0m[90m runs setters if query field is an array (gh-6277)[0m
2025-04-11T19:24:20.1614879Z     [32m  [32m✔[39m[0m[90m $exists under $not (gh-4933)[0m
2025-04-11T19:24:20.1815229Z     [32m  [32m✔[39m[0m[90m geojson underneath array (gh-5467)[0m
2025-04-11T19:24:20.2005519Z     [32m  [32m✔[39m[0m[90m slice respects schema projections (gh-5450)[0m
2025-04-11T19:24:20.2102794Z     [32m  [32m✔[39m[0m[90m overwrites when passing an object when path already set to primitive (gh-6097)[0m
2025-04-11T19:24:20.2218903Z     [32m  [32m✔[39m[0m[90m $exists for arrays and embedded docs (gh-4937)[0m
2025-04-11T19:24:20.2338556Z     [32m  [32m✔[39m[0m[90m report error in pre hook (gh-5520)[0m
2025-04-11T19:24:20.2446038Z     [32m  [32m✔[39m[0m[90m cast error with custom error (gh-5520)[0m
2025-04-11T19:24:20.2667804Z     [32m  [32m✔[39m[0m[90m change deleteOne to updateOne for soft deletes using $isDeleted (gh-4428)[0m
2025-04-11T19:24:20.2862043Z     [32m  [32m✔[39m[0m[90m child schema with select: false in multiple paths (gh-5603)[0m
2025-04-11T19:24:20.3485254Z     [32m  [32m✔[39m[0m[90m errors in post init (gh-5592)[0m[33m (54ms)[0m
2025-04-11T19:24:20.3582901Z     [32m  [32m✔[39m[0m[90m with non-object args (gh-1698)[0m
2025-04-11T19:24:21.1967436Z     [32m  [32m✔[39m[0m[90m queries with BSON overflow (gh-5812)[0m[31m (828ms)[0m
2025-04-11T19:24:21.2533378Z     [32m  [32m✔[39m[0m[90m explain() (gh-6625)[0m
2025-04-11T19:24:21.2739698Z     [32m  [32m✔[39m[0m[90m cast embedded discriminators with dot notation (gh-6027)[0m
2025-04-11T19:24:21.2927820Z     [32m  [32m✔[39m[0m[90m cast embedded discriminators with embedded obj (gh-6027)[0m
2025-04-11T19:24:21.3143545Z     [32m  [32m✔[39m[0m[90m cast embedded discriminators with $elemMatch discriminator key (gh-7449)[0m
2025-04-11T19:24:21.3408477Z     [32m  [32m✔[39m[0m[90m handles geoWithin with mongoose docs (gh-4392)[0m
2025-04-11T19:24:21.3474864Z [0m      collations[0m
2025-04-11T19:24:21.3796322Z       [32m  [32m✔[39m[0m[90m collation support (gh-4839)[0m
2025-04-11T19:24:21.4058033Z       [32m  [32m✔[39m[0m[90m set on schema (gh-5295)[0m
2025-04-11T19:24:21.4132005Z [0m      gh-1950[0m
2025-04-11T19:24:21.4289642Z       [32m  [32m✔[39m[0m[90m ignores sort when passed to countDocuments[0m
2025-04-11T19:24:21.4351900Z       [36m  - ignores count when passed to sort[0m
2025-04-11T19:24:21.4374144Z [0m    handles falsy and object projections with defaults (gh-3256)[0m
2025-04-11T19:24:21.4493960Z     [32m  [32m✔[39m[0m[90m falsy projection[0m
2025-04-11T19:24:21.4634261Z     [32m  [32m✔[39m[0m[90m slice projection[0m
2025-04-11T19:24:21.4775263Z     [32m  [32m✔[39m[0m[90m empty projection[0m
2025-04-11T19:24:21.4836616Z [0m    count[0m
2025-04-11T19:24:21.5364593Z     [32m  [32m✔[39m[0m[90m calls utils.toObject on conditions (gh-6323)[0m[33m (49ms)[0m
2025-04-11T19:24:21.5427152Z [0m    setQuery[0m
2025-04-11T19:24:21.5473102Z     [32m  [32m✔[39m[0m[90m replaces existing query with new value (gh-6854)[0m
2025-04-11T19:24:21.5533439Z [0m    orFail (gh-6841)[0m
2025-04-11T19:24:21.5670616Z     [32m  [32m✔[39m[0m[90m find()[0m
2025-04-11T19:24:21.5829748Z     [32m  [32m✔[39m[0m[90m findOne()[0m
2025-04-11T19:24:21.5985624Z     [32m  [32m✔[39m[0m[90m deleteMany()[0m
2025-04-11T19:24:21.6139178Z     [32m  [32m✔[39m[0m[90m deleteOne()[0m
2025-04-11T19:24:21.6297301Z     [32m  [32m✔[39m[0m[90m replaceOne()[0m
2025-04-11T19:24:21.6448521Z     [32m  [32m✔[39m[0m[90m updateMany()[0m
2025-04-11T19:24:21.6609506Z     [32m  [32m✔[39m[0m[90m updateOne()[0m
2025-04-11T19:24:21.6776605Z     [32m  [32m✔[39m[0m[90m findOneAndUpdate()[0m
2025-04-11T19:24:21.6938476Z     [32m  [32m✔[39m[0m[90m findOneAndDelete()[0m
2025-04-11T19:24:21.7188735Z     [32m  [32m✔[39m[0m[90m executes before post hooks (gh-7280)[0m
2025-04-11T19:24:21.7339364Z     [32m  [32m✔[39m[0m[90m throws DocumentNotFoundError by default execute (gh-7409)[0m
2025-04-11T19:24:21.7482509Z     [32m  [32m✔[39m[0m[90m does not fire on CastError (gh-13165)[0m
2025-04-11T19:24:21.7543270Z [0m    getPopulatedPaths[0m
2025-04-11T19:24:21.7600340Z     [32m  [32m✔[39m[0m[90m doesn't break on a query without population (gh-6677)[0m
2025-04-11T19:24:21.7866877Z     [32m  [32m✔[39m[0m[90m returns an array of populated paths as strings (gh-6677)[0m
2025-04-11T19:24:21.7963135Z     [32m  [32m✔[39m[0m[90m returns deep populated paths (gh-7757)[0m
2025-04-11T19:24:21.8115227Z [0m    setUpdate[0m
2025-04-11T19:24:21.8160719Z     [32m  [32m✔[39m[0m[90m replaces existing update doc with new value[0m
2025-04-11T19:24:21.8218717Z [0m    get() (gh-7312)[0m
2025-04-11T19:24:21.8263504Z     [32m  [32m✔[39m[0m[90m works with using $set[0m
2025-04-11T19:24:21.8344749Z     [32m  [32m✔[39m[0m[90m works with $set syntactic sugar[0m
2025-04-11T19:24:21.8425646Z     [32m  [32m✔[39m[0m[90m works with mixed[0m
2025-04-11T19:24:21.8615640Z     [32m  [32m✔[39m[0m[90m $set overwrites existing[0m
2025-04-11T19:24:21.8676972Z [0m    increments timestamps for arrays of nested subdocs (gh-4412)[0m
2025-04-11T19:24:21.8878049Z     [32m  [32m✔[39m[0m[90m $set nested property with numeric position[0m
2025-04-11T19:24:21.9149884Z     [32m  [32m✔[39m[0m[90m $set numeric element[0m
2025-04-11T19:24:21.9415266Z     [32m  [32m✔[39m[0m[90m $set with positional operator[0m
2025-04-11T19:24:21.9626318Z     [32m  [32m✔[39m[0m[90m $set with positional operator and array (gh-7106)[0m
2025-04-11T19:24:21.9688576Z [0m    merge()[0m
2025-04-11T19:24:21.9894989Z     [32m  [32m✔[39m[0m[90m copies populate() (gh-1790)[0m
2025-04-11T19:24:21.9957078Z [0m    Query#validate() (gh-7984)[0m
2025-04-11T19:24:22.0108168Z     [32m  [32m✔[39m[0m[90m middleware[0m
2025-04-11T19:24:22.0209839Z     [32m  [32m✔[39m[0m[90m pre("validate") errors (gh-7187)[0m
2025-04-11T19:24:22.0299161Z [0m    stack traces[0m
2025-04-11T19:24:22.0343860Z     [36m  - includes calling file for filter cast errors (gh-8691)[0m
2025-04-11T19:24:22.0404106Z [0m    clone[0m
2025-04-11T19:24:22.0620372Z     [32m  [32m✔[39m[0m[90m with findOne[0m
2025-04-11T19:24:22.0890537Z     [32m  [32m✔[39m[0m[90m with deleteOne[0m
2025-04-11T19:24:22.1144601Z     [32m  [32m✔[39m[0m[90m with updateOne[0m
2025-04-11T19:24:22.1440414Z     [32m  [32m✔[39m[0m[90m with distinct[0m
2025-04-11T19:24:22.1682349Z     [32m  [32m✔[39m[0m[90m with hooks (gh-12365)[0m
2025-04-11T19:24:22.1745533Z [0m    set()[0m
2025-04-11T19:24:22.1794517Z     [32m  [32m✔[39m[0m[90m overwrites top-level keys if setting to undefined (gh-12155)[0m
2025-04-11T19:24:22.1881083Z [0m    schemaLevelProjections (gh-11474)[0m
2025-04-11T19:24:22.2034018Z     [32m  [32m✔[39m[0m[90m disables schema-level select: false[0m
2025-04-11T19:24:22.2229097Z     [32m  [32m✔[39m[0m[90m disables schema-level select: true[0m
2025-04-11T19:24:22.2426843Z     [32m  [32m✔[39m[0m[90m works via setOptions()[0m
2025-04-11T19:24:22.2615571Z     [32m  [32m✔[39m[0m[90m disabled via truthy value[0m
2025-04-11T19:24:22.2676786Z [0m    findById(andUpdate/andDelete)[0m
2025-04-11T19:24:22.2952023Z     [32m  [32m✔[39m[0m[90m findById returns null for undefined[0m
2025-04-11T19:24:22.3264208Z     [32m  [32m✔[39m[0m[90m findById returns document for valid _id[0m
2025-04-11T19:24:22.3596729Z     [32m  [32m✔[39m[0m[90m findByIdAndUpdate updates and returns the updated document[0m
2025-04-11T19:24:22.3934466Z     [32m  [32m✔[39m[0m[90m findByIdAndDelete deletes and returns the deleted document[0m
2025-04-11T19:24:22.4037898Z 
2025-04-11T19:24:22.4041201Z [0m  schema[0m
2025-04-11T19:24:22.4088367Z   [32m  [32m✔[39m[0m[90m can be created without the "new" keyword[0m
2025-04-11T19:24:22.4154480Z   [32m  [32m✔[39m[0m[90m does expose a property for duck-typing instanceof[0m
2025-04-11T19:24:22.4223353Z   [32m  [32m✔[39m[0m[90m supports different schematypes[0m
2025-04-11T19:24:22.4288813Z   [32m  [32m✔[39m[0m[90m supports dot notation for path accessors[0m
2025-04-11T19:24:22.4346710Z   [32m  [32m✔[39m[0m[90m allows paths nested > 2 levels[0m
2025-04-11T19:24:22.4409835Z   [32m  [32m✔[39m[0m[90m default definition[0m
2025-04-11T19:24:22.4468516Z   [32m  [32m✔[39m[0m[90m Mixed defaults can be empty arrays[0m
2025-04-11T19:24:22.4525678Z   [32m  [32m✔[39m[0m[90m methods declaration[0m
2025-04-11T19:24:22.4584590Z   [32m  [32m✔[39m[0m[90m static declaration[0m
2025-04-11T19:24:22.4643965Z   [32m  [32m✔[39m[0m[90m debugging msgs[0m
2025-04-11T19:24:22.4711500Z   [32m  [32m✔[39m[0m[90m required() with doc arrays (gh-3199)[0m
2025-04-11T19:24:22.4776242Z   [32m  [32m✔[39m[0m[90m custom typeKey in doc arrays (gh-3560)[0m
2025-04-11T19:24:22.4841975Z   [32m  [32m✔[39m[0m[90m required for single nested schemas (gh-3562)[0m
2025-04-11T19:24:22.4910795Z   [32m  [32m✔[39m[0m[90m booleans cause cast error for date (gh-3935)[0m
2025-04-11T19:24:22.4971648Z   [32m  [32m✔[39m[0m[90m trim: false works with strings (gh-4042)[0m
2025-04-11T19:24:22.5033249Z   [32m  [32m✔[39m[0m[90m arrays with typeKey (gh-4548)[0m
2025-04-11T19:24:22.5092253Z   [32m  [32m✔[39m[0m[90m arrays of mixed arrays (gh-5416)[0m
2025-04-11T19:24:22.5157959Z   [32m  [32m✔[39m[0m[90m throws a sane error if passing a schema to `ref` (gh-6915)[0m
2025-04-11T19:24:22.5216190Z   [32m  [32m✔[39m[0m[90m allows using ObjectId type as schema path (gh-7049)[0m
2025-04-11T19:24:22.5274579Z   [32m  [32m✔[39m[0m[90m throws error if invalid type (gh-7303)[0m
2025-04-11T19:24:22.5333000Z   [32m  [32m✔[39m[0m[90m supports _id: false in paths definition (gh-7480) (gh-7524)[0m
2025-04-11T19:24:22.5392574Z   [32m  [32m✔[39m[0m[90m schema.pathType() with positional path that isnt in schema (gh-7935)[0m
2025-04-11T19:24:22.5450465Z   [32m  [32m✔[39m[0m[90m supports pre(Array, Function) and post(Array, Function) (gh-7803)[0m
2025-04-11T19:24:22.5523959Z   [32m  [32m✔[39m[0m[90m supports array with { type: ObjectID } (gh-8034)[0m
2025-04-11T19:24:22.5583533Z   [32m  [32m✔[39m[0m[90m supports getting path under array (gh-8057)[0m
2025-04-11T19:24:22.5647759Z   [32m  [32m✔[39m[0m[90m required paths with clone() (gh-8111)[0m
2025-04-11T19:24:22.5758655Z   [32m  [32m✔[39m[0m[90m getters/setters with clone() (gh-8124)[0m
2025-04-11T19:24:22.5858531Z   [32m  [32m✔[39m[0m[90m required with nullish value (gh-8219)[0m
2025-04-11T19:24:22.5918560Z   [32m  [32m✔[39m[0m[90m SchemaStringOptions line up with schema/string (gh-8256)[0m
2025-04-11T19:24:22.5978913Z   [32m  [32m✔[39m[0m[90m supports passing schema options to `Schema#path()` (gh-8292)[0m
2025-04-11T19:24:22.6051970Z   [32m  [32m✔[39m[0m[90m supports defining `_id: false` on single nested paths (gh-8137)[0m
2025-04-11T19:24:22.6117390Z   [32m  [32m✔[39m[0m[90m supports defining `_id: false` on document arrays (gh-8450)[0m
2025-04-11T19:24:22.6179389Z   [32m  [32m✔[39m[0m[90m copies `.add()`-ed paths when calling `.add()` with a schema argument (gh-8429)[0m
2025-04-11T19:24:22.6239861Z   [32m  [32m✔[39m[0m[90m copies indexes when calling add() with schema instance (gh-12654)[0m
2025-04-11T19:24:22.6300017Z   [32m  [32m✔[39m[0m[90m disables `id` virtual if no `_id` path (gh-3936)[0m
2025-04-11T19:24:22.6360055Z   [32m  [32m✔[39m[0m[90m treats dotted paths with no parent as a nested path (gh-9020)[0m
2025-04-11T19:24:22.6420523Z   [32m  [32m✔[39m[0m[90m allows using `mongoose.Schema.Types.Array` as type (gh-9194)[0m
2025-04-11T19:24:22.6481543Z   [32m  [32m✔[39m[0m[90m handles using a schematype when defining a path (gh-9370)[0m
2025-04-11T19:24:22.6543187Z   [32m  [32m✔[39m[0m[90m applies correct schema to nested primitive arrays (gh-9429)[0m
2025-04-11T19:24:22.6605308Z   [32m  [32m✔[39m[0m[90m supports `of` for array type definition (gh-9564)[0m
2025-04-11T19:24:22.6671571Z   [32m  [32m✔[39m[0m[90m should use the top-most class's getter/setter gh-8892[0m
2025-04-11T19:24:22.6807846Z   [32m  [32m✔[39m[0m[90m handles loadClass with inheritted getters (gh-9975)[0m
2025-04-11T19:24:22.6871056Z   [32m  [32m✔[39m[0m[90m loadClass with static getter (gh-10436)[0m
2025-04-11T19:24:22.6933408Z   [32m  [32m✔[39m[0m[90m supports setting `ref` on array SchemaType (gh-10029)[0m
2025-04-11T19:24:22.6996332Z   [32m  [32m✔[39m[0m[90m path() gets single nested paths within document arrays (gh-10164)[0m
2025-04-11T19:24:22.7060400Z   [32m  [32m✔[39m[0m[90m supports creating nested paths underneath document arrays (gh-10193)[0m
2025-04-11T19:24:22.7119117Z   [32m  [32m✔[39m[0m[90m propagates map `ref` down to individual map elements (gh-10329)[0m
2025-04-11T19:24:22.7179658Z   [32m  [32m✔[39m[0m[90m handles maps of maps (gh-10644)[0m
2025-04-11T19:24:22.7243275Z   [32m  [32m✔[39m[0m[90m handles `type: { subpath: String }` in document array definitions (gh-10750)[0m
2025-04-11T19:24:22.7303924Z   [32m  [32m✔[39m[0m[90m handles `Date` with `type` (gh-10807)[0m
2025-04-11T19:24:22.7474271Z   [32m  [32m✔[39m[0m[90m setting path with `Mixed` type to an array after number (gh-11417)[0m
2025-04-11T19:24:22.7877922Z   [32m  [32m✔[39m[0m[90m sets an _applyDiscriminators property on the schema and add discriminator to appropriate model (gh-7971)[0m
2025-04-11T19:24:22.8060388Z   [32m  [32m✔[39m[0m[90m supports numbers with Schema.discriminator() (gh-13788)[0m
2025-04-11T19:24:22.8223872Z   [32m  [32m✔[39m[0m[90m can use on as a schema property (gh-11580)[0m
2025-04-11T19:24:22.8292014Z   [32m  [32m✔[39m[0m[90m disallows using schemas with schema-level projections with map subdocuments (gh-11698)[0m
2025-04-11T19:24:22.8474178Z   [32m  [32m✔[39m[0m[90m allows a lean option on schemas so that all documents are lean when running a query (gh-10090)[0m
2025-04-11T19:24:22.8536538Z   [32m  [32m✔[39m[0m[90m disallows setting special properties with `add()` or constructor (gh-12085)[0m
2025-04-11T19:24:22.8605366Z   [32m  [32m✔[39m[0m[90m enable defining virtual paths by using schema constructor (gh-11908)[0m
2025-04-11T19:24:22.8664311Z   [32m  [32m✔[39m[0m[90m allows defining ObjectIds and Decimal128s using Types.* (gh-12205)[0m
2025-04-11T19:24:22.8724716Z   [32m  [32m✔[39m[0m[90m _getSchema finds path underneath nested subdocument with map of mixed (gh-12530)[0m
2025-04-11T19:24:22.8786925Z   [32m  [32m✔[39m[0m[90m should not allow to create a path with primitive values (gh-7558)[0m
2025-04-11T19:24:22.8849132Z   [32m  [32m✔[39m[0m[90m should allow deleting a virtual path off the schema gh-8397[0m
2025-04-11T19:24:22.8958124Z   [32m  [32m✔[39m[0m[90m should allow deleting multiple virtuals gh-8397[0m
2025-04-11T19:24:22.9079262Z   [32m  [32m✔[39m[0m[90m should throw an error if attempting to delete a virtual path that does not exist gh-8397[0m
2025-04-11T19:24:22.9147188Z   [32m  [32m✔[39m[0m[90m should throw an error if using schema with "timeseries" option as a nested schema[0m
2025-04-11T19:24:22.9324644Z   [32m  [32m✔[39m[0m[90m should allow timestamps on a sub document when having _id field in the main document gh-13343[0m
2025-04-11T19:24:22.9492547Z   [32m  [32m✔[39m[0m[90m should not save objectids as strings when using the `flattenObjectIds` option (gh-13648)[0m
2025-04-11T19:24:22.9553970Z   [32m  [32m✔[39m[0m[90m deduplicates idGetter (gh-14457)[0m
2025-04-11T19:24:22.9628742Z   [32m  [32m✔[39m[0m[90m handles recursive definitions in discriminators (gh-13978)[0m
2025-04-11T19:24:22.9834204Z   [32m  [32m✔[39m[0m[90m handles recursive definitions of arrays in discriminators (gh-14055)[0m
2025-04-11T19:24:23.0026476Z   [32m  [32m✔[39m[0m[90m should have the correct schema definition with array schemas (gh-14416)[0m
2025-04-11T19:24:23.0248708Z   [32m  [32m✔[39m[0m[90m handles discriminator options with Schema.prototype.discriminator (gh-14448)[0m
2025-04-11T19:24:23.0327441Z   [32m  [32m✔[39m[0m[90m supports schema-level readConcern (gh-14511)[0m
2025-04-11T19:24:23.0448160Z   [32m  [32m✔[39m[0m[90m supports casting object to subdocument (gh-14748) (gh-9076)[0m
2025-04-11T19:24:23.0516453Z   [32m  [32m✔[39m[0m[90m throws "already has an index" error if duplicate index definition (gh-15056)[0m
2025-04-11T19:24:23.1916466Z   [32m  [32m✔[39m[0m[90m path() clears existing child schemas (gh-15253)[0m[31m (134ms)[0m
2025-04-11T19:24:23.1961358Z [0m    nested fields with same name[0m
2025-04-11T19:24:23.2100989Z     [32m  [32m✔[39m[0m[90m don't disappear[0m
2025-04-11T19:24:23.2161717Z [0m    casting[0m
2025-04-11T19:24:23.2207131Z     [32m  [32m✔[39m[0m[90m number[0m
2025-04-11T19:24:23.2288060Z     [32m  [32m✔[39m[0m[90m date[0m
2025-04-11T19:24:23.2369303Z     [32m  [32m✔[39m[0m[90m objectid[0m
2025-04-11T19:24:23.2455969Z     [32m  [32m✔[39m[0m[90m array[0m
2025-04-11T19:24:23.2546969Z     [32m  [32m✔[39m[0m[90m array of arrays[0m
2025-04-11T19:24:23.2627698Z     [32m  [32m✔[39m[0m[90m boolean[0m
2025-04-11T19:24:23.2674158Z [0m      string[0m
2025-04-11T19:24:23.2729850Z       [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:23.2808873Z [0m    setters[0m
2025-04-11T19:24:23.2853864Z     [32m  [32m✔[39m[0m[90m work[0m
2025-04-11T19:24:23.2934744Z     [32m  [32m✔[39m[0m[90m order[0m
2025-04-11T19:24:23.3016878Z     [32m  [32m✔[39m[0m[90m scope[0m
2025-04-11T19:24:23.3096890Z     [32m  [32m✔[39m[0m[90m casting[0m
2025-04-11T19:24:23.3176427Z     [32m  [32m✔[39m[0m[90m applying when none have been defined[0m
2025-04-11T19:24:23.3256950Z     [32m  [32m✔[39m[0m[90m assignment of non-functions throw[0m
2025-04-11T19:24:23.3302857Z [0m      array[0m
2025-04-11T19:24:23.3359774Z       [32m  [32m✔[39m[0m[90m object setters will be applied for each object in array[0m
2025-04-11T19:24:23.3426851Z [0m      string[0m
2025-04-11T19:24:23.3482288Z       [32m  [32m✔[39m[0m[90m lowercase[0m
2025-04-11T19:24:23.3584460Z       [32m  [32m✔[39m[0m[90m uppercase[0m
2025-04-11T19:24:23.3675287Z       [32m  [32m✔[39m[0m[90m trim[0m
2025-04-11T19:24:23.3755297Z [0m    getters[0m
2025-04-11T19:24:23.3800517Z     [32m  [32m✔[39m[0m[90m work[0m
2025-04-11T19:24:23.3880590Z     [32m  [32m✔[39m[0m[90m order[0m
2025-04-11T19:24:23.3960542Z     [32m  [32m✔[39m[0m[90m scope[0m
2025-04-11T19:24:23.4039792Z     [32m  [32m✔[39m[0m[90m casting[0m
2025-04-11T19:24:23.4119160Z     [32m  [32m✔[39m[0m[90m applying when none have been defined[0m
2025-04-11T19:24:23.4199603Z     [32m  [32m✔[39m[0m[90m assignment of non-functions throw[0m
2025-04-11T19:24:23.4280430Z     [32m  [32m✔[39m[0m[90m auto _id[0m
2025-04-11T19:24:23.4336551Z [0m    indexes[0m
2025-04-11T19:24:23.4347287Z [0m      definition[0m
2025-04-11T19:24:23.4410885Z       [32m  [32m✔[39m[0m[90m basic[0m
2025-04-11T19:24:23.4513861Z       [32m  [32m✔[39m[0m[90m compound[0m
2025-04-11T19:24:23.4615485Z       [32m  [32m✔[39m[0m[90m compound based on name (gh-6499)[0m
2025-04-11T19:24:23.4716981Z       [32m  [32m✔[39m[0m[90m using "ascending" and "descending" for order (gh-13725)[0m
2025-04-11T19:24:23.4822290Z       [32m  [32m✔[39m[0m[90m with single nested doc (gh-6113)[0m
2025-04-11T19:24:23.4929653Z       [32m  [32m✔[39m[0m[90m with embedded discriminator (gh-6485)[0m
2025-04-11T19:24:23.4996902Z [0m    plugins[0m
2025-04-11T19:24:23.5042645Z     [32m  [32m✔[39m[0m[90m work[0m
2025-04-11T19:24:23.5123110Z     [32m  [32m✔[39m[0m[90m options param (gh-12077)[0m
2025-04-11T19:24:23.5179499Z [0m    options[0m
2025-04-11T19:24:23.5224203Z     [32m  [32m✔[39m[0m[90m defaults are set[0m
2025-04-11T19:24:23.5297054Z     [32m  [32m✔[39m[0m[90m setting[0m
2025-04-11T19:24:23.5353873Z [0m    virtuals[0m
2025-04-11T19:24:23.5398841Z     [32m  [32m✔[39m[0m[90m works[0m
2025-04-11T19:24:23.5444871Z [0m      id[0m
2025-04-11T19:24:23.5500678Z       [32m  [32m✔[39m[0m[90m default creation of id can be overridden (gh-298)[0m
2025-04-11T19:24:23.5609228Z       [32m  [32m✔[39m[0m[90m disabling[0m
2025-04-11T19:24:23.5677053Z [0m      getter[0m
2025-04-11T19:24:23.5733173Z       [32m  [32m✔[39m[0m[90m scope[0m
2025-04-11T19:24:23.5800895Z [0m      setter[0m
2025-04-11T19:24:23.5856840Z       [32m  [32m✔[39m[0m[90m scope[0m
2025-04-11T19:24:23.5936141Z [0m    other contexts[0m
2025-04-11T19:24:23.5980900Z     [36m  - work[0m
2025-04-11T19:24:23.6038166Z [0m    #add()[0m
2025-04-11T19:24:23.6088738Z     [32m  [32m✔[39m[0m[90m does not pollute existing paths[0m
2025-04-11T19:24:23.6170328Z     [32m  [32m✔[39m[0m[90m returns the schema instance[0m
2025-04-11T19:24:23.6251070Z     [32m  [32m✔[39m[0m[90m returns the schema instance when schema instance is passed[0m
2025-04-11T19:24:23.6437175Z     [32m  [32m✔[39m[0m[90m merging nested objects (gh-662)[0m
2025-04-11T19:24:23.6524001Z     [32m  [32m✔[39m[0m[90m prefix (gh-1730)[0m
2025-04-11T19:24:23.6608162Z     [32m  [32m✔[39m[0m[90m adds another schema (gh-6897)[0m
2025-04-11T19:24:23.6692387Z     [32m  [32m✔[39m[0m[90m overwrites existing paths (gh-10203)[0m
2025-04-11T19:24:23.6751443Z [0m    construction[0m
2025-04-11T19:24:23.6805753Z     [32m  [32m✔[39m[0m[90m array of object literal missing a type is interpreted as DocumentArray[0m
2025-04-11T19:24:23.6894327Z     [32m  [32m✔[39m[0m[90m array of object literal with type.type is interpreted as DocumentArray[0m
2025-04-11T19:24:23.6983022Z     [32m  [32m✔[39m[0m[90m does not alter original argument (gh-1364)[0m
2025-04-11T19:24:23.7183318Z     [32m  [32m✔[39m[0m[90m properly gets value of plain objects when dealing with refs (gh-1606)[0m
2025-04-11T19:24:23.7273061Z     [32m  [32m✔[39m[0m[90m array of of schemas and objects (gh-7218)[0m
2025-04-11T19:24:23.7354129Z     [32m  [32m✔[39m[0m[90m copies options from array of schemas[0m
2025-04-11T19:24:23.7435860Z     [32m  [32m✔[39m[0m[90m propagates typeKey down to implicitly created single nested schemas (gh-13154)[0m
2025-04-11T19:24:23.7492676Z [0m    property names[0m
2025-04-11T19:24:23.7553234Z     [32m  [32m✔[39m[0m[90m that do not conflict do not throw[0m
2025-04-11T19:24:23.7601116Z [0m      reserved keys are log a warning (gh-9010)[0m
2025-04-11T19:24:23.7662246Z       [32m  [32m✔[39m[0m[90m `emit` when used as a schema path logs a warning[0m
2025-04-11T19:24:23.7766943Z       [32m  [32m✔[39m[0m[90m `emit` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-11T19:24:23.7871176Z       [32m  [32m✔[39m[0m[90m `listeners` when used as a schema path logs a warning[0m
2025-04-11T19:24:23.7974319Z       [32m  [32m✔[39m[0m[90m `listeners` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-11T19:24:23.8077641Z       [32m  [32m✔[39m[0m[90m `removeListener` when used as a schema path logs a warning[0m
2025-04-11T19:24:23.8180961Z       [32m  [32m✔[39m[0m[90m `removeListener` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-11T19:24:23.8283848Z       [32m  [32m✔[39m[0m[90m `errors` when used as a schema path logs a warning[0m
2025-04-11T19:24:23.8377145Z       [32m  [32m✔[39m[0m[90m `errors` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-11T19:24:23.8480392Z       [32m  [32m✔[39m[0m[90m `get` when used as a schema path logs a warning[0m
2025-04-11T19:24:23.8583650Z       [32m  [32m✔[39m[0m[90m `get` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-11T19:24:23.8690907Z       [32m  [32m✔[39m[0m[90m `init` when used as a schema path logs a warning[0m
2025-04-11T19:24:23.8794090Z       [32m  [32m✔[39m[0m[90m `init` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-11T19:24:23.8896979Z       [32m  [32m✔[39m[0m[90m `isModified` when used as a schema path logs a warning[0m
2025-04-11T19:24:23.8999920Z       [32m  [32m✔[39m[0m[90m `isModified` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-11T19:24:23.9102657Z       [32m  [32m✔[39m[0m[90m `isNew` when used as a schema path logs a warning[0m
2025-04-11T19:24:23.9205753Z       [32m  [32m✔[39m[0m[90m `isNew` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-11T19:24:23.9309278Z       [32m  [32m✔[39m[0m[90m `populated` when used as a schema path logs a warning[0m
2025-04-11T19:24:23.9412473Z       [32m  [32m✔[39m[0m[90m `populated` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-11T19:24:23.9514634Z       [32m  [32m✔[39m[0m[90m `remove` when used as a schema path logs a warning[0m
2025-04-11T19:24:23.9617097Z       [32m  [32m✔[39m[0m[90m `remove` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-11T19:24:23.9719788Z       [32m  [32m✔[39m[0m[90m `save` when used as a schema path logs a warning[0m
2025-04-11T19:24:23.9823128Z       [32m  [32m✔[39m[0m[90m `save` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-11T19:24:23.9924692Z       [32m  [32m✔[39m[0m[90m `toObject` when used as a schema path logs a warning[0m
2025-04-11T19:24:24.0017990Z       [32m  [32m✔[39m[0m[90m `toObject` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-11T19:24:24.0121657Z       [32m  [32m✔[39m[0m[90m `validate` when used as a schema path logs a warning[0m
2025-04-11T19:24:24.0224082Z       [32m  [32m✔[39m[0m[90m `validate` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-11T19:24:24.0301569Z [0m    pathType()[0m
2025-04-11T19:24:24.0353448Z     [32m  [32m✔[39m[0m[90m handles maps (gh-7448) (gh-7464)[0m
2025-04-11T19:24:24.0409852Z [0m      when called on an explicit real path[0m
2025-04-11T19:24:24.0464884Z       [32m  [32m✔[39m[0m[90m returns "real"[0m
2025-04-11T19:24:24.0521544Z [0m      when called on a virtual[0m
2025-04-11T19:24:24.0576346Z       [32m  [32m✔[39m[0m[90m returns virtual[0m
2025-04-11T19:24:24.0644589Z [0m      when called on nested structure[0m
2025-04-11T19:24:24.0700062Z       [32m  [32m✔[39m[0m[90m returns nested[0m
2025-04-11T19:24:24.0767878Z [0m      when called on undefined path[0m
2025-04-11T19:24:24.0823658Z       [32m  [32m✔[39m[0m[90m returns adHocOrUndefined[0m
2025-04-11T19:24:24.0902372Z [0m    remove()[0m
2025-04-11T19:24:24.0951471Z     [32m  [32m✔[39m[0m[90m returns the schema instance[0m
2025-04-11T19:24:24.1030802Z     [32m  [32m✔[39m[0m[90m removes a single path[0m
2025-04-11T19:24:24.1109518Z     [32m  [32m✔[39m[0m[90m removes a nested path[0m
2025-04-11T19:24:24.1188933Z     [32m  [32m✔[39m[0m[90m removes all children of a nested path (gh-2398)[0m
2025-04-11T19:24:24.1268036Z     [32m  [32m✔[39m[0m[90m removes an array of paths[0m
2025-04-11T19:24:24.1350617Z     [32m  [32m✔[39m[0m[90m works properly with virtuals (gh-2398)[0m
2025-04-11T19:24:24.1431983Z     [32m  [32m✔[39m[0m[90m methods named toString (gh-4551)[0m
2025-04-11T19:24:24.1512553Z     [32m  [32m✔[39m[0m[90m handles default value = 0 (gh-4620)[0m
2025-04-11T19:24:24.1598977Z     [32m  [32m✔[39m[0m[90m type: childSchema (gh-5521)[0m
2025-04-11T19:24:24.1681170Z     [32m  [32m✔[39m[0m[90m Decimal128 type (gh-4759)[0m
2025-04-11T19:24:24.1765613Z     [32m  [32m✔[39m[0m[90m childSchemas prop (gh-5695)[0m
2025-04-11T19:24:24.1811701Z [0m      clone()[0m
2025-04-11T19:24:24.1867766Z       [32m  [32m✔[39m[0m[90m copies methods, statics, and query helpers (gh-5752)[0m
2025-04-11T19:24:24.1969464Z       [32m  [32m✔[39m[0m[90m copies validators declared with validate() (gh-5607)[0m
2025-04-11T19:24:24.2071720Z       [32m  [32m✔[39m[0m[90m copies virtuals (gh-6133)[0m
2025-04-11T19:24:24.2178658Z       [32m  [32m✔[39m[0m[90m with nested virtuals (gh-6274)[0m
2025-04-11T19:24:24.2298947Z       [32m  [32m✔[39m[0m[90m with alternative option syntaxes (gh-6274)[0m
2025-04-11T19:24:24.2421292Z       [32m  [32m✔[39m[0m[90m copies base for using custom types after cloning (gh-7377)[0m
2025-04-11T19:24:24.2524072Z       [32m  [32m✔[39m[0m[90m clones schema types (gh-7537)[0m
2025-04-11T19:24:24.2628582Z       [32m  [32m✔[39m[0m[90m correctly copies all child schemas (gh-7537)[0m
2025-04-11T19:24:24.2746274Z       [32m  [32m✔[39m[0m[90m copies single embedded discriminators (gh-7894)[0m
2025-04-11T19:24:24.2872378Z       [32m  [32m✔[39m[0m[90m copies array discriminators (gh-7954)[0m
2025-04-11T19:24:24.2977245Z       [32m  [32m✔[39m[0m[90m uses Mongoose instance's Schema constructor (gh-9426)[0m
2025-04-11T19:24:24.3084533Z       [32m  [32m✔[39m[0m[90m avoids creating duplicate array constructors when cloning doc array underneath subdoc (gh-13626)[0m
2025-04-11T19:24:24.3164697Z [0m    pick() (gh-8207)[0m
2025-04-11T19:24:24.3213563Z     [32m  [32m✔[39m[0m[90m works with nested paths[0m
2025-04-11T19:24:24.3297819Z     [32m  [32m✔[39m[0m[90m with single nested paths[0m
2025-04-11T19:24:24.3356468Z [0m    omit() (gh-12931)[0m
2025-04-11T19:24:24.3404841Z     [32m  [32m✔[39m[0m[90m works with nested paths[0m
2025-04-11T19:24:24.3489386Z     [32m  [32m✔[39m[0m[90m with single nested paths[0m
2025-04-11T19:24:24.3548214Z [0m    path-level custom cast (gh-8300)[0m
2025-04-11T19:24:24.3598239Z     [32m  [32m✔[39m[0m[90m with numbers[0m
2025-04-11T19:24:24.3684046Z     [32m  [32m✔[39m[0m[90m with function cast error format[0m
2025-04-11T19:24:24.3767395Z     [32m  [32m✔[39m[0m[90m with objectids[0m
2025-04-11T19:24:24.3851000Z     [32m  [32m✔[39m[0m[90m with boolean[0m
2025-04-11T19:24:24.3909674Z [0m    gh-8849[0m
2025-04-11T19:24:24.4084491Z     [32m  [32m✔[39m[0m[90m treats `select: undefined` as not specifying `select` option[0m
2025-04-11T19:24:24.4277081Z     [32m  [32m✔[39m[0m[90m treats `select: null` as not specifying `select` option[0m
2025-04-11T19:24:24.4337235Z [0m    mongoose.set(`strictQuery`, value); (gh-6658)[0m
2025-04-11T19:24:24.4382949Z     [32m  [32m✔[39m[0m[90m setting `strictQuery` on base sets strictQuery to schema (gh-6658)[0m
2025-04-11T19:24:24.4463186Z     [32m  [32m✔[39m[0m[90m `strictQuery` set on base gets overwritten by option set on schema (gh-6658)[0m
2025-04-11T19:24:24.4519908Z [0m    cast option (gh-8407)[0m
2025-04-11T19:24:24.4572264Z     [32m  [32m✔[39m[0m[90m disable casting using `false`[0m
2025-04-11T19:24:24.4655650Z     [32m  [32m✔[39m[0m[90m custom casters[0m
2025-04-11T19:24:24.4715511Z [0m    jsonSchema() (gh-11162)[0m
2025-04-11T19:24:24.5139456Z     [32m  [32m✔[39m[0m[90m handles basic example with only top-level keys[0m[33m (38ms)[0m
2025-04-11T19:24:24.5253798Z     [32m  [32m✔[39m[0m[90m handles all primitive data types[0m
2025-04-11T19:24:24.5582482Z     [32m  [32m✔[39m[0m[90m handles arrays and document arrays[0m
2025-04-11T19:24:24.5850696Z     [32m  [32m✔[39m[0m[90m handles nested paths and subdocuments[0m
2025-04-11T19:24:24.6149515Z     [32m  [32m✔[39m[0m[90m handles maps[0m
2025-04-11T19:24:24.6254264Z     [32m  [32m✔[39m[0m[90m handles map with required element[0m
2025-04-11T19:24:24.6342801Z     [32m  [32m✔[39m[0m[90m handles required enums[0m
2025-04-11T19:24:24.6431010Z     [32m  [32m✔[39m[0m[90m throws error on mixed type[0m
2025-04-11T19:24:24.6518448Z 
2025-04-11T19:24:24.6792248Z 
2025-04-11T19:24:24.6792875Z [92m [0m[32m 3731 passing[0m[90m (1m)[0m
2025-04-11T19:24:24.6793473Z [36m [0m[36m 59 pending[0m
2025-04-11T19:24:24.6793817Z [31m  2 failing[0m
2025-04-11T19:24:24.6793970Z 
2025-04-11T19:24:24.6796461Z [0m  1) connections:
2025-04-11T19:24:24.6797358Z        creates collection if creating model while connection is disconnected with bufferCommands=false:
2025-04-11T19:24:24.6798944Z [0m[31m     AssertionError [ERR_ASSERTION]: {
2025-04-11T19:24:24.6799561Z   _id: new ObjectId('67f96c41950a667dbe9c86fa'),
2025-04-11T19:24:24.6800357Z   myDate: 2022-06-01T00:00:00.000Z,
2025-04-11T19:24:24.6800798Z   __v: 0
2025-04-11T19:24:24.6801229Z } == null[0m[90m
2025-04-11T19:24:24.6801841Z       at new AssertionError (ext:deno_node/assertion_error.ts:412:11)
2025-04-11T19:24:24.6802485Z       at toNode (node:assert:37:15)
2025-04-11T19:24:24.6802988Z       at Function.equal (node:assert:177:3)
2025-04-11T19:24:24.6803605Z       at Context.<anonymous> (file:///home/runner/work/mongoose/mongoose/test/connection.test.js:1597:12)
2025-04-11T19:24:24.6804158Z       at Object.runMicrotasks (ext:core/01_core.js:686:26)
2025-04-11T19:24:24.6804796Z       at processTicksAndRejections (ext:deno_node/_next_tick.ts:59:10)
2025-04-11T19:24:24.6805412Z       at runNextTicks (ext:deno_node/_next_tick.ts:76:3)
2025-04-11T19:24:24.6805990Z       at eventLoopTick (ext:core/01_core.js:184:21)
2025-04-11T19:24:24.6806499Z [0m
2025-04-11T19:24:24.6806825Z [0m  2) Int32
2025-04-11T19:24:24.6807121Z        mongoDB integration
2025-04-11T19:24:24.6807468Z          supports populate():
2025-04-11T19:24:24.6808709Z [0m[31m     MongoServerError: E11000 duplicate key error collection: mongoose_test.Child index: _id_ dup key: { _id: 42 }[0m[90m
2025-04-11T19:24:24.6810427Z       at InsertOneOperation.execute (file:///home/runner/work/mongoose/mongoose/node_modules/mongodb/lib/operations/insert.js:51:19)
2025-04-11T19:24:24.6811450Z       at eventLoopTick (ext:core/01_core.js:177:7)
2025-04-11T19:24:24.6812555Z       at async tryOperation (file:///home/runner/work/mongoose/mongoose/node_modules/mongodb/lib/operations/execute_operation.js:207:20)
2025-04-11T19:24:24.6814165Z       at async executeOperation (file:///home/runner/work/mongoose/mongoose/node_modules/mongodb/lib/operations/execute_operation.js:75:16)
2025-04-11T19:24:24.6815691Z       at async Collection.insertOne (file:///home/runner/work/mongoose/mongoose/node_modules/mongodb/lib/collection.js:157:16)
2025-04-11T19:24:24.6816579Z [0m
2025-04-11T19:24:24.6816733Z 
2025-04-11T19:24:24.6816741Z 
2025-04-11T19:24:25.3516363Z ##[error]Process completed with exit code 1.
2025-04-11T19:24:25.3592092Z Post job cleanup.
2025-04-11T19:24:25.4529762Z [command]/usr/bin/git version
2025-04-11T19:24:25.4569737Z git version 2.49.0
2025-04-11T19:24:25.4612412Z Temporarily overriding HOME='/home/runner/work/_temp/c825c3f4-a9f0-4287-b7c8-3237ff97ad9e' before making global git config changes
2025-04-11T19:24:25.4613537Z Adding repository directory to the temporary git global config as a safe directory
2025-04-11T19:24:25.4624527Z [command]/usr/bin/git config --global --add safe.directory /home/runner/work/mongoose/mongoose
2025-04-11T19:24:25.4656879Z [command]/usr/bin/git config --local --name-only --get-regexp core\.sshCommand
2025-04-11T19:24:25.4688725Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :"
2025-04-11T19:24:25.4918039Z [command]/usr/bin/git config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
2025-04-11T19:24:25.4937595Z http.https://github.com/.extraheader
2025-04-11T19:24:25.4950997Z [command]/usr/bin/git config --local --unset-all http.https://github.com/.extraheader
2025-04-11T19:24:25.4981549Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :"
2025-04-11T19:24:25.5298134Z Cleaning up orphan processes
