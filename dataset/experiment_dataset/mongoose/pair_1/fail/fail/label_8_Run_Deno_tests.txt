2025-04-11T19:23:02.3480658Z ##[group]Run npm run test-deno
2025-04-11T19:23:02.3481020Z [36;1mnpm run test-deno[0m
2025-04-11T19:23:02.3538973Z shell: /usr/bin/bash -e {0}
2025-04-11T19:23:02.3539220Z env:
2025-04-11T19:23:02.3539401Z   MONGOMS_VERSION: 6.0.15
2025-04-11T19:23:02.3539634Z   MONGOMS_PREFER_GLOBAL_PATH: 1
2025-04-11T19:23:02.3539871Z   FORCE_COLOR: true
2025-04-11T19:23:02.3540068Z ##[endgroup]
2025-04-11T19:23:02.4618479Z 
2025-04-11T19:23:02.4619090Z > mongoose@8.13.2 test-deno
2025-04-11T19:23:02.4619954Z > deno run --allow-env --allow-read --allow-net --allow-run --allow-sys --allow-write ./test/deno.js
2025-04-11T19:23:02.4620689Z 
2025-04-11T19:23:03.1844767Z [0m[32mDownload[0m https://deno.land/std/flags/mod.ts
2025-04-11T19:23:03.5164896Z [0m[33mWarning[0m Implicitly using latest version (0.224.0) for https://deno.land/std/flags/mod.ts
2025-04-11T19:23:03.5166806Z [0m[32mDownload[0m https://deno.land/std@0.224.0/flags/mod.ts
2025-04-11T19:23:03.5334837Z [0m[32mDownload[0m https://deno.land/std@0.224.0/assert/assert_exists.ts
2025-04-11T19:23:03.5845173Z [0m[32mDownload[0m https://deno.land/std@0.224.0/assert/assertion_error.ts
2025-04-11T19:23:04.1047504Z [31m
2025-04-11T19:23:04.1048051Z You're not testing shards!
2025-04-11T19:23:04.1049906Z Please set the MONGOOSE_SHARD_TEST_URI env variable.
2025-04-11T19:23:04.1050895Z e.g: `mongodb://127.0.0.1:27017/database
2025-04-11T19:23:04.1051592Z Sharding must already be enabled on your database
2025-04-11T19:23:04.1052520Z [39m
2025-04-11T19:23:04.1772957Z 
2025-04-11T19:23:04.1816375Z [0m[0m
2025-04-11T19:23:04.2475480Z [0m  SchemaDate[0m
2025-04-11T19:23:04.2566751Z   [32m  [32mâœ”[39m[0m[90m accepts a Date[0m
2025-04-11T19:23:04.2613203Z   [32m  [32mâœ”[39m[0m[90m casts a date string to a string[0m
2025-04-11T19:23:04.2659178Z   [32m  [32mâœ”[39m[0m[90m interprets a number as a unix timestamp[0m
2025-04-11T19:23:04.2705853Z   [32m  [32mâœ”[39m[0m[90m attempts to interpret a string as a Date, not a timestamo (gh-5395)[0m
2025-04-11T19:23:04.2751928Z   [32m  [32mâœ”[39m[0m[90m casts any object with a `.valueOf` function to a date[0m
2025-04-11T19:23:04.2798362Z   [32m  [32mâœ”[39m[0m[90m casts string representation of unix timestamps (gh-6443)[0m
2025-04-11T19:23:04.2831317Z 
2025-04-11T19:23:04.2832469Z [0m  sharding[0m
2025-04-11T19:23:04.2869856Z   [32m  [32mâœ”[39m[0m[90m should handle shard keys properly (gh-2127)[0m
2025-04-11T19:23:04.2901940Z 
2025-04-11T19:23:04.2902367Z [0m  toObject()[0m
2025-04-11T19:23:04.2945753Z   [32m  [32mâœ”[39m[0m[90m should inherit options from schema[0m
2025-04-11T19:23:04.2991257Z   [32m  [32mâœ”[39m[0m[90m can overwrite schema-set default options[0m
2025-04-11T19:23:04.3037271Z   [32m  [32mâœ”[39m[0m[90m doesnt crash with empty object (gh-3130)[0m
2025-04-11T19:23:04.3069371Z 
2025-04-11T19:23:04.3069939Z [0m  VirtualType[0m
2025-04-11T19:23:04.3081606Z [0m    clone[0m
2025-04-11T19:23:04.3126933Z     [32m  [32mâœ”[39m[0m[90m copies path and options correctly (gh-8587)[0m
2025-04-11T19:23:04.3180466Z 
2025-04-11T19:23:04.3181248Z [0m  model: findByIdAndUpdate:[0m
2025-04-11T19:23:04.3601673Z   [32m  [32mâœ”[39m[0m[90m returns the edited document with previous and target discriminators types defined[0m
2025-04-11T19:23:04.3812722Z   [32m  [32mâœ”[39m[0m[90m returns the edited document with only previous discriminator type defined[0m
2025-04-11T19:23:04.3897400Z 
2025-04-11T19:23:04.3898220Z [0m  ValidationError[0m
2025-04-11T19:23:04.3935326Z   [32m  [32mâœ”[39m[0m[90m JSON.stringify() with message (gh-5309) (gh-9296)[0m
2025-04-11T19:23:04.3979370Z   [32m  [32mâœ”[39m[0m[90m default error message[0m
2025-04-11T19:23:04.4066547Z   [32m  [32mâœ”[39m[0m[90m should have error name in Cast error gh-10166[0m
2025-04-11T19:23:04.4088579Z [0m    #infiniteRecursion[0m
2025-04-11T19:23:04.4161211Z     [32m  [32mâœ”[39m[0m[90m does not cause RangeError (gh-1834)[0m
2025-04-11T19:23:04.4204834Z [0m    #minDate[0m
2025-04-11T19:23:04.4262160Z     [32m  [32mâœ”[39m[0m[90m causes a validation error[0m
2025-04-11T19:23:04.4306250Z [0m    #maxDate[0m
2025-04-11T19:23:04.4359381Z     [32m  [32mâœ”[39m[0m[90m causes a validation error[0m
2025-04-11T19:23:04.4403130Z [0m    #minLength[0m
2025-04-11T19:23:04.4456933Z     [32m  [32mâœ”[39m[0m[90m causes a validation error[0m
2025-04-11T19:23:04.4530039Z     [32m  [32mâœ”[39m[0m[90m with correct error message (gh-4207)[0m
2025-04-11T19:23:04.4574105Z [0m    #maxLength[0m
2025-04-11T19:23:04.4633327Z     [32m  [32mâœ”[39m[0m[90m causes a validation error[0m
2025-04-11T19:23:04.4676917Z [0m    #toString[0m
2025-04-11T19:23:04.4739061Z     [32m  [32mâœ”[39m[0m[90m does not cause RangeError (gh-1296)[0m
2025-04-11T19:23:04.4782339Z [0m    formatMessage[0m
2025-04-11T19:23:04.4826584Z     [32m  [32mâœ”[39m[0m[90m replaces properties in a message[0m
2025-04-11T19:23:04.4870042Z [0m    when user code defines a r/o Error#toJSON[0m
2025-04-11T19:23:04.4915389Z     [36m  - should not fail[0m
2025-04-11T19:23:04.4969807Z 
2025-04-11T19:23:04.4971833Z [0m  mongoose module:[0m
2025-04-11T19:23:04.5012098Z   [32m  [32mâœ”[39m[0m[90m legacy pluralize by default (gh-5958)[0m
2025-04-11T19:23:04.5057026Z   [32m  [32mâœ”[39m[0m[90m returns legacy pluralize function by default[0m
2025-04-11T19:23:04.5104521Z   [32m  [32mâœ”[39m[0m[90m sets custom pluralize function (gh-5877)[0m
2025-04-11T19:23:04.5269524Z   [32m  [32mâœ”[39m[0m[90m debug to stream (gh-7018)[0m
2025-04-11T19:23:04.5369233Z   [32m  [32mâœ”[39m[0m[90m should collect the args correctly gh-13364[0m
2025-04-11T19:23:04.5413650Z   [32m  [32mâœ”[39m[0m[90m {g,s}etting options[0m
2025-04-11T19:23:04.5462269Z   [32m  [32mâœ”[39m[0m[90m allows `const { model } = mongoose` (gh-3768)[0m
2025-04-11T19:23:04.5506524Z   [32m  [32mâœ”[39m[0m[90m options object (gh-8144)[0m
2025-04-11T19:23:04.5554545Z   [32m  [32mâœ”[39m[0m[90m bufferCommands option (gh-5879) (gh-9179)[0m
2025-04-11T19:23:04.5609420Z   [32m  [32mâœ”[39m[0m[90m cloneSchemas option (gh-6274)[0m
2025-04-11T19:23:04.5646910Z   [32m  [32mâœ”[39m[0m[90m supports disabling `id` via global plugin (gh-10701)[0m
2025-04-11T19:23:04.5692989Z   [32m  [32mâœ”[39m[0m[90m objectIdGetter option (gh-6588)[0m
2025-04-11T19:23:04.5791736Z   [32m  [32mâœ”[39m[0m[90m runValidators option (gh-6865) (gh-6578)[0m
2025-04-11T19:23:04.5858780Z   [32m  [32mâœ”[39m[0m[90m toJSON options (gh-6815)[0m
2025-04-11T19:23:04.5908820Z   [32m  [32mâœ”[39m[0m[90m toObject options (gh-6815)[0m
2025-04-11T19:23:04.5976982Z   [32m  [32mâœ”[39m[0m[90m strict option (gh-6858)[0m
2025-04-11T19:23:04.6208984Z   [32m  [32mâœ”[39m[0m[90m declaring global plugins (gh-5690)[0m
2025-04-11T19:23:04.6265264Z   [32m  [32mâœ”[39m[0m[90m declaring global plugins with tags (gh-9780)[0m
2025-04-11T19:23:04.6327749Z   [32m  [32mâœ”[39m[0m[90m global plugins on nested schemas underneath embedded discriminators (gh-7370)[0m
2025-04-11T19:23:04.6384467Z   [32m  [32mâœ”[39m[0m[90m global plugins with applyPluginsToDiscriminators (gh-7435)[0m
2025-04-11T19:23:04.6437210Z   [32m  [32mâœ”[39m[0m[90m global plugins with applyPluginsToChildSchemas (gh-13887)[0m
2025-04-11T19:23:04.6491001Z   [32m  [32mâœ”[39m[0m[90m global plugins recompile schemas (gh-7572)[0m
2025-04-11T19:23:04.6554893Z   [32m  [32mâœ”[39m[0m[90m top-level ObjectId, Decimal128, Mixed (gh-6760)[0m
2025-04-11T19:23:04.6765842Z   [32m  [32mâœ”[39m[0m[90m stubbing now() for timestamps (gh-6728)[0m
2025-04-11T19:23:04.6813584Z   [32m  [32mâœ”[39m[0m[90m isolates custom types between mongoose instances (gh-6933) (gh-7158)[0m
2025-04-11T19:23:04.6861257Z   [32m  [32mâœ”[39m[0m[90m throws an error on setting invalid options (gh-6899)[0m
2025-04-11T19:23:04.6910932Z   [32m  [32mâœ”[39m[0m[90m clones schema when instance of another Mongoose instance's Schema class (gh-11047)[0m
2025-04-11T19:23:04.6964046Z   [32m  [32mâœ”[39m[0m[90m deleteModel()[0m
2025-04-11T19:23:04.7010941Z   [32m  [32mâœ”[39m[0m[90m isValidObjectId (gh-3823)[0m
2025-04-11T19:23:04.7056456Z   [32m  [32mâœ”[39m[0m[90m isObjectIdOrHexString (gh-11419)[0m
2025-04-11T19:23:04.7359519Z   [32m  [32mâœ”[39m[0m[90m global `strictPopulate` works when false (gh-10694)[0m
2025-04-11T19:23:04.7538523Z   [32m  [32mâœ”[39m[0m[90m global `strictPopulate` works when true (gh-10694)[0m
2025-04-11T19:23:04.7703871Z   [32m  [32mâœ”[39m[0m[90m allows global `strictPopulate` to be overriden on specific queries set to true (gh-10694)[0m
2025-04-11T19:23:04.7924760Z   [32m  [32mâœ”[39m[0m[90m allows global `strictPopulate` to be overriden on specific queries set to false (gh-10694)[0m
2025-04-11T19:23:04.8030389Z   [32m  [32mâœ”[39m[0m[90m supports skipOriginalStackTraces option (gh-15194)[0m
2025-04-11T19:23:04.8051855Z [0m    default connection works[0m
2025-04-11T19:23:04.8131153Z     [32m  [32mâœ”[39m[0m[90m without options[0m
2025-04-11T19:23:04.8228469Z     [32m  [32mâœ”[39m[0m[90m with promise (gh-3790)[0m
2025-04-11T19:23:04.8271903Z [0m    disconnection of all connections[0m
2025-04-11T19:23:04.8352002Z     [32m  [32mâœ”[39m[0m[90m with callback[0m
2025-04-11T19:23:04.8453355Z     [32m  [32mâœ”[39m[0m[90m with promise (gh-3790)[0m
2025-04-11T19:23:04.8485937Z [0m      no callback[0m
2025-04-11T19:23:04.8604492Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:23:04.8669578Z [0m    model()[0m
2025-04-11T19:23:04.8715269Z     [32m  [32mâœ”[39m[0m[90m accessing a model that hasn't been defined[0m
2025-04-11T19:23:04.8789267Z     [32m  [32mâœ”[39m[0m[90m returns the model at creation[0m
2025-04-11T19:23:04.8860063Z     [32m  [32mâœ”[39m[0m[90m prevents overwriting pre-existing models[0m
2025-04-11T19:23:04.8930343Z     [32m  [32mâœ”[39m[0m[90m allows passing identical name + schema args[0m
2025-04-11T19:23:04.8999097Z     [32m  [32mâœ”[39m[0m[90m allows passing identical name+schema+collection args (gh-5767)[0m
2025-04-11T19:23:04.9065207Z     [32m  [32mâœ”[39m[0m[90m throws on unknown model name[0m
2025-04-11T19:23:04.9097626Z [0m      passing collection name[0m
2025-04-11T19:23:04.9108864Z [0m        when model name already exists[0m
2025-04-11T19:23:04.9180864Z         [32m  [32mâœ”[39m[0m[90m returns a new uncached model[0m
2025-04-11T19:23:04.9245597Z [0m      passing object literal schemas[0m
2025-04-11T19:23:04.9311876Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:23:04.9377016Z [0m    connecting with a signature of uri, options, function[0m
2025-04-11T19:23:04.9461302Z     [32m  [32mâœ”[39m[0m[90m with single mongod[0m
2025-04-11T19:23:04.9559283Z     [32m  [32mâœ”[39m[0m[90m with replica set[0m
2025-04-11T19:23:04.9602934Z [0m    exports[0m
2025-04-11T19:23:04.9648935Z     [32m  [32mâœ”[39m[0m[90m of module[0m
2025-04-11T19:23:04.9716956Z     [32m  [32mâœ”[39m[0m[90m of new Mongoose instances[0m
2025-04-11T19:23:04.9823673Z     [32m  [32mâœ”[39m[0m[90m of result from .connect() (gh-3940)[0m
2025-04-11T19:23:05.0939170Z     [32m  [32mâœ”[39m[0m[90m connect with url doesnt cause unhandled rejection (gh-6997)[0m[31m (105ms)[0m
2025-04-11T19:23:05.1176960Z     [32m  [32mâœ”[39m[0m[90m can set `setDefaultsOnInsert` as a global option (gh-9032)[0m
2025-04-11T19:23:05.1420618Z     [32m  [32mâœ”[39m[0m[90m setting `setDefaultOnInsert` on operation has priority over base option (gh-9032)[0m
2025-04-11T19:23:05.1486836Z     [32m  [32mâœ”[39m[0m[90m should prevent non-hexadecimal strings (gh-9996)[0m
2025-04-11T19:23:05.1554232Z     [32m  [32mâœ”[39m[0m[90m Allows a syncIndexes shorthand mongoose.syncIndexes (gh-10893)[0m
2025-04-11T19:23:05.1626049Z     [32m  [32mâœ”[39m[0m[90m Allows for the removal of indexes via string or object (gh-11547)[0m
2025-04-11T19:23:05.1658875Z [0m      global `allowDiskUse` (gh-11478)[0m
2025-04-11T19:23:05.1809980Z       [32m  [32mâœ”[39m[0m[90m is `undefined` by default[0m
2025-04-11T19:23:05.1965020Z       [32m  [32mâœ”[39m[0m[90m works when set to `true` and no option provided[0m
2025-04-11T19:23:05.2128710Z       [32m  [32mâœ”[39m[0m[90m can be overridden by a specific query[0m
2025-04-11T19:23:05.2183118Z [0m      global `timestamps.createdAt.immutable` (gh-10139)[0m
2025-04-11T19:23:05.2240072Z       [32m  [32mâœ”[39m[0m[90m is `true` by default[0m
2025-04-11T19:23:05.2329423Z       [32m  [32mâœ”[39m[0m[90m can be overridden to `false`[0m
2025-04-11T19:23:05.2394717Z [0m    global id option[0m
2025-04-11T19:23:05.2607561Z     [32m  [32mâœ”[39m[0m[90m can disable the id virtual on schemas gh-11966[0m
2025-04-11T19:23:05.2651699Z [0m    set()[0m
2025-04-11T19:23:05.2696835Z     [32m  [32mâœ”[39m[0m[90m should be able to set a option through set with (key, value)[0m
2025-04-11T19:23:05.2763233Z     [32m  [32mâœ”[39m[0m[90m should be able to set a option through a object with {key: value}[0m
2025-04-11T19:23:05.2831740Z     [32m  [32mâœ”[39m[0m[90m should throw a single error when using a invalid key[0m
2025-04-11T19:23:05.2899632Z     [32m  [32mâœ”[39m[0m[90m should throw a error with many errors when using multiple invalid keys[0m
2025-04-11T19:23:05.2956232Z     [32m  [32mâœ”[39m[0m[90m should apply all values, even if there are errors[0m
2025-04-11T19:23:05.3014554Z     [32m  [32mâœ”[39m[0m[90m should throw a single error when using a invalid key when getting[0m
2025-04-11T19:23:05.3057792Z [0m    createInitialConnection (gh-8302)[0m
2025-04-11T19:23:05.3102737Z     [32m  [32mâœ”[39m[0m[90m should delete existing connection when setting createInitialConnection to false[0m
2025-04-11T19:23:05.3170738Z     [32m  [32mâœ”[39m[0m[90m should create connection when createConnection is called[0m
2025-04-11T19:23:05.3258003Z     [32m  [32mâœ”[39m[0m[90m should create a new connection automatically when connect() is called if no existing default connection[0m
2025-04-11T19:23:05.3342797Z     [32m  [32mâœ”[39m[0m[90m should not delete default connection if it has models[0m
2025-04-11T19:23:05.3453366Z     [32m  [32mâœ”[39m[0m[90m should not delete default connection if it is connected[0m
2025-04-11T19:23:05.3531177Z 
2025-04-11T19:23:05.3531563Z [0m  parallelLimit[0m
2025-04-11T19:23:05.3568761Z   [32m  [32mâœ”[39m[0m[90m works with zero functions[0m
2025-04-11T19:23:05.4649293Z   [32m  [32mâœ”[39m[0m[90m executes functions in parallel[0m[31m (103ms)[0m
2025-04-11T19:23:05.4681175Z 
2025-04-11T19:23:05.4681665Z [0m  model[0m
2025-04-11T19:23:05.4695599Z [0m    hydrate()[0m
2025-04-11T19:23:05.4789868Z     [32m  [32mâœ”[39m[0m[90m hydrates documents with no modified paths[0m
2025-04-11T19:23:05.4862826Z     [32m  [32mâœ”[39m[0m[90m runs validators[0m
2025-04-11T19:23:05.4938830Z     [32m  [32mâœ”[39m[0m[90m supports projection (gh-9209)[0m
2025-04-11T19:23:05.4996058Z     [32m  [32mâœ”[39m[0m[90m works correctly with model discriminators[0m
2025-04-11T19:23:05.5079849Z     [32m  [32mâœ”[39m[0m[90m should deeply hydrate the document with the `hydratedPopulatedDocs` option (gh-4727)[0m
2025-04-11T19:23:05.5366599Z     [32m  [32mâœ”[39m[0m[90m should hydrate documents in virtual populate (gh-14503)[0m
2025-04-11T19:23:05.5442192Z     [32m  [32mâœ”[39m[0m[90m sets hydrated docs as populated (gh-15048)[0m
2025-04-11T19:23:05.5702008Z     [32m  [32mâœ”[39m[0m[90m marks deeply nested docs as hydrated underneath virtuals (gh-15110)[0m
2025-04-11T19:23:05.5881151Z     [32m  [32mâœ”[39m[0m[90m marks deeply nested docs as hydrated underneath conventional (gh-15110)[0m
2025-04-11T19:23:05.5958359Z 
2025-04-11T19:23:05.5958805Z [0m  types.decimal128[0m
2025-04-11T19:23:05.6004471Z   [32m  [32mâœ”[39m[0m[90m casts from type number (gh-6331)[0m
2025-04-11T19:23:05.6055547Z   [32m  [32mâœ”[39m[0m[90m uses valueOf method if one exists (gh-6418)[0m
2025-04-11T19:23:05.6087525Z 
2025-04-11T19:23:05.6088387Z [0m  document modified[0m
2025-04-11T19:23:05.6112490Z [0m    modified states[0m
2025-04-11T19:23:05.6295538Z     [32m  [32mâœ”[39m[0m[90m reset after save[0m
2025-04-11T19:23:05.6529069Z     [32m  [32mâœ”[39m[0m[90m of embedded docs reset after save[0m
2025-04-11T19:23:05.6594651Z [0m    isDefault[0m
2025-04-11T19:23:05.6648781Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:23:05.6854946Z [0m    isModified[0m
2025-04-11T19:23:05.6907652Z     [32m  [32mâœ”[39m[0m[90m should not throw with no argument[0m
2025-04-11T19:23:05.7046714Z     [32m  [32mâœ”[39m[0m[90m when modifying keys[0m
2025-04-11T19:23:05.7182584Z     [32m  [32mâœ”[39m[0m[90m setting a key identically to its current value should not dirty the key[0m
2025-04-11T19:23:05.7312435Z     [32m  [32mâœ”[39m[0m[90m should support passing a string of keys separated by a blank space as the first argument[0m
2025-04-11T19:23:05.7576979Z     [32m  [32mâœ”[39m[0m[90m on entire document[0m
2025-04-11T19:23:05.7955556Z     [32m  [32mâœ”[39m[0m[90m should let you set ref paths (gh-1530)[0m
2025-04-11T19:23:05.8066659Z     [32m  [32mâœ”[39m[0m[90m properly sets populated for gh-1530 (gh-2678)[0m
2025-04-11T19:23:05.8437457Z     [32m  [32mâœ”[39m[0m[90m should support setting mixed paths by string (gh-1418)[0m
2025-04-11T19:23:05.8800764Z     [32m  [32mâœ”[39m[0m[90m should mark multi-level nested schemas as modified (gh-1754)[0m
2025-04-11T19:23:06.3765838Z     [32m  [32mâœ”[39m[0m[90m should reset the modified state after calling unmarkModified[0m[31m (486ms)[0m
2025-04-11T19:23:06.3819979Z [0m      on DocumentArray[0m
2025-04-11T19:23:06.3896971Z       [32m  [32mâœ”[39m[0m[90m work[0m
2025-04-11T19:23:06.5016334Z       [32m  [32mâœ”[39m[0m[90m with push (gh-14024)[0m
2025-04-11T19:23:06.5127358Z       [32m  [32mâœ”[39m[0m[90m with push and set (gh-14024)[0m
2025-04-11T19:23:06.5251681Z       [32m  [32mâœ”[39m[0m[90m with accessors[0m
2025-04-11T19:23:06.5326209Z [0m      on MongooseArray[0m
2025-04-11T19:23:06.5384747Z       [32m  [32mâœ”[39m[0m[90m atomic methods[0m
2025-04-11T19:23:06.5512145Z       [32m  [32mâœ”[39m[0m[90m native methods[0m
2025-04-11T19:23:06.5587902Z [0m      manually populating arrays[0m
2025-04-11T19:23:06.5676837Z       [32m  [32mâœ”[39m[0m[90m gh-1530 for arrays (gh-3575)[0m
2025-04-11T19:23:06.5968909Z       [32m  [32mâœ”[39m[0m[90m setting nested arrays (gh-3721)[0m
2025-04-11T19:23:06.6105823Z       [32m  [32mâœ”[39m[0m[90m with discriminators (gh-3575)[0m
2025-04-11T19:23:06.6505844Z       [32m  [32mâœ”[39m[0m[90m updates embedded doc parents upon direct assignment (gh-5189)[0m
2025-04-11T19:23:06.6649537Z 
2025-04-11T19:23:06.6650295Z [0m  model: validate: [0m
2025-04-11T19:23:06.6709129Z   [32m  [32mâœ”[39m[0m[90m Model.validate() (gh-7587)[0m
2025-04-11T19:23:06.6761023Z   [32m  [32mâœ”[39m[0m[90m Model.validate(...) validates paths in arrays (gh-8821)[0m
2025-04-11T19:23:06.6823995Z   [32m  [32mâœ”[39m[0m[90m Model.validate(...) respects discriminators (gh-12621)[0m
2025-04-11T19:23:06.6873159Z   [32m  [32mâœ”[39m[0m[90m Model.validate() works with arrays (gh-10669)[0m
2025-04-11T19:23:06.6922481Z   [32m  [32mâœ”[39m[0m[90m Model.validate(...) uses document instance as context by default (gh-10132)[0m
2025-04-11T19:23:06.6971167Z   [32m  [32mâœ”[39m[0m[90m Model.validate(...) uses object as context by default (gh-10346)[0m
2025-04-11T19:23:06.7023159Z   [32m  [32mâœ”[39m[0m[90m Model.validate(...) supports passing in an object, array or string (gh-10353)[0m
2025-04-11T19:23:06.7080563Z   [32m  [32mâœ”[39m[0m[90m runs validation on casted paths even if cast error happened[0m
2025-04-11T19:23:06.7112892Z 
2025-04-11T19:23:06.7113193Z [0m  collections:[0m
2025-04-11T19:23:06.7265687Z   [32m  [32mâœ”[39m[0m[90m should buffer commands until connection is established[0m
2025-04-11T19:23:06.7466823Z   [32m  [32mâœ”[39m[0m[90m returns a promise if buffering and no callback (gh-7676)[0m
2025-04-11T19:23:06.8526284Z   [32m  [32mâœ”[39m[0m[90m returns a promise if buffering and callback with find() (gh-14184)[0m[31m (102ms)[0m
2025-04-11T19:23:06.9585738Z   [32m  [32mâœ”[39m[0m[90m handles bufferTimeoutMS in schemaUserProvidedOptions[0m[31m (102ms)[0m
2025-04-11T19:23:06.9635172Z   [32m  [32mâœ”[39m[0m[90m methods should that throw (unimplemented)[0m
2025-04-11T19:23:06.9702887Z   [32m  [32mâœ”[39m[0m[90m buffers for sync methods (gh-10610)[0m
2025-04-11T19:23:06.9771032Z 
2025-04-11T19:23:06.9771715Z [0m  is compatible with object created using Object.create(null) (gh-1484)[0m
2025-04-11T19:23:07.0006752Z   [32m  [32mâœ”[39m[0m[90m during construction[0m
2025-04-11T19:23:07.0061202Z   [32m  [32mâœ”[39m[0m[90m with .set(path, obj)[0m
2025-04-11T19:23:07.0118047Z   [32m  [32mâœ”[39m[0m[90m with schema[0m
2025-04-11T19:23:07.0179574Z 
2025-04-11T19:23:07.0181274Z [0m  model[0m
2025-04-11T19:23:07.0494047Z   [32m  [32mâœ”[39m[0m[90m attempting to populate on base model a virtual path defined on discriminator does not throw an error (gh-8924)[0m
2025-04-11T19:23:07.0569992Z   [32m  [32mâœ”[39m[0m[90m accepts a POJO as a schema for discriminators (gh-8984)[0m
2025-04-11T19:23:07.0775111Z   [32m  [32mâœ”[39m[0m[90m removes paths underneath mixed type if discriminator schema sets path to mixed (gh-9042)[0m
2025-04-11T19:23:07.0974517Z   [32m  [32mâœ”[39m[0m[90m doesnt remove paths at the same level (gh-9362)[0m
2025-04-11T19:23:07.1186564Z   [32m  [32mâœ”[39m[0m[90m overwrites if discriminator schema sets a path to single nested but base schema sets to doc array (gh-9354)[0m
2025-04-11T19:23:07.1376256Z   [32m  [32mâœ”[39m[0m[90m can use compiled model schema as a discriminator (gh-9238)[0m
2025-04-11T19:23:07.1866291Z   [32m  [32mâœ”[39m[0m[90m embedded discriminator array of arrays (gh-9984)[0m
2025-04-11T19:23:07.1950950Z   [32m  [32mâœ”[39m[0m[90m recursive embedded discriminator using schematype (gh-9600)[0m
2025-04-11T19:23:07.2051348Z   [32m  [32mâœ”[39m[0m[90m takes discriminator schema's single nested over base schema's (gh-10157)[0m
2025-04-11T19:23:07.2395079Z   [32m  [32mâœ”[39m[0m[90m allows using array as tied value (gh-10303)[0m
2025-04-11T19:23:07.2608416Z   [32m  [32mâœ”[39m[0m[90m handles nested discriminators (gh-10702)[0m
2025-04-11T19:23:07.2686113Z   [32m  [32mâœ”[39m[0m[90m Should allow reusing discriminators (gh-10931)[0m
2025-04-11T19:23:07.3163424Z   [32m  [32mâœ”[39m[0m[90m handles updating multiple properties nested underneath a discriminator (gh-11428)[0m
2025-04-11T19:23:07.3389405Z   [32m  [32mâœ”[39m[0m[90m allows defining discriminator at the subSchema level in the subschema (gh-7971)[0m
2025-04-11T19:23:07.3590799Z   [32m  [32mâœ”[39m[0m[90m handles discriminators on maps of subdocuments (gh-11720)[0m
2025-04-11T19:23:07.3680288Z   [32m  [32mâœ”[39m[0m[90m supports `mergeHooks` option to use the discriminator schema's hooks over the base schema's (gh-12472)[0m
2025-04-11T19:23:07.3998064Z   [32m  [32mâœ”[39m[0m[90m supports `mergePlugins` option to use the discriminator schema's plugins over the base schema's (gh-12604)[0m
2025-04-11T19:23:07.4527750Z   [32m  [32mâœ”[39m[0m[90m applies built-in plugins if mergePlugins and mergeHooks disabled (gh-12696) (gh-12604)[0m
2025-04-11T19:23:07.4600314Z   [32m  [32mâœ”[39m[0m[90m should not throw an error when the user is not modifying anything involving discriminators gh-12135[0m
2025-04-11T19:23:07.4795106Z   [32m  [32mâœ”[39m[0m[90m should throw an error because of the different typeKeys gh-12135[0m
2025-04-11T19:23:07.4902984Z   [32m  [32mâœ”[39m[0m[90m handles customizable discriminator options gh-12135[0m
2025-04-11T19:23:07.5100760Z   [32m  [32mâœ”[39m[0m[90m uses "value" over "name" for multi-dimensonal arrays (gh-13201)[0m
2025-04-11T19:23:07.5172742Z   [32m  [32mâœ”[39m[0m[90m runs base schema paths validators and setters before child schema validators and setters (gh-13794)[0m
2025-04-11T19:23:07.5389123Z   [32m  [32mâœ”[39m[0m[90m should not fail when using a discriminator key multiple times (gh-13906)[0m
2025-04-11T19:23:07.5935692Z   [32m  [32mâœ”[39m[0m[90m correctly gathers subdocs with discriminators (gh-15088)[0m
2025-04-11T19:23:07.6170699Z   [32m  [32mâœ”[39m[0m[90m triggers save hooks on subdocuments (gh-15092)[0m
2025-04-11T19:23:07.6211415Z [0m    discriminator()[0m
2025-04-11T19:23:07.6284701Z     [32m  [32mâœ”[39m[0m[90m model defaults without discriminator[0m
2025-04-11T19:23:07.6707194Z     [32m  [32mâœ”[39m[0m[90m is instance of root[0m
2025-04-11T19:23:07.6806980Z     [32m  [32mâœ”[39m[0m[90m can define static and instance methods[0m
2025-04-11T19:23:07.7009537Z     [32m  [32mâœ”[39m[0m[90m can define virtuals and methods using schema options (gh-12246)[0m
2025-04-11T19:23:07.7198333Z     [32m  [32mâœ”[39m[0m[90m sets schema root discriminator mapping[0m
2025-04-11T19:23:07.7281280Z     [32m  [32mâœ”[39m[0m[90m sets schema discriminator type mapping[0m
2025-04-11T19:23:07.7354894Z     [32m  [32mâœ”[39m[0m[90m adds discriminatorKey to schema with default as name[0m
2025-04-11T19:23:07.7443511Z     [32m  [32mâœ”[39m[0m[90m adds discriminator to Model.discriminators object[0m
2025-04-11T19:23:07.7552897Z     [32m  [32mâœ”[39m[0m[90m throws error on invalid schema[0m
2025-04-11T19:23:07.7635684Z     [32m  [32mâœ”[39m[0m[90m throws error when attempting to nest discriminators[0m
2025-04-11T19:23:07.7722180Z     [32m  [32mâœ”[39m[0m[90m throws error when discriminator has mapped discriminator key in schema[0m
2025-04-11T19:23:07.7809384Z     [32m  [32mâœ”[39m[0m[90m throws error when discriminator has mapped discriminator key in schema with discriminatorKey option set[0m
2025-04-11T19:23:07.7927942Z     [32m  [32mâœ”[39m[0m[90m throws error when discriminator with taken name is added[0m
2025-04-11T19:23:07.8946901Z     [32m  [32mâœ”[39m[0m[90m throws error if model name is taken (gh-4148)[0m
2025-04-11T19:23:07.9116178Z     [32m  [32mâœ”[39m[0m[90m works with nested schemas (gh-2821)[0m
2025-04-11T19:23:07.9450626Z     [32m  [32mâœ”[39m[0m[90m embedded with single nested subdocs (gh-5244)[0m
2025-04-11T19:23:07.9694222Z     [32m  [32mâœ”[39m[0m[90m embedded with single nested subdocs and tied value (gh-8164) (gh-9108)[0m
2025-04-11T19:23:08.0115845Z     [32m  [32mâœ”[39m[0m[90m supports ObjectId as tied value (gh-10130)[0m
2025-04-11T19:23:08.0325338Z     [32m  [32mâœ”[39m[0m[90m Embedded discriminators in nested doc arrays (gh-6202)[0m
2025-04-11T19:23:08.0412320Z     [32m  [32mâœ”[39m[0m[90m throws an error if calling discriminator on non-doc array (gh-6202)[0m
2025-04-11T19:23:08.0533479Z     [32m  [32mâœ”[39m[0m[90m supports using a schema that was used for another discriminator (gh-7200)[0m
2025-04-11T19:23:08.0904543Z     [32m  [32mâœ”[39m[0m[90m should copy plugins[0m
2025-04-11T19:23:08.0954506Z [0m      options[0m
2025-04-11T19:23:08.1010506Z       [32m  [32mâœ”[39m[0m[90m allows toObject to be overridden[0m
2025-04-11T19:23:08.1104735Z       [32m  [32mâœ”[39m[0m[90m allows toJSON to be overridden[0m
2025-04-11T19:23:08.1212568Z       [32m  [32mâœ”[39m[0m[90m is not customizable[0m
2025-04-11T19:23:08.1275111Z [0m      root schema inheritance[0m
2025-04-11T19:23:08.1330368Z       [32m  [32mâœ”[39m[0m[90m inherits field mappings[0m
2025-04-11T19:23:08.1423711Z       [32m  [32mâœ”[39m[0m[90m inherits validators[0m
2025-04-11T19:23:08.1534925Z       [32m  [32mâœ”[39m[0m[90m does not inherit and override fields that exist[0m
2025-04-11T19:23:08.1658322Z       [32m  [32mâœ”[39m[0m[90m inherits methods[0m
2025-04-11T19:23:08.1760718Z       [32m  [32mâœ”[39m[0m[90m inherits statics[0m
2025-04-11T19:23:08.1866355Z       [32m  [32mâœ”[39m[0m[90m inherits virtual (g.s)etters[0m
2025-04-11T19:23:08.1972480Z       [32m  [32mâœ”[39m[0m[90m does not inherit indexes[0m
2025-04-11T19:23:08.2077053Z       [32m  [32mâœ”[39m[0m[90m gets options overridden by root options except toJSON and toObject[0m
2025-04-11T19:23:08.2186374Z       [32m  [32mâœ”[39m[0m[90m does not allow setting discriminator key (gh-2041)[0m
2025-04-11T19:23:08.2302435Z       [32m  [32mâœ”[39m[0m[90m deduplicates hooks (gh-2945)[0m
2025-04-11T19:23:08.2517677Z       [32m  [32mâœ”[39m[0m[90m with typeKey (gh-4339)[0m
2025-04-11T19:23:08.2735404Z       [32m  [32mâœ”[39m[0m[90m embedded discriminators with array defaults (gh-7687)[0m
2025-04-11T19:23:08.2969937Z       [32m  [32mâœ”[39m[0m[90m embedded discriminators with create() (gh-5001)[0m
2025-04-11T19:23:08.3197593Z       [32m  [32mâœ”[39m[0m[90m embedded discriminator with numeric type (gh-7808)[0m
2025-04-11T19:23:08.3497822Z       [32m  [32mâœ”[39m[0m[90m supports clone() (gh-4983)[0m
2025-04-11T19:23:08.3615428Z       [32m  [32mâœ”[39m[0m[90m clone() allows reusing schemas (gh-5098)[0m
2025-04-11T19:23:08.3964230Z       [32m  [32mâœ”[39m[0m[90m clone() does not modify original schema `obj` (gh-14821)[0m
2025-04-11T19:23:08.4208789Z       [32m  [32mâœ”[39m[0m[90m clone() allows reusing with different models (gh-5721)[0m
2025-04-11T19:23:08.4533294Z       [32m  [32mâœ”[39m[0m[90m incorrect discriminator key throws readable error with create (gh-6434)[0m
2025-04-11T19:23:08.4767286Z       [32m  [32mâœ”[39m[0m[90m copies query hooks (gh-5147)[0m
2025-04-11T19:23:08.4985376Z       [32m  [32mâœ”[39m[0m[90m reusing schema for discriminators (gh-5684)[0m
2025-04-11T19:23:08.5162409Z       [32m  [32mâœ”[39m[0m[90m overwrites nested paths in parent schema (gh-6076)[0m
2025-04-11T19:23:08.5487116Z       [32m  [32mâœ”[39m[0m[90m nested discriminator key with projecting in parent (gh-5775)[0m
2025-04-11T19:23:08.5772771Z       [32m  [32mâœ”[39m[0m[90m with $meta projection (gh-5859)[0m
2025-04-11T19:23:08.6011938Z       [32m  [32mâœ”[39m[0m[90m embedded discriminators with $push (gh-5009)[0m
2025-04-11T19:23:08.6240715Z       [32m  [32mâœ”[39m[0m[90m embedded discriminators with $push + $each (gh-5070)[0m
2025-04-11T19:23:08.6473265Z       [32m  [32mâœ”[39m[0m[90m embedded discriminators with $set (gh-5130)[0m
2025-04-11T19:23:08.6696415Z       [32m  [32mâœ”[39m[0m[90m embedded in document arrays (gh-2723)[0m
2025-04-11T19:23:08.6756433Z [0m        applyPluginsToDiscriminators[0m
2025-04-11T19:23:08.6832851Z         [32m  [32mâœ”[39m[0m[90m works (gh-4965)[0m
2025-04-11T19:23:08.6971577Z         [32m  [32mâœ”[39m[0m[90m works with customized options (gh-7458)[0m
2025-04-11T19:23:08.7063305Z [0m      embedded discriminators + hooks (gh-5706)[0m
2025-04-11T19:23:08.7225466Z       [32m  [32mâœ”[39m[0m[90m should call the hooks on the embedded document defined by both the parent and discriminated schemas[0m
2025-04-11T19:23:08.7433812Z       [32m  [32mâœ”[39m[0m[90m should call the hooks on the embedded document in an embedded array defined by both the parent and discriminated schemas[0m
2025-04-11T19:23:08.7514476Z [0m    bug fixes[0m
2025-04-11T19:23:08.7569831Z     [32m  [32mâœ”[39m[0m[90m discriminators with classes modifies class in place (gh-5175)[0m
2025-04-11T19:23:08.7656225Z     [32m  [32mâœ”[39m[0m[90m allows overwriting base class methods (gh-5227)[0m
2025-04-11T19:23:08.7765132Z     [32m  [32mâœ”[39m[0m[90m supports adding properties (gh-5104) (gh-5635)[0m
2025-04-11T19:23:08.7859965Z     [32m  [32mâœ”[39m[0m[90m with subclassing (gh-7547)[0m
2025-04-11T19:23:08.7951258Z     [32m  [32mâœ”[39m[0m[90m uses correct discriminator when using `new BaseModel` (gh-7586)[0m
2025-04-11T19:23:08.8043103Z     [32m  [32mâœ”[39m[0m[90m uses correct discriminator when using `new BaseModel` with value (gh-7851)[0m
2025-04-11T19:23:08.8244020Z     [32m  [32mâœ”[39m[0m[90m allows setting custom discriminator key in schema (gh-7807)[0m
2025-04-11T19:23:08.8558696Z     [32m  [32mâœ”[39m[0m[90m does not project in embedded discriminator key if it is the only selected field (gh-7574)[0m
2025-04-11T19:23:08.8661462Z     [32m  [32mâœ”[39m[0m[90m merges schemas instead of overwriting (gh-7884)[0m
2025-04-11T19:23:08.8880603Z     [32m  [32mâœ”[39m[0m[90m _id: false in discriminator nested schema (gh-8274)[0m
2025-04-11T19:23:08.9002294Z     [32m  [32mâœ”[39m[0m[90m with discriminators in embedded arrays (gh-8273)[0m
2025-04-11T19:23:08.9125473Z [0m    Discriminator Key test[0m
2025-04-11T19:23:08.9390800Z     [32m  [32mâœ”[39m[0m[90m gh-9015[0m
2025-04-11T19:23:08.9485568Z 
2025-04-11T19:23:08.9486451Z [0m  schema select option[0m
2025-04-11T19:23:08.9700476Z   [32m  [32mâœ”[39m[0m[90m excluding paths through schematype[0m
2025-04-11T19:23:08.9896129Z   [32m  [32mâœ”[39m[0m[90m including paths through schematype[0m
2025-04-11T19:23:08.9968980Z   [32m  [32mâœ”[39m[0m[90m should not project in discriminator key if projected in implicitly with .$ (gh-9361)[0m
2025-04-11T19:23:09.0225658Z   [32m  [32mâœ”[39m[0m[90m conflicting schematype path selection should not error[0m
2025-04-11T19:23:09.0299692Z   [32m  [32mâœ”[39m[0m[90m selecting _id works with excluded schematype path[0m
2025-04-11T19:23:09.0398742Z   [32m  [32mâœ”[39m[0m[90m selecting _id works with excluded schematype path on sub doc[0m
2025-04-11T19:23:09.0633713Z   [32m  [32mâœ”[39m[0m[90m inclusive/exclusive combos should work[0m
2025-04-11T19:23:09.0908130Z   [32m  [32mâœ”[39m[0m[90m when select is false in the schema definition, all inclusive/exclusive combos should work[0m
2025-04-11T19:23:09.1161720Z   [32m  [32mâœ”[39m[0m[90m when select is set to true in the schema definition, all inclusive/exclusive combos should work[0m
2025-04-11T19:23:09.1324084Z   [32m  [32mâœ”[39m[0m[90m does not set defaults for nested objects (gh-4707)[0m
2025-04-11T19:23:09.1523437Z   [32m  [32mâœ”[39m[0m[90m does not create nested objects if not included (gh-4669)[0m
2025-04-11T19:23:09.1690246Z   [32m  [32mâœ”[39m[0m[90m initializes nested defaults with selected objects (gh-2629)[0m
2025-04-11T19:23:09.1852111Z   [32m  [32mâœ”[39m[0m[90m should allow deselecting a field on a query even if the definition has select set to true (gh-11694)[0m
2025-04-11T19:23:09.1889921Z [0m    overriding schematype select options[0m
2025-04-11T19:23:09.1913459Z [0m      works[0m
2025-04-11T19:23:09.1928019Z [0m        for inclusions[0m
2025-04-11T19:23:09.2015549Z         [32m  [32mâœ”[39m[0m[90m with find[0m
2025-04-11T19:23:09.2211504Z         [32m  [32mâœ”[39m[0m[90m for findById[0m
2025-04-11T19:23:09.2405920Z         [32m  [32mâœ”[39m[0m[90m with findOneAndUpdate[0m
2025-04-11T19:23:09.2596916Z         [32m  [32mâœ”[39m[0m[90m for findByIdAndUpdate[0m
2025-04-11T19:23:09.2679982Z [0m        for exclusions[0m
2025-04-11T19:23:09.2811680Z         [32m  [32mâœ”[39m[0m[90m with find[0m
2025-04-11T19:23:09.3004650Z         [32m  [32mâœ”[39m[0m[90m with findById[0m
2025-04-11T19:23:09.3196770Z         [32m  [32mâœ”[39m[0m[90m with findOneAndUpdate[0m
2025-04-11T19:23:09.3376979Z         [32m  [32mâœ”[39m[0m[90m with findOneAndDelete[0m
2025-04-11T19:23:09.3481423Z [0m    exclusion in root schema should override child schema[0m
2025-04-11T19:23:09.3534746Z     [32m  [32mâœ”[39m[0m[90m works (gh-1333)[0m
2025-04-11T19:23:09.3729173Z     [32m  [32mâœ”[39m[0m[90m with nested (gh-7945)[0m
2025-04-11T19:23:09.3788678Z [0m    forcing inclusion of a deselected schema path[0m
2025-04-11T19:23:09.3971238Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:23:09.4162376Z     [32m  [32mâœ”[39m[0m[90m works if only one plus path and only one deselected field[0m
2025-04-11T19:23:09.4348815Z     [32m  [32mâœ”[39m[0m[90m works with query.slice (gh-1370)[0m
2025-04-11T19:23:09.4528184Z     [32m  [32mâœ”[39m[0m[90m ignores if path does not have select in schema (gh-6785)[0m
2025-04-11T19:23:09.4685917Z     [32m  [32mâœ”[39m[0m[90m omits if not in schema (gh-7017)[0m
2025-04-11T19:23:09.4781202Z 
2025-04-11T19:23:09.4781967Z [0m  versioning[0m
2025-04-11T19:23:09.4858352Z   [32m  [32mâœ”[39m[0m[90m is only added to parent schema (gh-1265)[0m
2025-04-11T19:23:09.5120379Z   [32m  [32mâœ”[39m[0m[90m versioning without version key[0m
2025-04-11T19:23:09.5393721Z   [32m  [32mâœ”[39m[0m[90m version works with strict docs[0m
2025-04-11T19:23:09.5569638Z   [32m  [32mâœ”[39m[0m[90m version works with existing unversioned docs[0m
2025-04-11T19:23:09.5796314Z   [32m  [32mâœ”[39m[0m[90m versionKey is configurable[0m
2025-04-11T19:23:09.6082166Z   [32m  [32mâœ”[39m[0m[90m can be disabled[0m
2025-04-11T19:23:09.6248218Z   [32m  [32mâœ”[39m[0m[90m works with numbericAlpha paths[0m
2025-04-11T19:23:09.6457899Z   [32m  [32mâœ”[39m[0m[90m allows concurrent push[0m
2025-04-11T19:23:09.6658812Z   [32m  [32mâœ”[39m[0m[90m allows concurrent push and pull[0m
2025-04-11T19:23:09.6870989Z   [32m  [32mâœ”[39m[0m[90m throws if you set a positional path after pulling[0m
2025-04-11T19:23:09.7091582Z   [32m  [32mâœ”[39m[0m[90m allows pull/push after $set[0m
2025-04-11T19:23:09.7281349Z   [32m  [32mâœ”[39m[0m[90m should add version to where clause[0m
2025-04-11T19:23:09.7504108Z   [32m  [32mâœ”[39m[0m[90m $set after pull/push throws[0m
2025-04-11T19:23:09.7734559Z   [32m  [32mâœ”[39m[0m[90m doesnt persist conflicting changes[0m
2025-04-11T19:23:09.7963152Z   [32m  [32mâœ”[39m[0m[90m increments version on push[0m
2025-04-11T19:23:09.8180622Z   [32m  [32mâœ”[39m[0m[90m does not increment version when setting nested paths[0m
2025-04-11T19:23:09.8350838Z   [32m  [32mâœ”[39m[0m[90m increments version when modifying mixed array[0m
2025-04-11T19:23:09.8548567Z   [32m  [32mâœ”[39m[0m[90m increments version when $set-ing an array[0m
2025-04-11T19:23:09.8755226Z   [32m  [32mâœ”[39m[0m[90m increments version and converts to $set when mixing $shift and $addToSet[0m
2025-04-11T19:23:09.8950377Z   [32m  [32mâœ”[39m[0m[90m should not increment version for non-versioned fields[0m
2025-04-11T19:23:09.9157269Z   [32m  [32mâœ”[39m[0m[90m should not increment version for non-versioned sub-document fields[0m
2025-04-11T19:23:09.9398898Z   [32m  [32mâœ”[39m[0m[90m should persist correctly when optimisticConcurrency is true gh-10128[0m
2025-04-11T19:23:09.9639814Z   [32m  [32mâœ”[39m[0m[90m throws VersionError when saving with no changes and optimistic concurrency is true (gh-11295)[0m
2025-04-11T19:23:09.9883288Z   [32m  [32mâœ”[39m[0m[90m should support optimisticConcurrency being an array of strings[0m
2025-04-11T19:23:10.0123881Z   [32m  [32mâœ”[39m[0m[90m gh-1898[0m
2025-04-11T19:23:10.0332122Z   [32m  [32mâœ”[39m[0m[90m can remove version key from toObject() (gh-2675)[0m
2025-04-11T19:23:10.0587392Z   [32m  [32mâœ”[39m[0m[90m pull doesnt add version where clause (gh-6190)[0m
2025-04-11T19:23:10.0827746Z   [32m  [32mâœ”[39m[0m[90m copying doc works (gh-5779)[0m
2025-04-11T19:23:10.1067874Z   [32m  [32mâœ”[39m[0m[90m optimistic concurrency (gh-9001) (gh-5424)[0m
2025-04-11T19:23:10.1342587Z   [32m  [32mâœ”[39m[0m[90m adds version to filter if pushing to a nested array (gh-11108)[0m
2025-04-11T19:23:10.1564473Z   [32m  [32mâœ”[39m[0m[90m can store version key in nested property (gh-10980)[0m
2025-04-11T19:23:10.1603183Z [0m    doc.increment()[0m
2025-04-11T19:23:10.1755042Z     [32m  [32mâœ”[39m[0m[90m works without any other changes (gh-1475)[0m
2025-04-11T19:23:10.1847090Z 
2025-04-11T19:23:10.1847883Z [0m  model field selection[0m
2025-04-11T19:23:10.2016025Z   [32m  [32mâœ”[39m[0m[90m excluded fields should be undefined[0m
2025-04-11T19:23:10.2181914Z   [32m  [32mâœ”[39m[0m[90m excluded fields should be undefined and defaults applied to other fields[0m
2025-04-11T19:23:10.2356088Z   [32m  [32mâœ”[39m[0m[90m where subset of fields excludes _id[0m
2025-04-11T19:23:10.2549845Z   [32m  [32mâœ”[39m[0m[90m works with subset of fields, excluding _id[0m
2025-04-11T19:23:10.2723130Z   [32m  [32mâœ”[39m[0m[90m works with just _id and findOneAndUpdate (gh-3407)[0m
2025-04-11T19:23:10.2995244Z   [32m  [32mâœ”[39m[0m[90m works with subset of fields excluding emebedded doc _id (gh-541)[0m
2025-04-11T19:23:10.3143167Z   [32m  [32mâœ”[39m[0m[90m included fields should have defaults applied when no value exists in db (gh-870)[0m
2025-04-11T19:23:10.3382003Z   [32m  [32mâœ”[39m[0m[90m including subdoc field excludes other subdoc fields (gh-1027)[0m
2025-04-11T19:23:10.3626588Z   [32m  [32mâœ”[39m[0m[90m excluding nested subdoc fields (gh-1027)[0m
2025-04-11T19:23:10.3808304Z   [32m  [32mâœ”[39m[0m[90m selecting an array of docs applies defaults properly (gh-1108)[0m
2025-04-11T19:23:10.4030510Z   [32m  [32mâœ”[39m[0m[90m select properties named length (gh-3903)[0m
2025-04-11T19:23:10.4306967Z   [32m  [32mâœ”[39m[0m[90m appropriately filters subdocuments based on properties (gh-1280)[0m
2025-04-11T19:23:10.4680751Z   [32m  [32mâœ”[39m[0m[90m sets defaults correctly in child docs with projection (gh-7159)[0m
2025-04-11T19:23:10.4911042Z   [32m  [32mâœ”[39m[0m[90m when `select: true` in schema, works with $elemMatch in projection[0m
2025-04-11T19:23:10.5127024Z   [32m  [32mâœ”[39m[0m[90m selection specified in query overwrites option in schema[0m
2025-04-11T19:23:10.5379807Z   [32m  [32mâœ”[39m[0m[90m selecting with `false` instead of `0` doesn't overwrite schema `select: false` (gh-8923)[0m
2025-04-11T19:23:10.5596241Z   [32m  [32mâœ”[39m[0m[90m handles deselecting _id when other field has schema-level `select: false` (gh-12670)[0m
2025-04-11T19:23:10.5636350Z [0m    with $elemMatch projection[0m
2025-04-11T19:23:10.5835551Z     [32m  [32mâœ”[39m[0m[90m casts elemMatch args (gh-1091)[0m
2025-04-11T19:23:10.6104687Z     [32m  [32mâœ”[39m[0m[90m saves modified elemMatch paths (gh-1334)[0m
2025-04-11T19:23:10.6337722Z     [32m  [32mâœ”[39m[0m[90m works with $ positional in select (gh-2031)[0m
2025-04-11T19:23:10.6438388Z 
2025-04-11T19:23:10.6439006Z [0m  model: findOneAndDelete:[0m
2025-04-11T19:23:10.6630897Z   [32m  [32mâœ”[39m[0m[90m returns the original document[0m
2025-04-11T19:23:10.6709438Z   [32m  [32mâœ”[39m[0m[90m options/conditions/doc are merged when no callback is passed[0m
2025-04-11T19:23:10.6922568Z   [32m  [32mâœ”[39m[0m[90m returns the original document[0m
2025-04-11T19:23:10.6996089Z   [32m  [32mâœ”[39m[0m[90m options/conditions/doc are merged when no callback is passed[0m
2025-04-11T19:23:10.7106454Z   [32m  [32mâœ”[39m[0m[90m supports v3 select string syntax[0m
2025-04-11T19:23:10.7205728Z   [32m  [32mâœ”[39m[0m[90m supports v3 select object syntax[0m
2025-04-11T19:23:10.7322199Z   [32m  [32mâœ”[39m[0m[90m supports v3 sort string syntax[0m
2025-04-11T19:23:10.7431903Z   [32m  [32mâœ”[39m[0m[90m supports v3 sort object syntax[0m
2025-04-11T19:23:10.7754595Z   [32m  [32mâœ”[39m[0m[90m supports population (gh-1395)[0m
2025-04-11T19:23:10.7842761Z   [32m  [32mâœ”[39m[0m[90m only calls setters once (gh-6203)[0m
2025-04-11T19:23:10.8179506Z   [32m  [32mâœ”[39m[0m[90m supports the `includeResultMetadata` option (gh-13539)[0m
2025-04-11T19:23:10.8218296Z [0m    middleware[0m
2025-04-11T19:23:10.8395696Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:23:10.8605526Z     [32m  [32mâœ”[39m[0m[90m works with exec() (gh-439)[0m
2025-04-11T19:23:10.8708076Z 
2025-04-11T19:23:10.8708694Z [0m  document: strict mode:[0m
2025-04-11T19:23:10.8764797Z   [32m  [32mâœ”[39m[0m[90m nested doc[0m
2025-04-11T19:23:10.9092981Z   [32m  [32mâœ”[39m[0m[90m sub doc[0m
2025-04-11T19:23:10.9159541Z   [32m  [32mâœ”[39m[0m[90m virtuals[0m
2025-04-11T19:23:10.9389126Z   [32m  [32mâœ”[39m[0m[90m can be overridden during set()[0m
2025-04-11T19:23:10.9547859Z   [32m  [32mâœ”[39m[0m[90m can be overridden during update()[0m
2025-04-11T19:23:10.9693309Z   [32m  [32mâœ”[39m[0m[90m can be overwritten with findOneAndUpdate (gh-1967)[0m
2025-04-11T19:23:10.9774254Z   [32m  [32mâœ”[39m[0m[90m handles setting `schema.options.strict` (gh-7103)[0m
2025-04-11T19:23:10.9850606Z [0m    should work[0m
2025-04-11T19:23:11.0043545Z     [32m  [32mâœ”[39m[0m[90m when creating models with non-strict schemas (gh-4274)[0m
2025-04-11T19:23:11.0136026Z     [32m  [32mâœ”[39m[0m[90m when creating models with strict schemas[0m
2025-04-11T19:23:11.0286627Z     [32m  [32mâœ”[39m[0m[90m when overriding strictness[0m
2025-04-11T19:23:11.0571552Z     [32m  [32mâœ”[39m[0m[90m when using Model#create[0m
2025-04-11T19:23:11.0634255Z [0m    "throws" mode[0m
2025-04-11T19:23:11.0704161Z     [32m  [32mâœ”[39m[0m[90m throws on set() of unknown property[0m
2025-04-11T19:23:11.0821449Z     [32m  [32mâœ”[39m[0m[90m fails with extra fields[0m
2025-04-11T19:23:11.0942422Z     [32m  [32mâœ”[39m[0m[90m doesnt throw with refs (gh-2665)[0m
2025-04-11T19:23:11.1057273Z     [32m  [32mâœ”[39m[0m[90m set nested to num throws ObjectExpectedError (gh-3735)[0m
2025-04-11T19:23:11.1185851Z 
2025-04-11T19:23:11.1186540Z [0m  model middleware[0m
2025-04-11T19:23:11.1385826Z   [32m  [32mâœ”[39m[0m[90m post save[0m
2025-04-11T19:23:11.1553396Z   [32m  [32mâœ”[39m[0m[90m sync error in post save (gh-3483)[0m
2025-04-11T19:23:11.2639148Z   [32m  [32mâœ”[39m[0m[90m pre hook promises (gh-3779)[0m[31m (102ms)[0m
2025-04-11T19:23:11.3813073Z   [32m  [32mâœ”[39m[0m[90m post hook promises (gh-3779)[0m[31m (112ms)[0m
2025-04-11T19:23:11.3973121Z   [32m  [32mâœ”[39m[0m[90m validate middleware runs before save middleware (gh-2462)[0m
2025-04-11T19:23:11.4057468Z   [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:23:11.4259347Z   [32m  [32mâœ”[39m[0m[90m gh-1829[0m
2025-04-11T19:23:11.4438336Z   [32m  [32mâœ”[39m[0m[90m sync error in pre save (gh-3483)[0m
2025-04-11T19:23:11.4593530Z   [32m  [32mâœ”[39m[0m[90m sync error in pre save after next() (gh-3483)[0m
2025-04-11T19:23:11.4755305Z   [32m  [32mâœ”[39m[0m[90m validate + remove[0m
2025-04-11T19:23:11.4926367Z   [32m  [32mâœ”[39m[0m[90m static hooks (gh-5982)[0m
2025-04-11T19:23:11.6185827Z   [32m  [32mâœ”[39m[0m[90m deleteOne hooks (gh-7538)[0m[31m (119ms)[0m
2025-04-11T19:23:11.6223917Z [0m    post init hooks[0m
2025-04-11T19:23:11.6378404Z     [32m  [32mâœ”[39m[0m[90m success[0m
2025-04-11T19:23:11.6567273Z     [32m  [32mâœ”[39m[0m[90m with errors[0m
2025-04-11T19:23:11.6621417Z [0m    createCollection middleware[0m
2025-04-11T19:23:11.6719137Z     [32m  [32mâœ”[39m[0m[90m calls createCollection hooks[0m
2025-04-11T19:23:11.6814444Z     [32m  [32mâœ”[39m[0m[90m allows skipping createCollection from hooks[0m
2025-04-11T19:23:11.6872428Z [0m    bulkWrite middleware[0m
2025-04-11T19:23:11.6953138Z     [32m  [32mâœ”[39m[0m[90m calls bulkWrite hooks[0m
2025-04-11T19:23:11.7166777Z     [32m  [32mâœ”[39m[0m[90m allows updating ops[0m
2025-04-11T19:23:11.7362289Z     [32m  [32mâœ”[39m[0m[90m supports error handlers[0m
2025-04-11T19:23:11.7551070Z     [32m  [32mâœ”[39m[0m[90m supports skipping wrapped function[0m
2025-04-11T19:23:11.7645236Z 
2025-04-11T19:23:11.7645763Z [0m  discriminator docs[0m
2025-04-11T19:23:11.7747942Z   [32m  [32mâœ”[39m[0m[90m The `model.discriminator()` function[0m
2025-04-11T19:23:11.7872583Z   [32m  [32mâœ”[39m[0m[90m Discriminators save to the Event model's collection[0m
2025-04-11T19:23:11.7924780Z   [32m  [32mâœ”[39m[0m[90m Discriminator keys[0m
2025-04-11T19:23:11.7995667Z   [32m  [32mâœ”[39m[0m[90m Update discriminator key[0m
2025-04-11T19:23:11.8065085Z   [32m  [32mâœ”[39m[0m[90m use overwriteDiscriminatorKey to change discriminator key[0m
2025-04-11T19:23:11.8135475Z   [32m  [32mâœ”[39m[0m[90m Discriminators add the discriminator key to queries[0m
2025-04-11T19:23:11.8197474Z   [32m  [32mâœ”[39m[0m[90m Discriminators copy pre and post hooks[0m
2025-04-11T19:23:11.8256118Z   [32m  [32mâœ”[39m[0m[90m Handling custom _id fields[0m
2025-04-11T19:23:11.8592667Z   [32m  [32mâœ”[39m[0m[90m Using discriminators with `Model.create()`[0m
2025-04-11T19:23:11.8757696Z   [32m  [32mâœ”[39m[0m[90m Embedded discriminators in arrays[0m
2025-04-11T19:23:11.8934900Z   [32m  [32mâœ”[39m[0m[90m Recursive embedded discriminators in arrays[0m
2025-04-11T19:23:11.8998368Z   [32m  [32mâœ”[39m[0m[90m Single nested discriminators[0m
2025-04-11T19:23:11.9052989Z 
2025-04-11T19:23:11.9053410Z [0m  asyncIterator[0m
2025-04-11T19:23:11.9399846Z   [32m  [32mâœ”[39m[0m[90m supports for/await/of on a query (gh-6737)[0m
2025-04-11T19:23:11.9489726Z   [32m  [32mâœ”[39m[0m[90m supports for/await/of on a aggregation (gh-6737)[0m
2025-04-11T19:23:11.9575405Z   [32m  [32mâœ”[39m[0m[90m supports for/await/of on a query cursor (gh-9403)[0m
2025-04-11T19:23:11.9659096Z   [32m  [32mâœ”[39m[0m[90m supports for/await/of on a aggregation cursor (gh-9403)[0m
2025-04-11T19:23:11.9721404Z 
2025-04-11T19:23:11.9721762Z [0m  Lean Tutorial[0m
2025-04-11T19:23:11.9781759Z   [36m  - compare sizes lean vs not lean[0m
2025-04-11T19:23:11.9844899Z   [32m  [32mâœ”[39m[0m[90m compare types[0m
2025-04-11T19:23:12.0002393Z   [32m  [32mâœ”[39m[0m[90m getters and virtuals[0m
2025-04-11T19:23:12.0172874Z   [32m  [32mâœ”[39m[0m[90m conventional populate[0m
2025-04-11T19:23:12.0279232Z   [32m  [32mâœ”[39m[0m[90m virtual populate[0m
2025-04-11T19:23:12.0358236Z   [32m  [32mâœ”[39m[0m[90m bigint[0m
2025-04-11T19:23:12.0419409Z 
2025-04-11T19:23:12.0419890Z [0m  debug: shell[0m
2025-04-11T19:23:12.0586804Z   [32m  [32mâœ”[39m[0m[90m no-shell[0m
2025-04-11T19:23:12.0642276Z   [32m  [32mâœ”[39m[0m[90m shell[0m
2025-04-11T19:23:12.0850399Z   [32m  [32mâœ”[39m[0m[90m should allow to set the `debug` option on a per-connection basis (gh-12700)[0m
2025-04-11T19:23:12.1066744Z   [32m  [32mâœ”[39m[0m[90m should avoid sending null session option with document ops (gh-13052)[0m
2025-04-11T19:23:12.1160360Z 
2025-04-11T19:23:12.1160790Z [0m  defaults docs[0m
2025-04-11T19:23:12.1389382Z   [32m  [32mâœ”[39m[0m[90m Declaring defaults in your schema[0m
2025-04-11T19:23:12.1437861Z   [32m  [32mâœ”[39m[0m[90m Default functions[0m
2025-04-11T19:23:12.1521217Z   [32m  [32mâœ”[39m[0m[90m The `setDefaultsOnInsert` option[0m
2025-04-11T19:23:12.1571188Z   [32m  [32mâœ”[39m[0m[90m Default functions and `this`[0m
2025-04-11T19:23:12.1640718Z 
2025-04-11T19:23:12.1641255Z [0m  Tutorial: findOneAndUpdate()[0m
2025-04-11T19:23:12.1874456Z   [32m  [32mâœ”[39m[0m[90m basic case[0m
2025-04-11T19:23:12.1945795Z   [32m  [32mâœ”[39m[0m[90m new option[0m
2025-04-11T19:23:12.2016032Z   [32m  [32mâœ”[39m[0m[90m returnOriginal option[0m
2025-04-11T19:23:12.2107853Z   [32m  [32mâœ”[39m[0m[90m save race condition[0m
2025-04-11T19:23:12.2211833Z   [32m  [32mâœ”[39m[0m[90m upsert[0m
2025-04-11T19:23:12.2300300Z   [32m  [32mâœ”[39m[0m[90m includeResultMetadata[0m
2025-04-11T19:23:12.2360633Z 
2025-04-11T19:23:12.2361281Z [0m  validation docs[0m
2025-04-11T19:23:12.2426452Z   [32m  [32mâœ”[39m[0m[90m Validation[0m
2025-04-11T19:23:12.2482438Z   [32m  [32mâœ”[39m[0m[90m Built-in Validators[0m
2025-04-11T19:23:12.2535114Z   [32m  [32mâœ”[39m[0m[90m Custom Error Messages[0m
2025-04-11T19:23:12.2895492Z   [32m  [32mâœ”[39m[0m[90m The `unique` Option is Not a Validator[0m
2025-04-11T19:23:12.2947570Z   [32m  [32mâœ”[39m[0m[90m Custom Validators[0m
2025-04-11T19:23:12.3002434Z   [32m  [32mâœ”[39m[0m[90m Async Custom Validators[0m
2025-04-11T19:23:12.3054785Z   [32m  [32mâœ”[39m[0m[90m Validation Errors[0m
2025-04-11T19:23:12.3111655Z   [32m  [32mâœ”[39m[0m[90m Cast Errors[0m
2025-04-11T19:23:12.3169205Z   [32m  [32mâœ”[39m[0m[90m Cast Error Message Overwrite[0m
2025-04-11T19:23:12.3227336Z   [32m  [32mâœ”[39m[0m[90m Cast Error Message Function Overwrite[0m
2025-04-11T19:23:12.3274028Z   [32m  [32mâœ”[39m[0m[90m Global SchemaType Validation[0m
2025-04-11T19:23:12.3333000Z   [32m  [32mâœ”[39m[0m[90m Required Validators On Nested Objects[0m
2025-04-11T19:23:12.3389954Z   [32m  [32mâœ”[39m[0m[90m Update Validators[0m
2025-04-11T19:23:12.3437146Z   [32m  [32mâœ”[39m[0m[90m Update Validators and `this`[0m
2025-04-11T19:23:12.3486646Z   [32m  [32mâœ”[39m[0m[90m Update Validators Only Run On Updated Paths[0m
2025-04-11T19:23:12.3593313Z   [32m  [32mâœ”[39m[0m[90m Update Validators Only Run For Some Operations[0m
2025-04-11T19:23:12.3644384Z 
2025-04-11T19:23:12.3644789Z [0m  getters/setters[0m
2025-04-11T19:23:12.3676402Z [0m    getters[0m
2025-04-11T19:23:12.3728369Z     [32m  [32mâœ”[39m[0m[90m basic example[0m
2025-04-11T19:23:12.3799121Z     [32m  [32mâœ”[39m[0m[90m skip[0m
2025-04-11T19:23:12.3848760Z [0m    setters[0m
2025-04-11T19:23:12.3902254Z     [32m  [32mâœ”[39m[0m[90m basic[0m
2025-04-11T19:23:12.4001046Z     [32m  [32mâœ”[39m[0m[90m updates[0m
2025-04-11T19:23:12.4087124Z     [32m  [32mâœ”[39m[0m[90m update skip[0m
2025-04-11T19:23:12.4153337Z     [32m  [32mâœ”[39m[0m[90m vs ES6[0m
2025-04-11T19:23:12.4196660Z [0m    localization[0m
2025-04-11T19:23:12.4434261Z     [32m  [32mâœ”[39m[0m[90m locale[0m
2025-04-11T19:23:12.4517917Z 
2025-04-11T19:23:12.4518322Z [0m  Advanced Schemas[0m
2025-04-11T19:23:12.4612354Z   [32m  [32mâœ”[39m[0m[90m Creating from ES6 Classes Using `loadClass()`[0m
2025-04-11T19:23:12.4661872Z 
2025-04-11T19:23:12.4662361Z [0m  Cast Tutorial[0m
2025-04-11T19:23:12.4750004Z   [32m  [32mâœ”[39m[0m[90m get and set[0m
2025-04-11T19:23:12.4804039Z   [32m  [32mâœ”[39m[0m[90m cast values[0m
2025-04-11T19:23:12.4860059Z   [32m  [32mâœ”[39m[0m[90m cast error[0m
2025-04-11T19:23:12.4911824Z   [32m  [32mâœ”[39m[0m[90m not in schema[0m
2025-04-11T19:23:12.4972871Z   [32m  [32mâœ”[39m[0m[90m strictQuery true[0m
2025-04-11T19:23:12.5027090Z   [32m  [32mâœ”[39m[0m[90m strictQuery throw[0m
2025-04-11T19:23:12.5088172Z   [32m  [32mâœ”[39m[0m[90m strictQuery removes casted empty objects[0m
2025-04-11T19:23:12.5140018Z   [32m  [32mâœ”[39m[0m[90m implicit in[0m
2025-04-11T19:23:12.5200292Z 
2025-04-11T19:23:12.5200624Z [0m  Date Tutorial[0m
2025-04-11T19:23:12.5260285Z   [32m  [32mâœ”[39m[0m[90m Example 1.2: casts strings to dates[0m
2025-04-11T19:23:12.5312074Z   [32m  [32mâœ”[39m[0m[90m Example 1.3: cast error[0m
2025-04-11T19:23:12.5364037Z   [32m  [32mâœ”[39m[0m[90m Example 1.2.1: min, max[0m
2025-04-11T19:23:12.5480400Z   [32m  [32mâœ”[39m[0m[90m Example 1.4.1: moment[0m
2025-04-11T19:23:12.5515644Z   [32m  [32mâœ”[39m[0m[90m Example 1.4.3: numeric strings[0m
2025-04-11T19:23:12.5537422Z [0m    Example 1.3.1[0m
2025-04-11T19:23:12.5784401Z     [32m  [32mâœ”[39m[0m[90m date queries[0m
2025-04-11T19:23:12.5868386Z 
2025-04-11T19:23:12.5869121Z [0m  transactions[0m
2025-04-11T19:23:12.5882700Z   [36m  - basic example[0m
2025-04-11T19:23:12.5883364Z   [36m  - withTransaction[0m
2025-04-11T19:23:12.5883890Z   [36m  - abort[0m
2025-04-11T19:23:12.5884329Z   [36m  - save[0m
2025-04-11T19:23:12.5884840Z   [36m  - create (gh-6909)[0m
2025-04-11T19:23:12.5885379Z   [36m  - aggregate[0m
2025-04-11T19:23:12.5885991Z   [36m  - deleteOne and deleteMany (gh-7857)(gh-6805)[0m
2025-04-11T19:23:12.5886530Z   [36m  - remove, update, updateOne (gh-7455)[0m
2025-04-11T19:23:12.5886968Z   [36m  - distinct (gh-8006)[0m
2025-04-11T19:23:12.5887394Z   [36m  - save() with no changes (gh-8571)[0m
2025-04-11T19:23:12.5887886Z   [36m  - transaction() resets $isNew on error[0m
2025-04-11T19:23:12.5888467Z   [36m  - transaction() resets $isNew between retries (gh-13698)[0m
2025-04-11T19:23:12.5889120Z   [36m  - handles resetting array state with $set atomic (gh-13698)[0m
2025-04-11T19:23:12.5890401Z   [36m  - transaction() retains modified status for documents created outside of the transaction then modified inside the transaction (gh-13973)[0m
2025-04-11T19:23:12.5891474Z   [36m  - transaction() avoids duplicating atomic operations (gh-14848)[0m
2025-04-11T19:23:12.5892238Z   [36m  - doesnt apply schema write concern to transaction operations (gh-11382)[0m
2025-04-11T19:23:12.5893284Z   [36m  - allows custom transaction wrappers to store and reset document state with $createModifiedPathsSnapshot (gh-14268)[0m
2025-04-11T19:23:12.5894290Z   [36m  - throws error if using `create()` with multiple docs in a transaction (gh-15091)[0m
2025-04-11T19:23:12.5894899Z [0m    populate (gh-6754)[0m
2025-04-11T19:23:12.5896816Z     [36m  - `populate()` uses the querys session[0m
2025-04-11T19:23:12.5897574Z     [36m  - can override `populate()` session[0m
2025-04-11T19:23:12.5898218Z     [36m  - `Document#populate()` uses the documents `$session()` by default[0m
2025-04-11T19:23:12.5898914Z     [36m  - `Document#populate()` supports overwriting the session[0m
2025-04-11T19:23:12.5908281Z [0m    transactionAsyncLocalStorage option[0m
2025-04-11T19:23:12.5919769Z     [36m  - transaction() sets `session` by default if transactionAsyncLocalStorage option is set[0m
2025-04-11T19:23:12.5941029Z 
2025-04-11T19:23:12.5941381Z [0m  custom casting[0m
2025-04-11T19:23:12.5988023Z   [32m  [32mâœ”[39m[0m[90m casting error[0m
2025-04-11T19:23:12.6037531Z   [32m  [32mâœ”[39m[0m[90m casting override[0m
2025-04-11T19:23:12.6258669Z 
2025-04-11T19:23:12.6259522Z [0m  schemaTypes[0m
2025-04-11T19:23:12.6318797Z   [32m  [32mâœ”[39m[0m[90m Creating a Basic Custom Schema Type[0m
2025-04-11T19:23:12.6374730Z 
2025-04-11T19:23:12.6375041Z [0m  Virtuals[0m
2025-04-11T19:23:12.6456104Z   [32m  [32mâœ”[39m[0m[90m basic[0m
2025-04-11T19:23:12.6505638Z   [32m  [32mâœ”[39m[0m[90m fullName[0m
2025-04-11T19:23:12.6549837Z   [32m  [32mâœ”[39m[0m[90m toJSON[0m
2025-04-11T19:23:12.6625661Z   [32m  [32mâœ”[39m[0m[90m lean[0m
2025-04-11T19:23:12.6696616Z   [32m  [32mâœ”[39m[0m[90m in query[0m
2025-04-11T19:23:12.6873507Z   [32m  [32mâœ”[39m[0m[90m populate[0m
2025-04-11T19:23:12.6925276Z   [32m  [32mâœ”[39m[0m[90m schema-options fullName[0m
2025-04-11T19:23:12.7038792Z   [32m  [32mâœ”[39m[0m[90m schema-options populate[0m
2025-04-11T19:23:12.7094683Z 
2025-04-11T19:23:12.7095249Z [0m  promises docs[0m
2025-04-11T19:23:12.7254356Z   [32m  [32mâœ”[39m[0m[90m Built-in Promises[0m
2025-04-11T19:23:12.7318031Z   [32m  [32mâœ”[39m[0m[90m Queries are not promises[0m
2025-04-11T19:23:12.7379111Z   [32m  [32mâœ”[39m[0m[90m Queries are thenable[0m
2025-04-11T19:23:12.7440668Z   [36m  - Should You Use `exec()` With `await`?[0m
2025-04-11T19:23:12.7492912Z 
2025-04-11T19:23:12.7493324Z [0m  getVirtual[0m
2025-04-11T19:23:12.7546739Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators (gh-6411)[0m
2025-04-11T19:23:12.7600932Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators under single nested (gh-6488)[0m
2025-04-11T19:23:12.7650367Z   [32m  [32mâœ”[39m[0m[90m handles multiple calls with discriminator under doc array (gh-6644)[0m
2025-04-11T19:23:12.7682296Z 
2025-04-11T19:23:12.7682672Z [0m  applyTimestampsToUpdate[0m
2025-04-11T19:23:12.7717517Z   [32m  [32mâœ”[39m[0m[90m handles update pipelines (gh-11151)[0m
2025-04-11T19:23:12.7749555Z 
2025-04-11T19:23:12.7749870Z [0m  promiseOrCallback()[0m
2025-04-11T19:23:12.7761231Z [0m    apply callback[0m
2025-04-11T19:23:12.7805714Z     [32m  [32mâœ”[39m[0m[90m without error[0m
2025-04-11T19:23:12.7838150Z [0m      with error[0m
2025-04-11T19:23:12.7894243Z       [32m  [32mâœ”[39m[0m[90m without event emitter[0m
2025-04-11T19:23:12.7981268Z       [32m  [32mâœ”[39m[0m[90m with event emitter[0m
2025-04-11T19:23:12.8046058Z [0m    chain promise[0m
2025-04-11T19:23:12.8056929Z [0m      without error[0m
2025-04-11T19:23:12.8111784Z       [32m  [32mâœ”[39m[0m[90m two args[0m
2025-04-11T19:23:12.8198652Z       [32m  [32mâœ”[39m[0m[90m more args[0m
2025-04-11T19:23:12.8252553Z [0m      with error[0m
2025-04-11T19:23:12.8307206Z       [32m  [32mâœ”[39m[0m[90m without event emitter[0m
2025-04-11T19:23:12.8394451Z       [32m  [32mâœ”[39m[0m[90m with event emitter[0m
2025-04-11T19:23:12.8469238Z 
2025-04-11T19:23:12.8469643Z [0m  castArrayFilters[0m
2025-04-11T19:23:12.8509934Z   [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:23:12.8558486Z   [32m  [32mâœ”[39m[0m[90m casts multiple[0m
2025-04-11T19:23:12.8607257Z   [32m  [32mâœ”[39m[0m[90m casts on multiple fields[0m
2025-04-11T19:23:12.8656809Z   [32m  [32mâœ”[39m[0m[90m sane error on same filter twice[0m
2025-04-11T19:23:12.8705369Z   [32m  [32mâœ”[39m[0m[90m using $in (gh-7431)[0m
2025-04-11T19:23:12.8754687Z   [32m  [32mâœ”[39m[0m[90m all positional operator works (gh-7540)[0m
2025-04-11T19:23:12.8803153Z   [32m  [32mâœ”[39m[0m[90m handles deeply nested arrays (gh-7603)[0m
2025-04-11T19:23:12.8852852Z   [32m  [32mâœ”[39m[0m[90m respects `strictQuery` option (gh-7728)[0m
2025-04-11T19:23:12.8898836Z   [32m  [32mâœ”[39m[0m[90m respects `strict` override (gh-11062)[0m
2025-04-11T19:23:12.8944633Z   [32m  [32mâœ”[39m[0m[90m respects `$or` option (gh-10696)[0m
2025-04-11T19:23:12.8994410Z   [32m  [32mâœ”[39m[0m[90m respects global strictQuery option (gh-11836)[0m
2025-04-11T19:23:12.9049667Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators (gh-12565)[0m
2025-04-11T19:23:12.9101563Z   [32m  [32mâœ”[39m[0m[90m correctly casts array of strings underneath doc array (gh-12565)[0m
2025-04-11T19:23:12.9133587Z 
2025-04-11T19:23:12.9134354Z [0m  getSubdocumentStrictValue[0m
2025-04-11T19:23:12.9169729Z   [32m  [32mâœ”[39m[0m[90m returns top-level document if no subdocs[0m
2025-04-11T19:23:12.9204823Z   [32m  [32mâœ”[39m[0m[90m picks up single nested subdocs along the path[0m
2025-04-11T19:23:12.9251838Z   [32m  [32mâœ”[39m[0m[90m picks up document arrays[0m
2025-04-11T19:23:12.9298411Z   [32m  [32mâœ”[39m[0m[90m picks up doubly nested subdocuments[0m
2025-04-11T19:23:12.9345069Z   [32m  [32mâœ”[39m[0m[90m picks up single nested subdocs under document arrays[0m
2025-04-11T19:23:12.9377667Z 
2025-04-11T19:23:12.9378089Z [0m  setDefaultsOnInsert[0m
2025-04-11T19:23:12.9414062Z   [32m  [32mâœ”[39m[0m[90m properly ignores nested paths (gh-6665)[0m
2025-04-11T19:23:12.9460575Z   [32m  [32mâœ”[39m[0m[90m ignores defaults underneath single nested subdocs (gh-10660)[0m
2025-04-11T19:23:12.9510445Z   [32m  [32mâœ”[39m[0m[90m ignores defaults underneath maps (gh-11235)[0m
2025-04-11T19:23:12.9555889Z   [32m  [32mâœ”[39m[0m[90m sets default if sibling of dotted path is $set (gh-11668)[0m
2025-04-11T19:23:12.9602188Z   [32m  [32mâœ”[39m[0m[90m skips default if parent is $set (gh-12279)[0m
2025-04-11T19:23:12.9634220Z 
2025-04-11T19:23:12.9634638Z [0m  isSimpleValidator[0m
2025-04-11T19:23:12.9667851Z   [32m  [32mâœ”[39m[0m[90m empty object[0m
2025-04-11T19:23:12.9711887Z   [32m  [32mâœ”[39m[0m[90m object with one primitive attribute[0m
2025-04-11T19:23:12.9756176Z   [32m  [32mâœ”[39m[0m[90m object with one simple array attribute[0m
2025-04-11T19:23:12.9799742Z   [32m  [32mâœ”[39m[0m[90m object with some native objects[0m
2025-04-11T19:23:12.9843387Z   [32m  [32mâœ”[39m[0m[90m object with one sub object[0m
2025-04-11T19:23:12.9887540Z   [32m  [32mâœ”[39m[0m[90m object with one attribute of type MongooseDocumentArray[0m
2025-04-11T19:23:12.9919860Z 
2025-04-11T19:23:12.9920528Z [0m  isMongooseObject[0m
2025-04-11T19:23:12.9954815Z   [32m  [32mâœ”[39m[0m[90m is when value.$__ != null[0m
2025-04-11T19:23:13.0000350Z   [32m  [32mâœ”[39m[0m[90m is when value is a MongooseArray[0m
2025-04-11T19:23:13.0044815Z   [32m  [32mâœ”[39m[0m[90m is when value.isMongooseBuffer is truthy[0m
2025-04-11T19:23:13.0088284Z   [32m  [32mâœ”[39m[0m[90m is when value.$isMongooseMap is truthy[0m
2025-04-11T19:23:13.0134812Z   [32m  [32mâœ”[39m[0m[90m is not when anything else[0m
2025-04-11T19:23:13.0167381Z 
2025-04-11T19:23:13.0167678Z [0m  eachAsync()[0m
2025-04-11T19:23:14.0922800Z   [32m  [32mâœ”[39m[0m[90m exhausts large cursor without parallel calls (gh-8235)[0m[31m (1073ms)[0m
2025-04-11T19:23:14.3046695Z   [32m  [32mâœ”[39m[0m[90m waits until the end before resolving the promise (gh-8352)[0m[31m (208ms)[0m
2025-04-11T19:23:14.3204001Z   [32m  [32mâœ”[39m[0m[90m it processes the documents in batches successfully[0m
2025-04-11T19:23:14.3359041Z   [32m  [32mâœ”[39m[0m[90m it processes the documents in batches even if the batch size % document count is not zero successfully[0m
2025-04-11T19:23:14.3512097Z   [32m  [32mâœ”[39m[0m[90m it processes the documents in batches with the parallel option provided[0m
2025-04-11T19:23:14.3603097Z   [32m  [32mâœ”[39m[0m[90m executes all documents and aggregates errors if continueOnError set (gh-6355)[0m
2025-04-11T19:23:14.3658942Z   [32m  [32mâœ”[39m[0m[90m returns aggregated error fetching documents with continueOnError (gh-6355)[0m
2025-04-11T19:23:14.5820691Z   [32m  [32mâœ”[39m[0m[90m avoids mutating document batch with parallel (gh-12652)[0m[31m (211ms)[0m
2025-04-11T19:23:14.5897969Z   [32m  [32mâœ”[39m[0m[90m using AbortSignal (gh-12173)[0m
2025-04-11T19:23:14.5930537Z 
2025-04-11T19:23:14.5931060Z [0m  isBsonType[0m
2025-04-11T19:23:14.5964737Z   [32m  [32mâœ”[39m[0m[90m true for any object with _bsontype property equal typename[0m
2025-04-11T19:23:14.6008530Z   [32m  [32mâœ”[39m[0m[90m true for any object without _bsontype property and undefined typename[0m
2025-04-11T19:23:14.6052252Z   [32m  [32mâœ”[39m[0m[90m false for any object with _bsontype property different of typename[0m
2025-04-11T19:23:14.6095659Z   [32m  [32mâœ”[39m[0m[90m false for any object without _bsontype property[0m
2025-04-11T19:23:14.6139962Z   [32m  [32mâœ”[39m[0m[90m true for Decimal128[0m
2025-04-11T19:23:14.6183856Z   [32m  [32mâœ”[39m[0m[90m true for ObjectId[0m
2025-04-11T19:23:14.6228076Z   [32m  [32mâœ”[39m[0m[90m true for Double[0m
2025-04-11T19:23:14.6272313Z   [32m  [32mâœ”[39m[0m[90m true for Int32[0m
2025-04-11T19:23:14.6304911Z 
2025-04-11T19:23:14.6305444Z [0m  getSchemaTypes[0m
2025-04-11T19:23:14.6351334Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators (gh-5970)[0m
2025-04-11T19:23:14.6408612Z   [32m  [32mâœ”[39m[0m[90m multiple embedded discriminators (gh-6064)[0m
2025-04-11T19:23:14.6466318Z   [32m  [32mâœ”[39m[0m[90m handles already populated paths (gh-6798)[0m
2025-04-11T19:23:14.6517051Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators in nested arrays (gh-9984)[0m
2025-04-11T19:23:14.6564317Z   [32m  [32mâœ”[39m[0m[90m finds path underneath nested subdocument with map of mixed (gh-12530)[0m
2025-04-11T19:23:14.6596384Z 
2025-04-11T19:23:14.6596936Z [0m  cleanPositionalOperators[0m
2025-04-11T19:23:14.6630379Z   [32m  [32mâœ”[39m[0m[90m replaces trailing array filter[0m
2025-04-11T19:23:14.6673824Z   [32m  [32mâœ”[39m[0m[90m replaces trailing $[0m
2025-04-11T19:23:14.6717409Z   [32m  [32mâœ”[39m[0m[90m replaces interior array filters[0m
2025-04-11T19:23:14.6761150Z   [32m  [32mâœ”[39m[0m[90m replaces interior elemMatch[0m
2025-04-11T19:23:14.6793184Z 
2025-04-11T19:23:14.6793620Z [0m  setDottedPath[0m
2025-04-11T19:23:14.6826886Z   [32m  [32mâœ”[39m[0m[90m setDottedPath root element[0m
2025-04-11T19:23:14.6871386Z   [32m  [32mâœ”[39m[0m[90m setDottedPath sub element[0m
2025-04-11T19:23:14.6903982Z 
2025-04-11T19:23:14.6904553Z [0m  isSubpath[0m
2025-04-11T19:23:14.6938678Z   [32m  [32mâœ”[39m[0m[90m handles single-part paths[0m
2025-04-11T19:23:14.6982192Z   [32m  [32mâœ”[39m[0m[90m handles multi-part paths[0m
2025-04-11T19:23:14.7014255Z 
2025-04-11T19:23:14.7014784Z [0m  getPath()[0m
2025-04-11T19:23:14.7051349Z   [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:23:14.7098581Z   [32m  [32mâœ”[39m[0m[90m nested arrays[0m
2025-04-11T19:23:14.7130545Z 
2025-04-11T19:23:14.7131136Z [0m  getModelsMapForPopulate[0m
2025-04-11T19:23:14.7218242Z   [32m  [32mâœ”[39m[0m[90m should error on missing options on populate[0m
2025-04-11T19:23:14.7306408Z 
2025-04-11T19:23:14.7306853Z [0m  isExclusive[0m
2025-04-11T19:23:14.7340672Z   [32m  [32mâœ”[39m[0m[90m handles $elemMatch (gh-14893)[0m
2025-04-11T19:23:14.7361694Z 
2025-04-11T19:23:14.7362052Z [0m  applyProjection[0m
2025-04-11T19:23:14.7397338Z   [32m  [32mâœ”[39m[0m[90m handles deep inclusive projections[0m
2025-04-11T19:23:14.7442010Z   [32m  [32mâœ”[39m[0m[90m handles deep exclusive projections[0m
2025-04-11T19:23:14.7487156Z   [32m  [32mâœ”[39m[0m[90m handles projections underneath arrays (gh-14680)[0m
2025-04-11T19:23:14.7519060Z 
2025-04-11T19:23:14.7519394Z [0m  isObject[0m
2025-04-11T19:23:14.7530678Z [0m    true for[0m
2025-04-11T19:23:14.7575012Z     [32m  [32mâœ”[39m[0m[90m {}[0m
2025-04-11T19:23:14.7640269Z     [32m  [32mâœ”[39m[0m[90m Buffer[0m
2025-04-11T19:23:14.7705310Z     [32m  [32mâœ”[39m[0m[90m Object[0m
2025-04-11T19:23:14.7748653Z [0m    false for[0m
2025-04-11T19:23:14.7792385Z     [32m  [32mâœ”[39m[0m[90m ""[0m
2025-04-11T19:23:14.7857600Z     [32m  [32mâœ”[39m[0m[90m /.*/[0m
2025-04-11T19:23:14.7922430Z     [32m  [32mâœ”[39m[0m[90m [][0m
2025-04-11T19:23:14.7987494Z     [32m  [32mâœ”[39m[0m[90m Array[0m
2025-04-11T19:23:14.8052804Z     [32m  [32mâœ”[39m[0m[90m Function[0m
2025-04-11T19:23:14.8117779Z     [32m  [32mâœ”[39m[0m[90m RegExp[0m
2025-04-11T19:23:14.8182773Z     [32m  [32mâœ”[39m[0m[90m String[0m
2025-04-11T19:23:14.8247774Z     [32m  [32mâœ”[39m[0m[90m "[object Object]"[0m
2025-04-11T19:23:14.8301473Z 
2025-04-11T19:23:14.8301790Z [0m  arrayDepth[0m
2025-04-11T19:23:14.8335187Z   [32m  [32mâœ”[39m[0m[90m non-array[0m
2025-04-11T19:23:14.8378847Z   [32m  [32mâœ”[39m[0m[90m simple array with no element[0m
2025-04-11T19:23:14.8422791Z   [32m  [32mâœ”[39m[0m[90m simple array with one element[0m
2025-04-11T19:23:14.8466559Z   [32m  [32mâœ”[39m[0m[90m simple array with many elements[0m
2025-04-11T19:23:14.8510940Z   [32m  [32mâœ”[39m[0m[90m simple array with many elements[0m
2025-04-11T19:23:14.8554482Z   [32m  [32mâœ”[39m[0m[90m complex array with one sub-Array[0m
2025-04-11T19:23:14.8598404Z   [32m  [32mâœ”[39m[0m[90m complex array with deeply nested sub-Arrays[0m
2025-04-11T19:23:14.8642111Z   [32m  [32mâœ”[39m[0m[90m complex array with deeply nested sub-Arrays[0m
2025-04-11T19:23:14.8685770Z   [32m  [32mâœ”[39m[0m[90m complex array with deeply nested sub-Arrays[0m
2025-04-11T19:23:14.8717572Z 
2025-04-11T19:23:14.8718058Z [0m  getDeepestSubdocumentForPath[0m
2025-04-11T19:23:14.8756552Z   [32m  [32mâœ”[39m[0m[90m returns top-level document if no subdocs[0m
2025-04-11T19:23:14.8808343Z   [32m  [32mâœ”[39m[0m[90m picks up single nested subdocs along the path[0m
2025-04-11T19:23:14.8859688Z   [32m  [32mâœ”[39m[0m[90m picks up document arrays[0m
2025-04-11T19:23:14.8911550Z   [32m  [32mâœ”[39m[0m[90m picks up doubly nested subdocuments[0m
2025-04-11T19:23:14.8962668Z   [32m  [32mâœ”[39m[0m[90m returns deepest non-null subdoc[0m
2025-04-11T19:23:14.9016044Z   [32m  [32mâœ”[39m[0m[90m picks up single nested subdocs under document arrays[0m
2025-04-11T19:23:14.9059875Z 
2025-04-11T19:23:14.9060482Z [0m  castUpdate[0m
2025-04-11T19:23:14.9096299Z   [32m  [32mâœ”[39m[0m[90m avoids adding `$each` if `$addToSet` on mixed array (gh-11284)[0m
2025-04-11T19:23:14.9146074Z   [32m  [32mâœ”[39m[0m[90m casts the update correctly when target discriminator type is missing[0m
2025-04-11T19:23:14.9177820Z 
2025-04-11T19:23:14.9178187Z [0m  isIndexSpecEqual[0m
2025-04-11T19:23:14.9212697Z   [32m  [32mâœ”[39m[0m[90m should return true for equal index specifications[0m
2025-04-11T19:23:14.9256318Z   [32m  [32mâœ”[39m[0m[90m should return false for different key order[0m
2025-04-11T19:23:14.9300315Z   [32m  [32mâœ”[39m[0m[90m should return false for different index keys[0m
2025-04-11T19:23:14.9331914Z 
2025-04-11T19:23:14.9332161Z [0m  get[0m
2025-04-11T19:23:14.9365801Z   [32m  [32mâœ”[39m[0m[90m gets dotted properties[0m
2025-04-11T19:23:14.9409657Z   [32m  [32mâœ”[39m[0m[90m returns default on undefined[0m
2025-04-11T19:23:14.9442731Z   [32m  [32mâœ”[39m[0m[90m returns default on bottom null[0m
2025-04-11T19:23:14.9486972Z   [32m  [32mâœ”[39m[0m[90m returns default on top-level null[0m
2025-04-11T19:23:14.9530755Z   [32m  [32mâœ”[39m[0m[90m works with maps[0m
2025-04-11T19:23:14.9575033Z   [32m  [32mâœ”[39m[0m[90m works with dotted at top level[0m
2025-04-11T19:23:14.9618656Z   [32m  [32mâœ”[39m[0m[90m works with dotted nested[0m
2025-04-11T19:23:14.9640313Z 
2025-04-11T19:23:14.9640766Z [0m  getRelatedIndexes[0m
2025-04-11T19:23:14.9665380Z [0m    getRelatedSchemaIndexes[0m
2025-04-11T19:23:14.9716383Z     [32m  [32mâœ”[39m[0m[90m with base model, no discriminator, it gets all indexes[0m
2025-04-11T19:23:14.9999528Z     [32m  [32mâœ”[39m[0m[90m with base model that has discriminator, it ignores discriminator indexes[0m
2025-04-11T19:23:15.0395574Z     [32m  [32mâœ”[39m[0m[90m with base model that has discriminator, it includes discriminator indexes that only checks for existence[0m
2025-04-11T19:23:15.0607687Z     [32m  [32mâœ”[39m[0m[90m with discriminator model, it only gets discriminator indexes[0m
2025-04-11T19:23:15.0902621Z [0m    getRelatedDBIndexes[0m
2025-04-11T19:23:15.0951693Z     [32m  [32mâœ”[39m[0m[90m with base model, no discriminator, it gets all indexes[0m
2025-04-11T19:23:15.1071301Z     [32m  [32mâœ”[39m[0m[90m with base model that has discriminator, it ignores discriminator indexes[0m
2025-04-11T19:23:15.1387582Z     [32m  [32mâœ”[39m[0m[90m with discriminator model, it only gets discriminator indexes[0m
2025-04-11T19:23:15.1732809Z 
2025-04-11T19:23:15.1733382Z [0m  modifiedPaths, bad update value which has circular reference field[0m
2025-04-11T19:23:15.1766339Z   [32m  [32mâœ”[39m[0m[90m update value can be null[0m
2025-04-11T19:23:15.1813394Z   [32m  [32mâœ”[39m[0m[90m values with obvious error on circular reference[0m
2025-04-11T19:23:15.1857505Z   [32m  [32mâœ”[39m[0m[90m values with multiple references which are not circular should succeed[0m
2025-04-11T19:23:15.1889453Z 
2025-04-11T19:23:15.1889812Z [0m  isInclusive[0m
2025-04-11T19:23:15.1923457Z   [32m  [32mâœ”[39m[0m[90m handles $elemMatch (gh-14893)[0m
2025-04-11T19:23:15.1955539Z 
2025-04-11T19:23:15.1955973Z [0m  applyWriteConcern[0m
2025-04-11T19:23:15.2000935Z   [32m  [32mâœ”[39m[0m[90m should not overwrite user specified writeConcern options (gh-13592)[0m
2025-04-11T19:23:15.2057046Z 
2025-04-11T19:23:15.2057476Z [0m  sanitizeFilter[0m
2025-04-11T19:23:15.2092057Z   [32m  [32mâœ”[39m[0m[90m throws when filter includes a query selector[0m
2025-04-11T19:23:15.2136366Z   [32m  [32mâœ”[39m[0m[90m ignores explicitly defined query selectors[0m
2025-04-11T19:23:15.2181693Z   [32m  [32mâœ”[39m[0m[90m handles $and and $or[0m
2025-04-11T19:23:15.2214024Z 
2025-04-11T19:23:15.2214414Z [0m  isAsyncFunction[0m
2025-04-11T19:23:15.2247786Z   [32m  [32mâœ”[39m[0m[90m should return false for non-functions[0m
2025-04-11T19:23:15.2291703Z   [32m  [32mâœ”[39m[0m[90m should return false for sync function[0m
2025-04-11T19:23:15.2335457Z   [32m  [32mâœ”[39m[0m[90m should return true for async function[0m
2025-04-11T19:23:15.2379218Z   [32m  [32mâœ”[39m[0m[90m should return false for sync function returning a Promise[0m
2025-04-11T19:23:15.2411230Z 
2025-04-11T19:23:15.2411614Z [0m  castexpr[0m
2025-04-11T19:23:15.2453783Z   [32m  [32mâœ”[39m[0m[90m casts comparisons[0m
2025-04-11T19:23:15.2502409Z   [32m  [32mâœ”[39m[0m[90m casts conditions[0m
2025-04-11T19:23:15.2547359Z   [32m  [32mâœ”[39m[0m[90m casts boolean expressions[0m
2025-04-11T19:23:15.2600255Z   [32m  [32mâœ”[39m[0m[90m cast errors[0m
2025-04-11T19:23:15.2649477Z   [32m  [32mâœ”[39m[0m[90m casts $in[0m
2025-04-11T19:23:15.2695823Z   [32m  [32mâœ”[39m[0m[90m casts $not (gh-11689)[0m
2025-04-11T19:23:15.2741694Z   [32m  [32mâœ”[39m[0m[90m casts $round (gh-13881)[0m
2025-04-11T19:23:15.2787472Z   [32m  [32mâœ”[39m[0m[90m casts $switch (gh-14751)[0m
2025-04-11T19:23:15.2819572Z 
2025-04-11T19:23:15.2819958Z [0m  applyTimestampsToChildren[0m
2025-04-11T19:23:15.2860438Z   [32m  [32mâœ”[39m[0m[90m applies timestamps to nested subdocs within a $push (gh-11775)[0m
2025-04-11T19:23:15.2892303Z 
2025-04-11T19:23:15.2892622Z [0m  getFunctionName[0m
2025-04-11T19:23:15.2925873Z   [32m  [32mâœ”[39m[0m[90m return fn.name[0m
2025-04-11T19:23:15.2969434Z   [32m  [32mâœ”[39m[0m[90m return function name[0m
2025-04-11T19:23:15.3021783Z   [32m  [32mâœ”[39m[0m[90m return function functionName[0m
2025-04-11T19:23:15.3065747Z   [32m  [32mâœ”[39m[0m[90m return undefined for arrow function[0m
2025-04-11T19:23:15.3097873Z 
2025-04-11T19:23:15.3098255Z [0m  selectPopulatedFields[0m
2025-04-11T19:23:15.3128618Z   [32m  [32mâœ”[39m[0m[90m selects refPath[0m
2025-04-11T19:23:15.3172802Z   [32m  [32mâœ”[39m[0m[90m adds refPath to projection if not deselected by user in exclusive projection[0m
2025-04-11T19:23:15.3204733Z 
2025-04-11T19:23:15.3205351Z [0m  clone[0m
2025-04-11T19:23:15.3240016Z   [32m  [32mâœ”[39m[0m[90m retains RegExp options gh-1355[0m
2025-04-11T19:23:15.3284079Z   [32m  [32mâœ”[39m[0m[90m clones objects created with Object.create(null)[0m
2025-04-11T19:23:15.3328171Z   [32m  [32mâœ”[39m[0m[90m doesnt minimize empty objects in arrays to null (gh-7322)[0m
2025-04-11T19:23:15.3372590Z   [32m  [32mâœ”[39m[0m[90m skips cloning types that have `toBSON()` if `bson` is set (gh-8299)[0m
2025-04-11T19:23:15.3393877Z [0m    falsy[0m
2025-04-11T19:23:15.3437824Z     [32m  [32mâœ”[39m[0m[90m is null when null[0m
2025-04-11T19:23:15.3502899Z     [32m  [32mâœ”[39m[0m[90m is false when false[0m
2025-04-11T19:23:15.3567916Z     [32m  [32mâœ”[39m[0m[90m is undefined when undefined[0m
2025-04-11T19:23:15.3632825Z     [32m  [32mâœ”[39m[0m[90m is 0 when 0[0m
2025-04-11T19:23:15.3675951Z [0m    Array[0m
2025-04-11T19:23:15.3721042Z     [32m  [32mâœ”[39m[0m[90m clones first level[0m
2025-04-11T19:23:15.3786408Z     [32m  [32mâœ”[39m[0m[90m clones deeper[0m
2025-04-11T19:23:15.3829888Z [0m    mongoose object[0m
2025-04-11T19:23:15.3874270Z     [32m  [32mâœ”[39m[0m[90m use toObject[0m
2025-04-11T19:23:15.3939839Z     [32m  [32mâœ”[39m[0m[90m use toJSON[0m
2025-04-11T19:23:15.4006089Z     [32m  [32mâœ”[39m[0m[90m skipSingleNestedGetters[0m
2025-04-11T19:23:15.4049218Z [0m    global objects[0m
2025-04-11T19:23:15.4060566Z [0m      constructor is Object[0m
2025-04-11T19:23:15.4115333Z       [32m  [32mâœ”[39m[0m[90m !minimize || isArrayChild[0m
2025-04-11T19:23:15.4202185Z       [32m  [32mâœ”[39m[0m[90m !constructor && !minimize || isArrayChild[0m
2025-04-11T19:23:15.4289029Z       [32m  [32mâœ”[39m[0m[90m minimize && !isArrayChild && hasKey[0m
2025-04-11T19:23:15.4365014Z       [32m  [32mâœ”[39m[0m[90m minimize and !isArrayChild && !hasKey[0m
2025-04-11T19:23:15.4418849Z [0m      constructor is Data[0m
2025-04-11T19:23:15.4462686Z       [32m  [32mâœ”[39m[0m[90m return new equal date [0m
2025-04-11T19:23:15.4516557Z [0m      constructor is RegExp[0m
2025-04-11T19:23:15.4571982Z       [32m  [32mâœ”[39m[0m[90m return new equal date [0m
2025-04-11T19:23:15.4636560Z [0m    mongo object[0m
2025-04-11T19:23:15.4681051Z     [32m  [32mâœ”[39m[0m[90m is instance of ObjectId[0m
2025-04-11T19:23:15.4724632Z [0m    schema type[0m
2025-04-11T19:23:15.4768644Z     [32m  [32mâœ”[39m[0m[90m have schemaTypeSymbol property[0m
2025-04-11T19:23:15.4811915Z [0m    bson[0m
2025-04-11T19:23:15.4857662Z     [32m  [32mâœ”[39m[0m[90m Decimal128[0m
2025-04-11T19:23:15.4923934Z     [32m  [32mâœ”[39m[0m[90m Decimal128 (flatternDecimal)[0m
2025-04-11T19:23:15.4989389Z     [32m  [32mâœ”[39m[0m[90m does nothing[0m
2025-04-11T19:23:15.5032461Z [0m    any else[0m
2025-04-11T19:23:15.5076482Z     [32m  [32mâœ”[39m[0m[90m valueOf[0m
2025-04-11T19:23:15.5141975Z     [32m  [32mâœ”[39m[0m[90m cloneObject[0m
2025-04-11T19:23:15.5195680Z 
2025-04-11T19:23:15.5195987Z [0m  isIndexEqual[0m
2025-04-11T19:23:15.5231059Z   [32m  [32mâœ”[39m[0m[90m ignores default collation options when comparing collations (gh-8994)[0m
2025-04-11T19:23:15.5275191Z   [32m  [32mâœ”[39m[0m[90m works when MongoDB index has collation but Mongoose index doesn't (gh-9224)[0m
2025-04-11T19:23:15.5319211Z   [32m  [32mâœ”[39m[0m[90m handles text indexes (gh-9225)[0m
2025-04-11T19:23:15.5351183Z 
2025-04-11T19:23:15.5351551Z [0m  stringifyFunctionOperators[0m
2025-04-11T19:23:15.5385960Z   [32m  [32mâœ”[39m[0m[90m converts accumulator args to strings (gh-9364)[0m
2025-04-11T19:23:15.5430300Z   [32m  [32mâœ”[39m[0m[90m converts function args to strings (gh-9897)[0m
2025-04-11T19:23:15.5462428Z 
2025-04-11T19:23:15.5462819Z [0m  prepareDiscriminatorPipeline[0m
2025-04-11T19:23:15.5496636Z   [32m  [32mâœ”[39m[0m[90m handles case where initial $match includes the discriminator key (gh-12478)[0m
2025-04-11T19:23:15.5528539Z 
2025-04-11T19:23:15.5528913Z [0m  removeUnusedArrayFilters[0m
2025-04-11T19:23:15.5563320Z   [32m  [32mâœ”[39m[0m[90m respects `$or` (gh-10696)[0m
2025-04-11T19:23:15.5595373Z 
2025-04-11T19:23:15.5595778Z [0m  Query helpers[0m
2025-04-11T19:23:15.5606861Z [0m    selectPopulatedFields[0m
2025-04-11T19:23:15.5651891Z     [32m  [32mâœ”[39m[0m[90m handles nested populate if parent key is projected in (gh-5669)[0m
2025-04-11T19:23:15.5717027Z     [32m  [32mâœ”[39m[0m[90m handles nested populate if parent key is projected out (gh-5669)[0m
2025-04-11T19:23:15.5782330Z     [32m  [32mâœ”[39m[0m[90m handle explicitly excluded paths (gh-7383)[0m
2025-04-11T19:23:15.5847766Z     [32m  [32mâœ”[39m[0m[90m handles paths selected with elemMatch (gh-9973)[0m
2025-04-11T19:23:15.5901394Z 
2025-04-11T19:23:15.5901917Z [0m  Map[0m
2025-04-11T19:23:15.6055281Z   [32m  [32mâœ”[39m[0m[90m validation[0m
2025-04-11T19:23:15.6122303Z   [32m  [32mâœ”[39m[0m[90m deep set[0m
2025-04-11T19:23:15.6329920Z   [32m  [32mâœ”[39m[0m[90m supports delete() (gh-7743)[0m
2025-04-11T19:23:15.6584310Z   [32m  [32mâœ”[39m[0m[90m query casting[0m
2025-04-11T19:23:15.6750324Z   [32m  [32mâœ”[39m[0m[90m defaults[0m
2025-04-11T19:23:15.6910580Z   [32m  [32mâœ”[39m[0m[90m validation[0m
2025-04-11T19:23:15.7088810Z   [32m  [32mâœ”[39m[0m[90m with single nested subdocs[0m
2025-04-11T19:23:15.7325906Z   [32m  [32mâœ”[39m[0m[90m discriminators[0m
2025-04-11T19:23:15.7535080Z   [32m  [32mâœ”[39m[0m[90m embedded discriminators[0m
2025-04-11T19:23:15.7703046Z   [32m  [32mâœ”[39m[0m[90m toJSON seralizes map paths (gh-6478)[0m
2025-04-11T19:23:15.7914869Z   [32m  [32mâœ”[39m[0m[90m updating map doesnt crash (gh-6750)[0m
2025-04-11T19:23:15.8088030Z   [32m  [32mâœ”[39m[0m[90m works with sub doc hooks (gh-6938)[0m
2025-04-11T19:23:15.8266752Z   [32m  [32mâœ”[39m[0m[90m array of mixed maps (gh-6995)[0m
2025-04-11T19:23:15.8449659Z   [32m  [32mâœ”[39m[0m[90m only runs setters once on init (gh-7272)[0m
2025-04-11T19:23:15.8642678Z   [32m  [32mâœ”[39m[0m[90m init then set marks correct path as modified (gh-7321)[0m
2025-04-11T19:23:15.8809946Z   [32m  [32mâœ”[39m[0m[90m nested maps (gh-7630)[0m
2025-04-11T19:23:15.8879896Z   [32m  [32mâœ”[39m[0m[90m get full path in validator with `propsParameter` (gh-7447)[0m
2025-04-11T19:23:15.8985357Z   [32m  [32mâœ”[39m[0m[90m treats `of` as a schema if typeKey is not set (gh-7859)[0m
2025-04-11T19:23:15.9093299Z   [32m  [32mâœ”[39m[0m[90m works with clone() (gh-8357)[0m
2025-04-11T19:23:15.9201869Z   [32m  [32mâœ”[39m[0m[90m maps of single nested docs with inline _id (gh-8424)[0m
2025-04-11T19:23:15.9424452Z   [32m  [32mâœ”[39m[0m[90m avoids marking path as modified if setting to same value (gh-8652)[0m
2025-04-11T19:23:15.9612282Z   [32m  [32mâœ”[39m[0m[90m handles setting map value to spread document (gh-8652)[0m
2025-04-11T19:23:15.9678945Z   [32m  [32mâœ”[39m[0m[90m runs getters on map values (gh-8730)[0m
2025-04-11T19:23:15.9793673Z   [32m  [32mâœ”[39m[0m[90m handles validation of document array with maps and nested paths (gh-8767)[0m
2025-04-11T19:23:16.0004821Z   [32m  [32mâœ”[39m[0m[90m persists `.clear()` (gh-9493)[0m
2025-04-11T19:23:16.0179013Z   [32m  [32mâœ”[39m[0m[90m supports `null` in map of subdocuments (gh-9628)[0m
2025-04-11T19:23:16.0337263Z   [32m  [32mâœ”[39m[0m[90m tracks changes correctly (gh-9811)[0m
2025-04-11T19:23:16.0534847Z   [32m  [32mâœ”[39m[0m[90m handles map of arrays (gh-9813)[0m
2025-04-11T19:23:16.0866342Z   [32m  [32mâœ”[39m[0m[90m can populate map of subdocs with doc array using ref function (gh-10584)[0m
2025-04-11T19:23:16.0940653Z   [32m  [32mâœ”[39m[0m[90m propagates `flattenMaps` to nested maps (gh-10653)[0m
2025-04-11T19:23:16.1235096Z   [32m  [32mâœ”[39m[0m[90m handles populating map of arrays (gh-12494)[0m
2025-04-11T19:23:16.1420577Z   [32m  [32mâœ”[39m[0m[90m clears nested changes in subdocs (gh-15108)[0m
2025-04-11T19:23:16.1605813Z   [32m  [32mâœ”[39m[0m[90m clears nested changes in doc arrays (gh-15108)[0m
2025-04-11T19:23:16.1812198Z   [32m  [32mâœ”[39m[0m[90m handles loading and modifying map of document arrays (gh-15196)[0m
2025-04-11T19:23:16.1850490Z [0m    populate[0m
2025-04-11T19:23:16.2086453Z     [32m  [32mâœ”[39m[0m[90m populate individual path[0m
2025-04-11T19:23:16.2354402Z     [32m  [32mâœ”[39m[0m[90m populate entire map[0m
2025-04-11T19:23:16.2607632Z     [32m  [32mâœ”[39m[0m[90m populate entire map in doc[0m
2025-04-11T19:23:16.2852507Z     [32m  [32mâœ”[39m[0m[90m avoid populating as map if populate on obj (gh-6460) (gh-8157)[0m
2025-04-11T19:23:16.3132453Z     [32m  [32mâœ”[39m[0m[90m handles setting populated path to doc and then saving (gh-7745)[0m
2025-04-11T19:23:16.3412255Z     [32m  [32mâœ”[39m[0m[90m handles populating path of subdoc (gh-9359)[0m
2025-04-11T19:23:16.3508869Z 
2025-04-11T19:23:16.3509189Z [0m  geojson[0m
2025-04-11T19:23:16.3687719Z   [32m  [32mâœ”[39m[0m[90m driver query[0m
2025-04-11T19:23:16.3881895Z   [32m  [32mâœ”[39m[0m[90m within helper[0m
2025-04-11T19:23:16.4080422Z   [32m  [32mâœ”[39m[0m[90m index[0m
2025-04-11T19:23:16.4286660Z   [32m  [32mâœ”[39m[0m[90m near[0m
2025-04-11T19:23:16.4354665Z 
2025-04-11T19:23:16.4361107Z [0m  document[0m
2025-04-11T19:23:16.4415718Z   [32m  [32mâœ”[39m[0m[90m test shortcut setters[0m
2025-04-11T19:23:16.4473795Z   [32m  [32mâœ”[39m[0m[90m test accessor of id[0m
2025-04-11T19:23:16.4533545Z   [32m  [32mâœ”[39m[0m[90m test shortcut of id hexString[0m
2025-04-11T19:23:16.4614490Z   [32m  [32mâœ”[39m[0m[90m toObject options[0m
2025-04-11T19:23:16.5033482Z   [32m  [32mâœ”[39m[0m[90m toObject transform[0m
2025-04-11T19:23:16.5110380Z   [32m  [32mâœ”[39m[0m[90m propagates toObject transform function to all subdocuments (gh-14589)[0m
2025-04-11T19:23:16.5217377Z   [32m  [32mâœ”[39m[0m[90m disabling aliases in toObject options (gh-7548)[0m
2025-04-11T19:23:16.5455677Z   [32m  [32mâœ”[39m[0m[90m can save multiple times with changes to complex subdocuments (gh-8531)[0m
2025-04-11T19:23:16.5643289Z   [32m  [32mâœ”[39m[0m[90m saves even if `_id` is null (gh-6406)[0m
2025-04-11T19:23:16.5786206Z   [32m  [32mâœ”[39m[0m[90m allows you to skip validation on save (gh-2981)[0m
2025-04-11T19:23:16.6035262Z   [32m  [32mâœ”[39m[0m[90m doesnt use custom toObject options on save[0m
2025-04-11T19:23:16.6103457Z   [32m  [32mâœ”[39m[0m[90m toObject should not set undefined values to null[0m
2025-04-11T19:23:16.6176575Z   [32m  [32mâœ”[39m[0m[90m methods on embedded docs should work[0m
2025-04-11T19:23:16.6954416Z   [32m  [32mâœ”[39m[0m[90m setting a positional path does not cast value to array[0m
2025-04-11T19:23:16.7042487Z   [32m  [32mâœ”[39m[0m[90m no maxListeners warning should occur[0m
2025-04-11T19:23:16.7406673Z   [32m  [32mâœ”[39m[0m[90m unselected required fields should pass validation[0m
2025-04-11T19:23:16.7573642Z   [32m  [32mâœ”[39m[0m[90m #invalidate[0m
2025-04-11T19:23:16.7641164Z   [32m  [32mâœ”[39m[0m[90m properly calls queue functions (gh-2856)[0m
2025-04-11T19:23:16.7877376Z   [32m  [32mâœ”[39m[0m[90m does not save duplicate items after two saves (gh-6900)[0m
2025-04-11T19:23:16.7957517Z   [32m  [32mâœ”[39m[0m[90m validateSync() on embedded doc (gh-6931)[0m
2025-04-11T19:23:16.8064222Z   [32m  [32mâœ”[39m[0m[90m retains user-defined key order with nested docs (gh-6944)[0m
2025-04-11T19:23:16.8274318Z   [32m  [32mâœ”[39m[0m[90m does not mark modified if setting nested subdoc to same value (gh-7048)[0m
2025-04-11T19:23:16.8448432Z   [32m  [32mâœ”[39m[0m[90m allow saving validation error in db (gh-7127)[0m
2025-04-11T19:23:16.8516974Z   [32m  [32mâœ”[39m[0m[90m handles mixed arrays with all syntaxes (gh-7109)[0m
2025-04-11T19:23:16.8619867Z   [32m  [32mâœ”[39m[0m[90m propsParameter option (gh-7145)[0m
2025-04-11T19:23:16.8731147Z   [32m  [32mâœ”[39m[0m[90m surfaces errors in subdoc pre validate (gh-7187)[0m
2025-04-11T19:23:16.8841782Z   [32m  [32mâœ”[39m[0m[90m runs setter only once when doing .set() underneath single nested (gh-7196)[0m
2025-04-11T19:23:16.9047617Z   [32m  [32mâœ”[39m[0m[90m should enable key with dot(.) on mixed types with checkKeys (gh-7144)[0m
2025-04-11T19:23:16.9225108Z   [32m  [32mâœ”[39m[0m[90m doesnt mark array as modified on init if embedded schema has default (gh-7227)[0m
2025-04-11T19:23:16.9404648Z   [32m  [32mâœ”[39m[0m[90m casts defaults for doc arrays (gh-7337)[0m
2025-04-11T19:23:16.9579387Z   [32m  [32mâœ”[39m[0m[90m updateOne() hooks (gh-7133) (gh-7423)[0m
2025-04-11T19:23:16.9743082Z   [32m  [32mâœ”[39m[0m[90m doesnt mark single nested doc date as modified if setting with string (gh-7264)[0m
2025-04-11T19:23:16.9814099Z   [32m  [32mâœ”[39m[0m[90m handles null `fields` param to constructor (gh-7271)[0m
2025-04-11T19:23:16.9931684Z   [32m  [32mâœ”[39m[0m[90m flattenMaps option for toObject() (gh-10872) (gh-7274) (gh-10486)[0m
2025-04-11T19:23:17.0125750Z   [32m  [32mâœ”[39m[0m[90m flattenObjectIds option for toObject() (gh-13341) (gh-2790)[0m
2025-04-11T19:23:17.0344971Z   [32m  [32mâœ”[39m[0m[90m `collection` property with strict: false (gh-7276)[0m
2025-04-11T19:23:17.0424303Z   [32m  [32mâœ”[39m[0m[90m should validateSync() all elements in doc array (gh-6746)[0m
2025-04-11T19:23:17.0576269Z   [32m  [32mâœ”[39m[0m[90m handles fake constructor (gh-7290)[0m
2025-04-11T19:23:17.0691761Z   [32m  [32mâœ”[39m[0m[90m handles fake __proto__ (gh-7290)[0m
2025-04-11T19:23:17.0891734Z   [32m  [32mâœ”[39m[0m[90m cast error with string path set to array in db (gh-7619)[0m
2025-04-11T19:23:17.1062675Z   [32m  [32mâœ”[39m[0m[90m doesnt crash if nested path with `get()` (gh-7316)[0m
2025-04-11T19:23:17.1259001Z   [32m  [32mâœ”[39m[0m[90m copies atomics from existing document array when setting doc array (gh-7472)[0m
2025-04-11T19:23:17.1462005Z   [32m  [32mâœ”[39m[0m[90m doesnt fail with custom update function (gh-7342)[0m
2025-04-11T19:23:17.1535111Z   [32m  [32mâœ”[39m[0m[90m setters that modify `this` should work on single nested when overwriting (gh-7585)[0m
2025-04-11T19:23:17.1644102Z   [32m  [32mâœ”[39m[0m[90m handles setting embedded doc to Object.assign() from another doc (gh-7645)[0m
2025-04-11T19:23:17.1888776Z   [32m  [32mâœ”[39m[0m[90m setting single nested subdoc with custom date types and getters/setters (gh-7601)[0m
2025-04-11T19:23:17.2063943Z   [32m  [32mâœ”[39m[0m[90m get() and set() underneath alias (gh-7592)[0m
2025-04-11T19:23:17.2130634Z   [32m  [32mâœ”[39m[0m[90m get() with getters: false (gh-7233)[0m
2025-04-11T19:23:17.2243374Z   [32m  [32mâœ”[39m[0m[90m overwriting single nested (gh-7660)[0m
2025-04-11T19:23:17.2354280Z   [32m  [32mâœ”[39m[0m[90m setting path to non-POJO object (gh-7639)[0m
2025-04-11T19:23:17.2457692Z   [32m  [32mâœ”[39m[0m[90m supports setting date properties with strict: false (gh-7907)[0m
2025-04-11T19:23:17.2700905Z   [32m  [32mâœ”[39m[0m[90m supports setting values to undefined with strict: false (gh-15192)[0m
2025-04-11T19:23:17.2793168Z   [32m  [32mâœ”[39m[0m[90m handles .set() on doc array within embedded discriminator (gh-7656)[0m
2025-04-11T19:23:17.2909031Z   [32m  [32mâœ”[39m[0m[90m $isEmpty() (gh-5369)[0m
2025-04-11T19:23:17.3027513Z   [32m  [32mâœ”[39m[0m[90m push() onto discriminator doc array (gh-7704)[0m
2025-04-11T19:23:17.3435146Z   [32m  [32mâœ”[39m[0m[90m doesnt call getter when saving (gh-7719)[0m
2025-04-11T19:23:17.3501111Z   [32m  [32mâœ”[39m[0m[90m skips malformed validators property (gh-7720)[0m
2025-04-11T19:23:17.3759225Z   [32m  [32mâœ”[39m[0m[90m nested set on subdocs works (gh-7748)[0m
2025-04-11T19:23:17.3927247Z   [32m  [32mâœ”[39m[0m[90m does not convert array to object with strict: false (gh-7733)[0m
2025-04-11T19:23:17.4105947Z   [32m  [32mâœ”[39m[0m[90m does not crash with array property named "undefined" (gh-7756)[0m
2025-04-11T19:23:17.4280644Z   [32m  [32mâœ”[39m[0m[90m fires pre save hooks on nested child schemas (gh-7792)[0m
2025-04-11T19:23:17.4352278Z   [32m  [32mâœ”[39m[0m[90m takes message from async custom validator promise rejection (gh-4913)[0m
2025-04-11T19:23:17.4534345Z   [32m  [32mâœ”[39m[0m[90m handles nested properties named `schema` (gh-7831)[0m
2025-04-11T19:23:17.4704897Z   [32m  [32mâœ”[39m[0m[90m handles nested properties named `on` (gh-11656)[0m
2025-04-11T19:23:17.4783963Z   [32m  [32mâœ”[39m[0m[90m copies virtuals from array subdocs when casting array of docs with same schema (gh-7898)[0m
2025-04-11T19:23:17.5026117Z   [32m  [32mâœ”[39m[0m[90m consistent post order traversal for array subdocs (gh-7929)[0m
2025-04-11T19:23:17.5437369Z   [32m  [32mâœ”[39m[0m[90m respects projection for getters (gh-7940)[0m
2025-04-11T19:23:17.5613073Z   [32m  [32mâœ”[39m[0m[90m loads doc with a `once` property successfully (gh-7958)[0m
2025-04-11T19:23:17.5780009Z   [32m  [32mâœ”[39m[0m[90m caster that converts to Number class works (gh-8150)[0m
2025-04-11T19:23:17.5948736Z   [32m  [32mâœ”[39m[0m[90m handles objectids and decimals with strict: false (gh-7973)[0m
2025-04-11T19:23:17.6026423Z   [32m  [32mâœ”[39m[0m[90m allows enum on array of array of strings (gh-7926)[0m
2025-04-11T19:23:17.6301412Z   [32m  [32mâœ”[39m[0m[90m allows saving an unchanged document if required populated path is null (gh-8018)[0m
2025-04-11T19:23:17.6373728Z   [32m  [32mâœ”[39m[0m[90m only calls validator once on mixed validator (gh-8067)[0m
2025-04-11T19:23:17.6482445Z   [32m  [32mâœ”[39m[0m[90m only calls validator once on nested mixed validator (gh-8117)[0m
2025-04-11T19:23:17.6755319Z   [32m  [32mâœ”[39m[0m[90m handles populate() with custom type that does not cast to doc (gh-8062)[0m
2025-04-11T19:23:17.6829279Z   [32m  [32mâœ”[39m[0m[90m can inspect() on a document array (gh-8037)[0m
2025-04-11T19:23:17.7133580Z   [32m  [32mâœ”[39m[0m[90m always passes unpopulated paths to validators (gh-8042)[0m
2025-04-11T19:23:17.7322144Z   [32m  [32mâœ”[39m[0m[90m set() merge option with single nested (gh-8201)[0m
2025-04-11T19:23:17.7393919Z   [32m  [32mâœ”[39m[0m[90m set() merge option with double nested[0m
2025-04-11T19:23:17.7611656Z   [32m  [32mâœ”[39m[0m[90m setting single nested subdoc with timestamps (gh-8251)[0m
2025-04-11T19:23:17.7788811Z   [32m  [32mâœ”[39m[0m[90m passing an object with toBSON() into `save()` (gh-8299)[0m
2025-04-11T19:23:17.7862208Z   [32m  [32mâœ”[39m[0m[90m handles getter setting virtual on manually populated doc when calling toJSON (gh-8295)[0m
2025-04-11T19:23:17.8023974Z   [32m  [32mâœ”[39m[0m[90m enum validator for number (gh-8139)[0m
2025-04-11T19:23:17.8128114Z   [32m  [32mâœ”[39m[0m[90m enum object syntax for number (gh-10648) (gh-8139)[0m
2025-04-11T19:23:17.8239643Z   [32m  [32mâœ”[39m[0m[90m support `pathsToValidate()` option for `validate()` (gh-7587)[0m
2025-04-11T19:23:17.8459691Z   [32m  [32mâœ”[39m[0m[90m array push with $position (gh-14244) (gh-4322)[0m
2025-04-11T19:23:17.8530905Z   [32m  [32mâœ”[39m[0m[90m setting a path to a single nested document should update the single nested doc parent (gh-8400)[0m
2025-04-11T19:23:17.8810659Z   [32m  [32mâœ”[39m[0m[90m setting an array to an array with some populated documents depopulates the whole array (gh-8443)[0m
2025-04-11T19:23:17.8887241Z   [32m  [32mâœ”[39m[0m[90m handles errors with name set to "ValidationError" (gh-8466)[0m
2025-04-11T19:23:17.8994824Z   [32m  [32mâœ”[39m[0m[90m throws an error if running validate() multiple times in parallel (gh-8468)[0m
2025-04-11T19:23:17.9230819Z   [32m  [32mâœ”[39m[0m[90m avoids parallel validate error when validating nested path with double nested subdocs (gh-8486)[0m
2025-04-11T19:23:17.9301126Z   [32m  [32mâœ”[39m[0m[90m supports function for date min/max validator error (gh-8512)[0m
2025-04-11T19:23:17.9510422Z   [32m  [32mâœ”[39m[0m[90m sets parent and ownerDocument correctly with document array default (gh-8509)[0m
2025-04-11T19:23:17.9707538Z   [32m  [32mâœ”[39m[0m[90m doesnt add `null` if property is undefined with minimize false (gh-8504)[0m
2025-04-11T19:23:17.9780688Z   [32m  [32mâœ”[39m[0m[90m creates document array defaults in forward order, not reverse (gh-8514)[0m
2025-04-11T19:23:17.9897501Z   [32m  [32mâœ”[39m[0m[90m can call subdocument validate multiple times in parallel (gh-8539)[0m
2025-04-11T19:23:17.9998169Z   [32m  [32mâœ”[39m[0m[90m sets `Document#op` when calling `validate()` (gh-8439)[0m
2025-04-11T19:23:18.0124049Z   [32m  [32mâœ”[39m[0m[90m schema-level transform (gh-8403)[0m
2025-04-11T19:23:18.0226541Z   [32m  [32mâœ”[39m[0m[90m transforms nested paths (gh-9543)[0m
2025-04-11T19:23:18.0485445Z   [32m  [32mâœ”[39m[0m[90m handles setting numeric paths with single nested subdocs (gh-8583)[0m
2025-04-11T19:23:18.0557216Z   [32m  [32mâœ”[39m[0m[90m setting nested array path to non-nested array wraps values top-down (gh-8544)[0m
2025-04-11T19:23:18.0658594Z   [32m  [32mâœ”[39m[0m[90m doesnt wrap empty nested array with insufficient depth[0m
2025-04-11T19:23:18.0774485Z   [32m  [32mâœ”[39m[0m[90m doesnt wipe out nested keys when setting nested key to empty object with minimize (gh-8565)[0m
2025-04-11T19:23:18.0942907Z   [32m  [32mâœ”[39m[0m[90m allows calling `validate()` in post validate hook without causing parallel validation error (gh-8597)[0m
2025-04-11T19:23:18.1188757Z   [32m  [32mâœ”[39m[0m[90m sets defaults when setting single nested subdoc (gh-8603)[0m
2025-04-11T19:23:18.1261414Z   [32m  [32mâœ”[39m[0m[90m handles validating single nested paths when specified in `pathsToValidate` (gh-8626)[0m
2025-04-11T19:23:18.1325452Z   [32m  [32mâœ”[39m[0m[90m copies immutable fields when constructing new doc from old doc (gh-8642)[0m
2025-04-11T19:23:18.1542930Z   [32m  [32mâœ”[39m[0m[90m can save nested array after setting (gh-8689)[0m
2025-04-11T19:23:18.1617918Z   [32m  [32mâœ”[39m[0m[90m handles validator errors on subdoc paths (gh-5226)[0m
2025-04-11T19:23:18.1731619Z   [32m  [32mâœ”[39m[0m[90m reports array cast error with index (gh-8888)[0m
2025-04-11T19:23:18.1897304Z   [32m  [32mâœ”[39m[0m[90m sets defaults if setting nested path to empty object with minimize false (gh-8829)[0m
2025-04-11T19:23:18.1967151Z   [32m  [32mâœ”[39m[0m[90m clears cast errors when setting an array subpath (gh-9080)[0m
2025-04-11T19:23:18.2200840Z   [32m  [32mâœ”[39m[0m[90m saves successfully if you splice() a sliced array (gh-9011)[0m
2025-04-11T19:23:18.2398647Z   [32m  [32mâœ”[39m[0m[90m handles modifying a subpath of a nested array of documents (gh-8926)[0m
2025-04-11T19:23:18.2588197Z   [32m  [32mâœ”[39m[0m[90m Document#save accepts `timestamps` option (gh-8947) for update[0m
2025-04-11T19:23:18.2755187Z   [32m  [32mâœ”[39m[0m[90m Document#save accepts `timestamps` option (gh-8947) on inserting a new document[0m
2025-04-11T19:23:18.2915015Z   [32m  [32mâœ”[39m[0m[90m Sets default when passing undefined as value for a key in a nested subdoc (gh-12102) (gh-9039)[0m
2025-04-11T19:23:18.2980502Z   [32m  [32mâœ”[39m[0m[90m allows accessing $locals when initializing (gh-9098)[0m
2025-04-11T19:23:18.3088593Z   [32m  [32mâœ”[39m[0m[90m supports skipping defaults on a document (gh-8271)[0m
2025-04-11T19:23:18.3197601Z   [32m  [32mâœ”[39m[0m[90m throws an error when `transform` returns a promise (gh-9163)[0m
2025-04-11T19:23:18.3416842Z   [32m  [32mâœ”[39m[0m[90m uses strict equality when checking mixed paths for modifications (gh-9165)[0m
2025-04-11T19:23:18.3485559Z   [32m  [32mâœ”[39m[0m[90m supports `useProjection` option for `toObject()` (gh-9118)[0m
2025-04-11T19:23:18.3716015Z   [32m  [32mâœ”[39m[0m[90m clears out priorDoc after overwriting single nested subdoc (gh-9208)[0m
2025-04-11T19:23:18.3901496Z   [32m  [32mâœ”[39m[0m[90m handles immutable properties underneath single nested subdocs when overwriting (gh-9281)[0m
2025-04-11T19:23:18.4070046Z   [32m  [32mâœ”[39m[0m[90m allows removing boolean key by setting it to `undefined` (gh-9275)[0m
2025-04-11T19:23:18.4340936Z   [32m  [32mâœ”[39m[0m[90m keeps manually populated paths when setting a nested path to itself (gh-9293)[0m
2025-04-11T19:23:18.4522710Z   [32m  [32mâœ”[39m[0m[90m doesnt wipe out nested paths when setting a nested path to itself (gh-9313)[0m
2025-04-11T19:23:18.4715828Z   [32m  [32mâœ”[39m[0m[90m allows saving after setting document array to itself (gh-9266)[0m
2025-04-11T19:23:18.4784169Z   [32m  [32mâœ”[39m[0m[90m allows accessing document values from function default on array (gh-9351) (gh-6155)[0m
2025-04-11T19:23:18.5019819Z   [32m  [32mâœ”[39m[0m[90m handles pulling array subdocs when _id is an alias (gh-9319)[0m
2025-04-11T19:23:18.5083136Z   [32m  [32mâœ”[39m[0m[90m allows setting nested path to instance of model (gh-9392)[0m
2025-04-11T19:23:18.5325226Z   [32m  [32mâœ”[39m[0m[90m unmarks modified if setting a value to the same value as it was previously (gh-9396)[0m
2025-04-11T19:23:18.5505201Z   [32m  [32mâœ”[39m[0m[90m unmarks modified if setting a value to the same subdoc as it was previously (gh-9396)[0m
2025-04-11T19:23:18.5690963Z   [32m  [32mâœ”[39m[0m[90m does not unmark modified if there is no initial value (gh-9396)[0m
2025-04-11T19:23:18.5913069Z   [32m  [32mâœ”[39m[0m[90m correctly tracks saved state for deeply nested objects (gh-10773) (gh-9396)[0m
2025-04-11T19:23:18.6009233Z   [32m  [32mâœ”[39m[0m[90m marks path as errored if default function throws (gh-9408)[0m
2025-04-11T19:23:18.6115036Z   [32m  [32mâœ”[39m[0m[90m passes subdoc with initial values set to default function when init-ing (gh-9408)[0m
2025-04-11T19:23:18.6226802Z   [32m  [32mâœ”[39m[0m[90m passes document as an argument for `required` function in schema definition (gh-9433)[0m
2025-04-11T19:23:18.6334030Z   [32m  [32mâœ”[39m[0m[90m works with path named isSelected (gh-9438)[0m
2025-04-11T19:23:18.6444428Z   [32m  [32mâœ”[39m[0m[90m init tracks cast error reason (gh-9448)[0m
2025-04-11T19:23:18.6555477Z   [32m  [32mâœ”[39m[0m[90m correctly handles setting nested path underneath single nested subdocs (gh-9459)[0m
2025-04-11T19:23:18.6659019Z   [32m  [32mâœ”[39m[0m[90m $isValid() with space-delimited and array syntax (gh-9474)[0m
2025-04-11T19:23:18.6887319Z   [32m  [32mâœ”[39m[0m[90m avoids overwriting array subdocument when setting dotted path that is not selected (gh-9427)[0m
2025-04-11T19:23:18.7067976Z   [32m  [32mâœ”[39m[0m[90m ignore getters when diffing objects for change tracking (gh-9501)[0m
2025-04-11T19:23:18.7293822Z   [32m  [32mâœ”[39m[0m[90m allows defining middleware for all document hooks using regexp (gh-9190)[0m
2025-04-11T19:23:18.7518564Z   [32m  [32mâœ”[39m[0m[90m correctly handles setting nested props to other nested props (gh-9519)[0m
2025-04-11T19:23:18.7586283Z   [32m  [32mâœ”[39m[0m[90m sets fields after an undefined field (gh-9585)[0m
2025-04-11T19:23:18.7688745Z   [32m  [32mâœ”[39m[0m[90m passes document to `default` functions (gh-9633)[0m
2025-04-11T19:23:18.7795588Z   [32m  [32mâœ”[39m[0m[90m handles pre hook throwing a sync error (gh-9659)[0m
2025-04-11T19:23:18.7887573Z   [32m  [32mâœ”[39m[0m[90m returns undefined rather than entire object when calling `get()` with empty string (gh-9681)[0m
2025-04-11T19:23:18.8129962Z   [32m  [32mâœ”[39m[0m[90m keeps atomics when assigning array to filtered array (gh-9651)[0m
2025-04-11T19:23:18.8197041Z   [32m  [32mâœ”[39m[0m[90m does not pass doc to ObjectId or Date.now (gh-9633) (gh-9636)[0m
2025-04-11T19:23:18.8475901Z   [32m  [32mâœ”[39m[0m[90m supports getting a list of populated docs (gh-9702)[0m
2025-04-11T19:23:18.8702142Z   [32m  [32mâœ”[39m[0m[90m with virtual populate (gh-10148)[0m
2025-04-11T19:23:18.8888812Z   [32m  [32mâœ”[39m[0m[90m handles paths named `db` (gh-9798)[0m
2025-04-11T19:23:18.9084997Z   [32m  [32mâœ”[39m[0m[90m handles paths named `schema` gh-8798[0m
2025-04-11T19:23:18.9287346Z   [32m  [32mâœ”[39m[0m[90m handles nested paths named `schema` gh-8798[0m
2025-04-11T19:23:18.9542339Z   [32m  [32mâœ”[39m[0m[90m object setters will be applied for each object in array after populate (gh-9838)[0m
2025-04-11T19:23:18.9723651Z   [32m  [32mâœ”[39m[0m[90m gh9884[0m
2025-04-11T19:23:18.9891677Z   [32m  [32mâœ”[39m[0m[90m Makes sure pre deleteOne hook is executed (gh-9885)[0m
2025-04-11T19:23:19.0078139Z   [32m  [32mâœ”[39m[0m[90m gh9880[0m
2025-04-11T19:23:19.0282738Z   [32m  [32mâœ”[39m[0m[90m handles directly setting embedded document array element with projection (gh-9909)[0m
2025-04-11T19:23:19.0521797Z   [32m  [32mâœ”[39m[0m[90m toObject() uses child schema `flattenMaps` option by default (gh-9995)[0m
2025-04-11T19:23:19.0693498Z   [32m  [32mâœ”[39m[0m[90m does not double validate paths under mixed objects (gh-10141)[0m
2025-04-11T19:23:19.0894103Z   [32m  [32mâœ”[39m[0m[90m clears child document modified when setting map path underneath single nested (gh-10295)[0m
2025-04-11T19:23:19.1077922Z   [32m  [32mâœ”[39m[0m[90m avoids infinite recursion when setting single nested subdoc to array (gh-10351)[0m
2025-04-11T19:23:19.1150826Z   [32m  [32mâœ”[39m[0m[90m skips recursive merging (gh-9121)[0m
2025-04-11T19:23:19.1214246Z   [32m  [32mâœ”[39m[0m[90m does not pull non-schema paths from parent documents into nested paths (gh-10449)[0m
2025-04-11T19:23:19.1427860Z   [32m  [32mâœ”[39m[0m[90m sets properties in the order they are defined in the schema (gh-4665)[0m
2025-04-11T19:23:19.1715477Z   [32m  [32mâœ”[39m[0m[90m depopulate all should depopulate nested array population (gh-10592)[0m
2025-04-11T19:23:19.1896676Z   [32m  [32mâœ”[39m[0m[90m should allow dashes in the path name (gh-10677)[0m
2025-04-11T19:23:19.1969136Z   [32m  [32mâœ”[39m[0m[90m inits non-schema values if strict is false (gh-10828)[0m
2025-04-11T19:23:19.2082482Z   [32m  [32mâœ”[39m[0m[90m avoids depopulating when setting array of subdocs from different doc (gh-10819)[0m
2025-04-11T19:23:19.2349525Z   [32m  [32mâœ”[39m[0m[90m allows validating doc again if pre validate errors out (gh-10830)[0m
2025-04-11T19:23:19.2417109Z   [32m  [32mâœ”[39m[0m[90m ensures that doc.ownerDocument() and doc.parent() by default return this on the root document (gh-10884)[0m
2025-04-11T19:23:19.2532539Z   [32m  [32mâœ”[39m[0m[90m catches errors in `required` functions (gh-10968)[0m
2025-04-11T19:23:19.2771863Z   [32m  [32mâœ”[39m[0m[90m does not allow overwriting schema methods with strict: false (gh-11001)[0m
2025-04-11T19:23:19.2868023Z   [32m  [32mâœ”[39m[0m[90m allows setting nested to instance of document (gh-11011)[0m
2025-04-11T19:23:19.3131331Z   [32m  [32mâœ”[39m[0m[90m cleans modified paths on deeply nested subdocuments (gh-11060)[0m
2025-04-11T19:23:19.3362453Z   [32m  [32mâœ”[39m[0m[90m can manually populate subdocument refs (gh-10856)[0m
2025-04-11T19:23:19.3567990Z   [32m  [32mâœ”[39m[0m[90m can manually populate subdocument refs in `create()` (gh-10856)[0m
2025-04-11T19:23:19.3847098Z   [32m  [32mâœ”[39m[0m[90m populating subdocument refs underneath maps throws (gh-12494) (gh-10856)[0m
2025-04-11T19:23:19.4014412Z   [32m  [32mâœ”[39m[0m[90m handles save with undefined nested doc under subdoc (gh-11110)[0m
2025-04-11T19:23:19.4191063Z   [32m  [32mâœ”[39m[0m[90m correctly handles modifying array subdoc after setting array subdoc to same value (gh-11172)[0m
2025-04-11T19:23:19.4256498Z   [32m  [32mâœ”[39m[0m[90m handles `String` with `type` (gh-11199)[0m
2025-04-11T19:23:19.4807223Z   [32m  [32mâœ”[39m[0m[90m applies subdocument defaults when projecting dotted subdocument fields[0m[33m (45ms)[0m
2025-04-11T19:23:19.5001368Z   [32m  [32mâœ”[39m[0m[90m handles initing nested properties in non-strict documents (gh-11309)[0m
2025-04-11T19:23:19.5172902Z   [32m  [32mâœ”[39m[0m[90m saves changes when setting a nested path to itself (gh-11395)[0m
2025-04-11T19:23:19.5239216Z   [32m  [32mâœ”[39m[0m[90m avoids setting nested properties on top-level document when init-ing with strict: false (gh-11526) (gh-11309)[0m
2025-04-11T19:23:19.5449874Z   [32m  [32mâœ”[39m[0m[90m handles deeply nested subdocuments when getting paths to validate (gh-11501)[0m
2025-04-11T19:23:19.5527325Z   [32m  [32mâœ”[39m[0m[90m handles casting array of spread documents (gh-11522)[0m
2025-04-11T19:23:19.5739708Z   [32m  [32mâœ”[39m[0m[90m avoids setting modified on subdocument defaults (gh-11528)[0m
2025-04-11T19:23:19.5902674Z   [32m  [32mâœ”[39m[0m[90m works when passing dot notation to mixed property (gh-1946)[0m
2025-04-11T19:23:19.6075223Z   [32m  [32mâœ”[39m[0m[90m correctly validates deeply nested document arrays (gh-11564)[0m
2025-04-11T19:23:19.6255267Z   [32m  [32mâœ”[39m[0m[90m reruns validation when modifying a document array path under a nested path after save (gh-11672)[0m
2025-04-11T19:23:19.6440864Z   [32m  [32mâœ”[39m[0m[90m avoids setting nested paths to null when they are set to `undefined` (gh-11723)[0m
2025-04-11T19:23:19.6639318Z   [32m  [32mâœ”[39m[0m[90m cleans modified subpaths when setting nested path under array to null when subpaths are modified (gh-11764)[0m
2025-04-11T19:23:19.6921959Z   [32m  [32mâœ”[39m[0m[90m avoids manually populating document that is manually populated in another doc with different unpopulatedValue (gh-11442) (gh-11008)[0m
2025-04-11T19:23:19.6999924Z   [32m  [32mâœ”[39m[0m[90m $getAllSubdocs gets document arrays underneath a nested path (gh-11917)[0m
2025-04-11T19:23:19.7115946Z   [32m  [32mâœ”[39m[0m[90m handles validation errors on deeply nested subdocuments underneath a nested path (gh-12021)[0m
2025-04-11T19:23:19.7316229Z   [32m  [32mâœ”[39m[0m[90m supports virtuals named `isValid` (gh-12124) (gh-6262)[0m
2025-04-11T19:23:19.7471526Z   [32m  [32mâœ”[39m[0m[90m handles maps when applying defaults to nested paths (gh-12220)[0m
2025-04-11T19:23:19.7617247Z   [32m  [32mâœ”[39m[0m[90m correct context for default functions in subdocuments with init (gh-12328)[0m
2025-04-11T19:23:19.7861129Z   [32m  [32mâœ”[39m[0m[90m applies defaults to pushed subdocs after initing document (gh-12515)[0m
2025-04-11T19:23:19.8046930Z   [32m  [32mâœ”[39m[0m[90m If the field does not exist, $inc should create it and set is value to the specified one (gh-12435)[0m
2025-04-11T19:23:19.8285379Z   [32m  [32mâœ”[39m[0m[90m avoids overwriting array if saving with no changes with array deselected (gh-12414)[0m
2025-04-11T19:23:19.8479752Z   [32m  [32mâœ”[39m[0m[90m $clone() (gh-11849)[0m
2025-04-11T19:23:19.8666721Z   [32m  [32mâœ”[39m[0m[90m $clone() with single nested and doc array (gh-14353) (gh-11849)[0m
2025-04-11T19:23:19.8838447Z   [32m  [32mâœ”[39m[0m[90m can create document with document array and top-level key named `schema` (gh-12480)[0m
2025-04-11T19:23:19.9058611Z   [32m  [32mâœ”[39m[0m[90m handles setting array to itself after saving and pushing a new value (gh-12656)[0m
2025-04-11T19:23:19.9227528Z   [32m  [32mâœ”[39m[0m[90m should not trigger isModified when setting a nested boolean to the same value as previously  (gh-12992)[0m
2025-04-11T19:23:19.9391192Z   [32m  [32mâœ”[39m[0m[90m saves single nested subdoc defaults (gh-12905)[0m
2025-04-11T19:23:19.9496570Z   [32m  [32mâœ”[39m[0m[90m $shift() triggers $pop[0m
2025-04-11T19:23:19.9568784Z   [32m  [32mâœ”[39m[0m[90m avoids setting array default if document array projected out by sibling projection (gh-13003)[0m
2025-04-11T19:23:19.9805386Z   [32m  [32mâœ”[39m[0m[90m avoids overwriting array with sibling projection (gh-13043)[0m
2025-04-11T19:23:19.9973897Z   [32m  [32mâœ”[39m[0m[90m can set() from top-level on nested schema with strict: false (gh-13327)[0m
2025-04-11T19:23:20.0148073Z   [32m  [32mâœ”[39m[0m[90m can set() from top-level on path underneath map of mixed (gh-13327)[0m
2025-04-11T19:23:20.0313105Z   [32m  [32mâœ”[39m[0m[90m should allow storing keys with dots in name in mixed under nested (gh-13530)[0m
2025-04-11T19:23:20.0478998Z   [32m  [32mâœ”[39m[0m[90m cleans up all array subdocs modified state on save (gh-13582)[0m
2025-04-11T19:23:20.0671147Z   [32m  [32mâœ”[39m[0m[90m cleans up all nested subdocs modified state on save (gh-13609)[0m
2025-04-11T19:23:20.0868252Z   [32m  [32mâœ”[39m[0m[90m avoids prototype pollution on init[0m
2025-04-11T19:23:20.1052885Z   [32m  [32mâœ”[39m[0m[90m does not modify array when calling getters (gh-13748)[0m
2025-04-11T19:23:20.1244388Z   [32m  [32mâœ”[39m[0m[90m sets defaults on subdocs with subdoc projection (gh-13720)[0m
2025-04-11T19:23:20.1424293Z   [32m  [32mâœ”[39m[0m[90m handles bigint (gh-13791)[0m
2025-04-11T19:23:20.1618042Z   [32m  [32mâœ”[39m[0m[90m should allow null values in list in self assignment (gh-13859)[0m
2025-04-11T19:23:20.1816711Z   [32m  [32mâœ”[39m[0m[90m bulkSave() picks up changes in pre("save") middleware (gh-13799)[0m
2025-04-11T19:23:20.2000351Z   [32m  [32mâœ”[39m[0m[90m bulkSave() allows skipping validation with validateBeforeSave (gh-15156)[0m
2025-04-11T19:23:20.2075785Z   [32m  [32mâœ”[39m[0m[90m handles default embedded discriminator values (gh-13835)[0m
2025-04-11T19:23:20.2292595Z   [32m  [32mâœ”[39m[0m[90m avoids saving changes to deselected paths (gh-13145) (gh-13062)[0m
2025-04-11T19:23:20.2496131Z   [32m  [32mâœ”[39m[0m[90m fires pre validate hooks on 4 level single nested subdocs (gh-13876)[0m
2025-04-11T19:23:20.2714622Z   [32m  [32mâœ”[39m[0m[90m fires pre validate hooks on 5 level deep single nested subdoc when modifying after save() (gh-14591)[0m
2025-04-11T19:23:20.2780454Z   [32m  [32mâœ”[39m[0m[90m returns constructor if using $model() with no args (gh-13878)[0m
2025-04-11T19:23:20.3029256Z   [32m  [32mâœ”[39m[0m[90m avoids creating separate subpaths entry for every element in array (gh-13874)[0m
2025-04-11T19:23:20.3224415Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators defined using Schema.prototype.discriminator (gh-13898)[0m
2025-04-11T19:23:20.3400384Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators defined using Schema.prototype.discriminator after defining schema (gh-14109) (gh-13898)[0m
2025-04-11T19:23:20.3582989Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators on nested path defined using Schema.prototype.discriminator (gh-14109) (gh-13898)[0m
2025-04-11T19:23:20.3748958Z   [32m  [32mâœ”[39m[0m[90m handles middleware on embedded discriminators on nested path defined using Schema.prototype.discriminator (gh-14961)[0m
2025-04-11T19:23:20.3989829Z   [32m  [32mâœ”[39m[0m[90m handles reusing schema with embedded discriminators defined using Schema.prototype.discriminator (gh-14162)[0m
2025-04-11T19:23:20.4187490Z   [32m  [32mâœ”[39m[0m[90m handles embedded recursive discriminators on nested path defined using Schema.prototype.discriminator (gh-14245)[0m
2025-04-11T19:23:20.4359655Z   [32m  [32mâœ”[39m[0m[90m can use `collection` as schema name (gh-13956)[0m
2025-04-11T19:23:20.4520062Z   [32m  [32mâœ”[39m[0m[90m avoids adding nested paths to markModified() output if adding a new field (gh-14024)[0m
2025-04-11T19:23:20.4697628Z   [32m  [32mâœ”[39m[0m[90m should allow null values in list in self assignment (gh-14172) (gh-13859)[0m
2025-04-11T19:23:20.4878601Z   [32m  [32mâœ”[39m[0m[90m avoids overwriting dotted paths in mixed path underneath nested path (gh-14178)[0m
2025-04-11T19:23:20.4949588Z   [32m  [32mâœ”[39m[0m[90m handles setting nested path to null (gh-14205)[0m
2025-04-11T19:23:20.5074615Z   [32m  [32mâœ”[39m[0m[90m handles setting nested path to undefined (gh-14205)[0m
2025-04-11T19:23:20.5277224Z   [32m  [32mâœ”[39m[0m[90m handles setting nested path to spread doc with extra properties (gh-14269)[0m
2025-04-11T19:23:20.5363125Z   [32m  [32mâœ”[39m[0m[90m includes virtuals in doc array toString() output if virtuals enabled on toObject (gh-14315)[0m
2025-04-11T19:23:20.5633173Z   [32m  [32mâœ”[39m[0m[90m minimizes when updating existing documents (gh-13782)[0m
2025-04-11T19:23:20.5834966Z   [32m  [32mâœ”[39m[0m[90m saves when setting subdocument to empty object (gh-14420) (gh-13782)[0m
2025-04-11T19:23:20.6022531Z   [32m  [32mâœ”[39m[0m[90m validate supports validateAllPaths[0m
2025-04-11T19:23:20.6229932Z   [32m  [32mâœ”[39m[0m[90m validateSync() supports validateAllPaths[0m
2025-04-11T19:23:20.6424859Z   [32m  [32mâœ”[39m[0m[90m minimize unsets property rather than setting to null (gh-14445)[0m
2025-04-11T19:23:20.6719146Z   [32m  [32mâœ”[39m[0m[90m avoids depopulating populated subdocs underneath document arrays when copying to another document (gh-14418)[0m
2025-04-11T19:23:20.6934741Z   [32m  [32mâœ”[39m[0m[90m handles virtuals that are stored as objects but getter returns string with toJSON (gh-14446)[0m
2025-04-11T19:23:20.7015441Z   [32m  [32mâœ”[39m[0m[90m isDirectModified on paths underneath direct modified subdoc (gh-14502)[0m
2025-04-11T19:23:20.7276723Z   [32m  [32mâœ”[39m[0m[90m avoids leaving subdoc _id in default state when setting subdocument to same value (gh-14722)[0m
2025-04-11T19:23:20.7457565Z   [32m  [32mâœ”[39m[0m[90m $clearModifiedPaths (gh-14268)[0m
2025-04-11T19:23:20.7651020Z   [32m  [32mâœ”[39m[0m[90m $createModifiedPathsSnapshot and $restoreModifiedPathsSnapshot (gh-14268)[0m
2025-04-11T19:23:20.7839775Z   [32m  [32mâœ”[39m[0m[90m post deleteOne hook (gh-9885)[0m
2025-04-11T19:23:20.7916250Z   [32m  [32mâœ”[39m[0m[90m applies virtuals to subschemas if top-level schema has virtuals: true (gh-14771)[0m
2025-04-11T19:23:20.8129017Z   [32m  [32mâœ”[39m[0m[90m calls required with correct context on single nested properties (gh-14788)[0m
2025-04-11T19:23:20.8380838Z   [32m  [32mâœ”[39m[0m[90m applies toObject() getters to 3 level deep subdocuments (gh-14840) (gh-14835)[0m
2025-04-11T19:23:21.0847078Z   [32m  [32mâœ”[39m[0m[90m handles inserting and saving large document with 10-level deep subdocs (gh-14897)[0m[31m (240ms)[0m
2025-04-11T19:23:21.1037359Z   [32m  [32mâœ”[39m[0m[90m avoids flattening objectids on insertMany (gh-14935)[0m
2025-04-11T19:23:21.1197694Z   [32m  [32mâœ”[39m[0m[90m handles buffers stored as EJSON POJO (gh-14911)[0m
2025-04-11T19:23:21.1389899Z   [32m  [32mâœ”[39m[0m[90m clears modified subpaths when setting deeply nested subdoc to null (gh-14952)[0m
2025-04-11T19:23:21.1562730Z   [32m  [32mâœ”[39m[0m[90m handles custom error message for duplicate key errors (gh-12844)[0m
2025-04-11T19:23:21.1636126Z   [32m  [32mâœ”[39m[0m[90m supports global transforms per schematype (gh-15084)[0m
2025-04-11T19:23:21.1948869Z   [32m  [32mâœ”[39m[0m[90m supports schemaFieldsOnly option for toObject() (gh-15258)[0m
2025-04-11T19:23:21.2148466Z   [32m  [32mâœ”[39m[0m[90m supports schemaFieldsOnly on nested paths, subdocuments, and arrays (gh-15258)[0m
2025-04-11T19:23:21.8916290Z   [32m  [32mâœ”[39m[0m[90m handles undoReset() on deep recursive subdocuments (gh-15255)[0m[31m (671ms)[0m
2025-04-11T19:23:21.9163494Z   [32m  [32mâœ”[39m[0m[90m handles selected paths on root discriminator (gh-15308)[0m
2025-04-11T19:23:21.9338417Z   [32m  [32mâœ”[39m[0m[90m avoids double validating document arrays underneath single nested (gh-15335)[0m
2025-04-11T19:23:21.9378779Z [0m    constructor[0m
2025-04-11T19:23:21.9425101Z     [32m  [32mâœ”[39m[0m[90m supports passing in schema directly (gh-8237)[0m
2025-04-11T19:23:21.9484982Z [0m    deleteOne[0m
2025-04-11T19:23:21.9637973Z     [32m  [32mâœ”[39m[0m[90m deletes the document[0m
2025-04-11T19:23:21.9699328Z [0m    updateOne[0m
2025-04-11T19:23:21.9828013Z     [32m  [32mâœ”[39m[0m[90m updates the document[0m
2025-04-11T19:23:21.9911634Z     [32m  [32mâœ”[39m[0m[90m returns a query[0m
2025-04-11T19:23:22.0097496Z     [32m  [32mâœ”[39m[0m[90m middleware (gh-8262)[0m
2025-04-11T19:23:22.0157705Z [0m    replaceOne[0m
2025-04-11T19:23:22.0316580Z     [32m  [32mâœ”[39m[0m[90m replaces the document[0m
2025-04-11T19:23:22.0376756Z [0m    shortcut getters[0m
2025-04-11T19:23:22.0423447Z     [32m  [32mâœ”[39m[0m[90m return undefined for properties with a null/undefined parent object (gh-1326)[0m
2025-04-11T19:23:22.0512806Z     [32m  [32mâœ”[39m[0m[90m work[0m
2025-04-11T19:23:22.0571456Z [0m    toObject[0m
2025-04-11T19:23:22.0759120Z     [32m  [32mâœ”[39m[0m[90m does not apply toObject functions of subdocuments to root document[0m
2025-04-11T19:23:22.0852039Z     [32m  [32mâœ”[39m[0m[90m handles child schema transforms[0m
2025-04-11T19:23:22.1137705Z     [32m  [32mâœ”[39m[0m[90m doesnt clobber child schema options when called with no params (gh-2035)[0m
2025-04-11T19:23:22.1232931Z     [32m  [32mâœ”[39m[0m[90m respects child schemas minimize (gh-9405)[0m
2025-04-11T19:23:22.1511076Z     [32m  [32mâœ”[39m[0m[90m minimizes single nested subdocs (gh-11247)[0m
2025-04-11T19:23:22.1715083Z     [32m  [32mâœ”[39m[0m[90m does not minimize single nested subdocs if they are required (gh-14058) (gh-11247)[0m
2025-04-11T19:23:22.1808300Z     [32m  [32mâœ”[39m[0m[90m should propagate toObject to implicitly created schemas (gh-13599) (gh-13325)[0m
2025-04-11T19:23:22.1891546Z [0m    toJSON[0m
2025-04-11T19:23:22.1945779Z     [32m  [32mâœ”[39m[0m[90m toJSON options[0m
2025-04-11T19:23:22.2028699Z     [32m  [32mâœ”[39m[0m[90m jsonifying an object[0m
2025-04-11T19:23:22.2329330Z     [32m  [32mâœ”[39m[0m[90m jsonifying an object's populated items works (gh-1376)[0m
2025-04-11T19:23:22.2523905Z     [32m  [32mâœ”[39m[0m[90m jsonifying with undefined path (gh-11922)[0m
2025-04-11T19:23:22.2618218Z     [32m  [32mâœ”[39m[0m[90m should propagate toJSON to implicitly created schemas (gh-13599) (gh-13325)[0m
2025-04-11T19:23:22.2707234Z [0m    inspect[0m
2025-04-11T19:23:22.2837021Z     [32m  [32mâœ”[39m[0m[90m inspect inherits schema options (gh-4001)[0m
2025-04-11T19:23:22.3082830Z     [32m  [32mâœ”[39m[0m[90m does not apply transform to populated docs (gh-4213)[0m
2025-04-11T19:23:22.3179479Z     [32m  [32mâœ”[39m[0m[90m handles infinite recursion (gh-11756)[0m
2025-04-11T19:23:22.3500532Z     [32m  [32mâœ”[39m[0m[90m populate on nested path (gh-5703)[0m
2025-04-11T19:23:22.3563808Z [0m    #update[0m
2025-04-11T19:23:22.3574691Z     [36m  - returns a Query[0m
2025-04-11T19:23:22.3575735Z     [36m  - calling update on document should relay to its model (gh-794)[0m
2025-04-11T19:23:22.3585791Z [0m    Errors[0m
2025-04-11T19:23:22.3631804Z     [32m  [32mâœ”[39m[0m[90m MongooseErrors should be instances of Error (gh-209)[0m
2025-04-11T19:23:22.3724008Z     [32m  [32mâœ”[39m[0m[90m ValidationErrors should be instances of Error[0m
2025-04-11T19:23:22.3781999Z [0m    #validate[0m
2025-04-11T19:23:22.3962162Z     [32m  [32mâœ”[39m[0m[90m works (gh-891)[0m
2025-04-11T19:23:22.4056592Z     [32m  [32mâœ”[39m[0m[90m can return a promise[0m
2025-04-11T19:23:22.4171026Z     [32m  [32mâœ”[39m[0m[90m doesnt have stale cast errors (gh-2766)[0m
2025-04-11T19:23:22.4331329Z     [32m  [32mâœ”[39m[0m[90m cast errors persist across validate() calls (gh-2766)[0m
2025-04-11T19:23:22.4417019Z     [32m  [32mâœ”[39m[0m[90m returns a promise when there are no validators[0m
2025-04-11T19:23:22.4629711Z     [32m  [32mâœ”[39m[0m[90m validator should run only once gh-1743[0m
2025-04-11T19:23:22.4880075Z     [32m  [32mâœ”[39m[0m[90m validator should run only once per sub-doc gh-1743[0m
2025-04-11T19:23:22.4931845Z [0m      works on arrays[0m
2025-04-11T19:23:22.5086224Z       [32m  [32mâœ”[39m[0m[90m with required[0m
2025-04-11T19:23:22.5288966Z       [32m  [32mâœ”[39m[0m[90m with custom validator[0m
2025-04-11T19:23:22.5491156Z       [32m  [32mâœ”[39m[0m[90m with both required + custom validator[0m
2025-04-11T19:23:22.5575745Z [0m    #equals[0m
2025-04-11T19:23:22.5586592Z [0m      should work[0m
2025-04-11T19:23:22.5662104Z       [32m  [32mâœ”[39m[0m[90m with string _ids[0m
2025-04-11T19:23:22.5892519Z       [32m  [32mâœ”[39m[0m[90m with number _ids[0m
2025-04-11T19:23:22.5998035Z       [32m  [32mâœ”[39m[0m[90m with ObjectId _ids[0m
2025-04-11T19:23:22.6093585Z       [32m  [32mâœ”[39m[0m[90m with Buffer _ids[0m
2025-04-11T19:23:22.6198155Z       [32m  [32mâœ”[39m[0m[90m with _id disabled (gh-1687)[0m
2025-04-11T19:23:22.6280268Z [0m    setter[0m
2025-04-11T19:23:22.6327864Z     [32m  [32mâœ”[39m[0m[90m works with undefined (gh-1892)[0m
2025-04-11T19:23:22.6420775Z     [32m  [32mâœ”[39m[0m[90m passes priorVal (gh-8629)[0m
2025-04-11T19:23:22.6505462Z [0m      order[0m
2025-04-11T19:23:22.6561716Z       [32m  [32mâœ”[39m[0m[90m is applied correctly[0m
2025-04-11T19:23:22.6631736Z [0m      on nested paths[0m
2025-04-11T19:23:22.6643050Z [0m        using set(path, object)[0m
2025-04-11T19:23:22.6711062Z         [32m  [32mâœ”[39m[0m[90m overwrites the entire object[0m
2025-04-11T19:23:22.6840720Z         [32m  [32mâœ”[39m[0m[90m allows positional syntax on mixed nested paths (gh-6738)[0m
2025-04-11T19:23:22.6984527Z         [32m  [32mâœ”[39m[0m[90m gh-1954[0m
2025-04-11T19:23:22.7077187Z [0m        when overwriting with a document instance[0m
2025-04-11T19:23:22.7145204Z         [32m  [32mâœ”[39m[0m[90m does not cause StackOverflows (gh-1234)[0m
2025-04-11T19:23:22.7248769Z [0m    virtual[0m
2025-04-11T19:23:22.7299667Z     [32m  [32mâœ”[39m[0m[90m passes doc as third param for arrow functions (gh-4143)[0m
2025-04-11T19:23:22.7379931Z [0m      setter[0m
2025-04-11T19:23:22.7439803Z       [32m  [32mâœ”[39m[0m[90m works with objects[0m
2025-04-11T19:23:22.7563872Z       [32m  [32mâœ”[39m[0m[90m works with arrays[0m
2025-04-11T19:23:22.7676014Z       [32m  [32mâœ”[39m[0m[90m works with numbers[0m
2025-04-11T19:23:22.7807393Z       [32m  [32mâœ”[39m[0m[90m works with strings[0m
2025-04-11T19:23:22.7903436Z [0m    gh-2082[0m
2025-04-11T19:23:22.8090622Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:23:22.8141677Z [0m    gh-1933[0m
2025-04-11T19:23:22.8302608Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:23:22.8363701Z [0m    gh-1638[0m
2025-04-11T19:23:22.8562829Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:23:22.8626679Z [0m    gh-2434[0m
2025-04-11T19:23:22.8788185Z     [32m  [32mâœ”[39m[0m[90m will save the new value[0m
2025-04-11T19:23:22.8848929Z [0m    gh-8371[0m
2025-04-11T19:23:22.9048780Z     [32m  [32mâœ”[39m[0m[90m setting isNew to true makes save tries to insert a new document (gh-8371)[0m
2025-04-11T19:23:22.9284316Z     [32m  [32mâœ”[39m[0m[90m setting isNew to true throws an error when a document already exists (gh-8371)[0m
2025-04-11T19:23:22.9578310Z     [32m  [32mâœ”[39m[0m[90m saving a document with no changes, throws an error when document is not found[0m
2025-04-11T19:23:22.9832255Z     [32m  [32mâœ”[39m[0m[90m saving a document when version bump required, throws a VersionError when document is not found (gh-10974)[0m
2025-04-11T19:23:23.0101200Z     [32m  [32mâœ”[39m[0m[90m saving a document with changes, throws an error when document is not found[0m
2025-04-11T19:23:23.0163562Z [0m    bug fixes[0m
2025-04-11T19:23:23.0377578Z     [32m  [32mâœ”[39m[0m[90m applies toJSON transform correctly for populated docs (gh-2910) (gh-2990)[0m
2025-04-11T19:23:23.0583128Z     [32m  [32mâœ”[39m[0m[90m single nested schema transform with save() (gh-5807)[0m
2025-04-11T19:23:23.0675720Z     [32m  [32mâœ”[39m[0m[90m setters firing with objects on real paths (gh-2943)[0m
2025-04-11T19:23:23.0793570Z     [32m  [32mâœ”[39m[0m[90m set data from subdoc keys (gh-3346)[0m
2025-04-11T19:23:23.0911882Z     [32m  [32mâœ”[39m[0m[90m doesnt attempt to cast generic objects as strings (gh-3030)[0m
2025-04-11T19:23:23.1139469Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas 1 (gh-2689)[0m
2025-04-11T19:23:23.1233713Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas with validation (gh-2689)[0m
2025-04-11T19:23:23.1346545Z     [32m  [32mâœ”[39m[0m[90m single embedded parent() (gh-5134)[0m
2025-04-11T19:23:23.1576121Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas with markmodified (gh-2689)[0m
2025-04-11T19:23:23.1778393Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas + update validators (gh-2689)[0m
2025-04-11T19:23:23.2033071Z     [32m  [32mâœ”[39m[0m[90m single embedded schema update validators ignore _id (gh-6269)[0m
2025-04-11T19:23:23.2085884Z [0m      gh-2782[0m
2025-04-11T19:23:23.2150737Z       [32m  [32mâœ”[39m[0m[90m should set data from a sub doc[0m
2025-04-11T19:23:23.2284658Z [0m    error processing (gh-2284)[0m
2025-04-11T19:23:23.2338876Z     [32m  [32mâœ”[39m[0m[90m save errors[0m
2025-04-11T19:23:23.2452657Z     [32m  [32mâœ”[39m[0m[90m validate errors (gh-4885)[0m
2025-04-11T19:23:23.2673030Z     [32m  [32mâœ”[39m[0m[90m does not filter validation on unmodified paths when validateModifiedOnly not set (gh-7421)[0m
2025-04-11T19:23:23.2869138Z     [32m  [32mâœ”[39m[0m[90m filters out validation on unmodified paths when validateModifiedOnly set (gh-7421) (gh-9963)[0m
2025-04-11T19:23:23.3024842Z     [32m  [32mâœ”[39m[0m[90m does not filter validation on modified paths when validateModifiedOnly set (gh-7421)[0m
2025-04-11T19:23:23.3206166Z     [32m  [32mâœ”[39m[0m[90m validateModifiedOnly with pre existing validation error (gh-8091)[0m
2025-04-11T19:23:23.3392735Z     [32m  [32mâœ”[39m[0m[90m should use schema-level validateModifiedOnly option if not in options[0m
2025-04-11T19:23:23.3570675Z     [32m  [32mâœ”[39m[0m[90m handles non-errors[0m
2025-04-11T19:23:23.3770735Z     [32m  [32mâœ”[39m[0m[90m fully validates modified subdocs (gh-14677)[0m
2025-04-11T19:23:23.3987115Z     [32m  [32mâœ”[39m[0m[90m fully validates modified single nested subdocs (gh-14677)[0m
2025-04-11T19:23:23.4049514Z [0m    bug fixes[0m
2025-04-11T19:23:23.4298167Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas with populate (gh-3501)[0m
2025-04-11T19:23:23.4390944Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas with methods (gh-3534)[0m
2025-04-11T19:23:23.4645531Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas with models (gh-3535)[0m
2025-04-11T19:23:23.4733679Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas with indexes (gh-3594)[0m
2025-04-11T19:23:23.4919723Z     [32m  [32mâœ”[39m[0m[90m removing single embedded docs (gh-3596)[0m
2025-04-11T19:23:23.5122966Z     [32m  [32mâœ”[39m[0m[90m setting single embedded docs (gh-3601)[0m
2025-04-11T19:23:23.5309253Z     [32m  [32mâœ”[39m[0m[90m single embedded docs init obeys strict mode (gh-3642)[0m
2025-04-11T19:23:23.5490846Z     [32m  [32mâœ”[39m[0m[90m single embedded docs post hooks (gh-3679)[0m
2025-04-11T19:23:23.5685860Z     [32m  [32mâœ”[39m[0m[90m single embedded docs .set() (gh-3686)[0m
2025-04-11T19:23:23.5917973Z     [32m  [32mâœ”[39m[0m[90m single embedded docs with arrays pre hooks (gh-3680)[0m
2025-04-11T19:23:23.6019786Z     [32m  [32mâœ”[39m[0m[90m nested single embedded doc validation (gh-3702)[0m
2025-04-11T19:23:23.6130571Z     [32m  [32mâœ”[39m[0m[90m handles virtuals with dots correctly (gh-3618)[0m
2025-04-11T19:23:23.6336806Z     [32m  [32mâœ”[39m[0m[90m handles pushing with numeric keys (gh-3623)[0m
2025-04-11T19:23:23.6565941Z     [32m  [32mâœ”[39m[0m[90m handles 0 for numeric subdoc ids (gh-3776)[0m
2025-04-11T19:23:23.6661292Z     [32m  [32mâœ”[39m[0m[90m handles conflicting names (gh-3867)[0m
2025-04-11T19:23:23.6942650Z     [32m  [32mâœ”[39m[0m[90m populate with lean (gh-3873)[0m
2025-04-11T19:23:23.7139403Z     [32m  [32mâœ”[39m[0m[90m init single nested subdoc with select (gh-3880)[0m
2025-04-11T19:23:23.7341311Z     [32m  [32mâœ”[39m[0m[90m single nested subdoc isModified() (gh-3910)[0m
2025-04-11T19:23:23.7520415Z     [32m  [32mâœ”[39m[0m[90m pre and post as schema keys (gh-3902)[0m
2025-04-11T19:23:23.7781650Z     [32m  [32mâœ”[39m[0m[90m manual population and isNew (gh-3982)[0m
2025-04-11T19:23:23.8053611Z     [32m  [32mâœ”[39m[0m[90m manual populattion with ref function (gh-15138)[0m
2025-04-11T19:23:23.8292522Z     [32m  [32mâœ”[39m[0m[90m manual population with refPath (gh-7070)[0m
2025-04-11T19:23:23.8490474Z     [32m  [32mâœ”[39m[0m[90m doesnt skipId for single nested subdocs (gh-4008)[0m
2025-04-11T19:23:23.8680358Z     [32m  [32mâœ”[39m[0m[90m single embedded docs with $near (gh-4014)[0m
2025-04-11T19:23:23.8771260Z     [32m  [32mâœ”[39m[0m[90m skip validation if required returns false (gh-4094)[0m
2025-04-11T19:23:23.8979861Z     [32m  [32mâœ”[39m[0m[90m ability to overwrite array default (gh-4109)[0m
2025-04-11T19:23:23.9174485Z     [32m  [32mâœ”[39m[0m[90m can set array default to null (gh-14717)[0m
2025-04-11T19:23:23.9380614Z     [32m  [32mâœ”[39m[0m[90m validation works when setting array index (gh-3816)[0m
2025-04-11T19:23:23.9582732Z     [32m  [32mâœ”[39m[0m[90m validateSync works when setting array index nested (gh-5389)[0m
2025-04-11T19:23:23.9672508Z     [32m  [32mâœ”[39m[0m[90m single embedded with defaults have $parent (gh-4115)[0m
2025-04-11T19:23:23.9899198Z     [32m  [32mâœ”[39m[0m[90m removing parent doc calls deleteOne hooks on subdocs (gh-2348) (gh-4566)[0m
2025-04-11T19:23:24.0079603Z     [32m  [32mâœ”[39m[0m[90m set() empty obj unmodifies subpaths (gh-4182)[0m
2025-04-11T19:23:24.0265117Z     [32m  [32mâœ”[39m[0m[90m clears subpaths when removing single nested (gh-4216)[0m
2025-04-11T19:23:24.0468492Z     [32m  [32mâœ”[39m[0m[90m setting path to empty object works (gh-4218)[0m
2025-04-11T19:23:24.0663626Z     [32m  [32mâœ”[39m[0m[90m setting path to object with strict and no paths in the schema (gh-6436) (gh-4218)[0m
2025-04-11T19:23:24.0752547Z     [32m  [32mâœ”[39m[0m[90m minimize + empty object (gh-4337)[0m
2025-04-11T19:23:24.0979941Z     [32m  [32mâœ”[39m[0m[90m directModifiedPaths() (gh-7373)[0m
2025-04-11T19:23:24.1164665Z     [32m  [32mâœ”[39m[0m[90m single nested isNew (gh-4369)[0m
2025-04-11T19:23:24.1258120Z     [32m  [32mâœ”[39m[0m[90m deep default array values (gh-4540)[0m
2025-04-11T19:23:24.1477728Z     [32m  [32mâœ”[39m[0m[90m default values with subdoc array (gh-4390)[0m
2025-04-11T19:23:24.1577860Z     [32m  [32mâœ”[39m[0m[90m handles invalid dates (gh-4404)[0m
2025-04-11T19:23:24.1683677Z     [32m  [32mâœ”[39m[0m[90m setting array subpath (gh-4472)[0m
2025-04-11T19:23:24.1936385Z     [32m  [32mâœ”[39m[0m[90m ignore paths (gh-4480)[0m
2025-04-11T19:23:24.2176393Z     [32m  [32mâœ”[39m[0m[90m ignore subdocs paths (gh-4480) (gh-6152)[0m
2025-04-11T19:23:24.2376044Z     [32m  [32mâœ”[39m[0m[90m composite _ids (gh-4542)[0m
2025-04-11T19:23:24.2465935Z     [32m  [32mâœ”[39m[0m[90m validateSync with undefined and conditional required (gh-4607)[0m
2025-04-11T19:23:24.2584711Z     [32m  [32mâœ”[39m[0m[90m conditional required on single nested (gh-4663)[0m
2025-04-11T19:23:24.2801163Z     [32m  [32mâœ”[39m[0m[90m setting full path under single nested schema works (gh-4578) (gh-4528)[0m
2025-04-11T19:23:24.3009572Z     [32m  [32mâœ”[39m[0m[90m setting a nested path retains nested modified paths (gh-5206)[0m
2025-04-11T19:23:24.3101963Z     [32m  [32mâœ”[39m[0m[90m toObject() does not depopulate top level (gh-3057)[0m
2025-04-11T19:23:24.3252213Z     [32m  [32mâœ”[39m[0m[90m toObject() respects schema-level depopulate (gh-6313)[0m
2025-04-11T19:23:24.3410077Z     [32m  [32mâœ”[39m[0m[90m single nested doc conditional required (gh-4654)[0m
2025-04-11T19:23:24.3625304Z     [32m  [32mâœ”[39m[0m[90m handles setting single nested schema to equal value (gh-4676)[0m
2025-04-11T19:23:24.3836402Z     [32m  [32mâœ”[39m[0m[90m handles setting single nested doc to null after setting (gh-4766)[0m
2025-04-11T19:23:24.4058415Z     [32m  [32mâœ”[39m[0m[90m buffers with subtypes as ids (gh-4506)[0m
2025-04-11T19:23:24.4157465Z     [32m  [32mâœ”[39m[0m[90m embedded docs dont mark parent as invalid (gh-4681)[0m
2025-04-11T19:23:24.4437318Z     [32m  [32mâœ”[39m[0m[90m should depopulate the shard key when saving (gh-4658)[0m
2025-04-11T19:23:24.4537772Z     [32m  [32mâœ”[39m[0m[90m handles setting virtual subpaths (gh-4716)[0m
2025-04-11T19:23:24.4757709Z     [32m  [32mâœ”[39m[0m[90m handles selected nested elements with defaults (gh-4739) (gh-11376)[0m
2025-04-11T19:23:24.4854677Z     [32m  [32mâœ”[39m[0m[90m handles mark valid in subdocs correctly (gh-4778)[0m
2025-04-11T19:23:24.5087328Z     [32m  [32mâœ”[39m[0m[90m timestamps set to false works (gh-7074)[0m
2025-04-11T19:23:24.5284386Z     [32m  [32mâœ”[39m[0m[90m timestamps with nested paths (gh-5051)[0m
2025-04-11T19:23:24.5376246Z     [32m  [32mâœ”[39m[0m[90m Declaring defaults in your schema with timestamps defined (gh-6024)[0m
2025-04-11T19:23:24.5616266Z     [32m  [32mâœ”[39m[0m[90m supports $where in pre save hook (gh-4004)[0m
2025-04-11T19:23:24.5865482Z     [32m  [32mâœ”[39m[0m[90m toObject() with buffer and minimize (gh-4800)[0m
2025-04-11T19:23:24.5957382Z     [32m  [32mâœ”[39m[0m[90m buffer subtype prop (gh-5530)[0m
2025-04-11T19:23:24.6188761Z     [32m  [32mâœ”[39m[0m[90m runs validate hooks on single nested subdocs if not directly modified (gh-3884)[0m
2025-04-11T19:23:24.6383831Z     [32m  [32mâœ”[39m[0m[90m runs validate hooks on arrays subdocs if not directly modified (gh-5861)[0m
2025-04-11T19:23:24.6572941Z     [32m  [32mâœ”[39m[0m[90m does not run schema type validator on single nested if not direct modified (gh-5885)[0m
2025-04-11T19:23:24.6669660Z     [32m  [32mâœ”[39m[0m[90m runs schema type validator on single nested if parent has default (gh-7493)[0m
2025-04-11T19:23:24.6806748Z     [32m  [32mâœ”[39m[0m[90m does not overwrite when setting nested (gh-4793)[0m
2025-04-11T19:23:24.7003096Z     [32m  [32mâœ”[39m[0m[90m hooks/middleware for custom methods (gh-6385) (gh-7456)[0m
2025-04-11T19:23:24.7117377Z     [32m  [32mâœ”[39m[0m[90m custom methods with promises (gh-6385)[0m
2025-04-11T19:23:24.7234771Z     [32m  [32mâœ”[39m[0m[90m toString() as custom method (gh-6538)[0m
2025-04-11T19:23:24.7376850Z     [32m  [32mâœ”[39m[0m[90m setting to discriminator (gh-4935)[0m
2025-04-11T19:23:24.7633171Z     [32m  [32mâœ”[39m[0m[90m handles errors in sync validators (gh-2185)[0m
2025-04-11T19:23:24.7865532Z     [32m  [32mâœ”[39m[0m[90m allows hook as a schema key (gh-5047)[0m
2025-04-11T19:23:24.8059076Z     [32m  [32mâœ”[39m[0m[90m save errors with callback and promise work (gh-5216)[0m
2025-04-11T19:23:24.8260314Z     [32m  [32mâœ”[39m[0m[90m post hooks on child subdocs run after save (gh-5085)[0m
2025-04-11T19:23:24.8455715Z     [32m  [32mâœ”[39m[0m[90m post hooks on array child subdocs run after save (gh-5085) (gh-6926)[0m
2025-04-11T19:23:24.8544322Z     [32m  [32mâœ”[39m[0m[90m nested docs toObject() clones (gh-5008)[0m
2025-04-11T19:23:24.8656436Z     [32m  [32mâœ”[39m[0m[90m toObject() with null (gh-5143)[0m
2025-04-11T19:23:24.8772603Z     [32m  [32mâœ”[39m[0m[90m handles array subdocs with single nested subdoc default (gh-5162)[0m
2025-04-11T19:23:24.8889056Z     [32m  [32mâœ”[39m[0m[90m iterating through nested doc keys (gh-5078)[0m
2025-04-11T19:23:24.9002673Z     [32m  [32mâœ”[39m[0m[90m deeply nested virtual paths (gh-5250)[0m
2025-04-11T19:23:24.9303475Z     [32m  [32mâœ”[39m[0m[90m nested virtual when populating with parent projected out (gh-7491)[0m
2025-04-11T19:23:24.9407949Z     [32m  [32mâœ”[39m[0m[90m JSON.stringify nested errors (gh-5208)[0m
2025-04-11T19:23:24.9528866Z     [32m  [32mâœ”[39m[0m[90m handles errors in subdoc pre validate (gh-5215)[0m
2025-04-11T19:23:24.9649712Z     [32m  [32mâœ”[39m[0m[90m custom error types (gh-4009)[0m
2025-04-11T19:23:24.9854901Z     [32m  [32mâœ”[39m[0m[90m saving a doc with nested string array (gh-5282)[0m
2025-04-11T19:23:25.0071168Z     [32m  [32mâœ”[39m[0m[90m push() onto a nested doc array (gh-6398)[0m
2025-04-11T19:23:25.0285419Z     [32m  [32mâœ”[39m[0m[90m push() onto a triple nested doc array (gh-6602) (gh-6398)[0m
2025-04-11T19:23:25.0486520Z     [32m  [32mâœ”[39m[0m[90m null _id (gh-5236)[0m
2025-04-11T19:23:25.0583346Z     [32m  [32mâœ”[39m[0m[90m setting populated path with typeKey (gh-5313)[0m
2025-04-11T19:23:25.0865297Z     [32m  [32mâœ”[39m[0m[90m save twice with write concern (gh-5294)[0m
2025-04-11T19:23:25.1056056Z     [32m  [32mâœ”[39m[0m[90m undefined field with conditional required (gh-5296)[0m
2025-04-11T19:23:25.1146814Z     [32m  [32mâœ”[39m[0m[90m dotted virtuals in toObject (gh-5473)[0m
2025-04-11T19:23:25.1374889Z     [32m  [32mâœ”[39m[0m[90m dotted virtuals in toObject (gh-5506)[0m
2025-04-11T19:23:25.1463884Z     [32m  [32mâœ”[39m[0m[90m parent props not in child (gh-5470)[0m
2025-04-11T19:23:25.1694209Z     [32m  [32mâœ”[39m[0m[90m modifying array with existing ids (gh-5523)[0m
2025-04-11T19:23:25.1903690Z     [32m  [32mâœ”[39m[0m[90m consistent setter context for single nested (gh-5363)[0m
2025-04-11T19:23:25.2129196Z     [32m  [32mâœ”[39m[0m[90m deeply nested subdocs and markModified (gh-5406)[0m
2025-04-11T19:23:25.2341335Z     [32m  [32mâœ”[39m[0m[90m single nested subdoc post deleteOne hooks (gh-5388)[0m
2025-04-11T19:23:25.2435229Z     [32m  [32mâœ”[39m[0m[90m push populated doc onto empty array triggers manual population (gh-5504)[0m
2025-04-11T19:23:25.2656913Z     [32m  [32mâœ”[39m[0m[90m single nested conditional required scope (gh-5569)[0m
2025-04-11T19:23:25.2752835Z     [32m  [32mâœ”[39m[0m[90m single nested setters only get called once (gh-5601)[0m
2025-04-11T19:23:25.2873576Z     [32m  [32mâœ”[39m[0m[90m single getters only get called once (gh-7442)[0m
2025-04-11T19:23:25.3007550Z     [32m  [32mâœ”[39m[0m[90m calls subdocument getters if child schema has getters: true (gh-12105)[0m
2025-04-11T19:23:25.3320468Z     [32m  [32mâœ”[39m[0m[90m setting doc array to array of top-level docs works (gh-5632)[0m
2025-04-11T19:23:25.3520073Z     [32m  [32mâœ”[39m[0m[90m Using set as a schema path (gh-1939)[0m
2025-04-11T19:23:25.3616856Z     [32m  [32mâœ”[39m[0m[90m handles array defaults correctly (gh-5780)[0m
2025-04-11T19:23:25.3843441Z     [32m  [32mâœ”[39m[0m[90m sets path to the empty string on save after query (gh-6477)[0m
2025-04-11T19:23:25.4025735Z     [32m  [32mâœ”[39m[0m[90m sets path to the default boolean on save after query (gh-6477)[0m
2025-04-11T19:23:25.4119691Z     [32m  [32mâœ”[39m[0m[90m virtuals with no getters return undefined (gh-6223)[0m
2025-04-11T19:23:25.4233097Z     [32m  [32mâœ”[39m[0m[90m add default getter/setter (gh-6262)[0m
2025-04-11T19:23:25.4350788Z     [32m  [32mâœ”[39m[0m[90m calls array getters (gh-9889)[0m
2025-04-11T19:23:25.4577711Z     [32m  [32mâœ”[39m[0m[90m doesnt call setters when init-ing an array (gh-9889)[0m
2025-04-11T19:23:25.4672430Z     [32m  [32mâœ”[39m[0m[90m nested virtuals + nested toJSON (gh-6294)[0m
2025-04-11T19:23:25.4800580Z     [32m  [32mâœ”[39m[0m[90m Disallows writing to __proto__ and other special properties[0m
2025-04-11T19:23:25.5094570Z     [32m  [32mâœ”[39m[0m[90m save() depopulates pushed arrays (gh-6048)[0m
2025-04-11T19:23:25.5353811Z     [32m  [32mâœ”[39m[0m[90m Handles setting populated path set via `Document#populate()` (gh-7302)[0m
2025-04-11T19:23:25.5566676Z     [32m  [32mâœ”[39m[0m[90m Single nested subdocs using discriminator can be modified (gh-5693)[0m
2025-04-11T19:23:25.5670356Z     [32m  [32mâœ”[39m[0m[90m required function only gets called once (gh-6801)[0m
2025-04-11T19:23:25.5953378Z     [32m  [32mâœ”[39m[0m[90m required function called again after save() (gh-6892)[0m
2025-04-11T19:23:25.6205040Z     [32m  [32mâœ”[39m[0m[90m doc array: set then remove (gh-3511)[0m
2025-04-11T19:23:25.6513741Z     [32m  [32mâœ”[39m[0m[90m doc array: modify then sort (gh-7556)[0m
2025-04-11T19:23:25.6752973Z     [32m  [32mâœ”[39m[0m[90m modifying unselected nested object (gh-5800)[0m
2025-04-11T19:23:25.6984830Z     [32m  [32mâœ”[39m[0m[90m set() underneath embedded discriminator (gh-6482)[0m
2025-04-11T19:23:25.7231166Z     [32m  [32mâœ”[39m[0m[90m set() underneath array embedded discriminator (gh-6526)[0m
2025-04-11T19:23:25.7445569Z     [32m  [32mâœ”[39m[0m[90m consistent context for nested docs (gh-5347)[0m
2025-04-11T19:23:25.7540673Z     [32m  [32mâœ”[39m[0m[90m accessing arrays in setters on initial document creation (gh-6155)[0m
2025-04-11T19:23:25.7668289Z     [32m  [32mâœ”[39m[0m[90m handles 2nd level nested field with null child (gh-6187)[0m
2025-04-11T19:23:25.7898788Z     [32m  [32mâœ”[39m[0m[90m does not call default function on init if value set (gh-6410)[0m
2025-04-11T19:23:25.7994525Z     [32m  [32mâœ”[39m[0m[90m doesnt double-call getters when using get() (gh-6779)[0m
2025-04-11T19:23:25.8114878Z     [32m  [32mâœ”[39m[0m[90m returns doubly nested field in inline sub schema when using get() (gh-6925)[0m
2025-04-11T19:23:25.8321123Z     [32m  [32mâœ”[39m[0m[90m defaults should see correct isNew (gh-3793)[0m
2025-04-11T19:23:25.8553854Z     [32m  [32mâœ”[39m[0m[90m modify multiple subdoc paths (gh-4405)[0m
2025-04-11T19:23:25.8815315Z     [32m  [32mâœ”[39m[0m[90m doesnt try to cast populated embedded docs (gh-6390)[0m
2025-04-11T19:23:25.8870669Z [0m      modifiedPaths[0m
2025-04-11T19:23:25.9042972Z       [32m  [32mâœ”[39m[0m[90m doesnt markModified child paths if parent is modified (gh-4224)[0m
2025-04-11T19:23:25.9158955Z       [32m  [32mâœ”[39m[0m[90m includeChildren option (gh-6134)[0m
2025-04-11T19:23:25.9293033Z       [32m  [32mâœ”[39m[0m[90m includeChildren option with arrays (gh-5904)[0m
2025-04-11T19:23:25.9426426Z       [32m  [32mâœ”[39m[0m[90m 1 level down nested paths get marked modified on initial set (gh-7313) (gh-6944)[0m
2025-04-11T19:23:25.9513905Z [0m      convertToFalse and convertToTrue (gh-6758)[0m
2025-04-11T19:23:25.9704038Z       [32m  [32mâœ”[39m[0m[90m lets you add custom strings that get converted to true/false[0m
2025-04-11T19:23:25.9816209Z       [32m  [32mâœ”[39m[0m[90m allows adding `null` to list of values that convert to false (gh-9223)[0m
2025-04-11T19:23:25.9913766Z [0m    clobbered Array.prototype[0m
2025-04-11T19:23:25.9967179Z     [32m  [32mâœ”[39m[0m[90m handles clobbered Array.prototype.remove (gh-6431)[0m
2025-04-11T19:23:26.0233034Z     [32m  [32mâœ”[39m[0m[90m calls array validators again after save (gh-6818)[0m
2025-04-11T19:23:26.0335014Z     [32m  [32mâœ”[39m[0m[90m set single nested to num throws ObjectExpectedError (gh-6710) (gh-6753)[0m
2025-04-11T19:23:26.0464623Z     [32m  [32mâœ”[39m[0m[90m set array to false throws ObjectExpectedError (gh-7242)[0m
2025-04-11T19:23:26.0553422Z [0m    overwrite() (gh-7830)[0m
2025-04-11T19:23:26.0706805Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:23:26.0875442Z     [32m  [32mâœ”[39m[0m[90m skips version key[0m
2025-04-11T19:23:26.1056008Z     [32m  [32mâœ”[39m[0m[90m skips discriminator key[0m
2025-04-11T19:23:26.1362520Z     [32m  [32mâœ”[39m[0m[90m overwrites maps (gh-9549)[0m
2025-04-11T19:23:26.1423987Z [0m    immutable properties (gh-7671)[0m
2025-04-11T19:23:26.1474962Z     [32m  [32mâœ”[39m[0m[90m SchemaType#immutable()[0m
2025-04-11T19:23:26.1866771Z     [32m  [32mâœ”[39m[0m[90m with save()[0m
2025-04-11T19:23:26.2085997Z     [32m  [32mâœ”[39m[0m[90m with update[0m
2025-04-11T19:23:26.2345214Z     [32m  [32mâœ”[39m[0m[90m conditional immutable (gh-8001)[0m
2025-04-11T19:23:26.2591738Z     [32m  [32mâœ”[39m[0m[90m immutable with strict mode (gh-8149)[0m
2025-04-11T19:23:26.2657450Z [0m    Document#getChanges(...) (gh-9096)[0m
2025-04-11T19:23:26.2802774Z     [32m  [32mâœ”[39m[0m[90m returns an empty object when there are no changes[0m
2025-04-11T19:23:26.2995405Z     [32m  [32mâœ”[39m[0m[90m returns only the changed paths[0m
2025-04-11T19:23:26.3058761Z [0m    reserved keywords can be used optionally (gh-9010)[0m
2025-04-11T19:23:26.3069573Z [0m      Document#validate(...)[0m
2025-04-11T19:23:26.3131373Z       [32m  [32mâœ”[39m[0m[90m is available as `$validate`[0m
2025-04-11T19:23:26.3273445Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-11T19:23:26.3364925Z [0m      Document#save(...)[0m
2025-04-11T19:23:26.3524148Z       [32m  [32mâœ”[39m[0m[90m is available as `$save`[0m
2025-04-11T19:23:26.3640304Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-11T19:23:26.3726009Z [0m      Document#isModified(...)[0m
2025-04-11T19:23:26.3881908Z       [32m  [32mâœ”[39m[0m[90m is available as `$isModified`[0m
2025-04-11T19:23:26.3995144Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-11T19:23:26.4087208Z [0m      Document#isNew[0m
2025-04-11T19:23:26.4236185Z       [32m  [32mâœ”[39m[0m[90m is available as `$isNew`[0m
2025-04-11T19:23:26.4346153Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-11T19:23:26.4435856Z [0m      Document#populated(...)[0m
2025-04-11T19:23:26.4662562Z       [32m  [32mâœ”[39m[0m[90m is available as `$populated`[0m
2025-04-11T19:23:26.4775249Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-11T19:23:26.4867122Z [0m      Document#toObject(...)[0m
2025-04-11T19:23:26.5025963Z       [32m  [32mâœ”[39m[0m[90m is available as `$toObject`[0m
2025-04-11T19:23:26.5144280Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-11T19:23:26.5235278Z [0m      Document#init(...)[0m
2025-04-11T19:23:26.5295311Z       [32m  [32mâœ”[39m[0m[90m is available as `$init`[0m
2025-04-11T19:23:26.5423324Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-11T19:23:26.5514781Z [0m      Document#collection[0m
2025-04-11T19:23:26.5525512Z       [36m  - is available as `$collection`[0m
2025-04-11T19:23:26.5526517Z       [36m  - can be used as a property in documents[0m
2025-04-11T19:23:26.5536682Z [0m      Document#errors[0m
2025-04-11T19:23:26.5596682Z       [32m  [32mâœ”[39m[0m[90m is available as `$errors`[0m
2025-04-11T19:23:26.5724407Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-11T19:23:26.5813077Z [0m      Document#removeListener[0m
2025-04-11T19:23:26.5872344Z       [32m  [32mâœ”[39m[0m[90m is available as `$removeListener`[0m
2025-04-11T19:23:26.5997268Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-11T19:23:26.6085446Z [0m      Document#listeners[0m
2025-04-11T19:23:26.6144676Z       [32m  [32mâœ”[39m[0m[90m is available as `$listeners`[0m
2025-04-11T19:23:26.6271218Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-11T19:23:26.6355129Z [0m      Document#on[0m
2025-04-11T19:23:26.6414040Z       [32m  [32mâœ”[39m[0m[90m is available as `$on`[0m
2025-04-11T19:23:26.6575968Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-11T19:23:26.6686033Z [0m      Document#emit[0m
2025-04-11T19:23:26.6747187Z       [32m  [32mâœ”[39m[0m[90m is available as `$emit`[0m
2025-04-11T19:23:26.6882266Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-11T19:23:26.6968937Z [0m      Document#get[0m
2025-04-11T19:23:26.7027761Z       [32m  [32mâœ”[39m[0m[90m is available as `$get`[0m
2025-04-11T19:23:26.7153975Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-11T19:23:26.7250807Z [0m    virtuals `pathsToSkip` (gh-10120)[0m
2025-04-11T19:23:26.7302940Z     [32m  [32mâœ”[39m[0m[90m adds support for `pathsToSkip` for virtuals feat-10120[0m
2025-04-11T19:23:26.7429806Z     [32m  [32mâœ”[39m[0m[90m supports passing a list of virtuals to `toObject()` (gh-10120)[0m
2025-04-11T19:23:26.7515813Z [0m    validation `pathsToSkip` (gh-10230)[0m
2025-04-11T19:23:26.7572542Z     [32m  [32mâœ”[39m[0m[90m support `pathsToSkip` option for `Document#validate()`[0m
2025-04-11T19:23:26.7687984Z     [32m  [32mâœ”[39m[0m[90m support `pathsToSkip` option for `Document#validate()`[0m
2025-04-11T19:23:26.7805640Z     [32m  [32mâœ”[39m[0m[90m support `pathsToSkip` option for `Document#validateSync()`[0m
2025-04-11T19:23:26.7880876Z     [36m  - support `pathsToSkip` option for `Model.validate()`[0m
2025-04-11T19:23:26.7921166Z     [32m  [32mâœ”[39m[0m[90m `pathsToSkip` accepts space separated paths[0m
2025-04-11T19:23:26.8005055Z [0m    $inc (gh-11915)[0m
2025-04-11T19:23:26.8171526Z     [32m  [32mâœ”[39m[0m[90m stores CastError if trying to $inc a non-numeric path[0m
2025-04-11T19:23:26.8363664Z     [32m  [32mâœ”[39m[0m[90m should correctly increment even if the document has not saved after each increment gh-13274[0m
2025-04-11T19:23:26.8415806Z [0m      top-level path[0m
2025-04-11T19:23:26.8607182Z       [32m  [32mâœ”[39m[0m[90m sends a $inc command for a given path[0m
2025-04-11T19:23:26.8944697Z       [32m  [32mâœ”[39m[0m[90m calls setters on the value passed to `$inc()` (gh-13158)[0m
2025-04-11T19:23:26.9193891Z       [32m  [32mâœ”[39m[0m[90m avoids updating value if setter fails (gh-13158)[0m
2025-04-11T19:23:26.9412680Z       [32m  [32mâœ”[39m[0m[90m works as a $set if the document is new[0m
2025-04-11T19:23:26.9652630Z       [32m  [32mâœ”[39m[0m[90m treats as a $set if set after $inc[0m
2025-04-11T19:23:26.9874783Z       [32m  [32mâœ”[39m[0m[90m tries to cast to number[0m
2025-04-11T19:23:27.0091749Z       [32m  [32mâœ”[39m[0m[90m stores CastError if can't convert to number[0m
2025-04-11T19:23:27.0165405Z [0m      nested paths[0m
2025-04-11T19:23:27.0348439Z       [32m  [32mâœ”[39m[0m[90m handles nested paths[0m
2025-04-11T19:23:27.0576635Z       [32m  [32mâœ”[39m[0m[90m treats as $set if overwriting nested path[0m
2025-04-11T19:23:27.0650523Z [0m      subdocuments[0m
2025-04-11T19:23:27.0824715Z       [32m  [32mâœ”[39m[0m[90m handles paths underneath subdocuments[0m
2025-04-11T19:23:27.1072914Z       [32m  [32mâœ”[39m[0m[90m treats as a $set if setting subdocument after $inc[0m
2025-04-11T19:23:27.1144945Z [0m      document array[0m
2025-04-11T19:23:27.1336017Z       [32m  [32mâœ”[39m[0m[90m handles paths underneath subdocuments[0m
2025-04-11T19:23:27.1562043Z       [32m  [32mâœ”[39m[0m[90m works on pushed subdocs[0m
2025-04-11T19:23:27.1786599Z       [32m  [32mâœ”[39m[0m[90m Splice call registers path modification[0m
2025-04-11T19:23:27.1870922Z [0m    gh-2306[0m
2025-04-11T19:23:27.1925324Z     [32m  [32mâœ”[39m[0m[90m allow define virtual on non-object path[0m
2025-04-11T19:23:27.2045928Z     [32m  [32mâœ”[39m[0m[90m works on document arrays[0m
2025-04-11T19:23:27.2168443Z 
2025-04-11T19:23:27.2169843Z [0m  Check if instance function that is supplied in schema option is available[0m
2025-04-11T19:23:27.2207871Z   [32m  [32mâœ”[39m[0m[90m should give an instance function back rather than undefined[0m
2025-04-11T19:23:27.2239790Z 
2025-04-11T19:23:27.2244792Z [0m  model: populate:[0m
2025-04-11T19:23:27.2498147Z   [32m  [32mâœ”[39m[0m[90m populating array of object[0m
2025-04-11T19:23:27.2768640Z   [32m  [32mâœ”[39m[0m[90m deep population (gh-3103)[0m
2025-04-11T19:23:27.3016505Z   [32m  [32mâœ”[39m[0m[90m populating a single ref[0m
2025-04-11T19:23:27.3231193Z   [32m  [32mâœ”[39m[0m[90m not failing on null as ref[0m
2025-04-11T19:23:27.3407143Z   [32m  [32mâœ”[39m[0m[90m not failing on empty object as ref[0m
2025-04-11T19:23:27.3642807Z   [32m  [32mâœ”[39m[0m[90m across DBs[0m
2025-04-11T19:23:27.3878282Z   [32m  [32mâœ”[39m[0m[90m an error in single ref population propagates[0m
2025-04-11T19:23:27.4145989Z   [32m  [32mâœ”[39m[0m[90m populating with partial fields selection[0m
2025-04-11T19:23:27.4414179Z   [32m  [32mâœ”[39m[0m[90m population of single oid with partial field selection and filter[0m
2025-04-11T19:23:27.4670929Z   [32m  [32mâœ”[39m[0m[90m population of undefined fields in a collection of docs[0m
2025-04-11T19:23:27.4971382Z   [32m  [32mâœ”[39m[0m[90m undefined for nested paths (gh-3859)[0m
2025-04-11T19:23:27.5269591Z   [32m  [32mâœ”[39m[0m[90m population and changing a reference[0m
2025-04-11T19:23:27.5549844Z   [32m  [32mâœ”[39m[0m[90m populating with partial fields selection and changing ref[0m
2025-04-11T19:23:27.5804146Z   [32m  [32mâœ”[39m[0m[90m populating an array of refs and fetching many[0m
2025-04-11T19:23:27.6062264Z   [32m  [32mâœ”[39m[0m[90m an error in array reference population propagates[0m
2025-04-11T19:23:27.6317429Z   [32m  [32mâœ”[39m[0m[90m populating an array of references with fields selection[0m
2025-04-11T19:23:27.6604616Z   [32m  [32mâœ”[39m[0m[90m populating an array of references and filtering[0m
2025-04-11T19:23:27.6875525Z   [32m  [32mâœ”[39m[0m[90m populating an array of references and multi-filtering[0m
2025-04-11T19:23:27.7142632Z   [32m  [32mâœ”[39m[0m[90m populating an array of references and multi-filtering with field selection[0m
2025-04-11T19:23:27.7620973Z   [32m  [32mâœ”[39m[0m[90m populating an array of refs changing one and removing one[0m[33m (39ms)[0m
2025-04-11T19:23:27.7929141Z   [32m  [32mâœ”[39m[0m[90m clears cache when array has been re-assigned (gh-2176)[0m
2025-04-11T19:23:27.8191657Z   [32m  [32mâœ”[39m[0m[90m populating subdocuments partially[0m
2025-04-11T19:23:27.8463949Z   [32m  [32mâœ”[39m[0m[90m populating subdocuments partially with conditions[0m
2025-04-11T19:23:27.8806457Z   [32m  [32mâœ”[39m[0m[90m populating subdocs with invalid/missing subproperties[0m
2025-04-11T19:23:27.9226917Z   [32m  [32mâœ”[39m[0m[90m properly handles limit per document (gh-2151)[0m
2025-04-11T19:23:27.9458876Z   [32m  [32mâœ”[39m[0m[90m populating subdocuments partially with empty array (gh-481)[0m
2025-04-11T19:23:27.9687969Z   [32m  [32mâœ”[39m[0m[90m populating subdocuments partially with null array[0m
2025-04-11T19:23:27.9925934Z   [32m  [32mâœ”[39m[0m[90m populating subdocuments with array including nulls[0m
2025-04-11T19:23:28.0177914Z   [32m  [32mâœ”[39m[0m[90m supports `retainNullValues` to override filtering out null docs (gh-6432)[0m
2025-04-11T19:23:28.0449406Z   [32m  [32mâœ”[39m[0m[90m supports `retainNullValues` while suppressing _id of subdocument[0m
2025-04-11T19:23:28.0836330Z   [32m  [32mâœ”[39m[0m[90m populating more than one array at a time[0m
2025-04-11T19:23:28.1242205Z   [32m  [32mâœ”[39m[0m[90m populating multiple children of a sub-array at a time[0m
2025-04-11T19:23:28.1661278Z   [32m  [32mâœ”[39m[0m[90m passing sort options to the populate method[0m
2025-04-11T19:23:28.1937118Z   [32m  [32mâœ”[39m[0m[90m limit should apply to each returned doc, not in aggregate (gh-1490)[0m
2025-04-11T19:23:28.2011981Z   [32m  [32mâœ”[39m[0m[90m refs should cast to ObjectId from hexstrings[0m
2025-04-11T19:23:28.2289553Z   [32m  [32mâœ”[39m[0m[90m populate should work on String _ids[0m
2025-04-11T19:23:28.2728653Z   [32m  [32mâœ”[39m[0m[90m required works on ref fields (gh-577)[0m
2025-04-11T19:23:28.2981496Z   [32m  [32mâœ”[39m[0m[90m populate should work on Number _ids[0m
2025-04-11T19:23:28.3330581Z   [32m  [32mâœ”[39m[0m[90m populate works with schemas with both id and _id defined[0m
2025-04-11T19:23:28.3618857Z   [32m  [32mâœ”[39m[0m[90m Update works with populated arrays (gh-602)[0m
2025-04-11T19:23:28.3879692Z   [32m  [32mâœ”[39m[0m[90m toJSON should also be called for refs (gh-675)[0m
2025-04-11T19:23:28.4127471Z   [32m  [32mâœ”[39m[0m[90m populate should work on Buffer _ids (gh-686)[0m
2025-04-11T19:23:28.4396691Z   [32m  [32mâœ”[39m[0m[90m populated Buffer _ids should be requireable[0m
2025-04-11T19:23:28.4638039Z   [32m  [32mâœ”[39m[0m[90m populating with custom model selection (gh-773)[0m
2025-04-11T19:23:28.4899926Z   [32m  [32mâœ”[39m[0m[90m strips out not-matched ids when populating a hydrated doc (gh-6435)[0m
2025-04-11T19:23:28.5160581Z   [32m  [32mâœ”[39m[0m[90m avoids setting empty array on lean document when populate result is undefined (gh-10599)[0m
2025-04-11T19:23:28.5445702Z   [32m  [32mâœ”[39m[0m[90m supports ref: Model with virtual populate (gh-10695)[0m
2025-04-11T19:23:28.5736867Z   [32m  [32mâœ”[39m[0m[90m supports ref on subdocuments (gh-10856)[0m
2025-04-11T19:23:28.6013715Z   [32m  [32mâœ”[39m[0m[90m no-op when populating a single nested subdoc underneath a doc array with no ref (gh-11538) (gh-10856)[0m
2025-04-11T19:23:28.6300494Z   [32m  [32mâœ”[39m[0m[90m supports ref on array containing subdocuments (gh-10856)[0m
2025-04-11T19:23:28.6600727Z   [32m  [32mâœ”[39m[0m[90m uses `Model` by default when doing `Model.populate()` on a POJO (gh-10978)[0m
2025-04-11T19:23:28.6899100Z   [32m  [32mâœ”[39m[0m[90m can reference parent connection models by name after `useDb()` (gh-11003)[0m
2025-04-11T19:23:28.7431003Z   [32m  [32mâœ”[39m[0m[90m handles refPath underneath map of subdocuments (gh-9359)[0m[33m (46ms)[0m
2025-04-11T19:23:28.7697686Z   [32m  [32mâœ”[39m[0m[90m handles virtual populate with `justOne` underneath document array and sort (gh-12730) (gh-10552)[0m
2025-04-11T19:23:28.8115712Z   [32m  [32mâœ”[39m[0m[90m merges match when match is on `_id` (gh-12834)[0m
2025-04-11T19:23:28.8441304Z   [32m  [32mâœ”[39m[0m[90m supports removing and then recreating populate virtual using schema clone (gh-13085)[0m
2025-04-11T19:23:28.8701520Z   [32m  [32mâœ”[39m[0m[90m handles populating underneath document arrays that have null (gh-13839)[0m
2025-04-11T19:23:28.8998366Z   [32m  [32mâœ”[39m[0m[90m calls match function with virtual as parameter (gh-12443)[0m
2025-04-11T19:23:28.9274445Z   [32m  [32mâœ”[39m[0m[90m allows pushing to model populated in a query cursor (gh-13575)[0m
2025-04-11T19:23:28.9566652Z   [32m  [32mâœ”[39m[0m[90m sets populated docs in correct order when populating virtual underneath document array with justOne (gh-14018)[0m
2025-04-11T19:23:28.9887768Z   [32m  [32mâœ”[39m[0m[90m calls transform with single ObjectId when populating justOne path underneath array (gh-14073)[0m
2025-04-11T19:23:29.0193122Z   [32m  [32mâœ”[39m[0m[90m allows deselecting discriminator key when populating (gh-3230) (gh-13760) (gh-13679)[0m
2025-04-11T19:23:29.0489949Z   [32m  [32mâœ”[39m[0m[90m calls setter on virtual populated path with populated doc (gh-14285)[0m
2025-04-11T19:23:29.0808861Z   [32m  [32mâœ”[39m[0m[90m handles ref() function that returns a model (gh-14249)[0m
2025-04-11T19:23:29.1064152Z   [32m  [32mâœ”[39m[0m[90m avoids filtering out `null` values when applying match function (gh-14494)[0m
2025-04-11T19:23:29.1303399Z   [32m  [32mâœ”[39m[0m[90m avoids depopulating manually populated doc as getter value (gh-14759)[0m
2025-04-11T19:23:29.1542622Z   [32m  [32mâœ”[39m[0m[90m avoids populating manually populated doc as getter value (gh-14827)[0m
2025-04-11T19:23:29.1799269Z   [32m  [32mâœ”[39m[0m[90m makes sure that populate works correctly with duplicate foreignField with lean(); (gh-14794)[0m
2025-04-11T19:23:29.2102103Z   [32m  [32mâœ”[39m[0m[90m depopulates if pushing ObjectId to a populated array (gh-1635)[0m
2025-04-11T19:23:29.2358581Z   [32m  [32mâœ”[39m[0m[90m handles converting uuid documents to strings when calling toObject() (gh-14869)[0m
2025-04-11T19:23:29.2634687Z   [32m  [32mâœ”[39m[0m[90m avoids repopulating if forceRepopulate is disabled (gh-14979)[0m
2025-04-11T19:23:29.3016338Z   [32m  [32mâœ”[39m[0m[90m handles forceRepopulate as a global option (gh-14979)[0m
2025-04-11T19:23:29.3287325Z   [32m  [32mâœ”[39m[0m[90m handles populating UUID fields (gh-15315)[0m
2025-04-11T19:23:29.3337145Z [0m    deep populate[0m
2025-04-11T19:23:29.3619717Z     [32m  [32mâœ”[39m[0m[90m deep population with refs (gh-3507)[0m
2025-04-11T19:23:29.3940948Z     [32m  [32mâœ”[39m[0m[90m multiple paths with same options (gh-3808)[0m
2025-04-11T19:23:29.4010494Z [0m    populating sub docs[0m
2025-04-11T19:23:29.4244753Z     [32m  [32mâœ”[39m[0m[90m works with findById[0m
2025-04-11T19:23:29.4555250Z     [32m  [32mâœ”[39m[0m[90m works when first doc returned has empty array for populated path (gh-1055)[0m
2025-04-11T19:23:29.4625415Z [0m    specifying a custom model without specifying a ref in schema[0m
2025-04-11T19:23:29.4833859Z     [32m  [32mâœ”[39m[0m[90m with String _id[0m
2025-04-11T19:23:29.5089308Z     [32m  [32mâœ”[39m[0m[90m with Number _id[0m
2025-04-11T19:23:29.5354897Z     [32m  [32mâœ”[39m[0m[90m with Buffer _id[0m
2025-04-11T19:23:29.5609695Z     [32m  [32mâœ”[39m[0m[90m with ObjectId _id[0m
2025-04-11T19:23:29.5678167Z [0m    specifying all params using an object[0m
2025-04-11T19:23:29.6005926Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:23:29.6075973Z [0m    Model.populate()[0m
2025-04-11T19:23:29.6339985Z     [32m  [32mâœ”[39m[0m[90m returns a promise[0m
2025-04-11T19:23:29.6672129Z     [32m  [32mâœ”[39m[0m[90m of individual document works[0m
2025-04-11T19:23:29.6731662Z [0m      a document already populated[0m
2025-04-11T19:23:29.6742422Z [0m        when paths are not modified[0m
2025-04-11T19:23:29.7062085Z         [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:23:29.7153693Z [0m        when paths are modified[0m
2025-04-11T19:23:29.7458587Z         [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:23:29.7562692Z [0m      of multiple documents[0m
2025-04-11T19:23:29.7853075Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:23:29.7945720Z [0m    populating combined with lean (gh-1260)[0m
2025-04-11T19:23:29.8164571Z     [32m  [32mâœ”[39m[0m[90m with findOne[0m
2025-04-11T19:23:29.8487317Z     [32m  [32mâœ”[39m[0m[90m with find[0m
2025-04-11T19:23:29.8557377Z [0m    records paths and _ids used in population[0m
2025-04-11T19:23:29.8848709Z     [32m  [32mâœ”[39m[0m[90m with findOne[0m
2025-04-11T19:23:29.9171628Z     [32m  [32mâœ”[39m[0m[90m with find[0m
2025-04-11T19:23:29.9243356Z [0m    deselecting _id[0m
2025-04-11T19:23:29.9254012Z [0m      in a subdocument[0m
2025-04-11T19:23:29.9601385Z       [32m  [32mâœ”[39m[0m[90m works (gh-14231)[0m
2025-04-11T19:23:29.9959660Z       [32m  [32mâœ”[39m[0m[90m with lean[0m
2025-04-11T19:23:30.0042781Z [0m      of documents being populated[0m
2025-04-11T19:23:30.0338670Z       [32m  [32mâœ”[39m[0m[90m still works (gh-1441)[0m
2025-04-11T19:23:30.0429619Z [0m    DynRef[0m
2025-04-11T19:23:30.0767759Z     [32m  [32mâœ”[39m[0m[90m Simple populate[0m
2025-04-11T19:23:30.1114237Z     [32m  [32mâœ”[39m[0m[90m Array populate[0m
2025-04-11T19:23:30.1556079Z     [32m  [32mâœ”[39m[0m[90m with nonexistant refPath (gh-4637)[0m
2025-04-11T19:23:30.2024353Z     [32m  [32mâœ”[39m[0m[90m array with empty refPath (gh-5377)[0m
2025-04-11T19:23:30.2561730Z     [32m  [32mâœ”[39m[0m[90m with non-arrays (gh-5114)[0m
2025-04-11T19:23:30.3226638Z     [32m  [32mâœ”[39m[0m[90m with different schema types for local fields (gh-6870)[0m
2025-04-11T19:23:30.3734291Z     [32m  [32mâœ”[39m[0m[90m with refPath and array of ids with parent refPath[0m
2025-04-11T19:23:30.4164256Z     [32m  [32mâœ”[39m[0m[90m with nested nonexistant refPath (gh-6457)[0m
2025-04-11T19:23:30.4664713Z     [32m  [32mâœ”[39m[0m[90m where first doc doesnt have a refPath (gh-6913[0m
2025-04-11T19:23:30.5073567Z     [32m  [32mâœ”[39m[0m[90m readable error with deselected refPath (gh-6834)[0m
2025-04-11T19:23:30.5146844Z [0m    leaves Documents within Mixed properties alone (gh-1471)[0m
2025-04-11T19:23:30.5435313Z     [32m  [32mâœ”[39m[0m[90m when saving new docs[0m
2025-04-11T19:23:30.5786878Z     [32m  [32mâœ”[39m[0m[90m when saving existing docs 5T5[0m
2025-04-11T19:23:30.5862358Z [0m    github issues[0m
2025-04-11T19:23:30.6140857Z     [32m  [32mâœ”[39m[0m[90m populating an array of refs, slicing, and fetching many (gh-5737)[0m
2025-04-11T19:23:30.6425167Z     [32m  [32mâœ”[39m[0m[90m populate + slice (gh-5737a)[0m
2025-04-11T19:23:30.6729319Z     [32m  [32mâœ”[39m[0m[90m handles multiple spaces in between paths to populate (gh-13951)[0m
2025-04-11T19:23:30.7017741Z     [32m  [32mâœ”[39m[0m[90m maps results back to correct document (gh-1444)[0m
2025-04-11T19:23:30.7392958Z     [32m  [32mâœ”[39m[0m[90m handles skip[0m
2025-04-11T19:23:30.7773510Z     [32m  [32mâœ”[39m[0m[90m handles slice (gh-1934)[0m
2025-04-11T19:23:30.8114470Z     [32m  [32mâœ”[39m[0m[90m fails if sorting with a doc array subprop (gh-2202)[0m
2025-04-11T19:23:30.8349066Z     [32m  [32mâœ”[39m[0m[90m handles toObject() (gh-3279)[0m
2025-04-11T19:23:30.8605971Z     [32m  [32mâœ”[39m[0m[90m populate option (gh-2321)[0m
2025-04-11T19:23:30.9017063Z     [32m  [32mâœ”[39m[0m[90m discriminator child schemas (gh-3878)[0m
2025-04-11T19:23:30.9262538Z     [32m  [32mâœ”[39m[0m[90m set to obj w/ same id doesnt mark modified (gh-3992)[0m
2025-04-11T19:23:30.9857419Z     [32m  [32mâœ”[39m[0m[90m deep populate single -> array (gh-3904)[0m[33m (50ms)[0m
2025-04-11T19:23:31.0436118Z     [32m  [32mâœ”[39m[0m[90m deep populate array -> array (gh-3954)[0m[33m (48ms)[0m
2025-04-11T19:23:31.0909729Z     [32m  [32mâœ”[39m[0m[90m 4 level population (gh-3973)[0m[33m (38ms)[0m
2025-04-11T19:23:31.1532670Z     [32m  [32mâœ”[39m[0m[90m deep populate two paths (gh-3974)[0m[33m (52ms)[0m
2025-04-11T19:23:31.2962246Z     [32m  [32mâœ”[39m[0m[90m out-of-order discriminators (gh-4073)[0m[31m (133ms)[0m
2025-04-11T19:23:31.3310654Z     [32m  [32mâœ”[39m[0m[90m dynref bug (gh-4104)[0m
2025-04-11T19:23:31.3608786Z     [32m  [32mâœ”[39m[0m[90m returned array has toObject() (gh-4656)[0m
2025-04-11T19:23:31.3876286Z     [32m  [32mâœ”[39m[0m[90m empty array (gh-4284)[0m
2025-04-11T19:23:31.4089958Z     [32m  [32mâœ”[39m[0m[90m empty populate string is a no-op (gh-4702)[0m
2025-04-11T19:23:31.4414033Z     [32m  [32mâœ”[39m[0m[90m checks field name correctly with nested arrays (gh-4365)[0m
2025-04-11T19:23:31.4720620Z     [32m  [32mâœ”[39m[0m[90m virtual populate with embedded discriminators (gh-6273)[0m
2025-04-11T19:23:31.5011161Z     [32m  [32mâœ”[39m[0m[90m populates virtual of embedded discriminator with dynamic ref (gh-6554)[0m
2025-04-11T19:23:31.5373274Z     [32m  [32mâœ”[39m[0m[90m populates virtual of embedded discriminator with dynamic ref when more than one model name is returned (gh-6612)[0m
2025-04-11T19:23:31.5689606Z     [32m  [32mâœ”[39m[0m[90m uses getter if one is defined on the localField (gh-6618)[0m
2025-04-11T19:23:31.6012267Z     [32m  [32mâœ”[39m[0m[90m populate child with same name as parent (gh-6839) (gh-6908)[0m
2025-04-11T19:23:31.6287439Z     [32m  [32mâœ”[39m[0m[90m passes scope as Model instance (gh-6726)[0m
2025-04-11T19:23:31.6563075Z     [32m  [32mâœ”[39m[0m[90m respects schema array even if underlying doc doesnt use array (gh-6908)[0m
2025-04-11T19:23:31.6809894Z     [32m  [32mâœ”[39m[0m[90m save objectid with populated refPath (gh-6714)[0m
2025-04-11T19:23:31.7153219Z     [32m  [32mâœ”[39m[0m[90m correct model and justOne when double populating (gh-6978)[0m
2025-04-11T19:23:31.7534557Z     [32m  [32mâœ”[39m[0m[90m correctly finds justOne when double-populating underneath an array (gh-6798)[0m
2025-04-11T19:23:31.7806474Z     [32m  [32mâœ”[39m[0m[90m handles virtual justOne if it is not set (gh-6988)[0m
2025-04-11T19:23:31.8076554Z     [32m  [32mâœ”[39m[0m[90m handles virtual justOne if it is not set, is lean, and subfields are selected[0m
2025-04-11T19:23:31.8405799Z     [32m  [32mâœ”[39m[0m[90m does not set `justOne` if underneath Mixed (gh-6985)[0m
2025-04-11T19:23:31.8719342Z     [32m  [32mâœ”[39m[0m[90m supports setting `justOne` as an option (gh-6985)[0m
2025-04-11T19:23:31.9052787Z     [32m  [32mâœ”[39m[0m[90m multiple localFields and foreignFields (gh-5704)[0m
2025-04-11T19:23:31.9459443Z     [32m  [32mâœ”[39m[0m[90m lean populate underneath array (gh-7052)[0m
2025-04-11T19:23:31.9743241Z     [32m  [32mâœ”[39m[0m[90m handles plus path projections with virtual populate (gh-7050)[0m
2025-04-11T19:23:32.0214041Z     [32m  [32mâœ”[39m[0m[90m set model as ref in schema (gh-7253)[0m[33m (38ms)[0m
2025-04-11T19:23:32.0741238Z     [32m  [32mâœ”[39m[0m[90m count option (gh-4469) (gh-7380)[0m[33m (42ms)[0m
2025-04-11T19:23:32.1149486Z     [32m  [32mâœ”[39m[0m[90m count option ignores skip (gh-4469) (gh-8476)[0m
2025-04-11T19:23:32.1992409Z     [32m  [32mâœ”[39m[0m[90m count with deeply nested (gh-7573)[0m[33m (62ms)[0m
2025-04-11T19:23:32.2632393Z     [32m  [32mâœ”[39m[0m[90m explicit model option overrides refPath (gh-7273)[0m[33m (53ms)[0m
2025-04-11T19:23:32.3133395Z     [32m  [32mâœ”[39m[0m[90m clone option means identical ids get separate copies of doc (gh-3258)[0m[33m (40ms)[0m
2025-04-11T19:23:32.3771434Z     [32m  [32mâœ”[39m[0m[90m handles double nested array `foreignField` (gh-7374)[0m[33m (53ms)[0m
2025-04-11T19:23:32.4927035Z     [32m  [32mâœ”[39m[0m[90m populate single path with numeric path underneath doc array (gh-7273)[0m[31m (105ms)[0m
2025-04-11T19:23:32.5191963Z     [32m  [32mâœ”[39m[0m[90m supports populating a path in a document array embedded in an array (gh-7647)[0m
2025-04-11T19:23:32.5472760Z     [32m  [32mâœ”[39m[0m[90m handles populating deeply nested path if value in db is a primitive (gh-7545)[0m
2025-04-11T19:23:32.5735730Z     [32m  [32mâœ”[39m[0m[90m sets populate virtual to empty array if local field empty (gh-8230)[0m
2025-04-11T19:23:32.5994091Z     [32m  [32mâœ”[39m[0m[90m sets populate virtual with count to 0 if local field empty (gh-7731)[0m
2025-04-11T19:23:32.6282581Z     [32m  [32mâœ”[39m[0m[90m can populate an array property whose name conflicts with array method (gh-7782)[0m
2025-04-11T19:23:32.6638650Z     [32m  [32mâœ”[39m[0m[90m supports cross-db populate with refPath (gh-6520)[0m
2025-04-11T19:23:32.7026964Z     [32m  [32mâœ”[39m[0m[90m ref function for conventional populate (gh-7669)[0m
2025-04-11T19:23:32.7297125Z     [32m  [32mâœ”[39m[0m[90m virtual refPath (gh-7848)[0m
2025-04-11T19:23:32.7670482Z     [32m  [32mâœ”[39m[0m[90m handles refPath on discriminator when populating top-level model (gh-5109)[0m
2025-04-11T19:23:32.8018064Z     [32m  [32mâœ”[39m[0m[90m refPath with virtual (gh-7341)[0m
2025-04-11T19:23:32.8299644Z     [32m  [32mâœ”[39m[0m[90m count with subdocs (gh-7573)[0m
2025-04-11T19:23:32.8652720Z     [32m  [32mâœ”[39m[0m[90m returns an array when count on an array localField (gh-11307) (gh-7573)[0m
2025-04-11T19:23:32.8980572Z     [32m  [32mâœ”[39m[0m[90m handles virtual populate of an embedded discriminator nested path (gh-6488) (gh-8173)[0m
2025-04-11T19:23:32.9283711Z     [32m  [32mâœ”[39m[0m[90m accessing populate virtual prop (gh-13189) (gh-8198)[0m
2025-04-11T19:23:32.9612723Z     [32m  [32mâœ”[39m[0m[90m doesnt insert empty document when populating a path within a non-existent document array (gh-8432)[0m
2025-04-11T19:23:32.9971033Z     [32m  [32mâœ”[39m[0m[90m doesnt insert empty document when lean populating a path within an underneath non-existent document array (gh-14098)[0m
2025-04-11T19:23:33.0186650Z     [32m  [32mâœ”[39m[0m[90m sets empty array if populating undefined path (gh-8455)[0m
2025-04-11T19:23:33.0585306Z     [32m  [32mâœ”[39m[0m[90m succeeds with refPath if embedded discriminator has path with same name but no refPath (gh-8452) (gh-8499)[0m
2025-04-11T19:23:33.0885866Z     [32m  [32mâœ”[39m[0m[90m excluding foreignField using minus path deselects foreignField (gh-8460)[0m
2025-04-11T19:23:33.1204597Z     [32m  [32mâœ”[39m[0m[90m supports top-level match option (gh-8475)[0m
2025-04-11T19:23:33.1600910Z     [32m  [32mâœ”[39m[0m[90m supports top-level skip and limit options (gh-8445)[0m
2025-04-11T19:23:33.1942762Z     [32m  [32mâœ”[39m[0m[90m top-level limit properly applies limit per document (gh-8657)[0m
2025-04-11T19:23:33.2303997Z     [32m  [32mâœ”[39m[0m[90m correct limit with populate (gh-7318)[0m
2025-04-11T19:23:33.2655954Z     [32m  [32mâœ”[39m[0m[90m perDocumentLimit as option to `populate()` method (gh-7318) (gh-9418)[0m
2025-04-11T19:23:33.2996987Z     [32m  [32mâœ”[39m[0m[90m works when embedded discriminator array has populated path but not refPath (gh-8527)[0m
2025-04-11T19:23:33.3222038Z     [32m  [32mâœ”[39m[0m[90m handles populating embedded discriminators with `refPath` when none of the subdocs have `refPath` (gh-8553)[0m
2025-04-11T19:23:33.3553036Z     [32m  [32mâœ”[39m[0m[90m throws an error when using limit with perDocumentLimit[0m
2025-04-11T19:23:33.3831117Z     [32m  [32mâœ”[39m[0m[90m handles function refPath with discriminators (gh-8731)[0m
2025-04-11T19:23:33.4084708Z     [32m  [32mâœ”[39m[0m[90m recursive virtuals with `populate` option (gh-11700)[0m
2025-04-11T19:23:33.4383032Z     [32m  [32mâœ”[39m[0m[90m no-op if populating on a document array with no ref (gh-8946)[0m
2025-04-11T19:23:33.4659445Z     [32m  [32mâœ”[39m[0m[90m no-op if populating a nested path (gh-9073)[0m
2025-04-11T19:23:33.4989290Z     [32m  [32mâœ”[39m[0m[90m handles populating primitive array under document array with discriminator (gh-9148)[0m
2025-04-11T19:23:33.5385348Z     [32m  [32mâœ”[39m[0m[90m handles deselecting _id with `perDocumentLimit` (gh-8460) (gh-9175)[0m
2025-04-11T19:23:33.5661086Z     [32m  [32mâœ”[39m[0m[90m handles embedded discriminator `refPath` with multiple documents (gh-8731) (gh-9153)[0m
2025-04-11T19:23:33.6003491Z     [32m  [32mâœ”[39m[0m[90m Sets the populated document's parent() (gh-8092)[0m
2025-04-11T19:23:33.6423507Z     [32m  [32mâœ”[39m[0m[90m populates single nested discriminator underneath doc array when populated docs have different model but same id (gh-9244)[0m
2025-04-11T19:23:33.6702465Z     [32m  [32mâœ”[39m[0m[90m skips checking `refPath` if the path to populate is undefined (gh-9340)[0m
2025-04-11T19:23:33.6966415Z     [32m  [32mâœ”[39m[0m[90m supports default populate options (gh-6029)[0m
2025-04-11T19:23:33.7252392Z     [32m  [32mâœ”[39m[0m[90m avoids propagating lean virtuals to children (gh-9592)[0m
2025-04-11T19:23:33.7577374Z     [32m  [32mâœ”[39m[0m[90m gh-9833[0m
2025-04-11T19:23:33.7920644Z     [32m  [32mâœ”[39m[0m[90m sets not-found values to null for paths that are not in the schema (gh-9913)[0m
2025-04-11T19:23:33.8232801Z     [32m  [32mâœ”[39m[0m[90m handles perDocumentLimit where multiple documents reference the same populated doc (gh-9906)[0m
2025-04-11T19:23:33.8883297Z     [32m  [32mâœ”[39m[0m[90m supports `transform` option (gh-3375)[0m[33m (56ms)[0m
2025-04-11T19:23:33.9167306Z     [32m  [32mâœ”[39m[0m[90m avoids calling `transform()` with `lean()` when no results (gh-12739)[0m
2025-04-11T19:23:33.9505204Z     [32m  [32mâœ”[39m[0m[90m transform to primitive (gh-10064)[0m
2025-04-11T19:23:33.9797089Z     [32m  [32mâœ”[39m[0m[90m transform with virtual populate, justOne = true (gh-3375)[0m
2025-04-11T19:23:34.0079380Z     [32m  [32mâœ”[39m[0m[90m transform with virtual populate, justOne = false (gh-3375)[0m
2025-04-11T19:23:34.0478655Z     [32m  [32mâœ”[39m[0m[90m supports populating dotted subpath of a populated doc that has the same id as a populated doc (gh-10005)[0m
2025-04-11T19:23:34.0779485Z     [32m  [32mâœ”[39m[0m[90m prevents already populated fields from becoming null gh-10068[0m
2025-04-11T19:23:34.1031512Z     [32m  [32mâœ”[39m[0m[90m populates lean subdoc with `_id` property (gh-10069)[0m
2025-04-11T19:23:34.1328604Z     [32m  [32mâœ”[39m[0m[90m handles virtual populate when foreignField is an array with duplicates (gh-10117)[0m
2025-04-11T19:23:34.1635478Z     [32m  [32mâœ”[39m[0m[90m handles virtual populate with `$elemMatch` in custom match when `foreignField` is an array (gh-10117)[0m
2025-04-11T19:23:34.1858089Z     [32m  [32mâœ”[39m[0m[90m populates immutable array paths (gh-10159)[0m
2025-04-11T19:23:34.2155401Z     [32m  [32mâœ”[39m[0m[90m populates paths under mixed schematypes where some documents have non-object properties (gh-10191)[0m
2025-04-11T19:23:34.2497121Z     [32m  [32mâœ”[39m[0m[90m populates embedded discriminator with tied value (gh-10231)[0m
2025-04-11T19:23:34.2723861Z     [32m  [32mâœ”[39m[0m[90m supports populating an array of immutable elements (gh-10264)[0m
2025-04-11T19:23:34.2994619Z     [32m  [32mâœ”[39m[0m[90m populates nested path in schema using `Model.populate()` static (gh-10335)[0m
2025-04-11T19:23:34.3388034Z     [32m  [32mâœ”[39m[0m[90m calls subdocument ref functions with subdocument as context (gh-8469)[0m
2025-04-11T19:23:34.3455229Z [0m      populate virtuals (gh-2562)[0m
2025-04-11T19:23:34.3752537Z       [32m  [32mâœ”[39m[0m[90m basic populate virtuals[0m
2025-04-11T19:23:34.4181740Z       [32m  [32mâœ”[39m[0m[90m match (gh-6787)[0m
2025-04-11T19:23:34.4529278Z       [32m  [32mâœ”[39m[0m[90m match prevents using $where[0m
2025-04-11T19:23:34.4972387Z       [32m  [32mâœ”[39m[0m[90m multiple source docs[0m
2025-04-11T19:23:34.5203838Z       [32m  [32mâœ”[39m[0m[90m catchable error if localField or foreignField not specified (gh-6767)[0m
2025-04-11T19:23:34.5683958Z       [32m  [32mâœ”[39m[0m[90m source array[0m
2025-04-11T19:23:34.5994072Z       [32m  [32mâœ”[39m[0m[90m multiple paths (gh-4234)[0m
2025-04-11T19:23:34.6303136Z       [32m  [32mâœ”[39m[0m[90m in embedded array (gh-4928)[0m
2025-04-11T19:23:34.6627136Z       [32m  [32mâœ”[39m[0m[90m in embedded array with sort (gh-10552)[0m
2025-04-11T19:23:34.6942042Z       [32m  [32mâœ”[39m[0m[90m in embedded array with sort and one result (gh-10552)[0m
2025-04-11T19:23:34.7298455Z       [32m  [32mâœ”[39m[0m[90m justOne option (gh-4263)[0m
2025-04-11T19:23:34.7613365Z       [32m  [32mâœ”[39m[0m[90m justOne + lean (gh-6234)[0m
2025-04-11T19:23:34.7896880Z       [32m  [32mâœ”[39m[0m[90m sets empty array if lean with justOne = false and no results (gh-10992)[0m
2025-04-11T19:23:34.8214924Z       [32m  [32mâœ”[39m[0m[90m justOne underneath array (gh-6867)[0m
2025-04-11T19:23:34.8522361Z       [32m  [32mâœ”[39m[0m[90m with no results and justOne (gh-4284)[0m
2025-04-11T19:23:34.8886294Z       [32m  [32mâœ”[39m[0m[90m with multiple results and justOne (gh-4329)[0m
2025-04-11T19:23:34.9199243Z       [32m  [32mâœ”[39m[0m[90m virtuals with getters (gh-9343)[0m
2025-04-11T19:23:34.9503745Z       [32m  [32mâœ”[39m[0m[90m virtuals with `get` option (gh-9343)[0m
2025-04-11T19:23:34.9834554Z       [32m  [32mâœ”[39m[0m[90m hydrates properly (gh-4618)[0m
2025-04-11T19:23:35.0205998Z       [32m  [32mâœ”[39m[0m[90m with functions for localField and foreignField (gh-5704)[0m
2025-04-11T19:23:35.0580713Z       [32m  [32mâœ”[39m[0m[90m with functions for ref (gh-5602)[0m
2025-04-11T19:23:35.1036560Z       [32m  [32mâœ”[39m[0m[90m with functions for match (gh-7397)[0m
2025-04-11T19:23:35.1445058Z       [32m  [32mâœ”[39m[0m[90m with functions for match and foreignField (gh-7397)[0m
2025-04-11T19:23:35.1924215Z       [32m  [32mâœ”[39m[0m[90m with function for refPath (gh-6669)[0m
2025-04-11T19:23:35.2296402Z       [32m  [32mâœ”[39m[0m[90m with no results (gh-4284)[0m
2025-04-11T19:23:35.2536327Z       [32m  [32mâœ”[39m[0m[90m virtual is undefined when not populated (gh-7795)[0m
2025-04-11T19:23:35.2916394Z       [32m  [32mâœ”[39m[0m[90m deep populate virtual -> conventional (gh-4261)[0m
2025-04-11T19:23:35.3298539Z       [32m  [32mâœ”[39m[0m[90m deep populate virtual -> virtual (gh-4278)[0m
2025-04-11T19:23:35.3706130Z       [32m  [32mâœ”[39m[0m[90m source array (gh-4585)[0m
2025-04-11T19:23:35.3977539Z       [32m  [32mâœ”[39m[0m[90m lean with single result and no justOne (gh-4288)[0m
2025-04-11T19:23:35.4463801Z       [32m  [32mâœ”[39m[0m[90m gh-4923[0m[33m (38ms)[0m
2025-04-11T19:23:35.4787086Z       [32m  [32mâœ”[39m[0m[90m supports setting default options in schema (gh-4741)[0m
2025-04-11T19:23:35.4916866Z       [32m  [32mâœ”[39m[0m[90m handles populate with 0 args (gh-5036)[0m
2025-04-11T19:23:35.5059476Z       [32m  [32mâœ”[39m[0m[90m attaches `_id` property to ref ids (gh-6359) (gh-6115)[0m
2025-04-11T19:23:35.5602244Z       [32m  [32mâœ”[39m[0m[90m handles populating with discriminators that may not have a ref (gh-4817)[0m
2025-04-11T19:23:35.5882724Z       [32m  [32mâœ”[39m[0m[90m populate with no ref using Model.populate (gh-4843)[0m
2025-04-11T19:23:35.6237662Z       [32m  [32mâœ”[39m[0m[90m nested populate, virtual -> normal (gh-4631)[0m
2025-04-11T19:23:35.6655973Z       [32m  [32mâœ”[39m[0m[90m populate with Decimal128 as ref (gh-4759)[0m
2025-04-11T19:23:35.6992407Z       [32m  [32mâœ”[39m[0m[90m handles circular virtual -> regular (gh-5128)[0m
2025-04-11T19:23:35.7362840Z       [32m  [32mâœ”[39m[0m[90m handles nested virtuals (gh-4851)[0m
2025-04-11T19:23:35.7694750Z       [32m  [32mâœ”[39m[0m[90m nested virtuals if top-level prop doesnt exist (gh-5431)[0m
2025-04-11T19:23:35.8022423Z       [32m  [32mâœ”[39m[0m[90m nested virtuals + doc.populate() (gh-5240)[0m
2025-04-11T19:23:35.8334398Z       [32m  [32mâœ”[39m[0m[90m no ref + cursor (gh-5334)[0m
2025-04-11T19:23:35.8903403Z       [32m  [32mâœ”[39m[0m[90m retains limit when using cursor (gh-5468)[0m[33m (45ms)[0m
2025-04-11T19:23:35.9229566Z       [32m  [32mâœ”[39m[0m[90m virtuals + doc.populate() (gh-5311)[0m
2025-04-11T19:23:35.9514239Z       [32m  [32mâœ”[39m[0m[90m empty virtual with Model.populate (gh-5331)[0m
2025-04-11T19:23:35.9826808Z       [32m  [32mâœ”[39m[0m[90m virtual populate in single nested doc (gh-4715)[0m
2025-04-11T19:23:36.0061203Z       [32m  [32mâœ”[39m[0m[90m populate with missing schema (gh-5364)[0m
2025-04-11T19:23:36.0183238Z       [32m  [32mâœ”[39m[0m[90m populate with missing schema (gh-5460)[0m
2025-04-11T19:23:36.0663647Z       [32m  [32mâœ”[39m[0m[90m array underneath non-existent array (gh-6245)[0m
2025-04-11T19:23:36.0977407Z       [32m  [32mâœ”[39m[0m[90m virtuals with justOne false and foreign field not found (gh-5336)[0m
2025-04-11T19:23:36.1266110Z       [32m  [32mâœ”[39m[0m[90m virtuals with justOne true and foreign field not found (gh-5336)[0m
2025-04-11T19:23:36.1579409Z       [32m  [32mâœ”[39m[0m[90m select foreignField automatically (gh-4959)[0m
2025-04-11T19:23:36.1897548Z       [32m  [32mâœ”[39m[0m[90m does not set `populated()` until populate is done (gh-5564)[0m
2025-04-11T19:23:36.2218657Z       [32m  [32mâœ”[39m[0m[90m virtual populate toJSON output (gh-5542)[0m
2025-04-11T19:23:36.2532576Z       [32m  [32mâœ”[39m[0m[90m works if foreignField parent is selected (gh-5037)[0m
2025-04-11T19:23:36.3019716Z       [32m  [32mâœ”[39m[0m[90m subPopulate under discriminators race condition (gh-5858)[0m
2025-04-11T19:23:36.3328823Z       [32m  [32mâœ”[39m[0m[90m populating nested discriminator path (gh-5970)[0m
2025-04-11T19:23:36.3774306Z       [32m  [32mâœ”[39m[0m[90m specify model in populate (gh-4264)[0m
2025-04-11T19:23:36.3848353Z [0m        selectPopulatedFields (gh-5669)[0m
2025-04-11T19:23:36.4145655Z         [32m  [32mâœ”[39m[0m[90m auto select populated fields (gh-5669) (gh-5685)[0m
2025-04-11T19:23:36.4466035Z         [32m  [32mâœ”[39m[0m[90m disabling at schema level (gh-6546)[0m
2025-04-11T19:23:36.4818523Z         [32m  [32mâœ”[39m[0m[90m disabling at global level (gh-6546)[0m
2025-04-11T19:23:36.5154865Z         [32m  [32mâœ”[39m[0m[90m schema overwrites global (gh-6546)[0m
2025-04-11T19:23:36.5263663Z [0m      populates an array of objects[0m
2025-04-11T19:23:36.5690996Z       [32m  [32mâœ”[39m[0m[90m subpopulates array w/ space separated path (gh-6284)[0m
2025-04-11T19:23:36.6067434Z       [32m  [32mâœ”[39m[0m[90m populates array of space separated path objs (gh-6414)[0m
2025-04-11T19:23:36.6812965Z       [32m  [32mâœ”[39m[0m[90m handles subpopulation with options (gh-6528)[0m[33m (41ms)[0m
2025-04-11T19:23:36.7218848Z       [32m  [32mâœ”[39m[0m[90m honors top-level match with subPopulation (gh-6451)[0m
2025-04-11T19:23:36.7540048Z       [32m  [32mâœ”[39m[0m[90m handles embedded discriminator (gh-6487)[0m
2025-04-11T19:23:36.7914668Z       [32m  [32mâœ”[39m[0m[90m handles virtual embedded discriminator underneath single nested (gh-6571)[0m
2025-04-11T19:23:36.8204004Z       [32m  [32mâœ”[39m[0m[90m populates undefined nested fields without error (gh-6845)[0m
2025-04-11T19:23:36.8580572Z       [32m  [32mâœ”[39m[0m[90m populates refPath from array element (gh-6509)[0m
2025-04-11T19:23:36.8672882Z [0m      lean + deep populate (gh-6498)[0m
2025-04-11T19:23:36.9055437Z       [32m  [32mâœ”[39m[0m[90m document, and subdocuments are not lean by default[0m
2025-04-11T19:23:36.9524267Z       [32m  [32mâœ”[39m[0m[90m .lean() makes query result, and all populated fields lean[0m
2025-04-11T19:23:36.9956522Z       [32m  [32mâœ”[39m[0m[90m disabling lean at some populating level reflects on it, and descendants[0m
2025-04-11T19:23:37.0396517Z       [32m  [32mâœ”[39m[0m[90m enabling lean at some populating level reflects on it, and descendants[0m
2025-04-11T19:23:37.0884537Z       [32m  [32mâœ”[39m[0m[90m disabling lean on nested population overwrites parent lean[0m
2025-04-11T19:23:37.0967550Z [0m      gh-8247[0m
2025-04-11T19:23:37.1215765Z       [32m  [32mâœ”[39m[0m[90m checking `populated()` on a document array element (gh-8247)[0m
2025-04-11T19:23:37.1645744Z       [32m  [32mâœ”[39m[0m[90m updates top-level populated() when pushing elements onto a document array with single populated path (gh-8247) (gh-8265)[0m
2025-04-11T19:23:37.2135639Z       [32m  [32mâœ”[39m[0m[90m retainNullValues stores `null` in array if foreign doc not found (gh-8293)[0m
2025-04-11T19:23:37.2563853Z       [32m  [32mâœ”[39m[0m[90m virtual populate with discriminator that has a custom discriminator value (gh-8324)[0m
2025-04-11T19:23:37.3084229Z       [32m  [32mâœ”[39m[0m[90m virtual populate with multiple `localField` and `foreignField` (gh-6608)[0m[33m (38ms)[0m
2025-04-11T19:23:37.3172163Z [0m      gh-8760[0m
2025-04-11T19:23:37.3431373Z       [32m  [32mâœ”[39m[0m[90m clone with lean creates identical copies from the same document[0m
2025-04-11T19:23:37.3754467Z       [32m  [32mâœ”[39m[0m[90m clone with populate and lean makes child lean[0m
2025-04-11T19:23:37.4069962Z       [32m  [32mâœ”[39m[0m[90m can populate subdocs where one is discriminator and the other is not (gh-8837)[0m
2025-04-11T19:23:37.4416461Z       [32m  [32mâœ”[39m[0m[90m can populate virtuals defined on child discriminators (gh-8924)[0m
2025-04-11T19:23:37.4509958Z [0m    strictPopulate[0m
2025-04-11T19:23:37.4913729Z     [32m  [32mâœ”[39m[0m[90m does not throw an error when using strictPopulate on a nested path (gh-13863)[0m
2025-04-11T19:23:37.5253853Z     [32m  [32mâœ”[39m[0m[90m reports full path when throwing `strictPopulate` error with deep populate (gh-10923)[0m
2025-04-11T19:23:37.5541591Z     [32m  [32mâœ”[39m[0m[90m propagates toObject options to populate virtuals (gh-13325)[0m
2025-04-11T19:23:37.5759443Z     [32m  [32mâœ”[39m[0m[90m respects strictPopulate schema option (gh-11290)[0m
2025-04-11T19:23:37.6244426Z     [32m  [32mâœ”[39m[0m[90m allows overwriting localField and foreignField when populating a virtual gh-6963[0m[33m (39ms)[0m
2025-04-11T19:23:37.6396193Z 
2025-04-11T19:23:37.6397088Z [0m  utils[0m
2025-04-11T19:23:37.6431742Z   [32m  [32mâœ”[39m[0m[90m deepEquals on ObjectIds[0m
2025-04-11T19:23:37.6475925Z   [32m  [32mâœ”[39m[0m[90m deepEquals on maps (gh-9549)[0m
2025-04-11T19:23:37.6538714Z   [32m  [32mâœ”[39m[0m[90m deepEquals on MongooseDocumentArray works[0m
2025-04-11T19:23:37.6584223Z   [32m  [32mâœ”[39m[0m[90m deepEquals with MongooseBuffer[0m
2025-04-11T19:23:37.6628511Z   [32m  [32mâœ”[39m[0m[90m `deepEqual` treats objects with different order of keys as different (gh-9571)[0m
2025-04-11T19:23:37.6672006Z   [32m  [32mâœ”[39m[0m[90m deepEqual on arrays and non-arrays (gh-11417)[0m
2025-04-11T19:23:37.6716003Z   [32m  [32mâœ”[39m[0m[90m array.flatten[0m
2025-04-11T19:23:37.6760395Z   [32m  [32mâœ”[39m[0m[90m array.unique[0m
2025-04-11T19:23:37.6782260Z [0m    ActiveRoster[0m
2025-04-11T19:23:37.6826820Z     [32m  [32mâœ”[39m[0m[90m should detect a path as required if it has been required[0m
2025-04-11T19:23:37.6892006Z     [32m  [32mâœ”[39m[0m[90m should detect a path as inited if it has been inited[0m
2025-04-11T19:23:37.6956996Z     [32m  [32mâœ”[39m[0m[90m should detect a path as modified[0m
2025-04-11T19:23:37.7022168Z     [32m  [32mâœ”[39m[0m[90m should remove a path from an old state upon a state change[0m
2025-04-11T19:23:37.7088106Z     [32m  [32mâœ”[39m[0m[90m forEach should be able to iterate through the paths belonging to one state[0m
2025-04-11T19:23:37.7153640Z     [32m  [32mâœ”[39m[0m[90m forEach should be able to iterate through the paths in the union of two or more states[0m
2025-04-11T19:23:37.7219127Z     [32m  [32mâœ”[39m[0m[90m forEach should iterate through all paths that have any state if given no state arguments[0m
2025-04-11T19:23:37.7284327Z     [32m  [32mâœ”[39m[0m[90m should be able to detect if at least one path exists in a set of states[0m
2025-04-11T19:23:37.7350555Z     [32m  [32mâœ”[39m[0m[90m should be able to `map` over the set of paths in a given state[0m
2025-04-11T19:23:37.7416208Z     [32m  [32mâœ”[39m[0m[90m should `map` over all states' paths if no states are specified in a `map` invocation[0m
2025-04-11T19:23:37.7459124Z [0m    merge[0m
2025-04-11T19:23:37.7504045Z     [32m  [32mâœ”[39m[0m[90m merges two objects together without overriding properties & methods[0m
2025-04-11T19:23:37.7547129Z [0m    mergeClone[0m
2025-04-11T19:23:37.7591636Z     [32m  [32mâœ”[39m[0m[90m handles object with valueOf() (gh-6059)[0m
2025-04-11T19:23:37.7657190Z     [32m  [32mâœ”[39m[0m[90m copies dates correctly (gh-6145)[0m
2025-04-11T19:23:37.7700603Z [0m    errorToPOJO(...)[0m
2025-04-11T19:23:37.7747167Z     [32m  [32mâœ”[39m[0m[90m converts an error to a POJO[0m
2025-04-11T19:23:37.7813311Z     [32m  [32mâœ”[39m[0m[90m throws an error when argument is not an error object[0m
2025-04-11T19:23:37.7880929Z     [32m  [32mâœ”[39m[0m[90m works with classes that extend `Error`[0m
2025-04-11T19:23:37.7923982Z [0m    toCollectionName[0m
2025-04-11T19:23:37.7967900Z     [32m  [32mâœ”[39m[0m[90m returns the same name for system.profile[0m
2025-04-11T19:23:37.8032966Z     [32m  [32mâœ”[39m[0m[90m returns the same name for system.indexes[0m
2025-04-11T19:23:37.8099348Z     [32m  [32mâœ”[39m[0m[90m throws an error when name is not a string[0m
2025-04-11T19:23:37.8165202Z     [32m  [32mâœ”[39m[0m[90m throws an error when name is an empty string[0m
2025-04-11T19:23:37.8230408Z     [32m  [32mâœ”[39m[0m[90m uses the pluralize function when provided[0m
2025-04-11T19:23:37.8284081Z 
2025-04-11T19:23:37.8284452Z [0m  types.embeddeddocument[0m
2025-04-11T19:23:37.8345221Z   [32m  [32mâœ”[39m[0m[90m returns a proper ownerDocument (gh-3589)[0m
2025-04-11T19:23:37.8377311Z 
2025-04-11T19:23:37.8377593Z [0m  schema alias option[0m
2025-04-11T19:23:37.8564138Z   [32m  [32mâœ”[39m[0m[90m works with all basic schema types[0m
2025-04-11T19:23:37.8742937Z   [32m  [32mâœ”[39m[0m[90m works with nested schema types[0m
2025-04-11T19:23:37.8812741Z   [32m  [32mâœ”[39m[0m[90m throws when alias option is invalid[0m
2025-04-11T19:23:37.8871725Z   [32m  [32mâœ”[39m[0m[90m with add() (gh-6593)[0m
2025-04-11T19:23:37.8938561Z   [32m  [32mâœ”[39m[0m[90m nested aliases (gh-6671)[0m
2025-04-11T19:23:37.9001588Z   [32m  [32mâœ”[39m[0m[90m array of aliases (gh-12368)[0m
2025-04-11T19:23:37.9103295Z   [32m  [32mâœ”[39m[0m[90m alias() method (gh-12368)[0m
2025-04-11T19:23:37.9163075Z   [32m  [32mâœ”[39m[0m[90m supports passing the alias name for an index (gh-13276)[0m
2025-04-11T19:23:37.9329043Z   [32m  [32mâœ”[39m[0m[90m should disable the id virtual entirely if there's a field with alias `id` gh-13650[0m
2025-04-11T19:23:37.9401606Z 
2025-04-11T19:23:37.9436649Z [0m  collections: capped:[0m
2025-04-11T19:23:37.9437375Z   [32m  [32mâœ”[39m[0m[90m schemas should have option size[0m
2025-04-11T19:23:38.0606507Z   [32m  [32mâœ”[39m[0m[90m creation[0m[31m (113ms)[0m
2025-04-11T19:23:38.0791465Z   [32m  [32mâœ”[39m[0m[90m skips when setting autoCreate to false (gh-8566)[0m
2025-04-11T19:23:38.0850575Z 
2025-04-11T19:23:38.0851369Z [0m  query middleware[0m
2025-04-11T19:23:38.1069589Z   [32m  [32mâœ”[39m[0m[90m has a pre find hook[0m
2025-04-11T19:23:38.1305751Z   [32m  [32mâœ”[39m[0m[90m has post find hooks[0m
2025-04-11T19:23:38.1565261Z   [32m  [32mâœ”[39m[0m[90m works when using a chained query builder[0m
2025-04-11T19:23:38.1798557Z   [32m  [32mâœ”[39m[0m[90m has separate pre-findOne() and post-findOne() hooks[0m
2025-04-11T19:23:38.2043884Z   [32m  [32mâœ”[39m[0m[90m with regular expression (gh-6680)[0m
2025-04-11T19:23:38.2279748Z   [32m  [32mâœ”[39m[0m[90m can populate in pre hook[0m
2025-04-11T19:23:38.2528124Z   [32m  [32mâœ”[39m[0m[90m can populate in post hook[0m
2025-04-11T19:23:38.2765407Z   [32m  [32mâœ”[39m[0m[90m has hooks for countDocuments()[0m
2025-04-11T19:23:38.3009420Z   [32m  [32mâœ”[39m[0m[90m has hooks for estimatedDocumentCount()[0m
2025-04-11T19:23:38.3269812Z   [32m  [32mâœ”[39m[0m[90m updateOne() (gh-3997)[0m
2025-04-11T19:23:38.3517356Z   [32m  [32mâœ”[39m[0m[90m updateMany() (gh-3997)[0m
2025-04-11T19:23:38.3756233Z   [32m  [32mâœ”[39m[0m[90m deleteOne() (gh-7195)[0m
2025-04-11T19:23:38.3998266Z   [32m  [32mâœ”[39m[0m[90m deleteMany() (gh-7195)[0m
2025-04-11T19:23:38.4269641Z   [32m  [32mâœ”[39m[0m[90m distinct (gh-5938)[0m
2025-04-11T19:23:38.4448744Z   [32m  [32mâœ”[39m[0m[90m error handlers (gh-2284)[0m
2025-04-11T19:23:38.4525889Z   [32m  [32mâœ”[39m[0m[90m error handlers for validate (gh-4885)[0m
2025-04-11T19:23:38.4738415Z   [32m  [32mâœ”[39m[0m[90m error handlers with findOneAndUpdate and passRawResult (gh-4836)[0m
2025-04-11T19:23:38.4816837Z   [32m  [32mâœ”[39m[0m[90m error handlers with findOneAndUpdate error and passRawResult (gh-4836)[0m
2025-04-11T19:23:38.4928721Z   [32m  [32mâœ”[39m[0m[90m error handlers with error from pre hook (gh-4927)[0m
2025-04-11T19:23:38.5037119Z   [32m  [32mâœ”[39m[0m[90m with clone() (gh-5153)[0m
2025-04-11T19:23:38.5141051Z   [32m  [32mâœ”[39m[0m[90m doesnt double call post(regexp) with updateOne (gh-7418)[0m
2025-04-11T19:23:38.5351580Z   [32m  [32mâœ”[39m[0m[90m deleteOne with `document: true` but no `query` (gh-8555)[0m
2025-04-11T19:23:38.5533421Z   [32m  [32mâœ”[39m[0m[90m allows registering middleware for all queries with regexp (gh-9190)[0m
2025-04-11T19:23:38.5616965Z   [32m  [32mâœ”[39m[0m[90m allows skipping the wrapped function with `skipMiddlewareFunction()` (gh-11426)[0m
2025-04-11T19:23:38.5858056Z   [32m  [32mâœ”[39m[0m[90m allows overwriting result with `overwriteMiddlewareResult()` (gh-11426)[0m
2025-04-11T19:23:38.5934027Z 
2025-04-11T19:23:38.5934506Z [0m  esm:[0m
2025-04-11T19:23:38.5968021Z   [32m  [32mâœ”[39m[0m[90m should have default export[0m
2025-04-11T19:23:38.6011928Z   [32m  [32mâœ”[39m[0m[90m should have mongoose export[0m
2025-04-11T19:23:38.6043699Z 
2025-04-11T19:23:38.6044761Z [0m  document.populate[0m
2025-04-11T19:23:38.6350332Z   [32m  [32mâœ”[39m[0m[90m works with await[0m
2025-04-11T19:23:38.6682186Z   [32m  [32mâœ”[39m[0m[90m populating using space delimited paths with options[0m
2025-04-11T19:23:38.6980903Z   [32m  [32mâœ”[39m[0m[90m using multiple populate calls[0m
2025-04-11T19:23:38.7283339Z   [32m  [32mâœ”[39m[0m[90m with custom model selection[0m
2025-04-11T19:23:38.7564464Z   [32m  [32mâœ”[39m[0m[90m one path, model selection as second argument[0m
2025-04-11T19:23:38.7903367Z   [32m  [32mâœ”[39m[0m[90m multiple paths, model selection as second argument[0m
2025-04-11T19:23:38.8214908Z   [32m  [32mâœ”[39m[0m[90m multiple paths, mixed argument types[0m
2025-04-11T19:23:38.8507132Z   [32m  [32mâœ”[39m[0m[90m multiple paths, multiple options[0m
2025-04-11T19:23:38.8793117Z   [32m  [32mâœ”[39m[0m[90m a property not in schema[0m
2025-04-11T19:23:38.9058726Z   [32m  [32mâœ”[39m[0m[90m of empty array[0m
2025-04-11T19:23:38.9331723Z   [32m  [32mâœ”[39m[0m[90m of array of null/undefined[0m
2025-04-11T19:23:38.9611824Z   [32m  [32mâœ”[39m[0m[90m of null property[0m
2025-04-11T19:23:38.9894773Z   [32m  [32mâœ”[39m[0m[90m String _ids[0m
2025-04-11T19:23:39.0335939Z   [32m  [32mâœ”[39m[0m[90m Buffer _ids[0m
2025-04-11T19:23:39.0634903Z   [32m  [32mâœ”[39m[0m[90m Number _ids[0m
2025-04-11T19:23:39.0919794Z   [32m  [32mâœ”[39m[0m[90m depopulates when setting `_id` (gh-3308)[0m
2025-04-11T19:23:39.1268310Z   [32m  [32mâœ”[39m[0m[90m does not allow you to call populate() on nested docs (gh-4552)[0m
2025-04-11T19:23:39.1756413Z   [32m  [32mâœ”[39m[0m[90m handles pulling from populated array (gh-3579)[0m
2025-04-11T19:23:39.2264340Z   [32m  [32mâœ”[39m[0m[90m populated() works with nested subdocs (gh-7685)[0m
2025-04-11T19:23:39.3047768Z   [32m  [32mâœ”[39m[0m[90m works with single strings (gh-11160)[0m[33m (51ms)[0m
2025-04-11T19:23:39.3542309Z   [32m  [32mâœ”[39m[0m[90m works when populating a nested document inside an array parent (gh-14435)[0m
2025-04-11T19:23:39.4100878Z   [32m  [32mâœ”[39m[0m[90m supports populate with ordered option (gh-15231)[0m
2025-04-11T19:23:39.4640780Z   [32m  [32mâœ”[39m[0m[90m handles re-populating map of array of refs (gh-9359)[0m
2025-04-11T19:23:39.4689650Z [0m    populating two paths[0m
2025-04-11T19:23:39.4979812Z     [32m  [32mâœ”[39m[0m[90m with space delmited string works[0m
2025-04-11T19:23:39.5048328Z [0m    sub-level properties[0m
2025-04-11T19:23:39.5334245Z     [32m  [32mâœ”[39m[0m[90m with string arg[0m
2025-04-11T19:23:39.5401130Z [0m    of new document[0m
2025-04-11T19:23:39.5678190Z     [32m  [32mâœ”[39m[0m[90m should save just the populated _id (gh-1442)[0m
2025-04-11T19:23:39.5744001Z [0m    gh-2214[0m
2025-04-11T19:23:39.6169115Z     [32m  [32mâœ”[39m[0m[90m should return a real document array when populating[0m
2025-04-11T19:23:39.6238991Z [0m    gh-7889[0m
2025-04-11T19:23:39.6750903Z     [32m  [32mâœ”[39m[0m[90m should save item added to array after populating the array[0m
2025-04-11T19:23:39.6821156Z [0m    depopulate[0m
2025-04-11T19:23:39.7332928Z     [32m  [32mâœ”[39m[0m[90m can depopulate specific path (gh-2509)[0m
2025-04-11T19:23:39.7857961Z     [32m  [32mâœ”[39m[0m[90m depopulates all (gh-6073)[0m
2025-04-11T19:23:39.8262315Z     [32m  [32mâœ”[39m[0m[90m doesn't throw when called on a doc that is not populated (gh-6075)[0m
2025-04-11T19:23:39.8820419Z     [32m  [32mâœ”[39m[0m[90m depopulates virtuals (gh-6075)[0m
2025-04-11T19:23:39.9281285Z     [32m  [32mâœ”[39m[0m[90m depopulates field with empty array (gh-7740)[0m
2025-04-11T19:23:39.9867522Z     [32m  [32mâœ”[39m[0m[90m depopulates after pushing manually populated (gh-2509)[0m
2025-04-11T19:23:39.9939446Z [0m    #populated() with virtuals (gh-7440)[0m
2025-04-11T19:23:40.0361258Z     [32m  [32mâœ”[39m[0m[90m works with justOne: false[0m
2025-04-11T19:23:40.0835928Z     [32m  [32mâœ”[39m[0m[90m works with justOne: true[0m
2025-04-11T19:23:40.0910479Z [0m    #populated() with getters on embedded schema (gh-7521)[0m
2025-04-11T19:23:40.1401833Z     [32m  [32mâœ”[39m[0m[90m works with populate[0m
2025-04-11T19:23:40.1510451Z 
2025-04-11T19:23:40.1511077Z [0m  document[0m
2025-04-11T19:23:40.1563606Z   [32m  [32mâœ”[39m[0m[90m isSelected()[0m
2025-04-11T19:23:40.1610618Z   [32m  [32mâœ”[39m[0m[90m isDirectSelected (gh-5063)[0m
2025-04-11T19:23:40.1642694Z 
2025-04-11T19:23:40.1643192Z [0m  SchemaString[0m
2025-04-11T19:23:40.1684450Z   [32m  [32mâœ”[39m[0m[90m works when RegExp has global flag set (gh-9287)[0m
2025-04-11T19:23:40.1716176Z 
2025-04-11T19:23:40.1716558Z [0m  types.subdocument[0m
2025-04-11T19:23:40.1785999Z   [32m  [32mâœ”[39m[0m[90m returns a proper ownerDocument (gh-3589)[0m
2025-04-11T19:23:40.1843344Z   [32m  [32mâœ”[39m[0m[90m not setting timestamps in subdocuments[0m
2025-04-11T19:23:40.1898430Z   [32m  [32mâœ”[39m[0m[90m respects schematype-level minimize (gh-15313)[0m
2025-04-11T19:23:40.1912110Z [0m    #isModified[0m
2025-04-11T19:23:40.1964633Z     [32m  [32mâœ”[39m[0m[90m defers to parent isModified (gh-8223)[0m
2025-04-11T19:23:40.2060318Z 
2025-04-11T19:23:40.2060855Z [0m  types.document[0m
2025-04-11T19:23:40.2117769Z   [32m  [32mâœ”[39m[0m[90m test that validate sets errors[0m
2025-04-11T19:23:40.2152707Z   [32m  [32mâœ”[39m[0m[90m objects can be passed to #set[0m
2025-04-11T19:23:40.2198235Z   [32m  [32mâœ”[39m[0m[90m Subdocuments can be passed to #set[0m
2025-04-11T19:23:40.2437222Z   [32m  [32mâœ”[39m[0m[90m Subdocument#remove (gh-531)[0m
2025-04-11T19:23:40.2458730Z [0m    setting nested objects[0m
2025-04-11T19:23:40.2563921Z     [32m  [32mâœ”[39m[0m[90m works (gh-1394)[0m
2025-04-11T19:23:40.2646755Z 
2025-04-11T19:23:40.2647182Z [0m  model aggregate[0m
2025-04-11T19:23:40.2872446Z [0m    works[0m
2025-04-11T19:23:40.2928485Z     [32m  [32mâœ”[39m[0m[90m when return promise[0m
2025-04-11T19:23:40.3002975Z     [32m  [32mâœ”[39m[0m[90m with arrays[0m
2025-04-11T19:23:40.3079995Z     [32m  [32mâœ”[39m[0m[90m with Aggregate syntax[0m
2025-04-11T19:23:40.3152576Z     [32m  [32mâœ”[39m[0m[90m with Aggregate syntax if callback not provided[0m
2025-04-11T19:23:40.3217709Z     [32m  [32mâœ”[39m[0m[90m when returning Aggregate[0m
2025-04-11T19:23:40.3346103Z     [32m  [32mâœ”[39m[0m[90m can use helper for $out[0m
2025-04-11T19:23:40.3423159Z 
2025-04-11T19:23:40.3424239Z [0m  model[0m
2025-04-11T19:23:40.3436155Z [0m    discriminator()[0m
2025-04-11T19:23:40.3461190Z [0m      pushing discriminated objects[0m
2025-04-11T19:23:40.3662836Z       [32m  [32mâœ”[39m[0m[90m into non-discriminated arrays works[0m
2025-04-11T19:23:40.4120310Z [0m      find[0m
2025-04-11T19:23:40.4447949Z       [32m  [32mâœ”[39m[0m[90m hydrates correct models[0m
2025-04-11T19:23:40.4898304Z       [32m  [32mâœ”[39m[0m[90m hydrates correct models when fields selection set as string[0m
2025-04-11T19:23:40.5287879Z       [32m  [32mâœ”[39m[0m[90m hydrates correct models when fields selection set as object[0m
2025-04-11T19:23:40.5699204Z       [32m  [32mâœ”[39m[0m[90m casts underneath $or if discriminator key in filter (gh-9018)[0m
2025-04-11T19:23:40.6072033Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds documents of its type when fields selection set as string inclusive[0m
2025-04-11T19:23:40.6416916Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds documents of its type when fields selection set as string exclusive[0m
2025-04-11T19:23:40.6771061Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds documents of its type when fields selection set as empty string[0m
2025-04-11T19:23:40.7124547Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds documents of its type when fields selection set as object inclusive[0m
2025-04-11T19:23:40.7539805Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds documents of its type when fields selection set as object exclusive[0m
2025-04-11T19:23:40.7883679Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds documents of its type when fields selection set as empty object[0m
2025-04-11T19:23:40.7946418Z [0m        discriminator model only finds documents of its type[0m
2025-04-11T19:23:40.7957102Z [0m          using "ModelDiscriminator#findById"[0m
2025-04-11T19:23:40.8319045Z           [32m  [32mâœ”[39m[0m[90m to find a document of the appropriate discriminator[0m
2025-04-11T19:23:40.8414195Z [0m          using "ModelDiscriminator#find"[0m
2025-04-11T19:23:40.8709523Z           [32m  [32mâœ”[39m[0m[90m to find documents of the appropriate discriminator[0m
2025-04-11T19:23:40.8827449Z [0m      findOne[0m
2025-04-11T19:23:40.9116080Z       [32m  [32mâœ”[39m[0m[90m when selecting `select: false` field (gh-4629) (gh-11546)[0m
2025-04-11T19:23:40.9554882Z       [32m  [32mâœ”[39m[0m[90m select: false in base schema (gh-5448)[0m
2025-04-11T19:23:40.9923403Z       [32m  [32mâœ”[39m[0m[90m hydrates correct model[0m
2025-04-11T19:23:41.0287979Z       [32m  [32mâœ”[39m[0m[90m hydrates correct model when fields selection set as string inclusive[0m
2025-04-11T19:23:41.0722342Z       [32m  [32mâœ”[39m[0m[90m hydrates correct model when fields selection set as string exclusive[0m
2025-04-11T19:23:41.1084151Z       [32m  [32mâœ”[39m[0m[90m hydrates correct model when fields selection set as empty string[0m
2025-04-11T19:23:41.1461259Z       [32m  [32mâœ”[39m[0m[90m hydrates correct model when fields selection set as object inclusive[0m
2025-04-11T19:23:41.1819285Z       [32m  [32mâœ”[39m[0m[90m hydrates correct model when fields selection set as object exclusive[0m
2025-04-11T19:23:41.2186069Z       [32m  [32mâœ”[39m[0m[90m hydrates correct model when fields selection set as empty object[0m
2025-04-11T19:23:41.2550349Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds a document of its type[0m
2025-04-11T19:23:41.2945495Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds a document of its type when fields selection set as string inclusive[0m
2025-04-11T19:23:41.3318341Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds a document of its type when fields selection set as string exclusive[0m
2025-04-11T19:23:41.3718895Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds a document of its type when fields selection set as empty string[0m
2025-04-11T19:23:41.4109440Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds a document of its type when fields selection set as object inclusive[0m
2025-04-11T19:23:41.4491625Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds a document of its type when fields selection set as object exclusive[0m
2025-04-11T19:23:41.4875373Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds a document of its type when fields selection set as empty object[0m
2025-04-11T19:23:41.4953213Z [0m      findOneAndUpdate[0m
2025-04-11T19:23:41.5279863Z       [32m  [32mâœ”[39m[0m[90m does not update models of other types[0m
2025-04-11T19:23:41.5643717Z       [32m  [32mâœ”[39m[0m[90m updates models of its own type[0m
2025-04-11T19:23:41.6002226Z       [32m  [32mâœ”[39m[0m[90m base model modifies any event type[0m
2025-04-11T19:23:41.6078974Z [0m      population/reference mapping[0m
2025-04-11T19:23:41.6611783Z       [32m  [32mâœ”[39m[0m[90m populates and hydrates correct models[0m[33m (46ms)[0m
2025-04-11T19:23:41.7241530Z       [32m  [32mâœ”[39m[0m[90m reference in child schemas (gh-2719)[0m[33m (50ms)[0m
2025-04-11T19:23:41.7749502Z       [32m  [32mâœ”[39m[0m[90m populates parent array reference (gh-4643)[0m[33m (38ms)[0m
2025-04-11T19:23:41.8222157Z       [32m  [32mâœ”[39m[0m[90m updating discriminator key (gh-5613)[0m
2025-04-11T19:23:41.8684614Z       [32m  [32mâœ”[39m[0m[90m disallows updating discriminator key using `$unset` (gh-11456)[0m
2025-04-11T19:23:41.9148851Z       [32m  [32mâœ”[39m[0m[90m allows updating discriminator key using `overwriteDiscriminatorKey` with `strict: throw` (gh-12513)[0m
2025-04-11T19:23:41.9621767Z       [32m  [32mâœ”[39m[0m[90m allows updating document where discriminator key is present in payload but have the same value (13055)[0m
2025-04-11T19:23:42.0298334Z       [32m  [32mâœ”[39m[0m[90m reference in child schemas (gh-2719-2)[0m
2025-04-11T19:23:42.0903999Z       [32m  [32mâœ”[39m[0m[90m correctly populates doc with nonexistent discriminator key (gh-10082)[0m[33m (48ms)[0m
2025-04-11T19:23:42.0984791Z [0m      deleteOne and deleteMany (gh-8471)[0m
2025-04-11T19:23:42.1514222Z       [32m  [32mâœ”[39m[0m[90m adds discriminator filter if no conditions passed[0m[33m (46ms)[0m
2025-04-11T19:23:42.1591693Z [0m      aggregate[0m
2025-04-11T19:23:42.1602686Z [0m        using "RootModel#aggregate"[0m
2025-04-11T19:23:42.2009534Z         [32m  [32mâœ”[39m[0m[90m to aggregate documents of all discriminators[0m
2025-04-11T19:23:42.2095806Z [0m        using "ModelDiscriminator#aggregate"[0m
2025-04-11T19:23:42.2506600Z         [32m  [32mâœ”[39m[0m[90m only aggregates documents of the appropriate discriminator[0m
2025-04-11T19:23:42.3162405Z         [32m  [32mâœ”[39m[0m[90m hides fields when discriminated model has select (gh-4991)[0m
2025-04-11T19:23:42.3824798Z         [32m  [32mâœ”[39m[0m[90m doesnt exclude field if slice (gh-4991)[0m
2025-04-11T19:23:42.4283132Z         [32m  [32mâœ”[39m[0m[90m merges the first pipeline stages if applicable[0m
2025-04-11T19:23:42.4431237Z 
2025-04-11T19:23:42.4432366Z [0m  model query casting[0m
2025-04-11T19:23:42.4598858Z   [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:23:42.4694329Z   [32m  [32mâœ”[39m[0m[90m returns cast errors[0m
2025-04-11T19:23:42.4958075Z   [32m  [32mâœ”[39m[0m[90m casts $modifiers[0m
2025-04-11T19:23:42.5188394Z   [32m  [32mâœ”[39m[0m[90m casts $in values of arrays (gh-199)[0m
2025-04-11T19:23:42.5493524Z   [32m  [32mâœ”[39m[0m[90m casts $in values of arrays with single item instead of array (gh-3238)[0m
2025-04-11T19:23:42.5829980Z   [32m  [32mâœ”[39m[0m[90m casts $nin values of arrays (gh-232)[0m
2025-04-11T19:23:42.6057869Z   [32m  [32mâœ”[39m[0m[90m works when finding by Date (gh-204)[0m
2025-04-11T19:23:42.6265956Z   [32m  [32mâœ”[39m[0m[90m works with $type matching[0m
2025-04-11T19:23:42.6476114Z   [32m  [32mâœ”[39m[0m[90m works when finding Boolean with $in (gh-998)[0m
2025-04-11T19:23:42.6674863Z   [32m  [32mâœ”[39m[0m[90m works when finding Boolean with $ne (gh-1093)[0m
2025-04-11T19:23:42.6754468Z   [32m  [32mâœ”[39m[0m[90m properly casts $and (gh-1180)[0m
2025-04-11T19:23:42.7021913Z   [32m  [32mâœ”[39m[0m[90m works with $all (gh-3394)[0m
2025-04-11T19:23:42.7113243Z   [32m  [32mâœ”[39m[0m[90m date with $not + $type (gh-4632)[0m
2025-04-11T19:23:42.7281971Z   [32m  [32mâœ”[39m[0m[90m setOnInsert with custom type (gh-5126)[0m
2025-04-11T19:23:42.7581044Z   [32m  [32mâœ”[39m[0m[90m lowercase in query (gh-4569)[0m
2025-04-11T19:23:42.7679810Z   [32m  [32mâœ”[39m[0m[90m runSettersOnQuery only once on find (gh-5434)[0m
2025-04-11T19:23:42.7833973Z   [32m  [32mâœ”[39m[0m[90m setters run only once on findOne (gh-6157)[0m
2025-04-11T19:23:42.8178913Z   [32m  [32mâœ”[39m[0m[90m runSettersOnQuery as query option (gh-5350)[0m
2025-04-11T19:23:42.8424158Z   [32m  [32mâœ”[39m[0m[90m _id = 0 (gh-4610)[0m
2025-04-11T19:23:42.8518650Z   [32m  [32mâœ”[39m[0m[90m converts to CastError (gh-6803)[0m
2025-04-11T19:23:42.8882437Z   [32m  [32mâœ”[39m[0m[90m minDistance (gh-4197)[0m
2025-04-11T19:23:42.9116545Z   [32m  [32mâœ”[39m[0m[90m array ops don't break with strict:false (gh-6952)[0m
2025-04-11T19:23:42.9352879Z   [32m  [32mâœ”[39m[0m[90m should not throw a cast error when dealing with an array of an array of strings in combination with $elemMatch and $not (gh-13880)[0m
2025-04-11T19:23:42.9626572Z   [32m  [32mâœ”[39m[0m[90m should not throw a cast error when dealing with an array of objects in combination with $elemMatch (gh-13974)[0m
2025-04-11T19:23:42.9874539Z   [32m  [32mâœ”[39m[0m[90m should not throw a cast error when dealing with an array of objects in combination with $elemMatch and nested $and[0m
2025-04-11T19:23:42.9919153Z [0m    $near[0m
2025-04-11T19:23:43.0121388Z     [32m  [32mâœ”[39m[0m[90m with arrays[0m
2025-04-11T19:23:43.0350634Z     [32m  [32mâœ”[39m[0m[90m with objects[0m
2025-04-11T19:23:43.0584351Z     [32m  [32mâœ”[39m[0m[90m with nested objects[0m
2025-04-11T19:23:43.0654931Z [0m    $nearSphere[0m
2025-04-11T19:23:43.0853986Z     [32m  [32mâœ”[39m[0m[90m with arrays[0m
2025-04-11T19:23:43.1084114Z     [32m  [32mâœ”[39m[0m[90m with objects[0m
2025-04-11T19:23:43.1338102Z     [32m  [32mâœ”[39m[0m[90m with nested objects[0m
2025-04-11T19:23:43.1405504Z [0m    $within[0m
2025-04-11T19:23:43.1416352Z [0m      $centerSphere[0m
2025-04-11T19:23:43.1608204Z       [32m  [32mâœ”[39m[0m[90m with arrays[0m
2025-04-11T19:23:43.1855637Z       [32m  [32mâœ”[39m[0m[90m with objects[0m
2025-04-11T19:23:43.2264222Z       [32m  [32mâœ”[39m[0m[90m with nested objects[0m
2025-04-11T19:23:43.2346872Z [0m      $center[0m
2025-04-11T19:23:43.2552624Z       [32m  [32mâœ”[39m[0m[90m with arrays[0m
2025-04-11T19:23:43.2814279Z       [32m  [32mâœ”[39m[0m[90m with objects[0m
2025-04-11T19:23:43.3071732Z       [32m  [32mâœ”[39m[0m[90m with nested objects[0m
2025-04-11T19:23:43.3152093Z [0m      $polygon[0m
2025-04-11T19:23:43.3367443Z       [32m  [32mâœ”[39m[0m[90m with arrays[0m
2025-04-11T19:23:43.3634369Z       [32m  [32mâœ”[39m[0m[90m with objects[0m
2025-04-11T19:23:43.3896991Z       [32m  [32mâœ”[39m[0m[90m with nested objects[0m
2025-04-11T19:23:43.3976895Z [0m      $box[0m
2025-04-11T19:23:43.4189705Z       [32m  [32mâœ”[39m[0m[90m with arrays[0m
2025-04-11T19:23:43.4467576Z       [32m  [32mâœ”[39m[0m[90m with objects[0m
2025-04-11T19:23:43.4756905Z       [32m  [32mâœ”[39m[0m[90m with nested objects[0m
2025-04-11T19:23:43.4853715Z [0m    $options[0m
2025-04-11T19:23:43.4923727Z     [32m  [32mâœ”[39m[0m[90m works on arrays gh-1462[0m
2025-04-11T19:23:43.5052253Z     [32m  [32mâœ”[39m[0m[90m does not cast with uppercase (gh-7800)[0m
2025-04-11T19:23:43.5172494Z [0m    $elemMatch[0m
2025-04-11T19:23:43.5339759Z     [32m  [32mâœ”[39m[0m[90m should cast String to ObjectId in $elemMatch[0m
2025-04-11T19:23:43.5592440Z     [32m  [32mâœ”[39m[0m[90m should cast String to ObjectId in $elemMatch inside $not[0m
2025-04-11T19:23:43.5861134Z     [32m  [32mâœ”[39m[0m[90m should cast subdoc _id typed as String to String in $elemMatch gh3719[0m
2025-04-11T19:23:43.6105034Z     [32m  [32mâœ”[39m[0m[90m should cast subdoc _id typed as String to String in $elemMatch inside $not gh3719[0m
2025-04-11T19:23:43.6370665Z     [32m  [32mâœ”[39m[0m[90m casts $nor within $elemMatch (gh-9479)[0m
2025-04-11T19:23:43.6476419Z 
2025-04-11T19:23:43.6477021Z [0m  schema.onthefly[0m
2025-04-11T19:23:43.6529193Z   [32m  [32mâœ”[39m[0m[90m setting should cache the schema type and cast values appropriately[0m
2025-04-11T19:23:43.6656154Z   [32m  [32mâœ”[39m[0m[90m should be local to the particular document[0m
2025-04-11T19:23:43.6883775Z   [32m  [32mâœ”[39m[0m[90m querying a document that had an on the fly schema should work[0m
2025-04-11T19:23:43.6958581Z   [32m  [32mâœ”[39m[0m[90m on the fly Embedded Array schemas should cast properly[0m
2025-04-11T19:23:43.7200484Z   [32m  [32mâœ”[39m[0m[90m on the fly Embedded Array schemas should get from a fresh queried document properly[0m
2025-04-11T19:23:43.7272421Z   [32m  [32mâœ”[39m[0m[90m casts on get() (gh-2360)[0m
2025-04-11T19:23:43.7391228Z 
2025-04-11T19:23:43.7392338Z [0m  timestamps[0m
2025-04-11T19:23:43.7592268Z   [32m  [32mâœ”[39m[0m[90m does not override timestamp params defined in schema (gh-4868)[0m
2025-04-11T19:23:43.7784665Z   [32m  [32mâœ”[39m[0m[90m updatedAt without createdAt (gh-5598)[0m
2025-04-11T19:23:43.7979730Z   [32m  [32mâœ”[39m[0m[90m updatedAt without createdAt for nested (gh-5598)[0m
2025-04-11T19:23:43.8167567Z   [32m  [32mâœ”[39m[0m[90m nested paths (gh-4503)[0m
2025-04-11T19:23:43.8356346Z   [32m  [32mâœ”[39m[0m[90m does not override nested timestamp params defined in schema (gh-4868)[0m
2025-04-11T19:23:43.8806581Z   [32m  [32mâœ”[39m[0m[90m does not override timestamps in nested schema (gh-4868)[0m
2025-04-11T19:23:43.8977782Z   [32m  [32mâœ”[39m[0m[90m no timestamps added when parent/child timestamps explicitly false (gh-7202)[0m
2025-04-11T19:23:43.9144129Z   [32m  [32mâœ”[39m[0m[90m avoids calling createdAt getters when setting updatedAt (gh-7496)[0m
2025-04-11T19:23:43.9330730Z   [32m  [32mâœ”[39m[0m[90m handles custom statics that conflict with built-in functions (gh-7698)[0m
2025-04-11T19:23:44.0136651Z   [32m  [32mâœ”[39m[0m[90m timestamps handle reusing child schemas (gh-7712)[0m[33m (74ms)[0m
2025-04-11T19:23:44.0342765Z   [32m  [32mâœ”[39m[0m[90m respects timestamps: false in child schema (gh-8007)[0m
2025-04-11T19:23:44.1053524Z   [32m  [32mâœ”[39m[0m[90m updates updatedAt when calling update without $set (gh-4768)[0m[33m (65ms)[0m
2025-04-11T19:23:44.1267157Z   [32m  [32mâœ”[39m[0m[90m updates updatedAt when calling update on subchild[0m
2025-04-11T19:23:44.1466449Z   [32m  [32mâœ”[39m[0m[90m sets timestamps on deeply nested docs on upsert (gh-8894)[0m
2025-04-11T19:23:44.1778083Z   [32m  [32mâœ”[39m[0m[90m sets timestamps on bulk write without `$set` (gh-9268)[0m
2025-04-11T19:23:44.1956956Z   [32m  [32mâœ”[39m[0m[90m works with property named "set" (gh-9428)[0m
2025-04-11T19:23:44.2160900Z   [32m  [32mâœ”[39m[0m[90m should not override createdAt when not selected (gh-4340)[0m
2025-04-11T19:23:44.2337789Z   [32m  [32mâœ”[39m[0m[90m timestamps with number types (gh-3957)[0m
2025-04-11T19:23:44.2513911Z   [32m  [32mâœ”[39m[0m[90m timestamps with custom timestamp (gh-3957)[0m
2025-04-11T19:23:44.2686238Z   [32m  [32mâœ”[39m[0m[90m timestamps with custom timestamp using getter method (gh-3957)[0m
2025-04-11T19:23:44.3005227Z   [32m  [32mâœ”[39m[0m[90m shouldnt bump updatedAt in single nested subdocs that are not modified (gh-9357)[0m
2025-04-11T19:23:44.3314112Z   [32m  [32mâœ”[39m[0m[90m bumps updatedAt with mixed $set (gh-9357)[0m
2025-04-11T19:23:44.3489834Z   [32m  [32mâœ”[39m[0m[90m makes createdAt immutable by default (gh-10139)[0m
2025-04-11T19:23:44.3698990Z   [32m  [32mâœ”[39m[0m[90m sets createdAt when using $push/$addToSet on path with positional operator (gh-10447)[0m
2025-04-11T19:23:44.3968525Z   [32m  [32mâœ”[39m[0m[90m sets createdAt when creating new single nested subdoc (gh-11603)[0m
2025-04-11T19:23:44.4185743Z   [32m  [32mâœ”[39m[0m[90m sets timestamps on sub-schema if parent schema does not have timestamps: true (gh-12119)[0m
2025-04-11T19:23:44.4368828Z   [32m  [32mâœ”[39m[0m[90m works with insertMany() and embedded discriminators (gh-12150)[0m
2025-04-11T19:23:44.4646705Z   [32m  [32mâœ”[39m[0m[90m findOneAndUpdate creates subdocuments with timestamps in correct order (gh-12475)[0m
2025-04-11T19:23:44.4858378Z   [32m  [32mâœ”[39m[0m[90m should avoid setting null update when updating document with timestamps gh-13379[0m
2025-04-11T19:23:44.4902336Z [0m    schema options[0m
2025-04-11T19:23:44.4948285Z     [32m  [32mâœ”[39m[0m[90m should have createdAt and updatedAt fields[0m
2025-04-11T19:23:44.5031051Z     [32m  [32mâœ”[39m[0m[90m should have createdAt and updatedAt fields[0m
2025-04-11T19:23:44.5112723Z     [32m  [32mâœ”[39m[0m[90m should have created and updatedAt fields[0m
2025-04-11T19:23:44.5195301Z     [32m  [32mâœ”[39m[0m[90m should have created and updatedAt fields[0m
2025-04-11T19:23:44.5276495Z     [32m  [32mâœ”[39m[0m[90m should have created and updated fields[0m
2025-04-11T19:23:44.5358981Z     [32m  [32mâœ”[39m[0m[90m should have just createdAt if updatedAt set to falsy[0m
2025-04-11T19:23:44.5440480Z     [32m  [32mâœ”[39m[0m[90m should have created and updated fields[0m
2025-04-11T19:23:44.5525966Z     [32m  [32mâœ”[39m[0m[90m TTL index with timestamps (gh-5656)[0m
2025-04-11T19:23:44.5584472Z [0m    auto update createdAt and updatedAt when create/save/update document[0m
2025-04-11T19:23:44.5755072Z     [32m  [32mâœ”[39m[0m[90m should have fields when create[0m
2025-04-11T19:23:44.5967453Z     [32m  [32mâœ”[39m[0m[90m sets timestamps on findOneAndUpdate[0m
2025-04-11T19:23:44.6183578Z     [32m  [32mâœ”[39m[0m[90m sets timestamps on findOneAndReplace (gh-9951)[0m
2025-04-11T19:23:44.6430738Z     [32m  [32mâœ”[39m[0m[90m sets timestamps on replaceOne (gh-9951)[0m
2025-04-11T19:23:44.6654520Z     [32m  [32mâœ”[39m[0m[90m should change updatedAt when save[0m
2025-04-11T19:23:44.6881773Z     [32m  [32mâœ”[39m[0m[90m should not change updatedAt when save with no modifications[0m
2025-04-11T19:23:44.7217261Z     [32m  [32mâœ”[39m[0m[90m can skip with timestamps: false (gh-7357)[0m
2025-04-11T19:23:44.7548891Z     [32m  [32mâœ”[39m[0m[90m can skip with `$timestamps(false)` (gh-12117)[0m
2025-04-11T19:23:44.7899665Z     [32m  [32mâœ”[39m[0m[90m should change updatedAt when findOneAndUpdate[0m
2025-04-11T19:23:44.8237669Z     [32m  [32mâœ”[39m[0m[90m insertMany with createdAt off (gh-6381)[0m
2025-04-11T19:23:44.8465212Z     [32m  [32mâœ”[39m[0m[90m should have fields when updateOne[0m
2025-04-11T19:23:44.8700966Z     [32m  [32mâœ”[39m[0m[90m should change updatedAt when updateOne[0m
2025-04-11T19:23:44.8919369Z     [32m  [32mâœ”[39m[0m[90m should change updatedAt when updateMany[0m
2025-04-11T19:23:44.9212027Z     [32m  [32mâœ”[39m[0m[90m nested docs (gh-4049)[0m
2025-04-11T19:23:44.9530605Z     [32m  [32mâœ”[39m[0m[90m nested docs with push (gh-4049)[0m
2025-04-11T19:23:44.9640296Z 
2025-04-11T19:23:44.9640826Z [0m  queryhelpers[0m
2025-04-11T19:23:44.9651924Z [0m    applyPaths[0m
2025-04-11T19:23:44.9699665Z     [32m  [32mâœ”[39m[0m[90m adds select: true paths unless excluded using minus path (gh-11694)[0m
2025-04-11T19:23:44.9766111Z     [32m  [32mâœ”[39m[0m[90m supports nested minus path (gh-11694)[0m
2025-04-11T19:23:44.9819552Z 
2025-04-11T19:23:44.9820065Z [0m  model[0m
2025-04-11T19:23:44.9831752Z [0m    create()[0m
2025-04-11T19:23:45.0031995Z     [32m  [32mâœ”[39m[0m[90m accepts an array and returns an array[0m
2025-04-11T19:23:45.0097718Z     [32m  [32mâœ”[39m[0m[90m fires callback when passed 0 docs[0m
2025-04-11T19:23:45.0163754Z     [32m  [32mâœ”[39m[0m[90m fires callback when empty array passed[0m
2025-04-11T19:23:45.0237167Z     [32m  [32mâœ”[39m[0m[90m supports passing options[0m
2025-04-11T19:23:45.0304023Z     [32m  [32mâœ”[39m[0m[90m returns a promise[0m
2025-04-11T19:23:45.1425995Z     [32m  [32mâœ”[39m[0m[90m creates in parallel[0m[31m (105ms)[0m
2025-04-11T19:23:45.1684928Z     [32m  [32mâœ”[39m[0m[90m should return the first error immediately if "aggregateErrors" is not explicitly set[0m
2025-04-11T19:23:45.1897099Z     [32m  [32mâœ”[39m[0m[90m should not return errors immediately if "aggregateErrors" is "true"[0m
2025-04-11T19:23:45.1929417Z [0m      callback is optional[0m
2025-04-11T19:23:45.1991171Z       [32m  [32mâœ”[39m[0m[90m with one doc[0m
2025-04-11T19:23:45.2087514Z       [32m  [32mâœ”[39m[0m[90m with more than one doc[0m
2025-04-11T19:23:45.2182687Z       [32m  [32mâœ”[39m[0m[90m with array of docs[0m
2025-04-11T19:23:45.2283839Z       [32m  [32mâœ”[39m[0m[90m and should reject promise on error[0m
2025-04-11T19:23:45.2375750Z       [32m  [32mâœ”[39m[0m[90m when passed an empty array, returns an empty array[0m
2025-04-11T19:23:45.2476806Z       [32m  [32mâœ”[39m[0m[90m treats undefined first arg as doc rather than callback (gh-9765)[0m
2025-04-11T19:23:45.2584259Z       [32m  [32mâœ”[39m[0m[90m ignores undefined last arg (gh-13487)[0m
2025-04-11T19:23:45.2638246Z [0m      ordered[0m
2025-04-11T19:23:45.2958365Z       [32m  [32mâœ”[39m[0m[90m runs the document insertion in a series when using the ordered option gh-4038[0m
2025-04-11T19:23:45.3197954Z       [32m  [32mâœ”[39m[0m[90m should throw an error only after all the documents have finished saving gh-4628[0m
2025-04-11T19:23:45.3384080Z       [32m  [32mâœ”[39m[0m[90m should return the first error immediately if "aggregateErrors" is not explicitly set (ordered)[0m
2025-04-11T19:23:45.3583272Z       [32m  [32mâœ”[39m[0m[90m should not return errors immediately if "aggregateErrors" is "true" (ordered)[0m
2025-04-11T19:23:45.3691796Z 
2025-04-11T19:23:45.3692365Z [0m  SubdocumentPath[0m
2025-04-11T19:23:45.3729960Z   [32m  [32mâœ”[39m[0m[90m copies over `requiredValidator` (gh-8819)[0m
2025-04-11T19:23:45.3781872Z   [32m  [32mâœ”[39m[0m[90m supports `set()` (gh-8883)[0m
2025-04-11T19:23:45.3833650Z   [32m  [32mâœ”[39m[0m[90m supports setting _id globally (gh-11541) (gh-8883)[0m
2025-04-11T19:23:45.3855425Z [0m    discriminator()[0m
2025-04-11T19:23:45.3866482Z [0m      recursive nested discriminators[0m
2025-04-11T19:23:45.3925519Z       [32m  [32mâœ”[39m[0m[90m allow multiple levels of data in the schema[0m
2025-04-11T19:23:45.4022857Z       [32m  [32mâœ”[39m[0m[90m allow multiple levels of data in a document[0m
2025-04-11T19:23:45.4114336Z       [32m  [32mâœ”[39m[0m[90m allow multiple levels of data in the schema when the base schema has _id without auto[0m
2025-04-11T19:23:45.4212654Z       [32m  [32mâœ”[39m[0m[90m allow multiple levels of data in a document when the base schema has _id without auto[0m
2025-04-11T19:23:45.4303382Z 
2025-04-11T19:23:45.4304591Z [0m  schematype[0m
2025-04-11T19:23:45.4340535Z   [32m  [32mâœ”[39m[0m[90m honors the selected option[0m
2025-04-11T19:23:45.4387737Z   [32m  [32mâœ”[39m[0m[90m properly handles specifying index in combination with unique or sparse[0m
2025-04-11T19:23:45.4435013Z   [32m  [32mâœ”[39m[0m[90m handles index: false with unique, sparse, text set to false (gh-7620)[0m
2025-04-11T19:23:45.4480370Z   [32m  [32mâœ”[39m[0m[90m handles unique, sparse, text set to false with no index property (gh-10738)[0m
2025-04-11T19:23:45.4525176Z   [32m  [32mâœ”[39m[0m[90m handles function as positional message arg (gh-8360)[0m
2025-04-11T19:23:45.4571117Z   [32m  [32mâœ”[39m[0m[90m merges default validators (gh-14070)[0m
2025-04-11T19:23:45.4619070Z   [32m  [32mâœ”[39m[0m[90m demonstrates the `validateAll()` function (gh-6910)[0m
2025-04-11T19:23:45.4664690Z   [32m  [32mâœ”[39m[0m[90m supports getEmbeddedSchemaType() (gh-8389)[0m
2025-04-11T19:23:45.4686232Z [0m    checkRequired()[0m
2025-04-11T19:23:45.4740572Z     [32m  [32mâœ”[39m[0m[90m with inherits (gh-7486)[0m
2025-04-11T19:23:45.4773190Z [0m    clone()[0m
2025-04-11T19:23:45.4819117Z     [32m  [32mâœ”[39m[0m[90m clones added default[0m
2025-04-11T19:23:45.4885177Z     [32m  [32mâœ”[39m[0m[90m clones added getters[0m
2025-04-11T19:23:45.4951886Z     [32m  [32mâœ”[39m[0m[90m clones added immutable[0m
2025-04-11T19:23:45.5017846Z     [32m  [32mâœ”[39m[0m[90m clones added index[0m
2025-04-11T19:23:45.5084001Z     [32m  [32mâœ”[39m[0m[90m clones added ref[0m
2025-04-11T19:23:45.5150445Z     [32m  [32mâœ”[39m[0m[90m clones added required[0m
2025-04-11T19:23:45.5205838Z     [32m  [32mâœ”[39m[0m[90m clones added select: false[0m
2025-04-11T19:23:45.5271950Z     [32m  [32mâœ”[39m[0m[90m clones added setter[0m
2025-04-11T19:23:45.5338489Z     [32m  [32mâœ”[39m[0m[90m clones added sparse[0m
2025-04-11T19:23:45.5404806Z     [32m  [32mâœ”[39m[0m[90m clones added sparse (index option)[0m
2025-04-11T19:23:45.5470671Z     [32m  [32mâœ”[39m[0m[90m clones added text (index option)[0m
2025-04-11T19:23:45.5536399Z     [32m  [32mâœ”[39m[0m[90m clones added unique (index option)[0m
2025-04-11T19:23:45.5602281Z     [32m  [32mâœ”[39m[0m[90m clones added validator[0m
2025-04-11T19:23:45.5668380Z     [32m  [32mâœ”[39m[0m[90m clones updated caster[0m
2025-04-11T19:23:45.5712043Z [0m    get()[0m
2025-04-11T19:23:45.5756031Z     [32m  [32mâœ”[39m[0m[90m SchemaArray has a `get` method[0m
2025-04-11T19:23:45.5821064Z     [32m  [32mâœ”[39m[0m[90m SchemaBigInt has a `get` method[0m
2025-04-11T19:23:45.5885832Z     [32m  [32mâœ”[39m[0m[90m SchemaBoolean has a `get` method[0m
2025-04-11T19:23:45.5950934Z     [32m  [32mâœ”[39m[0m[90m SchemaBuffer has a `get` method[0m
2025-04-11T19:23:45.6015365Z     [32m  [32mâœ”[39m[0m[90m SchemaDate has a `get` method[0m
2025-04-11T19:23:45.6080839Z     [32m  [32mâœ”[39m[0m[90m SchemaDecimal128 has a `get` method[0m
2025-04-11T19:23:45.6145573Z     [32m  [32mâœ”[39m[0m[90m SchemaDecimal128 has a `get` method[0m
2025-04-11T19:23:45.6210574Z     [32m  [32mâœ”[39m[0m[90m SchemaDocumentArray has a `get` method[0m
2025-04-11T19:23:45.6275075Z     [32m  [32mâœ”[39m[0m[90m SchemaMap has a `get` method[0m
2025-04-11T19:23:45.6339966Z     [32m  [32mâœ”[39m[0m[90m SchemaMixed has a `get` method[0m
2025-04-11T19:23:45.6404886Z     [32m  [32mâœ”[39m[0m[90m SchemaNumber has a `get` method[0m
2025-04-11T19:23:45.6469817Z     [32m  [32mâœ”[39m[0m[90m SchemaObjectId has a `get` method[0m
2025-04-11T19:23:45.6534828Z     [32m  [32mâœ”[39m[0m[90m SchemaString has a `get` method[0m
2025-04-11T19:23:45.6599660Z     [32m  [32mâœ”[39m[0m[90m SchemaSubdocument has a `get` method[0m
2025-04-11T19:23:45.6664417Z     [32m  [32mâœ”[39m[0m[90m SchemaUUID has a `get` method[0m
2025-04-11T19:23:45.6729315Z     [32m  [32mâœ”[39m[0m[90m SchemaDouble has a `get` method[0m
2025-04-11T19:23:45.6783436Z     [32m  [32mâœ”[39m[0m[90m SchemaInt32 has a `get` method[0m
2025-04-11T19:23:45.6848177Z     [32m  [32mâœ”[39m[0m[90m SchemaObjectId has a `get` method[0m
2025-04-11T19:23:45.6912907Z     [32m  [32mâœ”[39m[0m[90m SchemaMixed has a `get` method[0m
2025-04-11T19:23:45.6977781Z     [32m  [32mâœ”[39m[0m[90m SchemaBoolean has a `get` method[0m
2025-04-11T19:23:45.7042570Z     [32m  [32mâœ”[39m[0m[90m SchemaObjectId has a `get` method[0m
2025-04-11T19:23:45.7086026Z [0m    set()[0m
2025-04-11T19:23:45.7133166Z     [32m  [32mâœ”[39m[0m[90m SchemaArray, when given a default option, set its[0m
2025-04-11T19:23:45.7199111Z     [32m  [32mâœ”[39m[0m[90m SchemaBigInt, when given a default option, set its[0m
2025-04-11T19:23:45.7264899Z     [32m  [32mâœ”[39m[0m[90m SchemaBoolean, when given a default option, set its[0m
2025-04-11T19:23:45.7330672Z     [32m  [32mâœ”[39m[0m[90m SchemaBuffer, when given a default option, set its[0m
2025-04-11T19:23:45.7395854Z     [32m  [32mâœ”[39m[0m[90m SchemaDate, when given a default option, set its[0m
2025-04-11T19:23:45.7461473Z     [32m  [32mâœ”[39m[0m[90m SchemaDecimal128, when given a default option, set its[0m
2025-04-11T19:23:45.7527157Z     [32m  [32mâœ”[39m[0m[90m SchemaDecimal128, when given a default option, set its[0m
2025-04-11T19:23:45.7593064Z     [32m  [32mâœ”[39m[0m[90m SchemaMap, when given a default option, set its[0m
2025-04-11T19:23:45.7658793Z     [32m  [32mâœ”[39m[0m[90m SchemaMixed, when given a default option, set its[0m
2025-04-11T19:23:45.7724634Z     [32m  [32mâœ”[39m[0m[90m SchemaNumber, when given a default option, set its[0m
2025-04-11T19:23:45.7789894Z     [32m  [32mâœ”[39m[0m[90m SchemaObjectId, when given a default option, set its[0m
2025-04-11T19:23:45.7855629Z     [32m  [32mâœ”[39m[0m[90m SchemaString, when given a default option, set its[0m
2025-04-11T19:23:45.7921865Z     [32m  [32mâœ”[39m[0m[90m SchemaUUID, when given a default option, set its[0m
2025-04-11T19:23:45.7987749Z     [32m  [32mâœ”[39m[0m[90m SchemaDouble, when given a default option, set its[0m
2025-04-11T19:23:45.8053513Z     [32m  [32mâœ”[39m[0m[90m SchemaInt32, when given a default option, set its[0m
2025-04-11T19:23:45.8118741Z     [32m  [32mâœ”[39m[0m[90m SchemaObjectId, when given a default option, set its[0m
2025-04-11T19:23:45.8184056Z     [32m  [32mâœ”[39m[0m[90m SchemaMixed, when given a default option, set its[0m
2025-04-11T19:23:45.8249324Z     [32m  [32mâœ”[39m[0m[90m SchemaBoolean, when given a default option, set its[0m
2025-04-11T19:23:45.8314460Z     [32m  [32mâœ”[39m[0m[90m SchemaObjectId, when given a default option, set its[0m
2025-04-11T19:23:45.8346783Z [0m      SchemaType.set()[0m
2025-04-11T19:23:45.8401339Z       [32m  [32mâœ”[39m[0m[90m SchemaType.set, is a function[0m
2025-04-11T19:23:45.8671864Z       [32m  [32mâœ”[39m[0m[90m should allow setting values to a given property gh-13510[0m
2025-04-11T19:23:45.8747066Z 
2025-04-11T19:23:45.8748373Z [0m  schema[0m
2025-04-11T19:23:45.8761045Z [0m    validation[0m
2025-04-11T19:23:45.8818727Z     [32m  [32mâœ”[39m[0m[90m invalid arguments are rejected (1044)[0m
2025-04-11T19:23:45.8888138Z     [32m  [32mâœ”[39m[0m[90m string enum[0m
2025-04-11T19:23:45.8958643Z     [32m  [32mâœ”[39m[0m[90m string regexp[0m
2025-04-11T19:23:45.9032434Z     [32m  [32mâœ”[39m[0m[90m should clear validator errors (gh-2302)[0m
2025-04-11T19:23:45.9106641Z     [32m  [32mâœ”[39m[0m[90m should allow an array of enums (gh-661)[0m
2025-04-11T19:23:45.9176247Z     [32m  [32mâœ”[39m[0m[90m should allow null values for enum gh-3044[0m
2025-04-11T19:23:45.9254340Z     [32m  [32mâœ”[39m[0m[90m should allow an array of subdocuments with enums (gh-3521)[0m
2025-04-11T19:23:45.9332424Z     [32m  [32mâœ”[39m[0m[90m should validate subdocuments subproperty enums (gh-4111)[0m
2025-04-11T19:23:45.9406412Z     [32m  [32mâœ”[39m[0m[90m doesnt do double validation on document arrays (gh-2618)[0m
2025-04-11T19:23:45.9485456Z     [32m  [32mâœ”[39m[0m[90m doesnt do double validation on document arrays underneath nested (gh-5411)[0m
2025-04-11T19:23:45.9562811Z     [32m  [32mâœ”[39m[0m[90m no double validation on set nested docarray (gh-4145)[0m
2025-04-11T19:23:45.9639411Z     [32m  [32mâœ”[39m[0m[90m returns cast errors[0m
2025-04-11T19:23:45.9724938Z     [32m  [32mâœ”[39m[0m[90m handles multiple subdocument errors (gh-2589)[0m
2025-04-11T19:23:45.9839392Z     [32m  [32mâœ”[39m[0m[90m handles subdocument cast errors (gh-2819)[0m
2025-04-11T19:23:45.9910564Z     [32m  [32mâœ”[39m[0m[90m fails when you try to set a nested path to a primitive (gh-2592)[0m
2025-04-11T19:23:45.9980841Z     [32m  [32mâœ”[39m[0m[90m doesnt execute other validators if required fails (gh-2725)[0m
2025-04-11T19:23:46.0050668Z     [32m  [32mâœ”[39m[0m[90m doesnt execute other validators if required fails (gh-3025)[0m
2025-04-11T19:23:46.0120569Z     [32m  [32mâœ”[39m[0m[90m validateSync allows you to filter paths (gh-3153)[0m
2025-04-11T19:23:46.0181502Z     [32m  [32mâœ”[39m[0m[90m validateSync validates array elements when setting pathsToValidate (gh-13159)[0m
2025-04-11T19:23:46.0251097Z     [32m  [32mâœ”[39m[0m[90m adds required validators to the front of the list (gh-2843)[0m
2025-04-11T19:23:46.0323500Z     [32m  [32mâœ”[39m[0m[90m sets path correctly when setter throws exception (gh-2832)[0m
2025-04-11T19:23:46.0398523Z     [32m  [32mâœ”[39m[0m[90m allows you to validate embedded doc that was .create()-ed (gh-2902) (gh-2929)[0m
2025-04-11T19:23:46.0468503Z     [32m  [32mâœ”[39m[0m[90m returns correct kind for user defined custom validators (gh-2885)[0m
2025-04-11T19:23:46.0537711Z     [32m  [32mâœ”[39m[0m[90m enums report kind (gh-3009)[0m
2025-04-11T19:23:46.0620269Z     [32m  [32mâœ”[39m[0m[90m enums on arrays (gh-6102) (gh-8449)[0m
2025-04-11T19:23:46.0689695Z     [32m  [32mâœ”[39m[0m[90m skips conditional required (gh-3539)[0m
2025-04-11T19:23:46.0762017Z     [32m  [32mâœ”[39m[0m[90m handles function for date min/max (gh-7600)[0m
2025-04-11T19:23:46.0832232Z     [32m  [32mâœ”[39m[0m[90m evaluate message function gh6523[0m
2025-04-11T19:23:46.0903031Z     [32m  [32mâœ”[39m[0m[90m Allows for doc to be passed as another parameter (gh-12564)[0m
2025-04-11T19:23:46.0973874Z     [32m  [32mâœ”[39m[0m[90m evaluate message function for required field gh6523[0m
2025-04-11T19:23:46.1058815Z     [32m  [32mâœ”[39m[0m[90m should validate required UUID fields correctly (gh-12991)[0m
2025-04-11T19:23:46.1091269Z [0m      non-required fields[0m
2025-04-11T19:23:46.1149463Z       [32m  [32mâœ”[39m[0m[90m number min and max[0m
2025-04-11T19:23:46.1192803Z [0m        are validated correctly[0m
2025-04-11T19:23:46.1363682Z         [32m  [32mâœ”[39m[0m[90m and can be set to "undefined" (gh-1594)[0m
2025-04-11T19:23:46.1468346Z [0m      required[0m
2025-04-11T19:23:46.1526118Z       [32m  [32mâœ”[39m[0m[90m string required[0m
2025-04-11T19:23:46.1616039Z       [32m  [32mâœ”[39m[0m[90m string conditional required[0m
2025-04-11T19:23:46.1704898Z       [32m  [32mâœ”[39m[0m[90m number required[0m
2025-04-11T19:23:46.1794371Z       [32m  [32mâœ”[39m[0m[90m date required[0m
2025-04-11T19:23:46.1882831Z       [32m  [32mâœ”[39m[0m[90m date not empty string (gh-3132)[0m
2025-04-11T19:23:46.1973877Z       [32m  [32mâœ”[39m[0m[90m objectid required[0m
2025-04-11T19:23:46.2064124Z       [32m  [32mâœ”[39m[0m[90m array required[0m
2025-04-11T19:23:46.2154121Z       [32m  [32mâœ”[39m[0m[90m array required custom required[0m
2025-04-11T19:23:46.2243361Z       [32m  [32mâœ”[39m[0m[90m boolean required[0m
2025-04-11T19:23:46.2332642Z       [32m  [32mâœ”[39m[0m[90m mixed required[0m
2025-04-11T19:23:46.2386657Z [0m      async[0m
2025-04-11T19:23:46.2504774Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:23:46.2654954Z       [32m  [32mâœ”[39m[0m[90m scope[0m
2025-04-11T19:23:46.2744126Z       [32m  [32mâœ”[39m[0m[90m doValidateSync should ignore async function and script waiting for promises (gh-4885)[0m
2025-04-11T19:23:46.2797553Z [0m      messages[0m
2025-04-11T19:23:46.2808615Z [0m        are customizable[0m
2025-04-11T19:23:46.2889516Z         [32m  [32mâœ”[39m[0m[90m within schema definitions[0m
2025-04-11T19:23:46.3004313Z         [32m  [32mâœ”[39m[0m[90m for custom validators[0m
2025-04-11T19:23:46.3117449Z         [32m  [32mâœ”[39m[0m[90m custom validators with promise (gh-5171)[0m
2025-04-11T19:23:46.3230630Z         [32m  [32mâœ”[39m[0m[90m supports custom properties (gh-2132)[0m
2025-04-11T19:23:46.3344154Z         [32m  [32mâœ”[39m[0m[90m supports dynamic message for validators with callback (gh-1936)[0m
2025-04-11T19:23:46.3419097Z [0m      types[0m
2025-04-11T19:23:46.3430740Z [0m        are customizable[0m
2025-04-11T19:23:46.3502018Z         [32m  [32mâœ”[39m[0m[90m for single custom validators[0m
2025-04-11T19:23:46.3616311Z         [32m  [32mâœ”[39m[0m[90m for many custom validators[0m
2025-04-11T19:23:46.3692020Z [0m      `enum` accepts an object to support TypeScript enums (gh-9546) (gh-9535)[0m
2025-04-11T19:23:46.3750965Z       [32m  [32mâœ”[39m[0m[90m strings[0m
2025-04-11T19:23:46.3842913Z       [32m  [32mâœ”[39m[0m[90m numbers[0m
2025-04-11T19:23:46.3936402Z       [32m  [32mâœ”[39m[0m[90m arrays[0m
2025-04-11T19:23:46.4029346Z       [32m  [32mâœ”[39m[0m[90m passes when using valid data[0m
2025-04-11T19:23:46.4105145Z 
2025-04-11T19:23:46.4105416Z [0m  SchemaNumber[0m
2025-04-11T19:23:46.4141445Z   [32m  [32mâœ”[39m[0m[90m allows 0 with required: true and ref set (gh-11912)[0m
2025-04-11T19:23:46.4187713Z   [32m  [32mâœ”[39m[0m[90m allows calling `min()` with no message arg (gh-15236)[0m
2025-04-11T19:23:46.4219552Z 
2025-04-11T19:23:46.4221251Z [0m  connections:[0m
2025-04-11T19:23:46.4254817Z   [32m  [32mâœ”[39m[0m[90m should allow closing a closed connection[0m
2025-04-11T19:23:46.4308508Z   [32m  [32mâœ”[39m[0m[90m should return an error if malformed uri passed[0m
2025-04-11T19:23:46.5395096Z   [32m  [32mâœ”[39m[0m[90m force close (gh-5664)[0m[31m (104ms)[0m
2025-04-11T19:23:46.5478378Z   [32m  [32mâœ”[39m[0m[90m destroy connection and remove it permanently[0m
2025-04-11T19:23:46.5566103Z   [32m  [32mâœ”[39m[0m[90m verify that attempt to re-open destroyed connection throws error, via promise[0m
2025-04-11T19:23:46.5639935Z   [32m  [32mâœ”[39m[0m[90m verify that attempt to re-open destroyed connection throws error, via callback[0m
2025-04-11T19:23:46.6713154Z   [32m  [32mâœ”[39m[0m[90m force close with connection created after close (gh-5664)[0m[31m (102ms)[0m
2025-04-11T19:23:46.6876767Z   [32m  [32mâœ”[39m[0m[90m bufferCommands (gh-5720)[0m
2025-04-11T19:23:46.6938068Z   [32m  [32mâœ”[39m[0m[90m dbName option (gh-6106)[0m
2025-04-11T19:23:46.7000481Z   [32m  [32mâœ”[39m[0m[90m uses default database in uri if options.dbName is not provided[0m
2025-04-11T19:23:46.7116323Z   [32m  [32mâœ”[39m[0m[90m startSession() (gh-6653)[0m
2025-04-11T19:23:46.7316452Z   [32m  [32mâœ”[39m[0m[90m deleteModel()[0m
2025-04-11T19:23:46.8389829Z   [32m  [32mâœ”[39m[0m[90m throws a MongooseServerSelectionError on server selection timeout (gh-8451)[0m[31m (103ms)[0m
2025-04-11T19:23:46.9460851Z   [32m  [32mâœ”[39m[0m[90m avoids unhandled error on createConnection() if error handler registered (gh-14377)[0m[31m (102ms)[0m
2025-04-11T19:23:46.9506933Z   [36m  - `watch()` on a whole collection (gh-8425)[0m
2025-04-11T19:23:46.9596579Z   [32m  [32mâœ”[39m[0m[90m useDB inherits config from default connection (gh-8267)[0m
2025-04-11T19:23:46.9756139Z   [32m  [32mâœ”[39m[0m[90m allows setting client on a disconnected connection (gh-9164)[0m
2025-04-11T19:23:46.9817488Z   [32m  [32mâœ”[39m[0m[90m connection.asPromise() resolves to a connection instance (gh-9496)[0m
2025-04-11T19:23:46.9875431Z   [32m  [32mâœ”[39m[0m[90m allows overwriting models (gh-9406)[0m
2025-04-11T19:23:46.9932147Z   [32m  [32mâœ”[39m[0m[90m allows setting `overwriteModels` globally (gh-9406)[0m
2025-04-11T19:23:46.9976771Z   [32m  [32mâœ”[39m[0m[90m Connection id should be scoped per Mongoose Instance (gh-10025)[0m
2025-04-11T19:23:47.0030851Z   [32m  [32mâœ”[39m[0m[90m model() works with 1 argument and overwriteModels set to true (gh-12359)[0m
2025-04-11T19:23:47.0128269Z   [31m  1) creates collection if creating model while connection is disconnected with bufferCommands=false[0m
2025-04-11T19:23:47.0173515Z   [32m  [32mâœ”[39m[0m[90m should create connections with unique IDs also if one has been destroyed (gh-12966)[0m
2025-04-11T19:23:47.0217872Z   [32m  [32mâœ”[39m[0m[90m should not create default connection with createInitialConnection = false (gh-12965)[0m
2025-04-11T19:23:47.0298293Z   [32m  [32mâœ”[39m[0m[90m with autoCreate = false after schema create (gh-12940)[0m
2025-04-11T19:23:47.0335644Z   [32m  [32mâœ”[39m[0m[90m does not wait for buffering if autoCreate: false (gh-15241)[0m
2025-04-11T19:23:47.0380490Z   [32m  [32mâœ”[39m[0m[90m should not create default connection with createInitialConnection = false (gh-12965)[0m
2025-04-11T19:23:47.0424498Z   [36m  - should demonstrate the withSession() function (gh-14330)[0m
2025-04-11T19:23:47.0511064Z   [32m  [32mâœ”[39m[0m[90m listDatabases() should return a list of database objects with a name property (gh-9048)[0m
2025-04-11T19:23:47.0675450Z   [36m  - connection bulkWrite() ordered (gh-15028)[0m
2025-04-11T19:23:47.0814107Z   [36m  - connection bulkWrite() unordered (gh-15028)[0m
2025-04-11T19:23:47.1935607Z   [32m  [32mâœ”[39m[0m[90m buffers connection helpers[0m[31m (108ms)[0m
2025-04-11T19:23:47.2987745Z   [32m  [32mâœ”[39m[0m[90m connection helpers buffering times out[0m[31m (101ms)[0m
2025-04-11T19:23:47.3460904Z   [32m  [32mâœ”[39m[0m[90m supports db-level aggregate on connection (gh-15118)[0m[33m (42ms)[0m
2025-04-11T19:23:47.3482216Z [0m    openUri (gh-5304)[0m
2025-04-11T19:23:47.3605635Z     [32m  [32mâœ”[39m[0m[90m with mongoose.createConnection()[0m
2025-04-11T19:23:47.3702708Z     [32m  [32mâœ”[39m[0m[90m with autoIndex (gh-5423)[0m
2025-04-11T19:23:47.3912577Z     [32m  [32mâœ”[39m[0m[90m with autoCreate (gh-6489)[0m
2025-04-11T19:23:47.4041201Z     [32m  [32mâœ”[39m[0m[90m with autoCreate = false (gh-8814)[0m
2025-04-11T19:23:47.4236219Z     [32m  [32mâœ”[39m[0m[90m autoCreate when collection already exists does not fail (gh-7122)[0m
2025-04-11T19:23:47.4303523Z     [32m  [32mâœ”[39m[0m[90m throws helpful error with undefined uri (gh-6763)[0m
2025-04-11T19:23:47.4416041Z     [32m  [32mâœ”[39m[0m[90m resolving with q (gh-5714)[0m
2025-04-11T19:23:47.4567713Z     [32m  [32mâœ”[39m[0m[90m connection plugins (gh-7378)[0m
2025-04-11T19:23:47.4611758Z [0m    helpers[0m
2025-04-11T19:23:47.4684362Z     [32m  [32mâœ”[39m[0m[90m dropDatabase()[0m
2025-04-11T19:23:47.4818893Z     [32m  [32mâœ”[39m[0m[90m dropCollection()[0m
2025-04-11T19:23:47.5001742Z     [32m  [32mâœ”[39m[0m[90m createCollection()[0m
2025-04-11T19:23:47.5180465Z     [32m  [32mâœ”[39m[0m[90m listCollections()[0m
2025-04-11T19:23:47.5251422Z [0m    events[0m
2025-04-11T19:23:47.5405701Z     [32m  [32mâœ”[39m[0m[90m operation-start[0m
2025-04-11T19:23:47.5481147Z     [32m  [32mâœ”[39m[0m[90m operation-end[0m
2025-04-11T19:23:47.5559947Z     [32m  [32mâœ”[39m[0m[90m commandStarted, commandFailed, commandSucceeded (gh-14611)[0m
2025-04-11T19:23:47.5631969Z [0m    errors[0m
2025-04-11T19:23:47.5677664Z     [32m  [32mâœ”[39m[0m[90m .catch() means error does not get thrown (gh-5229)[0m
2025-04-11T19:23:47.5756138Z     [32m  [32mâœ”[39m[0m[90m promise is rejected even if there is an error event listener (gh-7850)[0m
2025-04-11T19:23:47.5813573Z     [32m  [32mâœ”[39m[0m[90m readyState is disconnected if initial connection fails (gh-6244)[0m
2025-04-11T19:23:47.5856600Z [0m    .model()[0m
2025-04-11T19:23:47.5915017Z     [32m  [32mâœ”[39m[0m[90m allows passing a schema[0m
2025-04-11T19:23:47.5985931Z     [32m  [32mâœ”[39m[0m[90m should properly assign the db[0m
2025-04-11T19:23:47.6057058Z     [32m  [32mâœ”[39m[0m[90m prevents overwriting pre-existing models[0m
2025-04-11T19:23:47.6127524Z     [32m  [32mâœ”[39m[0m[90m allows passing identical name + schema args[0m
2025-04-11T19:23:47.6188484Z     [32m  [32mâœ”[39m[0m[90m throws on unknown model name[0m
2025-04-11T19:23:47.6221191Z [0m      passing collection name[0m
2025-04-11T19:23:47.6232376Z [0m        when model name already exists[0m
2025-04-11T19:23:47.6308011Z         [32m  [32mâœ”[39m[0m[90m returns a new uncached model[0m
2025-04-11T19:23:47.6377733Z [0m      passing object literal schemas[0m
2025-04-11T19:23:47.6565577Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:23:47.6659602Z [0m    modelNames()[0m
2025-04-11T19:23:47.6721846Z     [32m  [32mâœ”[39m[0m[90m returns names of all models registered on it[0m
2025-04-11T19:23:47.6765143Z [0m    connection pool sharing: [0m
2025-04-11T19:23:47.6854366Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:23:47.7118997Z     [32m  [32mâœ”[39m[0m[90m saves correctly[0m
2025-04-11T19:23:47.7196814Z     [32m  [32mâœ”[39m[0m[90m emits connecting events on both[0m
2025-04-11T19:23:47.7273785Z     [32m  [32mâœ”[39m[0m[90m emits connected events on both[0m
2025-04-11T19:23:47.7351044Z     [32m  [32mâœ”[39m[0m[90m emits open events on both[0m
2025-04-11T19:23:47.7434060Z     [32m  [32mâœ”[39m[0m[90m emits disconnecting events on both, closing initial db[0m
2025-04-11T19:23:47.7533108Z     [32m  [32mâœ”[39m[0m[90m emits disconnecting events on both, closing secondary db[0m
2025-04-11T19:23:47.7621491Z     [32m  [32mâœ”[39m[0m[90m emits disconnected events on both, closing initial db[0m
2025-04-11T19:23:47.7717182Z     [32m  [32mâœ”[39m[0m[90m emits disconnected events on both, closing secondary db[0m
2025-04-11T19:23:47.7823956Z     [32m  [32mâœ”[39m[0m[90m closes correctly for all dbs, closing initial db[0m
2025-04-11T19:23:47.7948105Z     [32m  [32mâœ”[39m[0m[90m handles re-opening base connection (gh-11240)[0m
2025-04-11T19:23:47.8043390Z     [32m  [32mâœ”[39m[0m[90m closes correctly for all dbs, closing secondary db[0m
2025-04-11T19:23:47.8139471Z     [32m  [32mâœ”[39m[0m[90m cache connections to the same db[0m
2025-04-11T19:23:47.8298603Z     [32m  [32mâœ”[39m[0m[90m supports removing db (gh-11821)[0m
2025-04-11T19:23:47.8342289Z [0m    shouldAuthenticate()[0m
2025-04-11T19:23:47.8354924Z [0m      when using standard authentication[0m
2025-04-11T19:23:47.8365876Z [0m        when username and password are undefined[0m
2025-04-11T19:23:47.8461556Z         [32m  [32mâœ”[39m[0m[90m should return false[0m
2025-04-11T19:23:47.8526916Z [0m        when username and password are empty strings[0m
2025-04-11T19:23:47.8622953Z         [32m  [32mâœ”[39m[0m[90m should return false[0m
2025-04-11T19:23:47.8687901Z [0m        when both username and password are defined[0m
2025-04-11T19:23:47.8824105Z         [32m  [32mâœ”[39m[0m[90m should return true[0m
2025-04-11T19:23:47.8890954Z [0m      when using MONGODB-X509 authentication[0m
2025-04-11T19:23:47.8901806Z [0m        when username and password are undefined[0m
2025-04-11T19:23:47.8997799Z         [32m  [32mâœ”[39m[0m[90m should return false[0m
2025-04-11T19:23:47.9062656Z [0m        when only username is defined[0m
2025-04-11T19:23:47.9166995Z         [32m  [32mâœ”[39m[0m[90m should return false[0m
2025-04-11T19:23:47.9233881Z [0m        when both username and password are defined[0m
2025-04-11T19:23:47.9345905Z         [32m  [32mâœ”[39m[0m[90m should return false[0m
2025-04-11T19:23:47.9433506Z [0m    passing a function into createConnection[0m
2025-04-11T19:23:47.9587350Z     [32m  [32mâœ”[39m[0m[90m should store the name of the function (gh-6517)[0m
2025-04-11T19:23:47.9631335Z [0m    when connecting with a secondary read preference(gh-9374)[0m
2025-04-11T19:23:47.9642463Z [0m      mongoose.connect[0m
2025-04-11T19:23:47.9745514Z       [32m  [32mâœ”[39m[0m[90m forces autoIndex & autoCreate to be false if read preference is secondary or secondaryPreferred[0m
2025-04-11T19:23:47.9835296Z       [32m  [32mâœ”[39m[0m[90m throws if options try to set autoIndex to true[0m
2025-04-11T19:23:47.9924186Z       [32m  [32mâœ”[39m[0m[90m throws if options.config.autoIndex is true, even if options.autoIndex is false[0m
2025-04-11T19:23:47.9978036Z [0m      mongoose.createConnection[0m
2025-04-11T19:23:48.0099850Z       [32m  [32mâœ”[39m[0m[90m forces autoIndex & autoCreate to be false if read preference is secondary or secondaryPreferred (gh-9374)[0m
2025-04-11T19:23:48.0216246Z       [32m  [32mâœ”[39m[0m[90m keeps autoIndex & autoCreate as true by default if read preference is primaryPreferred (gh-9374)[0m
2025-04-11T19:23:48.0304946Z       [32m  [32mâœ”[39m[0m[90m throws if options try to set autoIndex to true[0m
2025-04-11T19:23:48.0394161Z       [32m  [32mâœ”[39m[0m[90m throws if options.config.autoIndex is true, even if options.autoIndex is false[0m
2025-04-11T19:23:48.0458583Z [0m    Automatic init[0m
2025-04-11T19:23:48.0783264Z     [32m  [32mâœ”[39m[0m[90m re-runs init() if connecting after disconnecting (gh-12047)[0m
2025-04-11T19:23:48.1041432Z     [32m  [32mâœ”[39m[0m[90m re-runs init() if running setClient() after disconnecting (gh-12047)[0m
2025-04-11T19:23:48.1086982Z [0m    Connection#syncIndexes() (gh-10893) (gh-11039)[0m
2025-04-11T19:23:48.1394916Z     [32m  [32mâœ”[39m[0m[90m Allows a syncIndexes option with connection mongoose.connection.syncIndexes (gh-10893)[0m
2025-04-11T19:23:48.1733633Z     [32m  [32mâœ”[39m[0m[90m does not sync indexes automatically when `autoIndex: true` (gh-11039)[0m
2025-04-11T19:23:48.2403921Z     [32m  [32mâœ”[39m[0m[90m stops as soon as one model fails with `continueOnError: false` (gh-11039)[0m[33m (53ms)[0m
2025-04-11T19:23:48.2717237Z     [32m  [32mâœ”[39m[0m[90m error includes a property with all the errors when `continueOnError: false`[0m
2025-04-11T19:23:48.3014116Z     [32m  [32mâœ”[39m[0m[90m `continueOnError` is false by default[0m
2025-04-11T19:23:48.3480323Z     [32m  [32mâœ”[39m[0m[90m when `continueOnError: true` it will continue to sync indexes even if one model fails[0m[33m (39ms)[0m
2025-04-11T19:23:48.3912375Z     [32m  [32mâœ”[39m[0m[90m when `continueOnError: true` it will return a map of modelNames and their sync results/errors[0m
2025-04-11T19:23:48.4415482Z     [32m  [32mâœ”[39m[0m[90m mongoose.syncIndexes(...) accepts `continueOnError`[0m[33m (42ms)[0m
2025-04-11T19:23:48.4496200Z [0m    createCollections()[0m
2025-04-11T19:23:48.4771985Z     [32m  [32mâœ”[39m[0m[90m should create collections for all models on the connection with the createCollections() function (gh-13300)[0m
2025-04-11T19:23:48.4814835Z [0m    processConnectionOptions[0m
2025-04-11T19:23:48.4879036Z     [32m  [32mâœ”[39m[0m[90m should not throw an error when attempting to mutate unmutable options object gh-13335[0m
2025-04-11T19:23:48.4946494Z 
2025-04-11T19:23:48.4946919Z [0m  model: populate:[0m
2025-04-11T19:23:48.4958243Z [0m    setting populated paths (gh-570)[0m
2025-04-11T19:23:48.4969200Z [0m      should not cast to _id of type ObjectId[0m
2025-04-11T19:23:48.5427089Z       [32m  [32mâœ”[39m[0m[90m if a document[0m
2025-04-11T19:23:48.5629931Z       [32m  [32mâœ”[39m[0m[90m if an object[0m
2025-04-11T19:23:48.5698152Z [0m      should not cast to _id of type String[0m
2025-04-11T19:23:48.5944799Z       [32m  [32mâœ”[39m[0m[90m if a document[0m
2025-04-11T19:23:48.6111704Z       [32m  [32mâœ”[39m[0m[90m if an object[0m
2025-04-11T19:23:48.6187573Z [0m      should not cast to _id of type Number[0m
2025-04-11T19:23:48.6452106Z       [32m  [32mâœ”[39m[0m[90m if a document[0m
2025-04-11T19:23:48.6623504Z       [32m  [32mâœ”[39m[0m[90m if an object[0m
2025-04-11T19:23:48.6710852Z [0m      should not cast to _id of type Buffer[0m
2025-04-11T19:23:48.7310353Z       [32m  [32mâœ”[39m[0m[90m if a document[0m[33m (43ms)[0m
2025-04-11T19:23:48.7501154Z       [32m  [32mâœ”[39m[0m[90m if an object[0m
2025-04-11T19:23:48.7610372Z 
2025-04-11T19:23:48.7610851Z [0m  model translate aliases[0m
2025-04-11T19:23:48.7660561Z   [32m  [32mâœ”[39m[0m[90m should translate correctly[0m
2025-04-11T19:23:48.7681919Z 
2025-04-11T19:23:48.7682618Z [0m  cast: [0m
2025-04-11T19:23:48.7719574Z   [32m  [32mâœ”[39m[0m[90m uses nested schema strict by default (gh-11291)[0m
2025-04-11T19:23:48.7767078Z   [32m  [32mâœ”[39m[0m[90m casts $comment (gh-14576)[0m
2025-04-11T19:23:48.7813497Z   [32m  [32mâœ”[39m[0m[90m avoids setting stripped out nested schema values to undefined (gh-11291)[0m
2025-04-11T19:23:48.7858043Z   [32m  [32mâœ”[39m[0m[90m uses schema-level strictQuery over schema-level strict (gh-12508)[0m
2025-04-11T19:23:48.7907758Z   [32m  [32mâœ”[39m[0m[90m handles $in with discriminators if $in has exactly 1 element (gh-13492)[0m
2025-04-11T19:23:48.7952513Z   [32m  [32mâœ”[39m[0m[90m treats unknown operators as passthrough (gh-15170)[0m
2025-04-11T19:23:48.7974153Z [0m    when casting an array[0m
2025-04-11T19:23:48.8019179Z     [32m  [32mâœ”[39m[0m[90m casts array with ObjectIds to $in query[0m
2025-04-11T19:23:48.8086215Z     [32m  [32mâœ”[39m[0m[90m casts array with ObjectIds to $in query when values are strings[0m
2025-04-11T19:23:48.8155266Z     [32m  [32mâœ”[39m[0m[90m throws when ObjectIds not valid[0m
2025-04-11T19:23:48.8221367Z     [32m  [32mâœ”[39m[0m[90m casts array with Strings to $in query[0m
2025-04-11T19:23:48.8289081Z     [32m  [32mâœ”[39m[0m[90m casts array with Strings when necessary[0m
2025-04-11T19:23:48.8355188Z     [32m  [32mâœ”[39m[0m[90m casts array with Numbers to $in query[0m
2025-04-11T19:23:48.8423132Z     [32m  [32mâœ”[39m[0m[90m casts $in and $nin with empty array (gh-5913) (gh-7806)[0m
2025-04-11T19:23:48.8489401Z     [32m  [32mâœ”[39m[0m[90m casts array with Numbers to $in query when values are strings[0m
2025-04-11T19:23:48.8561336Z     [32m  [32mâœ”[39m[0m[90m throws when Numbers are not valid[0m
2025-04-11T19:23:48.8604318Z [0m    $all[0m
2025-04-11T19:23:48.8651922Z     [32m  [32mâœ”[39m[0m[90m casts $elemMatch (gh-11314)[0m
2025-04-11T19:23:48.8695290Z [0m    bitwise query operators: [0m
2025-04-11T19:23:48.8740741Z     [32m  [32mâœ”[39m[0m[90m with a number[0m
2025-04-11T19:23:48.8797519Z     [32m  [32mâœ”[39m[0m[90m with an array[0m
2025-04-11T19:23:48.8863851Z     [32m  [32mâœ”[39m[0m[90m with a buffer[0m
2025-04-11T19:23:48.8930471Z     [32m  [32mâœ”[39m[0m[90m with int32 (gh-15170)[0m
2025-04-11T19:23:48.8998041Z     [32m  [32mâœ”[39m[0m[90m throws when invalid[0m
2025-04-11T19:23:48.9041145Z [0m    $expr[0m
2025-04-11T19:23:48.9086509Z     [32m  [32mâœ”[39m[0m[90m does not get filtered out (gh-10662)[0m
2025-04-11T19:23:48.9139791Z 
2025-04-11T19:23:48.9141694Z [0m  model: findOneAndUpdate:[0m
2025-04-11T19:23:48.9273707Z   [32m  [32mâœ”[39m[0m[90m returns the edited document[0m
2025-04-11T19:23:48.9494685Z   [32m  [32mâœ”[39m[0m[90m returns the original document[0m
2025-04-11T19:23:48.9698741Z   [32m  [32mâœ”[39m[0m[90m allows upserting[0m
2025-04-11T19:23:48.9782129Z   [32m  [32mâœ”[39m[0m[90m options/conditions/doc are merged when no callback is passed[0m
2025-04-11T19:23:49.0067370Z   [32m  [32mâœ”[39m[0m[90m updates numbers atomically[0m
2025-04-11T19:23:49.0338685Z   [32m  [32mâœ”[39m[0m[90m honors strict schemas[0m
2025-04-11T19:23:49.0579926Z   [32m  [32mâœ”[39m[0m[90m returns errors with strict:throw schemas[0m
2025-04-11T19:23:49.0796118Z   [32m  [32mâœ”[39m[0m[90m returns the original document[0m
2025-04-11T19:23:49.0876648Z   [32m  [32mâœ”[39m[0m[90m options/conditions/doc are merged when no callback is passed[0m
2025-04-11T19:23:49.0992789Z   [32m  [32mâœ”[39m[0m[90m supports v3 select string syntax[0m
2025-04-11T19:23:49.1106994Z   [32m  [32mâœ”[39m[0m[90m supports v3 select object syntax[0m
2025-04-11T19:23:49.1424540Z   [32m  [32mâœ”[39m[0m[90m supports v3 sort string syntax[0m
2025-04-11T19:23:49.1523109Z   [32m  [32mâœ”[39m[0m[90m supports v3 sort object syntax[0m
2025-04-11T19:23:49.1805009Z   [32m  [32mâœ”[39m[0m[90m supports $elemMatch with $in (gh-1091 gh-1100)[0m
2025-04-11T19:23:49.2110572Z   [32m  [32mâœ”[39m[0m[90m supports population (gh-1395)[0m
2025-04-11T19:23:49.2354238Z   [32m  [32mâœ”[39m[0m[90m returns null when doing an upsert & new=false gh-1533[0m
2025-04-11T19:23:49.2624185Z   [32m  [32mâœ”[39m[0m[90m return hydrated document (gh-7734 gh-7735)[0m
2025-04-11T19:23:49.2869879Z   [32m  [32mâœ”[39m[0m[90m return includeResultMetadata when doing an upsert & new=false gh-7770[0m
2025-04-11T19:23:49.3111752Z   [32m  [32mâœ”[39m[0m[90m allows properties to be set to null gh-1643[0m
2025-04-11T19:23:49.3452951Z   [32m  [32mâœ”[39m[0m[90m can do various deep equal checks (lodash.isEqual, lodash.isEqualWith, assert.deepEqual, utils.deepEqual) on object id after findOneAndUpdate (gh-2070)[0m
2025-04-11T19:23:49.3705715Z   [32m  [32mâœ”[39m[0m[90m adds __v on upsert (gh-2122) (gh-4505)[0m
2025-04-11T19:23:49.3947341Z   [32m  [32mâœ”[39m[0m[90m doesn't add __v on upsert if `$set` (gh-4505) (gh-5973)[0m
2025-04-11T19:23:49.4176184Z   [32m  [32mâœ”[39m[0m[90m doesn't add __v on upsert if `$set` with `update()` (gh-5973)[0m
2025-04-11T19:23:49.4428923Z   [32m  [32mâœ”[39m[0m[90m works with nested schemas and $pull+$or (gh-1932)[0m
2025-04-11T19:23:49.4520875Z   [32m  [32mâœ”[39m[0m[90m accepts undefined[0m
2025-04-11T19:23:49.4689479Z   [32m  [32mâœ”[39m[0m[90m cast errors for empty objects as object ids (gh-2732)[0m
2025-04-11T19:23:49.4865179Z   [32m  [32mâœ”[39m[0m[90m cast errors for empty objects as object ids (gh-2732)[0m
2025-04-11T19:23:49.5186475Z   [32m  [32mâœ”[39m[0m[90m with versionKey in top-level and a `$` key (gh-7003)[0m
2025-04-11T19:23:49.5430355Z   [32m  [32mâœ”[39m[0m[90m empty update with timestamps (gh-7041)[0m
2025-04-11T19:23:49.5671399Z   [32m  [32mâœ”[39m[0m[90m skipping updatedAt and createdAt (gh-3934)[0m
2025-04-11T19:23:49.5897054Z   [32m  [32mâœ”[39m[0m[90m runs lowercase on $addToSet, $push, etc (gh-4185)[0m
2025-04-11T19:23:49.6123408Z   [32m  [32mâœ”[39m[0m[90m returnOriginal (gh-7846)[0m
2025-04-11T19:23:49.6341595Z   [32m  [32mâœ”[39m[0m[90m updating embedded discriminator with discriminator key in update (gh-8378)[0m
2025-04-11T19:23:49.6575140Z   [32m  [32mâœ”[39m[0m[90m setDefaultsOnInsert with doubly nested subdocs (gh-8392)[0m
2025-04-11T19:23:49.6800940Z   [32m  [32mâœ”[39m[0m[90m calls setters on mixed type (gh-8444)[0m
2025-04-11T19:23:49.7040414Z   [32m  [32mâœ”[39m[0m[90m returnDocument should work (gh-10321)[0m
2025-04-11T19:23:49.7274574Z   [32m  [32mâœ”[39m[0m[90m supports overwriting nested map paths (gh-10485)[0m
2025-04-11T19:23:49.7528539Z   [32m  [32mâœ”[39m[0m[90m supports $set on elements of map of subdocuments (gh-10720)[0m
2025-04-11T19:23:49.7636334Z   [32m  [32mâœ”[39m[0m[90m handles validating deeply nested subdocuments (gh-11394)[0m
2025-04-11T19:23:49.7929582Z   [32m  [32mâœ”[39m[0m[90m casts array filters (gh-13219)[0m
2025-04-11T19:23:49.8022681Z   [32m  [32mâœ”[39m[0m[90m throws error if filter is not an object (gh-13264)[0m
2025-04-11T19:23:49.8359460Z   [32m  [32mâœ”[39m[0m[90m handles plus path in projection (gh-13413)[0m
2025-04-11T19:23:49.8580422Z   [32m  [32mâœ”[39m[0m[90m allows setting paths with dots in non-strict paths (gh-13434) (gh-10200)[0m
2025-04-11T19:23:49.8817845Z   [32m  [32mâœ”[39m[0m[90m supports the `includeResultMetadata` option (gh-13539)[0m
2025-04-11T19:23:49.9043419Z   [32m  [32mâœ”[39m[0m[90m successfully runs findOneAndUpdate with no update and versionKey set to false (gh-13783)[0m
2025-04-11T19:23:49.9264121Z   [32m  [32mâœ”[39m[0m[90m skips adding defaults to filter when passing empty update (gh-13962)[0m
2025-04-11T19:23:49.9360039Z   [32m  [32mâœ”[39m[0m[90m sets CastError path to full path (gh-14114)[0m
2025-04-11T19:23:49.9475787Z [0m    will correctly[0m
2025-04-11T19:23:49.9726408Z     [32m  [32mâœ”[39m[0m[90m update subdocument in array item[0m
2025-04-11T19:23:49.9794903Z [0m    middleware[0m
2025-04-11T19:23:49.9858457Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:23:50.0012322Z     [32m  [32mâœ”[39m[0m[90m works with exec()[0m
2025-04-11T19:23:50.0120515Z [0m    validators (gh-860)[0m
2025-04-11T19:23:50.0335711Z     [32m  [32mâœ”[39m[0m[90m applies defaults on upsert[0m
2025-04-11T19:23:50.0566723Z     [32m  [32mâœ”[39m[0m[90m doesnt set default on upsert if query sets it[0m
2025-04-11T19:23:50.0798397Z     [32m  [32mâœ”[39m[0m[90m properly sets default on upsert if query wont set it[0m
2025-04-11T19:23:50.1034007Z     [32m  [32mâœ”[39m[0m[90m skips setting defaults within maps (gh-7909)[0m
2025-04-11T19:23:50.1137881Z     [32m  [32mâœ”[39m[0m[90m runs validators if theyre set[0m
2025-04-11T19:23:50.1292786Z     [32m  [32mâœ”[39m[0m[90m validators handle $unset and $setOnInsert[0m
2025-04-11T19:23:50.1459288Z     [32m  [32mâœ”[39m[0m[90m min/max, enum, and regex built-in validators work[0m
2025-04-11T19:23:50.1596610Z     [32m  [32mâœ”[39m[0m[90m multiple validation errors[0m
2025-04-11T19:23:50.1857814Z     [32m  [32mâœ”[39m[0m[90m validators ignore $inc[0m
2025-04-11T19:23:50.2084340Z     [32m  [32mâœ”[39m[0m[90m validators ignore paths underneath mixed (gh-8659)[0m
2025-04-11T19:23:50.2334127Z     [32m  [32mâœ”[39m[0m[90m should work with arrays (gh-3035)[0m
2025-04-11T19:23:50.2586850Z     [32m  [32mâœ”[39m[0m[90m should allow null values in query (gh-3135)[0m
2025-04-11T19:23:50.2808954Z     [32m  [32mâœ”[39m[0m[90m should work with array documents (gh-3034)[0m
2025-04-11T19:23:50.3041212Z     [32m  [32mâœ”[39m[0m[90m handles setting array (gh-3107)[0m
2025-04-11T19:23:50.3304314Z     [32m  [32mâœ”[39m[0m[90m handles nested cast errors (gh-3468)[0m
2025-04-11T19:23:50.3426751Z     [32m  [32mâœ”[39m[0m[90m cast errors with nested schemas (gh-3580)[0m
2025-04-11T19:23:50.3701424Z     [32m  [32mâœ”[39m[0m[90m pull with nested schemas (gh-3616)[0m
2025-04-11T19:23:50.3824790Z     [32m  [32mâœ”[39m[0m[90m setting nested schema (gh-3889)[0m
2025-04-11T19:23:50.3919844Z [0m    bug fixes[0m
2025-04-11T19:23:50.4071608Z     [32m  [32mâœ”[39m[0m[90m passes raw result if includeResultMetadata specified (gh-4925)[0m
2025-04-11T19:23:50.4347473Z     [32m  [32mâœ”[39m[0m[90m handles setting single embedded docs to null (gh-4281)[0m
2025-04-11T19:23:50.4469768Z     [32m  [32mâœ”[39m[0m[90m custom validator on mixed field (gh-4305)[0m
2025-04-11T19:23:50.4619391Z     [32m  [32mâœ”[39m[0m[90m single nested doc cast errors (gh-3602)[0m
2025-04-11T19:23:50.4891442Z     [32m  [32mâœ”[39m[0m[90m projection option as alias for fields (gh-4315)[0m
2025-04-11T19:23:50.5005491Z     [32m  [32mâœ”[39m[0m[90m handles upserting a non-existing field (gh-4757)[0m
2025-04-11T19:23:50.5255880Z     [32m  [32mâœ”[39m[0m[90m strict option (gh-5108)[0m
2025-04-11T19:23:50.5481693Z     [32m  [32mâœ”[39m[0m[90m correct key order (gh-6484)[0m
2025-04-11T19:23:50.5721262Z     [32m  [32mâœ”[39m[0m[90m should not apply schema transforms (gh-4574)[0m
2025-04-11T19:23:50.6227251Z     [32m  [32mâœ”[39m[0m[90m update using $ (gh-5628)[0m
2025-04-11T19:23:50.6466742Z     [32m  [32mâœ”[39m[0m[90m projection with $elemMatch (gh-5661)[0m
2025-04-11T19:23:50.6589247Z     [32m  [32mâœ”[39m[0m[90m multi cast error (gh-5609)[0m
2025-04-11T19:23:50.6742054Z     [32m  [32mâœ”[39m[0m[90m update validators with pushing null (gh-5710)[0m
2025-04-11T19:23:50.6879429Z     [32m  [32mâœ”[39m[0m[90m only calls setters once (gh-6203)[0m
2025-04-11T19:23:50.7045713Z     [32m  [32mâœ”[39m[0m[90m only calls setters once (gh-6203)[0m
2025-04-11T19:23:50.7306498Z     [32m  [32mâœ”[39m[0m[90m update validators with pull + $in (gh-6240)[0m
2025-04-11T19:23:50.7532438Z     [32m  [32mâœ”[39m[0m[90m avoids edge case with middleware cloning buffers (gh-5702)[0m
2025-04-11T19:23:50.7764934Z     [32m  [32mâœ”[39m[0m[90m setting subtype when saving (gh-5551)[0m
2025-04-11T19:23:50.7994991Z     [32m  [32mâœ”[39m[0m[90m properly handles casting nested objects in update (gh-4724)[0m
2025-04-11T19:23:50.8119406Z     [32m  [32mâœ”[39m[0m[90m doesnt do double validation on document arrays during updates (gh-4440)[0m
2025-04-11T19:23:50.8364804Z     [32m  [32mâœ”[39m[0m[90m runs setters on array elements (gh-7679)[0m
2025-04-11T19:23:50.8485222Z     [32m  [32mâœ”[39m[0m[90m avoid calling $pull in doc array (gh-6971) (gh-6889)[0m
2025-04-11T19:23:50.8619310Z     [32m  [32mâœ”[39m[0m[90m $pull with `required` and runValidators (gh-6972)[0m
2025-04-11T19:23:50.8759089Z 
2025-04-11T19:23:50.8760008Z [0m  types.documentarray[0m
2025-04-11T19:23:50.8797172Z   [32m  [32mâœ”[39m[0m[90m behaves and quacks like an array[0m
2025-04-11T19:23:50.8874293Z   [32m  [32mâœ”[39m[0m[90m #id[0m
2025-04-11T19:23:50.9085883Z   [32m  [32mâœ”[39m[0m[90m #push should work on ArraySubdocument more than 2 levels deep[0m
2025-04-11T19:23:50.9295062Z   [32m  [32mâœ”[39m[0m[90m cleans modified subpaths on splice() (gh-7249)[0m
2025-04-11T19:23:50.9370399Z   [32m  [32mâœ”[39m[0m[90m modifies ownerDocument() on set (gh-8479)[0m
2025-04-11T19:23:50.9472258Z   [32m  [32mâœ”[39m[0m[90m modifying subdoc path after `slice()` (gh-8356)[0m
2025-04-11T19:23:50.9680354Z   [32m  [32mâœ”[39m[0m[90m supports setting to newly constructed array with no path or parent (gh-8108)[0m
2025-04-11T19:23:50.9758100Z   [32m  [32mâœ”[39m[0m[90m keeps atomics after setting (gh-10272)[0m
2025-04-11T19:23:50.9869858Z   [32m  [32mâœ”[39m[0m[90m handles `DocumentArray#create()` with populated paths (gh-10749)[0m
2025-04-11T19:23:50.9934933Z   [32m  [32mâœ”[39m[0m[90m applies _id default (gh-12264)[0m
2025-04-11T19:23:51.0041082Z   [32m  [32mâœ”[39m[0m[90m gets correct path when underneath map (gh-12997)[0m
2025-04-11T19:23:51.0150795Z   [32m  [32mâœ”[39m[0m[90m bubbles up validation errors from doubly nested doc arrays (gh-14101)[0m
2025-04-11T19:23:51.0217919Z [0m    inspect[0m
2025-04-11T19:23:51.0262532Z     [32m  [32mâœ”[39m[0m[90m works with bad data[0m
2025-04-11T19:23:51.0324157Z [0m    toObject[0m
2025-04-11T19:23:51.0368718Z     [32m  [32mâœ”[39m[0m[90m works with bad data[0m
2025-04-11T19:23:51.0458462Z     [32m  [32mâœ”[39m[0m[90m passes options to its documents (gh-1415) (gh-4455)[0m
2025-04-11T19:23:51.0549853Z     [32m  [32mâœ”[39m[0m[90m uses the correct transform (gh-1412)[0m
2025-04-11T19:23:51.0687769Z [0m    create()[0m
2025-04-11T19:23:51.0738879Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:23:51.0798675Z [0m    push()[0m
2025-04-11T19:23:51.0982192Z     [32m  [32mâœ”[39m[0m[90m does not re-cast instances of its embedded doc[0m
2025-04-11T19:23:51.1075979Z     [32m  [32mâœ”[39m[0m[90m corrects #ownerDocument() and index if value was created with array.create() (gh-1385)[0m
2025-04-11T19:23:51.1166000Z     [32m  [32mâœ”[39m[0m[90m corrects #ownerDocument() if value was created with array.create() and set() (gh-7504)[0m
2025-04-11T19:23:51.1286629Z     [32m  [32mâœ”[39m[0m[90m reports validation errors with correct index path (gh-7724)[0m
2025-04-11T19:23:51.1343706Z [0m    required (gh-6364)[0m
2025-04-11T19:23:51.1396622Z     [32m  [32mâœ”[39m[0m[90m on top level[0m
2025-04-11T19:23:51.1487677Z     [32m  [32mâœ”[39m[0m[90m in arr[0m
2025-04-11T19:23:51.1544968Z [0m    invalidate()[0m
2025-04-11T19:23:51.1601055Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:23:51.1693559Z     [32m  [32mâœ”[39m[0m[90m handles validation failures[0m
2025-04-11T19:23:51.1908106Z     [32m  [32mâœ”[39m[0m[90m clears listeners on cast error (gh-6723)[0m
2025-04-11T19:23:51.1998625Z     [32m  [32mâœ”[39m[0m[90m slice() copies parent and path (gh-8317)[0m
2025-04-11T19:23:51.2112724Z     [32m  [32mâœ”[39m[0m[90m map() works (gh-8317)[0m
2025-04-11T19:23:51.2200458Z     [32m  [32mâœ”[39m[0m[90m slice() after map() works (gh-8399)[0m
2025-04-11T19:23:51.2314327Z     [32m  [32mâœ”[39m[0m[90m unshift() after map() works (gh-9012)[0m
2025-04-11T19:23:51.2438590Z 
2025-04-11T19:23:51.2439486Z [0m  model: findOneAndReplace:[0m
2025-04-11T19:23:51.2650704Z   [32m  [32mâœ”[39m[0m[90m returns the original document[0m
2025-04-11T19:23:51.2728365Z   [32m  [32mâœ”[39m[0m[90m options/conditions/doc are merged when no callback is passed[0m
2025-04-11T19:23:51.2952984Z   [32m  [32mâœ”[39m[0m[90m returns the original document[0m
2025-04-11T19:23:51.3029602Z   [32m  [32mâœ”[39m[0m[90m options/conditions/doc are merged when no callback is passed[0m
2025-04-11T19:23:51.3138096Z   [32m  [32mâœ”[39m[0m[90m supports v3 select string syntax[0m
2025-04-11T19:23:51.3245364Z   [32m  [32mâœ”[39m[0m[90m supports v3 select object syntax[0m
2025-04-11T19:23:51.3351885Z   [32m  [32mâœ”[39m[0m[90m supports v3 sort string syntax[0m
2025-04-11T19:23:51.3456035Z   [32m  [32mâœ”[39m[0m[90m supports v3 sort object syntax[0m
2025-04-11T19:23:51.3854660Z   [32m  [32mâœ”[39m[0m[90m supports population (gh-1395)[0m
2025-04-11T19:23:51.3949409Z   [32m  [32mâœ”[39m[0m[90m only calls setters once (gh-6203)[0m
2025-04-11T19:23:51.4235309Z   [32m  [32mâœ”[39m[0m[90m works (gh-7654)[0m
2025-04-11T19:23:51.4443186Z   [32m  [32mâœ”[39m[0m[90m schema-level projection (gh-7654)[0m
2025-04-11T19:23:51.4659903Z   [32m  [32mâœ”[39m[0m[90m supports `new` in addition to `returnOriginal` (gh-7846)[0m
2025-04-11T19:23:51.4885138Z   [32m  [32mâœ”[39m[0m[90m orFail() (gh-8030)[0m
2025-04-11T19:23:51.5106915Z   [32m  [32mâœ”[39m[0m[90m skips validation if `runValidators` === false (gh-11559)[0m
2025-04-11T19:23:51.5197468Z   [32m  [32mâœ”[39m[0m[90m respects query-level strict option (gh-13507)[0m
2025-04-11T19:23:51.5347556Z   [32m  [32mâœ”[39m[0m[90m respects schema-level strict option (gh-13507)[0m
2025-04-11T19:23:51.5526084Z   [32m  [32mâœ”[39m[0m[90m does not send overwrite or timestamps option to MongoDB[0m
2025-04-11T19:23:51.5815894Z   [32m  [32mâœ”[39m[0m[90m supports the `includeResultMetadata` option (gh-13539)[0m
2025-04-11T19:23:51.5859386Z [0m    middleware[0m
2025-04-11T19:23:51.6036946Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:23:51.6238044Z     [32m  [32mâœ”[39m[0m[90m works with exec() (gh-439)[0m
2025-04-11T19:23:51.6388743Z 
2025-04-11T19:23:51.6389721Z [0m  QueryCursor[0m
2025-04-11T19:23:51.6597172Z   [32m  [32mâœ”[39m[0m[90m as readable stream[0m
2025-04-11T19:23:51.6818788Z   [32m  [32mâœ”[39m[0m[90m handles non-boolean lean option (gh-7137)[0m
2025-04-11T19:23:51.7186408Z   [32m  [32mâœ”[39m[0m[90m data before close (gh-4998)[0m
2025-04-11T19:23:51.7404616Z   [32m  [32mâœ”[39m[0m[90m pulls schema-level readPreference (gh-8421)[0m
2025-04-11T19:23:51.8833253Z   [32m  [32mâœ”[39m[0m[90m eachAsync() with parallel > numDocs (gh-8422)[0m[31m (120ms)[0m
2025-04-11T19:23:51.9268617Z   [32m  [32mâœ”[39m[0m[90m eachAsync() with sort, parallel, and sync function (gh-8557)[0m
2025-04-11T19:23:51.9695122Z   [32m  [32mâœ”[39m[0m[90m closing query cursor emits `close` event only once (gh-8835)[0m
2025-04-11T19:23:52.0129681Z   [32m  [32mâœ”[39m[0m[90m closing aggregation cursor emits `close` event only once (gh-8835)[0m
2025-04-11T19:23:52.2528874Z   [32m  [32mâœ”[39m[0m[90m closing query cursor emits `close` event only once with stream pause/resume (gh-10876)[0m[31m (214ms)[0m
2025-04-11T19:23:52.4908054Z   [32m  [32mâœ”[39m[0m[90m closing aggregation cursor emits `close` event only once with stream pause/resume (gh-10876)[0m[31m (215ms)[0m
2025-04-11T19:23:52.7289372Z   [32m  [32mâœ”[39m[0m[90m query cursor emit end event (gh-10902)[0m[31m (216ms)[0m
2025-04-11T19:23:52.9667092Z   [32m  [32mâœ”[39m[0m[90m aggregate cursor emit end event (gh-10902)[0m[31m (215ms)[0m
2025-04-11T19:23:53.0570756Z   [32m  [32mâœ”[39m[0m[90m query cursor emit end event before close event (gh-10902)[0m[33m (67ms)[0m
2025-04-11T19:23:53.1444377Z   [32m  [32mâœ”[39m[0m[90m aggregate cursor emit end event before close event (gh-10902)[0m[33m (66ms)[0m
2025-04-11T19:23:53.1852587Z   [32m  [32mâœ”[39m[0m[90m passes document index as the second argument for query cursor (gh-8972)[0m
2025-04-11T19:23:53.2274410Z   [32m  [32mâœ”[39m[0m[90m passes document index as the second argument for aggregation cursor (gh-8972)[0m
2025-04-11T19:23:53.2688607Z   [32m  [32mâœ”[39m[0m[90m post hooks (gh-9435)[0m
2025-04-11T19:23:53.3107535Z   [32m  [32mâœ”[39m[0m[90m reports CastError with noCursorTimeout set (gh-10150)[0m
2025-04-11T19:23:53.3607795Z   [32m  [32mâœ”[39m[0m[90m reports error in pre save hook (gh-10785)[0m
2025-04-11T19:23:53.4076889Z   [32m  [32mâœ”[39m[0m[90m applies selected fields when using discriminators (gh-11130)[0m
2025-04-11T19:23:53.4492136Z   [32m  [32mâœ”[39m[0m[90m should allow middleware to run before applying _optionsForExec() gh-13417[0m
2025-04-11T19:23:53.4900356Z   [32m  [32mâœ”[39m[0m[90m handles skipMiddlewareFunction() (gh-13411)[0m
2025-04-11T19:23:53.5139475Z   [32m  [32mâœ”[39m[0m[90m supports including fields using plus path that have select: false in schema (gh-13773)[0m
2025-04-11T19:23:53.5516417Z   [32m  [32mâœ”[39m[0m[90m throws if calling skipMiddlewareFunction() with non-empty array (gh-13411)[0m
2025-04-11T19:23:53.5918288Z   [32m  [32mâœ”[39m[0m[90m returns the underlying Node driver cursor with getDriverCursor()[0m
2025-04-11T19:23:53.6127680Z   [32m  [32mâœ”[39m[0m[90m handles destroy() (gh-14966)[0m
2025-04-11T19:23:53.6318443Z   [32m  [32mâœ”[39m[0m[90m handles destroy() before cursor is created (gh-14966)[0m
2025-04-11T19:23:53.6354852Z [0m    #next()[0m
2025-04-11T19:23:53.6540350Z     [32m  [32mâœ”[39m[0m[90m with promises[0m
2025-04-11T19:23:53.6777854Z     [32m  [32mâœ”[39m[0m[90m with limit (gh-4266)[0m
2025-04-11T19:23:53.7176711Z     [32m  [32mâœ”[39m[0m[90m with projection[0m
2025-04-11T19:23:53.7416418Z     [32m  [32mâœ”[39m[0m[90m casting ObjectIds with where() (gh-4355)[0m
2025-04-11T19:23:53.7639917Z     [32m  [32mâœ”[39m[0m[90m cast errors (gh-4355)[0m
2025-04-11T19:23:53.7871055Z     [32m  [32mâœ”[39m[0m[90m with pre-find hooks (gh-5096)[0m
2025-04-11T19:23:53.7923481Z [0m      with populate[0m
2025-04-11T19:23:53.8633514Z       [32m  [32mâœ”[39m[0m[90m with populate without specify batchSize[0m
2025-04-11T19:23:53.9373104Z       [32m  [32mâœ”[39m[0m[90m with populate using custom batchSize[0m
2025-04-11T19:23:53.9469721Z [0m    `transform` option[0m
2025-04-11T19:23:53.9662856Z     [32m  [32mâœ”[39m[0m[90m transforms document[0m
2025-04-11T19:23:53.9728085Z [0m    #map[0m
2025-04-11T19:23:53.9925966Z     [32m  [32mâœ”[39m[0m[90m maps documents[0m
2025-04-11T19:23:54.0158972Z     [32m  [32mâœ”[39m[0m[90m with #next[0m
2025-04-11T19:23:54.0224161Z [0m    #eachAsync()[0m
2025-04-11T19:23:54.1450336Z     [32m  [32mâœ”[39m[0m[90m iterates one-by-one, stopping for promises[0m[31m (103ms)[0m
2025-04-11T19:23:54.1701963Z     [32m  [32mâœ”[39m[0m[90m parallelization[0m
2025-04-11T19:23:54.1766678Z [0m    #lean()[0m
2025-04-11T19:23:54.1963088Z     [32m  [32mâœ”[39m[0m[90m lean[0m
2025-04-11T19:23:54.2190991Z     [32m  [32mâœ”[39m[0m[90m lean = false (gh-7197)[0m
2025-04-11T19:23:54.2256477Z [0m    #close()[0m
2025-04-11T19:23:54.2449102Z     [32m  [32mâœ”[39m[0m[90m works (gh-4258)[0m
2025-04-11T19:23:54.2543380Z 
2025-04-11T19:23:54.2543924Z [0m  SchemaUUID[0m
2025-04-11T19:23:54.2739654Z   [32m  [32mâœ”[39m[0m[90m basic functionality should work[0m
2025-04-11T19:23:54.2809544Z   [32m  [32mâœ”[39m[0m[90m should throw error in case of invalid string[0m
2025-04-11T19:23:54.3046156Z   [32m  [32mâœ”[39m[0m[90m should work with $in and $nin and $all[0m
2025-04-11T19:23:54.3274957Z   [32m  [32mâœ”[39m[0m[90m should not convert to string nullish UUIDs (gh-13032)[0m
2025-04-11T19:23:54.3522639Z   [32m  [32mâœ”[39m[0m[90m works with populate (gh-13267)[0m
2025-04-11T19:23:54.3759023Z   [32m  [32mâœ”[39m[0m[90m handles built-in UUID type (gh-13103)[0m
2025-04-11T19:23:54.3992740Z   [32m  [32mâœ”[39m[0m[90m avoids converting maps of uuids to strings (gh-13657)[0m
2025-04-11T19:23:54.4035957Z   [36m  - should work with $bits* operators[0m
2025-04-11T19:23:54.4036615Z   [36m  - should work with $all operator[0m
2025-04-11T19:23:54.4037050Z   [36m  - should work with $lt, $lte, $gt, $gte operators[0m
2025-04-11T19:23:54.4076683Z 
2025-04-11T19:23:54.4077296Z [0m  updateValidators[0m
2025-04-11T19:23:54.4088540Z [0m    validators[0m
2025-04-11T19:23:54.4135714Z     [32m  [32mâœ”[39m[0m[90m flattens paths[0m
2025-04-11T19:23:54.4202406Z     [32m  [32mâœ”[39m[0m[90m doesnt flatten dates (gh-3194)[0m
2025-04-11T19:23:54.4268722Z     [32m  [32mâœ”[39m[0m[90m doesnt flatten empty arrays (gh-3554)[0m
2025-04-11T19:23:54.4338198Z     [32m  [32mâœ”[39m[0m[90m doesnt flatten decimal128 (gh-7561)[0m
2025-04-11T19:23:54.4396179Z     [32m  [32mâœ”[39m[0m[90m handles nested paths correctly (gh-3587)[0m
2025-04-11T19:23:54.4449382Z 
2025-04-11T19:23:54.4451526Z [0m  model: updateOne:[0m
2025-04-11T19:23:54.4692589Z   [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:23:54.4904483Z   [32m  [32mâœ”[39m[0m[90m casts doc arrays[0m
2025-04-11T19:23:54.5109155Z   [32m  [32mâœ”[39m[0m[90m makes copy of conditions and update options[0m
2025-04-11T19:23:54.5322610Z   [32m  [32mâœ”[39m[0m[90m $addToSet with $ (gh-479)[0m
2025-04-11T19:23:54.5529742Z   [32m  [32mâœ”[39m[0m[90m works with nested positional notation[0m
2025-04-11T19:23:54.5740563Z   [32m  [32mâœ”[39m[0m[90m handles $pull with obj literal (gh-542)[0m
2025-04-11T19:23:54.5946680Z   [32m  [32mâœ”[39m[0m[90m handles $pull of obj literal and nested $in[0m
2025-04-11T19:23:54.6177908Z   [32m  [32mâœ”[39m[0m[90m handles $pull and nested $nin[0m
2025-04-11T19:23:54.6399143Z   [32m  [32mâœ”[39m[0m[90m updates numbers atomically[0m
2025-04-11T19:23:54.6619098Z   [32m  [32mâœ”[39m[0m[90m passes number of affected docs[0m
2025-04-11T19:23:54.6831634Z   [32m  [32mâœ”[39m[0m[90m updates a number to null (gh-640)[0m
2025-04-11T19:23:54.7178585Z   [32m  [32mâœ”[39m[0m[90m handles $pull from Mixed arrays (gh-735)[0m
2025-04-11T19:23:54.7557861Z   [32m  [32mâœ”[39m[0m[90m handles $push with $ positionals (gh-1057)[0m
2025-04-11T19:23:54.7861946Z   [32m  [32mâœ”[39m[0m[90m handles nested paths starting with numbers (gh-1062)[0m
2025-04-11T19:23:54.8189281Z   [32m  [32mâœ”[39m[0m[90m handles positional operators with referenced docs (gh-1572)[0m
2025-04-11T19:23:54.8548464Z   [32m  [32mâœ”[39m[0m[90m use .where for update condition (gh-2170)[0m
2025-04-11T19:23:54.8848717Z   [32m  [32mâœ”[39m[0m[90m casts empty arrays[0m
2025-04-11T19:23:54.9165103Z   [32m  [32mâœ”[39m[0m[90m successfully casts set with nested mixed objects (gh-2796)[0m
2025-04-11T19:23:54.9471402Z   [32m  [32mâœ”[39m[0m[90m handles empty update with promises (gh-2796)[0m
2025-04-11T19:23:54.9661004Z   [32m  [32mâœ”[39m[0m[90m works with undefined date (gh-2833)[0m
2025-04-11T19:23:54.9993954Z   [32m  [32mâœ”[39m[0m[90m does not add virtuals to update (gh-2046)[0m
2025-04-11T19:23:55.0199217Z   [32m  [32mâœ”[39m[0m[90m doesnt modify original argument doc (gh-3008)[0m
2025-04-11T19:23:55.0274601Z [0m    using last[0m
2025-04-11T19:23:55.0479582Z     [32m  [32mâœ”[39m[0m[90m handles date casting (gh-479)[0m
2025-04-11T19:23:55.0713827Z     [32m  [32mâœ”[39m[0m[90m handles $addToSet (gh-545)[0m
2025-04-11T19:23:55.0964775Z     [32m  [32mâœ”[39m[0m[90m handles $addToSet with $each (gh-545)[0m
2025-04-11T19:23:55.1207572Z     [32m  [32mâœ”[39m[0m[90m handles $pop and $unset (gh-574)[0m
2025-04-11T19:23:55.1272498Z [0m    mongodb 2.4 features[0m
2025-04-11T19:23:55.1561069Z     [32m  [32mâœ”[39m[0m[90m $setOnInsert operator[0m
2025-04-11T19:23:55.1903049Z     [32m  [32mâœ”[39m[0m[90m push with $slice[0m
2025-04-11T19:23:55.1969785Z [0m    mongodb 2.6 features[0m
2025-04-11T19:23:55.2249582Z     [32m  [32mâœ”[39m[0m[90m supports $position[0m
2025-04-11T19:23:55.2594730Z     [32m  [32mâœ”[39m[0m[90m supports $currentDate[0m
2025-04-11T19:23:55.2664082Z [0m    defaults and validators (gh-860)[0m
2025-04-11T19:23:55.2943054Z     [32m  [32mâœ”[39m[0m[90m applies defaults on upsert[0m
2025-04-11T19:23:55.3288096Z     [32m  [32mâœ”[39m[0m[90m avoids nested paths if setting parent path (gh-4911)[0m
2025-04-11T19:23:55.3616933Z     [32m  [32mâœ”[39m[0m[90m doesnt set default on upsert if query sets it[0m
2025-04-11T19:23:55.3928764Z     [32m  [32mâœ”[39m[0m[90m properly sets default on upsert if query wont set it[0m
2025-04-11T19:23:55.4241230Z     [32m  [32mâœ”[39m[0m[90m handles defaults on document arrays (gh-4456)[0m
2025-04-11T19:23:55.4479474Z     [32m  [32mâœ”[39m[0m[90m runs validators if theyre set[0m
2025-04-11T19:23:55.4734160Z     [32m  [32mâœ”[39m[0m[90m validators handle $unset and $setOnInsert[0m
2025-04-11T19:23:55.4968522Z     [32m  [32mâœ”[39m[0m[90m global validators option (gh-6578)[0m
2025-04-11T19:23:55.5199574Z     [32m  [32mâœ”[39m[0m[90m min/max, enum, and regex built-in validators work[0m
2025-04-11T19:23:55.5445659Z     [32m  [32mâœ”[39m[0m[90m multiple validation errors[0m
2025-04-11T19:23:55.5701542Z     [32m  [32mâœ”[39m[0m[90m validators ignore $inc[0m
2025-04-11T19:23:55.5950528Z     [32m  [32mâœ”[39m[0m[90m validators handle positional operator (gh-3167)[0m
2025-04-11T19:23:55.6304995Z     [32m  [32mâœ”[39m[0m[90m validators handle arrayFilters (gh-7536)[0m
2025-04-11T19:23:55.6558553Z     [32m  [32mâœ”[39m[0m[90m required and single nested (gh-4479)[0m
2025-04-11T19:23:55.6649235Z [0m    middleware[0m
2025-04-11T19:23:55.6941442Z     [32m  [32mâœ”[39m[0m[90m can specify pre and post hooks[0m
2025-04-11T19:23:55.7188659Z     [32m  [32mâœ”[39m[0m[90m runs before validators (gh-2706)[0m
2025-04-11T19:23:55.7267236Z [0m      objects and arrays[0m
2025-04-11T19:23:55.7464366Z       [32m  [32mâœ”[39m[0m[90m embedded objects (gh-2706)[0m
2025-04-11T19:23:55.7752617Z       [32m  [32mâœ”[39m[0m[90m handles document array validation (gh-2733)[0m
2025-04-11T19:23:55.8016116Z       [32m  [32mâœ”[39m[0m[90m validators on arrays (gh-3724)[0m
2025-04-11T19:23:55.8115409Z [0m    set() (gh-5770)[0m
2025-04-11T19:23:55.8438478Z     [32m  [32mâœ”[39m[0m[90m works with middleware and doesn't change the op[0m
2025-04-11T19:23:55.8777699Z     [32m  [32mâœ”[39m[0m[90m object syntax for path parameter[0m
2025-04-11T19:23:55.8849011Z [0m    bug fixes[0m
2025-04-11T19:23:55.9145918Z     [32m  [32mâœ”[39m[0m[90m can $rename (gh-1845)[0m
2025-04-11T19:23:55.9434266Z     [32m  [32mâœ”[39m[0m[90m throws CastError if $rename fails to cast to string (gh-1845)[0m
2025-04-11T19:23:55.9793882Z     [32m  [32mâœ”[39m[0m[90m allows objects with positional operator (gh-3185)[0m
2025-04-11T19:23:56.0123876Z     [32m  [32mâœ”[39m[0m[90m mixed type casting (gh-3305)[0m
2025-04-11T19:23:56.0461408Z     [32m  [32mâœ”[39m[0m[90m replaceOne[0m
2025-04-11T19:23:56.0796643Z     [32m  [32mâœ”[39m[0m[90m mixed nested type casting (gh-3337)[0m
2025-04-11T19:23:56.1121920Z     [32m  [32mâœ”[39m[0m[90m with single nested (gh-3820)[0m
2025-04-11T19:23:56.1454114Z     [32m  [32mâœ”[39m[0m[90m with single nested and transform (gh-4621)[0m
2025-04-11T19:23:56.1725604Z     [32m  [32mâœ”[39m[0m[90m works with buffers (gh-3496)[0m
2025-04-11T19:23:56.2074691Z     [32m  [32mâœ”[39m[0m[90m .updateOne(doc) (gh-3221)[0m
2025-04-11T19:23:56.2418094Z     [32m  [32mâœ”[39m[0m[90m middleware update with exec (gh-3549)[0m
2025-04-11T19:23:56.2639581Z     [32m  [32mâœ”[39m[0m[90m $push with buffer doesnt throw error (gh-3890)[0m
2025-04-11T19:23:56.2974071Z     [32m  [32mâœ”[39m[0m[90m $set with buffer (gh-3961)[0m
2025-04-11T19:23:56.3283472Z     [32m  [32mâœ”[39m[0m[90m versioning with setDefaultsOnInsert (gh-2593)[0m
2025-04-11T19:23:56.4103815Z     [32m  [32mâœ”[39m[0m[90m updates with timestamps with $set (gh-4989) (gh-7152)[0m[33m (62ms)[0m
2025-04-11T19:23:56.4443252Z     [32m  [32mâœ”[39m[0m[90m lets $currentDate go through with updatedAt (gh-5222)[0m
2025-04-11T19:23:56.4675444Z     [32m  [32mâœ”[39m[0m[90m update validators on single nested (gh-4332)[0m
2025-04-11T19:23:56.5037297Z     [32m  [32mâœ”[39m[0m[90m updates child schema timestamps with $push (gh-4049)[0m
2025-04-11T19:23:56.5370527Z     [32m  [32mâœ”[39m[0m[90m updates child schema timestamps with $set (gh-4049)[0m
2025-04-11T19:23:56.5595052Z     [32m  [32mâœ”[39m[0m[90m handles positional operator with timestamps (gh-4418)[0m
2025-04-11T19:23:56.5948937Z     [32m  [32mâœ”[39m[0m[90m push with timestamps (gh-4514)[0m
2025-04-11T19:23:56.6488479Z     [32m  [32mâœ”[39m[0m[90m addToSet (gh-4953)[0m
2025-04-11T19:23:56.6852431Z     [32m  [32mâœ”[39m[0m[90m overwrite with timestamps (gh-4054)[0m
2025-04-11T19:23:56.7192238Z     [32m  [32mâœ”[39m[0m[90m update with buffer and exec (gh-4609)[0m
2025-04-11T19:23:56.7510470Z     [32m  [32mâœ”[39m[0m[90m single nested with runValidators (gh-4420)[0m
2025-04-11T19:23:56.7835713Z     [32m  [32mâœ”[39m[0m[90m single nested under doc array with runValidators (gh-4960)[0m
2025-04-11T19:23:56.8083072Z     [32m  [32mâœ”[39m[0m[90m handles $set on document array in discriminator with runValidators (gh-12518)[0m
2025-04-11T19:23:56.8435139Z     [32m  [32mâœ”[39m[0m[90m single nested schema with geo (gh-4465)[0m
2025-04-11T19:23:56.8775285Z     [32m  [32mâœ”[39m[0m[90m runs validation on Mixed properties of embedded arrays during updates (gh-4441)[0m
2025-04-11T19:23:56.9121521Z     [32m  [32mâœ”[39m[0m[90m updating single nested doc property casts correctly (gh-4655)[0m
2025-04-11T19:23:56.9450615Z     [32m  [32mâœ”[39m[0m[90m findOneAndUpdate with nested arrays (gh-5032)[0m
2025-04-11T19:23:56.9781905Z     [32m  [32mâœ”[39m[0m[90m findOneAndUpdate with timestamps (gh-5045)[0m
2025-04-11T19:23:57.0003130Z     [32m  [32mâœ”[39m[0m[90m doesnt double-call setters when updating an array (gh-5041)[0m
2025-04-11T19:23:57.0358299Z     [32m  [32mâœ”[39m[0m[90m does not fail if passing whole doc (gh-5088)[0m
2025-04-11T19:23:57.0708658Z     [32m  [32mâœ”[39m[0m[90m does not fail if passing whole doc (gh-5111)[0m
2025-04-11T19:23:57.1049181Z     [32m  [32mâœ”[39m[0m[90m $pullAll with null (gh-5164)[0m
2025-04-11T19:23:57.1384002Z     [32m  [32mâœ”[39m[0m[90m $set array (gh-5403)[0m
2025-04-11T19:23:57.1786272Z     [32m  [32mâœ”[39m[0m[90m doesn't skip casting the query on nested arrays (gh-7098)[0m
2025-04-11T19:23:57.2123065Z     [32m  [32mâœ”[39m[0m[90m defaults with overwrite and no update validators (gh-5384)[0m
2025-04-11T19:23:57.2356689Z     [32m  [32mâœ”[39m[0m[90m update validators with nested required (gh-5269)[0m
2025-04-11T19:23:57.2598859Z     [32m  [32mâœ”[39m[0m[90m $push with updateValidators and top-level doc (gh-5430)[0m
2025-04-11T19:23:57.3026343Z     [32m  [32mâœ”[39m[0m[90m $pull with updateValidators (gh-5555)[0m
2025-04-11T19:23:57.3383718Z     [32m  [32mâœ”[39m[0m[90m $pull with updateValidators and $in (gh-5744)[0m
2025-04-11T19:23:57.3602723Z     [32m  [32mâœ”[39m[0m[90m $pull with updateValidators and required array (gh-6341)[0m
2025-04-11T19:23:57.4115209Z     [32m  [32mâœ”[39m[0m[90m update with Decimal type (gh-5361)[0m
2025-04-11T19:23:57.4434868Z     [32m  [32mâœ”[39m[0m[90m strict false in query (gh-5453)[0m
2025-04-11T19:23:57.4778719Z     [32m  [32mâœ”[39m[0m[90m replaceOne with buffer (gh-6124)[0m
2025-04-11T19:23:57.5025007Z     [32m  [32mâœ”[39m[0m[90m returns error if passing array as conditions (gh-3677)[0m
2025-04-11T19:23:57.5411161Z     [32m  [32mâœ”[39m[0m[90m upsert: 1 (gh-5839)[0m
2025-04-11T19:23:57.5788633Z     [32m  [32mâœ”[39m[0m[90m casting $addToSet without $each (gh-6086)[0m
2025-04-11T19:23:57.6151669Z     [32m  [32mâœ”[39m[0m[90m doesn't add $each when pushing an array into an array (gh-6768)[0m
2025-04-11T19:23:57.6556874Z     [32m  [32mâœ”[39m[0m[90m casting embedded discriminators if path specified in filter (gh-5841)[0m
2025-04-11T19:23:57.6923716Z     [32m  [32mâœ”[39m[0m[90m update with nested id (gh-5640)[0m
2025-04-11T19:23:57.7281597Z     [32m  [32mâœ”[39m[0m[90m $inc cast errors (gh-6770)[0m
2025-04-11T19:23:57.7528540Z     [32m  [32mâœ”[39m[0m[90m does not treat virtuals as an error for strict: throw (gh-6731)[0m
2025-04-11T19:23:57.7793184Z     [32m  [32mâœ”[39m[0m[90m cast error in update conditions (gh-5477)[0m
2025-04-11T19:23:57.8101924Z     [32m  [32mâœ”[39m[0m[90m single embedded schema under document array (gh-4519)[0m
2025-04-11T19:23:57.8513406Z     [32m  [32mâœ”[39m[0m[90m casts objects to array when clobbering with $set (gh-6532)[0m
2025-04-11T19:23:57.8623277Z 
2025-04-11T19:23:57.8624245Z [0m  model: updateOne: [0m
2025-04-11T19:23:57.8824399Z   [32m  [32mâœ”[39m[0m[90m updating a map (gh-7111)[0m
2025-04-11T19:23:57.9035949Z   [32m  [32mâœ”[39m[0m[90m updating a map path underneath a single nested subdoc (gh-9298)[0m
2025-04-11T19:23:57.9130917Z   [32m  [32mâœ”[39m[0m[90m overwrite an array with empty (gh-7135)[0m
2025-04-11T19:23:57.9475067Z   [32m  [32mâœ”[39m[0m[90m sets child timestamps even without $set (gh-7261)[0m
2025-04-11T19:23:57.9734596Z   [32m  [32mâœ”[39m[0m[90m supports discriminators if key is specified in conditions (gh-7843)[0m
2025-04-11T19:23:57.9932324Z   [32m  [32mâœ”[39m[0m[90m immutable createdAt (gh-7917)[0m
2025-04-11T19:23:58.0131613Z   [32m  [32mâœ”[39m[0m[90m overwriting immutable createdAt (gh-8619)[0m
2025-04-11T19:23:58.0348513Z   [32m  [32mâœ”[39m[0m[90m conditional immutable (gh-8001)[0m
2025-04-11T19:23:58.0536918Z   [32m  [32mâœ”[39m[0m[90m allow $pull with non-existent schema field (gh-8166)[0m
2025-04-11T19:23:58.0782878Z   [32m  [32mâœ”[39m[0m[90m update embedded discriminator path if key in $elemMatch (gh-8063)[0m
2025-04-11T19:23:58.0992249Z   [32m  [32mâœ”[39m[0m[90m moves $set of immutable properties to $setOnInsert (gh-8467) (gh-9537)[0m
2025-04-11T19:23:58.1184982Z   [32m  [32mâœ”[39m[0m[90m moves $set of immutable properties to $setOnInsert (gh-8951)[0m
2025-04-11T19:23:58.1395105Z   [32m  [32mâœ”[39m[0m[90m updates buffers with `runValidators` successfully (gh-8580)[0m
2025-04-11T19:23:58.1640333Z   [32m  [32mâœ”[39m[0m[90m allows overriding child strict mode with top-level strict (gh-8961)[0m
2025-04-11T19:23:58.1979913Z   [32m  [32mâœ”[39m[0m[90m handles timestamp properties in nested paths when overwriting parent path (gh-9105)[0m
2025-04-11T19:23:58.2074314Z   [32m  [32mâœ”[39m[0m[90m update validators respect storeSubdocValidationError (gh-9172)[0m
2025-04-11T19:23:58.2294215Z   [32m  [32mâœ”[39m[0m[90m handles spread docs (gh-9518)[0m
2025-04-11T19:23:58.2498877Z   [32m  [32mâœ”[39m[0m[90m works with doubly nested arrays with $pullAll (gh-13190)[0m
2025-04-11T19:23:58.2687783Z   [32m  [32mâœ”[39m[0m[90m should throw when matchedCount === 0 and using orFail() on the query gh-11620[0m
2025-04-11T19:23:58.2976222Z   [32m  [32mâœ”[39m[0m[90m updateOne with top level key that starts with $ (gh-13786)[0m
2025-04-11T19:23:58.3165976Z   [32m  [32mâœ”[39m[0m[90m works with update validators and single nested doc with numberic paths (gh-13977)[0m
2025-04-11T19:23:58.3370978Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators with $pull when discriminator key set in filter (gh-14675)[0m
2025-04-11T19:23:58.3584768Z   [32m  [32mâœ”[39m[0m[90m casts using overwritten discriminator key schema (gh-15051)[0m
2025-04-11T19:23:58.3630302Z [0m    mongodb 42 features[0m
2025-04-11T19:23:58.3918985Z     [32m  [32mâœ”[39m[0m[90m update pipeline (gh-8225)[0m
2025-04-11T19:23:58.4132156Z     [32m  [32mâœ”[39m[0m[90m update pipeline - $unset with string (gh-11106)[0m
2025-04-11T19:23:58.4354871Z     [32m  [32mâœ”[39m[0m[90m update pipeline timestamps (gh-8524)[0m
2025-04-11T19:23:58.4419923Z [0m    overwriteDiscriminatorKey[0m
2025-04-11T19:23:58.4688070Z     [32m  [32mâœ”[39m[0m[90m allows changing discriminator key in update (gh-6087)[0m
2025-04-11T19:23:58.4755458Z [0m    converts dot separated paths to nested structure (gh-10200)[0m
2025-04-11T19:23:58.4815101Z     [32m  [32mâœ”[39m[0m[90m works with new Model(...)[0m
2025-04-11T19:23:58.5055928Z     [32m  [32mâœ”[39m[0m[90m works with Model.create(...)[0m
2025-04-11T19:23:58.5310427Z     [32m  [32mâœ”[39m[0m[90m works with Model.updateOne(...)[0m
2025-04-11T19:23:58.5553149Z     [32m  [32mâœ”[39m[0m[90m works with Model.bulkWrite(...)[0m
2025-04-11T19:23:58.5659729Z 
2025-04-11T19:23:58.5660515Z [0m  Query:[0m
2025-04-11T19:23:58.5671392Z [0m    toConstructor[0m
2025-04-11T19:23:58.5740075Z     [32m  [32mâœ”[39m[0m[90m creates a query[0m
2025-04-11T19:23:58.5815153Z     [32m  [32mâœ”[39m[0m[90m copies all the right values[0m
2025-04-11T19:23:58.5908077Z     [32m  [32mâœ”[39m[0m[90m gets expected results[0m
2025-04-11T19:23:58.6017201Z     [32m  [32mâœ”[39m[0m[90m can be re-used multiple times[0m
2025-04-11T19:23:58.6080470Z     [32m  [32mâœ”[39m[0m[90m options get merged properly[0m
2025-04-11T19:23:58.6147456Z     [32m  [32mâœ”[39m[0m[90m options get cloned (gh-3176)[0m
2025-04-11T19:23:58.6215962Z     [32m  [32mâœ”[39m[0m[90m creates subclasses of mquery[0m
2025-04-11T19:23:58.6294096Z     [32m  [32mâœ”[39m[0m[90m with findOneAndUpdate (gh-4318)[0m
2025-04-11T19:23:58.6445818Z     [32m  [32mâœ”[39m[0m[90m gets middleware from model (gh-6455)[0m
2025-04-11T19:23:58.6516873Z     [32m  [32mâœ”[39m[0m[90m works with entries-style sort() syntax (gh-8159)[0m
2025-04-11T19:23:58.6599800Z 
2025-04-11T19:23:58.6600438Z [0m  id virtual getter[0m
2025-04-11T19:23:58.6672578Z   [32m  [32mâœ”[39m[0m[90m should work as expected with an ObjectId[0m
2025-04-11T19:23:58.6867783Z   [32m  [32mâœ”[39m[0m[90m should be turned off when `id` option is set to false[0m
2025-04-11T19:23:58.7047308Z   [32m  [32mâœ”[39m[0m[90m should be turned off when the schema has a set `id` path[0m
2025-04-11T19:23:58.7128805Z 
2025-04-11T19:23:58.7129635Z [0m  documents should not be converted to _id (gh-1408)[0m
2025-04-11T19:23:58.7656492Z   [32m  [32mâœ”[39m[0m[90m if an embedded doc[0m[33m (49ms)[0m
2025-04-11T19:23:58.7687511Z 
2025-04-11T19:23:58.7688373Z [0m  insertMany()[0m
2025-04-11T19:23:58.7881608Z   [32m  [32mâœ”[39m[0m[90m with timestamps (gh-723)[0m
2025-04-11T19:23:58.8084582Z   [32m  [32mâœ”[39m[0m[90m timestamps respect $timestamps() (gh-12117)[0m
2025-04-11T19:23:58.8298052Z   [32m  [32mâœ”[39m[0m[90m insertMany() with nested timestamps (gh-12060)[0m
2025-04-11T19:23:58.8482038Z   [32m  [32mâœ”[39m[0m[90m insertMany() (gh-723)[0m
2025-04-11T19:23:58.8802431Z   [32m  [32mâœ”[39m[0m[90m insertMany() ordered option for constraint errors (gh-3893)[0m
2025-04-11T19:23:58.9089430Z   [32m  [32mâœ”[39m[0m[90m insertMany() ordered option for validation errors (gh-5068)[0m
2025-04-11T19:23:58.9336606Z   [32m  [32mâœ”[39m[0m[90m insertMany() `writeErrors` if only one error (gh-8938)[0m
2025-04-11T19:23:58.9419902Z   [32m  [32mâœ”[39m[0m[90m insertMany() ordered option for single validation error[0m
2025-04-11T19:23:58.9622938Z   [32m  [32mâœ”[39m[0m[90m insertMany() hooks (gh-3846)[0m
2025-04-11T19:23:58.9766696Z   [32m  [32mâœ”[39m[0m[90m returns empty array if no documents (gh-8130)[0m
2025-04-11T19:23:58.9996961Z   [32m  [32mâœ”[39m[0m[90m insertMany() multi validation error with ordered false (gh-5337)[0m
2025-04-11T19:23:59.0084631Z   [32m  [32mâœ”[39m[0m[90m insertMany() validation error with ordered true when all documents are invalid[0m
2025-04-11T19:23:59.0198276Z   [32m  [32mâœ”[39m[0m[90m insertMany() validation error with ordered false when all documents are invalid[0m
2025-04-11T19:23:59.0415470Z   [32m  [32mâœ”[39m[0m[90m insertMany() validation error with ordered false and rawResult for checking which documents failed (gh-12791)[0m
2025-04-11T19:23:59.0586595Z   [32m  [32mâœ”[39m[0m[90m insertMany() validation error with ordered false and rawResult for mixed write and validation error (gh-12791)[0m
2025-04-11T19:23:59.0890726Z   [32m  [32mâœ”[39m[0m[90m insertMany() populate option (gh-9720)[0m
2025-04-11T19:23:59.1060640Z   [32m  [32mâœ”[39m[0m[90m insertMany() sets `isNew` for inserted documents with `ordered = false` (gh-9677)[0m
2025-04-11T19:23:59.1235242Z   [32m  [32mâœ”[39m[0m[90m insertMany() returns only inserted docs with `ordered = true`[0m
2025-04-11T19:23:59.1316027Z   [32m  [32mâœ”[39m[0m[90m insertMany() validation error with ordered true and rawResult true when all documents are invalid[0m
2025-04-11T19:23:59.1440378Z   [32m  [32mâœ”[39m[0m[90m insertMany() validation error with ordered false and rawResult true when all documents are invalid[0m
2025-04-11T19:23:59.1688915Z   [32m  [32mâœ”[39m[0m[90m insertMany() depopulate (gh-4590)[0m
2025-04-11T19:23:59.1930357Z   [32m  [32mâœ”[39m[0m[90m insertMany() with error handlers (gh-6228)[0m
2025-04-11T19:23:59.1994352Z   [32m  [32mâœ”[39m[0m[90m insertMany() with non object array error can be catched (gh-8363)[0m
2025-04-11T19:23:59.2189025Z   [32m  [32mâœ”[39m[0m[90m insertMany() return docs with empty modifiedPaths (gh-7852)[0m
2025-04-11T19:23:59.2267568Z   [32m  [32mâœ”[39m[0m[90m insertMany with Decimal (gh-5190)[0m
2025-04-11T19:23:59.2308250Z [0m    insertMany() lean option to bypass validation (gh-8234)[0m
2025-04-11T19:23:59.2452319Z     [32m  [32mâœ”[39m[0m[90m insertMany() should bypass validation if lean option set to `true`[0m
2025-04-11T19:23:59.2549197Z     [32m  [32mâœ”[39m[0m[90m insertMany() should validate if lean option not set[0m
2025-04-11T19:23:59.2639252Z     [32m  [32mâœ”[39m[0m[90m insertMany() should validate if lean option set to `false`[0m
2025-04-11T19:23:59.2734567Z 
2025-04-11T19:23:59.2735296Z [0m  types.buffer[0m
2025-04-11T19:23:59.2785187Z   [32m  [32mâœ”[39m[0m[90m test that a mongoose buffer behaves and quacks like a buffer[0m
2025-04-11T19:23:59.2950756Z   [32m  [32mâœ”[39m[0m[90m buffer validation[0m
2025-04-11T19:23:59.3119801Z   [32m  [32mâœ”[39m[0m[90m buffer storage[0m
2025-04-11T19:23:59.3290507Z   [32m  [32mâœ”[39m[0m[90m test write markModified[0m
2025-04-11T19:23:59.3499402Z   [32m  [32mâœ”[39m[0m[90m can be set to null[0m
2025-04-11T19:23:59.3702781Z   [32m  [32mâœ”[39m[0m[90m can be updated to null[0m
2025-04-11T19:23:59.3745884Z [0m    #toObject[0m
2025-04-11T19:23:59.3790872Z     [32m  [32mâœ”[39m[0m[90m retains custom subtypes[0m
2025-04-11T19:23:59.3850354Z [0m    subtype[0m
2025-04-11T19:23:59.3900885Z     [32m  [32mâœ”[39m[0m[90m default value[0m
2025-04-11T19:23:59.4023135Z     [32m  [32mâœ”[39m[0m[90m method works[0m
2025-04-11T19:23:59.4253502Z     [32m  [32mâœ”[39m[0m[90m is stored[0m
2025-04-11T19:23:59.4488158Z     [32m  [32mâœ”[39m[0m[90m changes are retained[0m
2025-04-11T19:23:59.4584348Z     [32m  [32mâœ”[39m[0m[90m cast from number (gh-3764)[0m
2025-04-11T19:23:59.4703554Z     [32m  [32mâœ”[39m[0m[90m cast from string[0m
2025-04-11T19:23:59.4820378Z     [32m  [32mâœ”[39m[0m[90m cast from array[0m
2025-04-11T19:23:59.4936768Z     [32m  [32mâœ”[39m[0m[90m cast from Binary[0m
2025-04-11T19:23:59.5056556Z     [32m  [32mâœ”[39m[0m[90m cast from json (gh-6863)[0m
2025-04-11T19:23:59.5172118Z     [32m  [32mâœ”[39m[0m[90m is an `instanceof Buffer`[0m
2025-04-11T19:23:59.5297854Z 
2025-04-11T19:23:59.5298336Z [0m  pre/post hooks, type of this[0m
2025-04-11T19:23:59.5707979Z   [32m  [32mâœ”[39m[0m[90m dynamic type of this in pre/post hooks[0m
2025-04-11T19:23:59.5789468Z 
2025-04-11T19:23:59.5795472Z [0m  Model[0m
2025-04-11T19:23:59.6027597Z   [32m  [32mâœ”[39m[0m[90m can be created using _id as embedded document[0m
2025-04-11T19:23:59.6117395Z   [32m  [32mâœ”[39m[0m[90m gh-2140[0m
2025-04-11T19:23:59.6272640Z   [32m  [32mâœ”[39m[0m[90m collection name can be specified through schema[0m
2025-04-11T19:23:59.6520719Z   [32m  [32mâœ”[39m[0m[90m saving a model with a null value should perpetuate that null value to the db[0m
2025-04-11T19:23:59.6773329Z   [32m  [32mâœ”[39m[0m[90m saves subdocuments middleware correctly[0m
2025-04-11T19:23:59.6966016Z   [32m  [32mâœ”[39m[0m[90m instantiating a model with a hash that maps to at least 1 undefined value[0m
2025-04-11T19:23:59.7194419Z   [32m  [32mâœ”[39m[0m[90m modified nested objects which contain MongoseNumbers should not cause a RangeError on save (gh-714)[0m
2025-04-11T19:23:59.7434168Z   [32m  [32mâœ”[39m[0m[90m no RangeError on deleteOne() of a doc with Number _id (gh-714)[0m
2025-04-11T19:23:59.7635725Z   [32m  [32mâœ”[39m[0m[90m over-writing a number should persist to the db (gh-342)[0m
2025-04-11T19:23:59.7841346Z   [32m  [32mâœ”[39m[0m[90m changing a number non-atomically (gh-203)[0m
2025-04-11T19:23:59.8091952Z   [32m  [32mâœ”[39m[0m[90m doubly nested array saving and loading[0m
2025-04-11T19:23:59.8326041Z   [32m  [32mâœ”[39m[0m[90m multiple number push() calls[0m
2025-04-11T19:23:59.8571438Z   [32m  [32mâœ”[39m[0m[90m multiple push() calls[0m
2025-04-11T19:23:59.8795864Z   [32m  [32mâœ”[39m[0m[90m activePaths should be updated for nested modifieds[0m
2025-04-11T19:23:59.9007884Z   [32m  [32mâœ”[39m[0m[90m activePaths should be updated for nested modifieds as promise[0m
2025-04-11T19:23:59.9219502Z   [32m  [32mâœ”[39m[0m[90m $pull should affect what you see in an array before a save[0m
2025-04-11T19:23:59.9470484Z   [32m  [32mâœ”[39m[0m[90m $shift[0m
2025-04-11T19:23:59.9676252Z   [32m  [32mâœ”[39m[0m[90m updating an embedded document in an embedded array (gh-255)[0m
2025-04-11T19:24:00.0040703Z   [32m  [32mâœ”[39m[0m[90m updating an embedded array document to an Object value (gh-334)[0m
2025-04-11T19:24:00.0258791Z   [32m  [32mâœ”[39m[0m[90m saving an embedded document twice should not push that doc onto the parent doc twice (gh-267)[0m
2025-04-11T19:24:00.0469049Z   [32m  [32mâœ”[39m[0m[90m removing a subdocument atomically[0m
2025-04-11T19:24:00.0670748Z   [32m  [32mâœ”[39m[0m[90m single pull embedded doc[0m
2025-04-11T19:24:00.0899402Z   [32m  [32mâœ”[39m[0m[90m saving mixed data[0m
2025-04-11T19:24:00.0975527Z   [32m  [32mâœ”[39m[0m[90m populating mixed data from the constructor (gh-200)[0m
2025-04-11T19:24:00.1275509Z   [32m  [32mâœ”[39m[0m[90m "type" is allowed as a key[0m
2025-04-11T19:24:00.1476348Z   [32m  [32mâœ”[39m[0m[90m unaltered model does not clear the doc (gh-195)[0m
2025-04-11T19:24:00.1732294Z   [32m  [32mâœ”[39m[0m[90m subdocuments with changed values should persist the values[0m
2025-04-11T19:24:00.1939003Z   [32m  [32mâœ”[39m[0m[90m a single instantiated document should be able to update its embedded documents more than once[0m
2025-04-11T19:24:00.2167996Z   [32m  [32mâœ”[39m[0m[90m should not throw range error when using Number _id and saving existing doc (gh-691)[0m
2025-04-11T19:24:00.2343772Z   [32m  [32mâœ”[39m[0m[90m path is cast to correct value when retreived from db[0m
2025-04-11T19:24:00.2727599Z   [32m  [32mâœ”[39m[0m[90m setting a path to undefined should retain the value as undefined[0m
2025-04-11T19:24:00.2810717Z   [32m  [32mâœ”[39m[0m[90m allow for object passing to ref paths (gh-1606)[0m
2025-04-11T19:24:00.3040890Z   [32m  [32mâœ”[39m[0m[90m setters trigger on null values (gh-1445)[0m
2025-04-11T19:24:00.3414804Z   [32m  [32mâœ”[39m[0m[90m dropDatabase() after init allows re-init (gh-6967)[0m
2025-04-11T19:24:00.3651144Z   [32m  [32mâœ”[39m[0m[90m replaceOne always sets version key in top-level (gh-7138)[0m
2025-04-11T19:24:00.3735355Z   [32m  [32mâœ”[39m[0m[90m can JSON.stringify(Model.schema) with nested (gh-7220)[0m
2025-04-11T19:24:00.4046919Z   [32m  [32mâœ”[39m[0m[90m sets $session() before pre save hooks run (gh-7742)[0m
2025-04-11T19:24:00.4295104Z   [32m  [32mâœ”[39m[0m[90m sets $session() before pre deleteOne hooks run (gh-7742)[0m
2025-04-11T19:24:00.4534859Z   [32m  [32mâœ”[39m[0m[90m set $session() before pre validate hooks run on bulkWrite and insertMany (gh-7769)[0m
2025-04-11T19:24:00.4777139Z   [32m  [32mâœ”[39m[0m[90m custom statics that overwrite query functions dont get hooks by default (gh-7790)[0m
2025-04-11T19:24:00.4996380Z   [32m  [32mâœ”[39m[0m[90m custom statics that overwrite aggregate functions dont get hooks by default (gh-14903)[0m
2025-04-11T19:24:00.5236961Z   [32m  [32mâœ”[39m[0m[90m custom statics that overwrite model functions dont get hooks by default[0m
2025-04-11T19:24:00.5318527Z   [32m  [32mâœ”[39m[0m[90m custom statics that overwrite document functions dont get hooks by default[0m
2025-04-11T19:24:00.5614816Z   [32m  [32mâœ”[39m[0m[90m error handling middleware passes saved doc (gh-7832)[0m
2025-04-11T19:24:00.5699051Z   [32m  [32mâœ”[39m[0m[90m throws readable error if calling Model function with bad context (gh-7957)[0m
2025-04-11T19:24:00.5991493Z   [32m  [32mâœ”[39m[0m[90m sets correct `Document#op` with `save()` (gh-8439)[0m
2025-04-11T19:24:00.6268568Z   [32m  [32mâœ”[39m[0m[90m bulkWrite sets discriminator filters (gh-8590)[0m
2025-04-11T19:24:00.6571355Z   [32m  [32mâœ”[39m[0m[90m bulkWrite skips defaults based on global setDefaultsOnInsert (gh-13823)[0m
2025-04-11T19:24:00.6805749Z   [32m  [32mâœ”[39m[0m[90m bulkWrite upsert works when update casts to empty (gh-8698)[0m
2025-04-11T19:24:00.6894292Z   [32m  [32mâœ”[39m[0m[90m bulkWrite upsert with non-schema path in filter (gh-8698)[0m
2025-04-11T19:24:00.7253545Z   [32m  [32mâœ”[39m[0m[90m bulkWrite can disable timestamps with updateOne, and updateMany[0m
2025-04-11T19:24:00.7646965Z   [32m  [32mâœ”[39m[0m[90m bulkwrite should not change updatedAt on subdocs when timestamps set to false (gh-13611)[0m
2025-04-11T19:24:00.7863373Z   [32m  [32mâœ”[39m[0m[90m bulkWrite can overwrite schema `strict` option for filters and updates (gh-8778)[0m
2025-04-11T19:24:00.8012909Z   [32m  [32mâœ”[39m[0m[90m cast errors have `kind` field (gh-8953)[0m
2025-04-11T19:24:00.8369724Z   [32m  [32mâœ”[39m[0m[90m casts bulkwrite timestamps to `Number` when specified (gh-9030)[0m
2025-04-11T19:24:00.8453587Z   [32m  [32mâœ”[39m[0m[90m Model.bulkWrite(...) does not throw an error when provided an empty array (gh-9131)[0m
2025-04-11T19:24:00.8746329Z   [32m  [32mâœ”[39m[0m[90m Model.bulkWrite(...) does not throw an error with upsert:true, setDefaultsOnInsert: true (gh-9157)[0m
2025-04-11T19:24:00.8896864Z   [32m  [32mâœ”[39m[0m[90m Model.bulkWrite(...) does not hang with empty array and ordered: false (gh-13664)[0m
2025-04-11T19:24:00.9213189Z   [32m  [32mâœ”[39m[0m[90m allows calling `create()` after `bulkWrite()` (gh-9350)[0m
2025-04-11T19:24:00.9296168Z   [32m  [32mâœ”[39m[0m[90m skips applying init hooks if `document` option set to `false` (gh-9316)[0m
2025-04-11T19:24:00.9602026Z   [32m  [32mâœ”[39m[0m[90m retains atomics after failed `save()` (gh-9327)[0m
2025-04-11T19:24:00.9887846Z   [32m  [32mâœ”[39m[0m[90m doesnt wipe out changes made while `save()` is in flight (gh-9327)[0m
2025-04-11T19:24:01.0134905Z   [32m  [32mâœ”[39m[0m[90m saves all error object properties to paths with type `Mixed` (gh-10126)[0m
2025-04-11T19:24:01.0303381Z   [32m  [32mâœ”[39m[0m[90m supports skipping defaults on a find operation gh-7287[0m
2025-04-11T19:24:01.0632525Z   [32m  [32mâœ”[39m[0m[90m casts ObjectIds with `ref` in schema when calling `hydrate()` (gh-11052)[0m
2025-04-11T19:24:01.0724670Z   [32m  [32mâœ”[39m[0m[90m respects `hydrate()` projection (gh-11375)[0m
2025-04-11T19:24:01.0888685Z   [32m  [32mâœ”[39m[0m[90m supports setters option for `hydrate()` (gh-11653)[0m
2025-04-11T19:24:01.1218015Z   [32m  [32mâœ”[39m[0m[90m sets index collation based on schema collation (gh-7621)[0m
2025-04-11T19:24:01.1481163Z   [32m  [32mâœ”[39m[0m[90m works if passing class that extends Document to `loadClass()` (gh-12254)[0m
2025-04-11T19:24:01.1775958Z   [32m  [32mâœ”[39m[0m[90m handles shared schema methods (gh-12423)[0m
2025-04-11T19:24:01.2013347Z   [32m  [32mâœ”[39m[0m[90m respects schema-level `collectionOptions` for setting options to createCollection()[0m
2025-04-11T19:24:01.2090799Z   [32m  [32mâœ”[39m[0m[90m throws helpful error when calling Model() with string instead of model() (gh-14281)[0m
2025-04-11T19:24:01.2204465Z   [32m  [32mâœ”[39m[0m[90m supports recompiling model with new schema additions (gh-14296)[0m
2025-04-11T19:24:01.2369951Z   [32m  [32mâœ”[39m[0m[90m supports recompiling model with new discriminators (gh-14444) (gh-14296)[0m
2025-04-11T19:24:01.2539332Z   [32m  [32mâœ”[39m[0m[90m overwrites existing discriminators when calling recompileSchema (gh-14527) (gh-14444)[0m
2025-04-11T19:24:01.2999485Z   [32m  [32mâœ”[39m[0m[90m does not throw with multiple self-referencing discriminator schemas applied to schema (gh-15120)[0m
2025-04-11T19:24:01.3229933Z   [32m  [32mâœ”[39m[0m[90m inserts versionKey even if schema has `toObject.versionKey` set to false (gh-14344)[0m
2025-04-11T19:24:01.3447494Z   [32m  [32mâœ”[39m[0m[90m insertMany should throw an error if there were operations that failed validation, but all operations that passed validation succeeded (gh-13256)[0m
2025-04-11T19:24:01.3528249Z   [32m  [32mâœ”[39m[0m[90m throws error if calling `updateMany()` with no update param (gh-15190)[0m
2025-04-11T19:24:01.3643205Z [0m    constructor[0m
2025-04-11T19:24:01.3700457Z     [32m  [32mâœ”[39m[0m[90m works without "new" keyword[0m
2025-04-11T19:24:01.3808153Z     [32m  [32mâœ”[39m[0m[90m works "new" keyword[0m
2025-04-11T19:24:01.3879868Z [0m    isNew[0m
2025-04-11T19:24:01.3935772Z     [32m  [32mâœ”[39m[0m[90m is true on instantiation[0m
2025-04-11T19:24:01.4010309Z [0m    schema[0m
2025-04-11T19:24:01.4065376Z     [32m  [32mâœ”[39m[0m[90m should exist[0m
2025-04-11T19:24:01.4179851Z     [32m  [32mâœ”[39m[0m[90m emits init event[0m
2025-04-11T19:24:01.4293535Z [0m    structure[0m
2025-04-11T19:24:01.4354193Z     [32m  [32mâœ”[39m[0m[90m default when instantiated[0m
2025-04-11T19:24:01.4461498Z     [32m  [32mâœ”[39m[0m[90m a hash with one null value[0m
2025-04-11T19:24:01.4650484Z     [32m  [32mâœ”[39m[0m[90m when saved[0m
2025-04-11T19:24:01.4702410Z [0m      array[0m
2025-04-11T19:24:01.4713373Z [0m        defaults[0m
2025-04-11T19:24:01.4795855Z         [32m  [32mâœ”[39m[0m[90m to a non-empty array[0m
2025-04-11T19:24:01.4945332Z         [32m  [32mâœ”[39m[0m[90m empty[0m
2025-04-11T19:24:01.5043521Z [0m      init[0m
2025-04-11T19:24:01.5117762Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:01.5239394Z       [32m  [32mâœ”[39m[0m[90m partially[0m
2025-04-11T19:24:01.5364220Z       [32m  [32mâœ”[39m[0m[90m with partial hash[0m
2025-04-11T19:24:01.5489499Z       [32m  [32mâœ”[39m[0m[90m isNew on embedded documents[0m
2025-04-11T19:24:01.5706733Z       [32m  [32mâœ”[39m[0m[90m isNew on embedded documents after saving[0m
2025-04-11T19:24:01.5781476Z [0m    methods[0m
2025-04-11T19:24:01.5839263Z     [32m  [32mâœ”[39m[0m[90m can be defined[0m
2025-04-11T19:24:01.5977853Z     [32m  [32mâœ”[39m[0m[90m can be defined on embedded documents[0m
2025-04-11T19:24:01.6162626Z     [32m  [32mâœ”[39m[0m[90m can be defined with nested key[0m
2025-04-11T19:24:01.6272613Z [0m    statics[0m
2025-04-11T19:24:01.6327583Z     [32m  [32mâœ”[39m[0m[90m can be defined[0m
2025-04-11T19:24:01.6403194Z [0m    casting as validation errors[0m
2025-04-11T19:24:01.6568293Z     [32m  [32mâœ”[39m[0m[90m error[0m
2025-04-11T19:24:01.6686267Z     [32m  [32mâœ”[39m[0m[90m nested error[0m
2025-04-11T19:24:01.6785739Z     [32m  [32mâœ”[39m[0m[90m subdocument cast error[0m
2025-04-11T19:24:01.6913347Z     [32m  [32mâœ”[39m[0m[90m subdocument validation error[0m
2025-04-11T19:24:01.7106082Z     [32m  [32mâœ”[39m[0m[90m subdocument error when adding a subdoc[0m
2025-04-11T19:24:01.7317170Z     [32m  [32mâœ”[39m[0m[90m updates[0m
2025-04-11T19:24:01.7404614Z     [32m  [32mâœ”[39m[0m[90m $pull[0m
2025-04-11T19:24:01.7633166Z     [32m  [32mâœ”[39m[0m[90m $push[0m
2025-04-11T19:24:01.7821601Z     [32m  [32mâœ”[39m[0m[90m Number arrays[0m
2025-04-11T19:24:01.8070514Z     [32m  [32mâœ”[39m[0m[90m date casting compat with datejs (gh-502)[0m
2025-04-11T19:24:01.8137197Z [0m    validation[0m
2025-04-11T19:24:01.8321671Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:01.8562837Z     [32m  [32mâœ”[39m[0m[90m custom messaging[0m
2025-04-11T19:24:01.8670619Z     [32m  [32mâœ”[39m[0m[90m with Model.schema.path introspection (gh-272)[0m
2025-04-11T19:24:01.8929672Z     [32m  [32mâœ”[39m[0m[90m of required undefined values[0m
2025-04-11T19:24:01.9059185Z     [32m  [32mâœ”[39m[0m[90m save callback should only execute once (gh-319)[0m
2025-04-11T19:24:01.9370908Z     [32m  [32mâœ”[39m[0m[90m query result[0m
2025-04-11T19:24:01.9612927Z     [32m  [32mâœ”[39m[0m[90m of required previously existing null values[0m
2025-04-11T19:24:01.9846072Z     [32m  [32mâœ”[39m[0m[90m nested[0m
2025-04-11T19:24:02.0065823Z     [32m  [32mâœ”[39m[0m[90m of nested subdocuments[0m
2025-04-11T19:24:02.0175039Z     [32m  [32mâœ”[39m[0m[90m without saving[0m
2025-04-11T19:24:02.0322373Z     [32m  [32mâœ”[39m[0m[90m when required is set to false[0m
2025-04-11T19:24:02.0423014Z [0m      middleware[0m
2025-04-11T19:24:02.0617698Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:02.0708789Z [0m    defaults application[0m
2025-04-11T19:24:02.0758892Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:02.0905446Z     [32m  [32mâœ”[39m[0m[90m nested[0m
2025-04-11T19:24:02.1050618Z     [32m  [32mâœ”[39m[0m[90m subdocument[0m
2025-04-11T19:24:02.1336688Z     [32m  [32mâœ”[39m[0m[90m allows nulls[0m
2025-04-11T19:24:02.1404547Z [0m    virtuals[0m
2025-04-11T19:24:02.1464711Z     [32m  [32mâœ”[39m[0m[90m getters[0m
2025-04-11T19:24:02.1574199Z     [32m  [32mâœ”[39m[0m[90m set()[0m
2025-04-11T19:24:02.1836328Z     [32m  [32mâœ”[39m[0m[90m should not be saved to the db[0m
2025-04-11T19:24:02.1944684Z     [32m  [32mâœ”[39m[0m[90m nested[0m
2025-04-11T19:24:02.2047523Z [0m    .deleteOne()[0m
2025-04-11T19:24:02.2244462Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:02.2534289Z     [32m  [32mâœ”[39m[0m[90m errors when id deselected (gh-3118)[0m
2025-04-11T19:24:02.2786579Z     [32m  [32mâœ”[39m[0m[90m should not remove any records when deleting by id undefined[0m
2025-04-11T19:24:02.3046218Z     [32m  [32mâœ”[39m[0m[90m should not remove all documents in the collection (gh-3326)[0m
2025-04-11T19:24:02.3110416Z [0m    getters[0m
2025-04-11T19:24:02.3174917Z     [32m  [32mâœ”[39m[0m[90m with same name on embedded docs do not class[0m
2025-04-11T19:24:02.3381159Z     [32m  [32mâœ”[39m[0m[90m should not be triggered at construction (gh-685)[0m
2025-04-11T19:24:02.3508772Z     [32m  [32mâœ”[39m[0m[90m with type defined with { type: Native } (gh-190)[0m
2025-04-11T19:24:02.3599829Z [0m      nested[0m
2025-04-11T19:24:02.3671467Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:02.3817917Z       [32m  [32mâœ”[39m[0m[90m works with object literals[0m
2025-04-11T19:24:02.4058619Z       [32m  [32mâœ”[39m[0m[90m object property access works when root initd with null[0m
2025-04-11T19:24:02.4294983Z       [32m  [32mâœ”[39m[0m[90m object property access works when root initd with undefined[0m
2025-04-11T19:24:02.4526146Z       [32m  [32mâœ”[39m[0m[90m pre-existing null object re-save[0m
2025-04-11T19:24:02.4792197Z       [32m  [32mâœ”[39m[0m[90m array of Mixed on existing doc can be pushed to[0m
2025-04-11T19:24:02.5067589Z       [32m  [32mâœ”[39m[0m[90m props can be set directly when property was named "type"[0m
2025-04-11T19:24:02.5156529Z [0m    setters[0m
2025-04-11T19:24:02.5406862Z     [32m  [32mâœ”[39m[0m[90m are used on embedded docs (gh-365 gh-390 gh-422)[0m
2025-04-11T19:24:02.5480616Z [0m    atomic subdocument[0m
2025-04-11T19:24:02.6006795Z     [32m  [32mâœ”[39m[0m[90m saving[0m[33m (47ms)[0m
2025-04-11T19:24:02.6271512Z     [32m  [32mâœ”[39m[0m[90m setting (gh-310)[0m
2025-04-11T19:24:02.6338757Z [0m    saving embedded arrays[0m
2025-04-11T19:24:02.6571671Z     [32m  [32mâœ”[39m[0m[90m of Numbers atomically[0m
2025-04-11T19:24:02.6845532Z     [32m  [32mâœ”[39m[0m[90m of Strings atomically[0m
2025-04-11T19:24:02.7129326Z     [32m  [32mâœ”[39m[0m[90m of Buffers atomically[0m
2025-04-11T19:24:02.7402680Z     [32m  [32mâœ”[39m[0m[90m works with modified element properties + doc removal (gh-975)[0m
2025-04-11T19:24:02.7633216Z     [32m  [32mâœ”[39m[0m[90m updating an embedded document in an embedded array with set call[0m
2025-04-11T19:24:02.7700546Z [0m    embedded array filtering[0m
2025-04-11T19:24:02.7880699Z     [32m  [32mâœ”[39m[0m[90m by the id shortcut function[0m
2025-04-11T19:24:02.8092925Z     [32m  [32mâœ”[39m[0m[90m by the id with cast error[0m
2025-04-11T19:24:02.8305741Z     [32m  [32mâœ”[39m[0m[90m by the id shortcut with no match[0m
2025-04-11T19:24:02.8372709Z [0m    hooks[0m
2025-04-11T19:24:02.8383527Z [0m      pre[0m
2025-04-11T19:24:02.8577617Z       [32m  [32mâœ”[39m[0m[90m with undefined and null[0m
2025-04-11T19:24:02.8849075Z       [32m  [32mâœ”[39m[0m[90m called on all sub levels[0m
2025-04-11T19:24:02.8993637Z       [32m  [32mâœ”[39m[0m[90m error on any sub level[0m
2025-04-11T19:24:02.9079886Z [0m        init[0m
2025-04-11T19:24:02.9275534Z         [32m  [32mâœ”[39m[0m[90m has access to the true ObjectId when used with querying (gh-289)[0m
2025-04-11T19:24:02.9379044Z [0m      post[0m
2025-04-11T19:24:02.9596195Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:02.9910701Z       [32m  [32mâœ”[39m[0m[90m on embedded docs[0m
2025-04-11T19:24:03.0206545Z       [32m  [32mâœ”[39m[0m[90m callback should receive parameter of type document after bulkSave (gh-13026)[0m
2025-04-11T19:24:03.0298995Z [0m    #exec()[0m
2025-04-11T19:24:03.0469263Z     [32m  [32mâœ”[39m[0m[90m countDocuments()[0m
2025-04-11T19:24:03.0677924Z     [32m  [32mâœ”[39m[0m[90m estimatedDocumentCount()[0m
2025-04-11T19:24:03.0882012Z     [32m  [32mâœ”[39m[0m[90m updateOne()[0m
2025-04-11T19:24:03.1103928Z     [32m  [32mâœ”[39m[0m[90m findOne()[0m
2025-04-11T19:24:03.2848056Z     [32m  [32mâœ”[39m[0m[90m find()[0m[31m (164ms)[0m
2025-04-11T19:24:03.3109989Z     [32m  [32mâœ”[39m[0m[90m op can be changed[0m
2025-04-11T19:24:03.3156781Z [0m      promises[0m
2025-04-11T19:24:03.3345487Z       [32m  [32mâœ”[39m[0m[90m findOne()[0m
2025-04-11T19:24:03.3686493Z       [32m  [32mâœ”[39m[0m[90m find()[0m
2025-04-11T19:24:03.3778144Z [0m    console.log[0m
2025-04-11T19:24:03.3849034Z     [32m  [32mâœ”[39m[0m[90m hides private props[0m
2025-04-11T19:24:03.3950445Z [0m    pathnames[0m
2025-04-11T19:24:03.4016376Z     [32m  [32mâœ”[39m[0m[90m named path can be used[0m
2025-04-11T19:24:03.4151713Z [0m    RegExps[0m
2025-04-11T19:24:03.4332300Z     [32m  [32mâœ”[39m[0m[90m can be saved[0m
2025-04-11T19:24:03.4401034Z [0m    save()[0m
2025-04-11T19:24:03.4473415Z     [32m  [32mâœ”[39m[0m[90m rejects new documents that have no _id set (1595)[0m
2025-04-11T19:24:03.4813275Z     [32m  [32mâœ”[39m[0m[90m no TypeError when attempting to save more than once after using atomics[0m
2025-04-11T19:24:03.5107149Z     [32m  [32mâœ”[39m[0m[90m should clear $versionError and saveOptions after saved (gh-8040)[0m
2025-04-11T19:24:03.5392298Z     [32m  [32mâœ”[39m[0m[90m should only save paths specificed in the `pathsToSave` array (gh-9583)[0m
2025-04-11T19:24:03.5746592Z     [32m  [32mâœ”[39m[0m[90m should have `pathsToSave` work with subdocs (gh-9583)[0m
2025-04-11T19:24:03.6041418Z     [32m  [32mâœ”[39m[0m[90m should have `pathsToSave` work with doc arrays (gh-9583)[0m
2025-04-11T19:24:03.6099824Z [0m      when no callback is passed[0m
2025-04-11T19:24:03.6178092Z       [32m  [32mâœ”[39m[0m[90m should emit error on its Model when there are listeners[0m
2025-04-11T19:24:03.6318620Z [0m    _delta()[0m
2025-04-11T19:24:03.6518248Z     [32m  [32mâœ”[39m[0m[90m should overwrite arrays when directly set (gh-1126)[0m
2025-04-11T19:24:03.6783852Z     [32m  [32mâœ”[39m[0m[90m should use $set when subdoc changed before pulling (gh-1303)[0m
2025-04-11T19:24:03.6855336Z [0m    backward compatibility[0m
2025-04-11T19:24:03.7055997Z     [32m  [32mâœ”[39m[0m[90m with conflicted data in db[0m
2025-04-11T19:24:03.7326792Z     [32m  [32mâœ”[39m[0m[90m with positional notation on path not existing in schema (gh-1048)[0m
2025-04-11T19:24:03.7392495Z [0m    non-schema adhoc property assignments[0m
2025-04-11T19:24:03.7547357Z     [32m  [32mâœ”[39m[0m[90m are not saved[0m
2025-04-11T19:24:03.7601775Z [0m    setting an unset value[0m
2025-04-11T19:24:03.7815068Z     [32m  [32mâœ”[39m[0m[90m is saved (gh-742)[0m
2025-04-11T19:24:03.8075007Z     [32m  [32mâœ”[39m[0m[90m is saved object with proper defaults[0m
2025-04-11T19:24:03.8143201Z [0m    unsetting a default value[0m
2025-04-11T19:24:03.8316006Z     [32m  [32mâœ”[39m[0m[90m should be ignored (gh-758)[0m
2025-04-11T19:24:03.8387188Z [0m    Skip setting default value for Geospatial-indexed fields (gh-1668)[0m
2025-04-11T19:24:03.8581907Z     [32m  [32mâœ”[39m[0m[90m 2dsphere indexed field with value is saved[0m
2025-04-11T19:24:03.8814792Z     [32m  [32mâœ”[39m[0m[90m 2dsphere indexed field without value is saved (gh-1668)[0m
2025-04-11T19:24:03.9142786Z     [32m  [32mâœ”[39m[0m[90m 2dsphere indexed field in subdoc without value is saved[0m
2025-04-11T19:24:03.9337768Z     [32m  [32mâœ”[39m[0m[90m 2dsphere indexed field with geojson without value is saved (gh-3233)[0m
2025-04-11T19:24:03.9656870Z     [32m  [32mâœ”[39m[0m[90m Doc with 2dsphere indexed field without initial value can be updated[0m
2025-04-11T19:24:03.9959209Z     [32m  [32mâœ”[39m[0m[90m 2dsphere indexed required field without value is rejected[0m
2025-04-11T19:24:04.0281164Z     [32m  [32mâœ”[39m[0m[90m 2dsphere field without value but with schema default is saved[0m
2025-04-11T19:24:04.0587599Z     [32m  [32mâœ”[39m[0m[90m 2d indexed field without value is saved[0m
2025-04-11T19:24:04.0646843Z     [36m  - Compound index with 2dsphere field without value is saved[0m
2025-04-11T19:24:04.0648051Z     [36m  - Compound index on field earlier declared with 2dsphere index is saved[0m
2025-04-11T19:24:04.0658219Z [0m    max bson size error[0m
2025-04-11T19:24:04.2509836Z     [32m  [32mâœ”[39m[0m[90m save max bson size error with buffering (gh-3906)[0m[31m (179ms)[0m
2025-04-11T19:24:04.4176212Z     [32m  [32mâœ”[39m[0m[90m reports max bson size error in save (gh-3906)[0m[31m (153ms)[0m
2025-04-11T19:24:04.4280575Z [0m    bug fixes[0m
2025-04-11T19:24:04.4522573Z     [32m  [32mâœ”[39m[0m[90m doesnt crash (gh-1920)[0m
2025-04-11T19:24:04.4797596Z     [32m  [32mâœ”[39m[0m[90m doesnt reset "modified" status for fields[0m
2025-04-11T19:24:04.5076166Z     [32m  [32mâœ”[39m[0m[90m deleteOne() with options (gh-7857)[0m
2025-04-11T19:24:04.5344979Z     [32m  [32mâœ”[39m[0m[90m deleteMany() with options (gh-6805)[0m
2025-04-11T19:24:04.5455148Z     [32m  [32mâœ”[39m[0m[90m run default function with correct this scope in DocumentArray (gh-6840)[0m
2025-04-11T19:24:04.5621683Z     [32m  [32mâœ”[39m[0m[90m method with same name as prop should throw (gh-4475)[0m
2025-04-11T19:24:04.5888191Z     [32m  [32mâœ”[39m[0m[90m create() reuses existing doc if one passed in (gh-4449)[0m
2025-04-11T19:24:04.5994023Z     [32m  [32mâœ”[39m[0m[90m disabling id getter with .set() (gh-5548)[0m
2025-04-11T19:24:04.6346036Z     [32m  [32mâœ”[39m[0m[90m creates new array when initializing from existing doc (gh-4449)[0m
2025-04-11T19:24:04.6663433Z     [32m  [32mâœ”[39m[0m[90m deleteOne with cast error (gh-5323)[0m
2025-04-11T19:24:04.6766493Z     [32m  [32mâœ”[39m[0m[90m .create() with non-object (gh-2037)[0m
2025-04-11T19:24:04.7085159Z     [32m  [32mâœ”[39m[0m[90m bulkWrite casting updateMany, deleteOne, deleteMany (gh-3998)[0m
2025-04-11T19:24:04.7357144Z     [32m  [32mâœ”[39m[0m[90m bulkWrite casting replaceOne (gh-3998)[0m
2025-04-11T19:24:04.7618821Z     [32m  [32mâœ”[39m[0m[90m alias with lean virtual (gh-6069)[0m
2025-04-11T19:24:04.7959057Z     [32m  [32mâœ”[39m[0m[90m marks array as modified when initializing non-array from db (gh-2442)[0m
2025-04-11T19:24:04.8210799Z     [32m  [32mâœ”[39m[0m[90m Throws when saving same doc in parallel w/ callback (gh-6456)[0m
2025-04-11T19:24:04.8334180Z     [32m  [32mâœ”[39m[0m[90m using `new db.model()()` (gh-6698)[0m
2025-04-11T19:24:04.8653424Z     [32m  [32mâœ”[39m[0m[90m allows calling save in a post save hook (gh-6611)[0m
2025-04-11T19:24:04.8918599Z     [32m  [32mâœ”[39m[0m[90m createCollection() respects schema collation (gh-6489)[0m
2025-04-11T19:24:04.9261905Z     [32m  [32mâœ”[39m[0m[90m createCollection() respects timeseries (gh-10611)[0m
2025-04-11T19:24:04.9613599Z     [32m  [32mâœ”[39m[0m[90m createCollection() enforces expireAfterSeconds (gh-11229)[0m
2025-04-11T19:24:04.9932727Z     [32m  [32mâœ”[39m[0m[90m createCollection() enforces expires (gh-11229)[0m
2025-04-11T19:24:05.0252096Z     [32m  [32mâœ”[39m[0m[90m createCollection() enforces expireAfterSeconds when set by Schema (gh-11229)[0m
2025-04-11T19:24:05.0574752Z     [32m  [32mâœ”[39m[0m[90m createCollection() enforces expires when set by Schema (gh-11229)[0m
2025-04-11T19:24:05.0844785Z     [32m  [32mâœ”[39m[0m[90m createCollection() respects clusteredIndex[0m
2025-04-11T19:24:06.1197795Z     [32m  [32mâœ”[39m[0m[90m mongodb actually removes expired documents (gh-11229)[0m[31m (1026ms)[0m
2025-04-11T19:24:06.1441502Z     [32m  [32mâœ”[39m[0m[90m createCollection() handles NamespaceExists errors (gh-9447)[0m
2025-04-11T19:24:06.1498762Z [0m      3.6 features[0m
2025-04-11T19:24:06.1844104Z       [32m  [32mâœ”[39m[0m[90m arrayFilter (gh-5965)[0m
2025-04-11T19:24:06.2263127Z       [32m  [32mâœ”[39m[0m[90m arrayFilter casting (gh-5965) (gh-7079)[0m
2025-04-11T19:24:06.2671763Z       [32m  [32mâœ”[39m[0m[90m avoids unused array filter error (gh-9468)[0m
2025-04-11T19:24:06.2748652Z [0m        watch()[0m
2025-04-11T19:24:06.2763308Z         [36m  - watch() (gh-5964)[0m
2025-04-11T19:24:06.2765786Z         [36m  - bubbles up resumeTokenChanged events (gh-13607)[0m
2025-04-11T19:24:06.2766468Z         [36m  - using next() and hasNext() (gh-11527)[0m
2025-04-11T19:24:06.2767008Z         [36m  - fullDocument (gh-11936)[0m
2025-04-11T19:24:06.2767825Z         [36m  - fullDocument with immediate watcher and hydrate (gh-14049)[0m
2025-04-11T19:24:06.2768638Z         [36m  - respects discriminators (gh-11007)[0m
2025-04-11T19:24:06.2769332Z         [36m  - watch() before connecting (gh-5964)[0m
2025-04-11T19:24:06.2770439Z         [36m  - watch() close() prevents buffered watch op from running (gh-7022)[0m
2025-04-11T19:24:06.2771304Z         [36m  - watch() close() closes the stream (gh-7022)[0m
2025-04-11T19:24:06.2772039Z         [36m  - bubbles up resumeTokenChanged events (gh-14349)[0m
2025-04-11T19:24:06.2777026Z [0m        sessions (gh-6362)[0m
2025-04-11T19:24:06.2997723Z         [32m  [32mâœ”[39m[0m[90m startSession()[0m
2025-04-11T19:24:06.3354713Z         [32m  [32mâœ”[39m[0m[90m startSession() before connecting[0m
2025-04-11T19:24:06.3884028Z         [32m  [32mâœ”[39m[0m[90m sets session when pulling a document from db[0m
2025-04-11T19:24:06.4252635Z         [32m  [32mâœ”[39m[0m[90m sets session on child doc when creating new doc (gh-7104)[0m
2025-04-11T19:24:06.4601989Z         [32m  [32mâœ”[39m[0m[90m sets session when pulling multiple docs from db[0m
2025-04-11T19:24:06.4950912Z         [32m  [32mâœ”[39m[0m[90m supports overwriting `session` in save()[0m
2025-04-11T19:24:06.5056465Z [0m      bulkWrite casting[0m
2025-04-11T19:24:06.5323064Z       [32m  [32mâœ”[39m[0m[90m basic casting (gh-3998)[0m
2025-04-11T19:24:06.5586243Z       [32m  [32mâœ”[39m[0m[90m setDefaultsOnInsert (gh-5708)[0m
2025-04-11T19:24:06.5896370Z       [32m  [32mâœ”[39m[0m[90m timestamps (gh-5708)[0m
2025-04-11T19:24:06.6048195Z       [32m  [32mâœ”[39m[0m[90m throwOnValidationError (gh-14572)[0m
2025-04-11T19:24:06.6416127Z       [32m  [32mâœ”[39m[0m[90m handles array filters (gh-14978)[0m
2025-04-11T19:24:06.6823699Z       [32m  [32mâœ”[39m[0m[90m handles overwriteDiscriminatorKey (gh-15218) (gh-15040)[0m
2025-04-11T19:24:06.8114500Z       [32m  [32mâœ”[39m[0m[90m with child timestamps and array filters (gh-7032)[0m[31m (116ms)[0m
2025-04-11T19:24:06.8266808Z       [32m  [32mâœ”[39m[0m[90m throws readable error if invalid op[0m
2025-04-11T19:24:06.8710575Z       [32m  [32mâœ”[39m[0m[90m with timestamps and replaceOne (gh-5708)[0m
2025-04-11T19:24:06.9104046Z       [32m  [32mâœ”[39m[0m[90m with timestamps from merged schema (gh-13409)[0m
2025-04-11T19:24:06.9495405Z       [32m  [32mâœ”[39m[0m[90m with child timestamps (gh-7032)[0m
2025-04-11T19:24:06.9814523Z       [32m  [32mâœ”[39m[0m[90m sets version key (gh-13944)[0m
2025-04-11T19:24:07.0125196Z       [32m  [32mâœ”[39m[0m[90m with single nested and setOnInsert (gh-7534)[0m
2025-04-11T19:24:07.0419155Z       [32m  [32mâœ”[39m[0m[90m throws an error if no update object is provided (gh-8331)[0m
2025-04-11T19:24:07.1021126Z       [32m  [32mâœ”[39m[0m[90m casts according to child discriminator if `discriminatorKey` is present (gh-8982)[0m[33m (48ms)[0m
2025-04-11T19:24:07.1354164Z       [32m  [32mâœ”[39m[0m[90m insertOne and replaceOne should not throw an error when set `timestamps: false` in schmea (gh-10048)[0m
2025-04-11T19:24:07.1502323Z       [32m  [32mâœ”[39m[0m[90m casts objects with null prototype (gh-10512)[0m
2025-04-11T19:24:07.1701490Z       [32m  [32mâœ”[39m[0m[90m sends valid ops if ordered = false (gh-13176)[0m
2025-04-11T19:24:07.2056778Z       [32m  [32mâœ”[39m[0m[90m decorates write error with validation errors if unordered fails (gh-13176)[0m
2025-04-11T19:24:07.2323571Z       [32m  [32mâœ”[39m[0m[90m bulkWrite should throw an error if there were operations that failed validation, but all operations that passed validation succeeded (gh-13256)[0m
2025-04-11T19:24:07.2629041Z       [32m  [32mâœ”[39m[0m[90m casts $elemMatch filter (gh-14678)[0m
2025-04-11T19:24:07.2785777Z       [32m  [32mâœ”[39m[0m[90m throwOnValidationError (gh-14572) (gh-13256)[0m
2025-04-11T19:24:07.3178602Z       [32m  [32mâœ”[39m[0m[90m bulkWrite should throw an error if there were operations that failed validation, but all operations that passed validation succeeded (gh-13256)[0m
2025-04-11T19:24:07.3484438Z       [32m  [32mâœ”[39m[0m[90m bulkWrite should return both write errors and validation errors in error.results (gh-15265)[0m
2025-04-11T19:24:07.3572445Z [0m      Model.syncIndexes()[0m
2025-04-11T19:24:07.3840494Z       [32m  [32mâœ”[39m[0m[90m adds indexes to the collection[0m
2025-04-11T19:24:07.4128323Z       [32m  [32mâœ”[39m[0m[90m avoids creating collection if autoCreate: false[0m
2025-04-11T19:24:07.4545732Z       [32m  [32mâœ”[39m[0m[90m drops indexes that are not present in schema[0m
2025-04-11T19:24:07.4938842Z       [32m  [32mâœ”[39m[0m[90m when two different models connect to the same collection, syncIndexes(...) respects the last call[0m
2025-04-11T19:24:07.5372106Z       [32m  [32mâœ”[39m[0m[90m when two models have the same collection name, same field but different options, syncIndexes(...) respects the last call[0m
2025-04-11T19:24:07.5808239Z       [32m  [32mâœ”[39m[0m[90m when syncIndexes(...) is called twice with no changes on the model, the second call should not do anything[0m
2025-04-11T19:24:07.6221055Z       [32m  [32mâœ”[39m[0m[90m when called with different key order, it treats different order as different indexes (gh-8135)[0m
2025-04-11T19:24:07.6611592Z       [32m  [32mâœ”[39m[0m[90m syncIndexes(...) compound index including `_id` (gh-8559)[0m
2025-04-11T19:24:07.6926634Z       [32m  [32mâœ”[39m[0m[90m syncIndexes() allows overwriting `background` option (gh-8645)[0m
2025-04-11T19:24:07.7261504Z       [32m  [32mâœ”[39m[0m[90m syncIndexes() does not call createIndex for indexes that already exist[0m
2025-04-11T19:24:07.7649588Z       [32m  [32mâœ”[39m[0m[90m syncIndexes() supports hideIndexes (gh-14868)[0m
2025-04-11T19:24:07.7937640Z       [32m  [32mâœ”[39m[0m[90m should not drop a text index on .syncIndexes() call (gh-10850)[0m
2025-04-11T19:24:07.8399648Z       [32m  [32mâœ”[39m[0m[90m adding discriminators should not drop the parent model's indexes[0m
2025-04-11T19:24:07.8905959Z       [32m  [32mâœ”[39m[0m[90m syncing model with multiple discriminators works[0m
2025-04-11T19:24:07.9408304Z       [32m  [32mâœ”[39m[0m[90m syncing one discriminator's indexes should not drop the main model's indexes[0m
2025-04-11T19:24:08.0293938Z       [32m  [32mâœ”[39m[0m[90m syncing main model does not sync discrimator indexes[0m[33m (74ms)[0m
2025-04-11T19:24:08.0845953Z       [32m  [32mâœ”[39m[0m[90m syncing discriminator does not attempt to sync parent model's indexes[0m
2025-04-11T19:24:08.1131623Z       [32m  [32mâœ”[39m[0m[90m creates indexes only when they do not exist on the mongodb server (gh-12250)[0m
2025-04-11T19:24:08.1232610Z [0m    exists() (gh-6872) (gh-8097) (gh-11138)[0m
2025-04-11T19:24:08.1294985Z     [32m  [32mâœ”[39m[0m[90m returns a query[0m
2025-04-11T19:24:08.1650823Z     [32m  [32mâœ”[39m[0m[90m returns lean document with `_id` only if document exists[0m
2025-04-11T19:24:08.1778292Z     [32m  [32mâœ”[39m[0m[90m returns `null` when no document exists[0m
2025-04-11T19:24:08.2086126Z     [32m  [32mâœ”[39m[0m[90m returns `null` if no doc exists[0m
2025-04-11T19:24:08.2234931Z     [32m  [32mâœ”[39m[0m[90m options (gh-8075)[0m
2025-04-11T19:24:08.2334919Z [0m    returnOriginal (gh-9183)[0m
2025-04-11T19:24:08.2534434Z     [32m  [32mâœ”[39m[0m[90m Setting `returnOriginal` works[0m
2025-04-11T19:24:08.2878942Z     [32m  [32mâœ”[39m[0m[90m `returnOriginal` can be overwritten[0m
2025-04-11T19:24:08.2959484Z [0m    buildBulkWriteOperations() (gh-9673)[0m
2025-04-11T19:24:08.3176533Z     [32m  [32mâœ”[39m[0m[90m builds write operations[0m
2025-04-11T19:24:08.3300886Z     [32m  [32mâœ”[39m[0m[90m throws an error when one document is invalid[0m
2025-04-11T19:24:08.3491410Z     [32m  [32mâœ”[39m[0m[90m throws an error if documents is not an array[0m
2025-04-11T19:24:08.3672500Z     [32m  [32mâœ”[39m[0m[90m throws an error if one element is not a document[0m
2025-04-11T19:24:08.3845948Z     [32m  [32mâœ”[39m[0m[90m skips validation when given `skipValidation` true[0m
2025-04-11T19:24:08.4256354Z     [32m  [32mâœ”[39m[0m[90m saves changes in discriminators if calling `bulkSave()` on base model (gh-13907)[0m
2025-04-11T19:24:08.4505653Z     [32m  [32mâœ”[39m[0m[90m accepts `timestamps: false` (gh-12059)[0m
2025-04-11T19:24:08.4777930Z     [32m  [32mâœ”[39m[0m[90m accepts `timestamps: true` (gh-12059)[0m
2025-04-11T19:24:08.5071830Z     [32m  [32mâœ”[39m[0m[90m `timestamps` has `undefined` as default value (gh-12059)[0m
2025-04-11T19:24:08.5415657Z     [32m  [32mâœ”[39m[0m[90m should not modify the object in the $set clause and not error when dealing with or without timestamps (gh-14164)[0m
2025-04-11T19:24:08.5500336Z [0m    bulkSave() (gh-9673)[0m
2025-04-11T19:24:08.5729260Z     [32m  [32mâœ”[39m[0m[90m saves new documents[0m
2025-04-11T19:24:08.6025426Z     [32m  [32mâœ”[39m[0m[90m updates documents[0m
2025-04-11T19:24:08.6358398Z     [32m  [32mâœ”[39m[0m[90m insertMany should throw an error if there were operations that failed validation, but all operations that passed validation succeeded (gh-14572) (gh-13256)[0m
2025-04-11T19:24:08.6641530Z     [32m  [32mâœ”[39m[0m[90m insertMany should return both write errors and validation errors in error.results (gh-15265)[0m
2025-04-11T19:24:08.6904068Z     [32m  [32mâœ”[39m[0m[90m insertMany should return both write errors and validation errors in error.results with rawResult (gh-15265)[0m
2025-04-11T19:24:08.7195994Z     [32m  [32mâœ”[39m[0m[90m returns writeResult on success[0m
2025-04-11T19:24:08.7454453Z     [32m  [32mâœ”[39m[0m[90m throws an error on failure[0m
2025-04-11T19:24:08.7666601Z     [32m  [32mâœ”[39m[0m[90m changes document state from `isNew` `false` to `true`[0m
2025-04-11T19:24:08.7932671Z     [32m  [32mâœ”[39m[0m[90m sets `isNew` to false when a document succeeds and `isNew` does not change when some fail[0m
2025-04-11T19:24:08.8201218Z     [32m  [32mâœ”[39m[0m[90m changes documents state for successful writes[0m
2025-04-11T19:24:08.8415210Z     [32m  [32mâœ”[39m[0m[90m triggers pre/post-save hooks[0m
2025-04-11T19:24:08.8777587Z     [32m  [32mâœ”[39m[0m[90m calls pre-save before actually saving[0m
2025-04-11T19:24:08.9045280Z     [32m  [32mâœ”[39m[0m[90m works if some document is not modified (gh-10437)[0m
2025-04-11T19:24:08.9347573Z     [32m  [32mâœ”[39m[0m[90m should error if no documents were inserted or updated (gh-14763)[0m
2025-04-11T19:24:08.9709237Z     [32m  [32mâœ”[39m[0m[90m should error if not all documents were inserted or updated (gh-14763)[0m
2025-04-11T19:24:08.9847103Z     [32m  [32mâœ”[39m[0m[90m should error if there is a validation error[0m
2025-04-11T19:24:09.0288234Z     [32m  [32mâœ”[39m[0m[90m Using bulkSave should not trigger an error (gh-11071)[0m
2025-04-11T19:24:09.0553375Z     [32m  [32mâœ”[39m[0m[90m accepts `timestamps: false` (gh-12059)[0m
2025-04-11T19:24:09.0794324Z     [32m  [32mâœ”[39m[0m[90m accepts `timestamps: true` (gh-12059)[0m
2025-04-11T19:24:09.1074489Z     [32m  [32mâœ”[39m[0m[90m `timestamps` has `undefined` as default value (gh-12059)[0m
2025-04-11T19:24:09.1336513Z     [32m  [32mâœ”[39m[0m[90m respects `$timestamps()` (gh-12117)[0m
2025-04-11T19:24:09.1412194Z [0m    Setting the explain flag[0m
2025-04-11T19:24:09.1809704Z     [32m  [32mâœ”[39m[0m[90m should give an object back rather than a boolean (gh-8275)[0m
2025-04-11T19:24:09.1889752Z [0m    Model.applyDefaults (gh-11945)[0m
2025-04-11T19:24:09.1966917Z     [32m  [32mâœ”[39m[0m[90m applies defaults to POJOs[0m
2025-04-11T19:24:09.2147312Z     [32m  [32mâœ”[39m[0m[90m applies defaults to documents[0m
2025-04-11T19:24:09.2274769Z [0m    castObject() (gh-11945)[0m
2025-04-11T19:24:09.2346874Z     [32m  [32mâœ”[39m[0m[90m casts values[0m
2025-04-11T19:24:09.2593912Z     [32m  [32mâœ”[39m[0m[90m throws if cannot cast[0m
2025-04-11T19:24:09.2800295Z     [32m  [32mâœ”[39m[0m[90m should not throw an error if `ignoreCastErrors` is set (gh-12156)[0m
2025-04-11T19:24:09.3002621Z     [32m  [32mâœ”[39m[0m[90m handles discriminators (gh-15075)[0m
2025-04-11T19:24:09.3169868Z     [32m  [32mâœ”[39m[0m[90m handles castNonArrays when document array is set to non-array value (gh-15075)[0m
2025-04-11T19:24:09.3341516Z     [32m  [32mâœ”[39m[0m[90m handles document arrays (gh-15164)[0m
2025-04-11T19:24:09.3465967Z [0m    Check if static function that is supplied in schema option is available[0m
2025-04-11T19:24:09.3529613Z     [32m  [32mâœ”[39m[0m[90m should give a static function back rather than undefined[0m
2025-04-11T19:24:09.3686655Z [0m    Bypass middleware[0m
2025-04-11T19:24:09.3903387Z     [32m  [32mâœ”[39m[0m[90m should bypass middleware if save is called on a document with no changes gh-13250[0m
2025-04-11T19:24:09.3979859Z [0m    Model.useConnection() (gh-14802)[0m
2025-04-11T19:24:09.4269912Z     [32m  [32mâœ”[39m[0m[90m updates the model's db property to point to the provided connection instance and vice versa (gh-14802))[0m
2025-04-11T19:24:09.4396838Z     [32m  [32mâœ”[39m[0m[90m should throw an error if no connection is passed[0m
2025-04-11T19:24:09.4541986Z [0m    applyVirtuals[0m
2025-04-11T19:24:09.4603345Z     [32m  [32mâœ”[39m[0m[90m handles basic top-level virtuals[0m
2025-04-11T19:24:09.4804923Z     [32m  [32mâœ”[39m[0m[90m handles virtuals in subdocuments[0m
2025-04-11T19:24:09.4978408Z     [32m  [32mâœ”[39m[0m[90m handles virtuals on nested paths[0m
2025-04-11T19:24:09.5147840Z     [32m  [32mâœ”[39m[0m[90m supports passing an array of virtuals to apply[0m
2025-04-11T19:24:09.5330282Z     [32m  [32mâœ”[39m[0m[90m sets populate virtuals to `null` if `justOne`[0m
2025-04-11T19:24:09.5479894Z [0m    applyTimestamps[0m
2025-04-11T19:24:09.5546808Z     [32m  [32mâœ”[39m[0m[90m handles basic top-level timestamps[0m
2025-04-11T19:24:09.6054515Z     [32m  [32mâœ”[39m[0m[90m no-op if timestamps not set[0m
2025-04-11T19:24:09.6272756Z     [32m  [32mâœ”[39m[0m[90m handles custom timestamp property names[0m
2025-04-11T19:24:09.6450801Z     [32m  [32mâœ”[39m[0m[90m applies timestamps to subdocs[0m
2025-04-11T19:24:09.6647703Z     [32m  [32mâœ”[39m[0m[90m supports isUpdate and currentTime options[0m
2025-04-11T19:24:09.6772344Z [0m    diffIndexes()[0m
2025-04-11T19:24:09.7106312Z     [32m  [32mâœ”[39m[0m[90m avoids trying to drop timeseries collections (gh-14984)[0m
2025-04-11T19:24:09.7188941Z [0m    insertOne() (gh-14843)[0m
2025-04-11T19:24:09.7432996Z     [32m  [32mâœ”[39m[0m[90m should insert a new document[0m
2025-04-11T19:24:09.7801220Z     [32m  [32mâœ”[39m[0m[90m should support validateBeforeSave: false option[0m
2025-04-11T19:24:09.7921372Z 
2025-04-11T19:24:09.7922073Z [0m  model: querying:[0m
2025-04-11T19:24:09.8134292Z   [32m  [32mâœ”[39m[0m[90m find returns a Query[0m
2025-04-11T19:24:09.8284950Z   [32m  [32mâœ”[39m[0m[90m findOne returns a Query[0m
2025-04-11T19:24:09.8673866Z   [32m  [32mâœ”[39m[0m[90m by Date (gh-336)[0m
2025-04-11T19:24:09.9019424Z   [32m  [32mâœ”[39m[0m[90m mixed types with $elemMatch (gh-591)[0m
2025-04-11T19:24:09.9497849Z   [32m  [32mâœ”[39m[0m[90m works with different methods and query types[0m[33m (38ms)[0m
2025-04-11T19:24:10.0016380Z   [32m  [32mâœ”[39m[0m[90m with conditionals[0m[33m (42ms)[0m
2025-04-11T19:24:10.0205276Z   [32m  [32mâœ”[39m[0m[90m with previously existing null values in the db[0m
2025-04-11T19:24:10.0459678Z   [32m  [32mâœ”[39m[0m[90m with unused values in the db[0m
2025-04-11T19:24:10.0751101Z   [32m  [32mâœ”[39m[0m[90m does not apply string schema setters on $regex (gh-11426)[0m
2025-04-11T19:24:10.0881872Z [0m    distinct[0m
2025-04-11T19:24:10.0948327Z     [32m  [32mâœ”[39m[0m[90m returns a Query[0m
2025-04-11T19:24:10.1338065Z     [32m  [32mâœ”[39m[0m[90m executes when you exec[0m
2025-04-11T19:24:10.1744739Z     [32m  [32mâœ”[39m[0m[90m permits excluding conditions gh-1541[0m
2025-04-11T19:24:10.1828440Z [0m    updateOne[0m
2025-04-11T19:24:10.1883920Z     [32m  [32mâœ”[39m[0m[90m returns a Query[0m
2025-04-11T19:24:10.2205188Z     [32m  [32mâœ”[39m[0m[90m can handle minimize option (gh-3381)[0m
2025-04-11T19:24:10.2271369Z [0m    findOne[0m
2025-04-11T19:24:10.2518497Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:10.2761793Z     [32m  [32mâœ”[39m[0m[90m casts $modifiers[0m
2025-04-11T19:24:10.3007077Z     [32m  [32mâœ”[39m[0m[90m querying if an array contains one of multiple members $in a set[0m
2025-04-11T19:24:10.3256790Z     [32m  [32mâœ”[39m[0m[90m querying if an array contains one of multiple members $in a set 2[0m
2025-04-11T19:24:10.3746844Z     [32m  [32mâœ”[39m[0m[90m querying via $where a string[0m[33m (39ms)[0m
2025-04-11T19:24:10.3998981Z     [32m  [32mâœ”[39m[0m[90m querying via $where a function[0m
2025-04-11T19:24:10.4259404Z     [32m  [32mâœ”[39m[0m[90m based on nested fields[0m
2025-04-11T19:24:10.4524014Z     [32m  [32mâœ”[39m[0m[90m based on embedded doc fields (gh-242, gh-463)[0m
2025-04-11T19:24:10.4762272Z     [32m  [32mâœ”[39m[0m[90m works with nested docs and string ids (gh-389)[0m
2025-04-11T19:24:10.4998851Z     [32m  [32mâœ”[39m[0m[90m using #all with nested #elemMatch[0m
2025-04-11T19:24:10.5274644Z     [32m  [32mâœ”[39m[0m[90m using #or with nested #elemMatch[0m
2025-04-11T19:24:10.5516060Z     [32m  [32mâœ”[39m[0m[90m buffer $in array[0m
2025-04-11T19:24:10.5769301Z     [32m  [32mâœ”[39m[0m[90m regex with Array (gh-599)[0m
2025-04-11T19:24:10.6004349Z     [32m  [32mâœ”[39m[0m[90m regex with options[0m
2025-04-11T19:24:10.6229577Z     [32m  [32mâœ”[39m[0m[90m works with $elemMatch and $in combo (gh-1100)[0m
2025-04-11T19:24:10.6292294Z [0m    findById[0m
2025-04-11T19:24:10.6469650Z     [32m  [32mâœ”[39m[0m[90m handles undefined[0m
2025-04-11T19:24:10.6706296Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:10.6984904Z     [32m  [32mâœ”[39m[0m[90m works with partial initialization[0m
2025-04-11T19:24:10.7205954Z     [32m  [32mâœ”[39m[0m[90m querying if an array contains at least a certain single member (gh-220)[0m
2025-04-11T19:24:10.7455741Z     [32m  [32mâœ”[39m[0m[90m where an array where the $slice operator[0m
2025-04-11T19:24:10.7528742Z [0m    find[0m
2025-04-11T19:24:10.7729968Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:10.8047821Z     [32m  [32mâœ”[39m[0m[90m returns docs where an array that contains one specific member[0m
2025-04-11T19:24:10.8363449Z     [32m  [32mâœ”[39m[0m[90m works when comparing $ne with single value against an array[0m
2025-04-11T19:24:10.8636362Z     [32m  [32mâœ”[39m[0m[90m with partial initialization[0m
2025-04-11T19:24:10.8951324Z     [32m  [32mâœ”[39m[0m[90m where $exists[0m
2025-04-11T19:24:10.9185355Z     [32m  [32mâœ”[39m[0m[90m works with $elemMatch (gh-1100)[0m
2025-04-11T19:24:10.9451071Z     [32m  [32mâœ”[39m[0m[90m where $mod[0m
2025-04-11T19:24:10.9727658Z     [32m  [32mâœ”[39m[0m[90m where $not[0m
2025-04-11T19:24:11.0071485Z     [32m  [32mâœ”[39m[0m[90m where or()[0m
2025-04-11T19:24:11.0358954Z     [32m  [32mâœ”[39m[0m[90m using $or with array of Document[0m
2025-04-11T19:24:11.0608426Z     [32m  [32mâœ”[39m[0m[90m where $ne[0m
2025-04-11T19:24:11.0998435Z     [32m  [32mâœ”[39m[0m[90m where $nor[0m
2025-04-11T19:24:11.1285683Z     [32m  [32mâœ”[39m[0m[90m STRICT null matches[0m
2025-04-11T19:24:11.1557827Z     [32m  [32mâœ”[39m[0m[90m null matches null and undefined[0m
2025-04-11T19:24:11.1849574Z     [32m  [32mâœ”[39m[0m[90m a document whose arrays contain at least $all string values[0m
2025-04-11T19:24:11.2166092Z     [32m  [32mâœ”[39m[0m[90m using #nor with nested #elemMatch[0m
2025-04-11T19:24:11.2438983Z     [32m  [32mâœ”[39m[0m[90m strings via regexp[0m
2025-04-11T19:24:11.2753763Z     [32m  [32mâœ”[39m[0m[90m a document whose arrays contain at least $all values[0m
2025-04-11T19:24:11.3004355Z     [32m  [32mâœ”[39m[0m[90m where $size[0m
2025-04-11T19:24:11.3318497Z     [32m  [32mâœ”[39m[0m[90m $gt, $lt, $lte, $gte work on strings[0m
2025-04-11T19:24:11.3395761Z [0m      text search indexes[0m
2025-04-11T19:24:11.3688410Z       [32m  [32mâœ”[39m[0m[90m works with text search ensure indexes [0m
2025-04-11T19:24:11.3972557Z       [32m  [32mâœ”[39m[0m[90m works when text search is called by a schema (gh-3824) (gh-6851)[0m
2025-04-11T19:24:11.4071911Z [0m    limit[0m
2025-04-11T19:24:11.4267987Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:11.4347300Z [0m    skip[0m
2025-04-11T19:24:11.4544049Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:11.4621953Z [0m    sort[0m
2025-04-11T19:24:11.4818744Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:11.5135621Z     [32m  [32mâœ”[39m[0m[90m handles sorting by text score[0m
2025-04-11T19:24:11.5267223Z [0m    nested mixed "x.y.z"[0m
2025-04-11T19:24:11.5340626Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:11.5431567Z [0m    $all[0m
2025-04-11T19:24:11.5681899Z     [32m  [32mâœ”[39m[0m[90m with ObjectIds (gh-690)[0m
2025-04-11T19:24:11.6019477Z     [32m  [32mâœ”[39m[0m[90m with Dates[0m
2025-04-11T19:24:11.6429172Z     [32m  [32mâœ”[39m[0m[90m with $elemMatch (gh-3163)[0m
2025-04-11T19:24:11.6515827Z [0m    and[0m
2025-04-11T19:24:11.6749207Z     [32m  [32mâœ”[39m[0m[90m works with queries gh-1188[0m
2025-04-11T19:24:11.6879864Z     [32m  [32mâœ”[39m[0m[90m works with nested query selectors gh-1884[0m
2025-04-11T19:24:11.7012274Z [0m    2d[0m
2025-04-11T19:24:11.7243921Z     [32m  [32mâœ”[39m[0m[90m $near (gh-309)[0m
2025-04-11T19:24:11.7571970Z     [32m  [32mâœ”[39m[0m[90m $within arrays (gh-586)[0m
2025-04-11T19:24:11.7863229Z     [32m  [32mâœ”[39m[0m[90m $nearSphere with arrays (gh-610)[0m
2025-04-11T19:24:11.8135959Z     [32m  [32mâœ”[39m[0m[90m $nearSphere with invalid coordinate does not crash (gh-1874)[0m
2025-04-11T19:24:11.8415537Z     [32m  [32mâœ”[39m[0m[90m $maxDistance with arrays[0m
2025-04-11T19:24:11.8479111Z [0m    2dsphere[0m
2025-04-11T19:24:11.8620387Z     [32m  [32mâœ”[39m[0m[90m index is allowed in schema[0m
2025-04-11T19:24:11.8682656Z [0m      $geometry[0m
2025-04-11T19:24:11.8878083Z       [32m  [32mâœ”[39m[0m[90m Polygon[0m
2025-04-11T19:24:11.8952534Z [0m      $geoIntersects[0m
2025-04-11T19:24:11.9162803Z       [32m  [32mâœ”[39m[0m[90m LineString[0m
2025-04-11T19:24:11.9414315Z       [32m  [32mâœ”[39m[0m[90m MultiLineString[0m
2025-04-11T19:24:11.9679973Z       [32m  [32mâœ”[39m[0m[90m MultiPolygon[0m
2025-04-11T19:24:11.9752047Z [0m      $near[0m
2025-04-11T19:24:11.9975031Z       [32m  [32mâœ”[39m[0m[90m Point[0m
2025-04-11T19:24:12.0231348Z       [32m  [32mâœ”[39m[0m[90m works with GeoJSON (gh-1482)[0m
2025-04-11T19:24:12.0483289Z       [32m  [32mâœ”[39m[0m[90m works with legacy 2dsphere pair in schema (gh-6937)[0m
2025-04-11T19:24:12.0575349Z [0m    hashed indexes[0m
2025-04-11T19:24:12.0835415Z     [32m  [32mâœ”[39m[0m[90m work[0m
2025-04-11T19:24:12.0899340Z [0m    lean[0m
2025-04-11T19:24:12.1074146Z     [32m  [32mâœ”[39m[0m[90m find[0m
2025-04-11T19:24:12.1289398Z     [32m  [32mâœ”[39m[0m[90m removes the __v property if versionKey: false is set (gh-8934)[0m
2025-04-11T19:24:12.1479003Z     [32m  [32mâœ”[39m[0m[90m findOne[0m
2025-04-11T19:24:12.1580409Z     [32m  [32mâœ”[39m[0m[90m properly casts nested and/or queries (gh-676)[0m
2025-04-11T19:24:12.1747054Z     [32m  [32mâœ”[39m[0m[90m properly casts deeply nested and/or queries (gh-676)[0m
2025-04-11T19:24:12.2040476Z     [32m  [32mâœ”[39m[0m[90m casts $elemMatch (gh-2199)[0m
2025-04-11T19:24:12.2152719Z     [32m  [32mâœ”[39m[0m[90m does not run resetId setter on query (gh-6093)[0m
2025-04-11T19:24:12.2253840Z [0m      $eq[0m
2025-04-11T19:24:12.2331540Z       [32m  [32mâœ”[39m[0m[90m casts $eq (gh-2752)[0m
2025-04-11T19:24:12.2461445Z 
2025-04-11T19:24:12.2462064Z [0m  Double[0m
2025-04-11T19:24:12.2502822Z   [32m  [32mâœ”[39m[0m[90m is a valid schema type[0m
2025-04-11T19:24:12.2524784Z [0m    supports the required property[0m
2025-04-11T19:24:12.2575525Z     [32m  [32mâœ”[39m[0m[90m when value is null[0m
2025-04-11T19:24:12.2646075Z     [32m  [32mâœ”[39m[0m[90m when value is non-null[0m
2025-04-11T19:24:12.2689376Z [0m    special inputs[0m
2025-04-11T19:24:12.2726481Z     [32m  [32mâœ”[39m[0m[90m supports undefined as input[0m
2025-04-11T19:24:12.2795069Z     [32m  [32mâœ”[39m[0m[90m supports null as input[0m
2025-04-11T19:24:12.2838533Z [0m    valid casts[0m
2025-04-11T19:24:12.2887277Z     [32m  [32mâœ”[39m[0m[90m casts from decimal string[0m
2025-04-11T19:24:12.2956491Z     [32m  [32mâœ”[39m[0m[90m casts from exponential string[0m
2025-04-11T19:24:12.3026224Z     [32m  [32mâœ”[39m[0m[90m casts from infinite string[0m
2025-04-11T19:24:12.3095576Z     [32m  [32mâœ”[39m[0m[90m casts from NaN string[0m
2025-04-11T19:24:12.3164204Z     [32m  [32mâœ”[39m[0m[90m casts from number[0m
2025-04-11T19:24:12.3232837Z     [32m  [32mâœ”[39m[0m[90m casts from bigint[0m
2025-04-11T19:24:12.3301382Z     [32m  [32mâœ”[39m[0m[90m casts from BSON.Long[0m
2025-04-11T19:24:12.3370405Z     [32m  [32mâœ”[39m[0m[90m casts from BSON.Double[0m
2025-04-11T19:24:12.3438292Z     [32m  [32mâœ”[39m[0m[90m casts boolean true to 1[0m
2025-04-11T19:24:12.3508062Z     [32m  [32mâœ”[39m[0m[90m casts boolean false to 0[0m
2025-04-11T19:24:12.3566224Z     [32m  [32mâœ”[39m[0m[90m casts empty string to null[0m
2025-04-11T19:24:12.3635244Z     [32m  [32mâœ”[39m[0m[90m supports valueOf() function [0m
2025-04-11T19:24:12.3678413Z [0m    cast errors[0m
2025-04-11T19:24:12.3689650Z [0m      when a non-numeric string is provided to an Double field[0m
2025-04-11T19:24:12.3758382Z       [32m  [32mâœ”[39m[0m[90m throws a CastError upon validation[0m
2025-04-11T19:24:12.3822960Z [0m    custom casters[0m
2025-04-11T19:24:12.3876505Z     [32m  [32mâœ”[39m[0m[90m supports cast disabled[0m
2025-04-11T19:24:12.3946308Z     [32m  [32mâœ”[39m[0m[90m supports custom cast[0m
2025-04-11T19:24:12.3989817Z [0m    mongoDB integration[0m
2025-04-11T19:24:12.4331784Z     [32m  [32mâœ”[39m[0m[90m can query with comparison operators[0m
2025-04-11T19:24:12.4582175Z     [32m  [32mâœ”[39m[0m[90m supports populate()[0m
2025-04-11T19:24:12.4615002Z [0m      $type compatibility[0m
2025-04-11T19:24:12.4697311Z       [32m  [32mâœ”[39m[0m[90m is queryable as a JS number in MongoDB[0m
2025-04-11T19:24:12.4806769Z       [32m  [32mâœ”[39m[0m[90m is NOT queryable as a BSON Integer in MongoDB if the value is NOT integer[0m
2025-04-11T19:24:12.4914661Z       [32m  [32mâœ”[39m[0m[90m is queryable as a BSON Double in MongoDB when a non-integer is provided[0m
2025-04-11T19:24:12.5022081Z       [32m  [32mâœ”[39m[0m[90m is queryable as a BSON Double in MongoDB when an integer is provided[0m
2025-04-11T19:24:12.5130901Z 
2025-04-11T19:24:12.5131486Z [0m  schema.documentarray[0m
2025-04-11T19:24:12.5185335Z   [32m  [32mâœ”[39m[0m[90m defaults should be preserved[0m
2025-04-11T19:24:12.5243058Z   [32m  [32mâœ”[39m[0m[90m only sets if document has same schema (gh-3701)[0m
2025-04-11T19:24:12.5290634Z   [32m  [32mâœ”[39m[0m[90m sets $implicitlyCreated if created by interpretAsType (gh-4271)[0m
2025-04-11T19:24:12.5335827Z   [32m  [32mâœ”[39m[0m[90m propagates strictQuery to implicitly created schemas (gh-12796)[0m
2025-04-11T19:24:12.5389132Z   [32m  [32mâœ”[39m[0m[90m supports set with array of document arrays (gh-7799)[0m
2025-04-11T19:24:12.5442299Z   [32m  [32mâœ”[39m[0m[90m supports `set()` (gh-8883)[0m
2025-04-11T19:24:12.5490058Z   [32m  [32mâœ”[39m[0m[90m handles default function that returns null (gh-11058)[0m
2025-04-11T19:24:12.5544769Z   [32m  [32mâœ”[39m[0m[90m doValidate() validates entire subdocument (gh-11770)[0m
2025-04-11T19:24:12.5576845Z 
2025-04-11T19:24:12.5577729Z [0m  SchemaType.cast() (gh-7045)[0m
2025-04-11T19:24:12.5616562Z   [32m  [32mâœ”[39m[0m[90m with inheritance[0m
2025-04-11T19:24:12.5668381Z   [32m  [32mâœ”[39m[0m[90m handles objectid[0m
2025-04-11T19:24:12.5715348Z   [32m  [32mâœ”[39m[0m[90m handles disabling casting[0m
2025-04-11T19:24:12.5764110Z   [32m  [32mâœ”[39m[0m[90m handles boolean[0m
2025-04-11T19:24:12.5811019Z   [32m  [32mâœ”[39m[0m[90m handles disabling casting[0m
2025-04-11T19:24:12.5833041Z [0m    string[0m
2025-04-11T19:24:12.5882706Z     [32m  [32mâœ”[39m[0m[90m supports custom cast functions[0m
2025-04-11T19:24:12.5949993Z     [32m  [32mâœ”[39m[0m[90m supports disabling casting[0m
2025-04-11T19:24:12.5994053Z [0m    date[0m
2025-04-11T19:24:12.6044070Z     [32m  [32mâœ”[39m[0m[90m supports custom cast functions[0m
2025-04-11T19:24:12.6111660Z     [32m  [32mâœ”[39m[0m[90m supports disabling casting[0m
2025-04-11T19:24:12.6155918Z [0m    decimal128[0m
2025-04-11T19:24:12.6206051Z     [32m  [32mâœ”[39m[0m[90m supports custom cast functions[0m
2025-04-11T19:24:12.6274786Z     [32m  [32mâœ”[39m[0m[90m supports disabling casting[0m
2025-04-11T19:24:12.6328601Z 
2025-04-11T19:24:12.6328893Z [0m  schematype[0m
2025-04-11T19:24:12.6339954Z [0m    boolean[0m
2025-04-11T19:24:12.6394376Z     [32m  [32mâœ”[39m[0m[90m null default is permitted (gh-523)[0m
2025-04-11T19:24:12.6448965Z 
2025-04-11T19:24:12.6450317Z [0m  types array[0m
2025-04-11T19:24:12.6500311Z   [32m  [32mâœ”[39m[0m[90m behaves and quacks like an Array[0m
2025-04-11T19:24:12.6570783Z   [32m  [32mâœ”[39m[0m[90m is `deepEqual()` another array (gh-7700)[0m
2025-04-11T19:24:12.6678053Z   [32m  [32mâœ”[39m[0m[90m does not mutate passed-in array (gh-10766)[0m
2025-04-11T19:24:12.6791467Z   [32m  [32mâœ”[39m[0m[90m test "castNonArrays" property option[0m
2025-04-11T19:24:12.6892538Z   [32m  [32mâœ”[39m[0m[90m `castNonArrays` on specific paths takes precedence over global option[0m
2025-04-11T19:24:12.6956884Z   [32m  [32mâœ”[39m[0m[90m supports setting nested arrays directly (gh-13372)[0m
2025-04-11T19:24:12.7062555Z   [32m  [32mâœ”[39m[0m[90m calls array setters (gh-11380)[0m
2025-04-11T19:24:12.7139516Z [0m    hasAtomics[0m
2025-04-11T19:24:12.7184256Z     [32m  [32mâœ”[39m[0m[90m does not throw[0m
2025-04-11T19:24:12.7240552Z [0m    indexOf()[0m
2025-04-11T19:24:12.7547120Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:12.7608998Z [0m    includes()[0m
2025-04-11T19:24:12.7916428Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:12.7979531Z [0m    push()[0m
2025-04-11T19:24:12.8215661Z     [32m  [32mâœ”[39m[0m[90m works with numbers[0m
2025-04-11T19:24:12.8438673Z     [32m  [32mâœ”[39m[0m[90m works with strings[0m
2025-04-11T19:24:12.8652525Z     [32m  [32mâœ”[39m[0m[90m works with buffers[0m
2025-04-11T19:24:12.8874307Z     [32m  [32mâœ”[39m[0m[90m works with mixed[0m
2025-04-11T19:24:12.9090883Z     [32m  [32mâœ”[39m[0m[90m works with sub-docs[0m
2025-04-11T19:24:12.9295232Z     [32m  [32mâœ”[39m[0m[90m applies setters (gh-3032)[0m
2025-04-11T19:24:12.9357551Z [0m    splice()[0m
2025-04-11T19:24:12.9531945Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:12.9748867Z     [32m  [32mâœ”[39m[0m[90m on embedded docs[0m
2025-04-11T19:24:12.9808605Z [0m    unshift()[0m
2025-04-11T19:24:13.0008979Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:13.0199918Z     [32m  [32mâœ”[39m[0m[90m applies setters (gh-3032)[0m
2025-04-11T19:24:13.0259226Z [0m    shift()[0m
2025-04-11T19:24:13.0438439Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:13.0498480Z [0m    $shift[0m
2025-04-11T19:24:13.0681663Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:13.0741294Z [0m    pop()[0m
2025-04-11T19:24:13.0922935Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:13.0983850Z [0m    pull()[0m
2025-04-11T19:24:13.1200955Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:13.1403957Z     [32m  [32mâœ”[39m[0m[90m registers $pull atomic if pulling from middle (gh-14502)[0m
2025-04-11T19:24:13.1630995Z     [32m  [32mâœ”[39m[0m[90m handles pulling with no _id (gh-3341)[0m
2025-04-11T19:24:13.1857493Z     [32m  [32mâœ”[39m[0m[90m properly works with undefined[0m
2025-04-11T19:24:13.1950484Z     [32m  [32mâœ”[39m[0m[90m avoids adding default paths to query filter (gh-12294)[0m
2025-04-11T19:24:13.2077938Z     [32m  [32mâœ”[39m[0m[90m avoids adding default paths to query filter with _id (gh-12294)[0m
2025-04-11T19:24:13.2161049Z [0m    $pop()[0m
2025-04-11T19:24:13.2335899Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:13.2396843Z [0m    addToSet()[0m
2025-04-11T19:24:13.2623854Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:13.2830981Z     [32m  [32mâœ”[39m[0m[90m handles sub-documents that do not have an _id gh-1973[0m
2025-04-11T19:24:13.3022138Z     [32m  [32mâœ”[39m[0m[90m applies setters (gh-3032)[0m
2025-04-11T19:24:13.3080817Z [0m    options[0m
2025-04-11T19:24:13.3149597Z     [32m  [32mâœ”[39m[0m[90m castNonArrays (gh-7371) (gh-7479)[0m
2025-04-11T19:24:13.3415289Z     [32m  [32mâœ”[39m[0m[90m works with $addToSet and $push (gh-7479)[0m
2025-04-11T19:24:13.3476239Z [0m    nonAtomicPush()[0m
2025-04-11T19:24:13.3652730Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:13.3714178Z [0m    sort()[0m
2025-04-11T19:24:13.3895678Z     [32m  [32mâœ”[39m[0m[90m order should be saved[0m
2025-04-11T19:24:13.3955138Z [0m    set()[0m
2025-04-11T19:24:13.4153636Z     [32m  [32mâœ”[39m[0m[90m works combined with other ops[0m
2025-04-11T19:24:13.4370551Z     [32m  [32mâœ”[39m[0m[90m works with numbers[0m
2025-04-11T19:24:13.4586593Z     [32m  [32mâœ”[39m[0m[90m works with strings[0m
2025-04-11T19:24:13.4795661Z     [32m  [32mâœ”[39m[0m[90m works with buffers[0m
2025-04-11T19:24:13.5013902Z     [32m  [32mâœ”[39m[0m[90m works with mixed[0m
2025-04-11T19:24:13.5279808Z     [32m  [32mâœ”[39m[0m[90m works with sub-docs[0m
2025-04-11T19:24:13.5520554Z     [32m  [32mâœ”[39m[0m[90m applies setters (gh-3032)[0m
2025-04-11T19:24:13.5582158Z [0m    slice[0m
2025-04-11T19:24:13.5632100Z     [32m  [32mâœ”[39m[0m[90m copies schema correctly (gh-8482)[0m
2025-04-11T19:24:13.5736006Z     [32m  [32mâœ”[39m[0m[90m with unshift (gh-8482)[0m
2025-04-11T19:24:13.5847952Z     [32m  [32mâœ”[39m[0m[90m with push (gh-8655)[0m
2025-04-11T19:24:13.5907303Z [0m    setting a doc array[0m
2025-04-11T19:24:13.6091813Z     [32m  [32mâœ”[39m[0m[90m should adjust path positions[0m
2025-04-11T19:24:13.6154172Z [0m    paths with similar names[0m
2025-04-11T19:24:13.6341565Z     [32m  [32mâœ”[39m[0m[90m should be saved[0m
2025-04-11T19:24:13.6401858Z [0m    of number[0m
2025-04-11T19:24:13.6594423Z     [32m  [32mâœ”[39m[0m[90m allows null and undefined[0m
2025-04-11T19:24:13.6656332Z [0m    bug fixes[0m
2025-04-11T19:24:13.6850451Z     [32m  [32mâœ”[39m[0m[90m modifying subdoc props and manipulating the array works (gh-842)[0m
2025-04-11T19:24:13.6939356Z     [32m  [32mâœ”[39m[0m[90m toObject returns a vanilla JavaScript array (gh-9540)[0m
2025-04-11T19:24:13.7179727Z     [32m  [32mâœ”[39m[0m[90m pushing top level arrays and subarrays works (gh-1073)[0m
2025-04-11T19:24:13.7271376Z     [32m  [32mâœ”[39m[0m[90m finding ids by string (gh-4011)[0m
2025-04-11T19:24:13.7359186Z [0m    default type[0m
2025-04-11T19:24:13.7408807Z     [32m  [32mâœ”[39m[0m[90m casts to Mixed[0m
2025-04-11T19:24:13.7501418Z [0m    removing from an array atomically using MongooseArray#remove[0m
2025-04-11T19:24:13.7658009Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:13.7707298Z [0m      with subdocs[0m
2025-04-11T19:24:13.7849795Z       [32m  [32mâœ”[39m[0m[90m supports passing strings[0m
2025-04-11T19:24:13.8031300Z       [32m  [32mâœ”[39m[0m[90m supports passing numbers[0m
2025-04-11T19:24:13.8213491Z       [32m  [32mâœ”[39m[0m[90m supports passing objectids[0m
2025-04-11T19:24:13.8404791Z       [32m  [32mâœ”[39m[0m[90m supports passing buffers[0m
2025-04-11T19:24:13.8488495Z [0m    built-in array methods that modify element structure return vanilla arrays (gh-8356)[0m
2025-04-11T19:24:13.8538649Z     [32m  [32mâœ”[39m[0m[90m filter[0m
2025-04-11T19:24:13.8625227Z     [32m  [32mâœ”[39m[0m[90m flat[0m
2025-04-11T19:24:13.8710961Z     [32m  [32mâœ”[39m[0m[90m flatMap[0m
2025-04-11T19:24:13.8796560Z     [32m  [32mâœ”[39m[0m[90m map[0m
2025-04-11T19:24:13.8882125Z     [32m  [32mâœ”[39m[0m[90m slice[0m
2025-04-11T19:24:13.8985708Z 
2025-04-11T19:24:13.8986076Z [0m  schematype mixed[0m
2025-04-11T19:24:13.8997289Z [0m    empty object defaults (gh-1380)[0m
2025-04-11T19:24:13.9046742Z     [32m  [32mâœ”[39m[0m[90m are interpreted as fns that return new empty objects[0m
2025-04-11T19:24:13.9115235Z     [32m  [32mâœ”[39m[0m[90m can be forced to share the object between documents[0m
2025-04-11T19:24:13.9168628Z 
2025-04-11T19:24:13.9168919Z [0m  types.number[0m
2025-04-11T19:24:13.9202676Z   [32m  [32mâœ”[39m[0m[90m an empty string casts to null[0m
2025-04-11T19:24:13.9246433Z   [32m  [32mâœ”[39m[0m[90m a null number should castForQuery to null[0m
2025-04-11T19:24:13.9294358Z   [32m  [32mâœ”[39m[0m[90m array throws cast number error[0m
2025-04-11T19:24:13.9341492Z   [32m  [32mâœ”[39m[0m[90m three throws cast number error[0m
2025-04-11T19:24:13.9388187Z   [32m  [32mâœ”[39m[0m[90m {} throws cast number error[0m
2025-04-11T19:24:13.9432717Z   [32m  [32mâœ”[39m[0m[90m does not throw number cast error[0m
2025-04-11T19:24:13.9476657Z   [32m  [32mâœ”[39m[0m[90m boolean casts to 0/1 (gh-3475)[0m
2025-04-11T19:24:13.9521004Z   [32m  [32mâœ”[39m[0m[90m prefers valueOf function if one exists (gh-6299)[0m
2025-04-11T19:24:13.9568907Z   [32m  [32mâœ”[39m[0m[90m throws a CastError with a bad conditional (gh-6927)[0m
2025-04-11T19:24:13.9590545Z [0m    custom caster (gh-7045)[0m
2025-04-11T19:24:13.9639160Z     [32m  [32mâœ”[39m[0m[90m disallow empty string[0m
2025-04-11T19:24:13.9707181Z     [32m  [32mâœ”[39m[0m[90m disable casting[0m
2025-04-11T19:24:13.9760840Z 
2025-04-11T19:24:13.9761098Z [0m  BigInt[0m
2025-04-11T19:24:13.9799607Z   [32m  [32mâœ”[39m[0m[90m is a valid schema type[0m
2025-04-11T19:24:13.9847243Z   [32m  [32mâœ”[39m[0m[90m casting from strings and numbers[0m
2025-04-11T19:24:13.9898602Z   [32m  [32mâœ”[39m[0m[90m handles cast errors[0m
2025-04-11T19:24:13.9947972Z   [32m  [32mâœ”[39m[0m[90m supports required[0m
2025-04-11T19:24:13.9969804Z [0m    MongoDB integration[0m
2025-04-11T19:24:14.0128473Z     [32m  [32mâœ”[39m[0m[90m is stored as a long in MongoDB[0m
2025-04-11T19:24:14.0214197Z     [32m  [32mâœ”[39m[0m[90m becomes a bigint with lean using useBigInt64[0m
2025-04-11T19:24:14.0326247Z     [32m  [32mâœ”[39m[0m[90m can query with comparison operators[0m
2025-04-11T19:24:14.0570563Z     [32m  [32mâœ”[39m[0m[90m supports populate()[0m
2025-04-11T19:24:14.0634443Z 
2025-04-11T19:24:14.0635168Z [0m  Int32[0m
2025-04-11T19:24:14.0674764Z   [32m  [32mâœ”[39m[0m[90m is a valid schema type[0m
2025-04-11T19:24:14.0696631Z [0m    supports the required property[0m
2025-04-11T19:24:14.0746281Z     [32m  [32mâœ”[39m[0m[90m when value is null[0m
2025-04-11T19:24:14.0816136Z     [32m  [32mâœ”[39m[0m[90m when value is non-null[0m
2025-04-11T19:24:14.0859353Z [0m    special inputs[0m
2025-04-11T19:24:14.0906705Z     [32m  [32mâœ”[39m[0m[90m supports INT32_MIN as input[0m
2025-04-11T19:24:14.0975046Z     [32m  [32mâœ”[39m[0m[90m supports INT32_MAX as input[0m
2025-04-11T19:24:14.1045001Z     [32m  [32mâœ”[39m[0m[90m supports undefined as input[0m
2025-04-11T19:24:14.1113329Z     [32m  [32mâœ”[39m[0m[90m supports null as input[0m
2025-04-11T19:24:14.1156609Z [0m    valid casts[0m
2025-04-11T19:24:14.1203610Z     [32m  [32mâœ”[39m[0m[90m casts from string[0m
2025-04-11T19:24:14.1272063Z     [32m  [32mâœ”[39m[0m[90m casts from number[0m
2025-04-11T19:24:14.1340542Z     [32m  [32mâœ”[39m[0m[90m casts from bigint[0m
2025-04-11T19:24:14.1409673Z     [32m  [32mâœ”[39m[0m[90m casts from BSON.Int32[0m
2025-04-11T19:24:14.1478113Z     [32m  [32mâœ”[39m[0m[90m casts from BSON.Double provided its value is an integer[0m
2025-04-11T19:24:14.1546449Z     [32m  [32mâœ”[39m[0m[90m casts boolean true to 1[0m
2025-04-11T19:24:14.1614737Z     [32m  [32mâœ”[39m[0m[90m casts boolean false to 0[0m
2025-04-11T19:24:14.1683642Z     [32m  [32mâœ”[39m[0m[90m casts empty string to null[0m
2025-04-11T19:24:14.1752884Z     [32m  [32mâœ”[39m[0m[90m supports valueOf() function [0m
2025-04-11T19:24:14.1785402Z [0m      long[0m
2025-04-11T19:24:14.1844056Z       [32m  [32mâœ”[39m[0m[90m casts from BSON.Long provided its value is within bounds of Int32[0m
2025-04-11T19:24:14.1940868Z       [32m  [32mâœ”[39m[0m[90m calls Long.toNumber when casting long[0m
2025-04-11T19:24:14.2006441Z [0m    cast errors[0m
2025-04-11T19:24:14.2017603Z [0m      when a non-integer decimal input is provided to an Int32 field[0m
2025-04-11T19:24:14.2083081Z       [32m  [32mâœ”[39m[0m[90m throws a CastError upon validation[0m
2025-04-11T19:24:14.2137188Z [0m      when a non-numeric string is provided to an Int32 field[0m
2025-04-11T19:24:14.2201483Z       [32m  [32mâœ”[39m[0m[90m throws a CastError upon validation[0m
2025-04-11T19:24:14.2255593Z [0m      when a non-integer decimal string is provided to an Int32 field[0m
2025-04-11T19:24:14.2320635Z       [32m  [32mâœ”[39m[0m[90m throws a CastError upon validation[0m
2025-04-11T19:24:14.2374467Z [0m      when NaN is provided to an Int32 field[0m
2025-04-11T19:24:14.2427445Z       [32m  [32mâœ”[39m[0m[90m throws a CastError upon validation[0m
2025-04-11T19:24:14.2481533Z [0m      when value above INT32_MAX is provided to an Int32 field[0m
2025-04-11T19:24:14.2545195Z       [32m  [32mâœ”[39m[0m[90m throws a CastError upon validation[0m
2025-04-11T19:24:14.2599290Z [0m      when value below INT32_MIN is provided to an Int32 field[0m
2025-04-11T19:24:14.2662883Z       [32m  [32mâœ”[39m[0m[90m throws a CastError upon validation[0m
2025-04-11T19:24:14.2727390Z [0m    custom casters[0m
2025-04-11T19:24:14.2781220Z     [32m  [32mâœ”[39m[0m[90m supports cast disabled[0m
2025-04-11T19:24:14.2851537Z     [32m  [32mâœ”[39m[0m[90m supports custom cast[0m
2025-04-11T19:24:14.2895281Z [0m    mongoDB integration[0m
2025-04-11T19:24:14.3013266Z     [32m  [32mâœ”[39m[0m[90m can query with comparison operators[0m
2025-04-11T19:24:14.3114753Z     [31m  2) supports populate()[0m
2025-04-11T19:24:14.3147490Z [0m      $type compatibility[0m
2025-04-11T19:24:14.3221245Z       [32m  [32mâœ”[39m[0m[90m is queryable as a JS number in MongoDB[0m
2025-04-11T19:24:14.3329941Z       [32m  [32mâœ”[39m[0m[90m is queryable as a BSON Int32 in MongoDB[0m
2025-04-11T19:24:14.3433701Z       [32m  [32mâœ”[39m[0m[90m is NOT queryable as a BSON Double in MongoDB[0m
2025-04-11T19:24:14.3538215Z 
2025-04-11T19:24:14.3539058Z [0m  model: populate: divergent arrays[0m
2025-04-11T19:24:14.3620655Z [0m    from match[0m
2025-04-11T19:24:14.3677304Z     [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-11T19:24:14.3752336Z     [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-11T19:24:14.3826496Z     [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-11T19:24:14.3869608Z [0m    from skip[0m
2025-04-11T19:24:14.3880753Z [0m      2[0m
2025-04-11T19:24:14.3944961Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-11T19:24:14.4040703Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-11T19:24:14.4135536Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-11T19:24:14.4189314Z [0m      0[0m
2025-04-11T19:24:14.4275045Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-11T19:24:14.4397006Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-11T19:24:14.4513520Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-11T19:24:14.4580842Z [0m    from limit[0m
2025-04-11T19:24:14.4593685Z [0m      0[0m
2025-04-11T19:24:14.4669699Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-11T19:24:14.4776988Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-11T19:24:14.4871895Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-11T19:24:14.4925859Z [0m      1[0m
2025-04-11T19:24:14.4990957Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-11T19:24:14.5086415Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-11T19:24:14.5182069Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-11T19:24:14.5247057Z [0m    from deselected _id[0m
2025-04-11T19:24:14.5258007Z [0m      using string and only -_id[0m
2025-04-11T19:24:14.5327439Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-11T19:24:14.5423932Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-11T19:24:14.5519307Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-11T19:24:14.5573590Z [0m      using string[0m
2025-04-11T19:24:14.5638481Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-11T19:24:14.5735481Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-11T19:24:14.5831265Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-11T19:24:14.5885249Z [0m      using object and only _id: 0[0m
2025-04-11T19:24:14.5949863Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-11T19:24:14.6060584Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-11T19:24:14.6156350Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-11T19:24:14.6210346Z [0m      using object[0m
2025-04-11T19:24:14.6275498Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-11T19:24:14.6371069Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-11T19:24:14.6466617Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-11T19:24:14.6562152Z 
2025-04-11T19:24:14.6562444Z [0m  model: watch: [0m
2025-04-11T19:24:14.6573520Z [0m    with buffering[0m
2025-04-11T19:24:14.6585636Z     [36m  - watch() before connecting (gh-5964)[0m
2025-04-11T19:24:14.6586281Z     [36m  - watch() close() prevents buffered watch op from running (gh-7022)[0m
2025-04-11T19:24:14.6586868Z     [36m  - watch() close() closes the stream (gh-7022)[0m
2025-04-11T19:24:14.6607138Z 
2025-04-11T19:24:14.6607500Z [0m  types.embeddeddocumentdeclarative[0m
2025-04-11T19:24:14.6618737Z [0m    with a parent with a field with type set to a POJO[0m
2025-04-11T19:24:14.6629806Z [0m      creates subdocument schema if `type` is an object with keys[0m
2025-04-11T19:24:14.6684401Z       [32m  [32mâœ”[39m[0m[90m interprets the POJO as a subschema (gh-7494)[0m
2025-04-11T19:24:14.6777835Z       [32m  [32mâœ”[39m[0m[90m enforces provided schema on the child path, unlike Mixed (gh-7494)[0m
2025-04-11T19:24:14.6869313Z       [32m  [32mâœ”[39m[0m[90m underneath array (gh-8627)[0m
2025-04-11T19:24:14.6959271Z       [32m  [32mâœ”[39m[0m[90m nested array (gh-8627)[0m
2025-04-11T19:24:14.7024634Z [0m    with a parent with a POJO field with a field "type" with a type set to "String"[0m
2025-04-11T19:24:14.7068145Z     [32m  [32mâœ”[39m[0m[90m does not create a path for child in either option[0m
2025-04-11T19:24:14.7133450Z     [32m  [32mâœ”[39m[0m[90m treats type as a property name not a type in both options[0m
2025-04-11T19:24:14.7206415Z     [32m  [32mâœ”[39m[0m[90m enforces provided schema on the child tree in both options, unlike Mixed (gh-7494)[0m
2025-04-11T19:24:14.7259820Z 
2025-04-11T19:24:14.7260662Z [0m  model[0m
2025-04-11T19:24:14.7420433Z   [32m  [32mâœ”[39m[0m[90m sets correct partialFilterExpression for document array (gh-9091)[0m
2025-04-11T19:24:14.7577318Z   [32m  [32mâœ”[39m[0m[90m skips automatic indexing on childSchema if autoIndex: false (gh-9150)[0m
2025-04-11T19:24:14.7615139Z [0m    indexes[0m
2025-04-11T19:24:14.7811777Z     [32m  [32mâœ”[39m[0m[90m are created when model is compiled[0m
2025-04-11T19:24:14.8029335Z     [32m  [32mâœ”[39m[0m[90m of embedded documents[0m
2025-04-11T19:24:14.8203096Z     [32m  [32mâœ”[39m[0m[90m of embedded documents unless excludeIndexes (gh-5575) (gh-8343)[0m
2025-04-11T19:24:14.8493143Z     [32m  [32mâœ”[39m[0m[90m of multiple embedded documents with same schema[0m
2025-04-11T19:24:14.8718904Z     [32m  [32mâœ”[39m[0m[90m compound: on embedded docs[0m
2025-04-11T19:24:14.8808914Z     [32m  [32mâœ”[39m[0m[90m nested embedded docs (gh-5199)[0m
2025-04-11T19:24:14.8892815Z     [32m  [32mâœ”[39m[0m[90m primitive arrays (gh-3347)[0m
2025-04-11T19:24:14.9151934Z     [32m  [32mâœ”[39m[0m[90m error should emit on the model[0m
2025-04-11T19:24:14.9389756Z     [32m  [32mâœ”[39m[0m[90m when one index creation errors[0m
2025-04-11T19:24:14.9584130Z     [32m  [32mâœ”[39m[0m[90m creates descending indexes from schema definition(gh-8895)[0m
2025-04-11T19:24:14.9632953Z [0m      auto creation[0m
2025-04-11T19:24:15.0805576Z       [32m  [32mâœ”[39m[0m[90m can be disabled[0m[31m (112ms)[0m
2025-04-11T19:24:15.0864348Z [0m        global autoIndexes (gh-1875)[0m
2025-04-11T19:24:15.1017870Z         [32m  [32mâœ”[39m[0m[90m will create indexes as a default[0m
2025-04-11T19:24:15.2310045Z         [32m  [32mâœ”[39m[0m[90m will not create indexes if the global auto index is false and schema option isnt set (gh-1875)[0m[31m (116ms)[0m
2025-04-11T19:24:15.2401679Z [0m      model.ensureIndexes()[0m
2025-04-11T19:24:15.2412530Z       [36m  - is a function[0m
2025-04-11T19:24:15.2412961Z       [36m  - returns a Promise[0m
2025-04-11T19:24:15.2413291Z       [36m  - creates indexes[0m
2025-04-11T19:24:15.2434716Z [0m    discriminators with unique[0m
2025-04-11T19:24:15.2991983Z     [32m  [32mâœ”[39m[0m[90m converts to partial unique index (gh-6347)[0m[33m (51ms)[0m
2025-04-11T19:24:15.3188776Z     [32m  [32mâœ”[39m[0m[90m decorated discriminator index with syncIndexes (gh-6347)[0m
2025-04-11T19:24:15.3396644Z     [32m  [32mâœ”[39m[0m[90m uses schema-level collation by default (gh-9912)[0m
2025-04-11T19:24:15.3627800Z     [32m  [32mâœ”[39m[0m[90m different collation with syncIndexes() (gh-8521)[0m
2025-04-11T19:24:15.3998731Z     [32m  [32mâœ”[39m[0m[90m reports syncIndexes() error (gh-9303)[0m
2025-04-11T19:24:15.4212743Z     [32m  [32mâœ”[39m[0m[90m should not re-create a compound text index that involves non-text indexes, using syncIndexes (gh-13136)[0m
2025-04-11T19:24:15.4392111Z     [32m  [32mâœ”[39m[0m[90m should not find a diff when calling diffIndexes after syncIndexes involving a text and non-text compound index (gh-13136)[0m
2025-04-11T19:24:15.4629377Z     [32m  [32mâœ”[39m[0m[90m cleanIndexes (gh-6676)[0m
2025-04-11T19:24:15.4795778Z     [32m  [32mâœ”[39m[0m[90m should prevent collation on text indexes (gh-10044)[0m
2025-04-11T19:24:15.5181234Z     [32m  [32mâœ”[39m[0m[90m should do a dryRun feat-10316[0m
2025-04-11T19:24:15.5274695Z     [32m  [32mâœ”[39m[0m[90m running diffIndexes with a non-existent collection should not throw an error (gh-14010)[0m
2025-04-11T19:24:15.5391345Z 
2025-04-11T19:24:15.5392775Z [0m  aggregate: [0m
2025-04-11T19:24:15.5548523Z   [32m  [32mâœ”[39m[0m[90m cursor (gh-3160)[0m
2025-04-11T19:24:15.5626427Z   [32m  [32mâœ”[39m[0m[90m catch() (gh-7267)[0m
2025-04-11T19:24:15.5718790Z   [32m  [32mâœ”[39m[0m[90m cursor() without options (gh-3855)[0m
2025-04-11T19:24:15.5829958Z   [32m  [32mâœ”[39m[0m[90m cursor() with useMongooseAggCursor (gh-5145)[0m
2025-04-11T19:24:15.6023126Z   [32m  [32mâœ”[39m[0m[90m cursor() with useMongooseAggCursor works (gh-5145) (gh-5394)[0m
2025-04-11T19:24:15.7270452Z   [32m  [32mâœ”[39m[0m[90m cursor() eachAsync (gh-4300)[0m[31m (118ms)[0m
2025-04-11T19:24:15.8480815Z   [32m  [32mâœ”[39m[0m[90m cursor() eachAsync with options (parallel)[0m[31m (114ms)[0m
2025-04-11T19:24:15.8547191Z   [32m  [32mâœ”[39m[0m[90m is now a proper aggregate cursor vs what it was before gh-10410[0m
2025-04-11T19:24:15.8759595Z   [32m  [32mâœ”[39m[0m[90m query by document (gh-4866)[0m
2025-04-11T19:24:15.8916305Z   [32m  [32mâœ”[39m[0m[90m sort by text score (gh-5258)[0m
2025-04-11T19:24:15.9128274Z   [32m  [32mâœ”[39m[0m[90m cursor supports transform option (gh-14331)[0m
2025-04-11T19:24:15.9258375Z   [32m  [32mâœ”[39m[0m[90m should not throw error if database connection has not been established (gh-13125)[0m
2025-04-11T19:24:15.9340786Z   [32m  [32mâœ”[39m[0m[90m throws error if calling near() with empty coordinates (gh-15188)[0m
2025-04-11T19:24:15.9624041Z   [32m  [32mâœ”[39m[0m[90m cursor() errors out if schema pre aggregate hook throws an error (gh-15279)[0m
2025-04-11T19:24:15.9663414Z [0m    append[0m
2025-04-11T19:24:15.9708466Z     [32m  [32mâœ”[39m[0m[90m (pipeline)[0m
2025-04-11T19:24:15.9790701Z     [32m  [32mâœ”[39m[0m[90m supports array as single argument[0m
2025-04-11T19:24:15.9874734Z     [32m  [32mâœ”[39m[0m[90m throws if non-operator parameter is passed[0m
2025-04-11T19:24:15.9956801Z     [32m  [32mâœ”[39m[0m[90m does not throw when 0 args passed[0m
2025-04-11T19:24:16.0038670Z     [32m  [32mâœ”[39m[0m[90m does not throw when empty array is passed as single argument[0m
2025-04-11T19:24:16.0097921Z [0m    project[0m
2025-04-11T19:24:16.0143430Z     [32m  [32mâœ”[39m[0m[90m (object)[0m
2025-04-11T19:24:16.0226034Z     [32m  [32mâœ”[39m[0m[90m (string)[0m
2025-04-11T19:24:16.0308550Z     [32m  [32mâœ”[39m[0m[90m ("a","b","c")[0m
2025-04-11T19:24:16.0390925Z     [32m  [32mâœ”[39m[0m[90m ["a","b","c"][0m
2025-04-11T19:24:16.0451377Z [0m    group[0m
2025-04-11T19:24:16.0496204Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:16.0555450Z [0m    skip[0m
2025-04-11T19:24:16.0600307Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:16.0659481Z [0m    limit[0m
2025-04-11T19:24:16.0704005Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:16.0763007Z [0m    unwind[0m
2025-04-11T19:24:16.0808307Z     [32m  [32mâœ”[39m[0m[90m ("field")[0m
2025-04-11T19:24:16.0867493Z [0m    match[0m
2025-04-11T19:24:16.0912303Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:16.0972576Z [0m    sort[0m
2025-04-11T19:24:16.1017159Z     [32m  [32mâœ”[39m[0m[90m (object)[0m
2025-04-11T19:24:16.1099590Z     [32m  [32mâœ”[39m[0m[90m (string)[0m
2025-04-11T19:24:16.1173173Z     [32m  [32mâœ”[39m[0m[90m ("a","b","c")[0m
2025-04-11T19:24:16.1255064Z     [32m  [32mâœ”[39m[0m[90m ["a","b","c"][0m
2025-04-11T19:24:16.1313994Z [0m    near[0m
2025-04-11T19:24:16.1359055Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:16.1442145Z     [32m  [32mâœ”[39m[0m[90m works with discriminators (gh-3304)[0m
2025-04-11T19:24:16.1500927Z [0m    lookup[0m
2025-04-11T19:24:16.1545297Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:16.1604550Z [0m    unionWith[0m
2025-04-11T19:24:16.1649172Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:16.1708674Z [0m    sample[0m
2025-04-11T19:24:16.1753980Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:16.1812982Z [0m    densify[0m
2025-04-11T19:24:16.1857576Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:16.1916430Z [0m    fill[0m
2025-04-11T19:24:16.1960912Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:16.2022573Z [0m    model()[0m
2025-04-11T19:24:16.2066988Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:16.2126228Z [0m    redact[0m
2025-04-11T19:24:16.2171413Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:16.2253440Z     [32m  [32mâœ”[39m[0m[90m works with (condition, string, string)[0m
2025-04-11T19:24:16.2312483Z [0m    Mongo 3.4 operators[0m
2025-04-11T19:24:16.2417997Z [0m      graphLookup[0m
2025-04-11T19:24:16.2473602Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:16.2577793Z       [32m  [32mâœ”[39m[0m[90m automatically prepends $ to the startWith field[0m
2025-04-11T19:24:16.2681914Z       [32m  [32mâœ”[39m[0m[90m Throws if no options are passed to graphLookup[0m
2025-04-11T19:24:16.2754490Z [0m      addFields[0m
2025-04-11T19:24:16.2810862Z       [32m  [32mâœ”[39m[0m[90m should throw if passed a non object[0m
2025-04-11T19:24:16.2914160Z       [32m  [32mâœ”[39m[0m[90m should throw if passed null[0m
2025-04-11T19:24:16.3017265Z       [32m  [32mâœ”[39m[0m[90m should throw if passed an Array[0m
2025-04-11T19:24:16.3120933Z       [32m  [32mâœ”[39m[0m[90m (object)[0m
2025-04-11T19:24:16.3190429Z [0m      facet[0m
2025-04-11T19:24:16.3246136Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:16.3315746Z [0m      replaceRoot[0m
2025-04-11T19:24:16.3371182Z       [32m  [32mâœ”[39m[0m[90m works with a string[0m
2025-04-11T19:24:16.3473796Z       [32m  [32mâœ”[39m[0m[90m works with an object (gh-6474)[0m
2025-04-11T19:24:16.3543705Z [0m      count[0m
2025-04-11T19:24:16.3598899Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:16.3668496Z [0m      sortByCount[0m
2025-04-11T19:24:16.3723883Z       [32m  [32mâœ”[39m[0m[90m works with a string argument[0m
2025-04-11T19:24:16.3829375Z       [32m  [32mâœ”[39m[0m[90m works with an object argument[0m
2025-04-11T19:24:16.3933441Z       [32m  [32mâœ”[39m[0m[90m throws if the argument is neither a string or object[0m
2025-04-11T19:24:16.4013364Z [0m    exec[0m
2025-04-11T19:24:16.4337078Z     [32m  [32mâœ”[39m[0m[90m project[0m
2025-04-11T19:24:16.4654857Z     [32m  [32mâœ”[39m[0m[90m group[0m
2025-04-11T19:24:16.4975602Z     [32m  [32mâœ”[39m[0m[90m skip[0m
2025-04-11T19:24:16.5278871Z     [32m  [32mâœ”[39m[0m[90m limit[0m
2025-04-11T19:24:16.5586990Z     [32m  [32mâœ”[39m[0m[90m unwind[0m
2025-04-11T19:24:16.5905700Z     [32m  [32mâœ”[39m[0m[90m unwind with obj[0m
2025-04-11T19:24:16.6225938Z     [32m  [32mâœ”[39m[0m[90m unwind throws with bad arg[0m
2025-04-11T19:24:16.6546046Z     [32m  [32mâœ”[39m[0m[90m match[0m
2025-04-11T19:24:16.6865528Z     [32m  [32mâœ”[39m[0m[90m sort[0m
2025-04-11T19:24:16.7263431Z     [32m  [32mâœ”[39m[0m[90m graphLookup[0m
2025-04-11T19:24:16.7708463Z     [32m  [32mâœ”[39m[0m[90m facet[0m
2025-04-11T19:24:16.8023122Z     [32m  [32mâœ”[39m[0m[90m complex pipeline[0m
2025-04-11T19:24:16.8332922Z     [32m  [32mâœ”[39m[0m[90m pipeline() (gh-5825)[0m
2025-04-11T19:24:16.8762659Z     [32m  [32mâœ”[39m[0m[90m explain()[0m
2025-04-11T19:24:16.9196926Z     [32m  [32mâœ”[39m[0m[90m handles aggregation options[0m
2025-04-11T19:24:16.9535762Z     [32m  [32mâœ”[39m[0m[90m readPref from schema (gh-5522)[0m
2025-04-11T19:24:16.9616005Z [0m      error when empty pipeline[0m
2025-04-11T19:24:16.9906765Z       [32m  [32mâœ”[39m[0m[90m without a callback[0m
2025-04-11T19:24:16.9979546Z [0m      error when not bound to a model[0m
2025-04-11T19:24:17.0266495Z       [32m  [32mâœ”[39m[0m[90m with callback[0m
2025-04-11T19:24:17.0340690Z [0m      middleware (gh-5251)[0m
2025-04-11T19:24:17.0637186Z       [32m  [32mâœ”[39m[0m[90m pre[0m
2025-04-11T19:24:17.1128109Z       [32m  [32mâœ”[39m[0m[90m setting option in pre (gh-7606)[0m
2025-04-11T19:24:17.1611639Z       [32m  [32mâœ”[39m[0m[90m adding to pipeline in pre (gh-8017)[0m
2025-04-11T19:24:17.1954892Z       [32m  [32mâœ”[39m[0m[90m post[0m
2025-04-11T19:24:17.2297122Z       [32m  [32mâœ”[39m[0m[90m error handler with agg error[0m
2025-04-11T19:24:17.2634733Z       [32m  [32mâœ”[39m[0m[90m error handler with pre error[0m
2025-04-11T19:24:17.3003427Z       [32m  [32mâœ”[39m[0m[90m with agg cursor[0m
2025-04-11T19:24:17.3346607Z       [32m  [32mâœ”[39m[0m[90m with explain() (gh-5887)[0m
2025-04-11T19:24:17.3436675Z [0m    Mongo 3.6 options[0m
2025-04-11T19:24:17.3697495Z     [32m  [32mâœ”[39m[0m[90m adds hint option[0m
2025-04-11T19:24:17.3795589Z 
2025-04-11T19:24:17.3796006Z [0m  driver[0m
2025-04-11T19:24:17.3847201Z   [32m  [32mâœ”[39m[0m[90m can set custom driver (gh-11900)[0m
2025-04-11T19:24:17.3910414Z   [32m  [32mâœ”[39m[0m[90m multiple drivers (gh-12638)[0m
2025-04-11T19:24:17.3942335Z 
2025-04-11T19:24:17.3945600Z [0m  Query[0m
2025-04-11T19:24:17.4089535Z   [32m  [32mâœ”[39m[0m[90m transform (gh-14236) (gh-7142)[0m
2025-04-11T19:24:17.4426041Z   [32m  [32mâœ”[39m[0m[90m allows skipping timestamps in updateOne() (gh-6980)[0m
2025-04-11T19:24:17.4836097Z   [32m  [32mâœ”[39m[0m[90m increments timestamps for nested subdocs (gh-4412)[0m
2025-04-11T19:24:17.5003901Z   [32m  [32mâœ”[39m[0m[90m strictQuery option (gh-4136) (gh-7178)[0m
2025-04-11T19:24:17.5081423Z   [32m  [32mâœ”[39m[0m[90m strictQuery does not inherit from strict (gh-11861)[0m
2025-04-11T19:24:17.5287542Z   [32m  [32mâœ”[39m[0m[90m strictQuery is false by default (gh-11861)[0m
2025-04-11T19:24:17.5452327Z   [32m  [32mâœ”[39m[0m[90m strictQuery = true (gh-6032)[0m
2025-04-11T19:24:17.5630029Z   [32m  [32mâœ”[39m[0m[90m function defaults run after query result is inited (gh-7182)[0m
2025-04-11T19:24:17.5784936Z   [32m  [32mâœ”[39m[0m[90m merging objectids with where() (gh-7360)[0m
2025-04-11T19:24:17.6051718Z   [32m  [32mâœ”[39m[0m[90m maxTimeMS() (gh-7254)[0m
2025-04-11T19:24:17.6322799Z   [32m  [32mâœ”[39m[0m[90m connection-level maxTimeMS() (gh-4066)[0m
2025-04-11T19:24:17.6594903Z   [32m  [32mâœ”[39m[0m[90m mongoose-level maxTimeMS() (gh-4066)[0m
2025-04-11T19:24:17.6773535Z   [32m  [32mâœ”[39m[0m[90m query with top-level _bsontype (gh-8222) (gh-8268)[0m
2025-04-11T19:24:17.7271629Z   [32m  [32mâœ”[39m[0m[90m casts $elemMatch with dbrefs (gh-8577)[0m[33m (43ms)[0m
2025-04-11T19:24:17.7360276Z   [32m  [32mâœ”[39m[0m[90m throws an error if executed multiple times (gh-7398)[0m
2025-04-11T19:24:17.7462805Z   [32m  [32mâœ”[39m[0m[90m setter priorVal (gh-8629)[0m
2025-04-11T19:24:17.7715862Z   [32m  [32mâœ”[39m[0m[90m casts filter according to discriminator schema if in filter (gh-8881)[0m
2025-04-11T19:24:17.7928238Z   [32m  [32mâœ”[39m[0m[90m casts update object according to child discriminator schema when `discriminatorKey` is present (gh-8982)[0m
2025-04-11T19:24:17.8093858Z   [32m  [32mâœ”[39m[0m[90m allows disabling `setDefaultsOnInsert` (gh-8410)[0m
2025-04-11T19:24:17.8171431Z   [32m  [32mâœ”[39m[0m[90m throws readable error if `$and` and `$or` contain non-objects (gh-8948)[0m
2025-04-11T19:24:17.8415018Z   [32m  [32mâœ”[39m[0m[90m includes `undefined` in filters (gh-3944)[0m
2025-04-11T19:24:17.8628550Z   [32m  [32mâœ”[39m[0m[90m handles push with array filters (gh-9977)[0m
2025-04-11T19:24:17.8710855Z   [32m  [32mâœ”[39m[0m[90m Query#pre() (gh-9784)[0m
2025-04-11T19:24:17.8832626Z   [32m  [32mâœ”[39m[0m[90m applies schema-level `select` on arrays (gh-10029)[0m
2025-04-11T19:24:17.8940958Z   [32m  [32mâœ”[39m[0m[90m sets `writeConcern` option correctly (gh-10009)[0m
2025-04-11T19:24:17.9151361Z   [32m  [32mâœ”[39m[0m[90m no longer has the deprecation warning message with writeConcern gh-10083[0m
2025-04-11T19:24:17.9217429Z   [32m  [32mâœ”[39m[0m[90m sanitizeProjection option (gh-10243)[0m
2025-04-11T19:24:17.9462864Z   [32m  [32mâœ”[39m[0m[90m sanitizeProjection option with plus paths (gh-14333) (gh-10243)[0m
2025-04-11T19:24:17.9531745Z   [32m  [32mâœ”[39m[0m[90m sanitizeFilter option (gh-3944)[0m
2025-04-11T19:24:17.9676817Z   [32m  [32mâœ”[39m[0m[90m sanitizeFilter disables implicit $in (gh-14657)[0m
2025-04-11T19:24:17.9907248Z   [32m  [32mâœ”[39m[0m[90m should not error when $not is used with $size (gh-10716)[0m
2025-04-11T19:24:18.0229318Z   [32m  [32mâœ”[39m[0m[90m should not error when $not is used on an array of strings (gh-11467)[0m
2025-04-11T19:24:18.0394612Z   [32m  [32mâœ”[39m[0m[90m adding `exec` option does not affect the query (gh-11416)[0m
2025-04-11T19:24:18.0584829Z   [32m  [32mâœ”[39m[0m[90m handles queries with EJSON deserialized RegExps (gh-11597)[0m
2025-04-11T19:24:18.0770842Z   [32m  [32mâœ”[39m[0m[90m should return query helper supplied in schema options query property instead of undefined[0m
2025-04-11T19:24:18.0960671Z   [32m  [32mâœ”[39m[0m[90m allows a transform option for lean on a query (gh-10423)[0m
2025-04-11T19:24:18.1211858Z   [32m  [32mâœ”[39m[0m[90m handles a lean transform that deletes _id with populate (gh-12143) (gh-10423)[0m
2025-04-11T19:24:18.1390302Z   [32m  [32mâœ”[39m[0m[90m skips applying default projections over slice projections (gh-11940)[0m
2025-04-11T19:24:18.1618122Z   [32m  [32mâœ”[39m[0m[90m translateAliases option (gh-7511)[0m
2025-04-11T19:24:18.1775099Z   [32m  [32mâœ”[39m[0m[90m translateAliases throws error on conflicting properties (gh-7511)[0m
2025-04-11T19:24:18.1934507Z   [32m  [32mâœ”[39m[0m[90m translateAliases applies before casting (gh-14521) (gh-7511)[0m
2025-04-11T19:24:18.2104089Z   [32m  [32mâœ”[39m[0m[90m schema level translateAliases option (gh-7511)[0m
2025-04-11T19:24:18.2284306Z   [32m  [32mâœ”[39m[0m[90m select: false is ignored for type Map (gh-12445)[0m
2025-04-11T19:24:18.2473789Z   [32m  [32mâœ”[39m[0m[90m Map field with select: false is selected when explicitly requested (gh-12603)[0m
2025-04-11T19:24:18.2527351Z   [32m  [32mâœ”[39m[0m[90m treats ObjectId as object with `_id` for `merge()` (gh-12325)[0m
2025-04-11T19:24:18.2789684Z   [32m  [32mâœ”[39m[0m[90m avoid throwing error when modifying nested field with same name as discriminator key (gh-12517)[0m
2025-04-11T19:24:18.3032144Z   [32m  [32mâœ”[39m[0m[90m avoid throwing error when modifying field with same name as nested discriminator key (gh-12517)[0m
2025-04-11T19:24:18.3267279Z   [32m  [32mâœ”[39m[0m[90m global strictQuery should work if applied after schema creation (gh-12703)[0m
2025-04-11T19:24:18.3467531Z   [32m  [32mâœ”[39m[0m[90m update operation should not remove fields set to undefined (gh-12930)[0m
2025-04-11T19:24:18.3645592Z   [32m  [32mâœ”[39m[0m[90m handles $elemMatch with nested schema (gh-12902)[0m
2025-04-11T19:24:18.3712227Z   [32m  [32mâœ”[39m[0m[90m merges $and, $or conditions (gh-12944)[0m
2025-04-11T19:24:18.3816330Z   [32m  [32mâœ”[39m[0m[90m shallow clones $and, $or if merging with empty filter (gh-14567) (gh-12944)[0m
2025-04-11T19:24:18.4015414Z   [32m  [32mâœ”[39m[0m[90m should avoid sending empty session to MongoDB server (gh-13052)[0m
2025-04-11T19:24:18.4205267Z   [32m  [32mâœ”[39m[0m[90m should avoid sending empty projection to MongoDB server (gh-13065)[0m
2025-04-11T19:24:18.4296414Z   [32m  [32mâœ”[39m[0m[90m should provide a clearer error message when sorting with empty string[0m
2025-04-11T19:24:18.4499334Z   [32m  [32mâœ”[39m[0m[90m allows executing a find() with a subdocument with defaults disabled (gh-13512)[0m
2025-04-11T19:24:18.4673452Z   [32m  [32mâœ”[39m[0m[90m throws a readable error when executing Query instance without a model (gh-13570)[0m
2025-04-11T19:24:18.4826975Z   [32m  [32mâœ”[39m[0m[90m throws a readable error when executing Query instance without an op (gh-13570)[0m
2025-04-11T19:24:18.5054266Z   [32m  [32mâœ”[39m[0m[90m allows deselecting discriminator key (gh-13760) (gh-13679)[0m
2025-04-11T19:24:18.5298362Z   [32m  [32mâœ”[39m[0m[90m does not apply sibling path defaults if using nested projection (gh-14115)[0m
2025-04-11T19:24:18.5364417Z   [32m  [32mâœ”[39m[0m[90m allows overriding sort (gh-14365)[0m
2025-04-11T19:24:18.5573692Z   [32m  [32mâœ”[39m[0m[90m avoids mutating user-provided query selectors (gh-14567)[0m
2025-04-11T19:24:18.5652949Z   [32m  [32mâœ”[39m[0m[90m avoids mutating $or, $and elements when casting (gh-14610)[0m
2025-04-11T19:24:18.5716338Z [0m    constructor[0m
2025-04-11T19:24:18.5761244Z     [32m  [32mâœ”[39m[0m[90m should not corrupt options[0m
2025-04-11T19:24:18.5818625Z [0m    select[0m
2025-04-11T19:24:18.5862933Z     [32m  [32mâœ”[39m[0m[90m (object)[0m
2025-04-11T19:24:18.5942217Z     [32m  [32mâœ”[39m[0m[90m (string)[0m
2025-04-11T19:24:18.6023604Z     [32m  [32mâœ”[39m[0m[90m ("a","b","c")[0m
2025-04-11T19:24:18.6108233Z     [32m  [32mâœ”[39m[0m[90m should not overwrite fields set in prior calls[0m
2025-04-11T19:24:18.6185145Z     [32m  [32mâœ”[39m[0m[90m should remove existing fields from inclusive projection[0m
2025-04-11T19:24:18.6265890Z     [32m  [32mâœ”[39m[0m[90m should remove existing fields from exclusive projection[0m
2025-04-11T19:24:18.6323247Z [0m    projection() (gh-7384)[0m
2025-04-11T19:24:18.6367522Z     [32m  [32mâœ”[39m[0m[90m gets current projection[0m
2025-04-11T19:24:18.6447432Z     [32m  [32mâœ”[39m[0m[90m overwrites current projection[0m
2025-04-11T19:24:18.6504620Z [0m    where[0m
2025-04-11T19:24:18.6548990Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:18.6630001Z     [32m  [32mâœ”[39m[0m[90m throws if non-string or non-object path is passed[0m
2025-04-11T19:24:18.6709051Z     [32m  [32mâœ”[39m[0m[90m does not throw when 0 args passed[0m
2025-04-11T19:24:18.6766108Z [0m    equals[0m
2025-04-11T19:24:18.6810247Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:18.6869064Z [0m    gte[0m
2025-04-11T19:24:18.6913565Z     [32m  [32mâœ”[39m[0m[90m with 2 args[0m
2025-04-11T19:24:18.6993558Z     [32m  [32mâœ”[39m[0m[90m with 1 arg[0m
2025-04-11T19:24:18.7050928Z [0m    gt[0m
2025-04-11T19:24:18.7095128Z     [32m  [32mâœ”[39m[0m[90m with 1 arg[0m
2025-04-11T19:24:18.7174529Z     [32m  [32mâœ”[39m[0m[90m with 2 args[0m
2025-04-11T19:24:18.7232962Z [0m    lte[0m
2025-04-11T19:24:18.7277296Z     [32m  [32mâœ”[39m[0m[90m with 1 arg[0m
2025-04-11T19:24:18.7358530Z     [32m  [32mâœ”[39m[0m[90m with 2 args[0m
2025-04-11T19:24:18.7419847Z [0m    lt[0m
2025-04-11T19:24:18.7464157Z     [32m  [32mâœ”[39m[0m[90m with 1 arg[0m
2025-04-11T19:24:18.7545129Z     [32m  [32mâœ”[39m[0m[90m with 2 args[0m
2025-04-11T19:24:18.7603643Z [0m    combined[0m
2025-04-11T19:24:18.7614497Z [0m      lt and gt[0m
2025-04-11T19:24:18.7669622Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:18.7749828Z [0m    tl on one path and gt on another[0m
2025-04-11T19:24:18.7793925Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:18.7852427Z [0m    ne[0m
2025-04-11T19:24:18.7896751Z     [32m  [32mâœ”[39m[0m[90m with 1 arg[0m
2025-04-11T19:24:18.7977843Z     [32m  [32mâœ”[39m[0m[90m with 2 args[0m
2025-04-11T19:24:18.8036287Z [0m    in[0m
2025-04-11T19:24:18.8080616Z     [32m  [32mâœ”[39m[0m[90m with 1 arg[0m
2025-04-11T19:24:18.8163411Z     [32m  [32mâœ”[39m[0m[90m with 2 args[0m
2025-04-11T19:24:18.8244718Z     [32m  [32mâœ”[39m[0m[90m where a non-array value no via where[0m
2025-04-11T19:24:18.8325593Z     [32m  [32mâœ”[39m[0m[90m where a non-array value via where[0m
2025-04-11T19:24:18.8385230Z [0m    nin[0m
2025-04-11T19:24:18.8429507Z     [32m  [32mâœ”[39m[0m[90m with 1 arg[0m
2025-04-11T19:24:18.8512228Z     [32m  [32mâœ”[39m[0m[90m with 2 args[0m
2025-04-11T19:24:18.8591904Z     [32m  [32mâœ”[39m[0m[90m with a non-array value not via where[0m
2025-04-11T19:24:18.8689314Z     [32m  [32mâœ”[39m[0m[90m with a non-array value via where[0m
2025-04-11T19:24:18.8747901Z [0m    mod[0m
2025-04-11T19:24:18.8792960Z     [32m  [32mâœ”[39m[0m[90m not via where, where [a, b] param[0m
2025-04-11T19:24:18.8874004Z     [32m  [32mâœ”[39m[0m[90m not via where, where a and b params[0m
2025-04-11T19:24:18.8955516Z     [32m  [32mâœ”[39m[0m[90m via where, where [a, b] param[0m
2025-04-11T19:24:18.9024338Z     [32m  [32mâœ”[39m[0m[90m via where, where a and b params[0m
2025-04-11T19:24:18.9080640Z [0m    near[0m
2025-04-11T19:24:18.9125398Z     [32m  [32mâœ”[39m[0m[90m via where, where { center :[lat, long]} param[0m
2025-04-11T19:24:18.9206447Z     [32m  [32mâœ”[39m[0m[90m via where, where [lat, long] param[0m
2025-04-11T19:24:18.9286150Z     [32m  [32mâœ”[39m[0m[90m via where, where lat and long params[0m
2025-04-11T19:24:18.9365673Z     [32m  [32mâœ”[39m[0m[90m not via where, where [lat, long] param[0m
2025-04-11T19:24:18.9444796Z     [32m  [32mâœ”[39m[0m[90m not via where, where lat and long params[0m
2025-04-11T19:24:18.9519505Z     [32m  [32mâœ”[39m[0m[90m via where, where GeoJSON param[0m
2025-04-11T19:24:18.9634184Z     [32m  [32mâœ”[39m[0m[90m with path, where GeoJSON param[0m
2025-04-11T19:24:18.9693870Z [0m    nearSphere[0m
2025-04-11T19:24:18.9738991Z     [32m  [32mâœ”[39m[0m[90m via where, where [lat, long] param[0m
2025-04-11T19:24:18.9818405Z     [32m  [32mâœ”[39m[0m[90m via where, where lat and long params[0m
2025-04-11T19:24:18.9893556Z     [32m  [32mâœ”[39m[0m[90m not via where, where [lat, long] param[0m
2025-04-11T19:24:18.9964473Z     [32m  [32mâœ”[39m[0m[90m not via where, where lat and long params[0m
2025-04-11T19:24:19.0043683Z     [32m  [32mâœ”[39m[0m[90m via where, with object[0m
2025-04-11T19:24:19.0131877Z     [32m  [32mâœ”[39m[0m[90m via where, where GeoJSON param[0m
2025-04-11T19:24:19.0244103Z     [32m  [32mâœ”[39m[0m[90m with path, with GeoJSON[0m
2025-04-11T19:24:19.0331296Z [0m    maxDistance[0m
2025-04-11T19:24:19.0375801Z     [32m  [32mâœ”[39m[0m[90m via where[0m
2025-04-11T19:24:19.0433225Z [0m    within[0m
2025-04-11T19:24:19.0444088Z [0m      box[0m
2025-04-11T19:24:19.0500954Z       [32m  [32mâœ”[39m[0m[90m via where[0m
2025-04-11T19:24:19.0602279Z       [32m  [32mâœ”[39m[0m[90m via where, no object[0m
2025-04-11T19:24:19.0670622Z [0m      center[0m
2025-04-11T19:24:19.0726563Z       [32m  [32mâœ”[39m[0m[90m via where[0m
2025-04-11T19:24:19.0794468Z [0m      centerSphere[0m
2025-04-11T19:24:19.0851401Z       [32m  [32mâœ”[39m[0m[90m via where[0m
2025-04-11T19:24:19.0920076Z [0m      polygon[0m
2025-04-11T19:24:19.0975754Z       [32m  [32mâœ”[39m[0m[90m via where[0m
2025-04-11T19:24:19.1054345Z [0m    exists[0m
2025-04-11T19:24:19.1099694Z     [32m  [32mâœ”[39m[0m[90m 0 args via where[0m
2025-04-11T19:24:19.1179417Z     [32m  [32mâœ”[39m[0m[90m 1 arg via where[0m
2025-04-11T19:24:19.1261514Z     [32m  [32mâœ”[39m[0m[90m where 1 argument not via where[0m
2025-04-11T19:24:19.1345173Z     [32m  [32mâœ”[39m[0m[90m where 2 args not via where[0m
2025-04-11T19:24:19.1406903Z [0m    all[0m
2025-04-11T19:24:19.1453063Z     [32m  [32mâœ”[39m[0m[90m via where[0m
2025-04-11T19:24:19.1533358Z     [32m  [32mâœ”[39m[0m[90m not via where[0m
2025-04-11T19:24:19.1589835Z [0m    find[0m
2025-04-11T19:24:19.1634150Z     [32m  [32mâœ”[39m[0m[90m strict array equivalence condition v[0m
2025-04-11T19:24:19.1712919Z     [32m  [32mâœ”[39m[0m[90m with no args[0m
2025-04-11T19:24:19.1792709Z     [32m  [32mâœ”[39m[0m[90m works with overwriting previous object args (1176)[0m
2025-04-11T19:24:19.1849069Z [0m    size[0m
2025-04-11T19:24:19.1893215Z     [32m  [32mâœ”[39m[0m[90m via where[0m
2025-04-11T19:24:19.1972844Z     [32m  [32mâœ”[39m[0m[90m not via where[0m
2025-04-11T19:24:19.2029394Z [0m    slice[0m
2025-04-11T19:24:19.2073906Z     [32m  [32mâœ”[39m[0m[90m where and positive limit param[0m
2025-04-11T19:24:19.2153286Z     [32m  [32mâœ”[39m[0m[90m where just negative limit param[0m
2025-04-11T19:24:19.2233073Z     [32m  [32mâœ”[39m[0m[90m where [skip, limit] param[0m
2025-04-11T19:24:19.2312406Z     [32m  [32mâœ”[39m[0m[90m where skip and limit params[0m
2025-04-11T19:24:19.2391876Z     [32m  [32mâœ”[39m[0m[90m where just positive limit param[0m
2025-04-11T19:24:19.2472110Z     [32m  [32mâœ”[39m[0m[90m where just negative limit param[0m
2025-04-11T19:24:19.2551432Z     [32m  [32mâœ”[39m[0m[90m where the [skip, limit] param[0m
2025-04-11T19:24:19.2630844Z     [32m  [32mâœ”[39m[0m[90m where the skip and limit params[0m
2025-04-11T19:24:19.2709895Z     [32m  [32mâœ”[39m[0m[90m not via where, with just positive limit param[0m
2025-04-11T19:24:19.2791534Z     [32m  [32mâœ”[39m[0m[90m not via where, where just negative limit param[0m
2025-04-11T19:24:19.2870821Z     [32m  [32mâœ”[39m[0m[90m not via where, where [skip, limit] param[0m
2025-04-11T19:24:19.2950082Z     [32m  [32mâœ”[39m[0m[90m not via where, where skip and limit params[0m
2025-04-11T19:24:19.3006320Z [0m    elemMatch[0m
2025-04-11T19:24:19.3017004Z [0m      not via where[0m
2025-04-11T19:24:19.3073331Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:19.3175160Z       [32m  [32mâœ”[39m[0m[90m where block notation[0m
2025-04-11T19:24:19.3242358Z [0m      via where[0m
2025-04-11T19:24:19.3297031Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:19.3398016Z       [32m  [32mâœ”[39m[0m[90m where block notation[0m
2025-04-11T19:24:19.3476878Z [0m    $where[0m
2025-04-11T19:24:19.3521383Z     [32m  [32mâœ”[39m[0m[90m function arg[0m
2025-04-11T19:24:19.3600804Z     [32m  [32mâœ”[39m[0m[90m string arg[0m
2025-04-11T19:24:19.3657144Z [0m    limit[0m
2025-04-11T19:24:19.3701307Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:19.3785371Z     [32m  [32mâœ”[39m[0m[90m with string limit (gh-11017)[0m
2025-04-11T19:24:19.3853501Z [0m    skip[0m
2025-04-11T19:24:19.3897577Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:19.3954399Z [0m    sort[0m
2025-04-11T19:24:19.4002209Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:19.4059365Z [0m    or[0m
2025-04-11T19:24:19.4103787Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:19.4162353Z [0m    and[0m
2025-04-11T19:24:19.4207061Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:19.4266193Z [0m    populate[0m
2025-04-11T19:24:19.4311548Z     [32m  [32mâœ”[39m[0m[90m converts to PopulateOptions objects[0m
2025-04-11T19:24:19.4396419Z     [32m  [32mâœ”[39m[0m[90m overwrites duplicate paths[0m
2025-04-11T19:24:19.4477700Z     [32m  [32mâœ”[39m[0m[90m accepts space delimited strings[0m
2025-04-11T19:24:19.4536178Z [0m    casting[0m
2025-04-11T19:24:19.4583730Z     [32m  [32mâœ”[39m[0m[90m to an array of mixed[0m
2025-04-11T19:24:19.4818272Z     [32m  [32mâœ”[39m[0m[90m doesn't wipe out $in (gh-6439)[0m
2025-04-11T19:24:19.4900696Z     [32m  [32mâœ”[39m[0m[90m find $ne should not cast single value to array for schematype of Array[0m
2025-04-11T19:24:19.5042041Z     [32m  [32mâœ”[39m[0m[90m subdocument array with $ne: null should not throw[0m
2025-04-11T19:24:19.5152713Z     [32m  [32mâœ”[39m[0m[90m find should not cast single value to array for schematype of Array[0m
2025-04-11T19:24:19.5297202Z     [32m  [32mâœ”[39m[0m[90m an $elemMatch with $in works (gh-1100)[0m
2025-04-11T19:24:19.5408821Z     [32m  [32mâœ”[39m[0m[90m inequality operators for an array[0m
2025-04-11T19:24:19.5532151Z [0m    distinct[0m
2025-04-11T19:24:19.5576408Z     [32m  [32mâœ”[39m[0m[90m op[0m
2025-04-11T19:24:19.5656684Z     [32m  [32mâœ”[39m[0m[90m using options parameter for distinct[0m
2025-04-11T19:24:19.5713356Z [0m    findOne[0m
2025-04-11T19:24:19.5761777Z     [32m  [32mâœ”[39m[0m[90m sets the op[0m
2025-04-11T19:24:19.5858645Z [0m    deleteOne/deleteMany[0m
2025-04-11T19:24:19.6063736Z     [32m  [32mâœ”[39m[0m[90m handles deleteOne[0m
2025-04-11T19:24:19.6309933Z     [32m  [32mâœ”[39m[0m[90m handles deleteMany[0m
2025-04-11T19:24:19.6369935Z [0m    deleteMany[0m
2025-04-11T19:24:19.6428577Z     [32m  [32mâœ”[39m[0m[90m handles cast errors async[0m
2025-04-11T19:24:19.6632454Z     [32m  [32mâœ”[39m[0m[90m supports a single conditions arg[0m
2025-04-11T19:24:19.6828183Z     [32m  [32mâœ”[39m[0m[90m supports a single callback arg[0m
2025-04-11T19:24:19.7016203Z     [32m  [32mâœ”[39m[0m[90m supports conditions and callback args[0m
2025-04-11T19:24:19.7075667Z [0m    querying/updating with model instance containing embedded docs should work (#454)[0m
2025-04-11T19:24:19.7233747Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:19.7292832Z [0m    optionsForExec[0m
2025-04-11T19:24:19.7337885Z     [32m  [32mâœ”[39m[0m[90m should retain key order[0m
2025-04-11T19:24:19.7418073Z     [32m  [32mâœ”[39m[0m[90m applies schema-level writeConcern option[0m
2025-04-11T19:24:19.7499606Z     [32m  [32mâœ”[39m[0m[90m session() (gh-6663)[0m
2025-04-11T19:24:19.7545459Z [0m    options[0m
2025-04-11T19:24:19.7556153Z [0m      tailable[0m
2025-04-11T19:24:19.7612906Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:19.7716342Z       [32m  [32mâœ”[39m[0m[90m supports passing the `awaitData` option[0m
2025-04-11T19:24:19.7785736Z [0m      comment[0m
2025-04-11T19:24:19.7840824Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:19.7910247Z [0m      hint[0m
2025-04-11T19:24:19.7965791Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:19.8034973Z [0m      batchSize[0m
2025-04-11T19:24:19.8089948Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:19.8159200Z [0m      read[0m
2025-04-11T19:24:19.8170360Z [0m        without tags[0m
2025-04-11T19:24:19.8236260Z         [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:19.8315142Z [0m        with tags[0m
2025-04-11T19:24:19.8381019Z         [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:19.8461018Z [0m        inherits its models schema read option[0m
2025-04-11T19:24:19.8531099Z         [32m  [32mâœ”[39m[0m[90m if not set in query[0m
2025-04-11T19:24:19.8653841Z         [32m  [32mâœ”[39m[0m[90m if set in query[0m
2025-04-11T19:24:19.8791970Z         [32m  [32mâœ”[39m[0m[90m and sends it though the driver[0m
2025-04-11T19:24:19.8899805Z [0m    setOptions[0m
2025-04-11T19:24:19.8946250Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:19.9026817Z     [32m  [32mâœ”[39m[0m[90m populate as array in options (gh-4446)[0m
2025-04-11T19:24:19.9083833Z [0m    bug fixes[0m
2025-04-11T19:24:19.9251576Z     [32m  [32mâœ”[39m[0m[90m excludes _id when select false and inclusive mode (gh-3010)[0m
2025-04-11T19:24:19.9348157Z     [32m  [32mâœ”[39m[0m[90m doesnt reverse key order for update docs (gh-3215)[0m
2025-04-11T19:24:19.9480917Z     [32m  [32mâœ”[39m[0m[90m timestamps with $each (gh-4805)[0m
2025-04-11T19:24:19.9596386Z     [32m  [32mâœ”[39m[0m[90m handles nested $ (gh-3265)[0m
2025-04-11T19:24:19.9726673Z     [32m  [32mâœ”[39m[0m[90m $geoWithin with single nested schemas (gh-4044)[0m
2025-04-11T19:24:20.0024919Z     [32m  [32mâœ”[39m[0m[90m setDefaultsOnInsert with empty update (gh-3825)[0m
2025-04-11T19:24:20.0209792Z     [32m  [32mâœ”[39m[0m[90m custom query methods (gh-3714)[0m
2025-04-11T19:24:20.0299911Z     [32m  [32mâœ”[39m[0m[90m string as input (gh-4378)[0m
2025-04-11T19:24:20.0571668Z     [32m  [32mâœ”[39m[0m[90m handles geoWithin with $center and mongoose object (gh-4419)[0m
2025-04-11T19:24:20.0659744Z     [32m  [32mâœ”[39m[0m[90m $not with objects (gh-4495)[0m
2025-04-11T19:24:20.0928138Z     [32m  [32mâœ”[39m[0m[90m geoIntersects with mongoose doc as coords (gh-4408)[0m
2025-04-11T19:24:20.1022555Z     [32m  [32mâœ”[39m[0m[90m string with $not (gh-4592)[0m
2025-04-11T19:24:20.1219771Z     [32m  [32mâœ”[39m[0m[90m does not cast undefined to null in mongoose (gh-6236)[0m
2025-04-11T19:24:20.1413751Z     [32m  [32mâœ”[39m[0m[90m runs query setters with _id field (gh-5351)[0m
2025-04-11T19:24:20.1514191Z     [32m  [32mâœ”[39m[0m[90m runs setters if query field is an array (gh-6277)[0m
2025-04-11T19:24:20.1614862Z     [32m  [32mâœ”[39m[0m[90m $exists under $not (gh-4933)[0m
2025-04-11T19:24:20.1815215Z     [32m  [32mâœ”[39m[0m[90m geojson underneath array (gh-5467)[0m
2025-04-11T19:24:20.2005502Z     [32m  [32mâœ”[39m[0m[90m slice respects schema projections (gh-5450)[0m
2025-04-11T19:24:20.2102776Z     [32m  [32mâœ”[39m[0m[90m overwrites when passing an object when path already set to primitive (gh-6097)[0m
2025-04-11T19:24:20.2218881Z     [32m  [32mâœ”[39m[0m[90m $exists for arrays and embedded docs (gh-4937)[0m
2025-04-11T19:24:20.2338541Z     [32m  [32mâœ”[39m[0m[90m report error in pre hook (gh-5520)[0m
2025-04-11T19:24:20.2446023Z     [32m  [32mâœ”[39m[0m[90m cast error with custom error (gh-5520)[0m
2025-04-11T19:24:20.2667743Z     [32m  [32mâœ”[39m[0m[90m change deleteOne to updateOne for soft deletes using $isDeleted (gh-4428)[0m
2025-04-11T19:24:20.2862024Z     [32m  [32mâœ”[39m[0m[90m child schema with select: false in multiple paths (gh-5603)[0m
2025-04-11T19:24:20.3485211Z     [32m  [32mâœ”[39m[0m[90m errors in post init (gh-5592)[0m[33m (54ms)[0m
2025-04-11T19:24:20.3582877Z     [32m  [32mâœ”[39m[0m[90m with non-object args (gh-1698)[0m
2025-04-11T19:24:21.1967389Z     [32m  [32mâœ”[39m[0m[90m queries with BSON overflow (gh-5812)[0m[31m (828ms)[0m
2025-04-11T19:24:21.2533338Z     [32m  [32mâœ”[39m[0m[90m explain() (gh-6625)[0m
2025-04-11T19:24:21.2739679Z     [32m  [32mâœ”[39m[0m[90m cast embedded discriminators with dot notation (gh-6027)[0m
2025-04-11T19:24:21.2927801Z     [32m  [32mâœ”[39m[0m[90m cast embedded discriminators with embedded obj (gh-6027)[0m
2025-04-11T19:24:21.3143525Z     [32m  [32mâœ”[39m[0m[90m cast embedded discriminators with $elemMatch discriminator key (gh-7449)[0m
2025-04-11T19:24:21.3408424Z     [32m  [32mâœ”[39m[0m[90m handles geoWithin with mongoose docs (gh-4392)[0m
2025-04-11T19:24:21.3474845Z [0m      collations[0m
2025-04-11T19:24:21.3796293Z       [32m  [32mâœ”[39m[0m[90m collation support (gh-4839)[0m
2025-04-11T19:24:21.4058015Z       [32m  [32mâœ”[39m[0m[90m set on schema (gh-5295)[0m
2025-04-11T19:24:21.4131988Z [0m      gh-1950[0m
2025-04-11T19:24:21.4289623Z       [32m  [32mâœ”[39m[0m[90m ignores sort when passed to countDocuments[0m
2025-04-11T19:24:21.4351886Z       [36m  - ignores count when passed to sort[0m
2025-04-11T19:24:21.4374133Z [0m    handles falsy and object projections with defaults (gh-3256)[0m
2025-04-11T19:24:21.4493946Z     [32m  [32mâœ”[39m[0m[90m falsy projection[0m
2025-04-11T19:24:21.4634248Z     [32m  [32mâœ”[39m[0m[90m slice projection[0m
2025-04-11T19:24:21.4775249Z     [32m  [32mâœ”[39m[0m[90m empty projection[0m
2025-04-11T19:24:21.4836601Z [0m    count[0m
2025-04-11T19:24:21.5364528Z     [32m  [32mâœ”[39m[0m[90m calls utils.toObject on conditions (gh-6323)[0m[33m (49ms)[0m
2025-04-11T19:24:21.5427136Z [0m    setQuery[0m
2025-04-11T19:24:21.5473091Z     [32m  [32mâœ”[39m[0m[90m replaces existing query with new value (gh-6854)[0m
2025-04-11T19:24:21.5533425Z [0m    orFail (gh-6841)[0m
2025-04-11T19:24:21.5670603Z     [32m  [32mâœ”[39m[0m[90m find()[0m
2025-04-11T19:24:21.5829734Z     [32m  [32mâœ”[39m[0m[90m findOne()[0m
2025-04-11T19:24:21.5985610Z     [32m  [32mâœ”[39m[0m[90m deleteMany()[0m
2025-04-11T19:24:21.6139164Z     [32m  [32mâœ”[39m[0m[90m deleteOne()[0m
2025-04-11T19:24:21.6297287Z     [32m  [32mâœ”[39m[0m[90m replaceOne()[0m
2025-04-11T19:24:21.6448507Z     [32m  [32mâœ”[39m[0m[90m updateMany()[0m
2025-04-11T19:24:21.6609491Z     [32m  [32mâœ”[39m[0m[90m updateOne()[0m
2025-04-11T19:24:21.6776590Z     [32m  [32mâœ”[39m[0m[90m findOneAndUpdate()[0m
2025-04-11T19:24:21.6938462Z     [32m  [32mâœ”[39m[0m[90m findOneAndDelete()[0m
2025-04-11T19:24:21.7188454Z     [32m  [32mâœ”[39m[0m[90m executes before post hooks (gh-7280)[0m
2025-04-11T19:24:21.7339349Z     [32m  [32mâœ”[39m[0m[90m throws DocumentNotFoundError by default execute (gh-7409)[0m
2025-04-11T19:24:21.7482494Z     [32m  [32mâœ”[39m[0m[90m does not fire on CastError (gh-13165)[0m
2025-04-11T19:24:21.7543255Z [0m    getPopulatedPaths[0m
2025-04-11T19:24:21.7600324Z     [32m  [32mâœ”[39m[0m[90m doesn't break on a query without population (gh-6677)[0m
2025-04-11T19:24:21.7866851Z     [32m  [32mâœ”[39m[0m[90m returns an array of populated paths as strings (gh-6677)[0m
2025-04-11T19:24:21.7963106Z     [32m  [32mâœ”[39m[0m[90m returns deep populated paths (gh-7757)[0m
2025-04-11T19:24:21.8115209Z [0m    setUpdate[0m
2025-04-11T19:24:21.8160705Z     [32m  [32mâœ”[39m[0m[90m replaces existing update doc with new value[0m
2025-04-11T19:24:21.8218701Z [0m    get() (gh-7312)[0m
2025-04-11T19:24:21.8263493Z     [32m  [32mâœ”[39m[0m[90m works with using $set[0m
2025-04-11T19:24:21.8344706Z     [32m  [32mâœ”[39m[0m[90m works with $set syntactic sugar[0m
2025-04-11T19:24:21.8425630Z     [32m  [32mâœ”[39m[0m[90m works with mixed[0m
2025-04-11T19:24:21.8615624Z     [32m  [32mâœ”[39m[0m[90m $set overwrites existing[0m
2025-04-11T19:24:21.8676959Z [0m    increments timestamps for arrays of nested subdocs (gh-4412)[0m
2025-04-11T19:24:21.8878035Z     [32m  [32mâœ”[39m[0m[90m $set nested property with numeric position[0m
2025-04-11T19:24:21.9149870Z     [32m  [32mâœ”[39m[0m[90m $set numeric element[0m
2025-04-11T19:24:21.9415252Z     [32m  [32mâœ”[39m[0m[90m $set with positional operator[0m
2025-04-11T19:24:21.9626298Z     [32m  [32mâœ”[39m[0m[90m $set with positional operator and array (gh-7106)[0m
2025-04-11T19:24:21.9688563Z [0m    merge()[0m
2025-04-11T19:24:21.9894969Z     [32m  [32mâœ”[39m[0m[90m copies populate() (gh-1790)[0m
2025-04-11T19:24:21.9957065Z [0m    Query#validate() (gh-7984)[0m
2025-04-11T19:24:22.0108113Z     [32m  [32mâœ”[39m[0m[90m middleware[0m
2025-04-11T19:24:22.0209819Z     [32m  [32mâœ”[39m[0m[90m pre("validate") errors (gh-7187)[0m
2025-04-11T19:24:22.0299145Z [0m    stack traces[0m
2025-04-11T19:24:22.0343850Z     [36m  - includes calling file for filter cast errors (gh-8691)[0m
2025-04-11T19:24:22.0404097Z [0m    clone[0m
2025-04-11T19:24:22.0620351Z     [32m  [32mâœ”[39m[0m[90m with findOne[0m
2025-04-11T19:24:22.0890520Z     [32m  [32mâœ”[39m[0m[90m with deleteOne[0m
2025-04-11T19:24:22.1144583Z     [32m  [32mâœ”[39m[0m[90m with updateOne[0m
2025-04-11T19:24:22.1440370Z     [32m  [32mâœ”[39m[0m[90m with distinct[0m
2025-04-11T19:24:22.1682327Z     [32m  [32mâœ”[39m[0m[90m with hooks (gh-12365)[0m
2025-04-11T19:24:22.1745520Z [0m    set()[0m
2025-04-11T19:24:22.1794500Z     [32m  [32mâœ”[39m[0m[90m overwrites top-level keys if setting to undefined (gh-12155)[0m
2025-04-11T19:24:22.1881067Z [0m    schemaLevelProjections (gh-11474)[0m
2025-04-11T19:24:22.2033967Z     [32m  [32mâœ”[39m[0m[90m disables schema-level select: false[0m
2025-04-11T19:24:22.2229082Z     [32m  [32mâœ”[39m[0m[90m disables schema-level select: true[0m
2025-04-11T19:24:22.2426829Z     [32m  [32mâœ”[39m[0m[90m works via setOptions()[0m
2025-04-11T19:24:22.2615557Z     [32m  [32mâœ”[39m[0m[90m disabled via truthy value[0m
2025-04-11T19:24:22.2676773Z [0m    findById(andUpdate/andDelete)[0m
2025-04-11T19:24:22.2952001Z     [32m  [32mâœ”[39m[0m[90m findById returns null for undefined[0m
2025-04-11T19:24:22.3264183Z     [32m  [32mâœ”[39m[0m[90m findById returns document for valid _id[0m
2025-04-11T19:24:22.3596702Z     [32m  [32mâœ”[39m[0m[90m findByIdAndUpdate updates and returns the updated document[0m
2025-04-11T19:24:22.3934432Z     [32m  [32mâœ”[39m[0m[90m findByIdAndDelete deletes and returns the deleted document[0m
2025-04-11T19:24:22.4037876Z 
2025-04-11T19:24:22.4041190Z [0m  schema[0m
2025-04-11T19:24:22.4088352Z   [32m  [32mâœ”[39m[0m[90m can be created without the "new" keyword[0m
2025-04-11T19:24:22.4154173Z   [32m  [32mâœ”[39m[0m[90m does expose a property for duck-typing instanceof[0m
2025-04-11T19:24:22.4223337Z   [32m  [32mâœ”[39m[0m[90m supports different schematypes[0m
2025-04-11T19:24:22.4288798Z   [32m  [32mâœ”[39m[0m[90m supports dot notation for path accessors[0m
2025-04-11T19:24:22.4346696Z   [32m  [32mâœ”[39m[0m[90m allows paths nested > 2 levels[0m
2025-04-11T19:24:22.4409821Z   [32m  [32mâœ”[39m[0m[90m default definition[0m
2025-04-11T19:24:22.4468502Z   [32m  [32mâœ”[39m[0m[90m Mixed defaults can be empty arrays[0m
2025-04-11T19:24:22.4525664Z   [32m  [32mâœ”[39m[0m[90m methods declaration[0m
2025-04-11T19:24:22.4584575Z   [32m  [32mâœ”[39m[0m[90m static declaration[0m
2025-04-11T19:24:22.4643951Z   [32m  [32mâœ”[39m[0m[90m debugging msgs[0m
2025-04-11T19:24:22.4711486Z   [32m  [32mâœ”[39m[0m[90m required() with doc arrays (gh-3199)[0m
2025-04-11T19:24:22.4776207Z   [32m  [32mâœ”[39m[0m[90m custom typeKey in doc arrays (gh-3560)[0m
2025-04-11T19:24:22.4841960Z   [32m  [32mâœ”[39m[0m[90m required for single nested schemas (gh-3562)[0m
2025-04-11T19:24:22.4910781Z   [32m  [32mâœ”[39m[0m[90m booleans cause cast error for date (gh-3935)[0m
2025-04-11T19:24:22.4971633Z   [32m  [32mâœ”[39m[0m[90m trim: false works with strings (gh-4042)[0m
2025-04-11T19:24:22.5033234Z   [32m  [32mâœ”[39m[0m[90m arrays with typeKey (gh-4548)[0m
2025-04-11T19:24:22.5092239Z   [32m  [32mâœ”[39m[0m[90m arrays of mixed arrays (gh-5416)[0m
2025-04-11T19:24:22.5157945Z   [32m  [32mâœ”[39m[0m[90m throws a sane error if passing a schema to `ref` (gh-6915)[0m
2025-04-11T19:24:22.5216175Z   [32m  [32mâœ”[39m[0m[90m allows using ObjectId type as schema path (gh-7049)[0m
2025-04-11T19:24:22.5274565Z   [32m  [32mâœ”[39m[0m[90m throws error if invalid type (gh-7303)[0m
2025-04-11T19:24:22.5332985Z   [32m  [32mâœ”[39m[0m[90m supports _id: false in paths definition (gh-7480) (gh-7524)[0m
2025-04-11T19:24:22.5392541Z   [32m  [32mâœ”[39m[0m[90m schema.pathType() with positional path that isnt in schema (gh-7935)[0m
2025-04-11T19:24:22.5450450Z   [32m  [32mâœ”[39m[0m[90m supports pre(Array, Function) and post(Array, Function) (gh-7803)[0m
2025-04-11T19:24:22.5523939Z   [32m  [32mâœ”[39m[0m[90m supports array with { type: ObjectID } (gh-8034)[0m
2025-04-11T19:24:22.5583518Z   [32m  [32mâœ”[39m[0m[90m supports getting path under array (gh-8057)[0m
2025-04-11T19:24:22.5647742Z   [32m  [32mâœ”[39m[0m[90m required paths with clone() (gh-8111)[0m
2025-04-11T19:24:22.5758641Z   [32m  [32mâœ”[39m[0m[90m getters/setters with clone() (gh-8124)[0m
2025-04-11T19:24:22.5858513Z   [32m  [32mâœ”[39m[0m[90m required with nullish value (gh-8219)[0m
2025-04-11T19:24:22.5918544Z   [32m  [32mâœ”[39m[0m[90m SchemaStringOptions line up with schema/string (gh-8256)[0m
2025-04-11T19:24:22.5978903Z   [32m  [32mâœ”[39m[0m[90m supports passing schema options to `Schema#path()` (gh-8292)[0m
2025-04-11T19:24:22.6051933Z   [32m  [32mâœ”[39m[0m[90m supports defining `_id: false` on single nested paths (gh-8137)[0m
2025-04-11T19:24:22.6117381Z   [32m  [32mâœ”[39m[0m[90m supports defining `_id: false` on document arrays (gh-8450)[0m
2025-04-11T19:24:22.6179373Z   [32m  [32mâœ”[39m[0m[90m copies `.add()`-ed paths when calling `.add()` with a schema argument (gh-8429)[0m
2025-04-11T19:24:22.6239852Z   [32m  [32mâœ”[39m[0m[90m copies indexes when calling add() with schema instance (gh-12654)[0m
2025-04-11T19:24:22.6300007Z   [32m  [32mâœ”[39m[0m[90m disables `id` virtual if no `_id` path (gh-3936)[0m
2025-04-11T19:24:22.6360044Z   [32m  [32mâœ”[39m[0m[90m treats dotted paths with no parent as a nested path (gh-9020)[0m
2025-04-11T19:24:22.6420512Z   [32m  [32mâœ”[39m[0m[90m allows using `mongoose.Schema.Types.Array` as type (gh-9194)[0m
2025-04-11T19:24:22.6481533Z   [32m  [32mâœ”[39m[0m[90m handles using a schematype when defining a path (gh-9370)[0m
2025-04-11T19:24:22.6542902Z   [32m  [32mâœ”[39m[0m[90m applies correct schema to nested primitive arrays (gh-9429)[0m
2025-04-11T19:24:22.6605298Z   [32m  [32mâœ”[39m[0m[90m supports `of` for array type definition (gh-9564)[0m
2025-04-11T19:24:22.6671563Z   [32m  [32mâœ”[39m[0m[90m should use the top-most class's getter/setter gh-8892[0m
2025-04-11T19:24:22.6807829Z   [32m  [32mâœ”[39m[0m[90m handles loadClass with inheritted getters (gh-9975)[0m
2025-04-11T19:24:22.6871042Z   [32m  [32mâœ”[39m[0m[90m loadClass with static getter (gh-10436)[0m
2025-04-11T19:24:22.6933393Z   [32m  [32mâœ”[39m[0m[90m supports setting `ref` on array SchemaType (gh-10029)[0m
2025-04-11T19:24:22.6996317Z   [32m  [32mâœ”[39m[0m[90m path() gets single nested paths within document arrays (gh-10164)[0m
2025-04-11T19:24:22.7060384Z   [32m  [32mâœ”[39m[0m[90m supports creating nested paths underneath document arrays (gh-10193)[0m
2025-04-11T19:24:22.7119103Z   [32m  [32mâœ”[39m[0m[90m propagates map `ref` down to individual map elements (gh-10329)[0m
2025-04-11T19:24:22.7179625Z   [32m  [32mâœ”[39m[0m[90m handles maps of maps (gh-10644)[0m
2025-04-11T19:24:22.7243260Z   [32m  [32mâœ”[39m[0m[90m handles `type: { subpath: String }` in document array definitions (gh-10750)[0m
2025-04-11T19:24:22.7303909Z   [32m  [32mâœ”[39m[0m[90m handles `Date` with `type` (gh-10807)[0m
2025-04-11T19:24:22.7474252Z   [32m  [32mâœ”[39m[0m[90m setting path with `Mixed` type to an array after number (gh-11417)[0m
2025-04-11T19:24:22.7877890Z   [32m  [32mâœ”[39m[0m[90m sets an _applyDiscriminators property on the schema and add discriminator to appropriate model (gh-7971)[0m
2025-04-11T19:24:22.8060358Z   [32m  [32mâœ”[39m[0m[90m supports numbers with Schema.discriminator() (gh-13788)[0m
2025-04-11T19:24:22.8223841Z   [32m  [32mâœ”[39m[0m[90m can use on as a schema property (gh-11580)[0m
2025-04-11T19:24:22.8291983Z   [32m  [32mâœ”[39m[0m[90m disallows using schemas with schema-level projections with map subdocuments (gh-11698)[0m
2025-04-11T19:24:22.8474117Z   [32m  [32mâœ”[39m[0m[90m allows a lean option on schemas so that all documents are lean when running a query (gh-10090)[0m
2025-04-11T19:24:22.8536516Z   [32m  [32mâœ”[39m[0m[90m disallows setting special properties with `add()` or constructor (gh-12085)[0m
2025-04-11T19:24:22.8605342Z   [32m  [32mâœ”[39m[0m[90m enable defining virtual paths by using schema constructor (gh-11908)[0m
2025-04-11T19:24:22.8664293Z   [32m  [32mâœ”[39m[0m[90m allows defining ObjectIds and Decimal128s using Types.* (gh-12205)[0m
2025-04-11T19:24:22.8724702Z   [32m  [32mâœ”[39m[0m[90m _getSchema finds path underneath nested subdocument with map of mixed (gh-12530)[0m
2025-04-11T19:24:22.8786910Z   [32m  [32mâœ”[39m[0m[90m should not allow to create a path with primitive values (gh-7558)[0m
2025-04-11T19:24:22.8849120Z   [32m  [32mâœ”[39m[0m[90m should allow deleting a virtual path off the schema gh-8397[0m
2025-04-11T19:24:22.8957740Z   [32m  [32mâœ”[39m[0m[90m should allow deleting multiple virtuals gh-8397[0m
2025-04-11T19:24:22.9079242Z   [32m  [32mâœ”[39m[0m[90m should throw an error if attempting to delete a virtual path that does not exist gh-8397[0m
2025-04-11T19:24:22.9147174Z   [32m  [32mâœ”[39m[0m[90m should throw an error if using schema with "timeseries" option as a nested schema[0m
2025-04-11T19:24:22.9324630Z   [32m  [32mâœ”[39m[0m[90m should allow timestamps on a sub document when having _id field in the main document gh-13343[0m
2025-04-11T19:24:22.9492530Z   [32m  [32mâœ”[39m[0m[90m should not save objectids as strings when using the `flattenObjectIds` option (gh-13648)[0m
2025-04-11T19:24:22.9553949Z   [32m  [32mâœ”[39m[0m[90m deduplicates idGetter (gh-14457)[0m
2025-04-11T19:24:22.9628720Z   [32m  [32mâœ”[39m[0m[90m handles recursive definitions in discriminators (gh-13978)[0m
2025-04-11T19:24:22.9834183Z   [32m  [32mâœ”[39m[0m[90m handles recursive definitions of arrays in discriminators (gh-14055)[0m
2025-04-11T19:24:23.0026416Z   [32m  [32mâœ”[39m[0m[90m should have the correct schema definition with array schemas (gh-14416)[0m
2025-04-11T19:24:23.0248687Z   [32m  [32mâœ”[39m[0m[90m handles discriminator options with Schema.prototype.discriminator (gh-14448)[0m
2025-04-11T19:24:23.0327422Z   [32m  [32mâœ”[39m[0m[90m supports schema-level readConcern (gh-14511)[0m
2025-04-11T19:24:23.0448144Z   [32m  [32mâœ”[39m[0m[90m supports casting object to subdocument (gh-14748) (gh-9076)[0m
2025-04-11T19:24:23.0516439Z   [32m  [32mâœ”[39m[0m[90m throws "already has an index" error if duplicate index definition (gh-15056)[0m
2025-04-11T19:24:23.1916420Z   [32m  [32mâœ”[39m[0m[90m path() clears existing child schemas (gh-15253)[0m[31m (134ms)[0m
2025-04-11T19:24:23.1961344Z [0m    nested fields with same name[0m
2025-04-11T19:24:23.2100957Z     [32m  [32mâœ”[39m[0m[90m don't disappear[0m
2025-04-11T19:24:23.2161702Z [0m    casting[0m
2025-04-11T19:24:23.2207120Z     [32m  [32mâœ”[39m[0m[90m number[0m
2025-04-11T19:24:23.2288008Z     [32m  [32mâœ”[39m[0m[90m date[0m
2025-04-11T19:24:23.2369279Z     [32m  [32mâœ”[39m[0m[90m objectid[0m
2025-04-11T19:24:23.2455948Z     [32m  [32mâœ”[39m[0m[90m array[0m
2025-04-11T19:24:23.2546948Z     [32m  [32mâœ”[39m[0m[90m array of arrays[0m
2025-04-11T19:24:23.2627679Z     [32m  [32mâœ”[39m[0m[90m boolean[0m
2025-04-11T19:24:23.2674147Z [0m      string[0m
2025-04-11T19:24:23.2729843Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:23.2808859Z [0m    setters[0m
2025-04-11T19:24:23.2853856Z     [32m  [32mâœ”[39m[0m[90m work[0m
2025-04-11T19:24:23.2934732Z     [32m  [32mâœ”[39m[0m[90m order[0m
2025-04-11T19:24:23.3016861Z     [32m  [32mâœ”[39m[0m[90m scope[0m
2025-04-11T19:24:23.3096875Z     [32m  [32mâœ”[39m[0m[90m casting[0m
2025-04-11T19:24:23.3176412Z     [32m  [32mâœ”[39m[0m[90m applying when none have been defined[0m
2025-04-11T19:24:23.3256936Z     [32m  [32mâœ”[39m[0m[90m assignment of non-functions throw[0m
2025-04-11T19:24:23.3302822Z [0m      array[0m
2025-04-11T19:24:23.3359765Z       [32m  [32mâœ”[39m[0m[90m object setters will be applied for each object in array[0m
2025-04-11T19:24:23.3426838Z [0m      string[0m
2025-04-11T19:24:23.3482280Z       [32m  [32mâœ”[39m[0m[90m lowercase[0m
2025-04-11T19:24:23.3584446Z       [32m  [32mâœ”[39m[0m[90m uppercase[0m
2025-04-11T19:24:23.3675273Z       [32m  [32mâœ”[39m[0m[90m trim[0m
2025-04-11T19:24:23.3755285Z [0m    getters[0m
2025-04-11T19:24:23.3800506Z     [32m  [32mâœ”[39m[0m[90m work[0m
2025-04-11T19:24:23.3880574Z     [32m  [32mâœ”[39m[0m[90m order[0m
2025-04-11T19:24:23.3960527Z     [32m  [32mâœ”[39m[0m[90m scope[0m
2025-04-11T19:24:23.4039777Z     [32m  [32mâœ”[39m[0m[90m casting[0m
2025-04-11T19:24:23.4119145Z     [32m  [32mâœ”[39m[0m[90m applying when none have been defined[0m
2025-04-11T19:24:23.4199590Z     [32m  [32mâœ”[39m[0m[90m assignment of non-functions throw[0m
2025-04-11T19:24:23.4279812Z     [32m  [32mâœ”[39m[0m[90m auto _id[0m
2025-04-11T19:24:23.4336537Z [0m    indexes[0m
2025-04-11T19:24:23.4347281Z [0m      definition[0m
2025-04-11T19:24:23.4410872Z       [32m  [32mâœ”[39m[0m[90m basic[0m
2025-04-11T19:24:23.4513847Z       [32m  [32mâœ”[39m[0m[90m compound[0m
2025-04-11T19:24:23.4615470Z       [32m  [32mâœ”[39m[0m[90m compound based on name (gh-6499)[0m
2025-04-11T19:24:23.4716966Z       [32m  [32mâœ”[39m[0m[90m using "ascending" and "descending" for order (gh-13725)[0m
2025-04-11T19:24:23.4822275Z       [32m  [32mâœ”[39m[0m[90m with single nested doc (gh-6113)[0m
2025-04-11T19:24:23.4929637Z       [32m  [32mâœ”[39m[0m[90m with embedded discriminator (gh-6485)[0m
2025-04-11T19:24:23.4996887Z [0m    plugins[0m
2025-04-11T19:24:23.5042631Z     [32m  [32mâœ”[39m[0m[90m work[0m
2025-04-11T19:24:23.5123095Z     [32m  [32mâœ”[39m[0m[90m options param (gh-12077)[0m
2025-04-11T19:24:23.5179486Z [0m    options[0m
2025-04-11T19:24:23.5224188Z     [32m  [32mâœ”[39m[0m[90m defaults are set[0m
2025-04-11T19:24:23.5297017Z     [32m  [32mâœ”[39m[0m[90m setting[0m
2025-04-11T19:24:23.5353860Z [0m    virtuals[0m
2025-04-11T19:24:23.5398827Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-11T19:24:23.5444858Z [0m      id[0m
2025-04-11T19:24:23.5500662Z       [32m  [32mâœ”[39m[0m[90m default creation of id can be overridden (gh-298)[0m
2025-04-11T19:24:23.5609213Z       [32m  [32mâœ”[39m[0m[90m disabling[0m
2025-04-11T19:24:23.5677042Z [0m      getter[0m
2025-04-11T19:24:23.5733159Z       [32m  [32mâœ”[39m[0m[90m scope[0m
2025-04-11T19:24:23.5800881Z [0m      setter[0m
2025-04-11T19:24:23.5856826Z       [32m  [32mâœ”[39m[0m[90m scope[0m
2025-04-11T19:24:23.5936127Z [0m    other contexts[0m
2025-04-11T19:24:23.5980887Z     [36m  - work[0m
2025-04-11T19:24:23.6038152Z [0m    #add()[0m
2025-04-11T19:24:23.6088719Z     [32m  [32mâœ”[39m[0m[90m does not pollute existing paths[0m
2025-04-11T19:24:23.6170291Z     [32m  [32mâœ”[39m[0m[90m returns the schema instance[0m
2025-04-11T19:24:23.6251053Z     [32m  [32mâœ”[39m[0m[90m returns the schema instance when schema instance is passed[0m
2025-04-11T19:24:23.6437152Z     [32m  [32mâœ”[39m[0m[90m merging nested objects (gh-662)[0m
2025-04-11T19:24:23.6523985Z     [32m  [32mâœ”[39m[0m[90m prefix (gh-1730)[0m
2025-04-11T19:24:23.6608147Z     [32m  [32mâœ”[39m[0m[90m adds another schema (gh-6897)[0m
2025-04-11T19:24:23.6692376Z     [32m  [32mâœ”[39m[0m[90m overwrites existing paths (gh-10203)[0m
2025-04-11T19:24:23.6751434Z [0m    construction[0m
2025-04-11T19:24:23.6805742Z     [32m  [32mâœ”[39m[0m[90m array of object literal missing a type is interpreted as DocumentArray[0m
2025-04-11T19:24:23.6894318Z     [32m  [32mâœ”[39m[0m[90m array of object literal with type.type is interpreted as DocumentArray[0m
2025-04-11T19:24:23.6983010Z     [32m  [32mâœ”[39m[0m[90m does not alter original argument (gh-1364)[0m
2025-04-11T19:24:23.7183276Z     [32m  [32mâœ”[39m[0m[90m properly gets value of plain objects when dealing with refs (gh-1606)[0m
2025-04-11T19:24:23.7273039Z     [32m  [32mâœ”[39m[0m[90m array of of schemas and objects (gh-7218)[0m
2025-04-11T19:24:23.7354114Z     [32m  [32mâœ”[39m[0m[90m copies options from array of schemas[0m
2025-04-11T19:24:23.7435846Z     [32m  [32mâœ”[39m[0m[90m propagates typeKey down to implicitly created single nested schemas (gh-13154)[0m
2025-04-11T19:24:23.7492663Z [0m    property names[0m
2025-04-11T19:24:23.7553220Z     [32m  [32mâœ”[39m[0m[90m that do not conflict do not throw[0m
2025-04-11T19:24:23.7601101Z [0m      reserved keys are log a warning (gh-9010)[0m
2025-04-11T19:24:23.7662229Z       [32m  [32mâœ”[39m[0m[90m `emit` when used as a schema path logs a warning[0m
2025-04-11T19:24:23.7766926Z       [32m  [32mâœ”[39m[0m[90m `emit` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-11T19:24:23.7870752Z       [32m  [32mâœ”[39m[0m[90m `listeners` when used as a schema path logs a warning[0m
2025-04-11T19:24:23.7974301Z       [32m  [32mâœ”[39m[0m[90m `listeners` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-11T19:24:23.8077627Z       [32m  [32mâœ”[39m[0m[90m `removeListener` when used as a schema path logs a warning[0m
2025-04-11T19:24:23.8180947Z       [32m  [32mâœ”[39m[0m[90m `removeListener` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-11T19:24:23.8283832Z       [32m  [32mâœ”[39m[0m[90m `errors` when used as a schema path logs a warning[0m
2025-04-11T19:24:23.8377129Z       [32m  [32mâœ”[39m[0m[90m `errors` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-11T19:24:23.8480378Z       [32m  [32mâœ”[39m[0m[90m `get` when used as a schema path logs a warning[0m
2025-04-11T19:24:23.8583602Z       [32m  [32mâœ”[39m[0m[90m `get` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-11T19:24:23.8690890Z       [32m  [32mâœ”[39m[0m[90m `init` when used as a schema path logs a warning[0m
2025-04-11T19:24:23.8794066Z       [32m  [32mâœ”[39m[0m[90m `init` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-11T19:24:23.8896963Z       [32m  [32mâœ”[39m[0m[90m `isModified` when used as a schema path logs a warning[0m
2025-04-11T19:24:23.8999904Z       [32m  [32mâœ”[39m[0m[90m `isModified` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-11T19:24:23.9102641Z       [32m  [32mâœ”[39m[0m[90m `isNew` when used as a schema path logs a warning[0m
2025-04-11T19:24:23.9205729Z       [32m  [32mâœ”[39m[0m[90m `isNew` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-11T19:24:23.9309261Z       [32m  [32mâœ”[39m[0m[90m `populated` when used as a schema path logs a warning[0m
2025-04-11T19:24:23.9412440Z       [32m  [32mâœ”[39m[0m[90m `populated` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-11T19:24:23.9514616Z       [32m  [32mâœ”[39m[0m[90m `remove` when used as a schema path logs a warning[0m
2025-04-11T19:24:23.9617081Z       [32m  [32mâœ”[39m[0m[90m `remove` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-11T19:24:23.9719772Z       [32m  [32mâœ”[39m[0m[90m `save` when used as a schema path logs a warning[0m
2025-04-11T19:24:23.9823107Z       [32m  [32mâœ”[39m[0m[90m `save` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-11T19:24:23.9924679Z       [32m  [32mâœ”[39m[0m[90m `toObject` when used as a schema path logs a warning[0m
2025-04-11T19:24:24.0017976Z       [32m  [32mâœ”[39m[0m[90m `toObject` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-11T19:24:24.0121627Z       [32m  [32mâœ”[39m[0m[90m `validate` when used as a schema path logs a warning[0m
2025-04-11T19:24:24.0224068Z       [32m  [32mâœ”[39m[0m[90m `validate` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-11T19:24:24.0301556Z [0m    pathType()[0m
2025-04-11T19:24:24.0353441Z     [32m  [32mâœ”[39m[0m[90m handles maps (gh-7448) (gh-7464)[0m
2025-04-11T19:24:24.0409839Z [0m      when called on an explicit real path[0m
2025-04-11T19:24:24.0464874Z       [32m  [32mâœ”[39m[0m[90m returns "real"[0m
2025-04-11T19:24:24.0521532Z [0m      when called on a virtual[0m
2025-04-11T19:24:24.0576338Z       [32m  [32mâœ”[39m[0m[90m returns virtual[0m
2025-04-11T19:24:24.0644574Z [0m      when called on nested structure[0m
2025-04-11T19:24:24.0700046Z       [32m  [32mâœ”[39m[0m[90m returns nested[0m
2025-04-11T19:24:24.0767863Z [0m      when called on undefined path[0m
2025-04-11T19:24:24.0823345Z       [32m  [32mâœ”[39m[0m[90m returns adHocOrUndefined[0m
2025-04-11T19:24:24.0902358Z [0m    remove()[0m
2025-04-11T19:24:24.0951461Z     [32m  [32mâœ”[39m[0m[90m returns the schema instance[0m
2025-04-11T19:24:24.1030787Z     [32m  [32mâœ”[39m[0m[90m removes a single path[0m
2025-04-11T19:24:24.1109503Z     [32m  [32mâœ”[39m[0m[90m removes a nested path[0m
2025-04-11T19:24:24.1188918Z     [32m  [32mâœ”[39m[0m[90m removes all children of a nested path (gh-2398)[0m
2025-04-11T19:24:24.1268021Z     [32m  [32mâœ”[39m[0m[90m removes an array of paths[0m
2025-04-11T19:24:24.1350604Z     [32m  [32mâœ”[39m[0m[90m works properly with virtuals (gh-2398)[0m
2025-04-11T19:24:24.1431968Z     [32m  [32mâœ”[39m[0m[90m methods named toString (gh-4551)[0m
2025-04-11T19:24:24.1512539Z     [32m  [32mâœ”[39m[0m[90m handles default value = 0 (gh-4620)[0m
2025-04-11T19:24:24.1598962Z     [32m  [32mâœ”[39m[0m[90m type: childSchema (gh-5521)[0m
2025-04-11T19:24:24.1681134Z     [32m  [32mâœ”[39m[0m[90m Decimal128 type (gh-4759)[0m
2025-04-11T19:24:24.1765601Z     [32m  [32mâœ”[39m[0m[90m childSchemas prop (gh-5695)[0m
2025-04-11T19:24:24.1811689Z [0m      clone()[0m
2025-04-11T19:24:24.1867756Z       [32m  [32mâœ”[39m[0m[90m copies methods, statics, and query helpers (gh-5752)[0m
2025-04-11T19:24:24.1969450Z       [32m  [32mâœ”[39m[0m[90m copies validators declared with validate() (gh-5607)[0m
2025-04-11T19:24:24.2071705Z       [32m  [32mâœ”[39m[0m[90m copies virtuals (gh-6133)[0m
2025-04-11T19:24:24.2178643Z       [32m  [32mâœ”[39m[0m[90m with nested virtuals (gh-6274)[0m
2025-04-11T19:24:24.2298930Z       [32m  [32mâœ”[39m[0m[90m with alternative option syntaxes (gh-6274)[0m
2025-04-11T19:24:24.2421277Z       [32m  [32mâœ”[39m[0m[90m copies base for using custom types after cloning (gh-7377)[0m
2025-04-11T19:24:24.2524058Z       [32m  [32mâœ”[39m[0m[90m clones schema types (gh-7537)[0m
2025-04-11T19:24:24.2628567Z       [32m  [32mâœ”[39m[0m[90m correctly copies all child schemas (gh-7537)[0m
2025-04-11T19:24:24.2746233Z       [32m  [32mâœ”[39m[0m[90m copies single embedded discriminators (gh-7894)[0m
2025-04-11T19:24:24.2872359Z       [32m  [32mâœ”[39m[0m[90m copies array discriminators (gh-7954)[0m
2025-04-11T19:24:24.2977230Z       [32m  [32mâœ”[39m[0m[90m uses Mongoose instance's Schema constructor (gh-9426)[0m
2025-04-11T19:24:24.3084518Z       [32m  [32mâœ”[39m[0m[90m avoids creating duplicate array constructors when cloning doc array underneath subdoc (gh-13626)[0m
2025-04-11T19:24:24.3164684Z [0m    pick() (gh-8207)[0m
2025-04-11T19:24:24.3213548Z     [32m  [32mâœ”[39m[0m[90m works with nested paths[0m
2025-04-11T19:24:24.3297804Z     [32m  [32mâœ”[39m[0m[90m with single nested paths[0m
2025-04-11T19:24:24.3356455Z [0m    omit() (gh-12931)[0m
2025-04-11T19:24:24.3404826Z     [32m  [32mâœ”[39m[0m[90m works with nested paths[0m
2025-04-11T19:24:24.3489372Z     [32m  [32mâœ”[39m[0m[90m with single nested paths[0m
2025-04-11T19:24:24.3548184Z [0m    path-level custom cast (gh-8300)[0m
2025-04-11T19:24:24.3598225Z     [32m  [32mâœ”[39m[0m[90m with numbers[0m
2025-04-11T19:24:24.3684032Z     [32m  [32mâœ”[39m[0m[90m with function cast error format[0m
2025-04-11T19:24:24.3767380Z     [32m  [32mâœ”[39m[0m[90m with objectids[0m
2025-04-11T19:24:24.3850986Z     [32m  [32mâœ”[39m[0m[90m with boolean[0m
2025-04-11T19:24:24.3909659Z [0m    gh-8849[0m
2025-04-11T19:24:24.4084476Z     [32m  [32mâœ”[39m[0m[90m treats `select: undefined` as not specifying `select` option[0m
2025-04-11T19:24:24.4277063Z     [32m  [32mâœ”[39m[0m[90m treats `select: null` as not specifying `select` option[0m
2025-04-11T19:24:24.4337222Z [0m    mongoose.set(`strictQuery`, value); (gh-6658)[0m
2025-04-11T19:24:24.4382934Z     [32m  [32mâœ”[39m[0m[90m setting `strictQuery` on base sets strictQuery to schema (gh-6658)[0m
2025-04-11T19:24:24.4463172Z     [32m  [32mâœ”[39m[0m[90m `strictQuery` set on base gets overwritten by option set on schema (gh-6658)[0m
2025-04-11T19:24:24.4519614Z [0m    cast option (gh-8407)[0m
2025-04-11T19:24:24.4572250Z     [32m  [32mâœ”[39m[0m[90m disable casting using `false`[0m
2025-04-11T19:24:24.4655636Z     [32m  [32mâœ”[39m[0m[90m custom casters[0m
2025-04-11T19:24:24.4715498Z [0m    jsonSchema() (gh-11162)[0m
2025-04-11T19:24:24.5139438Z     [32m  [32mâœ”[39m[0m[90m handles basic example with only top-level keys[0m[33m (38ms)[0m
2025-04-11T19:24:24.5253781Z     [32m  [32mâœ”[39m[0m[90m handles all primitive data types[0m
2025-04-11T19:24:24.5582461Z     [32m  [32mâœ”[39m[0m[90m handles arrays and document arrays[0m
2025-04-11T19:24:24.5850675Z     [32m  [32mâœ”[39m[0m[90m handles nested paths and subdocuments[0m
2025-04-11T19:24:24.6149489Z     [32m  [32mâœ”[39m[0m[90m handles maps[0m
2025-04-11T19:24:24.6254236Z     [32m  [32mâœ”[39m[0m[90m handles map with required element[0m
2025-04-11T19:24:24.6342779Z     [32m  [32mâœ”[39m[0m[90m handles required enums[0m
2025-04-11T19:24:24.6430930Z     [32m  [32mâœ”[39m[0m[90m throws error on mixed type[0m
2025-04-11T19:24:24.6518430Z 
2025-04-11T19:24:24.6792228Z 
2025-04-11T19:24:24.6792860Z [92m [0m[32m 3731 passing[0m[90m (1m)[0m
2025-04-11T19:24:24.6793469Z [36m [0m[36m 59 pending[0m
2025-04-11T19:24:24.6793809Z [31m  2 failing[0m
2025-04-11T19:24:24.6793967Z 
2025-04-11T19:24:24.6796439Z [0m  1) connections:
2025-04-11T19:24:24.6797342Z        creates collection if creating model while connection is disconnected with bufferCommands=false:
2025-04-11T19:24:24.6798933Z [0m[31m     AssertionError [ERR_ASSERTION]: {
2025-04-11T19:24:24.6799547Z   _id: new ObjectId('67f96c41950a667dbe9c86fa'),
2025-04-11T19:24:24.6800347Z   myDate: 2022-06-01T00:00:00.000Z,
2025-04-11T19:24:24.6800792Z   __v: 0
2025-04-11T19:24:24.6801224Z } == null[0m[90m
2025-04-11T19:24:24.6801833Z       at new AssertionError (ext:deno_node/assertion_error.ts:412:11)
2025-04-11T19:24:24.6802480Z       at toNode (node:assert:37:15)
2025-04-11T19:24:24.6802964Z       at Function.equal (node:assert:177:3)
2025-04-11T19:24:24.6803602Z       at Context.<anonymous> (file:///home/runner/work/mongoose/mongoose/test/connection.test.js:1597:12)
2025-04-11T19:24:24.6804156Z       at Object.runMicrotasks (ext:core/01_core.js:686:26)
2025-04-11T19:24:24.6804792Z       at processTicksAndRejections (ext:deno_node/_next_tick.ts:59:10)
2025-04-11T19:24:24.6805408Z       at runNextTicks (ext:deno_node/_next_tick.ts:76:3)
2025-04-11T19:24:24.6805986Z       at eventLoopTick (ext:core/01_core.js:184:21)
2025-04-11T19:24:24.6806495Z [0m
2025-04-11T19:24:24.6806822Z [0m  2) Int32
2025-04-11T19:24:24.6807118Z        mongoDB integration
2025-04-11T19:24:24.6807465Z          supports populate():
2025-04-11T19:24:24.6808704Z [0m[31m     MongoServerError: E11000 duplicate key error collection: mongoose_test.Child index: _id_ dup key: { _id: 42 }[0m[90m
2025-04-11T19:24:24.6810412Z       at InsertOneOperation.execute (file:///home/runner/work/mongoose/mongoose/node_modules/mongodb/lib/operations/insert.js:51:19)
2025-04-11T19:24:24.6811446Z       at eventLoopTick (ext:core/01_core.js:177:7)
2025-04-11T19:24:24.6812552Z       at async tryOperation (file:///home/runner/work/mongoose/mongoose/node_modules/mongodb/lib/operations/execute_operation.js:207:20)
2025-04-11T19:24:24.6814161Z       at async executeOperation (file:///home/runner/work/mongoose/mongoose/node_modules/mongodb/lib/operations/execute_operation.js:75:16)
2025-04-11T19:24:24.6815687Z       at async Collection.insertOne (file:///home/runner/work/mongoose/mongoose/node_modules/mongodb/lib/collection.js:157:16)
2025-04-11T19:24:24.6816575Z [0m
2025-04-11T19:24:24.6816729Z 
2025-04-11T19:24:24.6816739Z 
2025-04-11T19:24:25.3516339Z ##[error]Process completed with exit code 1.
