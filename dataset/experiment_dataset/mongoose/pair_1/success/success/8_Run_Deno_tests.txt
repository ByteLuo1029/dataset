2025-04-09T19:12:55.2770846Z ##[group]Run npm run test-deno
2025-04-09T19:12:55.2771177Z [36;1mnpm run test-deno[0m
2025-04-09T19:12:55.2798260Z shell: /usr/bin/bash -e {0}
2025-04-09T19:12:55.2798513Z env:
2025-04-09T19:12:55.2798702Z   MONGOMS_VERSION: 6.0.15
2025-04-09T19:12:55.2798954Z   MONGOMS_PREFER_GLOBAL_PATH: 1
2025-04-09T19:12:55.2799193Z   FORCE_COLOR: true
2025-04-09T19:12:55.2799391Z ##[endgroup]
2025-04-09T19:12:55.3823955Z 
2025-04-09T19:12:55.3824651Z > mongoose@8.12.1 test-deno
2025-04-09T19:12:55.3825736Z > deno run --allow-env --allow-read --allow-net --allow-run --allow-sys --allow-write ./test/deno.js
2025-04-09T19:12:55.3826457Z 
2025-04-09T19:12:55.9142865Z [0m[32mDownload[0m https://deno.land/std/flags/mod.ts
2025-04-09T19:12:56.0813162Z [0m[33mWarning[0m Implicitly using latest version (0.224.0) for https://deno.land/std/flags/mod.ts
2025-04-09T19:12:56.0818262Z [0m[32mDownload[0m https://deno.land/std@0.224.0/flags/mod.ts
2025-04-09T19:12:56.1346102Z [0m[32mDownload[0m https://deno.land/std@0.224.0/assert/assert_exists.ts
2025-04-09T19:12:56.2013150Z [0m[32mDownload[0m https://deno.land/std@0.224.0/assert/assertion_error.ts
2025-04-09T19:12:56.7299417Z [31m
2025-04-09T19:12:56.7299979Z You're not testing shards!
2025-04-09T19:12:56.7300638Z Please set the MONGOOSE_SHARD_TEST_URI env variable.
2025-04-09T19:12:56.7301376Z e.g: `mongodb://127.0.0.1:27017/database
2025-04-09T19:12:56.7302038Z Sharding must already be enabled on your database
2025-04-09T19:12:56.7302627Z [39m
2025-04-09T19:12:56.8137470Z 
2025-04-09T19:12:56.8184804Z [0m[0m
2025-04-09T19:12:56.8880340Z [0m  types.number[0m
2025-04-09T19:12:56.8919688Z   [32m  [32mâœ”[39m[0m[90m an empty string casts to null[0m
2025-04-09T19:12:56.8965414Z   [32m  [32mâœ”[39m[0m[90m a null number should castForQuery to null[0m
2025-04-09T19:12:56.9028703Z   [32m  [32mâœ”[39m[0m[90m array throws cast number error[0m
2025-04-09T19:12:56.9079078Z   [32m  [32mâœ”[39m[0m[90m three throws cast number error[0m
2025-04-09T19:12:56.9116893Z   [32m  [32mâœ”[39m[0m[90m {} throws cast number error[0m
2025-04-09T19:12:56.9162512Z   [32m  [32mâœ”[39m[0m[90m does not throw number cast error[0m
2025-04-09T19:12:56.9207462Z   [32m  [32mâœ”[39m[0m[90m boolean casts to 0/1 (gh-3475)[0m
2025-04-09T19:12:56.9252396Z   [32m  [32mâœ”[39m[0m[90m prefers valueOf function if one exists (gh-6299)[0m
2025-04-09T19:12:56.9307860Z   [32m  [32mâœ”[39m[0m[90m throws a CastError with a bad conditional (gh-6927)[0m
2025-04-09T19:12:56.9329963Z [0m    custom caster (gh-7045)[0m
2025-04-09T19:12:56.9379829Z     [32m  [32mâœ”[39m[0m[90m disallow empty string[0m
2025-04-09T19:12:56.9447901Z     [32m  [32mâœ”[39m[0m[90m disable casting[0m
2025-04-09T19:12:56.9503530Z 
2025-04-09T19:12:56.9504081Z [0m  driver[0m
2025-04-09T19:12:56.9627753Z   [32m  [32mâœ”[39m[0m[90m can set custom driver (gh-11900)[0m
2025-04-09T19:12:56.9756275Z   [32m  [32mâœ”[39m[0m[90m multiple drivers (gh-12638)[0m
2025-04-09T19:12:56.9788928Z 
2025-04-09T19:12:56.9789385Z [0m  model[0m
2025-04-09T19:12:56.9800570Z [0m    create()[0m
2025-04-09T19:12:57.0122201Z     [32m  [32mâœ”[39m[0m[90m accepts an array and returns an array[0m
2025-04-09T19:12:57.0187951Z     [32m  [32mâœ”[39m[0m[90m fires callback when passed 0 docs[0m
2025-04-09T19:12:57.0255469Z     [32m  [32mâœ”[39m[0m[90m fires callback when empty array passed[0m
2025-04-09T19:12:57.0331583Z     [32m  [32mâœ”[39m[0m[90m supports passing options[0m
2025-04-09T19:12:57.0399587Z     [32m  [32mâœ”[39m[0m[90m returns a promise[0m
2025-04-09T19:12:57.1531188Z     [32m  [32mâœ”[39m[0m[90m creates in parallel[0m[31m (105ms)[0m
2025-04-09T19:12:57.1779855Z     [32m  [32mâœ”[39m[0m[90m should return the first error immediately if "aggregateErrors" is not explicitly set[0m
2025-04-09T19:12:57.2021070Z     [32m  [32mâœ”[39m[0m[90m should not return errors immediately if "aggregateErrors" is "true"[0m
2025-04-09T19:12:57.2053328Z [0m      callback is optional[0m
2025-04-09T19:12:57.2117540Z       [32m  [32mâœ”[39m[0m[90m with one doc[0m
2025-04-09T19:12:57.2217181Z       [32m  [32mâœ”[39m[0m[90m with more than one doc[0m
2025-04-09T19:12:57.2317678Z       [32m  [32mâœ”[39m[0m[90m with array of docs[0m
2025-04-09T19:12:57.2413522Z       [32m  [32mâœ”[39m[0m[90m and should reject promise on error[0m
2025-04-09T19:12:57.2504832Z       [32m  [32mâœ”[39m[0m[90m when passed an empty array, returns an empty array[0m
2025-04-09T19:12:57.2611177Z       [32m  [32mâœ”[39m[0m[90m treats undefined first arg as doc rather than callback (gh-9765)[0m
2025-04-09T19:12:57.2748583Z       [32m  [32mâœ”[39m[0m[90m ignores undefined last arg (gh-13487)[0m
2025-04-09T19:12:57.2803371Z [0m      ordered[0m
2025-04-09T19:12:57.3150313Z       [32m  [32mâœ”[39m[0m[90m runs the document insertion in a series when using the ordered option gh-4038[0m
2025-04-09T19:12:57.3408989Z       [32m  [32mâœ”[39m[0m[90m should throw an error only after all the documents have finished saving gh-4628[0m
2025-04-09T19:12:57.3609272Z       [32m  [32mâœ”[39m[0m[90m should return the first error immediately if "aggregateErrors" is not explicitly set (ordered)[0m
2025-04-09T19:12:57.3810685Z       [32m  [32mâœ”[39m[0m[90m should not return errors immediately if "aggregateErrors" is "true" (ordered)[0m
2025-04-09T19:12:57.3914381Z 
2025-04-09T19:12:57.3914955Z [0m  model: watch: [0m
2025-04-09T19:12:57.3926200Z [0m    with buffering[0m
2025-04-09T19:12:57.3938950Z     [36m  - watch() before connecting (gh-5964)[0m
2025-04-09T19:12:57.3939623Z     [36m  - watch() close() prevents buffered watch op from running (gh-7022)[0m
2025-04-09T19:12:57.3940163Z     [36m  - watch() close() closes the stream (gh-7022)[0m
2025-04-09T19:12:57.3961144Z 
2025-04-09T19:12:57.3961950Z [0m  model[0m
2025-04-09T19:12:57.4165810Z   [32m  [32mâœ”[39m[0m[90m sets correct partialFilterExpression for document array (gh-9091)[0m
2025-04-09T19:12:57.4344271Z   [32m  [32mâœ”[39m[0m[90m skips automatic indexing on childSchema if autoIndex: false (gh-9150)[0m
2025-04-09T19:12:57.4386545Z [0m    indexes[0m
2025-04-09T19:12:57.4597692Z     [32m  [32mâœ”[39m[0m[90m are created when model is compiled[0m
2025-04-09T19:12:57.4845226Z     [32m  [32mâœ”[39m[0m[90m of embedded documents[0m
2025-04-09T19:12:57.5036190Z     [32m  [32mâœ”[39m[0m[90m of embedded documents unless excludeIndexes (gh-5575) (gh-8343)[0m
2025-04-09T19:12:57.5387731Z     [32m  [32mâœ”[39m[0m[90m of multiple embedded documents with same schema[0m
2025-04-09T19:12:57.5700757Z     [32m  [32mâœ”[39m[0m[90m compound: on embedded docs[0m
2025-04-09T19:12:57.5795403Z     [32m  [32mâœ”[39m[0m[90m nested embedded docs (gh-5199)[0m
2025-04-09T19:12:57.5884362Z     [32m  [32mâœ”[39m[0m[90m primitive arrays (gh-3347)[0m
2025-04-09T19:12:57.6163384Z     [32m  [32mâœ”[39m[0m[90m error should emit on the model[0m
2025-04-09T19:12:57.6438890Z     [32m  [32mâœ”[39m[0m[90m when one index creation errors[0m
2025-04-09T19:12:57.6656450Z     [32m  [32mâœ”[39m[0m[90m creates descending indexes from schema definition(gh-8895)[0m
2025-04-09T19:12:57.6712200Z [0m      auto creation[0m
2025-04-09T19:12:57.7878063Z       [32m  [32mâœ”[39m[0m[90m can be disabled[0m[31m (111ms)[0m
2025-04-09T19:12:57.7945345Z [0m        global autoIndexes (gh-1875)[0m
2025-04-09T19:12:57.8105766Z         [32m  [32mâœ”[39m[0m[90m will create indexes as a default[0m
2025-04-09T19:12:57.9410612Z         [32m  [32mâœ”[39m[0m[90m will not create indexes if the global auto index is false and schema option isnt set (gh-1875)[0m[31m (117ms)[0m
2025-04-09T19:12:57.9504121Z [0m      model.ensureIndexes()[0m
2025-04-09T19:12:57.9515008Z       [36m  - is a function[0m
2025-04-09T19:12:57.9515433Z       [36m  - returns a Promise[0m
2025-04-09T19:12:57.9515767Z       [36m  - creates indexes[0m
2025-04-09T19:12:57.9537584Z [0m    discriminators with unique[0m
2025-04-09T19:12:58.0161019Z     [32m  [32mâœ”[39m[0m[90m converts to partial unique index (gh-6347)[0m[33m (57ms)[0m
2025-04-09T19:12:58.0356523Z     [32m  [32mâœ”[39m[0m[90m decorated discriminator index with syncIndexes (gh-6347)[0m
2025-04-09T19:12:58.0567031Z     [32m  [32mâœ”[39m[0m[90m uses schema-level collation by default (gh-9912)[0m
2025-04-09T19:12:58.0901096Z     [32m  [32mâœ”[39m[0m[90m different collation with syncIndexes() (gh-8521)[0m
2025-04-09T19:12:58.1277611Z     [32m  [32mâœ”[39m[0m[90m reports syncIndexes() error (gh-9303)[0m
2025-04-09T19:12:58.1503626Z     [32m  [32mâœ”[39m[0m[90m should not re-create a compound text index that involves non-text indexes, using syncIndexes (gh-13136)[0m
2025-04-09T19:12:58.1705283Z     [32m  [32mâœ”[39m[0m[90m should not find a diff when calling diffIndexes after syncIndexes involving a text and non-text compound index (gh-13136)[0m
2025-04-09T19:12:58.1998178Z     [32m  [32mâœ”[39m[0m[90m cleanIndexes (gh-6676)[0m
2025-04-09T19:12:58.2196436Z     [32m  [32mâœ”[39m[0m[90m should prevent collation on text indexes (gh-10044)[0m
2025-04-09T19:12:58.2478080Z     [32m  [32mâœ”[39m[0m[90m should do a dryRun feat-10316[0m
2025-04-09T19:12:58.2579112Z     [32m  [32mâœ”[39m[0m[90m running diffIndexes with a non-existent collection should not throw an error (gh-14010)[0m
2025-04-09T19:12:58.2705786Z 
2025-04-09T19:12:58.2706311Z [0m  types.buffer[0m
2025-04-09T19:12:58.2769735Z   [32m  [32mâœ”[39m[0m[90m test that a mongoose buffer behaves and quacks like a buffer[0m
2025-04-09T19:12:58.2987328Z   [32m  [32mâœ”[39m[0m[90m buffer validation[0m
2025-04-09T19:12:58.3186189Z   [32m  [32mâœ”[39m[0m[90m buffer storage[0m
2025-04-09T19:12:58.3397104Z   [32m  [32mâœ”[39m[0m[90m test write markModified[0m
2025-04-09T19:12:58.3614187Z   [32m  [32mâœ”[39m[0m[90m can be set to null[0m
2025-04-09T19:12:58.3831114Z   [32m  [32mâœ”[39m[0m[90m can be updated to null[0m
2025-04-09T19:12:58.3875009Z [0m    #toObject[0m
2025-04-09T19:12:58.3920123Z     [32m  [32mâœ”[39m[0m[90m retains custom subtypes[0m
2025-04-09T19:12:58.3982102Z [0m    subtype[0m
2025-04-09T19:12:58.4032853Z     [32m  [32mâœ”[39m[0m[90m default value[0m
2025-04-09T19:12:58.4152662Z     [32m  [32mâœ”[39m[0m[90m method works[0m
2025-04-09T19:12:58.4401288Z     [32m  [32mâœ”[39m[0m[90m is stored[0m
2025-04-09T19:12:58.4670383Z     [32m  [32mâœ”[39m[0m[90m changes are retained[0m
2025-04-09T19:12:58.4768331Z     [32m  [32mâœ”[39m[0m[90m cast from number (gh-3764)[0m
2025-04-09T19:12:58.4904872Z     [32m  [32mâœ”[39m[0m[90m cast from string[0m
2025-04-09T19:12:58.5026571Z     [32m  [32mâœ”[39m[0m[90m cast from array[0m
2025-04-09T19:12:58.5147820Z     [32m  [32mâœ”[39m[0m[90m cast from Binary[0m
2025-04-09T19:12:58.5637944Z     [32m  [32mâœ”[39m[0m[90m cast from json (gh-6863)[0m
2025-04-09T19:12:58.5758509Z     [32m  [32mâœ”[39m[0m[90m is an `instanceof Buffer`[0m
2025-04-09T19:12:58.5888211Z 
2025-04-09T19:12:58.5888814Z [0m  model aggregate[0m
2025-04-09T19:12:58.6712485Z [0m    works[0m
2025-04-09T19:12:58.6775890Z     [32m  [32mâœ”[39m[0m[90m when return promise[0m
2025-04-09T19:12:58.6848254Z     [32m  [32mâœ”[39m[0m[90m with arrays[0m
2025-04-09T19:12:58.6922092Z     [32m  [32mâœ”[39m[0m[90m with Aggregate syntax[0m
2025-04-09T19:12:58.6996854Z     [32m  [32mâœ”[39m[0m[90m with Aggregate syntax if callback not provided[0m
2025-04-09T19:12:58.7062626Z     [32m  [32mâœ”[39m[0m[90m when returning Aggregate[0m
2025-04-09T19:12:58.7195220Z     [32m  [32mâœ”[39m[0m[90m can use helper for $out[0m
2025-04-09T19:12:58.7278242Z 
2025-04-09T19:12:58.7279083Z [0m  is compatible with object created using Object.create(null) (gh-1484)[0m
2025-04-09T19:12:58.7346240Z   [32m  [32mâœ”[39m[0m[90m during construction[0m
2025-04-09T19:12:58.7390390Z   [32m  [32mâœ”[39m[0m[90m with .set(path, obj)[0m
2025-04-09T19:12:58.7438841Z   [32m  [32mâœ”[39m[0m[90m with schema[0m
2025-04-09T19:12:58.7499011Z 
2025-04-09T19:12:58.7499777Z [0m  Map[0m
2025-04-09T19:12:58.7694241Z   [32m  [32mâœ”[39m[0m[90m validation[0m
2025-04-09T19:12:58.7769752Z   [32m  [32mâœ”[39m[0m[90m deep set[0m
2025-04-09T19:12:58.7991419Z   [32m  [32mâœ”[39m[0m[90m supports delete() (gh-7743)[0m
2025-04-09T19:12:58.8259213Z   [32m  [32mâœ”[39m[0m[90m query casting[0m
2025-04-09T19:12:58.8453987Z   [32m  [32mâœ”[39m[0m[90m defaults[0m
2025-04-09T19:12:58.8633603Z   [32m  [32mâœ”[39m[0m[90m validation[0m
2025-04-09T19:12:58.8843418Z   [32m  [32mâœ”[39m[0m[90m with single nested subdocs[0m
2025-04-09T19:12:58.9055857Z   [32m  [32mâœ”[39m[0m[90m discriminators[0m
2025-04-09T19:12:58.9291615Z   [32m  [32mâœ”[39m[0m[90m embedded discriminators[0m
2025-04-09T19:12:58.9454566Z   [32m  [32mâœ”[39m[0m[90m toJSON seralizes map paths (gh-6478)[0m
2025-04-09T19:12:58.9689895Z   [32m  [32mâœ”[39m[0m[90m updating map doesnt crash (gh-6750)[0m
2025-04-09T19:12:58.9862550Z   [32m  [32mâœ”[39m[0m[90m works with sub doc hooks (gh-6938)[0m
2025-04-09T19:12:59.0030690Z   [32m  [32mâœ”[39m[0m[90m array of mixed maps (gh-6995)[0m
2025-04-09T19:12:59.0217421Z   [32m  [32mâœ”[39m[0m[90m only runs setters once on init (gh-7272)[0m
2025-04-09T19:12:59.0403726Z   [32m  [32mâœ”[39m[0m[90m init then set marks correct path as modified (gh-7321)[0m
2025-04-09T19:12:59.0574830Z   [32m  [32mâœ”[39m[0m[90m nested maps (gh-7630)[0m
2025-04-09T19:12:59.0649958Z   [32m  [32mâœ”[39m[0m[90m get full path in validator with `propsParameter` (gh-7447)[0m
2025-04-09T19:12:59.0756607Z   [32m  [32mâœ”[39m[0m[90m treats `of` as a schema if typeKey is not set (gh-7859)[0m
2025-04-09T19:12:59.0882045Z   [32m  [32mâœ”[39m[0m[90m works with clone() (gh-8357)[0m
2025-04-09T19:12:59.0988620Z   [32m  [32mâœ”[39m[0m[90m maps of single nested docs with inline _id (gh-8424)[0m
2025-04-09T19:12:59.1209571Z   [32m  [32mâœ”[39m[0m[90m avoids marking path as modified if setting to same value (gh-8652)[0m
2025-04-09T19:12:59.1403391Z   [32m  [32mâœ”[39m[0m[90m handles setting map value to spread document (gh-8652)[0m
2025-04-09T19:12:59.1470670Z   [32m  [32mâœ”[39m[0m[90m runs getters on map values (gh-8730)[0m
2025-04-09T19:12:59.1599584Z   [32m  [32mâœ”[39m[0m[90m handles validation of document array with maps and nested paths (gh-8767)[0m
2025-04-09T19:12:59.1825978Z   [32m  [32mâœ”[39m[0m[90m persists `.clear()` (gh-9493)[0m
2025-04-09T19:12:59.2013170Z   [32m  [32mâœ”[39m[0m[90m supports `null` in map of subdocuments (gh-9628)[0m
2025-04-09T19:12:59.2178951Z   [32m  [32mâœ”[39m[0m[90m tracks changes correctly (gh-9811)[0m
2025-04-09T19:12:59.2593300Z   [32m  [32mâœ”[39m[0m[90m handles map of arrays (gh-9813)[0m
2025-04-09T19:12:59.2967370Z   [32m  [32mâœ”[39m[0m[90m can populate map of subdocs with doc array using ref function (gh-10584)[0m
2025-04-09T19:12:59.3043908Z   [32m  [32mâœ”[39m[0m[90m propagates `flattenMaps` to nested maps (gh-10653)[0m
2025-04-09T19:12:59.3343876Z   [32m  [32mâœ”[39m[0m[90m handles populating map of arrays (gh-12494)[0m
2025-04-09T19:12:59.3535593Z   [32m  [32mâœ”[39m[0m[90m clears nested changes in subdocs (gh-15108)[0m
2025-04-09T19:12:59.3757624Z   [32m  [32mâœ”[39m[0m[90m clears nested changes in doc arrays (gh-15108)[0m
2025-04-09T19:12:59.3964792Z   [32m  [32mâœ”[39m[0m[90m handles loading and modifying map of document arrays (gh-15196)[0m
2025-04-09T19:12:59.4005388Z [0m    populate[0m
2025-04-09T19:12:59.4307791Z     [32m  [32mâœ”[39m[0m[90m populate individual path[0m
2025-04-09T19:12:59.4586981Z     [32m  [32mâœ”[39m[0m[90m populate entire map[0m
2025-04-09T19:12:59.4863790Z     [32m  [32mâœ”[39m[0m[90m populate entire map in doc[0m
2025-04-09T19:12:59.5112913Z     [32m  [32mâœ”[39m[0m[90m avoid populating as map if populate on obj (gh-6460) (gh-8157)[0m
2025-04-09T19:12:59.5446826Z     [32m  [32mâœ”[39m[0m[90m handles setting populated path to doc and then saving (gh-7745)[0m
2025-04-09T19:12:59.5759379Z     [32m  [32mâœ”[39m[0m[90m handles populating path of subdoc (gh-9359)[0m
2025-04-09T19:12:59.5861962Z 
2025-04-09T19:12:59.5863713Z [0m  SchemaUUID[0m
2025-04-09T19:12:59.6089594Z   [32m  [32mâœ”[39m[0m[90m basic functionality should work[0m
2025-04-09T19:12:59.6151973Z   [32m  [32mâœ”[39m[0m[90m should throw error in case of invalid string[0m
2025-04-09T19:12:59.6410063Z   [32m  [32mâœ”[39m[0m[90m should work with $in and $nin and $all[0m
2025-04-09T19:12:59.6651125Z   [32m  [32mâœ”[39m[0m[90m should not convert to string nullish UUIDs (gh-13032)[0m
2025-04-09T19:12:59.6919399Z   [32m  [32mâœ”[39m[0m[90m works with populate (gh-13267)[0m
2025-04-09T19:12:59.7155276Z   [32m  [32mâœ”[39m[0m[90m handles built-in UUID type (gh-13103)[0m
2025-04-09T19:12:59.7400575Z   [32m  [32mâœ”[39m[0m[90m avoids converting maps of uuids to strings (gh-13657)[0m
2025-04-09T19:12:59.7441770Z   [36m  - should work with $bits* operators[0m
2025-04-09T19:12:59.7442255Z   [36m  - should work with $all operator[0m
2025-04-09T19:12:59.7442702Z   [36m  - should work with $lt, $lte, $gt, $gte operators[0m
2025-04-09T19:12:59.7472689Z 
2025-04-09T19:12:59.7473923Z [0m  model query casting[0m
2025-04-09T19:12:59.7684395Z   [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:12:59.7948762Z   [32m  [32mâœ”[39m[0m[90m returns cast errors[0m
2025-04-09T19:12:59.8607468Z   [32m  [32mâœ”[39m[0m[90m casts $modifiers[0m[33m (54ms)[0m
2025-04-09T19:12:59.8803414Z   [32m  [32mâœ”[39m[0m[90m casts $in values of arrays (gh-199)[0m
2025-04-09T19:12:59.9005508Z   [32m  [32mâœ”[39m[0m[90m casts $in values of arrays with single item instead of array (gh-3238)[0m
2025-04-09T19:13:00.4037073Z   [32m  [32mâœ”[39m[0m[90m casts $nin values of arrays (gh-232)[0m[31m (495ms)[0m
2025-04-09T19:13:00.4248844Z   [32m  [32mâœ”[39m[0m[90m works when finding by Date (gh-204)[0m
2025-04-09T19:13:00.4461468Z   [32m  [32mâœ”[39m[0m[90m works with $type matching[0m
2025-04-09T19:13:00.4660839Z   [32m  [32mâœ”[39m[0m[90m works when finding Boolean with $in (gh-998)[0m
2025-04-09T19:13:00.4869979Z   [32m  [32mâœ”[39m[0m[90m works when finding Boolean with $ne (gh-1093)[0m
2025-04-09T19:13:00.4951546Z   [32m  [32mâœ”[39m[0m[90m properly casts $and (gh-1180)[0m
2025-04-09T19:13:00.5231861Z   [32m  [32mâœ”[39m[0m[90m works with $all (gh-3394)[0m
2025-04-09T19:13:00.5327287Z   [32m  [32mâœ”[39m[0m[90m date with $not + $type (gh-4632)[0m
2025-04-09T19:13:00.5491603Z   [32m  [32mâœ”[39m[0m[90m setOnInsert with custom type (gh-5126)[0m
2025-04-09T19:13:00.5798335Z   [32m  [32mâœ”[39m[0m[90m lowercase in query (gh-4569)[0m
2025-04-09T19:13:00.5899645Z   [32m  [32mâœ”[39m[0m[90m runSettersOnQuery only once on find (gh-5434)[0m
2025-04-09T19:13:00.6067201Z   [32m  [32mâœ”[39m[0m[90m setters run only once on findOne (gh-6157)[0m
2025-04-09T19:13:00.6383877Z   [32m  [32mâœ”[39m[0m[90m runSettersOnQuery as query option (gh-5350)[0m
2025-04-09T19:13:00.6614883Z   [32m  [32mâœ”[39m[0m[90m _id = 0 (gh-4610)[0m
2025-04-09T19:13:00.6711735Z   [32m  [32mâœ”[39m[0m[90m converts to CastError (gh-6803)[0m
2025-04-09T19:13:00.7031065Z   [32m  [32mâœ”[39m[0m[90m minDistance (gh-4197)[0m
2025-04-09T19:13:00.7313774Z   [32m  [32mâœ”[39m[0m[90m array ops don't break with strict:false (gh-6952)[0m
2025-04-09T19:13:00.7534377Z   [32m  [32mâœ”[39m[0m[90m should not throw a cast error when dealing with an array of an array of strings in combination with $elemMatch and $not (gh-13880)[0m
2025-04-09T19:13:00.7853992Z   [32m  [32mâœ”[39m[0m[90m should not throw a cast error when dealing with an array of objects in combination with $elemMatch (gh-13974)[0m
2025-04-09T19:13:00.8108925Z   [32m  [32mâœ”[39m[0m[90m should not throw a cast error when dealing with an array of objects in combination with $elemMatch and nested $and[0m
2025-04-09T19:13:00.8150393Z [0m    $near[0m
2025-04-09T19:13:00.8346112Z     [32m  [32mâœ”[39m[0m[90m with arrays[0m
2025-04-09T19:13:00.8569394Z     [32m  [32mâœ”[39m[0m[90m with objects[0m
2025-04-09T19:13:00.8806219Z     [32m  [32mâœ”[39m[0m[90m with nested objects[0m
2025-04-09T19:13:00.8868777Z [0m    $nearSphere[0m
2025-04-09T19:13:00.9061964Z     [32m  [32mâœ”[39m[0m[90m with arrays[0m
2025-04-09T19:13:00.9326610Z     [32m  [32mâœ”[39m[0m[90m with objects[0m
2025-04-09T19:13:00.9563226Z     [32m  [32mâœ”[39m[0m[90m with nested objects[0m
2025-04-09T19:13:00.9626451Z [0m    $within[0m
2025-04-09T19:13:00.9637208Z [0m      $centerSphere[0m
2025-04-09T19:13:00.9827755Z       [32m  [32mâœ”[39m[0m[90m with arrays[0m
2025-04-09T19:13:01.0067865Z       [32m  [32mâœ”[39m[0m[90m with objects[0m
2025-04-09T19:13:01.0322529Z       [32m  [32mâœ”[39m[0m[90m with nested objects[0m
2025-04-09T19:13:01.0396501Z [0m      $center[0m
2025-04-09T19:13:01.0595677Z       [32m  [32mâœ”[39m[0m[90m with arrays[0m
2025-04-09T19:13:01.0850607Z       [32m  [32mâœ”[39m[0m[90m with objects[0m
2025-04-09T19:13:01.1103078Z       [32m  [32mâœ”[39m[0m[90m with nested objects[0m
2025-04-09T19:13:01.1175078Z [0m      $polygon[0m
2025-04-09T19:13:01.1367050Z       [32m  [32mâœ”[39m[0m[90m with arrays[0m
2025-04-09T19:13:01.1619077Z       [32m  [32mâœ”[39m[0m[90m with objects[0m
2025-04-09T19:13:01.1870551Z       [32m  [32mâœ”[39m[0m[90m with nested objects[0m
2025-04-09T19:13:01.1943859Z [0m      $box[0m
2025-04-09T19:13:01.2147187Z       [32m  [32mâœ”[39m[0m[90m with arrays[0m
2025-04-09T19:13:01.2437736Z       [32m  [32mâœ”[39m[0m[90m with objects[0m
2025-04-09T19:13:01.2689895Z       [32m  [32mâœ”[39m[0m[90m with nested objects[0m
2025-04-09T19:13:01.2774068Z [0m    $options[0m
2025-04-09T19:13:01.2836270Z     [32m  [32mâœ”[39m[0m[90m works on arrays gh-1462[0m
2025-04-09T19:13:01.2950673Z     [32m  [32mâœ”[39m[0m[90m does not cast with uppercase (gh-7800)[0m
2025-04-09T19:13:01.3061060Z [0m    $elemMatch[0m
2025-04-09T19:13:01.3225932Z     [32m  [32mâœ”[39m[0m[90m should cast String to ObjectId in $elemMatch[0m
2025-04-09T19:13:01.3425570Z     [32m  [32mâœ”[39m[0m[90m should cast String to ObjectId in $elemMatch inside $not[0m
2025-04-09T19:13:01.3662945Z     [32m  [32mâœ”[39m[0m[90m should cast subdoc _id typed as String to String in $elemMatch gh3719[0m
2025-04-09T19:13:01.4115002Z     [32m  [32mâœ”[39m[0m[90m should cast subdoc _id typed as String to String in $elemMatch inside $not gh3719[0m
2025-04-09T19:13:01.4353769Z     [32m  [32mâœ”[39m[0m[90m casts $nor within $elemMatch (gh-9479)[0m
2025-04-09T19:13:01.4450469Z 
2025-04-09T19:13:01.4451207Z [0m  types.document[0m
2025-04-09T19:13:01.4511870Z   [32m  [32mâœ”[39m[0m[90m test that validate sets errors[0m
2025-04-09T19:13:01.4557058Z   [32m  [32mâœ”[39m[0m[90m objects can be passed to #set[0m
2025-04-09T19:13:01.4593927Z   [32m  [32mâœ”[39m[0m[90m Subdocuments can be passed to #set[0m
2025-04-09T19:13:01.4844446Z   [32m  [32mâœ”[39m[0m[90m Subdocument#remove (gh-531)[0m
2025-04-09T19:13:01.4866103Z [0m    setting nested objects[0m
2025-04-09T19:13:01.4973929Z     [32m  [32mâœ”[39m[0m[90m works (gh-1394)[0m
2025-04-09T19:13:01.5057038Z 
2025-04-09T19:13:01.5057408Z [0m  schematype mixed[0m
2025-04-09T19:13:01.5068543Z [0m    empty object defaults (gh-1380)[0m
2025-04-09T19:13:01.5119633Z     [32m  [32mâœ”[39m[0m[90m are interpreted as fns that return new empty objects[0m
2025-04-09T19:13:01.5188505Z     [32m  [32mâœ”[39m[0m[90m can be forced to share the object between documents[0m
2025-04-09T19:13:01.5241909Z 
2025-04-09T19:13:01.5242309Z [0m  id virtual getter[0m
2025-04-09T19:13:01.5402885Z   [32m  [32mâœ”[39m[0m[90m should work as expected with an ObjectId[0m
2025-04-09T19:13:01.5559242Z   [32m  [32mâœ”[39m[0m[90m should be turned off when `id` option is set to false[0m
2025-04-09T19:13:01.5713529Z   [32m  [32mâœ”[39m[0m[90m should be turned off when the schema has a set `id` path[0m
2025-04-09T19:13:01.5783301Z 
2025-04-09T19:13:01.5783980Z [0m  model: populate:[0m
2025-04-09T19:13:01.5795339Z [0m    setting populated paths (gh-570)[0m
2025-04-09T19:13:01.5806795Z [0m      should not cast to _id of type ObjectId[0m
2025-04-09T19:13:01.6330299Z       [32m  [32mâœ”[39m[0m[90m if a document[0m
2025-04-09T19:13:01.6507429Z       [32m  [32mâœ”[39m[0m[90m if an object[0m
2025-04-09T19:13:01.6585741Z [0m      should not cast to _id of type String[0m
2025-04-09T19:13:01.6862498Z       [32m  [32mâœ”[39m[0m[90m if a document[0m
2025-04-09T19:13:01.7029569Z       [32m  [32mâœ”[39m[0m[90m if an object[0m
2025-04-09T19:13:01.7106190Z [0m      should not cast to _id of type Number[0m
2025-04-09T19:13:01.7419212Z       [32m  [32mâœ”[39m[0m[90m if a document[0m
2025-04-09T19:13:01.7597712Z       [32m  [32mâœ”[39m[0m[90m if an object[0m
2025-04-09T19:13:01.7677686Z [0m      should not cast to _id of type Buffer[0m
2025-04-09T19:13:01.7965221Z       [32m  [32mâœ”[39m[0m[90m if a document[0m
2025-04-09T19:13:01.8143177Z       [32m  [32mâœ”[39m[0m[90m if an object[0m
2025-04-09T19:13:01.8250654Z 
2025-04-09T19:13:01.8251111Z [0m  queryhelpers[0m
2025-04-09T19:13:01.8262231Z [0m    applyPaths[0m
2025-04-09T19:13:01.8310402Z     [32m  [32mâœ”[39m[0m[90m adds select: true paths unless excluded using minus path (gh-11694)[0m
2025-04-09T19:13:01.8377609Z     [32m  [32mâœ”[39m[0m[90m supports nested minus path (gh-11694)[0m
2025-04-09T19:13:01.8431352Z 
2025-04-09T19:13:01.8431752Z [0m  SubdocumentPath[0m
2025-04-09T19:13:01.8469574Z   [32m  [32mâœ”[39m[0m[90m copies over `requiredValidator` (gh-8819)[0m
2025-04-09T19:13:01.8525456Z   [32m  [32mâœ”[39m[0m[90m supports `set()` (gh-8883)[0m
2025-04-09T19:13:01.8576754Z   [32m  [32mâœ”[39m[0m[90m supports setting _id globally (gh-11541) (gh-8883)[0m
2025-04-09T19:13:01.8598449Z [0m    discriminator()[0m
2025-04-09T19:13:01.8609648Z [0m      recursive nested discriminators[0m
2025-04-09T19:13:01.8669735Z       [32m  [32mâœ”[39m[0m[90m allow multiple levels of data in the schema[0m
2025-04-09T19:13:01.8768602Z       [32m  [32mâœ”[39m[0m[90m allow multiple levels of data in a document[0m
2025-04-09T19:13:01.8860601Z       [32m  [32mâœ”[39m[0m[90m allow multiple levels of data in the schema when the base schema has _id without auto[0m
2025-04-09T19:13:01.8960749Z       [32m  [32mâœ”[39m[0m[90m allow multiple levels of data in a document when the base schema has _id without auto[0m
2025-04-09T19:13:01.9035711Z 
2025-04-09T19:13:01.9036141Z [0m  collections:[0m
2025-04-09T19:13:01.9186794Z   [32m  [32mâœ”[39m[0m[90m should buffer commands until connection is established[0m
2025-04-09T19:13:01.9331092Z   [32m  [32mâœ”[39m[0m[90m returns a promise if buffering and no callback (gh-7676)[0m
2025-04-09T19:13:02.0390896Z   [32m  [32mâœ”[39m[0m[90m returns a promise if buffering and callback with find() (gh-14184)[0m[31m (101ms)[0m
2025-04-09T19:13:02.1451065Z   [32m  [32mâœ”[39m[0m[90m handles bufferTimeoutMS in schemaUserProvidedOptions[0m[31m (101ms)[0m
2025-04-09T19:13:02.1520560Z   [32m  [32mâœ”[39m[0m[90m methods should that throw (unimplemented)[0m
2025-04-09T19:13:02.1564899Z   [32m  [32mâœ”[39m[0m[90m buffers for sync methods (gh-10610)[0m
2025-04-09T19:13:02.1622914Z 
2025-04-09T19:13:02.1623523Z [0m  query middleware[0m
2025-04-09T19:13:02.1857582Z   [32m  [32mâœ”[39m[0m[90m has a pre find hook[0m
2025-04-09T19:13:02.2087697Z   [32m  [32mâœ”[39m[0m[90m has post find hooks[0m
2025-04-09T19:13:02.2300535Z   [32m  [32mâœ”[39m[0m[90m works when using a chained query builder[0m
2025-04-09T19:13:02.2556130Z   [32m  [32mâœ”[39m[0m[90m has separate pre-findOne() and post-findOne() hooks[0m
2025-04-09T19:13:02.2817041Z   [32m  [32mâœ”[39m[0m[90m with regular expression (gh-6680)[0m
2025-04-09T19:13:02.3063276Z   [32m  [32mâœ”[39m[0m[90m can populate in pre hook[0m
2025-04-09T19:13:02.3349160Z   [32m  [32mâœ”[39m[0m[90m can populate in post hook[0m
2025-04-09T19:13:02.3624944Z   [32m  [32mâœ”[39m[0m[90m has hooks for countDocuments()[0m
2025-04-09T19:13:02.3857949Z   [32m  [32mâœ”[39m[0m[90m has hooks for estimatedDocumentCount()[0m
2025-04-09T19:13:02.4082119Z   [32m  [32mâœ”[39m[0m[90m updateOne() (gh-3997)[0m
2025-04-09T19:13:02.4316757Z   [32m  [32mâœ”[39m[0m[90m updateMany() (gh-3997)[0m
2025-04-09T19:13:02.4529324Z   [32m  [32mâœ”[39m[0m[90m deleteOne() (gh-7195)[0m
2025-04-09T19:13:02.4744573Z   [32m  [32mâœ”[39m[0m[90m deleteMany() (gh-7195)[0m
2025-04-09T19:13:02.5008483Z   [32m  [32mâœ”[39m[0m[90m distinct (gh-5938)[0m
2025-04-09T19:13:02.5178384Z   [32m  [32mâœ”[39m[0m[90m error handlers (gh-2284)[0m
2025-04-09T19:13:02.5251710Z   [32m  [32mâœ”[39m[0m[90m error handlers for validate (gh-4885)[0m
2025-04-09T19:13:02.5455436Z   [32m  [32mâœ”[39m[0m[90m error handlers with findOneAndUpdate and passRawResult (gh-4836)[0m
2025-04-09T19:13:02.5530891Z   [32m  [32mâœ”[39m[0m[90m error handlers with findOneAndUpdate error and passRawResult (gh-4836)[0m
2025-04-09T19:13:02.5648620Z   [32m  [32mâœ”[39m[0m[90m error handlers with error from pre hook (gh-4927)[0m
2025-04-09T19:13:02.5762213Z   [32m  [32mâœ”[39m[0m[90m with clone() (gh-5153)[0m
2025-04-09T19:13:02.5883317Z   [32m  [32mâœ”[39m[0m[90m doesnt double call post(regexp) with updateOne (gh-7418)[0m
2025-04-09T19:13:02.6108949Z   [32m  [32mâœ”[39m[0m[90m deleteOne with `document: true` but no `query` (gh-8555)[0m
2025-04-09T19:13:02.6298433Z   [32m  [32mâœ”[39m[0m[90m allows registering middleware for all queries with regexp (gh-9190)[0m
2025-04-09T19:13:02.6368657Z   [32m  [32mâœ”[39m[0m[90m allows skipping the wrapped function with `skipMiddlewareFunction()` (gh-11426)[0m
2025-04-09T19:13:02.6585074Z   [32m  [32mâœ”[39m[0m[90m allows overwriting result with `overwriteMiddlewareResult()` (gh-11426)[0m
2025-04-09T19:13:02.6665623Z 
2025-04-09T19:13:02.6667453Z [0m  aggregate: [0m
2025-04-09T19:13:02.6837189Z   [32m  [32mâœ”[39m[0m[90m cursor (gh-3160)[0m
2025-04-09T19:13:02.6914585Z   [32m  [32mâœ”[39m[0m[90m catch() (gh-7267)[0m
2025-04-09T19:13:02.7006800Z   [32m  [32mâœ”[39m[0m[90m cursor() without options (gh-3855)[0m
2025-04-09T19:13:02.7107867Z   [32m  [32mâœ”[39m[0m[90m cursor() with useMongooseAggCursor (gh-5145)[0m
2025-04-09T19:13:02.7317654Z   [32m  [32mâœ”[39m[0m[90m cursor() with useMongooseAggCursor works (gh-5145) (gh-5394)[0m
2025-04-09T19:13:02.8553925Z   [32m  [32mâœ”[39m[0m[90m cursor() eachAsync (gh-4300)[0m[31m (118ms)[0m
2025-04-09T19:13:02.9777973Z   [32m  [32mâœ”[39m[0m[90m cursor() eachAsync with options (parallel)[0m[31m (116ms)[0m
2025-04-09T19:13:02.9846315Z   [32m  [32mâœ”[39m[0m[90m is now a proper aggregate cursor vs what it was before gh-10410[0m
2025-04-09T19:13:03.0052180Z   [32m  [32mâœ”[39m[0m[90m query by document (gh-4866)[0m
2025-04-09T19:13:03.0216279Z   [32m  [32mâœ”[39m[0m[90m sort by text score (gh-5258)[0m
2025-04-09T19:13:03.0423968Z   [32m  [32mâœ”[39m[0m[90m cursor supports transform option (gh-14331)[0m
2025-04-09T19:13:03.0557028Z   [32m  [32mâœ”[39m[0m[90m should not throw error if database connection has not been established (gh-13125)[0m
2025-04-09T19:13:03.0641606Z   [32m  [32mâœ”[39m[0m[90m throws error if calling near() with empty coordinates (gh-15188)[0m
2025-04-09T19:13:03.0947384Z   [32m  [32mâœ”[39m[0m[90m cursor() errors out if schema pre aggregate hook throws an error (gh-15279)[0m
2025-04-09T19:13:03.0988192Z [0m    append[0m
2025-04-09T19:13:03.1033528Z     [32m  [32mâœ”[39m[0m[90m (pipeline)[0m
2025-04-09T19:13:03.1116464Z     [32m  [32mâœ”[39m[0m[90m supports array as single argument[0m
2025-04-09T19:13:03.1203286Z     [32m  [32mâœ”[39m[0m[90m throws if non-operator parameter is passed[0m
2025-04-09T19:13:03.1285636Z     [32m  [32mâœ”[39m[0m[90m does not throw when 0 args passed[0m
2025-04-09T19:13:03.1368103Z     [32m  [32mâœ”[39m[0m[90m does not throw when empty array is passed as single argument[0m
2025-04-09T19:13:03.1429888Z [0m    project[0m
2025-04-09T19:13:03.1474858Z     [32m  [32mâœ”[39m[0m[90m (object)[0m
2025-04-09T19:13:03.1556689Z     [32m  [32mâœ”[39m[0m[90m (string)[0m
2025-04-09T19:13:03.1637408Z     [32m  [32mâœ”[39m[0m[90m ("a","b","c")[0m
2025-04-09T19:13:03.1738103Z     [32m  [32mâœ”[39m[0m[90m ["a","b","c"][0m
2025-04-09T19:13:03.1800278Z [0m    group[0m
2025-04-09T19:13:03.1844956Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:03.1904464Z [0m    skip[0m
2025-04-09T19:13:03.1948909Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:03.2007364Z [0m    limit[0m
2025-04-09T19:13:03.2051796Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:03.2110360Z [0m    unwind[0m
2025-04-09T19:13:03.2155229Z     [32m  [32mâœ”[39m[0m[90m ("field")[0m
2025-04-09T19:13:03.2213624Z [0m    match[0m
2025-04-09T19:13:03.2257831Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:03.2316526Z [0m    sort[0m
2025-04-09T19:13:03.2360560Z     [32m  [32mâœ”[39m[0m[90m (object)[0m
2025-04-09T19:13:03.2444090Z     [32m  [32mâœ”[39m[0m[90m (string)[0m
2025-04-09T19:13:03.2528443Z     [32m  [32mâœ”[39m[0m[90m ("a","b","c")[0m
2025-04-09T19:13:03.2612005Z     [32m  [32mâœ”[39m[0m[90m ["a","b","c"][0m
2025-04-09T19:13:03.2672229Z [0m    near[0m
2025-04-09T19:13:03.2717230Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:03.2800868Z     [32m  [32mâœ”[39m[0m[90m works with discriminators (gh-3304)[0m
2025-04-09T19:13:03.2860848Z [0m    lookup[0m
2025-04-09T19:13:03.2905141Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:03.2965057Z [0m    unionWith[0m
2025-04-09T19:13:03.3009367Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:03.3070196Z [0m    sample[0m
2025-04-09T19:13:03.3114685Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:03.3174818Z [0m    densify[0m
2025-04-09T19:13:03.3219439Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:03.3279039Z [0m    fill[0m
2025-04-09T19:13:03.3323484Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:03.3383705Z [0m    model()[0m
2025-04-09T19:13:03.3427909Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:03.3488448Z [0m    redact[0m
2025-04-09T19:13:03.3533205Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:03.3616545Z     [32m  [32mâœ”[39m[0m[90m works with (condition, string, string)[0m
2025-04-09T19:13:03.3678566Z [0m    Mongo 3.4 operators[0m
2025-04-09T19:13:03.3790595Z [0m      graphLookup[0m
2025-04-09T19:13:03.3846653Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:03.3950954Z       [32m  [32mâœ”[39m[0m[90m automatically prepends $ to the startWith field[0m
2025-04-09T19:13:03.4055361Z       [32m  [32mâœ”[39m[0m[90m Throws if no options are passed to graphLookup[0m
2025-04-09T19:13:03.4126367Z [0m      addFields[0m
2025-04-09T19:13:03.4182381Z       [32m  [32mâœ”[39m[0m[90m should throw if passed a non object[0m
2025-04-09T19:13:03.4288631Z       [32m  [32mâœ”[39m[0m[90m should throw if passed null[0m
2025-04-09T19:13:03.4393933Z       [32m  [32mâœ”[39m[0m[90m should throw if passed an Array[0m
2025-04-09T19:13:03.4526749Z       [32m  [32mâœ”[39m[0m[90m (object)[0m
2025-04-09T19:13:03.4604403Z [0m      facet[0m
2025-04-09T19:13:03.4659678Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:03.4729669Z [0m      replaceRoot[0m
2025-04-09T19:13:03.4784922Z       [32m  [32mâœ”[39m[0m[90m works with a string[0m
2025-04-09T19:13:03.4887512Z       [32m  [32mâœ”[39m[0m[90m works with an object (gh-6474)[0m
2025-04-09T19:13:03.4955767Z [0m      count[0m
2025-04-09T19:13:03.5011185Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:03.5079984Z [0m      sortByCount[0m
2025-04-09T19:13:03.5135287Z       [32m  [32mâœ”[39m[0m[90m works with a string argument[0m
2025-04-09T19:13:03.5239634Z       [32m  [32mâœ”[39m[0m[90m works with an object argument[0m
2025-04-09T19:13:03.5342165Z       [32m  [32mâœ”[39m[0m[90m throws if the argument is neither a string or object[0m
2025-04-09T19:13:03.5422288Z [0m    exec[0m
2025-04-09T19:13:03.5723135Z     [32m  [32mâœ”[39m[0m[90m project[0m
2025-04-09T19:13:03.6050350Z     [32m  [32mâœ”[39m[0m[90m group[0m
2025-04-09T19:13:03.6385371Z     [32m  [32mâœ”[39m[0m[90m skip[0m
2025-04-09T19:13:03.6703787Z     [32m  [32mâœ”[39m[0m[90m limit[0m
2025-04-09T19:13:03.7031219Z     [32m  [32mâœ”[39m[0m[90m unwind[0m
2025-04-09T19:13:03.7368114Z     [32m  [32mâœ”[39m[0m[90m unwind with obj[0m
2025-04-09T19:13:03.7675330Z     [32m  [32mâœ”[39m[0m[90m unwind throws with bad arg[0m
2025-04-09T19:13:03.7997195Z     [32m  [32mâœ”[39m[0m[90m match[0m
2025-04-09T19:13:03.8305408Z     [32m  [32mâœ”[39m[0m[90m sort[0m
2025-04-09T19:13:03.8746074Z     [32m  [32mâœ”[39m[0m[90m graphLookup[0m
2025-04-09T19:13:03.9170315Z     [32m  [32mâœ”[39m[0m[90m facet[0m
2025-04-09T19:13:03.9505720Z     [32m  [32mâœ”[39m[0m[90m complex pipeline[0m
2025-04-09T19:13:03.9834013Z     [32m  [32mâœ”[39m[0m[90m pipeline() (gh-5825)[0m
2025-04-09T19:13:04.0254222Z     [32m  [32mâœ”[39m[0m[90m explain()[0m
2025-04-09T19:13:04.0769801Z     [32m  [32mâœ”[39m[0m[90m handles aggregation options[0m
2025-04-09T19:13:04.1120274Z     [32m  [32mâœ”[39m[0m[90m readPref from schema (gh-5522)[0m
2025-04-09T19:13:04.1195997Z [0m      error when empty pipeline[0m
2025-04-09T19:13:04.1539328Z       [32m  [32mâœ”[39m[0m[90m without a callback[0m
2025-04-09T19:13:04.1631665Z [0m      error when not bound to a model[0m
2025-04-09T19:13:04.1937685Z       [32m  [32mâœ”[39m[0m[90m with callback[0m
2025-04-09T19:13:04.2011196Z [0m      middleware (gh-5251)[0m
2025-04-09T19:13:04.2333540Z       [32m  [32mâœ”[39m[0m[90m pre[0m
2025-04-09T19:13:04.2841372Z       [32m  [32mâœ”[39m[0m[90m setting option in pre (gh-7606)[0m
2025-04-09T19:13:04.3336026Z       [32m  [32mâœ”[39m[0m[90m adding to pipeline in pre (gh-8017)[0m
2025-04-09T19:13:04.3695633Z       [32m  [32mâœ”[39m[0m[90m post[0m
2025-04-09T19:13:04.4101331Z       [32m  [32mâœ”[39m[0m[90m error handler with agg error[0m
2025-04-09T19:13:04.4455938Z       [32m  [32mâœ”[39m[0m[90m error handler with pre error[0m
2025-04-09T19:13:04.4816409Z       [32m  [32mâœ”[39m[0m[90m with agg cursor[0m
2025-04-09T19:13:04.5208271Z       [32m  [32mâœ”[39m[0m[90m with explain() (gh-5887)[0m
2025-04-09T19:13:04.5298011Z [0m    Mongo 3.6 options[0m
2025-04-09T19:13:04.5550440Z     [32m  [32mâœ”[39m[0m[90m adds hint option[0m
2025-04-09T19:13:04.5658329Z 
2025-04-09T19:13:04.5658960Z [0m  model field selection[0m
2025-04-09T19:13:04.5844396Z   [32m  [32mâœ”[39m[0m[90m excluded fields should be undefined[0m
2025-04-09T19:13:04.5998192Z   [32m  [32mâœ”[39m[0m[90m excluded fields should be undefined and defaults applied to other fields[0m
2025-04-09T19:13:04.6180588Z   [32m  [32mâœ”[39m[0m[90m where subset of fields excludes _id[0m
2025-04-09T19:13:04.6354900Z   [32m  [32mâœ”[39m[0m[90m works with subset of fields, excluding _id[0m
2025-04-09T19:13:04.6522248Z   [32m  [32mâœ”[39m[0m[90m works with just _id and findOneAndUpdate (gh-3407)[0m
2025-04-09T19:13:04.6790364Z   [32m  [32mâœ”[39m[0m[90m works with subset of fields excluding emebedded doc _id (gh-541)[0m
2025-04-09T19:13:04.6939946Z   [32m  [32mâœ”[39m[0m[90m included fields should have defaults applied when no value exists in db (gh-870)[0m
2025-04-09T19:13:04.7187218Z   [32m  [32mâœ”[39m[0m[90m including subdoc field excludes other subdoc fields (gh-1027)[0m
2025-04-09T19:13:04.7521183Z   [32m  [32mâœ”[39m[0m[90m excluding nested subdoc fields (gh-1027)[0m
2025-04-09T19:13:04.7711068Z   [32m  [32mâœ”[39m[0m[90m selecting an array of docs applies defaults properly (gh-1108)[0m
2025-04-09T19:13:04.7926485Z   [32m  [32mâœ”[39m[0m[90m select properties named length (gh-3903)[0m
2025-04-09T19:13:04.8215820Z   [32m  [32mâœ”[39m[0m[90m appropriately filters subdocuments based on properties (gh-1280)[0m
2025-04-09T19:13:04.8585550Z   [32m  [32mâœ”[39m[0m[90m sets defaults correctly in child docs with projection (gh-7159)[0m
2025-04-09T19:13:04.8829110Z   [32m  [32mâœ”[39m[0m[90m when `select: true` in schema, works with $elemMatch in projection[0m
2025-04-09T19:13:04.9049883Z   [32m  [32mâœ”[39m[0m[90m selection specified in query overwrites option in schema[0m
2025-04-09T19:13:04.9277303Z   [32m  [32mâœ”[39m[0m[90m selecting with `false` instead of `0` doesn't overwrite schema `select: false` (gh-8923)[0m
2025-04-09T19:13:04.9547278Z   [32m  [32mâœ”[39m[0m[90m handles deselecting _id when other field has schema-level `select: false` (gh-12670)[0m
2025-04-09T19:13:04.9587932Z [0m    with $elemMatch projection[0m
2025-04-09T19:13:04.9778823Z     [32m  [32mâœ”[39m[0m[90m casts elemMatch args (gh-1091)[0m
2025-04-09T19:13:05.0032503Z     [32m  [32mâœ”[39m[0m[90m saves modified elemMatch paths (gh-1334)[0m
2025-04-09T19:13:05.0266622Z     [32m  [32mâœ”[39m[0m[90m works with $ positional in select (gh-2031)[0m
2025-04-09T19:13:05.0367211Z 
2025-04-09T19:13:05.0367851Z [0m  model[0m
2025-04-09T19:13:05.0381054Z [0m    hydrate()[0m
2025-04-09T19:13:05.0452880Z     [32m  [32mâœ”[39m[0m[90m hydrates documents with no modified paths[0m
2025-04-09T19:13:05.0526460Z     [32m  [32mâœ”[39m[0m[90m runs validators[0m
2025-04-09T19:13:05.0589346Z     [32m  [32mâœ”[39m[0m[90m supports projection (gh-9209)[0m
2025-04-09T19:13:05.0655815Z     [32m  [32mâœ”[39m[0m[90m works correctly with model discriminators[0m
2025-04-09T19:13:05.0729579Z     [32m  [32mâœ”[39m[0m[90m should deeply hydrate the document with the `hydratedPopulatedDocs` option (gh-4727)[0m
2025-04-09T19:13:05.0959690Z     [32m  [32mâœ”[39m[0m[90m should hydrate documents in virtual populate (gh-14503)[0m
2025-04-09T19:13:05.1033423Z     [32m  [32mâœ”[39m[0m[90m sets hydrated docs as populated (gh-15048)[0m
2025-04-09T19:13:05.1268013Z     [32m  [32mâœ”[39m[0m[90m marks deeply nested docs as hydrated underneath virtuals (gh-15110)[0m
2025-04-09T19:13:05.1438061Z     [32m  [32mâœ”[39m[0m[90m marks deeply nested docs as hydrated underneath conventional (gh-15110)[0m
2025-04-09T19:13:05.1515078Z 
2025-04-09T19:13:05.1515644Z [0m  cast: [0m
2025-04-09T19:13:05.1552790Z   [32m  [32mâœ”[39m[0m[90m uses nested schema strict by default (gh-11291)[0m
2025-04-09T19:13:05.1600574Z   [32m  [32mâœ”[39m[0m[90m casts $comment (gh-14576)[0m
2025-04-09T19:13:05.1647310Z   [32m  [32mâœ”[39m[0m[90m avoids setting stripped out nested schema values to undefined (gh-11291)[0m
2025-04-09T19:13:05.1691552Z   [32m  [32mâœ”[39m[0m[90m uses schema-level strictQuery over schema-level strict (gh-12508)[0m
2025-04-09T19:13:05.1741493Z   [32m  [32mâœ”[39m[0m[90m handles $in with discriminators if $in has exactly 1 element (gh-13492)[0m
2025-04-09T19:13:05.1785738Z   [32m  [32mâœ”[39m[0m[90m treats unknown operators as passthrough (gh-15170)[0m
2025-04-09T19:13:05.1806986Z [0m    when casting an array[0m
2025-04-09T19:13:05.1851775Z     [32m  [32mâœ”[39m[0m[90m casts array with ObjectIds to $in query[0m
2025-04-09T19:13:05.1918521Z     [32m  [32mâœ”[39m[0m[90m casts array with ObjectIds to $in query when values are strings[0m
2025-04-09T19:13:05.1987640Z     [32m  [32mâœ”[39m[0m[90m throws when ObjectIds not valid[0m
2025-04-09T19:13:05.2053321Z     [32m  [32mâœ”[39m[0m[90m casts array with Strings to $in query[0m
2025-04-09T19:13:05.2118929Z     [32m  [32mâœ”[39m[0m[90m casts array with Strings when necessary[0m
2025-04-09T19:13:05.2173965Z     [32m  [32mâœ”[39m[0m[90m casts array with Numbers to $in query[0m
2025-04-09T19:13:05.2241966Z     [32m  [32mâœ”[39m[0m[90m casts $in and $nin with empty array (gh-5913) (gh-7806)[0m
2025-04-09T19:13:05.2307563Z     [32m  [32mâœ”[39m[0m[90m casts array with Numbers to $in query when values are strings[0m
2025-04-09T19:13:05.2378773Z     [32m  [32mâœ”[39m[0m[90m throws when Numbers are not valid[0m
2025-04-09T19:13:05.2421958Z [0m    $all[0m
2025-04-09T19:13:05.2468741Z     [32m  [32mâœ”[39m[0m[90m casts $elemMatch (gh-11314)[0m
2025-04-09T19:13:05.2511926Z [0m    bitwise query operators: [0m
2025-04-09T19:13:05.2556863Z     [32m  [32mâœ”[39m[0m[90m with a number[0m
2025-04-09T19:13:05.2622705Z     [32m  [32mâœ”[39m[0m[90m with an array[0m
2025-04-09T19:13:05.2688730Z     [32m  [32mâœ”[39m[0m[90m with a buffer[0m
2025-04-09T19:13:05.2755012Z     [32m  [32mâœ”[39m[0m[90m with int32 (gh-15170)[0m
2025-04-09T19:13:05.2823170Z     [32m  [32mâœ”[39m[0m[90m throws when invalid[0m
2025-04-09T19:13:05.2866300Z [0m    $expr[0m
2025-04-09T19:13:05.2914089Z     [32m  [32mâœ”[39m[0m[90m does not get filtered out (gh-10662)[0m
2025-04-09T19:13:05.2967518Z 
2025-04-09T19:13:05.2971179Z [0m  model: populate:[0m
2025-04-09T19:13:05.3171954Z   [32m  [32mâœ”[39m[0m[90m populating array of object[0m
2025-04-09T19:13:05.3449999Z   [32m  [32mâœ”[39m[0m[90m deep population (gh-3103)[0m
2025-04-09T19:13:05.3705347Z   [32m  [32mâœ”[39m[0m[90m populating a single ref[0m
2025-04-09T19:13:05.3957166Z   [32m  [32mâœ”[39m[0m[90m not failing on null as ref[0m
2025-04-09T19:13:05.4154416Z   [32m  [32mâœ”[39m[0m[90m not failing on empty object as ref[0m
2025-04-09T19:13:05.4412073Z   [32m  [32mâœ”[39m[0m[90m across DBs[0m
2025-04-09T19:13:05.4683031Z   [32m  [32mâœ”[39m[0m[90m an error in single ref population propagates[0m
2025-04-09T19:13:05.4958257Z   [32m  [32mâœ”[39m[0m[90m populating with partial fields selection[0m
2025-04-09T19:13:05.5239811Z   [32m  [32mâœ”[39m[0m[90m population of single oid with partial field selection and filter[0m
2025-04-09T19:13:05.6607835Z   [32m  [32mâœ”[39m[0m[90m population of undefined fields in a collection of docs[0m[31m (130ms)[0m
2025-04-09T19:13:05.7130571Z   [32m  [32mâœ”[39m[0m[90m undefined for nested paths (gh-3859)[0m[33m (45ms)[0m
2025-04-09T19:13:05.7405059Z   [32m  [32mâœ”[39m[0m[90m population and changing a reference[0m
2025-04-09T19:13:05.7678034Z   [32m  [32mâœ”[39m[0m[90m populating with partial fields selection and changing ref[0m
2025-04-09T19:13:05.7933378Z   [32m  [32mâœ”[39m[0m[90m populating an array of refs and fetching many[0m
2025-04-09T19:13:05.8173221Z   [32m  [32mâœ”[39m[0m[90m an error in array reference population propagates[0m
2025-04-09T19:13:05.8431698Z   [32m  [32mâœ”[39m[0m[90m populating an array of references with fields selection[0m
2025-04-09T19:13:05.8709051Z   [32m  [32mâœ”[39m[0m[90m populating an array of references and filtering[0m
2025-04-09T19:13:05.8982708Z   [32m  [32mâœ”[39m[0m[90m populating an array of references and multi-filtering[0m
2025-04-09T19:13:05.9252129Z   [32m  [32mâœ”[39m[0m[90m populating an array of references and multi-filtering with field selection[0m
2025-04-09T19:13:05.9698668Z   [32m  [32mâœ”[39m[0m[90m populating an array of refs changing one and removing one[0m[33m (38ms)[0m
2025-04-09T19:13:05.9989624Z   [32m  [32mâœ”[39m[0m[90m clears cache when array has been re-assigned (gh-2176)[0m
2025-04-09T19:13:06.0247072Z   [32m  [32mâœ”[39m[0m[90m populating subdocuments partially[0m
2025-04-09T19:13:06.0486372Z   [32m  [32mâœ”[39m[0m[90m populating subdocuments partially with conditions[0m
2025-04-09T19:13:06.0782258Z   [32m  [32mâœ”[39m[0m[90m populating subdocs with invalid/missing subproperties[0m
2025-04-09T19:13:06.1169020Z   [32m  [32mâœ”[39m[0m[90m properly handles limit per document (gh-2151)[0m
2025-04-09T19:13:06.1388899Z   [32m  [32mâœ”[39m[0m[90m populating subdocuments partially with empty array (gh-481)[0m
2025-04-09T19:13:06.1601780Z   [32m  [32mâœ”[39m[0m[90m populating subdocuments partially with null array[0m
2025-04-09T19:13:06.1841226Z   [32m  [32mâœ”[39m[0m[90m populating subdocuments with array including nulls[0m
2025-04-09T19:13:06.2085832Z   [32m  [32mâœ”[39m[0m[90m supports `retainNullValues` to override filtering out null docs (gh-6432)[0m
2025-04-09T19:13:06.2328288Z   [32m  [32mâœ”[39m[0m[90m supports `retainNullValues` while suppressing _id of subdocument[0m
2025-04-09T19:13:06.2700521Z   [32m  [32mâœ”[39m[0m[90m populating more than one array at a time[0m
2025-04-09T19:13:06.3086243Z   [32m  [32mâœ”[39m[0m[90m populating multiple children of a sub-array at a time[0m
2025-04-09T19:13:06.3543994Z   [32m  [32mâœ”[39m[0m[90m passing sort options to the populate method[0m[33m (39ms)[0m
2025-04-09T19:13:06.3821325Z   [32m  [32mâœ”[39m[0m[90m limit should apply to each returned doc, not in aggregate (gh-1490)[0m
2025-04-09T19:13:06.3893239Z   [32m  [32mâœ”[39m[0m[90m refs should cast to ObjectId from hexstrings[0m
2025-04-09T19:13:06.4157365Z   [32m  [32mâœ”[39m[0m[90m populate should work on String _ids[0m
2025-04-09T19:13:06.4590629Z   [32m  [32mâœ”[39m[0m[90m required works on ref fields (gh-577)[0m
2025-04-09T19:13:06.4824940Z   [32m  [32mâœ”[39m[0m[90m populate should work on Number _ids[0m
2025-04-09T19:13:06.5175891Z   [32m  [32mâœ”[39m[0m[90m populate works with schemas with both id and _id defined[0m
2025-04-09T19:13:06.5460791Z   [32m  [32mâœ”[39m[0m[90m Update works with populated arrays (gh-602)[0m
2025-04-09T19:13:06.5704225Z   [32m  [32mâœ”[39m[0m[90m toJSON should also be called for refs (gh-675)[0m
2025-04-09T19:13:06.5937762Z   [32m  [32mâœ”[39m[0m[90m populate should work on Buffer _ids (gh-686)[0m
2025-04-09T19:13:06.6189710Z   [32m  [32mâœ”[39m[0m[90m populated Buffer _ids should be requireable[0m
2025-04-09T19:13:06.6427682Z   [32m  [32mâœ”[39m[0m[90m populating with custom model selection (gh-773)[0m
2025-04-09T19:13:06.6687355Z   [32m  [32mâœ”[39m[0m[90m strips out not-matched ids when populating a hydrated doc (gh-6435)[0m
2025-04-09T19:13:06.6936406Z   [32m  [32mâœ”[39m[0m[90m avoids setting empty array on lean document when populate result is undefined (gh-10599)[0m
2025-04-09T19:13:06.7178023Z   [32m  [32mâœ”[39m[0m[90m supports ref: Model with virtual populate (gh-10695)[0m
2025-04-09T19:13:06.7459402Z   [32m  [32mâœ”[39m[0m[90m supports ref on subdocuments (gh-10856)[0m
2025-04-09T19:13:06.7720895Z   [32m  [32mâœ”[39m[0m[90m no-op when populating a single nested subdoc underneath a doc array with no ref (gh-11538) (gh-10856)[0m
2025-04-09T19:13:06.7971037Z   [32m  [32mâœ”[39m[0m[90m supports ref on array containing subdocuments (gh-10856)[0m
2025-04-09T19:13:06.8325360Z   [32m  [32mâœ”[39m[0m[90m uses `Model` by default when doing `Model.populate()` on a POJO (gh-10978)[0m
2025-04-09T19:13:06.8608915Z   [32m  [32mâœ”[39m[0m[90m can reference parent connection models by name after `useDb()` (gh-11003)[0m
2025-04-09T19:13:06.8947343Z   [32m  [32mâœ”[39m[0m[90m handles refPath underneath map of subdocuments (gh-9359)[0m
2025-04-09T19:13:06.9194531Z   [32m  [32mâœ”[39m[0m[90m handles virtual populate with `justOne` underneath document array and sort (gh-12730) (gh-10552)[0m
2025-04-09T19:13:06.9880237Z   [32m  [32mâœ”[39m[0m[90m merges match when match is on `_id` (gh-12834)[0m[33m (61ms)[0m
2025-04-09T19:13:07.0192549Z   [32m  [32mâœ”[39m[0m[90m supports removing and then recreating populate virtual using schema clone (gh-13085)[0m
2025-04-09T19:13:07.0444440Z   [32m  [32mâœ”[39m[0m[90m handles populating underneath document arrays that have null (gh-13839)[0m
2025-04-09T19:13:07.0752342Z   [32m  [32mâœ”[39m[0m[90m calls match function with virtual as parameter (gh-12443)[0m
2025-04-09T19:13:07.1029253Z   [32m  [32mâœ”[39m[0m[90m allows pushing to model populated in a query cursor (gh-13575)[0m
2025-04-09T19:13:07.1337339Z   [32m  [32mâœ”[39m[0m[90m sets populated docs in correct order when populating virtual underneath document array with justOne (gh-14018)[0m
2025-04-09T19:13:07.1614414Z   [32m  [32mâœ”[39m[0m[90m calls transform with single ObjectId when populating justOne path underneath array (gh-14073)[0m
2025-04-09T19:13:07.1936443Z   [32m  [32mâœ”[39m[0m[90m allows deselecting discriminator key when populating (gh-3230) (gh-13760) (gh-13679)[0m
2025-04-09T19:13:07.2231092Z   [32m  [32mâœ”[39m[0m[90m calls setter on virtual populated path with populated doc (gh-14285)[0m
2025-04-09T19:13:07.2537813Z   [32m  [32mâœ”[39m[0m[90m handles ref() function that returns a model (gh-14249)[0m
2025-04-09T19:13:07.2784587Z   [32m  [32mâœ”[39m[0m[90m avoids filtering out `null` values when applying match function (gh-14494)[0m
2025-04-09T19:13:07.3013362Z   [32m  [32mâœ”[39m[0m[90m avoids depopulating manually populated doc as getter value (gh-14759)[0m
2025-04-09T19:13:07.3242873Z   [32m  [32mâœ”[39m[0m[90m avoids populating manually populated doc as getter value (gh-14827)[0m
2025-04-09T19:13:07.3491691Z   [32m  [32mâœ”[39m[0m[90m makes sure that populate works correctly with duplicate foreignField with lean(); (gh-14794)[0m
2025-04-09T19:13:07.3791405Z   [32m  [32mâœ”[39m[0m[90m depopulates if pushing ObjectId to a populated array (gh-1635)[0m
2025-04-09T19:13:07.4044227Z   [32m  [32mâœ”[39m[0m[90m handles converting uuid documents to strings when calling toObject() (gh-14869)[0m
2025-04-09T19:13:07.4304085Z   [32m  [32mâœ”[39m[0m[90m avoids repopulating if forceRepopulate is disabled (gh-14979)[0m
2025-04-09T19:13:07.4851532Z   [32m  [32mâœ”[39m[0m[90m handles forceRepopulate as a global option (gh-14979)[0m[33m (47ms)[0m
2025-04-09T19:13:07.4889596Z [0m    deep populate[0m
2025-04-09T19:13:07.5153168Z     [32m  [32mâœ”[39m[0m[90m deep population with refs (gh-3507)[0m
2025-04-09T19:13:07.5485047Z     [32m  [32mâœ”[39m[0m[90m multiple paths with same options (gh-3808)[0m
2025-04-09T19:13:07.5552108Z [0m    populating sub docs[0m
2025-04-09T19:13:07.5805769Z     [32m  [32mâœ”[39m[0m[90m works with findById[0m
2025-04-09T19:13:07.6138661Z     [32m  [32mâœ”[39m[0m[90m works when first doc returned has empty array for populated path (gh-1055)[0m
2025-04-09T19:13:07.6207049Z [0m    specifying a custom model without specifying a ref in schema[0m
2025-04-09T19:13:07.6422337Z     [32m  [32mâœ”[39m[0m[90m with String _id[0m
2025-04-09T19:13:07.6683538Z     [32m  [32mâœ”[39m[0m[90m with Number _id[0m
2025-04-09T19:13:07.6945770Z     [32m  [32mâœ”[39m[0m[90m with Buffer _id[0m
2025-04-09T19:13:07.7228750Z     [32m  [32mâœ”[39m[0m[90m with ObjectId _id[0m
2025-04-09T19:13:07.7298618Z [0m    specifying all params using an object[0m
2025-04-09T19:13:07.7607117Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:07.7675259Z [0m    Model.populate()[0m
2025-04-09T19:13:07.7920777Z     [32m  [32mâœ”[39m[0m[90m returns a promise[0m
2025-04-09T19:13:07.8216235Z     [32m  [32mâœ”[39m[0m[90m of individual document works[0m
2025-04-09T19:13:07.8272776Z [0m      a document already populated[0m
2025-04-09T19:13:07.8283910Z [0m        when paths are not modified[0m
2025-04-09T19:13:07.8592722Z         [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:07.8683656Z [0m        when paths are modified[0m
2025-04-09T19:13:07.8994593Z         [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:07.9097582Z [0m      of multiple documents[0m
2025-04-09T19:13:07.9370385Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:07.9459429Z [0m    populating combined with lean (gh-1260)[0m
2025-04-09T19:13:07.9693198Z     [32m  [32mâœ”[39m[0m[90m with findOne[0m
2025-04-09T19:13:08.0035740Z     [32m  [32mâœ”[39m[0m[90m with find[0m
2025-04-09T19:13:08.0115975Z [0m    records paths and _ids used in population[0m
2025-04-09T19:13:08.0395138Z     [32m  [32mâœ”[39m[0m[90m with findOne[0m
2025-04-09T19:13:08.0821980Z     [32m  [32mâœ”[39m[0m[90m with find[0m
2025-04-09T19:13:08.0890754Z [0m    deselecting _id[0m
2025-04-09T19:13:08.0901626Z [0m      in a subdocument[0m
2025-04-09T19:13:08.1221446Z       [32m  [32mâœ”[39m[0m[90m works (gh-14231)[0m
2025-04-09T19:13:08.1573150Z       [32m  [32mâœ”[39m[0m[90m with lean[0m
2025-04-09T19:13:08.1651266Z [0m      of documents being populated[0m
2025-04-09T19:13:08.1931565Z       [32m  [32mâœ”[39m[0m[90m still works (gh-1441)[0m
2025-04-09T19:13:08.2023808Z [0m    DynRef[0m
2025-04-09T19:13:08.2306791Z     [32m  [32mâœ”[39m[0m[90m Simple populate[0m
2025-04-09T19:13:08.2621375Z     [32m  [32mâœ”[39m[0m[90m Array populate[0m
2025-04-09T19:13:08.3066321Z     [32m  [32mâœ”[39m[0m[90m with nonexistant refPath (gh-4637)[0m
2025-04-09T19:13:08.3497529Z     [32m  [32mâœ”[39m[0m[90m array with empty refPath (gh-5377)[0m
2025-04-09T19:13:08.4022939Z     [32m  [32mâœ”[39m[0m[90m with non-arrays (gh-5114)[0m
2025-04-09T19:13:08.4651615Z     [32m  [32mâœ”[39m[0m[90m with different schema types for local fields (gh-6870)[0m
2025-04-09T19:13:08.5216549Z     [32m  [32mâœ”[39m[0m[90m with refPath and array of ids with parent refPath[0m
2025-04-09T19:13:08.5660012Z     [32m  [32mâœ”[39m[0m[90m with nested nonexistant refPath (gh-6457)[0m
2025-04-09T19:13:08.6201348Z     [32m  [32mâœ”[39m[0m[90m where first doc doesnt have a refPath (gh-6913[0m
2025-04-09T19:13:08.6693509Z     [32m  [32mâœ”[39m[0m[90m readable error with deselected refPath (gh-6834)[0m
2025-04-09T19:13:08.6764997Z [0m    leaves Documents within Mixed properties alone (gh-1471)[0m
2025-04-09T19:13:08.7086506Z     [32m  [32mâœ”[39m[0m[90m when saving new docs[0m
2025-04-09T19:13:08.7537646Z     [32m  [32mâœ”[39m[0m[90m when saving existing docs 5T5[0m
2025-04-09T19:13:08.7606181Z [0m    github issues[0m
2025-04-09T19:13:08.7876911Z     [32m  [32mâœ”[39m[0m[90m populating an array of refs, slicing, and fetching many (gh-5737)[0m
2025-04-09T19:13:08.8154208Z     [32m  [32mâœ”[39m[0m[90m populate + slice (gh-5737a)[0m
2025-04-09T19:13:08.8408274Z     [32m  [32mâœ”[39m[0m[90m handles multiple spaces in between paths to populate (gh-13951)[0m
2025-04-09T19:13:08.8687274Z     [32m  [32mâœ”[39m[0m[90m maps results back to correct document (gh-1444)[0m
2025-04-09T19:13:08.9050169Z     [32m  [32mâœ”[39m[0m[90m handles skip[0m
2025-04-09T19:13:08.9415992Z     [32m  [32mâœ”[39m[0m[90m handles slice (gh-1934)[0m
2025-04-09T19:13:08.9738060Z     [32m  [32mâœ”[39m[0m[90m fails if sorting with a doc array subprop (gh-2202)[0m
2025-04-09T19:13:09.0003457Z     [32m  [32mâœ”[39m[0m[90m handles toObject() (gh-3279)[0m
2025-04-09T19:13:09.0261671Z     [32m  [32mâœ”[39m[0m[90m populate option (gh-2321)[0m
2025-04-09T19:13:09.0634845Z     [32m  [32mâœ”[39m[0m[90m discriminator child schemas (gh-3878)[0m
2025-04-09T19:13:09.0889066Z     [32m  [32mâœ”[39m[0m[90m set to obj w/ same id doesnt mark modified (gh-3992)[0m
2025-04-09T19:13:09.1507203Z     [32m  [32mâœ”[39m[0m[90m deep populate single -> array (gh-3904)[0m[33m (52ms)[0m
2025-04-09T19:13:09.2078315Z     [32m  [32mâœ”[39m[0m[90m deep populate array -> array (gh-3954)[0m[33m (48ms)[0m
2025-04-09T19:13:09.2457856Z     [32m  [32mâœ”[39m[0m[90m 4 level population (gh-3973)[0m
2025-04-09T19:13:09.2842877Z     [32m  [32mâœ”[39m[0m[90m deep populate two paths (gh-3974)[0m
2025-04-09T19:13:09.4175861Z     [32m  [32mâœ”[39m[0m[90m out-of-order discriminators (gh-4073)[0m[31m (124ms)[0m
2025-04-09T19:13:09.4520850Z     [32m  [32mâœ”[39m[0m[90m dynref bug (gh-4104)[0m
2025-04-09T19:13:09.4794881Z     [32m  [32mâœ”[39m[0m[90m returned array has toObject() (gh-4656)[0m
2025-04-09T19:13:09.5076243Z     [32m  [32mâœ”[39m[0m[90m empty array (gh-4284)[0m
2025-04-09T19:13:09.5289452Z     [32m  [32mâœ”[39m[0m[90m empty populate string is a no-op (gh-4702)[0m
2025-04-09T19:13:09.5566086Z     [32m  [32mâœ”[39m[0m[90m checks field name correctly with nested arrays (gh-4365)[0m
2025-04-09T19:13:09.5862672Z     [32m  [32mâœ”[39m[0m[90m virtual populate with embedded discriminators (gh-6273)[0m
2025-04-09T19:13:09.6144069Z     [32m  [32mâœ”[39m[0m[90m populates virtual of embedded discriminator with dynamic ref (gh-6554)[0m
2025-04-09T19:13:09.6476363Z     [32m  [32mâœ”[39m[0m[90m populates virtual of embedded discriminator with dynamic ref when more than one model name is returned (gh-6612)[0m
2025-04-09T19:13:09.6803528Z     [32m  [32mâœ”[39m[0m[90m uses getter if one is defined on the localField (gh-6618)[0m
2025-04-09T19:13:09.7122298Z     [32m  [32mâœ”[39m[0m[90m populate child with same name as parent (gh-6839) (gh-6908)[0m
2025-04-09T19:13:09.7388823Z     [32m  [32mâœ”[39m[0m[90m passes scope as Model instance (gh-6726)[0m
2025-04-09T19:13:09.7672648Z     [32m  [32mâœ”[39m[0m[90m respects schema array even if underlying doc doesnt use array (gh-6908)[0m
2025-04-09T19:13:09.7912755Z     [32m  [32mâœ”[39m[0m[90m save objectid with populated refPath (gh-6714)[0m
2025-04-09T19:13:09.8273866Z     [32m  [32mâœ”[39m[0m[90m correct model and justOne when double populating (gh-6978)[0m
2025-04-09T19:13:09.8646700Z     [32m  [32mâœ”[39m[0m[90m correctly finds justOne when double-populating underneath an array (gh-6798)[0m
2025-04-09T19:13:09.8905923Z     [32m  [32mâœ”[39m[0m[90m handles virtual justOne if it is not set (gh-6988)[0m
2025-04-09T19:13:09.9175049Z     [32m  [32mâœ”[39m[0m[90m handles virtual justOne if it is not set, is lean, and subfields are selected[0m
2025-04-09T19:13:09.9561907Z     [32m  [32mâœ”[39m[0m[90m does not set `justOne` if underneath Mixed (gh-6985)[0m
2025-04-09T19:13:09.9878353Z     [32m  [32mâœ”[39m[0m[90m supports setting `justOne` as an option (gh-6985)[0m
2025-04-09T19:13:10.0183472Z     [32m  [32mâœ”[39m[0m[90m multiple localFields and foreignFields (gh-5704)[0m
2025-04-09T19:13:10.0608908Z     [32m  [32mâœ”[39m[0m[90m lean populate underneath array (gh-7052)[0m
2025-04-09T19:13:10.0958504Z     [32m  [32mâœ”[39m[0m[90m handles plus path projections with virtual populate (gh-7050)[0m
2025-04-09T19:13:10.1521271Z     [32m  [32mâœ”[39m[0m[90m set model as ref in schema (gh-7253)[0m[33m (45ms)[0m
2025-04-09T19:13:10.1920724Z     [32m  [32mâœ”[39m[0m[90m count option (gh-4469) (gh-7380)[0m
2025-04-09T19:13:10.2243729Z     [32m  [32mâœ”[39m[0m[90m count option ignores skip (gh-4469) (gh-8476)[0m
2025-04-09T19:13:10.2732403Z     [32m  [32mâœ”[39m[0m[90m count with deeply nested (gh-7573)[0m[33m (40ms)[0m
2025-04-09T19:13:10.3070318Z     [32m  [32mâœ”[39m[0m[90m explicit model option overrides refPath (gh-7273)[0m
2025-04-09T19:13:10.3334895Z     [32m  [32mâœ”[39m[0m[90m clone option means identical ids get separate copies of doc (gh-3258)[0m
2025-04-09T19:13:10.3668508Z     [32m  [32mâœ”[39m[0m[90m handles double nested array `foreignField` (gh-7374)[0m
2025-04-09T19:13:10.4125101Z     [32m  [32mâœ”[39m[0m[90m populate single path with numeric path underneath doc array (gh-7273)[0m
2025-04-09T19:13:10.4414255Z     [32m  [32mâœ”[39m[0m[90m supports populating a path in a document array embedded in an array (gh-7647)[0m
2025-04-09T19:13:10.4688795Z     [32m  [32mâœ”[39m[0m[90m handles populating deeply nested path if value in db is a primitive (gh-7545)[0m
2025-04-09T19:13:10.4949214Z     [32m  [32mâœ”[39m[0m[90m sets populate virtual to empty array if local field empty (gh-8230)[0m
2025-04-09T19:13:10.5188502Z     [32m  [32mâœ”[39m[0m[90m sets populate virtual with count to 0 if local field empty (gh-7731)[0m
2025-04-09T19:13:10.5481327Z     [32m  [32mâœ”[39m[0m[90m can populate an array property whose name conflicts with array method (gh-7782)[0m
2025-04-09T19:13:10.5823113Z     [32m  [32mâœ”[39m[0m[90m supports cross-db populate with refPath (gh-6520)[0m
2025-04-09T19:13:10.6179500Z     [32m  [32mâœ”[39m[0m[90m ref function for conventional populate (gh-7669)[0m
2025-04-09T19:13:10.6447591Z     [32m  [32mâœ”[39m[0m[90m virtual refPath (gh-7848)[0m
2025-04-09T19:13:10.7569268Z     [32m  [32mâœ”[39m[0m[90m handles refPath on discriminator when populating top-level model (gh-5109)[0m[31m (102ms)[0m
2025-04-09T19:13:10.7901231Z     [32m  [32mâœ”[39m[0m[90m refPath with virtual (gh-7341)[0m
2025-04-09T19:13:10.8203442Z     [32m  [32mâœ”[39m[0m[90m count with subdocs (gh-7573)[0m
2025-04-09T19:13:10.8563679Z     [32m  [32mâœ”[39m[0m[90m returns an array when count on an array localField (gh-11307) (gh-7573)[0m
2025-04-09T19:13:10.8852126Z     [32m  [32mâœ”[39m[0m[90m handles virtual populate of an embedded discriminator nested path (gh-6488) (gh-8173)[0m
2025-04-09T19:13:10.9138745Z     [32m  [32mâœ”[39m[0m[90m accessing populate virtual prop (gh-13189) (gh-8198)[0m
2025-04-09T19:13:10.9523431Z     [32m  [32mâœ”[39m[0m[90m doesnt insert empty document when populating a path within a non-existent document array (gh-8432)[0m
2025-04-09T19:13:10.9849943Z     [32m  [32mâœ”[39m[0m[90m doesnt insert empty document when lean populating a path within an underneath non-existent document array (gh-14098)[0m
2025-04-09T19:13:11.0043188Z     [32m  [32mâœ”[39m[0m[90m sets empty array if populating undefined path (gh-8455)[0m
2025-04-09T19:13:11.0511520Z     [32m  [32mâœ”[39m[0m[90m succeeds with refPath if embedded discriminator has path with same name but no refPath (gh-8452) (gh-8499)[0m
2025-04-09T19:13:11.0796587Z     [32m  [32mâœ”[39m[0m[90m excluding foreignField using minus path deselects foreignField (gh-8460)[0m
2025-04-09T19:13:11.1142545Z     [32m  [32mâœ”[39m[0m[90m supports top-level match option (gh-8475)[0m
2025-04-09T19:13:11.1534478Z     [32m  [32mâœ”[39m[0m[90m supports top-level skip and limit options (gh-8445)[0m
2025-04-09T19:13:11.1872371Z     [32m  [32mâœ”[39m[0m[90m top-level limit properly applies limit per document (gh-8657)[0m
2025-04-09T19:13:11.2206648Z     [32m  [32mâœ”[39m[0m[90m correct limit with populate (gh-7318)[0m
2025-04-09T19:13:11.2523585Z     [32m  [32mâœ”[39m[0m[90m perDocumentLimit as option to `populate()` method (gh-7318) (gh-9418)[0m
2025-04-09T19:13:11.2866499Z     [32m  [32mâœ”[39m[0m[90m works when embedded discriminator array has populated path but not refPath (gh-8527)[0m
2025-04-09T19:13:11.3079395Z     [32m  [32mâœ”[39m[0m[90m handles populating embedded discriminators with `refPath` when none of the subdocs have `refPath` (gh-8553)[0m
2025-04-09T19:13:11.3377412Z     [32m  [32mâœ”[39m[0m[90m throws an error when using limit with perDocumentLimit[0m
2025-04-09T19:13:11.3641566Z     [32m  [32mâœ”[39m[0m[90m handles function refPath with discriminators (gh-8731)[0m
2025-04-09T19:13:11.3895294Z     [32m  [32mâœ”[39m[0m[90m recursive virtuals with `populate` option (gh-11700)[0m
2025-04-09T19:13:11.4190093Z     [32m  [32mâœ”[39m[0m[90m no-op if populating on a document array with no ref (gh-8946)[0m
2025-04-09T19:13:11.4459042Z     [32m  [32mâœ”[39m[0m[90m no-op if populating a nested path (gh-9073)[0m
2025-04-09T19:13:11.4778449Z     [32m  [32mâœ”[39m[0m[90m handles populating primitive array under document array with discriminator (gh-9148)[0m
2025-04-09T19:13:11.5159114Z     [32m  [32mâœ”[39m[0m[90m handles deselecting _id with `perDocumentLimit` (gh-8460) (gh-9175)[0m
2025-04-09T19:13:11.5393590Z     [32m  [32mâœ”[39m[0m[90m handles embedded discriminator `refPath` with multiple documents (gh-8731) (gh-9153)[0m
2025-04-09T19:13:11.5760126Z     [32m  [32mâœ”[39m[0m[90m Sets the populated document's parent() (gh-8092)[0m
2025-04-09T19:13:11.6193832Z     [32m  [32mâœ”[39m[0m[90m populates single nested discriminator underneath doc array when populated docs have different model but same id (gh-9244)[0m
2025-04-09T19:13:11.6481985Z     [32m  [32mâœ”[39m[0m[90m skips checking `refPath` if the path to populate is undefined (gh-9340)[0m
2025-04-09T19:13:11.6765203Z     [32m  [32mâœ”[39m[0m[90m supports default populate options (gh-6029)[0m
2025-04-09T19:13:11.7059476Z     [32m  [32mâœ”[39m[0m[90m avoids propagating lean virtuals to children (gh-9592)[0m
2025-04-09T19:13:11.7416493Z     [32m  [32mâœ”[39m[0m[90m gh-9833[0m
2025-04-09T19:13:11.7737248Z     [32m  [32mâœ”[39m[0m[90m sets not-found values to null for paths that are not in the schema (gh-9913)[0m
2025-04-09T19:13:11.8043169Z     [32m  [32mâœ”[39m[0m[90m handles perDocumentLimit where multiple documents reference the same populated doc (gh-9906)[0m
2025-04-09T19:13:11.8463650Z     [32m  [32mâœ”[39m[0m[90m supports `transform` option (gh-3375)[0m
2025-04-09T19:13:11.8726434Z     [32m  [32mâœ”[39m[0m[90m avoids calling `transform()` with `lean()` when no results (gh-12739)[0m
2025-04-09T19:13:11.9120172Z     [32m  [32mâœ”[39m[0m[90m transform to primitive (gh-10064)[0m
2025-04-09T19:13:11.9396996Z     [32m  [32mâœ”[39m[0m[90m transform with virtual populate, justOne = true (gh-3375)[0m
2025-04-09T19:13:11.9685549Z     [32m  [32mâœ”[39m[0m[90m transform with virtual populate, justOne = false (gh-3375)[0m
2025-04-09T19:13:12.0172363Z     [32m  [32mâœ”[39m[0m[90m supports populating dotted subpath of a populated doc that has the same id as a populated doc (gh-10005)[0m[33m (40ms)[0m
2025-04-09T19:13:12.0495098Z     [32m  [32mâœ”[39m[0m[90m prevents already populated fields from becoming null gh-10068[0m
2025-04-09T19:13:12.0799340Z     [32m  [32mâœ”[39m[0m[90m populates lean subdoc with `_id` property (gh-10069)[0m
2025-04-09T19:13:12.1073633Z     [32m  [32mâœ”[39m[0m[90m handles virtual populate when foreignField is an array with duplicates (gh-10117)[0m
2025-04-09T19:13:12.1356567Z     [32m  [32mâœ”[39m[0m[90m handles virtual populate with `$elemMatch` in custom match when `foreignField` is an array (gh-10117)[0m
2025-04-09T19:13:12.1610205Z     [32m  [32mâœ”[39m[0m[90m populates immutable array paths (gh-10159)[0m
2025-04-09T19:13:12.1900436Z     [32m  [32mâœ”[39m[0m[90m populates paths under mixed schematypes where some documents have non-object properties (gh-10191)[0m
2025-04-09T19:13:12.2372184Z     [32m  [32mâœ”[39m[0m[90m populates embedded discriminator with tied value (gh-10231)[0m
2025-04-09T19:13:12.2622746Z     [32m  [32mâœ”[39m[0m[90m supports populating an array of immutable elements (gh-10264)[0m
2025-04-09T19:13:12.2904333Z     [32m  [32mâœ”[39m[0m[90m populates nested path in schema using `Model.populate()` static (gh-10335)[0m
2025-04-09T19:13:12.3275937Z     [32m  [32mâœ”[39m[0m[90m calls subdocument ref functions with subdocument as context (gh-8469)[0m
2025-04-09T19:13:12.3346875Z [0m      populate virtuals (gh-2562)[0m
2025-04-09T19:13:12.3656403Z       [32m  [32mâœ”[39m[0m[90m basic populate virtuals[0m
2025-04-09T19:13:12.4080195Z       [32m  [32mâœ”[39m[0m[90m match (gh-6787)[0m
2025-04-09T19:13:12.4425292Z       [32m  [32mâœ”[39m[0m[90m match prevents using $where[0m
2025-04-09T19:13:12.4948175Z       [32m  [32mâœ”[39m[0m[90m multiple source docs[0m[33m (39ms)[0m
2025-04-09T19:13:12.5179750Z       [32m  [32mâœ”[39m[0m[90m catchable error if localField or foreignField not specified (gh-6767)[0m
2025-04-09T19:13:12.5642638Z       [32m  [32mâœ”[39m[0m[90m source array[0m
2025-04-09T19:13:12.6049243Z       [32m  [32mâœ”[39m[0m[90m multiple paths (gh-4234)[0m
2025-04-09T19:13:12.6352369Z       [32m  [32mâœ”[39m[0m[90m in embedded array (gh-4928)[0m
2025-04-09T19:13:12.6784567Z       [32m  [32mâœ”[39m[0m[90m in embedded array with sort (gh-10552)[0m
2025-04-09T19:13:12.7109011Z       [32m  [32mâœ”[39m[0m[90m in embedded array with sort and one result (gh-10552)[0m
2025-04-09T19:13:12.7457950Z       [32m  [32mâœ”[39m[0m[90m justOne option (gh-4263)[0m
2025-04-09T19:13:12.7756718Z       [32m  [32mâœ”[39m[0m[90m justOne + lean (gh-6234)[0m
2025-04-09T19:13:12.8017874Z       [32m  [32mâœ”[39m[0m[90m sets empty array if lean with justOne = false and no results (gh-10992)[0m
2025-04-09T19:13:12.8321624Z       [32m  [32mâœ”[39m[0m[90m justOne underneath array (gh-6867)[0m
2025-04-09T19:13:12.8603467Z       [32m  [32mâœ”[39m[0m[90m with no results and justOne (gh-4284)[0m
2025-04-09T19:13:12.8933632Z       [32m  [32mâœ”[39m[0m[90m with multiple results and justOne (gh-4329)[0m
2025-04-09T19:13:12.9211403Z       [32m  [32mâœ”[39m[0m[90m virtuals with getters (gh-9343)[0m
2025-04-09T19:13:12.9525111Z       [32m  [32mâœ”[39m[0m[90m virtuals with `get` option (gh-9343)[0m
2025-04-09T19:13:12.9817063Z       [32m  [32mâœ”[39m[0m[90m hydrates properly (gh-4618)[0m
2025-04-09T19:13:13.0195467Z       [32m  [32mâœ”[39m[0m[90m with functions for localField and foreignField (gh-5704)[0m
2025-04-09T19:13:13.0572236Z       [32m  [32mâœ”[39m[0m[90m with functions for ref (gh-5602)[0m
2025-04-09T19:13:13.0986794Z       [32m  [32mâœ”[39m[0m[90m with functions for match (gh-7397)[0m
2025-04-09T19:13:13.1346798Z       [32m  [32mâœ”[39m[0m[90m with functions for match and foreignField (gh-7397)[0m
2025-04-09T19:13:13.1759046Z       [32m  [32mâœ”[39m[0m[90m with function for refPath (gh-6669)[0m
2025-04-09T19:13:13.2104860Z       [32m  [32mâœ”[39m[0m[90m with no results (gh-4284)[0m
2025-04-09T19:13:13.2320248Z       [32m  [32mâœ”[39m[0m[90m virtual is undefined when not populated (gh-7795)[0m
2025-04-09T19:13:13.2685265Z       [32m  [32mâœ”[39m[0m[90m deep populate virtual -> conventional (gh-4261)[0m
2025-04-09T19:13:13.3030190Z       [32m  [32mâœ”[39m[0m[90m deep populate virtual -> virtual (gh-4278)[0m
2025-04-09T19:13:13.3419084Z       [32m  [32mâœ”[39m[0m[90m source array (gh-4585)[0m
2025-04-09T19:13:13.3696432Z       [32m  [32mâœ”[39m[0m[90m lean with single result and no justOne (gh-4288)[0m
2025-04-09T19:13:13.4143585Z       [32m  [32mâœ”[39m[0m[90m gh-4923[0m
2025-04-09T19:13:13.4432385Z       [32m  [32mâœ”[39m[0m[90m supports setting default options in schema (gh-4741)[0m
2025-04-09T19:13:13.4562912Z       [32m  [32mâœ”[39m[0m[90m handles populate with 0 args (gh-5036)[0m
2025-04-09T19:13:13.4689006Z       [32m  [32mâœ”[39m[0m[90m attaches `_id` property to ref ids (gh-6359) (gh-6115)[0m
2025-04-09T19:13:13.5177870Z       [32m  [32mâœ”[39m[0m[90m handles populating with discriminators that may not have a ref (gh-4817)[0m
2025-04-09T19:13:13.5415409Z       [32m  [32mâœ”[39m[0m[90m populate with no ref using Model.populate (gh-4843)[0m
2025-04-09T19:13:13.5773154Z       [32m  [32mâœ”[39m[0m[90m nested populate, virtual -> normal (gh-4631)[0m
2025-04-09T19:13:13.6269431Z       [32m  [32mâœ”[39m[0m[90m populate with Decimal128 as ref (gh-4759)[0m[33m (38ms)[0m
2025-04-09T19:13:13.6584809Z       [32m  [32mâœ”[39m[0m[90m handles circular virtual -> regular (gh-5128)[0m
2025-04-09T19:13:13.6904132Z       [32m  [32mâœ”[39m[0m[90m handles nested virtuals (gh-4851)[0m
2025-04-09T19:13:13.7187094Z       [32m  [32mâœ”[39m[0m[90m nested virtuals if top-level prop doesnt exist (gh-5431)[0m
2025-04-09T19:13:13.7475347Z       [32m  [32mâœ”[39m[0m[90m nested virtuals + doc.populate() (gh-5240)[0m
2025-04-09T19:13:13.7764296Z       [32m  [32mâœ”[39m[0m[90m no ref + cursor (gh-5334)[0m
2025-04-09T19:13:13.8315391Z       [32m  [32mâœ”[39m[0m[90m retains limit when using cursor (gh-5468)[0m[33m (43ms)[0m
2025-04-09T19:13:13.8610247Z       [32m  [32mâœ”[39m[0m[90m virtuals + doc.populate() (gh-5311)[0m
2025-04-09T19:13:13.8877749Z       [32m  [32mâœ”[39m[0m[90m empty virtual with Model.populate (gh-5331)[0m
2025-04-09T19:13:13.9160611Z       [32m  [32mâœ”[39m[0m[90m virtual populate in single nested doc (gh-4715)[0m
2025-04-09T19:13:13.9382705Z       [32m  [32mâœ”[39m[0m[90m populate with missing schema (gh-5364)[0m
2025-04-09T19:13:13.9512927Z       [32m  [32mâœ”[39m[0m[90m populate with missing schema (gh-5460)[0m
2025-04-09T19:13:13.9928155Z       [32m  [32mâœ”[39m[0m[90m array underneath non-existent array (gh-6245)[0m
2025-04-09T19:13:14.0237332Z       [32m  [32mâœ”[39m[0m[90m virtuals with justOne false and foreign field not found (gh-5336)[0m
2025-04-09T19:13:14.0528957Z       [32m  [32mâœ”[39m[0m[90m virtuals with justOne true and foreign field not found (gh-5336)[0m
2025-04-09T19:13:14.0828128Z       [32m  [32mâœ”[39m[0m[90m select foreignField automatically (gh-4959)[0m
2025-04-09T19:13:14.1090040Z       [32m  [32mâœ”[39m[0m[90m does not set `populated()` until populate is done (gh-5564)[0m
2025-04-09T19:13:14.1382105Z       [32m  [32mâœ”[39m[0m[90m virtual populate toJSON output (gh-5542)[0m
2025-04-09T19:13:14.1675961Z       [32m  [32mâœ”[39m[0m[90m works if foreignField parent is selected (gh-5037)[0m
2025-04-09T19:13:14.2174007Z       [32m  [32mâœ”[39m[0m[90m subPopulate under discriminators race condition (gh-5858)[0m[33m (38ms)[0m
2025-04-09T19:13:14.2483042Z       [32m  [32mâœ”[39m[0m[90m populating nested discriminator path (gh-5970)[0m
2025-04-09T19:13:14.2770108Z       [32m  [32mâœ”[39m[0m[90m specify model in populate (gh-4264)[0m
2025-04-09T19:13:14.2844339Z [0m        selectPopulatedFields (gh-5669)[0m
2025-04-09T19:13:14.3122473Z         [32m  [32mâœ”[39m[0m[90m auto select populated fields (gh-5669) (gh-5685)[0m
2025-04-09T19:13:14.3417882Z         [32m  [32mâœ”[39m[0m[90m disabling at schema level (gh-6546)[0m
2025-04-09T19:13:14.3721801Z         [32m  [32mâœ”[39m[0m[90m disabling at global level (gh-6546)[0m
2025-04-09T19:13:14.4046557Z         [32m  [32mâœ”[39m[0m[90m schema overwrites global (gh-6546)[0m
2025-04-09T19:13:14.4139637Z [0m      populates an array of objects[0m
2025-04-09T19:13:14.4570243Z       [32m  [32mâœ”[39m[0m[90m subpopulates array w/ space separated path (gh-6284)[0m
2025-04-09T19:13:14.5199058Z       [32m  [32mâœ”[39m[0m[90m populates array of space separated path objs (gh-6414)[0m[33m (51ms)[0m
2025-04-09T19:13:14.5689443Z       [32m  [32mâœ”[39m[0m[90m handles subpopulation with options (gh-6528)[0m
2025-04-09T19:13:14.6026457Z       [32m  [32mâœ”[39m[0m[90m honors top-level match with subPopulation (gh-6451)[0m
2025-04-09T19:13:14.6386859Z       [32m  [32mâœ”[39m[0m[90m handles embedded discriminator (gh-6487)[0m
2025-04-09T19:13:14.6759638Z       [32m  [32mâœ”[39m[0m[90m handles virtual embedded discriminator underneath single nested (gh-6571)[0m
2025-04-09T19:13:14.7233868Z       [32m  [32mâœ”[39m[0m[90m populates undefined nested fields without error (gh-6845)[0m
2025-04-09T19:13:14.7632682Z       [32m  [32mâœ”[39m[0m[90m populates refPath from array element (gh-6509)[0m
2025-04-09T19:13:14.7716571Z [0m      lean + deep populate (gh-6498)[0m
2025-04-09T19:13:14.8182563Z       [32m  [32mâœ”[39m[0m[90m document, and subdocuments are not lean by default[0m
2025-04-09T19:13:14.8733612Z       [32m  [32mâœ”[39m[0m[90m .lean() makes query result, and all populated fields lean[0m
2025-04-09T19:13:14.9241841Z       [32m  [32mâœ”[39m[0m[90m disabling lean at some populating level reflects on it, and descendants[0m
2025-04-09T19:13:14.9797265Z       [32m  [32mâœ”[39m[0m[90m enabling lean at some populating level reflects on it, and descendants[0m
2025-04-09T19:13:15.0235344Z       [32m  [32mâœ”[39m[0m[90m disabling lean on nested population overwrites parent lean[0m
2025-04-09T19:13:15.0318381Z [0m      gh-8247[0m
2025-04-09T19:13:15.0546794Z       [32m  [32mâœ”[39m[0m[90m checking `populated()` on a document array element (gh-8247)[0m
2025-04-09T19:13:15.0901862Z       [32m  [32mâœ”[39m[0m[90m updates top-level populated() when pushing elements onto a document array with single populated path (gh-8247) (gh-8265)[0m
2025-04-09T19:13:15.1364436Z       [32m  [32mâœ”[39m[0m[90m retainNullValues stores `null` in array if foreign doc not found (gh-8293)[0m
2025-04-09T19:13:15.1828201Z       [32m  [32mâœ”[39m[0m[90m virtual populate with discriminator that has a custom discriminator value (gh-8324)[0m
2025-04-09T19:13:15.2307138Z       [32m  [32mâœ”[39m[0m[90m virtual populate with multiple `localField` and `foreignField` (gh-6608)[0m
2025-04-09T19:13:15.2390250Z [0m      gh-8760[0m
2025-04-09T19:13:15.2629171Z       [32m  [32mâœ”[39m[0m[90m clone with lean creates identical copies from the same document[0m
2025-04-09T19:13:15.2919639Z       [32m  [32mâœ”[39m[0m[90m clone with populate and lean makes child lean[0m
2025-04-09T19:13:15.3237565Z       [32m  [32mâœ”[39m[0m[90m can populate subdocs where one is discriminator and the other is not (gh-8837)[0m
2025-04-09T19:13:15.3575437Z       [32m  [32mâœ”[39m[0m[90m can populate virtuals defined on child discriminators (gh-8924)[0m
2025-04-09T19:13:15.3669954Z [0m    strictPopulate[0m
2025-04-09T19:13:15.4064150Z     [32m  [32mâœ”[39m[0m[90m does not throw an error when using strictPopulate on a nested path (gh-13863)[0m
2025-04-09T19:13:15.4403226Z     [32m  [32mâœ”[39m[0m[90m reports full path when throwing `strictPopulate` error with deep populate (gh-10923)[0m
2025-04-09T19:13:15.4738890Z     [32m  [32mâœ”[39m[0m[90m propagates toObject options to populate virtuals (gh-13325)[0m
2025-04-09T19:13:15.4965828Z     [32m  [32mâœ”[39m[0m[90m respects strictPopulate schema option (gh-11290)[0m
2025-04-09T19:13:15.5408252Z     [32m  [32mâœ”[39m[0m[90m allows overwriting localField and foreignField when populating a virtual gh-6963[0m
2025-04-09T19:13:15.5561462Z 
2025-04-09T19:13:15.5563324Z [0m  schematype[0m
2025-04-09T19:13:15.5598179Z   [32m  [32mâœ”[39m[0m[90m honors the selected option[0m
2025-04-09T19:13:15.5644930Z   [32m  [32mâœ”[39m[0m[90m properly handles specifying index in combination with unique or sparse[0m
2025-04-09T19:13:15.5691338Z   [32m  [32mâœ”[39m[0m[90m handles index: false with unique, sparse, text set to false (gh-7620)[0m
2025-04-09T19:13:15.5736226Z   [32m  [32mâœ”[39m[0m[90m handles unique, sparse, text set to false with no index property (gh-10738)[0m
2025-04-09T19:13:15.5781557Z   [32m  [32mâœ”[39m[0m[90m handles function as positional message arg (gh-8360)[0m
2025-04-09T19:13:15.5828370Z   [32m  [32mâœ”[39m[0m[90m merges default validators (gh-14070)[0m
2025-04-09T19:13:15.5876979Z   [32m  [32mâœ”[39m[0m[90m demonstrates the `validateAll()` function (gh-6910)[0m
2025-04-09T19:13:15.5922779Z   [32m  [32mâœ”[39m[0m[90m supports getEmbeddedSchemaType() (gh-8389)[0m
2025-04-09T19:13:15.5944511Z [0m    checkRequired()[0m
2025-04-09T19:13:15.5998407Z     [32m  [32mâœ”[39m[0m[90m with inherits (gh-7486)[0m
2025-04-09T19:13:15.6041477Z [0m    clone()[0m
2025-04-09T19:13:15.6087349Z     [32m  [32mâœ”[39m[0m[90m clones added default[0m
2025-04-09T19:13:15.6153560Z     [32m  [32mâœ”[39m[0m[90m clones added getters[0m
2025-04-09T19:13:15.6219907Z     [32m  [32mâœ”[39m[0m[90m clones added immutable[0m
2025-04-09T19:13:15.6286019Z     [32m  [32mâœ”[39m[0m[90m clones added index[0m
2025-04-09T19:13:15.6341223Z     [32m  [32mâœ”[39m[0m[90m clones added ref[0m
2025-04-09T19:13:15.6407855Z     [32m  [32mâœ”[39m[0m[90m clones added required[0m
2025-04-09T19:13:15.6474693Z     [32m  [32mâœ”[39m[0m[90m clones added select: false[0m
2025-04-09T19:13:15.6540624Z     [32m  [32mâœ”[39m[0m[90m clones added setter[0m
2025-04-09T19:13:15.6606608Z     [32m  [32mâœ”[39m[0m[90m clones added sparse[0m
2025-04-09T19:13:15.6672473Z     [32m  [32mâœ”[39m[0m[90m clones added sparse (index option)[0m
2025-04-09T19:13:15.6738499Z     [32m  [32mâœ”[39m[0m[90m clones added text (index option)[0m
2025-04-09T19:13:15.6804436Z     [32m  [32mâœ”[39m[0m[90m clones added unique (index option)[0m
2025-04-09T19:13:15.6870433Z     [32m  [32mâœ”[39m[0m[90m clones added validator[0m
2025-04-09T19:13:15.6936584Z     [32m  [32mâœ”[39m[0m[90m clones updated caster[0m
2025-04-09T19:13:15.6969447Z [0m    get()[0m
2025-04-09T19:13:15.7013099Z     [32m  [32mâœ”[39m[0m[90m SchemaArray has a `get` method[0m
2025-04-09T19:13:15.7077835Z     [32m  [32mâœ”[39m[0m[90m SchemaBigInt has a `get` method[0m
2025-04-09T19:13:15.7142381Z     [32m  [32mâœ”[39m[0m[90m SchemaBoolean has a `get` method[0m
2025-04-09T19:13:15.7207010Z     [32m  [32mâœ”[39m[0m[90m SchemaBuffer has a `get` method[0m
2025-04-09T19:13:15.7271600Z     [32m  [32mâœ”[39m[0m[90m SchemaDate has a `get` method[0m
2025-04-09T19:13:15.7336258Z     [32m  [32mâœ”[39m[0m[90m SchemaDecimal128 has a `get` method[0m
2025-04-09T19:13:15.7400696Z     [32m  [32mâœ”[39m[0m[90m SchemaDecimal128 has a `get` method[0m
2025-04-09T19:13:15.7465983Z     [32m  [32mâœ”[39m[0m[90m SchemaDocumentArray has a `get` method[0m
2025-04-09T19:13:15.7530378Z     [32m  [32mâœ”[39m[0m[90m SchemaMap has a `get` method[0m
2025-04-09T19:13:15.7594877Z     [32m  [32mâœ”[39m[0m[90m SchemaMixed has a `get` method[0m
2025-04-09T19:13:15.7659326Z     [32m  [32mâœ”[39m[0m[90m SchemaNumber has a `get` method[0m
2025-04-09T19:13:15.7723768Z     [32m  [32mâœ”[39m[0m[90m SchemaObjectId has a `get` method[0m
2025-04-09T19:13:15.7789420Z     [32m  [32mâœ”[39m[0m[90m SchemaString has a `get` method[0m
2025-04-09T19:13:15.7854693Z     [32m  [32mâœ”[39m[0m[90m SchemaSubdocument has a `get` method[0m
2025-04-09T19:13:15.7926794Z     [32m  [32mâœ”[39m[0m[90m SchemaUUID has a `get` method[0m
2025-04-09T19:13:15.7984611Z     [32m  [32mâœ”[39m[0m[90m SchemaDouble has a `get` method[0m
2025-04-09T19:13:15.8049175Z     [32m  [32mâœ”[39m[0m[90m SchemaInt32 has a `get` method[0m
2025-04-09T19:13:15.8114178Z     [32m  [32mâœ”[39m[0m[90m SchemaObjectId has a `get` method[0m
2025-04-09T19:13:15.8178730Z     [32m  [32mâœ”[39m[0m[90m SchemaMixed has a `get` method[0m
2025-04-09T19:13:15.8243274Z     [32m  [32mâœ”[39m[0m[90m SchemaBoolean has a `get` method[0m
2025-04-09T19:13:15.8307726Z     [32m  [32mâœ”[39m[0m[90m SchemaObjectId has a `get` method[0m
2025-04-09T19:13:15.8351025Z [0m    set()[0m
2025-04-09T19:13:15.8396653Z     [32m  [32mâœ”[39m[0m[90m SchemaArray, when given a default option, set its[0m
2025-04-09T19:13:15.8463863Z     [32m  [32mâœ”[39m[0m[90m SchemaBigInt, when given a default option, set its[0m
2025-04-09T19:13:15.8529713Z     [32m  [32mâœ”[39m[0m[90m SchemaBoolean, when given a default option, set its[0m
2025-04-09T19:13:15.8594903Z     [32m  [32mâœ”[39m[0m[90m SchemaBuffer, when given a default option, set its[0m
2025-04-09T19:13:15.8650352Z     [32m  [32mâœ”[39m[0m[90m SchemaDate, when given a default option, set its[0m
2025-04-09T19:13:15.8716042Z     [32m  [32mâœ”[39m[0m[90m SchemaDecimal128, when given a default option, set its[0m
2025-04-09T19:13:15.8781985Z     [32m  [32mâœ”[39m[0m[90m SchemaDecimal128, when given a default option, set its[0m
2025-04-09T19:13:15.8847523Z     [32m  [32mâœ”[39m[0m[90m SchemaMap, when given a default option, set its[0m
2025-04-09T19:13:15.8912874Z     [32m  [32mâœ”[39m[0m[90m SchemaMixed, when given a default option, set its[0m
2025-04-09T19:13:15.8978137Z     [32m  [32mâœ”[39m[0m[90m SchemaNumber, when given a default option, set its[0m
2025-04-09T19:13:15.9043336Z     [32m  [32mâœ”[39m[0m[90m SchemaObjectId, when given a default option, set its[0m
2025-04-09T19:13:15.9108468Z     [32m  [32mâœ”[39m[0m[90m SchemaString, when given a default option, set its[0m
2025-04-09T19:13:15.9173632Z     [32m  [32mâœ”[39m[0m[90m SchemaUUID, when given a default option, set its[0m
2025-04-09T19:13:15.9239259Z     [32m  [32mâœ”[39m[0m[90m SchemaDouble, when given a default option, set its[0m
2025-04-09T19:13:15.9304514Z     [32m  [32mâœ”[39m[0m[90m SchemaInt32, when given a default option, set its[0m
2025-04-09T19:13:15.9369422Z     [32m  [32mâœ”[39m[0m[90m SchemaObjectId, when given a default option, set its[0m
2025-04-09T19:13:15.9435661Z     [32m  [32mâœ”[39m[0m[90m SchemaMixed, when given a default option, set its[0m
2025-04-09T19:13:15.9500549Z     [32m  [32mâœ”[39m[0m[90m SchemaBoolean, when given a default option, set its[0m
2025-04-09T19:13:15.9565683Z     [32m  [32mâœ”[39m[0m[90m SchemaObjectId, when given a default option, set its[0m
2025-04-09T19:13:15.9597792Z [0m      SchemaType.set()[0m
2025-04-09T19:13:15.9652047Z       [32m  [32mâœ”[39m[0m[90m SchemaType.set, is a function[0m
2025-04-09T19:13:15.9936195Z       [32m  [32mâœ”[39m[0m[90m should allow setting values to a given property gh-13510[0m
2025-04-09T19:13:16.0011577Z 
2025-04-09T19:13:16.0012631Z [0m  document modified[0m
2025-04-09T19:13:16.0035355Z [0m    modified states[0m
2025-04-09T19:13:16.0207845Z     [32m  [32mâœ”[39m[0m[90m reset after save[0m
2025-04-09T19:13:16.0388536Z     [32m  [32mâœ”[39m[0m[90m of embedded docs reset after save[0m
2025-04-09T19:13:16.0453747Z [0m    isDefault[0m
2025-04-09T19:13:16.0505052Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:16.0635272Z [0m    isModified[0m
2025-04-09T19:13:16.0683710Z     [32m  [32mâœ”[39m[0m[90m should not throw with no argument[0m
2025-04-09T19:13:16.0807364Z     [32m  [32mâœ”[39m[0m[90m when modifying keys[0m
2025-04-09T19:13:16.0917993Z     [32m  [32mâœ”[39m[0m[90m setting a key identically to its current value should not dirty the key[0m
2025-04-09T19:13:16.1022723Z     [32m  [32mâœ”[39m[0m[90m should support passing a string of keys separated by a blank space as the first argument[0m
2025-04-09T19:13:16.1240269Z     [32m  [32mâœ”[39m[0m[90m on entire document[0m
2025-04-09T19:13:16.1551902Z     [32m  [32mâœ”[39m[0m[90m should let you set ref paths (gh-1530)[0m
2025-04-09T19:13:16.1665057Z     [32m  [32mâœ”[39m[0m[90m properly sets populated for gh-1530 (gh-2678)[0m
2025-04-09T19:13:16.2000645Z     [32m  [32mâœ”[39m[0m[90m should support setting mixed paths by string (gh-1418)[0m
2025-04-09T19:13:16.2248916Z     [32m  [32mâœ”[39m[0m[90m should mark multi-level nested schemas as modified (gh-1754)[0m
2025-04-09T19:13:16.2455405Z     [32m  [32mâœ”[39m[0m[90m should reset the modified state after calling unmarkModified[0m
2025-04-09T19:13:16.2505751Z [0m      on DocumentArray[0m
2025-04-09T19:13:16.2579796Z       [32m  [32mâœ”[39m[0m[90m work[0m
2025-04-09T19:13:16.2708618Z       [32m  [32mâœ”[39m[0m[90m with push (gh-14024)[0m
2025-04-09T19:13:16.2830688Z       [32m  [32mâœ”[39m[0m[90m with push and set (gh-14024)[0m
2025-04-09T19:13:16.2954109Z       [32m  [32mâœ”[39m[0m[90m with accessors[0m
2025-04-09T19:13:16.3025990Z [0m      on MongooseArray[0m
2025-04-09T19:13:16.3083904Z       [32m  [32mâœ”[39m[0m[90m atomic methods[0m
2025-04-09T19:13:16.3192506Z       [32m  [32mâœ”[39m[0m[90m native methods[0m
2025-04-09T19:13:16.3266796Z [0m      manually populating arrays[0m
2025-04-09T19:13:16.3366112Z       [32m  [32mâœ”[39m[0m[90m gh-1530 for arrays (gh-3575)[0m
2025-04-09T19:13:16.3662605Z       [32m  [32mâœ”[39m[0m[90m setting nested arrays (gh-3721)[0m
2025-04-09T19:13:16.3793813Z       [32m  [32mâœ”[39m[0m[90m with discriminators (gh-3575)[0m
2025-04-09T19:13:16.4177962Z       [32m  [32mâœ”[39m[0m[90m updates embedded doc parents upon direct assignment (gh-5189)[0m
2025-04-09T19:13:16.4342350Z 
2025-04-09T19:13:16.4342979Z [0m  schema alias option[0m
2025-04-09T19:13:16.4523632Z   [32m  [32mâœ”[39m[0m[90m works with all basic schema types[0m
2025-04-09T19:13:16.4707420Z   [32m  [32mâœ”[39m[0m[90m works with nested schema types[0m
2025-04-09T19:13:16.4776326Z   [32m  [32mâœ”[39m[0m[90m throws when alias option is invalid[0m
2025-04-09T19:13:16.4834976Z   [32m  [32mâœ”[39m[0m[90m with add() (gh-6593)[0m
2025-04-09T19:13:16.4900512Z   [32m  [32mâœ”[39m[0m[90m nested aliases (gh-6671)[0m
2025-04-09T19:13:16.4961364Z   [32m  [32mâœ”[39m[0m[90m array of aliases (gh-12368)[0m
2025-04-09T19:13:16.5063254Z   [32m  [32mâœ”[39m[0m[90m alias() method (gh-12368)[0m
2025-04-09T19:13:16.5123245Z   [32m  [32mâœ”[39m[0m[90m supports passing the alias name for an index (gh-13276)[0m
2025-04-09T19:13:16.5287599Z   [32m  [32mâœ”[39m[0m[90m should disable the id virtual entirely if there's a field with alias `id` gh-13650[0m
2025-04-09T19:13:16.5365168Z 
2025-04-09T19:13:16.5365812Z [0m  documents should not be converted to _id (gh-1408)[0m
2025-04-09T19:13:16.5581793Z   [32m  [32mâœ”[39m[0m[90m if an embedded doc[0m
2025-04-09T19:13:16.5613640Z 
2025-04-09T19:13:16.5620140Z [0m  document[0m
2025-04-09T19:13:16.5669434Z   [32m  [32mâœ”[39m[0m[90m test shortcut setters[0m
2025-04-09T19:13:16.5738589Z   [32m  [32mâœ”[39m[0m[90m test accessor of id[0m
2025-04-09T19:13:16.5797920Z   [32m  [32mâœ”[39m[0m[90m test shortcut of id hexString[0m
2025-04-09T19:13:16.5871024Z   [32m  [32mâœ”[39m[0m[90m toObject options[0m
2025-04-09T19:13:16.6224427Z   [32m  [32mâœ”[39m[0m[90m toObject transform[0m
2025-04-09T19:13:16.6299130Z   [32m  [32mâœ”[39m[0m[90m propagates toObject transform function to all subdocuments (gh-14589)[0m
2025-04-09T19:13:16.6413113Z   [32m  [32mâœ”[39m[0m[90m disabling aliases in toObject options (gh-7548)[0m
2025-04-09T19:13:16.6667670Z   [32m  [32mâœ”[39m[0m[90m can save multiple times with changes to complex subdocuments (gh-8531)[0m
2025-04-09T19:13:16.6870201Z   [32m  [32mâœ”[39m[0m[90m saves even if `_id` is null (gh-6406)[0m
2025-04-09T19:13:16.7016218Z   [32m  [32mâœ”[39m[0m[90m allows you to skip validation on save (gh-2981)[0m
2025-04-09T19:13:16.7242596Z   [32m  [32mâœ”[39m[0m[90m doesnt use custom toObject options on save[0m
2025-04-09T19:13:16.7502319Z   [32m  [32mâœ”[39m[0m[90m toObject should not set undefined values to null[0m
2025-04-09T19:13:16.7576001Z   [32m  [32mâœ”[39m[0m[90m methods on embedded docs should work[0m
2025-04-09T19:13:16.7716193Z   [32m  [32mâœ”[39m[0m[90m setting a positional path does not cast value to array[0m
2025-04-09T19:13:16.7799172Z   [32m  [32mâœ”[39m[0m[90m no maxListeners warning should occur[0m
2025-04-09T19:13:16.8048562Z   [32m  [32mâœ”[39m[0m[90m unselected required fields should pass validation[0m
2025-04-09T19:13:16.8214617Z   [32m  [32mâœ”[39m[0m[90m #invalidate[0m
2025-04-09T19:13:16.8280258Z   [32m  [32mâœ”[39m[0m[90m properly calls queue functions (gh-2856)[0m
2025-04-09T19:13:16.8521905Z   [32m  [32mâœ”[39m[0m[90m does not save duplicate items after two saves (gh-6900)[0m
2025-04-09T19:13:16.8599503Z   [32m  [32mâœ”[39m[0m[90m validateSync() on embedded doc (gh-6931)[0m
2025-04-09T19:13:16.8704537Z   [32m  [32mâœ”[39m[0m[90m retains user-defined key order with nested docs (gh-6944)[0m
2025-04-09T19:13:16.8960943Z   [32m  [32mâœ”[39m[0m[90m does not mark modified if setting nested subdoc to same value (gh-7048)[0m
2025-04-09T19:13:16.9142808Z   [32m  [32mâœ”[39m[0m[90m allow saving validation error in db (gh-7127)[0m
2025-04-09T19:13:16.9213200Z   [32m  [32mâœ”[39m[0m[90m handles mixed arrays with all syntaxes (gh-7109)[0m
2025-04-09T19:13:16.9328454Z   [32m  [32mâœ”[39m[0m[90m propsParameter option (gh-7145)[0m
2025-04-09T19:13:16.9444549Z   [32m  [32mâœ”[39m[0m[90m surfaces errors in subdoc pre validate (gh-7187)[0m
2025-04-09T19:13:16.9549755Z   [32m  [32mâœ”[39m[0m[90m runs setter only once when doing .set() underneath single nested (gh-7196)[0m
2025-04-09T19:13:16.9763803Z   [32m  [32mâœ”[39m[0m[90m should enable key with dot(.) on mixed types with checkKeys (gh-7144)[0m
2025-04-09T19:13:16.9951704Z   [32m  [32mâœ”[39m[0m[90m doesnt mark array as modified on init if embedded schema has default (gh-7227)[0m
2025-04-09T19:13:17.0139048Z   [32m  [32mâœ”[39m[0m[90m casts defaults for doc arrays (gh-7337)[0m
2025-04-09T19:13:17.0331133Z   [32m  [32mâœ”[39m[0m[90m updateOne() hooks (gh-7133) (gh-7423)[0m
2025-04-09T19:13:17.0502213Z   [32m  [32mâœ”[39m[0m[90m doesnt mark single nested doc date as modified if setting with string (gh-7264)[0m
2025-04-09T19:13:17.0573856Z   [32m  [32mâœ”[39m[0m[90m handles null `fields` param to constructor (gh-7271)[0m
2025-04-09T19:13:17.0693656Z   [32m  [32mâœ”[39m[0m[90m flattenMaps option for toObject() (gh-10872) (gh-7274) (gh-10486)[0m
2025-04-09T19:13:17.0953502Z   [32m  [32mâœ”[39m[0m[90m flattenObjectIds option for toObject() (gh-13341) (gh-2790)[0m
2025-04-09T19:13:17.1163447Z   [32m  [32mâœ”[39m[0m[90m `collection` property with strict: false (gh-7276)[0m
2025-04-09T19:13:17.1237971Z   [32m  [32mâœ”[39m[0m[90m should validateSync() all elements in doc array (gh-6746)[0m
2025-04-09T19:13:17.1367366Z   [32m  [32mâœ”[39m[0m[90m handles fake constructor (gh-7290)[0m
2025-04-09T19:13:17.1479739Z   [32m  [32mâœ”[39m[0m[90m handles fake __proto__ (gh-7290)[0m
2025-04-09T19:13:17.1677282Z   [32m  [32mâœ”[39m[0m[90m cast error with string path set to array in db (gh-7619)[0m
2025-04-09T19:13:17.1840511Z   [32m  [32mâœ”[39m[0m[90m doesnt crash if nested path with `get()` (gh-7316)[0m
2025-04-09T19:13:17.2031839Z   [32m  [32mâœ”[39m[0m[90m copies atomics from existing document array when setting doc array (gh-7472)[0m
2025-04-09T19:13:17.2214375Z   [32m  [32mâœ”[39m[0m[90m doesnt fail with custom update function (gh-7342)[0m
2025-04-09T19:13:17.2286462Z   [32m  [32mâœ”[39m[0m[90m setters that modify `this` should work on single nested when overwriting (gh-7585)[0m
2025-04-09T19:13:17.2396316Z   [32m  [32mâœ”[39m[0m[90m handles setting embedded doc to Object.assign() from another doc (gh-7645)[0m
2025-04-09T19:13:17.2690022Z   [32m  [32mâœ”[39m[0m[90m setting single nested subdoc with custom date types and getters/setters (gh-7601)[0m
2025-04-09T19:13:17.2859719Z   [32m  [32mâœ”[39m[0m[90m get() and set() underneath alias (gh-7592)[0m
2025-04-09T19:13:17.2923846Z   [32m  [32mâœ”[39m[0m[90m get() with getters: false (gh-7233)[0m
2025-04-09T19:13:17.3028910Z   [32m  [32mâœ”[39m[0m[90m overwriting single nested (gh-7660)[0m
2025-04-09T19:13:17.3133737Z   [32m  [32mâœ”[39m[0m[90m setting path to non-POJO object (gh-7639)[0m
2025-04-09T19:13:17.3236816Z   [32m  [32mâœ”[39m[0m[90m supports setting date properties with strict: false (gh-7907)[0m
2025-04-09T19:13:17.3447893Z   [32m  [32mâœ”[39m[0m[90m supports setting values to undefined with strict: false (gh-15192)[0m
2025-04-09T19:13:17.3536587Z   [32m  [32mâœ”[39m[0m[90m handles .set() on doc array within embedded discriminator (gh-7656)[0m
2025-04-09T19:13:17.3655687Z   [32m  [32mâœ”[39m[0m[90m $isEmpty() (gh-5369)[0m
2025-04-09T19:13:17.3771923Z   [32m  [32mâœ”[39m[0m[90m push() onto discriminator doc array (gh-7704)[0m
2025-04-09T19:13:17.4067844Z   [32m  [32mâœ”[39m[0m[90m doesnt call getter when saving (gh-7719)[0m
2025-04-09T19:13:17.4137443Z   [32m  [32mâœ”[39m[0m[90m skips malformed validators property (gh-7720)[0m
2025-04-09T19:13:17.4393460Z   [32m  [32mâœ”[39m[0m[90m nested set on subdocs works (gh-7748)[0m
2025-04-09T19:13:17.4559492Z   [32m  [32mâœ”[39m[0m[90m does not convert array to object with strict: false (gh-7733)[0m
2025-04-09T19:13:17.4734441Z   [32m  [32mâœ”[39m[0m[90m does not crash with array property named "undefined" (gh-7756)[0m
2025-04-09T19:13:17.4919870Z   [32m  [32mâœ”[39m[0m[90m fires pre save hooks on nested child schemas (gh-7792)[0m
2025-04-09T19:13:17.4991679Z   [32m  [32mâœ”[39m[0m[90m takes message from async custom validator promise rejection (gh-4913)[0m
2025-04-09T19:13:17.5169272Z   [32m  [32mâœ”[39m[0m[90m handles nested properties named `schema` (gh-7831)[0m
2025-04-09T19:13:17.5438199Z   [32m  [32mâœ”[39m[0m[90m handles nested properties named `on` (gh-11656)[0m
2025-04-09T19:13:17.5514815Z   [32m  [32mâœ”[39m[0m[90m copies virtuals from array subdocs when casting array of docs with same schema (gh-7898)[0m
2025-04-09T19:13:17.5757244Z   [32m  [32mâœ”[39m[0m[90m consistent post order traversal for array subdocs (gh-7929)[0m
2025-04-09T19:13:17.5926870Z   [32m  [32mâœ”[39m[0m[90m respects projection for getters (gh-7940)[0m
2025-04-09T19:13:17.6097611Z   [32m  [32mâœ”[39m[0m[90m loads doc with a `once` property successfully (gh-7958)[0m
2025-04-09T19:13:17.6270113Z   [32m  [32mâœ”[39m[0m[90m caster that converts to Number class works (gh-8150)[0m
2025-04-09T19:13:17.6512749Z   [32m  [32mâœ”[39m[0m[90m handles objectids and decimals with strict: false (gh-7973)[0m
2025-04-09T19:13:17.6585497Z   [32m  [32mâœ”[39m[0m[90m allows enum on array of array of strings (gh-7926)[0m
2025-04-09T19:13:17.6874868Z   [32m  [32mâœ”[39m[0m[90m allows saving an unchanged document if required populated path is null (gh-8018)[0m
2025-04-09T19:13:17.6948707Z   [32m  [32mâœ”[39m[0m[90m only calls validator once on mixed validator (gh-8067)[0m
2025-04-09T19:13:17.7052317Z   [32m  [32mâœ”[39m[0m[90m only calls validator once on nested mixed validator (gh-8117)[0m
2025-04-09T19:13:17.7323849Z   [32m  [32mâœ”[39m[0m[90m handles populate() with custom type that does not cast to doc (gh-8062)[0m
2025-04-09T19:13:17.7393787Z   [32m  [32mâœ”[39m[0m[90m can inspect() on a document array (gh-8037)[0m
2025-04-09T19:13:17.7687205Z   [32m  [32mâœ”[39m[0m[90m always passes unpopulated paths to validators (gh-8042)[0m
2025-04-09T19:13:17.7876966Z   [32m  [32mâœ”[39m[0m[90m set() merge option with single nested (gh-8201)[0m
2025-04-09T19:13:17.7947039Z   [32m  [32mâœ”[39m[0m[90m set() merge option with double nested[0m
2025-04-09T19:13:17.8170505Z   [32m  [32mâœ”[39m[0m[90m setting single nested subdoc with timestamps (gh-8251)[0m
2025-04-09T19:13:17.8343334Z   [32m  [32mâœ”[39m[0m[90m passing an object with toBSON() into `save()` (gh-8299)[0m
2025-04-09T19:13:17.8414266Z   [32m  [32mâœ”[39m[0m[90m handles getter setting virtual on manually populated doc when calling toJSON (gh-8295)[0m
2025-04-09T19:13:17.8565210Z   [32m  [32mâœ”[39m[0m[90m enum validator for number (gh-8139)[0m
2025-04-09T19:13:17.8699000Z   [32m  [32mâœ”[39m[0m[90m enum object syntax for number (gh-10648) (gh-8139)[0m
2025-04-09T19:13:17.8805593Z   [32m  [32mâœ”[39m[0m[90m support `pathsToValidate()` option for `validate()` (gh-7587)[0m
2025-04-09T19:13:17.9035920Z   [32m  [32mâœ”[39m[0m[90m array push with $position (gh-14244) (gh-4322)[0m
2025-04-09T19:13:17.9105905Z   [32m  [32mâœ”[39m[0m[90m setting a path to a single nested document should update the single nested doc parent (gh-8400)[0m
2025-04-09T19:13:17.9451911Z   [32m  [32mâœ”[39m[0m[90m setting an array to an array with some populated documents depopulates the whole array (gh-8443)[0m
2025-04-09T19:13:17.9530602Z   [32m  [32mâœ”[39m[0m[90m handles errors with name set to "ValidationError" (gh-8466)[0m
2025-04-09T19:13:17.9645029Z   [32m  [32mâœ”[39m[0m[90m throws an error if running validate() multiple times in parallel (gh-8468)[0m
2025-04-09T19:13:17.9873110Z   [32m  [32mâœ”[39m[0m[90m avoids parallel validate error when validating nested path with double nested subdocs (gh-8486)[0m
2025-04-09T19:13:17.9942674Z   [32m  [32mâœ”[39m[0m[90m supports function for date min/max validator error (gh-8512)[0m
2025-04-09T19:13:18.0150934Z   [32m  [32mâœ”[39m[0m[90m sets parent and ownerDocument correctly with document array default (gh-8509)[0m
2025-04-09T19:13:18.0332938Z   [32m  [32mâœ”[39m[0m[90m doesnt add `null` if property is undefined with minimize false (gh-8504)[0m
2025-04-09T19:13:18.0404381Z   [32m  [32mâœ”[39m[0m[90m creates document array defaults in forward order, not reverse (gh-8514)[0m
2025-04-09T19:13:18.0517080Z   [32m  [32mâœ”[39m[0m[90m can call subdocument validate multiple times in parallel (gh-8539)[0m
2025-04-09T19:13:18.0631445Z   [32m  [32mâœ”[39m[0m[90m sets `Document#op` when calling `validate()` (gh-8439)[0m
2025-04-09T19:13:18.0740325Z   [32m  [32mâœ”[39m[0m[90m schema-level transform (gh-8403)[0m
2025-04-09T19:13:18.0847057Z   [32m  [32mâœ”[39m[0m[90m transforms nested paths (gh-9543)[0m
2025-04-09T19:13:18.1097337Z   [32m  [32mâœ”[39m[0m[90m handles setting numeric paths with single nested subdocs (gh-8583)[0m
2025-04-09T19:13:18.1167211Z   [32m  [32mâœ”[39m[0m[90m setting nested array path to non-nested array wraps values top-down (gh-8544)[0m
2025-04-09T19:13:18.1272014Z   [32m  [32mâœ”[39m[0m[90m doesnt wrap empty nested array with insufficient depth[0m
2025-04-09T19:13:18.1377967Z   [32m  [32mâœ”[39m[0m[90m doesnt wipe out nested keys when setting nested key to empty object with minimize (gh-8565)[0m
2025-04-09T19:13:18.1550806Z   [32m  [32mâœ”[39m[0m[90m allows calling `validate()` in post validate hook without causing parallel validation error (gh-8597)[0m
2025-04-09T19:13:18.1739277Z   [32m  [32mâœ”[39m[0m[90m sets defaults when setting single nested subdoc (gh-8603)[0m
2025-04-09T19:13:18.1808851Z   [32m  [32mâœ”[39m[0m[90m handles validating single nested paths when specified in `pathsToValidate` (gh-8626)[0m
2025-04-09T19:13:18.1871092Z   [32m  [32mâœ”[39m[0m[90m copies immutable fields when constructing new doc from old doc (gh-8642)[0m
2025-04-09T19:13:18.2112775Z   [32m  [32mâœ”[39m[0m[90m can save nested array after setting (gh-8689)[0m
2025-04-09T19:13:18.2202960Z   [32m  [32mâœ”[39m[0m[90m handles validator errors on subdoc paths (gh-5226)[0m
2025-04-09T19:13:18.2324385Z   [32m  [32mâœ”[39m[0m[90m reports array cast error with index (gh-8888)[0m
2025-04-09T19:13:18.2490060Z   [32m  [32mâœ”[39m[0m[90m sets defaults if setting nested path to empty object with minimize false (gh-8829)[0m
2025-04-09T19:13:18.2560669Z   [32m  [32mâœ”[39m[0m[90m clears cast errors when setting an array subpath (gh-9080)[0m
2025-04-09T19:13:18.2795329Z   [32m  [32mâœ”[39m[0m[90m saves successfully if you splice() a sliced array (gh-9011)[0m
2025-04-09T19:13:18.2992026Z   [32m  [32mâœ”[39m[0m[90m handles modifying a subpath of a nested array of documents (gh-8926)[0m
2025-04-09T19:13:18.3192990Z   [32m  [32mâœ”[39m[0m[90m Document#save accepts `timestamps` option (gh-8947) for update[0m
2025-04-09T19:13:18.3357006Z   [32m  [32mâœ”[39m[0m[90m Document#save accepts `timestamps` option (gh-8947) on inserting a new document[0m
2025-04-09T19:13:18.3524408Z   [32m  [32mâœ”[39m[0m[90m Sets default when passing undefined as value for a key in a nested subdoc (gh-12102) (gh-9039)[0m
2025-04-09T19:13:18.3591795Z   [32m  [32mâœ”[39m[0m[90m allows accessing $locals when initializing (gh-9098)[0m
2025-04-09T19:13:18.3708733Z   [32m  [32mâœ”[39m[0m[90m supports skipping defaults on a document (gh-8271)[0m
2025-04-09T19:13:18.3822328Z   [32m  [32mâœ”[39m[0m[90m throws an error when `transform` returns a promise (gh-9163)[0m
2025-04-09T19:13:18.4036992Z   [32m  [32mâœ”[39m[0m[90m uses strict equality when checking mixed paths for modifications (gh-9165)[0m
2025-04-09T19:13:18.4103617Z   [32m  [32mâœ”[39m[0m[90m supports `useProjection` option for `toObject()` (gh-9118)[0m
2025-04-09T19:13:18.4345337Z   [32m  [32mâœ”[39m[0m[90m clears out priorDoc after overwriting single nested subdoc (gh-9208)[0m
2025-04-09T19:13:18.4533754Z   [32m  [32mâœ”[39m[0m[90m handles immutable properties underneath single nested subdocs when overwriting (gh-9281)[0m
2025-04-09T19:13:18.4712242Z   [32m  [32mâœ”[39m[0m[90m allows removing boolean key by setting it to `undefined` (gh-9275)[0m
2025-04-09T19:13:18.4988935Z   [32m  [32mâœ”[39m[0m[90m keeps manually populated paths when setting a nested path to itself (gh-9293)[0m
2025-04-09T19:13:18.5174904Z   [32m  [32mâœ”[39m[0m[90m doesnt wipe out nested paths when setting a nested path to itself (gh-9313)[0m
2025-04-09T19:13:18.5350986Z   [32m  [32mâœ”[39m[0m[90m allows saving after setting document array to itself (gh-9266)[0m
2025-04-09T19:13:18.5417379Z   [32m  [32mâœ”[39m[0m[90m allows accessing document values from function default on array (gh-9351) (gh-6155)[0m
2025-04-09T19:13:18.5659284Z   [32m  [32mâœ”[39m[0m[90m handles pulling array subdocs when _id is an alias (gh-9319)[0m
2025-04-09T19:13:18.5727658Z   [32m  [32mâœ”[39m[0m[90m allows setting nested path to instance of model (gh-9392)[0m
2025-04-09T19:13:18.5971313Z   [32m  [32mâœ”[39m[0m[90m unmarks modified if setting a value to the same value as it was previously (gh-9396)[0m
2025-04-09T19:13:18.6150700Z   [32m  [32mâœ”[39m[0m[90m unmarks modified if setting a value to the same subdoc as it was previously (gh-9396)[0m
2025-04-09T19:13:18.6339874Z   [32m  [32mâœ”[39m[0m[90m does not unmark modified if there is no initial value (gh-9396)[0m
2025-04-09T19:13:18.6535823Z   [32m  [32mâœ”[39m[0m[90m correctly tracks saved state for deeply nested objects (gh-10773) (gh-9396)[0m
2025-04-09T19:13:18.6612216Z   [32m  [32mâœ”[39m[0m[90m marks path as errored if default function throws (gh-9408)[0m
2025-04-09T19:13:18.6719847Z   [32m  [32mâœ”[39m[0m[90m passes subdoc with initial values set to default function when init-ing (gh-9408)[0m
2025-04-09T19:13:18.6825172Z   [32m  [32mâœ”[39m[0m[90m passes document as an argument for `required` function in schema definition (gh-9433)[0m
2025-04-09T19:13:18.6937576Z   [32m  [32mâœ”[39m[0m[90m works with path named isSelected (gh-9438)[0m
2025-04-09T19:13:18.7045035Z   [32m  [32mâœ”[39m[0m[90m init tracks cast error reason (gh-9448)[0m
2025-04-09T19:13:18.7159764Z   [32m  [32mâœ”[39m[0m[90m correctly handles setting nested path underneath single nested subdocs (gh-9459)[0m
2025-04-09T19:13:18.7273729Z   [32m  [32mâœ”[39m[0m[90m $isValid() with space-delimited and array syntax (gh-9474)[0m
2025-04-09T19:13:18.7527357Z   [32m  [32mâœ”[39m[0m[90m avoids overwriting array subdocument when setting dotted path that is not selected (gh-9427)[0m
2025-04-09T19:13:18.7716348Z   [32m  [32mâœ”[39m[0m[90m ignore getters when diffing objects for change tracking (gh-9501)[0m
2025-04-09T19:13:18.7910054Z   [32m  [32mâœ”[39m[0m[90m allows defining middleware for all document hooks using regexp (gh-9190)[0m
2025-04-09T19:13:18.8127428Z   [32m  [32mâœ”[39m[0m[90m correctly handles setting nested props to other nested props (gh-9519)[0m
2025-04-09T19:13:18.8194784Z   [32m  [32mâœ”[39m[0m[90m sets fields after an undefined field (gh-9585)[0m
2025-04-09T19:13:18.8320265Z   [32m  [32mâœ”[39m[0m[90m passes document to `default` functions (gh-9633)[0m
2025-04-09T19:13:18.8433147Z   [32m  [32mâœ”[39m[0m[90m handles pre hook throwing a sync error (gh-9659)[0m
2025-04-09T19:13:18.8538149Z   [32m  [32mâœ”[39m[0m[90m returns undefined rather than entire object when calling `get()` with empty string (gh-9681)[0m
2025-04-09T19:13:18.8776222Z   [32m  [32mâœ”[39m[0m[90m keeps atomics when assigning array to filtered array (gh-9651)[0m
2025-04-09T19:13:18.8842032Z   [32m  [32mâœ”[39m[0m[90m does not pass doc to ObjectId or Date.now (gh-9633) (gh-9636)[0m
2025-04-09T19:13:18.9101628Z   [32m  [32mâœ”[39m[0m[90m supports getting a list of populated docs (gh-9702)[0m
2025-04-09T19:13:18.9535066Z   [32m  [32mâœ”[39m[0m[90m with virtual populate (gh-10148)[0m
2025-04-09T19:13:18.9726235Z   [32m  [32mâœ”[39m[0m[90m handles paths named `db` (gh-9798)[0m
2025-04-09T19:13:18.9927874Z   [32m  [32mâœ”[39m[0m[90m handles paths named `schema` gh-8798[0m
2025-04-09T19:13:19.0105965Z   [32m  [32mâœ”[39m[0m[90m handles nested paths named `schema` gh-8798[0m
2025-04-09T19:13:19.0330726Z   [32m  [32mâœ”[39m[0m[90m object setters will be applied for each object in array after populate (gh-9838)[0m
2025-04-09T19:13:19.0570155Z   [32m  [32mâœ”[39m[0m[90m gh9884[0m
2025-04-09T19:13:19.0765640Z   [32m  [32mâœ”[39m[0m[90m Makes sure pre deleteOne hook is executed (gh-9885)[0m
2025-04-09T19:13:19.0945094Z   [32m  [32mâœ”[39m[0m[90m gh9880[0m
2025-04-09T19:13:19.1146622Z   [32m  [32mâœ”[39m[0m[90m handles directly setting embedded document array element with projection (gh-9909)[0m
2025-04-09T19:13:19.1374958Z   [32m  [32mâœ”[39m[0m[90m toObject() uses child schema `flattenMaps` option by default (gh-9995)[0m
2025-04-09T19:13:19.1534854Z   [32m  [32mâœ”[39m[0m[90m does not double validate paths under mixed objects (gh-10141)[0m
2025-04-09T19:13:19.1735820Z   [32m  [32mâœ”[39m[0m[90m clears child document modified when setting map path underneath single nested (gh-10295)[0m
2025-04-09T19:13:19.1916179Z   [32m  [32mâœ”[39m[0m[90m avoids infinite recursion when setting single nested subdoc to array (gh-10351)[0m
2025-04-09T19:13:19.1990383Z   [32m  [32mâœ”[39m[0m[90m skips recursive merging (gh-9121)[0m
2025-04-09T19:13:19.2051986Z   [32m  [32mâœ”[39m[0m[90m does not pull non-schema paths from parent documents into nested paths (gh-10449)[0m
2025-04-09T19:13:19.2263911Z   [32m  [32mâœ”[39m[0m[90m sets properties in the order they are defined in the schema (gh-4665)[0m
2025-04-09T19:13:19.2534607Z   [32m  [32mâœ”[39m[0m[90m depopulate all should depopulate nested array population (gh-10592)[0m
2025-04-09T19:13:19.2711853Z   [32m  [32mâœ”[39m[0m[90m should allow dashes in the path name (gh-10677)[0m
2025-04-09T19:13:19.2778737Z   [32m  [32mâœ”[39m[0m[90m inits non-schema values if strict is false (gh-10828)[0m
2025-04-09T19:13:19.2897889Z   [32m  [32mâœ”[39m[0m[90m avoids depopulating when setting array of subdocs from different doc (gh-10819)[0m
2025-04-09T19:13:19.3142910Z   [32m  [32mâœ”[39m[0m[90m allows validating doc again if pre validate errors out (gh-10830)[0m
2025-04-09T19:13:19.3210637Z   [32m  [32mâœ”[39m[0m[90m ensures that doc.ownerDocument() and doc.parent() by default return this on the root document (gh-10884)[0m
2025-04-09T19:13:19.3364478Z   [32m  [32mâœ”[39m[0m[90m catches errors in `required` functions (gh-10968)[0m
2025-04-09T19:13:19.3574446Z   [32m  [32mâœ”[39m[0m[90m does not allow overwriting schema methods with strict: false (gh-11001)[0m
2025-04-09T19:13:19.3649689Z   [32m  [32mâœ”[39m[0m[90m allows setting nested to instance of document (gh-11011)[0m
2025-04-09T19:13:19.3904659Z   [32m  [32mâœ”[39m[0m[90m cleans modified paths on deeply nested subdocuments (gh-11060)[0m
2025-04-09T19:13:19.4145345Z   [32m  [32mâœ”[39m[0m[90m can manually populate subdocument refs (gh-10856)[0m
2025-04-09T19:13:19.4369257Z   [32m  [32mâœ”[39m[0m[90m can manually populate subdocument refs in `create()` (gh-10856)[0m
2025-04-09T19:13:19.4604255Z   [32m  [32mâœ”[39m[0m[90m populating subdocument refs underneath maps throws (gh-12494) (gh-10856)[0m
2025-04-09T19:13:19.4788492Z   [32m  [32mâœ”[39m[0m[90m handles save with undefined nested doc under subdoc (gh-11110)[0m
2025-04-09T19:13:19.4962533Z   [32m  [32mâœ”[39m[0m[90m correctly handles modifying array subdoc after setting array subdoc to same value (gh-11172)[0m
2025-04-09T19:13:19.5028921Z   [32m  [32mâœ”[39m[0m[90m handles `String` with `type` (gh-11199)[0m
2025-04-09T19:13:19.5367588Z   [32m  [32mâœ”[39m[0m[90m applies subdocument defaults when projecting dotted subdocument fields[0m
2025-04-09T19:13:19.5556861Z   [32m  [32mâœ”[39m[0m[90m handles initing nested properties in non-strict documents (gh-11309)[0m
2025-04-09T19:13:19.5737385Z   [32m  [32mâœ”[39m[0m[90m saves changes when setting a nested path to itself (gh-11395)[0m
2025-04-09T19:13:19.5802276Z   [32m  [32mâœ”[39m[0m[90m avoids setting nested properties on top-level document when init-ing with strict: false (gh-11526) (gh-11309)[0m
2025-04-09T19:13:19.6044452Z   [32m  [32mâœ”[39m[0m[90m handles deeply nested subdocuments when getting paths to validate (gh-11501)[0m
2025-04-09T19:13:19.6119642Z   [32m  [32mâœ”[39m[0m[90m handles casting array of spread documents (gh-11522)[0m
2025-04-09T19:13:19.6340995Z   [32m  [32mâœ”[39m[0m[90m avoids setting modified on subdocument defaults (gh-11528)[0m
2025-04-09T19:13:19.6525872Z   [32m  [32mâœ”[39m[0m[90m works when passing dot notation to mixed property (gh-1946)[0m
2025-04-09T19:13:19.6788347Z   [32m  [32mâœ”[39m[0m[90m correctly validates deeply nested document arrays (gh-11564)[0m
2025-04-09T19:13:19.6984676Z   [32m  [32mâœ”[39m[0m[90m reruns validation when modifying a document array path under a nested path after save (gh-11672)[0m
2025-04-09T19:13:19.7174458Z   [32m  [32mâœ”[39m[0m[90m avoids setting nested paths to null when they are set to `undefined` (gh-11723)[0m
2025-04-09T19:13:19.7370612Z   [32m  [32mâœ”[39m[0m[90m cleans modified subpaths when setting nested path under array to null when subpaths are modified (gh-11764)[0m
2025-04-09T19:13:19.7643109Z   [32m  [32mâœ”[39m[0m[90m avoids manually populating document that is manually populated in another doc with different unpopulatedValue (gh-11442) (gh-11008)[0m
2025-04-09T19:13:19.7719067Z   [32m  [32mâœ”[39m[0m[90m $getAllSubdocs gets document arrays underneath a nested path (gh-11917)[0m
2025-04-09T19:13:19.7828438Z   [32m  [32mâœ”[39m[0m[90m handles validation errors on deeply nested subdocuments underneath a nested path (gh-12021)[0m
2025-04-09T19:13:19.8007273Z   [32m  [32mâœ”[39m[0m[90m supports virtuals named `isValid` (gh-12124) (gh-6262)[0m
2025-04-09T19:13:19.8168541Z   [32m  [32mâœ”[39m[0m[90m handles maps when applying defaults to nested paths (gh-12220)[0m
2025-04-09T19:13:19.8309045Z   [32m  [32mâœ”[39m[0m[90m correct context for default functions in subdocuments with init (gh-12328)[0m
2025-04-09T19:13:19.8557864Z   [32m  [32mâœ”[39m[0m[90m applies defaults to pushed subdocs after initing document (gh-12515)[0m
2025-04-09T19:13:19.8735806Z   [32m  [32mâœ”[39m[0m[90m If the field does not exist, $inc should create it and set is value to the specified one (gh-12435)[0m
2025-04-09T19:13:19.8911740Z   [32m  [32mâœ”[39m[0m[90m avoids overwriting array if saving with no changes with array deselected (gh-12414)[0m
2025-04-09T19:13:19.9094691Z   [32m  [32mâœ”[39m[0m[90m $clone() (gh-11849)[0m
2025-04-09T19:13:19.9312151Z   [32m  [32mâœ”[39m[0m[90m $clone() with single nested and doc array (gh-14353) (gh-11849)[0m
2025-04-09T19:13:19.9473295Z   [32m  [32mâœ”[39m[0m[90m can create document with document array and top-level key named `schema` (gh-12480)[0m
2025-04-09T19:13:19.9689632Z   [32m  [32mâœ”[39m[0m[90m handles setting array to itself after saving and pushing a new value (gh-12656)[0m
2025-04-09T19:13:19.9871149Z   [32m  [32mâœ”[39m[0m[90m should not trigger isModified when setting a nested boolean to the same value as previously  (gh-12992)[0m
2025-04-09T19:13:20.0037582Z   [32m  [32mâœ”[39m[0m[90m saves single nested subdoc defaults (gh-12905)[0m
2025-04-09T19:13:20.0105339Z   [32m  [32mâœ”[39m[0m[90m $shift() triggers $pop[0m
2025-04-09T19:13:20.0172390Z   [32m  [32mâœ”[39m[0m[90m avoids setting array default if document array projected out by sibling projection (gh-13003)[0m
2025-04-09T19:13:20.0392872Z   [32m  [32mâœ”[39m[0m[90m avoids overwriting array with sibling projection (gh-13043)[0m
2025-04-09T19:13:20.0560670Z   [32m  [32mâœ”[39m[0m[90m can set() from top-level on nested schema with strict: false (gh-13327)[0m
2025-04-09T19:13:20.0728746Z   [32m  [32mâœ”[39m[0m[90m can set() from top-level on path underneath map of mixed (gh-13327)[0m
2025-04-09T19:13:20.0890457Z   [32m  [32mâœ”[39m[0m[90m should allow storing keys with dots in name in mixed under nested (gh-13530)[0m
2025-04-09T19:13:20.1054025Z   [32m  [32mâœ”[39m[0m[90m cleans up all array subdocs modified state on save (gh-13582)[0m
2025-04-09T19:13:20.1272619Z   [32m  [32mâœ”[39m[0m[90m cleans up all nested subdocs modified state on save (gh-13609)[0m
2025-04-09T19:13:20.1464655Z   [32m  [32mâœ”[39m[0m[90m avoids prototype pollution on init[0m
2025-04-09T19:13:20.1632263Z   [32m  [32mâœ”[39m[0m[90m does not modify array when calling getters (gh-13748)[0m
2025-04-09T19:13:20.1790083Z   [32m  [32mâœ”[39m[0m[90m sets defaults on subdocs with subdoc projection (gh-13720)[0m
2025-04-09T19:13:20.1958331Z   [32m  [32mâœ”[39m[0m[90m handles bigint (gh-13791)[0m
2025-04-09T19:13:20.2144714Z   [32m  [32mâœ”[39m[0m[90m should allow null values in list in self assignment (gh-13859)[0m
2025-04-09T19:13:20.2333814Z   [32m  [32mâœ”[39m[0m[90m bulkSave() picks up changes in pre("save") middleware (gh-13799)[0m
2025-04-09T19:13:20.2497756Z   [32m  [32mâœ”[39m[0m[90m bulkSave() allows skipping validation with validateBeforeSave (gh-15156)[0m
2025-04-09T19:13:20.2570514Z   [32m  [32mâœ”[39m[0m[90m handles default embedded discriminator values (gh-13835)[0m
2025-04-09T19:13:20.2771936Z   [32m  [32mâœ”[39m[0m[90m avoids saving changes to deselected paths (gh-13145) (gh-13062)[0m
2025-04-09T19:13:20.2982679Z   [32m  [32mâœ”[39m[0m[90m fires pre validate hooks on 4 level single nested subdocs (gh-13876)[0m
2025-04-09T19:13:20.3217193Z   [32m  [32mâœ”[39m[0m[90m fires pre validate hooks on 5 level deep single nested subdoc when modifying after save() (gh-14591)[0m
2025-04-09T19:13:20.3281673Z   [32m  [32mâœ”[39m[0m[90m returns constructor if using $model() with no args (gh-13878)[0m
2025-04-09T19:13:20.3508146Z   [32m  [32mâœ”[39m[0m[90m avoids creating separate subpaths entry for every element in array (gh-13874)[0m
2025-04-09T19:13:20.3690579Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators defined using Schema.prototype.discriminator (gh-13898)[0m
2025-04-09T19:13:20.3870640Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators defined using Schema.prototype.discriminator after defining schema (gh-14109) (gh-13898)[0m
2025-04-09T19:13:20.4043955Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators on nested path defined using Schema.prototype.discriminator (gh-14109) (gh-13898)[0m
2025-04-09T19:13:20.4208145Z   [32m  [32mâœ”[39m[0m[90m handles middleware on embedded discriminators on nested path defined using Schema.prototype.discriminator (gh-14961)[0m
2025-04-09T19:13:20.4440040Z   [32m  [32mâœ”[39m[0m[90m handles reusing schema with embedded discriminators defined using Schema.prototype.discriminator (gh-14162)[0m
2025-04-09T19:13:20.4629385Z   [32m  [32mâœ”[39m[0m[90m handles embedded recursive discriminators on nested path defined using Schema.prototype.discriminator (gh-14245)[0m
2025-04-09T19:13:20.4800072Z   [32m  [32mâœ”[39m[0m[90m can use `collection` as schema name (gh-13956)[0m
2025-04-09T19:13:20.4960394Z   [32m  [32mâœ”[39m[0m[90m avoids adding nested paths to markModified() output if adding a new field (gh-14024)[0m
2025-04-09T19:13:20.5136621Z   [32m  [32mâœ”[39m[0m[90m should allow null values in list in self assignment (gh-14172) (gh-13859)[0m
2025-04-09T19:13:20.5313094Z   [32m  [32mâœ”[39m[0m[90m avoids overwriting dotted paths in mixed path underneath nested path (gh-14178)[0m
2025-04-09T19:13:20.5378070Z   [32m  [32mâœ”[39m[0m[90m handles setting nested path to null (gh-14205)[0m
2025-04-09T19:13:20.5489672Z   [32m  [32mâœ”[39m[0m[90m handles setting nested path to undefined (gh-14205)[0m
2025-04-09T19:13:20.5687230Z   [32m  [32mâœ”[39m[0m[90m handles setting nested path to spread doc with extra properties (gh-14269)[0m
2025-04-09T19:13:20.5766675Z   [32m  [32mâœ”[39m[0m[90m includes virtuals in doc array toString() output if virtuals enabled on toObject (gh-14315)[0m
2025-04-09T19:13:20.6022774Z   [32m  [32mâœ”[39m[0m[90m minimizes when updating existing documents (gh-13782)[0m
2025-04-09T19:13:20.6205475Z   [32m  [32mâœ”[39m[0m[90m saves when setting subdocument to empty object (gh-14420) (gh-13782)[0m
2025-04-09T19:13:20.6385431Z   [32m  [32mâœ”[39m[0m[90m validate supports validateAllPaths[0m
2025-04-09T19:13:20.6574132Z   [32m  [32mâœ”[39m[0m[90m validateSync() supports validateAllPaths[0m
2025-04-09T19:13:20.6762690Z   [32m  [32mâœ”[39m[0m[90m minimize unsets property rather than setting to null (gh-14445)[0m
2025-04-09T19:13:20.7054796Z   [32m  [32mâœ”[39m[0m[90m avoids depopulating populated subdocs underneath document arrays when copying to another document (gh-14418)[0m
2025-04-09T19:13:20.7271882Z   [32m  [32mâœ”[39m[0m[90m handles virtuals that are stored as objects but getter returns string with toJSON (gh-14446)[0m
2025-04-09T19:13:20.7351383Z   [32m  [32mâœ”[39m[0m[90m isDirectModified on paths underneath direct modified subdoc (gh-14502)[0m
2025-04-09T19:13:20.7589242Z   [32m  [32mâœ”[39m[0m[90m avoids leaving subdoc _id in default state when setting subdocument to same value (gh-14722)[0m
2025-04-09T19:13:20.7772993Z   [32m  [32mâœ”[39m[0m[90m $clearModifiedPaths (gh-14268)[0m
2025-04-09T19:13:20.7957325Z   [32m  [32mâœ”[39m[0m[90m $createModifiedPathsSnapshot and $restoreModifiedPathsSnapshot (gh-14268)[0m
2025-04-09T19:13:20.8143259Z   [32m  [32mâœ”[39m[0m[90m post deleteOne hook (gh-9885)[0m
2025-04-09T19:13:20.8218934Z   [32m  [32mâœ”[39m[0m[90m applies virtuals to subschemas if top-level schema has virtuals: true (gh-14771)[0m
2025-04-09T19:13:20.8327203Z   [32m  [32mâœ”[39m[0m[90m calls required with correct context on single nested properties (gh-14788)[0m
2025-04-09T19:13:20.8538169Z   [32m  [32mâœ”[39m[0m[90m applies toObject() getters to 3 level deep subdocuments (gh-14840) (gh-14835)[0m
2025-04-09T19:13:21.1231175Z   [32m  [32mâœ”[39m[0m[90m handles inserting and saving large document with 10-level deep subdocs (gh-14897)[0m[31m (262ms)[0m
2025-04-09T19:13:21.1431756Z   [32m  [32mâœ”[39m[0m[90m avoids flattening objectids on insertMany (gh-14935)[0m
2025-04-09T19:13:21.1586780Z   [32m  [32mâœ”[39m[0m[90m handles buffers stored as EJSON POJO (gh-14911)[0m
2025-04-09T19:13:21.1773639Z   [32m  [32mâœ”[39m[0m[90m clears modified subpaths when setting deeply nested subdoc to null (gh-14952)[0m
2025-04-09T19:13:21.1947312Z   [32m  [32mâœ”[39m[0m[90m handles custom error message for duplicate key errors (gh-12844)[0m
2025-04-09T19:13:21.2017186Z   [32m  [32mâœ”[39m[0m[90m supports global transforms per schematype (gh-15084)[0m
2025-04-09T19:13:21.2319702Z   [32m  [32mâœ”[39m[0m[90m supports schemaFieldsOnly option for toObject() (gh-15258)[0m
2025-04-09T19:13:21.2489384Z   [32m  [32mâœ”[39m[0m[90m supports schemaFieldsOnly on nested paths, subdocuments, and arrays (gh-15258)[0m
2025-04-09T19:13:21.8721932Z   [32m  [32mâœ”[39m[0m[90m handles undoReset() on deep recursive subdocuments (gh-15255)[0m[31m (617ms)[0m
2025-04-09T19:13:21.8767601Z [0m    constructor[0m
2025-04-09T19:13:21.8815088Z     [32m  [32mâœ”[39m[0m[90m supports passing in schema directly (gh-8237)[0m
2025-04-09T19:13:21.8872179Z [0m    deleteOne[0m
2025-04-09T19:13:21.9033589Z     [32m  [32mâœ”[39m[0m[90m deletes the document[0m
2025-04-09T19:13:21.9093985Z [0m    updateOne[0m
2025-04-09T19:13:21.9229247Z     [32m  [32mâœ”[39m[0m[90m updates the document[0m
2025-04-09T19:13:21.9300745Z     [32m  [32mâœ”[39m[0m[90m returns a query[0m
2025-04-09T19:13:21.9483767Z     [32m  [32mâœ”[39m[0m[90m middleware (gh-8262)[0m
2025-04-09T19:13:21.9545112Z [0m    replaceOne[0m
2025-04-09T19:13:21.9704031Z     [32m  [32mâœ”[39m[0m[90m replaces the document[0m
2025-04-09T19:13:21.9763787Z [0m    shortcut getters[0m
2025-04-09T19:13:21.9810302Z     [32m  [32mâœ”[39m[0m[90m return undefined for properties with a null/undefined parent object (gh-1326)[0m
2025-04-09T19:13:21.9895013Z     [32m  [32mâœ”[39m[0m[90m work[0m
2025-04-09T19:13:21.9951933Z [0m    toObject[0m
2025-04-09T19:13:22.0084049Z     [32m  [32mâœ”[39m[0m[90m does not apply toObject functions of subdocuments to root document[0m
2025-04-09T19:13:22.0177088Z     [32m  [32mâœ”[39m[0m[90m handles child schema transforms[0m
2025-04-09T19:13:22.0444584Z     [32m  [32mâœ”[39m[0m[90m doesnt clobber child schema options when called with no params (gh-2035)[0m
2025-04-09T19:13:22.0537091Z     [32m  [32mâœ”[39m[0m[90m respects child schemas minimize (gh-9405)[0m
2025-04-09T19:13:22.0777822Z     [32m  [32mâœ”[39m[0m[90m minimizes single nested subdocs (gh-11247)[0m
2025-04-09T19:13:22.0965415Z     [32m  [32mâœ”[39m[0m[90m does not minimize single nested subdocs if they are required (gh-14058) (gh-11247)[0m
2025-04-09T19:13:22.1083256Z     [32m  [32mâœ”[39m[0m[90m should propagate toObject to implicitly created schemas (gh-13599) (gh-13325)[0m
2025-04-09T19:13:22.1179544Z [0m    toJSON[0m
2025-04-09T19:13:22.1234108Z     [32m  [32mâœ”[39m[0m[90m toJSON options[0m
2025-04-09T19:13:22.1317243Z     [32m  [32mâœ”[39m[0m[90m jsonifying an object[0m
2025-04-09T19:13:22.1615681Z     [32m  [32mâœ”[39m[0m[90m jsonifying an object's populated items works (gh-1376)[0m
2025-04-09T19:13:22.1813129Z     [32m  [32mâœ”[39m[0m[90m jsonifying with undefined path (gh-11922)[0m
2025-04-09T19:13:22.1904394Z     [32m  [32mâœ”[39m[0m[90m should propagate toJSON to implicitly created schemas (gh-13599) (gh-13325)[0m
2025-04-09T19:13:22.1991664Z [0m    inspect[0m
2025-04-09T19:13:22.2115058Z     [32m  [32mâœ”[39m[0m[90m inspect inherits schema options (gh-4001)[0m
2025-04-09T19:13:22.2374725Z     [32m  [32mâœ”[39m[0m[90m does not apply transform to populated docs (gh-4213)[0m
2025-04-09T19:13:22.2471558Z     [32m  [32mâœ”[39m[0m[90m handles infinite recursion (gh-11756)[0m
2025-04-09T19:13:22.2778157Z     [32m  [32mâœ”[39m[0m[90m populate on nested path (gh-5703)[0m
2025-04-09T19:13:22.2839652Z [0m    #update[0m
2025-04-09T19:13:22.2850527Z     [36m  - returns a Query[0m
2025-04-09T19:13:22.2851123Z     [36m  - calling update on document should relay to its model (gh-794)[0m
2025-04-09T19:13:22.2861539Z [0m    Errors[0m
2025-04-09T19:13:22.2907104Z     [32m  [32mâœ”[39m[0m[90m MongooseErrors should be instances of Error (gh-209)[0m
2025-04-09T19:13:22.2986366Z     [32m  [32mâœ”[39m[0m[90m ValidationErrors should be instances of Error[0m
2025-04-09T19:13:22.3042664Z [0m    #validate[0m
2025-04-09T19:13:22.3206264Z     [32m  [32mâœ”[39m[0m[90m works (gh-891)[0m
2025-04-09T19:13:22.3299491Z     [32m  [32mâœ”[39m[0m[90m can return a promise[0m
2025-04-09T19:13:22.3429466Z     [32m  [32mâœ”[39m[0m[90m doesnt have stale cast errors (gh-2766)[0m
2025-04-09T19:13:22.3616764Z     [32m  [32mâœ”[39m[0m[90m cast errors persist across validate() calls (gh-2766)[0m
2025-04-09T19:13:22.3705730Z     [32m  [32mâœ”[39m[0m[90m returns a promise when there are no validators[0m
2025-04-09T19:13:22.3914884Z     [32m  [32mâœ”[39m[0m[90m validator should run only once gh-1743[0m
2025-04-09T19:13:22.4139011Z     [32m  [32mâœ”[39m[0m[90m validator should run only once per sub-doc gh-1743[0m
2025-04-09T19:13:22.4182797Z [0m      works on arrays[0m
2025-04-09T19:13:22.4346541Z       [32m  [32mâœ”[39m[0m[90m with required[0m
2025-04-09T19:13:22.4557473Z       [32m  [32mâœ”[39m[0m[90m with custom validator[0m
2025-04-09T19:13:22.4763018Z       [32m  [32mâœ”[39m[0m[90m with both required + custom validator[0m
2025-04-09T19:13:22.4844887Z [0m    #equals[0m
2025-04-09T19:13:22.4855823Z [0m      should work[0m
2025-04-09T19:13:22.4932333Z       [32m  [32mâœ”[39m[0m[90m with string _ids[0m
2025-04-09T19:13:22.5157154Z       [32m  [32mâœ”[39m[0m[90m with number _ids[0m
2025-04-09T19:13:22.5258664Z       [32m  [32mâœ”[39m[0m[90m with ObjectId _ids[0m
2025-04-09T19:13:22.5360873Z       [32m  [32mâœ”[39m[0m[90m with Buffer _ids[0m
2025-04-09T19:13:22.5462986Z       [32m  [32mâœ”[39m[0m[90m with _id disabled (gh-1687)[0m
2025-04-09T19:13:22.5541013Z [0m    setter[0m
2025-04-09T19:13:22.5589688Z     [32m  [32mâœ”[39m[0m[90m works with undefined (gh-1892)[0m
2025-04-09T19:13:22.5678649Z     [32m  [32mâœ”[39m[0m[90m passes priorVal (gh-8629)[0m
2025-04-09T19:13:22.5762818Z [0m      order[0m
2025-04-09T19:13:22.5818741Z       [32m  [32mâœ”[39m[0m[90m is applied correctly[0m
2025-04-09T19:13:22.5887134Z [0m      on nested paths[0m
2025-04-09T19:13:22.5897965Z [0m        using set(path, object)[0m
2025-04-09T19:13:22.5965523Z         [32m  [32mâœ”[39m[0m[90m overwrites the entire object[0m
2025-04-09T19:13:22.6095586Z         [32m  [32mâœ”[39m[0m[90m allows positional syntax on mixed nested paths (gh-6738)[0m
2025-04-09T19:13:22.6237101Z         [32m  [32mâœ”[39m[0m[90m gh-1954[0m
2025-04-09T19:13:22.6323529Z [0m        when overwriting with a document instance[0m
2025-04-09T19:13:22.6391917Z         [32m  [32mâœ”[39m[0m[90m does not cause StackOverflows (gh-1234)[0m
2025-04-09T19:13:22.6492760Z [0m    virtual[0m
2025-04-09T19:13:22.6544520Z     [32m  [32mâœ”[39m[0m[90m passes doc as third param for arrow functions (gh-4143)[0m
2025-04-09T19:13:22.6616776Z [0m      setter[0m
2025-04-09T19:13:22.6676597Z       [32m  [32mâœ”[39m[0m[90m works with objects[0m
2025-04-09T19:13:22.6803225Z       [32m  [32mâœ”[39m[0m[90m works with arrays[0m
2025-04-09T19:13:22.6924051Z       [32m  [32mâœ”[39m[0m[90m works with numbers[0m
2025-04-09T19:13:22.7041975Z       [32m  [32mâœ”[39m[0m[90m works with strings[0m
2025-04-09T19:13:22.7136980Z [0m    gh-2082[0m
2025-04-09T19:13:22.7319146Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:22.7371395Z [0m    gh-1933[0m
2025-04-09T19:13:22.7524250Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:22.7586518Z [0m    gh-1638[0m
2025-04-09T19:13:22.7797118Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:22.7859768Z [0m    gh-2434[0m
2025-04-09T19:13:22.8016576Z     [32m  [32mâœ”[39m[0m[90m will save the new value[0m
2025-04-09T19:13:22.8078432Z [0m    gh-8371[0m
2025-04-09T19:13:22.8283691Z     [32m  [32mâœ”[39m[0m[90m setting isNew to true makes save tries to insert a new document (gh-8371)[0m
2025-04-09T19:13:22.8525077Z     [32m  [32mâœ”[39m[0m[90m setting isNew to true throws an error when a document already exists (gh-8371)[0m
2025-04-09T19:13:22.8755533Z     [32m  [32mâœ”[39m[0m[90m saving a document with no changes, throws an error when document is not found[0m
2025-04-09T19:13:22.9005360Z     [32m  [32mâœ”[39m[0m[90m saving a document when version bump required, throws a VersionError when document is not found (gh-10974)[0m
2025-04-09T19:13:22.9256099Z     [32m  [32mâœ”[39m[0m[90m saving a document with changes, throws an error when document is not found[0m
2025-04-09T19:13:22.9318046Z [0m    bug fixes[0m
2025-04-09T19:13:22.9538647Z     [32m  [32mâœ”[39m[0m[90m applies toJSON transform correctly for populated docs (gh-2910) (gh-2990)[0m
2025-04-09T19:13:22.9743133Z     [32m  [32mâœ”[39m[0m[90m single nested schema transform with save() (gh-5807)[0m
2025-04-09T19:13:22.9834070Z     [32m  [32mâœ”[39m[0m[90m setters firing with objects on real paths (gh-2943)[0m
2025-04-09T19:13:22.9948210Z     [32m  [32mâœ”[39m[0m[90m set data from subdoc keys (gh-3346)[0m
2025-04-09T19:13:23.0066865Z     [32m  [32mâœ”[39m[0m[90m doesnt attempt to cast generic objects as strings (gh-3030)[0m
2025-04-09T19:13:23.0304867Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas 1 (gh-2689)[0m
2025-04-09T19:13:23.0399796Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas with validation (gh-2689)[0m
2025-04-09T19:13:23.0515340Z     [32m  [32mâœ”[39m[0m[90m single embedded parent() (gh-5134)[0m
2025-04-09T19:13:23.0753387Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas with markmodified (gh-2689)[0m
2025-04-09T19:13:23.1052334Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas + update validators (gh-2689)[0m
2025-04-09T19:13:23.1256075Z     [32m  [32mâœ”[39m[0m[90m single embedded schema update validators ignore _id (gh-6269)[0m
2025-04-09T19:13:23.1305501Z [0m      gh-2782[0m
2025-04-09T19:13:23.1368207Z       [32m  [32mâœ”[39m[0m[90m should set data from a sub doc[0m
2025-04-09T19:13:23.1499715Z [0m    error processing (gh-2284)[0m
2025-04-09T19:13:23.1553220Z     [32m  [32mâœ”[39m[0m[90m save errors[0m
2025-04-09T19:13:23.1666221Z     [32m  [32mâœ”[39m[0m[90m validate errors (gh-4885)[0m
2025-04-09T19:13:23.1845657Z     [32m  [32mâœ”[39m[0m[90m does not filter validation on unmodified paths when validateModifiedOnly not set (gh-7421)[0m
2025-04-09T19:13:23.2026741Z     [32m  [32mâœ”[39m[0m[90m filters out validation on unmodified paths when validateModifiedOnly set (gh-7421) (gh-9963)[0m
2025-04-09T19:13:23.2196200Z     [32m  [32mâœ”[39m[0m[90m does not filter validation on modified paths when validateModifiedOnly set (gh-7421)[0m
2025-04-09T19:13:23.2368835Z     [32m  [32mâœ”[39m[0m[90m validateModifiedOnly with pre existing validation error (gh-8091)[0m
2025-04-09T19:13:23.2525661Z     [32m  [32mâœ”[39m[0m[90m should use schema-level validateModifiedOnly option if not in options[0m
2025-04-09T19:13:23.2699639Z     [32m  [32mâœ”[39m[0m[90m handles non-errors[0m
2025-04-09T19:13:23.2900922Z     [32m  [32mâœ”[39m[0m[90m fully validates modified subdocs (gh-14677)[0m
2025-04-09T19:13:23.3104644Z     [32m  [32mâœ”[39m[0m[90m fully validates modified single nested subdocs (gh-14677)[0m
2025-04-09T19:13:23.3168686Z [0m    bug fixes[0m
2025-04-09T19:13:23.3495231Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas with populate (gh-3501)[0m
2025-04-09T19:13:23.3582404Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas with methods (gh-3534)[0m
2025-04-09T19:13:23.3869338Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas with models (gh-3535)[0m
2025-04-09T19:13:23.3959168Z     [32m  [32mâœ”[39m[0m[90m single embedded schemas with indexes (gh-3594)[0m
2025-04-09T19:13:23.4151381Z     [32m  [32mâœ”[39m[0m[90m removing single embedded docs (gh-3596)[0m
2025-04-09T19:13:23.4331407Z     [32m  [32mâœ”[39m[0m[90m setting single embedded docs (gh-3601)[0m
2025-04-09T19:13:23.4522526Z     [32m  [32mâœ”[39m[0m[90m single embedded docs init obeys strict mode (gh-3642)[0m
2025-04-09T19:13:23.4728028Z     [32m  [32mâœ”[39m[0m[90m single embedded docs post hooks (gh-3679)[0m
2025-04-09T19:13:23.4925797Z     [32m  [32mâœ”[39m[0m[90m single embedded docs .set() (gh-3686)[0m
2025-04-09T19:13:23.5118152Z     [32m  [32mâœ”[39m[0m[90m single embedded docs with arrays pre hooks (gh-3680)[0m
2025-04-09T19:13:23.5216217Z     [32m  [32mâœ”[39m[0m[90m nested single embedded doc validation (gh-3702)[0m
2025-04-09T19:13:23.5326359Z     [32m  [32mâœ”[39m[0m[90m handles virtuals with dots correctly (gh-3618)[0m
2025-04-09T19:13:23.5565713Z     [32m  [32mâœ”[39m[0m[90m handles pushing with numeric keys (gh-3623)[0m
2025-04-09T19:13:23.5792333Z     [32m  [32mâœ”[39m[0m[90m handles 0 for numeric subdoc ids (gh-3776)[0m
2025-04-09T19:13:23.5889597Z     [32m  [32mâœ”[39m[0m[90m handles conflicting names (gh-3867)[0m
2025-04-09T19:13:23.6169558Z     [32m  [32mâœ”[39m[0m[90m populate with lean (gh-3873)[0m
2025-04-09T19:13:23.6379136Z     [32m  [32mâœ”[39m[0m[90m init single nested subdoc with select (gh-3880)[0m
2025-04-09T19:13:23.6567112Z     [32m  [32mâœ”[39m[0m[90m single nested subdoc isModified() (gh-3910)[0m
2025-04-09T19:13:23.6748755Z     [32m  [32mâœ”[39m[0m[90m pre and post as schema keys (gh-3902)[0m
2025-04-09T19:13:23.7010077Z     [32m  [32mâœ”[39m[0m[90m manual population and isNew (gh-3982)[0m
2025-04-09T19:13:23.7295361Z     [32m  [32mâœ”[39m[0m[90m manual populattion with ref function (gh-15138)[0m
2025-04-09T19:13:23.7541569Z     [32m  [32mâœ”[39m[0m[90m manual population with refPath (gh-7070)[0m
2025-04-09T19:13:23.7769924Z     [32m  [32mâœ”[39m[0m[90m doesnt skipId for single nested subdocs (gh-4008)[0m
2025-04-09T19:13:23.7946786Z     [32m  [32mâœ”[39m[0m[90m single embedded docs with $near (gh-4014)[0m
2025-04-09T19:13:23.8033995Z     [32m  [32mâœ”[39m[0m[90m skip validation if required returns false (gh-4094)[0m
2025-04-09T19:13:23.8248718Z     [32m  [32mâœ”[39m[0m[90m ability to overwrite array default (gh-4109)[0m
2025-04-09T19:13:23.8446341Z     [32m  [32mâœ”[39m[0m[90m can set array default to null (gh-14717)[0m
2025-04-09T19:13:23.8651957Z     [32m  [32mâœ”[39m[0m[90m validation works when setting array index (gh-3816)[0m
2025-04-09T19:13:23.8862285Z     [32m  [32mâœ”[39m[0m[90m validateSync works when setting array index nested (gh-5389)[0m
2025-04-09T19:13:23.8951597Z     [32m  [32mâœ”[39m[0m[90m single embedded with defaults have $parent (gh-4115)[0m
2025-04-09T19:13:23.9178454Z     [32m  [32mâœ”[39m[0m[90m removing parent doc calls deleteOne hooks on subdocs (gh-2348) (gh-4566)[0m
2025-04-09T19:13:23.9369337Z     [32m  [32mâœ”[39m[0m[90m set() empty obj unmodifies subpaths (gh-4182)[0m
2025-04-09T19:13:23.9553872Z     [32m  [32mâœ”[39m[0m[90m clears subpaths when removing single nested (gh-4216)[0m
2025-04-09T19:13:23.9746708Z     [32m  [32mâœ”[39m[0m[90m setting path to empty object works (gh-4218)[0m
2025-04-09T19:13:23.9940975Z     [32m  [32mâœ”[39m[0m[90m setting path to object with strict and no paths in the schema (gh-6436) (gh-4218)[0m
2025-04-09T19:13:24.0028757Z     [32m  [32mâœ”[39m[0m[90m minimize + empty object (gh-4337)[0m
2025-04-09T19:13:24.0243149Z     [32m  [32mâœ”[39m[0m[90m directModifiedPaths() (gh-7373)[0m
2025-04-09T19:13:24.0427312Z     [32m  [32mâœ”[39m[0m[90m single nested isNew (gh-4369)[0m
2025-04-09T19:13:24.0519758Z     [32m  [32mâœ”[39m[0m[90m deep default array values (gh-4540)[0m
2025-04-09T19:13:24.0759072Z     [32m  [32mâœ”[39m[0m[90m default values with subdoc array (gh-4390)[0m
2025-04-09T19:13:24.0858701Z     [32m  [32mâœ”[39m[0m[90m handles invalid dates (gh-4404)[0m
2025-04-09T19:13:24.0981828Z     [32m  [32mâœ”[39m[0m[90m setting array subpath (gh-4472)[0m
2025-04-09T19:13:24.1231137Z     [32m  [32mâœ”[39m[0m[90m ignore paths (gh-4480)[0m
2025-04-09T19:13:24.1461258Z     [32m  [32mâœ”[39m[0m[90m ignore subdocs paths (gh-4480) (gh-6152)[0m
2025-04-09T19:13:24.1660141Z     [32m  [32mâœ”[39m[0m[90m composite _ids (gh-4542)[0m
2025-04-09T19:13:24.1749867Z     [32m  [32mâœ”[39m[0m[90m validateSync with undefined and conditional required (gh-4607)[0m
2025-04-09T19:13:24.1877758Z     [32m  [32mâœ”[39m[0m[90m conditional required on single nested (gh-4663)[0m
2025-04-09T19:13:24.2095965Z     [32m  [32mâœ”[39m[0m[90m setting full path under single nested schema works (gh-4578) (gh-4528)[0m
2025-04-09T19:13:24.2349825Z     [32m  [32mâœ”[39m[0m[90m setting a nested path retains nested modified paths (gh-5206)[0m
2025-04-09T19:13:24.2442811Z     [32m  [32mâœ”[39m[0m[90m toObject() does not depopulate top level (gh-3057)[0m
2025-04-09T19:13:24.2598476Z     [32m  [32mâœ”[39m[0m[90m toObject() respects schema-level depopulate (gh-6313)[0m
2025-04-09T19:13:24.2751793Z     [32m  [32mâœ”[39m[0m[90m single nested doc conditional required (gh-4654)[0m
2025-04-09T19:13:24.2987454Z     [32m  [32mâœ”[39m[0m[90m handles setting single nested schema to equal value (gh-4676)[0m
2025-04-09T19:13:24.3197294Z     [32m  [32mâœ”[39m[0m[90m handles setting single nested doc to null after setting (gh-4766)[0m
2025-04-09T19:13:24.3444321Z     [32m  [32mâœ”[39m[0m[90m buffers with subtypes as ids (gh-4506)[0m
2025-04-09T19:13:24.3545027Z     [32m  [32mâœ”[39m[0m[90m embedded docs dont mark parent as invalid (gh-4681)[0m
2025-04-09T19:13:24.3814940Z     [32m  [32mâœ”[39m[0m[90m should depopulate the shard key when saving (gh-4658)[0m
2025-04-09T19:13:24.3913347Z     [32m  [32mâœ”[39m[0m[90m handles setting virtual subpaths (gh-4716)[0m
2025-04-09T19:13:24.4114789Z     [32m  [32mâœ”[39m[0m[90m handles selected nested elements with defaults (gh-4739) (gh-11376)[0m
2025-04-09T19:13:24.4212938Z     [32m  [32mâœ”[39m[0m[90m handles mark valid in subdocs correctly (gh-4778)[0m
2025-04-09T19:13:24.4418673Z     [32m  [32mâœ”[39m[0m[90m timestamps set to false works (gh-7074)[0m
2025-04-09T19:13:24.4623384Z     [32m  [32mâœ”[39m[0m[90m timestamps with nested paths (gh-5051)[0m
2025-04-09T19:13:24.4714209Z     [32m  [32mâœ”[39m[0m[90m Declaring defaults in your schema with timestamps defined (gh-6024)[0m
2025-04-09T19:13:24.4951210Z     [32m  [32mâœ”[39m[0m[90m supports $where in pre save hook (gh-4004)[0m
2025-04-09T19:13:24.5153622Z     [32m  [32mâœ”[39m[0m[90m toObject() with buffer and minimize (gh-4800)[0m
2025-04-09T19:13:24.5241532Z     [32m  [32mâœ”[39m[0m[90m buffer subtype prop (gh-5530)[0m
2025-04-09T19:13:24.5481293Z     [32m  [32mâœ”[39m[0m[90m runs validate hooks on single nested subdocs if not directly modified (gh-3884)[0m
2025-04-09T19:13:24.5727383Z     [32m  [32mâœ”[39m[0m[90m runs validate hooks on arrays subdocs if not directly modified (gh-5861)[0m
2025-04-09T19:13:24.5920643Z     [32m  [32mâœ”[39m[0m[90m does not run schema type validator on single nested if not direct modified (gh-5885)[0m
2025-04-09T19:13:24.6014258Z     [32m  [32mâœ”[39m[0m[90m runs schema type validator on single nested if parent has default (gh-7493)[0m
2025-04-09T19:13:24.6150520Z     [32m  [32mâœ”[39m[0m[90m does not overwrite when setting nested (gh-4793)[0m
2025-04-09T19:13:24.6340225Z     [32m  [32mâœ”[39m[0m[90m hooks/middleware for custom methods (gh-6385) (gh-7456)[0m
2025-04-09T19:13:24.6455611Z     [32m  [32mâœ”[39m[0m[90m custom methods with promises (gh-6385)[0m
2025-04-09T19:13:24.6555150Z     [32m  [32mâœ”[39m[0m[90m toString() as custom method (gh-6538)[0m
2025-04-09T19:13:24.6674559Z     [32m  [32mâœ”[39m[0m[90m setting to discriminator (gh-4935)[0m
2025-04-09T19:13:24.6944474Z     [32m  [32mâœ”[39m[0m[90m handles errors in sync validators (gh-2185)[0m
2025-04-09T19:13:24.7144397Z     [32m  [32mâœ”[39m[0m[90m allows hook as a schema key (gh-5047)[0m
2025-04-09T19:13:24.7337538Z     [32m  [32mâœ”[39m[0m[90m save errors with callback and promise work (gh-5216)[0m
2025-04-09T19:13:24.7539330Z     [32m  [32mâœ”[39m[0m[90m post hooks on child subdocs run after save (gh-5085)[0m
2025-04-09T19:13:24.7748443Z     [32m  [32mâœ”[39m[0m[90m post hooks on array child subdocs run after save (gh-5085) (gh-6926)[0m
2025-04-09T19:13:24.7837964Z     [32m  [32mâœ”[39m[0m[90m nested docs toObject() clones (gh-5008)[0m
2025-04-09T19:13:24.7956243Z     [32m  [32mâœ”[39m[0m[90m toObject() with null (gh-5143)[0m
2025-04-09T19:13:24.8081253Z     [32m  [32mâœ”[39m[0m[90m handles array subdocs with single nested subdoc default (gh-5162)[0m
2025-04-09T19:13:24.8202538Z     [32m  [32mâœ”[39m[0m[90m iterating through nested doc keys (gh-5078)[0m
2025-04-09T19:13:24.8314819Z     [32m  [32mâœ”[39m[0m[90m deeply nested virtual paths (gh-5250)[0m
2025-04-09T19:13:24.8613760Z     [32m  [32mâœ”[39m[0m[90m nested virtual when populating with parent projected out (gh-7491)[0m
2025-04-09T19:13:24.8719452Z     [32m  [32mâœ”[39m[0m[90m JSON.stringify nested errors (gh-5208)[0m
2025-04-09T19:13:24.8839037Z     [32m  [32mâœ”[39m[0m[90m handles errors in subdoc pre validate (gh-5215)[0m
2025-04-09T19:13:24.8962548Z     [32m  [32mâœ”[39m[0m[90m custom error types (gh-4009)[0m
2025-04-09T19:13:24.9190700Z     [32m  [32mâœ”[39m[0m[90m saving a doc with nested string array (gh-5282)[0m
2025-04-09T19:13:24.9412554Z     [32m  [32mâœ”[39m[0m[90m push() onto a nested doc array (gh-6398)[0m
2025-04-09T19:13:24.9632166Z     [32m  [32mâœ”[39m[0m[90m push() onto a triple nested doc array (gh-6602) (gh-6398)[0m
2025-04-09T19:13:24.9809367Z     [32m  [32mâœ”[39m[0m[90m null _id (gh-5236)[0m
2025-04-09T19:13:24.9903122Z     [32m  [32mâœ”[39m[0m[90m setting populated path with typeKey (gh-5313)[0m
2025-04-09T19:13:25.0191462Z     [32m  [32mâœ”[39m[0m[90m save twice with write concern (gh-5294)[0m
2025-04-09T19:13:25.0398699Z     [32m  [32mâœ”[39m[0m[90m undefined field with conditional required (gh-5296)[0m
2025-04-09T19:13:25.0488768Z     [32m  [32mâœ”[39m[0m[90m dotted virtuals in toObject (gh-5473)[0m
2025-04-09T19:13:25.0735326Z     [32m  [32mâœ”[39m[0m[90m dotted virtuals in toObject (gh-5506)[0m
2025-04-09T19:13:25.0824948Z     [32m  [32mâœ”[39m[0m[90m parent props not in child (gh-5470)[0m
2025-04-09T19:13:25.1061912Z     [32m  [32mâœ”[39m[0m[90m modifying array with existing ids (gh-5523)[0m
2025-04-09T19:13:25.1290526Z     [32m  [32mâœ”[39m[0m[90m consistent setter context for single nested (gh-5363)[0m
2025-04-09T19:13:25.1509811Z     [32m  [32mâœ”[39m[0m[90m deeply nested subdocs and markModified (gh-5406)[0m
2025-04-09T19:13:25.1707713Z     [32m  [32mâœ”[39m[0m[90m single nested subdoc post deleteOne hooks (gh-5388)[0m
2025-04-09T19:13:25.1802296Z     [32m  [32mâœ”[39m[0m[90m push populated doc onto empty array triggers manual population (gh-5504)[0m
2025-04-09T19:13:25.2036053Z     [32m  [32mâœ”[39m[0m[90m single nested conditional required scope (gh-5569)[0m
2025-04-09T19:13:25.2125500Z     [32m  [32mâœ”[39m[0m[90m single nested setters only get called once (gh-5601)[0m
2025-04-09T19:13:25.2250686Z     [32m  [32mâœ”[39m[0m[90m single getters only get called once (gh-7442)[0m
2025-04-09T19:13:25.2359828Z     [32m  [32mâœ”[39m[0m[90m calls subdocument getters if child schema has getters: true (gh-12105)[0m
2025-04-09T19:13:25.2621865Z     [32m  [32mâœ”[39m[0m[90m setting doc array to array of top-level docs works (gh-5632)[0m
2025-04-09T19:13:25.2816613Z     [32m  [32mâœ”[39m[0m[90m Using set as a schema path (gh-1939)[0m
2025-04-09T19:13:25.2907239Z     [32m  [32mâœ”[39m[0m[90m handles array defaults correctly (gh-5780)[0m
2025-04-09T19:13:25.3112661Z     [32m  [32mâœ”[39m[0m[90m sets path to the empty string on save after query (gh-6477)[0m
2025-04-09T19:13:25.3302596Z     [32m  [32mâœ”[39m[0m[90m sets path to the default boolean on save after query (gh-6477)[0m
2025-04-09T19:13:25.3464138Z     [32m  [32mâœ”[39m[0m[90m virtuals with no getters return undefined (gh-6223)[0m
2025-04-09T19:13:25.3577901Z     [32m  [32mâœ”[39m[0m[90m add default getter/setter (gh-6262)[0m
2025-04-09T19:13:25.3692169Z     [32m  [32mâœ”[39m[0m[90m calls array getters (gh-9889)[0m
2025-04-09T19:13:25.3917337Z     [32m  [32mâœ”[39m[0m[90m doesnt call setters when init-ing an array (gh-9889)[0m
2025-04-09T19:13:25.4007603Z     [32m  [32mâœ”[39m[0m[90m nested virtuals + nested toJSON (gh-6294)[0m
2025-04-09T19:13:25.4124719Z     [32m  [32mâœ”[39m[0m[90m Disallows writing to __proto__ and other special properties[0m
2025-04-09T19:13:25.4447534Z     [32m  [32mâœ”[39m[0m[90m save() depopulates pushed arrays (gh-6048)[0m
2025-04-09T19:13:25.4699527Z     [32m  [32mâœ”[39m[0m[90m Handles setting populated path set via `Document#populate()` (gh-7302)[0m
2025-04-09T19:13:25.4902403Z     [32m  [32mâœ”[39m[0m[90m Single nested subdocs using discriminator can be modified (gh-5693)[0m
2025-04-09T19:13:25.5000958Z     [32m  [32mâœ”[39m[0m[90m required function only gets called once (gh-6801)[0m
2025-04-09T19:13:25.5301402Z     [32m  [32mâœ”[39m[0m[90m required function called again after save() (gh-6892)[0m
2025-04-09T19:13:25.5513042Z     [32m  [32mâœ”[39m[0m[90m doc array: set then remove (gh-3511)[0m
2025-04-09T19:13:25.5908124Z     [32m  [32mâœ”[39m[0m[90m doc array: modify then sort (gh-7556)[0m
2025-04-09T19:13:25.6167133Z     [32m  [32mâœ”[39m[0m[90m modifying unselected nested object (gh-5800)[0m
2025-04-09T19:13:25.6392140Z     [32m  [32mâœ”[39m[0m[90m set() underneath embedded discriminator (gh-6482)[0m
2025-04-09T19:13:25.6609839Z     [32m  [32mâœ”[39m[0m[90m set() underneath array embedded discriminator (gh-6526)[0m
2025-04-09T19:13:25.6813437Z     [32m  [32mâœ”[39m[0m[90m consistent context for nested docs (gh-5347)[0m
2025-04-09T19:13:25.6904578Z     [32m  [32mâœ”[39m[0m[90m accessing arrays in setters on initial document creation (gh-6155)[0m
2025-04-09T19:13:25.7018195Z     [32m  [32mâœ”[39m[0m[90m handles 2nd level nested field with null child (gh-6187)[0m
2025-04-09T19:13:25.7254148Z     [32m  [32mâœ”[39m[0m[90m does not call default function on init if value set (gh-6410)[0m
2025-04-09T19:13:25.7349818Z     [32m  [32mâœ”[39m[0m[90m doesnt double-call getters when using get() (gh-6779)[0m
2025-04-09T19:13:25.7467318Z     [32m  [32mâœ”[39m[0m[90m returns doubly nested field in inline sub schema when using get() (gh-6925)[0m
2025-04-09T19:13:25.7670853Z     [32m  [32mâœ”[39m[0m[90m defaults should see correct isNew (gh-3793)[0m
2025-04-09T19:13:25.7900650Z     [32m  [32mâœ”[39m[0m[90m modify multiple subdoc paths (gh-4405)[0m
2025-04-09T19:13:25.8151453Z     [32m  [32mâœ”[39m[0m[90m doesnt try to cast populated embedded docs (gh-6390)[0m
2025-04-09T19:13:25.8202220Z [0m      modifiedPaths[0m
2025-04-09T19:13:25.8377045Z       [32m  [32mâœ”[39m[0m[90m doesnt markModified child paths if parent is modified (gh-4224)[0m
2025-04-09T19:13:25.8489065Z       [32m  [32mâœ”[39m[0m[90m includeChildren option (gh-6134)[0m
2025-04-09T19:13:25.8620336Z       [32m  [32mâœ”[39m[0m[90m includeChildren option with arrays (gh-5904)[0m
2025-04-09T19:13:25.8747373Z       [32m  [32mâœ”[39m[0m[90m 1 level down nested paths get marked modified on initial set (gh-7313) (gh-6944)[0m
2025-04-09T19:13:25.8835532Z [0m      convertToFalse and convertToTrue (gh-6758)[0m
2025-04-09T19:13:25.9011521Z       [32m  [32mâœ”[39m[0m[90m lets you add custom strings that get converted to true/false[0m
2025-04-09T19:13:25.9120779Z       [32m  [32mâœ”[39m[0m[90m allows adding `null` to list of values that convert to false (gh-9223)[0m
2025-04-09T19:13:25.9218528Z [0m    clobbered Array.prototype[0m
2025-04-09T19:13:25.9271512Z     [32m  [32mâœ”[39m[0m[90m handles clobbered Array.prototype.remove (gh-6431)[0m
2025-04-09T19:13:25.9546902Z     [32m  [32mâœ”[39m[0m[90m calls array validators again after save (gh-6818)[0m
2025-04-09T19:13:25.9648846Z     [32m  [32mâœ”[39m[0m[90m set single nested to num throws ObjectExpectedError (gh-6710) (gh-6753)[0m
2025-04-09T19:13:25.9767371Z     [32m  [32mâœ”[39m[0m[90m set array to false throws ObjectExpectedError (gh-7242)[0m
2025-04-09T19:13:25.9848840Z [0m    overwrite() (gh-7830)[0m
2025-04-09T19:13:26.0009679Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:26.0259525Z     [32m  [32mâœ”[39m[0m[90m skips version key[0m
2025-04-09T19:13:26.0720505Z     [32m  [32mâœ”[39m[0m[90m skips discriminator key[0m
2025-04-09T19:13:26.1637136Z     [32m  [32mâœ”[39m[0m[90m overwrites maps (gh-9549)[0m[33m (47ms)[0m
2025-04-09T19:13:26.1703317Z [0m    immutable properties (gh-7671)[0m
2025-04-09T19:13:26.1756991Z     [32m  [32mâœ”[39m[0m[90m SchemaType#immutable()[0m
2025-04-09T19:13:26.2537614Z     [32m  [32mâœ”[39m[0m[90m with save()[0m[33m (49ms)[0m
2025-04-09T19:13:26.2924942Z     [32m  [32mâœ”[39m[0m[90m with update[0m
2025-04-09T19:13:26.3306795Z     [32m  [32mâœ”[39m[0m[90m conditional immutable (gh-8001)[0m
2025-04-09T19:13:26.3773733Z     [32m  [32mâœ”[39m[0m[90m immutable with strict mode (gh-8149)[0m
2025-04-09T19:13:26.3839627Z [0m    Document#getChanges(...) (gh-9096)[0m
2025-04-09T19:13:26.4340101Z     [32m  [32mâœ”[39m[0m[90m returns an empty object when there are no changes[0m[33m (45ms)[0m
2025-04-09T19:13:26.4562245Z     [32m  [32mâœ”[39m[0m[90m returns only the changed paths[0m
2025-04-09T19:13:26.4623873Z [0m    reserved keywords can be used optionally (gh-9010)[0m
2025-04-09T19:13:26.4634571Z [0m      Document#validate(...)[0m
2025-04-09T19:13:26.4695222Z       [32m  [32mâœ”[39m[0m[90m is available as `$validate`[0m
2025-04-09T19:13:26.4821202Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-09T19:13:26.4916581Z [0m      Document#save(...)[0m
2025-04-09T19:13:26.5076838Z       [32m  [32mâœ”[39m[0m[90m is available as `$save`[0m
2025-04-09T19:13:26.5186963Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-09T19:13:26.5276432Z [0m      Document#isModified(...)[0m
2025-04-09T19:13:26.5429250Z       [32m  [32mâœ”[39m[0m[90m is available as `$isModified`[0m
2025-04-09T19:13:26.5544671Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-09T19:13:26.5631684Z [0m      Document#isNew[0m
2025-04-09T19:13:26.5798866Z       [32m  [32mâœ”[39m[0m[90m is available as `$isNew`[0m
2025-04-09T19:13:26.5909242Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-09T19:13:26.5998204Z [0m      Document#populated(...)[0m
2025-04-09T19:13:26.6232273Z       [32m  [32mâœ”[39m[0m[90m is available as `$populated`[0m
2025-04-09T19:13:26.6346651Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-09T19:13:26.6439409Z [0m      Document#toObject(...)[0m
2025-04-09T19:13:26.6595209Z       [32m  [32mâœ”[39m[0m[90m is available as `$toObject`[0m
2025-04-09T19:13:26.6706067Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-09T19:13:26.6794835Z [0m      Document#init(...)[0m
2025-04-09T19:13:26.6854121Z       [32m  [32mâœ”[39m[0m[90m is available as `$init`[0m
2025-04-09T19:13:26.6981706Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-09T19:13:26.7059369Z [0m      Document#collection[0m
2025-04-09T19:13:26.7070540Z       [36m  - is available as `$collection`[0m
2025-04-09T19:13:26.7071069Z       [36m  - can be used as a property in documents[0m
2025-04-09T19:13:26.7081551Z [0m      Document#errors[0m
2025-04-09T19:13:26.7141854Z       [32m  [32mâœ”[39m[0m[90m is available as `$errors`[0m
2025-04-09T19:13:26.7263472Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-09T19:13:26.7354963Z [0m      Document#removeListener[0m
2025-04-09T19:13:26.7413919Z       [32m  [32mâœ”[39m[0m[90m is available as `$removeListener`[0m
2025-04-09T19:13:26.7548639Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-09T19:13:26.7636186Z [0m      Document#listeners[0m
2025-04-09T19:13:26.7694720Z       [32m  [32mâœ”[39m[0m[90m is available as `$listeners`[0m
2025-04-09T19:13:26.7809043Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-09T19:13:26.7900551Z [0m      Document#on[0m
2025-04-09T19:13:26.7959507Z       [32m  [32mâœ”[39m[0m[90m is available as `$on`[0m
2025-04-09T19:13:26.8086703Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-09T19:13:26.8177175Z [0m      Document#emit[0m
2025-04-09T19:13:26.8236142Z       [32m  [32mâœ”[39m[0m[90m is available as `$emit`[0m
2025-04-09T19:13:26.8362387Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-09T19:13:26.8450158Z [0m      Document#get[0m
2025-04-09T19:13:26.8509285Z       [32m  [32mâœ”[39m[0m[90m is available as `$get`[0m
2025-04-09T19:13:26.8642595Z       [32m  [32mâœ”[39m[0m[90m can be used as a property in documents[0m
2025-04-09T19:13:26.8742123Z [0m    virtuals `pathsToSkip` (gh-10120)[0m
2025-04-09T19:13:26.8793972Z     [32m  [32mâœ”[39m[0m[90m adds support for `pathsToSkip` for virtuals feat-10120[0m
2025-04-09T19:13:26.8913689Z     [32m  [32mâœ”[39m[0m[90m supports passing a list of virtuals to `toObject()` (gh-10120)[0m
2025-04-09T19:13:26.9004188Z [0m    validation `pathsToSkip` (gh-10230)[0m
2025-04-09T19:13:26.9058377Z     [32m  [32mâœ”[39m[0m[90m support `pathsToSkip` option for `Document#validate()`[0m
2025-04-09T19:13:26.9178017Z     [32m  [32mâœ”[39m[0m[90m support `pathsToSkip` option for `Document#validate()`[0m
2025-04-09T19:13:26.9292871Z     [32m  [32mâœ”[39m[0m[90m support `pathsToSkip` option for `Document#validateSync()`[0m
2025-04-09T19:13:26.9371552Z     [36m  - support `pathsToSkip` option for `Model.validate()`[0m
2025-04-09T19:13:26.9412276Z     [32m  [32mâœ”[39m[0m[90m `pathsToSkip` accepts space separated paths[0m
2025-04-09T19:13:26.9503678Z [0m    $inc (gh-11915)[0m
2025-04-09T19:13:26.9669167Z     [32m  [32mâœ”[39m[0m[90m stores CastError if trying to $inc a non-numeric path[0m
2025-04-09T19:13:26.9881258Z     [32m  [32mâœ”[39m[0m[90m should correctly increment even if the document has not saved after each increment gh-13274[0m
2025-04-09T19:13:26.9932023Z [0m      top-level path[0m
2025-04-09T19:13:27.0129824Z       [32m  [32mâœ”[39m[0m[90m sends a $inc command for a given path[0m
2025-04-09T19:13:27.0407205Z       [32m  [32mâœ”[39m[0m[90m calls setters on the value passed to `$inc()` (gh-13158)[0m
2025-04-09T19:13:27.0655517Z       [32m  [32mâœ”[39m[0m[90m avoids updating value if setter fails (gh-13158)[0m
2025-04-09T19:13:27.0889938Z       [32m  [32mâœ”[39m[0m[90m works as a $set if the document is new[0m
2025-04-09T19:13:27.1135856Z       [32m  [32mâœ”[39m[0m[90m treats as a $set if set after $inc[0m
2025-04-09T19:13:27.1424923Z       [32m  [32mâœ”[39m[0m[90m tries to cast to number[0m
2025-04-09T19:13:27.1660443Z       [32m  [32mâœ”[39m[0m[90m stores CastError if can't convert to number[0m
2025-04-09T19:13:27.1732666Z [0m      nested paths[0m
2025-04-09T19:13:27.1915245Z       [32m  [32mâœ”[39m[0m[90m handles nested paths[0m
2025-04-09T19:13:27.2156474Z       [32m  [32mâœ”[39m[0m[90m treats as $set if overwriting nested path[0m
2025-04-09T19:13:27.2229098Z [0m      subdocuments[0m
2025-04-09T19:13:27.2406957Z       [32m  [32mâœ”[39m[0m[90m handles paths underneath subdocuments[0m
2025-04-09T19:13:27.2675215Z       [32m  [32mâœ”[39m[0m[90m treats as a $set if setting subdocument after $inc[0m
2025-04-09T19:13:27.2746685Z [0m      document array[0m
2025-04-09T19:13:27.2949524Z       [32m  [32mâœ”[39m[0m[90m handles paths underneath subdocuments[0m
2025-04-09T19:13:27.3201795Z       [32m  [32mâœ”[39m[0m[90m works on pushed subdocs[0m
2025-04-09T19:13:27.3436800Z       [32m  [32mâœ”[39m[0m[90m Splice call registers path modification[0m
2025-04-09T19:13:27.3522054Z [0m    gh-2306[0m
2025-04-09T19:13:27.3576552Z     [32m  [32mâœ”[39m[0m[90m allow define virtual on non-object path[0m
2025-04-09T19:13:27.3697941Z     [32m  [32mâœ”[39m[0m[90m works on document arrays[0m
2025-04-09T19:13:27.3829611Z 
2025-04-09T19:13:27.3830850Z [0m  Check if instance function that is supplied in schema option is available[0m
2025-04-09T19:13:27.3869213Z   [32m  [32mâœ”[39m[0m[90m should give an instance function back rather than undefined[0m
2025-04-09T19:13:27.3900768Z 
2025-04-09T19:13:27.3901517Z [0m  utils[0m
2025-04-09T19:13:27.3935651Z   [32m  [32mâœ”[39m[0m[90m deepEquals on ObjectIds[0m
2025-04-09T19:13:27.3979609Z   [32m  [32mâœ”[39m[0m[90m deepEquals on maps (gh-9549)[0m
2025-04-09T19:13:27.4040926Z   [32m  [32mâœ”[39m[0m[90m deepEquals on MongooseDocumentArray works[0m
2025-04-09T19:13:27.4086341Z   [32m  [32mâœ”[39m[0m[90m deepEquals with MongooseBuffer[0m
2025-04-09T19:13:27.4130403Z   [32m  [32mâœ”[39m[0m[90m `deepEqual` treats objects with different order of keys as different (gh-9571)[0m
2025-04-09T19:13:27.4173614Z   [32m  [32mâœ”[39m[0m[90m deepEqual on arrays and non-arrays (gh-11417)[0m
2025-04-09T19:13:27.4217232Z   [32m  [32mâœ”[39m[0m[90m array.flatten[0m
2025-04-09T19:13:27.4261335Z   [32m  [32mâœ”[39m[0m[90m array.unique[0m
2025-04-09T19:13:27.4283810Z [0m    ActiveRoster[0m
2025-04-09T19:13:27.4328557Z     [32m  [32mâœ”[39m[0m[90m should detect a path as required if it has been required[0m
2025-04-09T19:13:27.4393502Z     [32m  [32mâœ”[39m[0m[90m should detect a path as inited if it has been inited[0m
2025-04-09T19:13:27.4458369Z     [32m  [32mâœ”[39m[0m[90m should detect a path as modified[0m
2025-04-09T19:13:27.4523880Z     [32m  [32mâœ”[39m[0m[90m should remove a path from an old state upon a state change[0m
2025-04-09T19:13:27.4589708Z     [32m  [32mâœ”[39m[0m[90m forEach should be able to iterate through the paths belonging to one state[0m
2025-04-09T19:13:27.4655333Z     [32m  [32mâœ”[39m[0m[90m forEach should be able to iterate through the paths in the union of two or more states[0m
2025-04-09T19:13:27.4720827Z     [32m  [32mâœ”[39m[0m[90m forEach should iterate through all paths that have any state if given no state arguments[0m
2025-04-09T19:13:27.4785906Z     [32m  [32mâœ”[39m[0m[90m should be able to detect if at least one path exists in a set of states[0m
2025-04-09T19:13:27.4851921Z     [32m  [32mâœ”[39m[0m[90m should be able to `map` over the set of paths in a given state[0m
2025-04-09T19:13:27.4917421Z     [32m  [32mâœ”[39m[0m[90m should `map` over all states' paths if no states are specified in a `map` invocation[0m
2025-04-09T19:13:27.4960289Z [0m    merge[0m
2025-04-09T19:13:27.5004892Z     [32m  [32mâœ”[39m[0m[90m merges two objects together without overriding properties & methods[0m
2025-04-09T19:13:27.5047909Z [0m    mergeClone[0m
2025-04-09T19:13:27.5092197Z     [32m  [32mâœ”[39m[0m[90m handles object with valueOf() (gh-6059)[0m
2025-04-09T19:13:27.5157337Z     [32m  [32mâœ”[39m[0m[90m copies dates correctly (gh-6145)[0m
2025-04-09T19:13:27.5200491Z [0m    errorToPOJO(...)[0m
2025-04-09T19:13:27.5246912Z     [32m  [32mâœ”[39m[0m[90m converts an error to a POJO[0m
2025-04-09T19:13:27.5313015Z     [32m  [32mâœ”[39m[0m[90m throws an error when argument is not an error object[0m
2025-04-09T19:13:27.5380724Z     [32m  [32mâœ”[39m[0m[90m works with classes that extend `Error`[0m
2025-04-09T19:13:27.5423697Z [0m    toCollectionName[0m
2025-04-09T19:13:27.5467408Z     [32m  [32mâœ”[39m[0m[90m returns the same name for system.profile[0m
2025-04-09T19:13:27.5532209Z     [32m  [32mâœ”[39m[0m[90m returns the same name for system.indexes[0m
2025-04-09T19:13:27.5598135Z     [32m  [32mâœ”[39m[0m[90m throws an error when name is not a string[0m
2025-04-09T19:13:27.5653010Z     [32m  [32mâœ”[39m[0m[90m throws an error when name is an empty string[0m
2025-04-09T19:13:27.5717882Z     [32m  [32mâœ”[39m[0m[90m uses the pluralize function when provided[0m
2025-04-09T19:13:27.5771261Z 
2025-04-09T19:13:27.5771527Z [0m  SchemaNumber[0m
2025-04-09T19:13:27.5807694Z   [32m  [32mâœ”[39m[0m[90m allows 0 with required: true and ref set (gh-11912)[0m
2025-04-09T19:13:27.5854245Z   [32m  [32mâœ”[39m[0m[90m allows calling `min()` with no message arg (gh-15236)[0m
2025-04-09T19:13:27.5886322Z 
2025-04-09T19:13:27.5891558Z [0m  Model[0m
2025-04-09T19:13:27.6130090Z   [32m  [32mâœ”[39m[0m[90m can be created using _id as embedded document[0m
2025-04-09T19:13:27.6219168Z   [32m  [32mâœ”[39m[0m[90m gh-2140[0m
2025-04-09T19:13:27.6368459Z   [32m  [32mâœ”[39m[0m[90m collection name can be specified through schema[0m
2025-04-09T19:13:27.6638130Z   [32m  [32mâœ”[39m[0m[90m saving a model with a null value should perpetuate that null value to the db[0m
2025-04-09T19:13:27.6888223Z   [32m  [32mâœ”[39m[0m[90m saves subdocuments middleware correctly[0m
2025-04-09T19:13:27.7082174Z   [32m  [32mâœ”[39m[0m[90m instantiating a model with a hash that maps to at least 1 undefined value[0m
2025-04-09T19:13:27.7330110Z   [32m  [32mâœ”[39m[0m[90m modified nested objects which contain MongoseNumbers should not cause a RangeError on save (gh-714)[0m
2025-04-09T19:13:27.7579754Z   [32m  [32mâœ”[39m[0m[90m no RangeError on deleteOne() of a doc with Number _id (gh-714)[0m
2025-04-09T19:13:27.7776000Z   [32m  [32mâœ”[39m[0m[90m over-writing a number should persist to the db (gh-342)[0m
2025-04-09T19:13:27.7975804Z   [32m  [32mâœ”[39m[0m[90m changing a number non-atomically (gh-203)[0m
2025-04-09T19:13:27.8223098Z   [32m  [32mâœ”[39m[0m[90m doubly nested array saving and loading[0m
2025-04-09T19:13:27.8466110Z   [32m  [32mâœ”[39m[0m[90m multiple number push() calls[0m
2025-04-09T19:13:27.8715107Z   [32m  [32mâœ”[39m[0m[90m multiple push() calls[0m
2025-04-09T19:13:27.8968631Z   [32m  [32mâœ”[39m[0m[90m activePaths should be updated for nested modifieds[0m
2025-04-09T19:13:27.9202168Z   [32m  [32mâœ”[39m[0m[90m activePaths should be updated for nested modifieds as promise[0m
2025-04-09T19:13:27.9496379Z   [32m  [32mâœ”[39m[0m[90m $pull should affect what you see in an array before a save[0m
2025-04-09T19:13:27.9760897Z   [32m  [32mâœ”[39m[0m[90m $shift[0m
2025-04-09T19:13:27.9984056Z   [32m  [32mâœ”[39m[0m[90m updating an embedded document in an embedded array (gh-255)[0m
2025-04-09T19:13:28.0268345Z   [32m  [32mâœ”[39m[0m[90m updating an embedded array document to an Object value (gh-334)[0m
2025-04-09T19:13:28.0481425Z   [32m  [32mâœ”[39m[0m[90m saving an embedded document twice should not push that doc onto the parent doc twice (gh-267)[0m
2025-04-09T19:13:28.0724168Z   [32m  [32mâœ”[39m[0m[90m removing a subdocument atomically[0m
2025-04-09T19:13:28.0931143Z   [32m  [32mâœ”[39m[0m[90m single pull embedded doc[0m
2025-04-09T19:13:28.1181615Z   [32m  [32mâœ”[39m[0m[90m saving mixed data[0m
2025-04-09T19:13:28.1261466Z   [32m  [32mâœ”[39m[0m[90m populating mixed data from the constructor (gh-200)[0m
2025-04-09T19:13:28.1586384Z   [32m  [32mâœ”[39m[0m[90m "type" is allowed as a key[0m
2025-04-09T19:13:28.1790985Z   [32m  [32mâœ”[39m[0m[90m unaltered model does not clear the doc (gh-195)[0m
2025-04-09T19:13:28.2073999Z   [32m  [32mâœ”[39m[0m[90m subdocuments with changed values should persist the values[0m
2025-04-09T19:13:28.2274748Z   [32m  [32mâœ”[39m[0m[90m a single instantiated document should be able to update its embedded documents more than once[0m
2025-04-09T19:13:28.2532955Z   [32m  [32mâœ”[39m[0m[90m should not throw range error when using Number _id and saving existing doc (gh-691)[0m
2025-04-09T19:13:28.2716584Z   [32m  [32mâœ”[39m[0m[90m path is cast to correct value when retreived from db[0m
2025-04-09T19:13:28.3101587Z   [32m  [32mâœ”[39m[0m[90m setting a path to undefined should retain the value as undefined[0m
2025-04-09T19:13:28.3187990Z   [32m  [32mâœ”[39m[0m[90m allow for object passing to ref paths (gh-1606)[0m
2025-04-09T19:13:28.3403543Z   [32m  [32mâœ”[39m[0m[90m setters trigger on null values (gh-1445)[0m
2025-04-09T19:13:28.3988509Z   [32m  [32mâœ”[39m[0m[90m dropDatabase() after init allows re-init (gh-6967)[0m[33m (43ms)[0m
2025-04-09T19:13:28.4218298Z   [32m  [32mâœ”[39m[0m[90m replaceOne always sets version key in top-level (gh-7138)[0m
2025-04-09T19:13:28.4301904Z   [32m  [32mâœ”[39m[0m[90m can JSON.stringify(Model.schema) with nested (gh-7220)[0m
2025-04-09T19:13:28.4642380Z   [32m  [32mâœ”[39m[0m[90m sets $session() before pre save hooks run (gh-7742)[0m
2025-04-09T19:13:28.4887150Z   [32m  [32mâœ”[39m[0m[90m sets $session() before pre deleteOne hooks run (gh-7742)[0m
2025-04-09T19:13:28.5144424Z   [32m  [32mâœ”[39m[0m[90m set $session() before pre validate hooks run on bulkWrite and insertMany (gh-7769)[0m
2025-04-09T19:13:28.5381916Z   [32m  [32mâœ”[39m[0m[90m custom statics that overwrite query functions dont get hooks by default (gh-7790)[0m
2025-04-09T19:13:28.5643578Z   [32m  [32mâœ”[39m[0m[90m custom statics that overwrite aggregate functions dont get hooks by default (gh-14903)[0m
2025-04-09T19:13:28.5936698Z   [32m  [32mâœ”[39m[0m[90m custom statics that overwrite model functions dont get hooks by default[0m
2025-04-09T19:13:28.6019150Z   [32m  [32mâœ”[39m[0m[90m custom statics that overwrite document functions dont get hooks by default[0m
2025-04-09T19:13:28.6336868Z   [32m  [32mâœ”[39m[0m[90m error handling middleware passes saved doc (gh-7832)[0m
2025-04-09T19:13:28.6421069Z   [32m  [32mâœ”[39m[0m[90m throws readable error if calling Model function with bad context (gh-7957)[0m
2025-04-09T19:13:28.6724593Z   [32m  [32mâœ”[39m[0m[90m sets correct `Document#op` with `save()` (gh-8439)[0m
2025-04-09T19:13:28.6983925Z   [32m  [32mâœ”[39m[0m[90m bulkWrite sets discriminator filters (gh-8590)[0m
2025-04-09T19:13:28.7423412Z   [32m  [32mâœ”[39m[0m[90m bulkWrite skips defaults based on global setDefaultsOnInsert (gh-13823)[0m
2025-04-09T19:13:28.7661192Z   [32m  [32mâœ”[39m[0m[90m bulkWrite upsert works when update casts to empty (gh-8698)[0m
2025-04-09T19:13:28.7765597Z   [32m  [32mâœ”[39m[0m[90m bulkWrite upsert with non-schema path in filter (gh-8698)[0m
2025-04-09T19:13:28.8147973Z   [32m  [32mâœ”[39m[0m[90m bulkWrite can disable timestamps with updateOne, and updateMany[0m
2025-04-09T19:13:28.8508096Z   [32m  [32mâœ”[39m[0m[90m bulkwrite should not change updatedAt on subdocs when timestamps set to false (gh-13611)[0m
2025-04-09T19:13:28.8718659Z   [32m  [32mâœ”[39m[0m[90m bulkWrite can overwrite schema `strict` option for filters and updates (gh-8778)[0m
2025-04-09T19:13:28.8862307Z   [32m  [32mâœ”[39m[0m[90m cast errors have `kind` field (gh-8953)[0m
2025-04-09T19:13:28.9221073Z   [32m  [32mâœ”[39m[0m[90m casts bulkwrite timestamps to `Number` when specified (gh-9030)[0m
2025-04-09T19:13:28.9302134Z   [32m  [32mâœ”[39m[0m[90m Model.bulkWrite(...) does not throw an error when provided an empty array (gh-9131)[0m
2025-04-09T19:13:28.9613321Z   [32m  [32mâœ”[39m[0m[90m Model.bulkWrite(...) does not throw an error with upsert:true, setDefaultsOnInsert: true (gh-9157)[0m
2025-04-09T19:13:28.9696414Z   [32m  [32mâœ”[39m[0m[90m Model.bulkWrite(...) does not hang with empty array and ordered: false (gh-13664)[0m
2025-04-09T19:13:29.0012820Z   [32m  [32mâœ”[39m[0m[90m allows calling `create()` after `bulkWrite()` (gh-9350)[0m
2025-04-09T19:13:29.0095645Z   [32m  [32mâœ”[39m[0m[90m skips applying init hooks if `document` option set to `false` (gh-9316)[0m
2025-04-09T19:13:29.0433554Z   [32m  [32mâœ”[39m[0m[90m retains atomics after failed `save()` (gh-9327)[0m
2025-04-09T19:13:29.0797350Z   [32m  [32mâœ”[39m[0m[90m doesnt wipe out changes made while `save()` is in flight (gh-9327)[0m
2025-04-09T19:13:29.1065634Z   [32m  [32mâœ”[39m[0m[90m saves all error object properties to paths with type `Mixed` (gh-10126)[0m
2025-04-09T19:13:29.1303836Z   [32m  [32mâœ”[39m[0m[90m supports skipping defaults on a find operation gh-7287[0m
2025-04-09T19:13:29.1655861Z   [32m  [32mâœ”[39m[0m[90m casts ObjectIds with `ref` in schema when calling `hydrate()` (gh-11052)[0m
2025-04-09T19:13:29.1738710Z   [32m  [32mâœ”[39m[0m[90m respects `hydrate()` projection (gh-11375)[0m
2025-04-09T19:13:29.1903534Z   [32m  [32mâœ”[39m[0m[90m supports setters option for `hydrate()` (gh-11653)[0m
2025-04-09T19:13:29.2248897Z   [32m  [32mâœ”[39m[0m[90m sets index collation based on schema collation (gh-7621)[0m
2025-04-09T19:13:29.2521049Z   [32m  [32mâœ”[39m[0m[90m works if passing class that extends Document to `loadClass()` (gh-12254)[0m
2025-04-09T19:13:29.2827487Z   [32m  [32mâœ”[39m[0m[90m handles shared schema methods (gh-12423)[0m
2025-04-09T19:13:29.3085842Z   [32m  [32mâœ”[39m[0m[90m respects schema-level `collectionOptions` for setting options to createCollection()[0m
2025-04-09T19:13:29.3162548Z   [32m  [32mâœ”[39m[0m[90m throws helpful error when calling Model() with string instead of model() (gh-14281)[0m
2025-04-09T19:13:29.3296750Z   [32m  [32mâœ”[39m[0m[90m supports recompiling model with new schema additions (gh-14296)[0m
2025-04-09T19:13:29.3479655Z   [32m  [32mâœ”[39m[0m[90m supports recompiling model with new discriminators (gh-14444) (gh-14296)[0m
2025-04-09T19:13:29.3663728Z   [32m  [32mâœ”[39m[0m[90m overwrites existing discriminators when calling recompileSchema (gh-14527) (gh-14444)[0m
2025-04-09T19:13:29.4156878Z   [32m  [32mâœ”[39m[0m[90m does not throw with multiple self-referencing discriminator schemas applied to schema (gh-15120)[0m
2025-04-09T19:13:29.4398225Z   [32m  [32mâœ”[39m[0m[90m inserts versionKey even if schema has `toObject.versionKey` set to false (gh-14344)[0m
2025-04-09T19:13:29.4742706Z   [32m  [32mâœ”[39m[0m[90m insertMany should throw an error if there were operations that failed validation, but all operations that passed validation succeeded (gh-13256)[0m
2025-04-09T19:13:29.4825198Z   [32m  [32mâœ”[39m[0m[90m throws error if calling `updateMany()` with no update param (gh-15190)[0m
2025-04-09T19:13:29.4959264Z [0m    constructor[0m
2025-04-09T19:13:29.5018498Z     [32m  [32mâœ”[39m[0m[90m works without "new" keyword[0m
2025-04-09T19:13:29.5140445Z     [32m  [32mâœ”[39m[0m[90m works "new" keyword[0m
2025-04-09T19:13:29.5218217Z [0m    isNew[0m
2025-04-09T19:13:29.5277800Z     [32m  [32mâœ”[39m[0m[90m is true on instantiation[0m
2025-04-09T19:13:29.5359929Z [0m    schema[0m
2025-04-09T19:13:29.5411234Z     [32m  [32mâœ”[39m[0m[90m should exist[0m
2025-04-09T19:13:29.5546578Z     [32m  [32mâœ”[39m[0m[90m emits init event[0m
2025-04-09T19:13:29.5665241Z [0m    structure[0m
2025-04-09T19:13:29.5714465Z     [32m  [32mâœ”[39m[0m[90m default when instantiated[0m
2025-04-09T19:13:29.5839269Z     [32m  [32mâœ”[39m[0m[90m a hash with one null value[0m
2025-04-09T19:13:29.6048086Z     [32m  [32mâœ”[39m[0m[90m when saved[0m
2025-04-09T19:13:29.6100156Z [0m      array[0m
2025-04-09T19:13:29.6111448Z [0m        defaults[0m
2025-04-09T19:13:29.6196349Z         [32m  [32mâœ”[39m[0m[90m to a non-empty array[0m
2025-04-09T19:13:29.6352692Z         [32m  [32mâœ”[39m[0m[90m empty[0m
2025-04-09T19:13:29.6460505Z [0m      init[0m
2025-04-09T19:13:29.6534229Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:29.6671988Z       [32m  [32mâœ”[39m[0m[90m partially[0m
2025-04-09T19:13:29.6785190Z       [32m  [32mâœ”[39m[0m[90m with partial hash[0m
2025-04-09T19:13:29.6936776Z       [32m  [32mâœ”[39m[0m[90m isNew on embedded documents[0m
2025-04-09T19:13:29.7169276Z       [32m  [32mâœ”[39m[0m[90m isNew on embedded documents after saving[0m
2025-04-09T19:13:29.7257235Z [0m    methods[0m
2025-04-09T19:13:29.7317885Z     [32m  [32mâœ”[39m[0m[90m can be defined[0m
2025-04-09T19:13:29.7454576Z     [32m  [32mâœ”[39m[0m[90m can be defined on embedded documents[0m
2025-04-09T19:13:29.7640602Z     [32m  [32mâœ”[39m[0m[90m can be defined with nested key[0m
2025-04-09T19:13:29.7758786Z [0m    statics[0m
2025-04-09T19:13:29.7804301Z     [32m  [32mâœ”[39m[0m[90m can be defined[0m
2025-04-09T19:13:29.7882708Z [0m    casting as validation errors[0m
2025-04-09T19:13:29.8048939Z     [32m  [32mâœ”[39m[0m[90m error[0m
2025-04-09T19:13:29.8162310Z     [32m  [32mâœ”[39m[0m[90m nested error[0m
2025-04-09T19:13:29.8281702Z     [32m  [32mâœ”[39m[0m[90m subdocument cast error[0m
2025-04-09T19:13:29.8414337Z     [32m  [32mâœ”[39m[0m[90m subdocument validation error[0m
2025-04-09T19:13:29.8654055Z     [32m  [32mâœ”[39m[0m[90m subdocument error when adding a subdoc[0m
2025-04-09T19:13:29.9065561Z     [32m  [32mâœ”[39m[0m[90m updates[0m
2025-04-09T19:13:29.9169746Z     [32m  [32mâœ”[39m[0m[90m $pull[0m
2025-04-09T19:13:29.9414195Z     [32m  [32mâœ”[39m[0m[90m $push[0m
2025-04-09T19:13:29.9630742Z     [32m  [32mâœ”[39m[0m[90m Number arrays[0m
2025-04-09T19:13:29.9907170Z     [32m  [32mâœ”[39m[0m[90m date casting compat with datejs (gh-502)[0m
2025-04-09T19:13:29.9972099Z [0m    validation[0m
2025-04-09T19:13:30.0165078Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:30.0406216Z     [32m  [32mâœ”[39m[0m[90m custom messaging[0m
2025-04-09T19:13:30.0516267Z     [32m  [32mâœ”[39m[0m[90m with Model.schema.path introspection (gh-272)[0m
2025-04-09T19:13:30.0849451Z     [32m  [32mâœ”[39m[0m[90m of required undefined values[0m
2025-04-09T19:13:30.0960502Z     [32m  [32mâœ”[39m[0m[90m save callback should only execute once (gh-319)[0m
2025-04-09T19:13:30.1253544Z     [32m  [32mâœ”[39m[0m[90m query result[0m
2025-04-09T19:13:30.1474043Z     [32m  [32mâœ”[39m[0m[90m of required previously existing null values[0m
2025-04-09T19:13:30.1729494Z     [32m  [32mâœ”[39m[0m[90m nested[0m
2025-04-09T19:13:30.1990575Z     [32m  [32mâœ”[39m[0m[90m of nested subdocuments[0m
2025-04-09T19:13:30.2104655Z     [32m  [32mâœ”[39m[0m[90m without saving[0m
2025-04-09T19:13:30.2260135Z     [32m  [32mâœ”[39m[0m[90m when required is set to false[0m
2025-04-09T19:13:30.2390901Z [0m      middleware[0m
2025-04-09T19:13:30.2606235Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:30.2692203Z [0m    defaults application[0m
2025-04-09T19:13:30.2756008Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:30.2922632Z     [32m  [32mâœ”[39m[0m[90m nested[0m
2025-04-09T19:13:30.3091942Z     [32m  [32mâœ”[39m[0m[90m subdocument[0m
2025-04-09T19:13:30.3369436Z     [32m  [32mâœ”[39m[0m[90m allows nulls[0m
2025-04-09T19:13:30.3434138Z [0m    virtuals[0m
2025-04-09T19:13:30.3483400Z     [32m  [32mâœ”[39m[0m[90m getters[0m
2025-04-09T19:13:30.3602000Z     [32m  [32mâœ”[39m[0m[90m set()[0m
2025-04-09T19:13:30.3816677Z     [32m  [32mâœ”[39m[0m[90m should not be saved to the db[0m
2025-04-09T19:13:30.3921860Z     [32m  [32mâœ”[39m[0m[90m nested[0m
2025-04-09T19:13:30.4030583Z [0m    .deleteOne()[0m
2025-04-09T19:13:30.4243579Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:30.4476147Z     [32m  [32mâœ”[39m[0m[90m errors when id deselected (gh-3118)[0m
2025-04-09T19:13:30.4771853Z     [32m  [32mâœ”[39m[0m[90m should not remove any records when deleting by id undefined[0m
2025-04-09T19:13:30.5019559Z     [32m  [32mâœ”[39m[0m[90m should not remove all documents in the collection (gh-3326)[0m
2025-04-09T19:13:30.5070329Z [0m    getters[0m
2025-04-09T19:13:30.5135730Z     [32m  [32mâœ”[39m[0m[90m with same name on embedded docs do not class[0m
2025-04-09T19:13:30.5339967Z     [32m  [32mâœ”[39m[0m[90m should not be triggered at construction (gh-685)[0m
2025-04-09T19:13:30.5482843Z     [32m  [32mâœ”[39m[0m[90m with type defined with { type: Native } (gh-190)[0m
2025-04-09T19:13:30.5576732Z [0m      nested[0m
2025-04-09T19:13:30.5648578Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:30.5796177Z       [32m  [32mâœ”[39m[0m[90m works with object literals[0m
2025-04-09T19:13:30.6061824Z       [32m  [32mâœ”[39m[0m[90m object property access works when root initd with null[0m
2025-04-09T19:13:30.6295952Z       [32m  [32mâœ”[39m[0m[90m object property access works when root initd with undefined[0m
2025-04-09T19:13:30.6551288Z       [32m  [32mâœ”[39m[0m[90m pre-existing null object re-save[0m
2025-04-09T19:13:30.6812769Z       [32m  [32mâœ”[39m[0m[90m array of Mixed on existing doc can be pushed to[0m
2025-04-09T19:13:30.7086040Z       [32m  [32mâœ”[39m[0m[90m props can be set directly when property was named "type"[0m
2025-04-09T19:13:30.7170321Z [0m    setters[0m
2025-04-09T19:13:30.7395604Z     [32m  [32mâœ”[39m[0m[90m are used on embedded docs (gh-365 gh-390 gh-422)[0m
2025-04-09T19:13:30.7504121Z [0m    atomic subdocument[0m
2025-04-09T19:13:30.7714188Z     [32m  [32mâœ”[39m[0m[90m saving[0m
2025-04-09T19:13:30.7935276Z     [32m  [32mâœ”[39m[0m[90m setting (gh-310)[0m
2025-04-09T19:13:30.7997718Z [0m    saving embedded arrays[0m
2025-04-09T19:13:30.8226730Z     [32m  [32mâœ”[39m[0m[90m of Numbers atomically[0m
2025-04-09T19:13:30.8502714Z     [32m  [32mâœ”[39m[0m[90m of Strings atomically[0m
2025-04-09T19:13:30.8789722Z     [32m  [32mâœ”[39m[0m[90m of Buffers atomically[0m
2025-04-09T19:13:30.9016626Z     [32m  [32mâœ”[39m[0m[90m works with modified element properties + doc removal (gh-975)[0m
2025-04-09T19:13:30.9227802Z     [32m  [32mâœ”[39m[0m[90m updating an embedded document in an embedded array with set call[0m
2025-04-09T19:13:30.9288066Z [0m    embedded array filtering[0m
2025-04-09T19:13:30.9453473Z     [32m  [32mâœ”[39m[0m[90m by the id shortcut function[0m
2025-04-09T19:13:30.9643306Z     [32m  [32mâœ”[39m[0m[90m by the id with cast error[0m
2025-04-09T19:13:30.9826711Z     [32m  [32mâœ”[39m[0m[90m by the id shortcut with no match[0m
2025-04-09T19:13:30.9887278Z [0m    hooks[0m
2025-04-09T19:13:30.9898229Z [0m      pre[0m
2025-04-09T19:13:31.0105074Z       [32m  [32mâœ”[39m[0m[90m with undefined and null[0m
2025-04-09T19:13:31.0332478Z       [32m  [32mâœ”[39m[0m[90m called on all sub levels[0m
2025-04-09T19:13:31.0469824Z       [32m  [32mâœ”[39m[0m[90m error on any sub level[0m
2025-04-09T19:13:31.0553999Z [0m        init[0m
2025-04-09T19:13:31.0751180Z         [32m  [32mâœ”[39m[0m[90m has access to the true ObjectId when used with querying (gh-289)[0m
2025-04-09T19:13:31.0847361Z [0m      post[0m
2025-04-09T19:13:31.1055500Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:31.1302183Z       [32m  [32mâœ”[39m[0m[90m on embedded docs[0m
2025-04-09T19:13:31.1554008Z       [32m  [32mâœ”[39m[0m[90m callback should receive parameter of type document after bulkSave (gh-13026)[0m
2025-04-09T19:13:31.1638767Z [0m    #exec()[0m
2025-04-09T19:13:31.1786275Z     [32m  [32mâœ”[39m[0m[90m countDocuments()[0m
2025-04-09T19:13:31.1980358Z     [32m  [32mâœ”[39m[0m[90m estimatedDocumentCount()[0m
2025-04-09T19:13:31.2192801Z     [32m  [32mâœ”[39m[0m[90m updateOne()[0m
2025-04-09T19:13:31.2444562Z     [32m  [32mâœ”[39m[0m[90m findOne()[0m
2025-04-09T19:13:31.2682818Z     [32m  [32mâœ”[39m[0m[90m find()[0m
2025-04-09T19:13:31.2882715Z     [32m  [32mâœ”[39m[0m[90m op can be changed[0m
2025-04-09T19:13:31.2931528Z [0m      promises[0m
2025-04-09T19:13:31.3090008Z       [32m  [32mâœ”[39m[0m[90m findOne()[0m
2025-04-09T19:13:31.3341553Z       [32m  [32mâœ”[39m[0m[90m find()[0m
2025-04-09T19:13:31.3423131Z [0m    console.log[0m
2025-04-09T19:13:31.3490095Z     [32m  [32mâœ”[39m[0m[90m hides private props[0m
2025-04-09T19:13:31.3573276Z [0m    pathnames[0m
2025-04-09T19:13:31.3636793Z     [32m  [32mâœ”[39m[0m[90m named path can be used[0m
2025-04-09T19:13:31.3755963Z [0m    RegExps[0m
2025-04-09T19:13:31.3902336Z     [32m  [32mâœ”[39m[0m[90m can be saved[0m
2025-04-09T19:13:31.3964040Z [0m    save()[0m
2025-04-09T19:13:31.4027797Z     [32m  [32mâœ”[39m[0m[90m rejects new documents that have no _id set (1595)[0m
2025-04-09T19:13:31.4314168Z     [32m  [32mâœ”[39m[0m[90m no TypeError when attempting to save more than once after using atomics[0m
2025-04-09T19:13:31.4547486Z     [32m  [32mâœ”[39m[0m[90m should clear $versionError and saveOptions after saved (gh-8040)[0m
2025-04-09T19:13:31.4793644Z     [32m  [32mâœ”[39m[0m[90m should only save paths specificed in the `pathsToSave` array (gh-9583)[0m
2025-04-09T19:13:31.5107330Z     [32m  [32mâœ”[39m[0m[90m should have `pathsToSave` work with subdocs (gh-9583)[0m
2025-04-09T19:13:31.5407130Z     [32m  [32mâœ”[39m[0m[90m should have `pathsToSave` work with doc arrays (gh-9583)[0m
2025-04-09T19:13:31.5461001Z [0m      when no callback is passed[0m
2025-04-09T19:13:31.5538401Z       [32m  [32mâœ”[39m[0m[90m should emit error on its Model when there are listeners[0m
2025-04-09T19:13:31.5652474Z [0m    _delta()[0m
2025-04-09T19:13:31.5850636Z     [32m  [32mâœ”[39m[0m[90m should overwrite arrays when directly set (gh-1126)[0m
2025-04-09T19:13:31.6119676Z     [32m  [32mâœ”[39m[0m[90m should use $set when subdoc changed before pulling (gh-1303)[0m
2025-04-09T19:13:31.6182078Z [0m    backward compatibility[0m
2025-04-09T19:13:31.6364252Z     [32m  [32mâœ”[39m[0m[90m with conflicted data in db[0m
2025-04-09T19:13:31.6618852Z     [32m  [32mâœ”[39m[0m[90m with positional notation on path not existing in schema (gh-1048)[0m
2025-04-09T19:13:31.6682617Z [0m    non-schema adhoc property assignments[0m
2025-04-09T19:13:31.6835079Z     [32m  [32mâœ”[39m[0m[90m are not saved[0m
2025-04-09T19:13:31.6897179Z [0m    setting an unset value[0m
2025-04-09T19:13:31.7107730Z     [32m  [32mâœ”[39m[0m[90m is saved (gh-742)[0m
2025-04-09T19:13:31.7499828Z     [32m  [32mâœ”[39m[0m[90m is saved object with proper defaults[0m
2025-04-09T19:13:31.7563087Z [0m    unsetting a default value[0m
2025-04-09T19:13:31.7731581Z     [32m  [32mâœ”[39m[0m[90m should be ignored (gh-758)[0m
2025-04-09T19:13:31.7800553Z [0m    Skip setting default value for Geospatial-indexed fields (gh-1668)[0m
2025-04-09T19:13:31.7974521Z     [32m  [32mâœ”[39m[0m[90m 2dsphere indexed field with value is saved[0m
2025-04-09T19:13:31.8195030Z     [32m  [32mâœ”[39m[0m[90m 2dsphere indexed field without value is saved (gh-1668)[0m
2025-04-09T19:13:31.8462206Z     [32m  [32mâœ”[39m[0m[90m 2dsphere indexed field in subdoc without value is saved[0m
2025-04-09T19:13:31.8660261Z     [32m  [32mâœ”[39m[0m[90m 2dsphere indexed field with geojson without value is saved (gh-3233)[0m
2025-04-09T19:13:31.8993210Z     [32m  [32mâœ”[39m[0m[90m Doc with 2dsphere indexed field without initial value can be updated[0m
2025-04-09T19:13:31.9322010Z     [32m  [32mâœ”[39m[0m[90m 2dsphere indexed required field without value is rejected[0m
2025-04-09T19:13:31.9600746Z     [32m  [32mâœ”[39m[0m[90m 2dsphere field without value but with schema default is saved[0m
2025-04-09T19:13:31.9880559Z     [32m  [32mâœ”[39m[0m[90m 2d indexed field without value is saved[0m
2025-04-09T19:13:31.9935632Z     [36m  - Compound index with 2dsphere field without value is saved[0m
2025-04-09T19:13:31.9936298Z     [36m  - Compound index on field earlier declared with 2dsphere index is saved[0m
2025-04-09T19:13:31.9946515Z [0m    max bson size error[0m
2025-04-09T19:13:32.1474292Z     [32m  [32mâœ”[39m[0m[90m save max bson size error with buffering (gh-3906)[0m[31m (147ms)[0m
2025-04-09T19:13:32.2901942Z     [32m  [32mâœ”[39m[0m[90m reports max bson size error in save (gh-3906)[0m[31m (129ms)[0m
2025-04-09T19:13:32.2987982Z [0m    bug fixes[0m
2025-04-09T19:13:32.3178574Z     [32m  [32mâœ”[39m[0m[90m doesnt crash (gh-1920)[0m
2025-04-09T19:13:32.3405067Z     [32m  [32mâœ”[39m[0m[90m doesnt reset "modified" status for fields[0m
2025-04-09T19:13:32.3657566Z     [32m  [32mâœ”[39m[0m[90m deleteOne() with options (gh-7857)[0m
2025-04-09T19:13:32.3867079Z     [32m  [32mâœ”[39m[0m[90m deleteMany() with options (gh-6805)[0m
2025-04-09T19:13:32.3966798Z     [32m  [32mâœ”[39m[0m[90m run default function with correct this scope in DocumentArray (gh-6840)[0m
2025-04-09T19:13:32.4101984Z     [32m  [32mâœ”[39m[0m[90m method with same name as prop should throw (gh-4475)[0m
2025-04-09T19:13:32.4363871Z     [32m  [32mâœ”[39m[0m[90m create() reuses existing doc if one passed in (gh-4449)[0m
2025-04-09T19:13:32.4460596Z     [32m  [32mâœ”[39m[0m[90m disabling id getter with .set() (gh-5548)[0m
2025-04-09T19:13:32.4774563Z     [32m  [32mâœ”[39m[0m[90m creates new array when initializing from existing doc (gh-4449)[0m
2025-04-09T19:13:32.5070043Z     [32m  [32mâœ”[39m[0m[90m deleteOne with cast error (gh-5323)[0m
2025-04-09T19:13:32.5172472Z     [32m  [32mâœ”[39m[0m[90m .create() with non-object (gh-2037)[0m
2025-04-09T19:13:32.5494154Z     [32m  [32mâœ”[39m[0m[90m bulkWrite casting updateMany, deleteOne, deleteMany (gh-3998)[0m
2025-04-09T19:13:32.5742565Z     [32m  [32mâœ”[39m[0m[90m bulkWrite casting replaceOne (gh-3998)[0m
2025-04-09T19:13:32.5973047Z     [32m  [32mâœ”[39m[0m[90m alias with lean virtual (gh-6069)[0m
2025-04-09T19:13:32.6274368Z     [32m  [32mâœ”[39m[0m[90m marks array as modified when initializing non-array from db (gh-2442)[0m
2025-04-09T19:13:32.6523107Z     [32m  [32mâœ”[39m[0m[90m Throws when saving same doc in parallel w/ callback (gh-6456)[0m
2025-04-09T19:13:32.6624465Z     [32m  [32mâœ”[39m[0m[90m using `new db.model()()` (gh-6698)[0m
2025-04-09T19:13:32.6902956Z     [32m  [32mâœ”[39m[0m[90m allows calling save in a post save hook (gh-6611)[0m
2025-04-09T19:13:32.7151826Z     [32m  [32mâœ”[39m[0m[90m createCollection() respects schema collation (gh-6489)[0m
2025-04-09T19:13:32.7459582Z     [32m  [32mâœ”[39m[0m[90m createCollection() respects timeseries (gh-10611)[0m
2025-04-09T19:13:32.7775403Z     [32m  [32mâœ”[39m[0m[90m createCollection() enforces expireAfterSeconds (gh-11229)[0m
2025-04-09T19:13:32.8096229Z     [32m  [32mâœ”[39m[0m[90m createCollection() enforces expires (gh-11229)[0m
2025-04-09T19:13:32.8400272Z     [32m  [32mâœ”[39m[0m[90m createCollection() enforces expireAfterSeconds when set by Schema (gh-11229)[0m
2025-04-09T19:13:32.8700218Z     [32m  [32mâœ”[39m[0m[90m createCollection() enforces expires when set by Schema (gh-11229)[0m
2025-04-09T19:13:32.8933704Z     [32m  [32mâœ”[39m[0m[90m createCollection() respects clusteredIndex[0m
2025-04-09T19:13:33.9267852Z     [32m  [32mâœ”[39m[0m[90m mongodb actually removes expired documents (gh-11229)[0m[31m (1024ms)[0m
2025-04-09T19:13:33.9500467Z     [32m  [32mâœ”[39m[0m[90m createCollection() handles NamespaceExists errors (gh-9447)[0m
2025-04-09T19:13:33.9553213Z [0m      3.6 features[0m
2025-04-09T19:13:33.9845314Z       [32m  [32mâœ”[39m[0m[90m arrayFilter (gh-5965)[0m
2025-04-09T19:13:34.0210851Z       [32m  [32mâœ”[39m[0m[90m arrayFilter casting (gh-5965) (gh-7079)[0m
2025-04-09T19:13:34.0553273Z       [32m  [32mâœ”[39m[0m[90m avoids unused array filter error (gh-9468)[0m
2025-04-09T19:13:34.0615758Z [0m        watch()[0m
2025-04-09T19:13:34.0628418Z         [36m  - watch() (gh-5964)[0m
2025-04-09T19:13:34.0629481Z         [36m  - bubbles up resumeTokenChanged events (gh-13607)[0m
2025-04-09T19:13:34.0630218Z         [36m  - using next() and hasNext() (gh-11527)[0m
2025-04-09T19:13:34.0630925Z         [36m  - fullDocument (gh-11936)[0m
2025-04-09T19:13:34.0631591Z         [36m  - fullDocument with immediate watcher and hydrate (gh-14049)[0m
2025-04-09T19:13:34.0632162Z         [36m  - respects discriminators (gh-11007)[0m
2025-04-09T19:13:34.0632677Z         [36m  - watch() before connecting (gh-5964)[0m
2025-04-09T19:13:34.0633280Z         [36m  - watch() close() prevents buffered watch op from running (gh-7022)[0m
2025-04-09T19:13:34.0633876Z         [36m  - watch() close() closes the stream (gh-7022)[0m
2025-04-09T19:13:34.0634419Z         [36m  - bubbles up resumeTokenChanged events (gh-14349)[0m
2025-04-09T19:13:34.0640619Z [0m        sessions (gh-6362)[0m
2025-04-09T19:13:34.0824875Z         [32m  [32mâœ”[39m[0m[90m startSession()[0m
2025-04-09T19:13:34.1126287Z         [32m  [32mâœ”[39m[0m[90m startSession() before connecting[0m
2025-04-09T19:13:34.1467532Z         [32m  [32mâœ”[39m[0m[90m sets session when pulling a document from db[0m
2025-04-09T19:13:34.1760382Z         [32m  [32mâœ”[39m[0m[90m sets session on child doc when creating new doc (gh-7104)[0m
2025-04-09T19:13:34.2058790Z         [32m  [32mâœ”[39m[0m[90m sets session when pulling multiple docs from db[0m
2025-04-09T19:13:34.2378353Z         [32m  [32mâœ”[39m[0m[90m supports overwriting `session` in save()[0m
2025-04-09T19:13:34.2473195Z [0m      bulkWrite casting[0m
2025-04-09T19:13:34.2713129Z       [32m  [32mâœ”[39m[0m[90m basic casting (gh-3998)[0m
2025-04-09T19:13:34.2992994Z       [32m  [32mâœ”[39m[0m[90m setDefaultsOnInsert (gh-5708)[0m
2025-04-09T19:13:34.3274357Z       [32m  [32mâœ”[39m[0m[90m timestamps (gh-5708)[0m
2025-04-09T19:13:34.3416634Z       [32m  [32mâœ”[39m[0m[90m throwOnValidationError (gh-14572)[0m
2025-04-09T19:13:34.3752150Z       [32m  [32mâœ”[39m[0m[90m handles array filters (gh-14978)[0m
2025-04-09T19:13:34.4146918Z       [32m  [32mâœ”[39m[0m[90m handles overwriteDiscriminatorKey (gh-15218) (gh-15040)[0m
2025-04-09T19:13:34.5461536Z       [32m  [32mâœ”[39m[0m[90m with child timestamps and array filters (gh-7032)[0m[31m (119ms)[0m
2025-04-09T19:13:34.5578554Z       [32m  [32mâœ”[39m[0m[90m throws readable error if invalid op[0m
2025-04-09T19:13:34.6058587Z       [32m  [32mâœ”[39m[0m[90m with timestamps and replaceOne (gh-5708)[0m
2025-04-09T19:13:34.6449694Z       [32m  [32mâœ”[39m[0m[90m with timestamps from merged schema (gh-13409)[0m
2025-04-09T19:13:34.6852711Z       [32m  [32mâœ”[39m[0m[90m with child timestamps (gh-7032)[0m
2025-04-09T19:13:34.7112411Z       [32m  [32mâœ”[39m[0m[90m sets version key (gh-13944)[0m
2025-04-09T19:13:34.7373504Z       [32m  [32mâœ”[39m[0m[90m with single nested and setOnInsert (gh-7534)[0m
2025-04-09T19:13:34.7650557Z       [32m  [32mâœ”[39m[0m[90m throws an error if no update object is provided (gh-8331)[0m
2025-04-09T19:13:34.8188988Z       [32m  [32mâœ”[39m[0m[90m casts according to child discriminator if `discriminatorKey` is present (gh-8982)[0m[33m (42ms)[0m
2025-04-09T19:13:34.8459361Z       [32m  [32mâœ”[39m[0m[90m insertOne and replaceOne should not throw an error when set `timestamps: false` in schmea (gh-10048)[0m
2025-04-09T19:13:34.8595853Z       [32m  [32mâœ”[39m[0m[90m casts objects with null prototype (gh-10512)[0m
2025-04-09T19:13:34.8757479Z       [32m  [32mâœ”[39m[0m[90m sends valid ops if ordered = false (gh-13176)[0m
2025-04-09T19:13:34.9082534Z       [32m  [32mâœ”[39m[0m[90m decorates write error with validation errors if unordered fails (gh-13176)[0m
2025-04-09T19:13:34.9340079Z       [32m  [32mâœ”[39m[0m[90m bulkWrite should throw an error if there were operations that failed validation, but all operations that passed validation succeeded (gh-13256)[0m
2025-04-09T19:13:34.9600385Z       [32m  [32mâœ”[39m[0m[90m casts $elemMatch filter (gh-14678)[0m
2025-04-09T19:13:34.9733902Z       [32m  [32mâœ”[39m[0m[90m throwOnValidationError (gh-14572) (gh-13256)[0m
2025-04-09T19:13:35.0028715Z       [32m  [32mâœ”[39m[0m[90m bulkWrite should throw an error if there were operations that failed validation, but all operations that passed validation succeeded (gh-13256)[0m
2025-04-09T19:13:35.0315207Z       [32m  [32mâœ”[39m[0m[90m bulkWrite should return both write errors and validation errors in error.results (gh-15265)[0m
2025-04-09T19:13:35.0390024Z [0m      Model.syncIndexes()[0m
2025-04-09T19:13:35.0601705Z       [32m  [32mâœ”[39m[0m[90m adds indexes to the collection[0m
2025-04-09T19:13:35.0832667Z       [32m  [32mâœ”[39m[0m[90m avoids creating collection if autoCreate: false[0m
2025-04-09T19:13:35.1181783Z       [32m  [32mâœ”[39m[0m[90m drops indexes that are not present in schema[0m
2025-04-09T19:13:35.1570081Z       [32m  [32mâœ”[39m[0m[90m when two different models connect to the same collection, syncIndexes(...) respects the last call[0m
2025-04-09T19:13:35.1933574Z       [32m  [32mâœ”[39m[0m[90m when two models have the same collection name, same field but different options, syncIndexes(...) respects the last call[0m
2025-04-09T19:13:35.2267227Z       [32m  [32mâœ”[39m[0m[90m when syncIndexes(...) is called twice with no changes on the model, the second call should not do anything[0m
2025-04-09T19:13:35.2614189Z       [32m  [32mâœ”[39m[0m[90m when called with different key order, it treats different order as different indexes (gh-8135)[0m
2025-04-09T19:13:35.2934899Z       [32m  [32mâœ”[39m[0m[90m syncIndexes(...) compound index including `_id` (gh-8559)[0m
2025-04-09T19:13:35.3187223Z       [32m  [32mâœ”[39m[0m[90m syncIndexes() allows overwriting `background` option (gh-8645)[0m
2025-04-09T19:13:35.3450247Z       [32m  [32mâœ”[39m[0m[90m syncIndexes() does not call createIndex for indexes that already exist[0m
2025-04-09T19:13:35.3764389Z       [32m  [32mâœ”[39m[0m[90m syncIndexes() supports hideIndexes (gh-14868)[0m
2025-04-09T19:13:35.4019916Z       [32m  [32mâœ”[39m[0m[90m should not drop a text index on .syncIndexes() call (gh-10850)[0m
2025-04-09T19:13:35.4413092Z       [32m  [32mâœ”[39m[0m[90m adding discriminators should not drop the parent model's indexes[0m
2025-04-09T19:13:35.5078901Z       [32m  [32mâœ”[39m[0m[90m syncing model with multiple discriminators works[0m
2025-04-09T19:13:35.5478141Z       [32m  [32mâœ”[39m[0m[90m syncing one discriminator's indexes should not drop the main model's indexes[0m
2025-04-09T19:13:35.5862090Z       [32m  [32mâœ”[39m[0m[90m syncing main model does not sync discrimator indexes[0m
2025-04-09T19:13:35.6256109Z       [32m  [32mâœ”[39m[0m[90m syncing discriminator does not attempt to sync parent model's indexes[0m
2025-04-09T19:13:35.6488380Z       [32m  [32mâœ”[39m[0m[90m creates indexes only when they do not exist on the mongodb server (gh-12250)[0m
2025-04-09T19:13:35.6574410Z [0m    exists() (gh-6872) (gh-8097) (gh-11138)[0m
2025-04-09T19:13:35.6633882Z     [32m  [32mâœ”[39m[0m[90m returns a query[0m
2025-04-09T19:13:35.6898560Z     [32m  [32mâœ”[39m[0m[90m returns lean document with `_id` only if document exists[0m
2025-04-09T19:13:35.7008930Z     [32m  [32mâœ”[39m[0m[90m returns `null` when no document exists[0m
2025-04-09T19:13:35.7239054Z     [32m  [32mâœ”[39m[0m[90m returns `null` if no doc exists[0m
2025-04-09T19:13:35.7368947Z     [32m  [32mâœ”[39m[0m[90m options (gh-8075)[0m
2025-04-09T19:13:35.7447412Z [0m    returnOriginal (gh-9183)[0m
2025-04-09T19:13:35.7644229Z     [32m  [32mâœ”[39m[0m[90m Setting `returnOriginal` works[0m
2025-04-09T19:13:35.7903364Z     [32m  [32mâœ”[39m[0m[90m `returnOriginal` can be overwritten[0m
2025-04-09T19:13:35.7956226Z [0m    buildBulkWriteOperations() (gh-9673)[0m
2025-04-09T19:13:35.8131606Z     [32m  [32mâœ”[39m[0m[90m builds write operations[0m
2025-04-09T19:13:35.8243294Z     [32m  [32mâœ”[39m[0m[90m throws an error when one document is invalid[0m
2025-04-09T19:13:35.8385157Z     [32m  [32mâœ”[39m[0m[90m throws an error if documents is not an array[0m
2025-04-09T19:13:35.8532023Z     [32m  [32mâœ”[39m[0m[90m throws an error if one element is not a document[0m
2025-04-09T19:13:35.8664523Z     [32m  [32mâœ”[39m[0m[90m skips validation when given `skipValidation` true[0m
2025-04-09T19:13:35.8995250Z     [32m  [32mâœ”[39m[0m[90m saves changes in discriminators if calling `bulkSave()` on base model (gh-13907)[0m
2025-04-09T19:13:35.9208492Z     [32m  [32mâœ”[39m[0m[90m accepts `timestamps: false` (gh-12059)[0m
2025-04-09T19:13:35.9432375Z     [32m  [32mâœ”[39m[0m[90m accepts `timestamps: true` (gh-12059)[0m
2025-04-09T19:13:35.9643307Z     [32m  [32mâœ”[39m[0m[90m `timestamps` has `undefined` as default value (gh-12059)[0m
2025-04-09T19:13:35.9922448Z     [32m  [32mâœ”[39m[0m[90m should not modify the object in the $set clause and not error when dealing with or without timestamps (gh-14164)[0m
2025-04-09T19:13:35.9988079Z [0m    bulkSave() (gh-9673)[0m
2025-04-09T19:13:36.0176794Z     [32m  [32mâœ”[39m[0m[90m saves new documents[0m
2025-04-09T19:13:36.0453790Z     [32m  [32mâœ”[39m[0m[90m updates documents[0m
2025-04-09T19:13:36.0708121Z     [32m  [32mâœ”[39m[0m[90m insertMany should throw an error if there were operations that failed validation, but all operations that passed validation succeeded (gh-14572) (gh-13256)[0m
2025-04-09T19:13:36.0948152Z     [32m  [32mâœ”[39m[0m[90m insertMany should return both write errors and validation errors in error.results (gh-15265)[0m
2025-04-09T19:13:36.1186629Z     [32m  [32mâœ”[39m[0m[90m insertMany should return both write errors and validation errors in error.results with rawResult (gh-15265)[0m
2025-04-09T19:13:36.1463003Z     [32m  [32mâœ”[39m[0m[90m returns writeResult on success[0m
2025-04-09T19:13:36.1724646Z     [32m  [32mâœ”[39m[0m[90m throws an error on failure[0m
2025-04-09T19:13:36.1918011Z     [32m  [32mâœ”[39m[0m[90m changes document state from `isNew` `false` to `true`[0m
2025-04-09T19:13:36.2134561Z     [32m  [32mâœ”[39m[0m[90m sets `isNew` to false when a document succeeds and `isNew` does not change when some fail[0m
2025-04-09T19:13:36.2373031Z     [32m  [32mâœ”[39m[0m[90m changes documents state for successful writes[0m
2025-04-09T19:13:36.2600371Z     [32m  [32mâœ”[39m[0m[90m triggers pre/post-save hooks[0m
2025-04-09T19:13:36.2825849Z     [32m  [32mâœ”[39m[0m[90m calls pre-save before actually saving[0m
2025-04-09T19:13:36.3049267Z     [32m  [32mâœ”[39m[0m[90m works if some document is not modified (gh-10437)[0m
2025-04-09T19:13:36.3274618Z     [32m  [32mâœ”[39m[0m[90m should error if no documents were inserted or updated (gh-14763)[0m
2025-04-09T19:13:36.3528497Z     [32m  [32mâœ”[39m[0m[90m should error if not all documents were inserted or updated (gh-14763)[0m
2025-04-09T19:13:36.3647360Z     [32m  [32mâœ”[39m[0m[90m should error if there is a validation error[0m
2025-04-09T19:13:36.3898431Z     [32m  [32mâœ”[39m[0m[90m Using bulkSave should not trigger an error (gh-11071)[0m
2025-04-09T19:13:36.4135935Z     [32m  [32mâœ”[39m[0m[90m accepts `timestamps: false` (gh-12059)[0m
2025-04-09T19:13:36.4359531Z     [32m  [32mâœ”[39m[0m[90m accepts `timestamps: true` (gh-12059)[0m
2025-04-09T19:13:36.4615181Z     [32m  [32mâœ”[39m[0m[90m `timestamps` has `undefined` as default value (gh-12059)[0m
2025-04-09T19:13:36.4839529Z     [32m  [32mâœ”[39m[0m[90m respects `$timestamps()` (gh-12117)[0m
2025-04-09T19:13:36.4901771Z [0m    Setting the explain flag[0m
2025-04-09T19:13:36.5261461Z     [32m  [32mâœ”[39m[0m[90m should give an object back rather than a boolean (gh-8275)[0m
2025-04-09T19:13:36.5325138Z [0m    Model.applyDefaults (gh-11945)[0m
2025-04-09T19:13:36.5383847Z     [32m  [32mâœ”[39m[0m[90m applies defaults to POJOs[0m
2025-04-09T19:13:36.5537730Z     [32m  [32mâœ”[39m[0m[90m applies defaults to documents[0m
2025-04-09T19:13:36.5636480Z [0m    castObject() (gh-11945)[0m
2025-04-09T19:13:36.5692805Z     [32m  [32mâœ”[39m[0m[90m casts values[0m
2025-04-09T19:13:36.5860261Z     [32m  [32mâœ”[39m[0m[90m throws if cannot cast[0m
2025-04-09T19:13:36.6002510Z     [32m  [32mâœ”[39m[0m[90m should not throw an error if `ignoreCastErrors` is set (gh-12156)[0m
2025-04-09T19:13:36.6158500Z     [32m  [32mâœ”[39m[0m[90m handles discriminators (gh-15075)[0m
2025-04-09T19:13:36.6294489Z     [32m  [32mâœ”[39m[0m[90m handles castNonArrays when document array is set to non-array value (gh-15075)[0m
2025-04-09T19:13:36.6435487Z     [32m  [32mâœ”[39m[0m[90m handles document arrays (gh-15164)[0m
2025-04-09T19:13:36.6541045Z [0m    Check if static function that is supplied in schema option is available[0m
2025-04-09T19:13:36.6599378Z     [32m  [32mâœ”[39m[0m[90m should give a static function back rather than undefined[0m
2025-04-09T19:13:36.6755880Z [0m    Bypass middleware[0m
2025-04-09T19:13:36.6956784Z     [32m  [32mâœ”[39m[0m[90m should bypass middleware if save is called on a document with no changes gh-13250[0m
2025-04-09T19:13:36.7025053Z [0m    Model.useConnection() (gh-14802)[0m
2025-04-09T19:13:36.7313811Z     [32m  [32mâœ”[39m[0m[90m updates the model's db property to point to the provided connection instance and vice versa (gh-14802))[0m
2025-04-09T19:13:36.7405426Z     [32m  [32mâœ”[39m[0m[90m should throw an error if no connection is passed[0m
2025-04-09T19:13:36.7547521Z [0m    applyVirtuals[0m
2025-04-09T19:13:36.7613219Z     [32m  [32mâœ”[39m[0m[90m handles basic top-level virtuals[0m
2025-04-09T19:13:36.7769476Z     [32m  [32mâœ”[39m[0m[90m handles virtuals in subdocuments[0m
2025-04-09T19:13:36.7918026Z     [32m  [32mâœ”[39m[0m[90m handles virtuals on nested paths[0m
2025-04-09T19:13:36.8063590Z     [32m  [32mâœ”[39m[0m[90m supports passing an array of virtuals to apply[0m
2025-04-09T19:13:36.8214790Z     [32m  [32mâœ”[39m[0m[90m sets populate virtuals to `null` if `justOne`[0m
2025-04-09T19:13:36.8323173Z [0m    applyTimestamps[0m
2025-04-09T19:13:36.8384936Z     [32m  [32mâœ”[39m[0m[90m handles basic top-level timestamps[0m
2025-04-09T19:13:36.8530189Z     [32m  [32mâœ”[39m[0m[90m no-op if timestamps not set[0m
2025-04-09T19:13:36.8681389Z     [32m  [32mâœ”[39m[0m[90m handles custom timestamp property names[0m
2025-04-09T19:13:36.8838277Z     [32m  [32mâœ”[39m[0m[90m applies timestamps to subdocs[0m
2025-04-09T19:13:36.8998653Z     [32m  [32mâœ”[39m[0m[90m supports isUpdate and currentTime options[0m
2025-04-09T19:13:36.9121045Z [0m    diffIndexes()[0m
2025-04-09T19:13:36.9380138Z     [32m  [32mâœ”[39m[0m[90m avoids trying to drop timeseries collections (gh-14984)[0m
2025-04-09T19:13:36.9443939Z [0m    insertOne() (gh-14843)[0m
2025-04-09T19:13:36.9645520Z     [32m  [32mâœ”[39m[0m[90m should insert a new document[0m
2025-04-09T19:13:36.9859816Z     [32m  [32mâœ”[39m[0m[90m should support validateBeforeSave: false option[0m
2025-04-09T19:13:36.9971658Z 
2025-04-09T19:13:36.9972574Z [0m  types.documentarray[0m
2025-04-09T19:13:37.0015753Z   [32m  [32mâœ”[39m[0m[90m behaves and quacks like an array[0m
2025-04-09T19:13:37.0101891Z   [32m  [32mâœ”[39m[0m[90m #id[0m
2025-04-09T19:13:37.0345108Z   [32m  [32mâœ”[39m[0m[90m #push should work on ArraySubdocument more than 2 levels deep[0m
2025-04-09T19:13:37.0537904Z   [32m  [32mâœ”[39m[0m[90m cleans modified subpaths on splice() (gh-7249)[0m
2025-04-09T19:13:37.0612366Z   [32m  [32mâœ”[39m[0m[90m modifies ownerDocument() on set (gh-8479)[0m
2025-04-09T19:13:37.0721349Z   [32m  [32mâœ”[39m[0m[90m modifying subdoc path after `slice()` (gh-8356)[0m
2025-04-09T19:13:37.0941886Z   [32m  [32mâœ”[39m[0m[90m supports setting to newly constructed array with no path or parent (gh-8108)[0m
2025-04-09T19:13:37.1014351Z   [32m  [32mâœ”[39m[0m[90m keeps atomics after setting (gh-10272)[0m
2025-04-09T19:13:37.1133954Z   [32m  [32mâœ”[39m[0m[90m handles `DocumentArray#create()` with populated paths (gh-10749)[0m
2025-04-09T19:13:37.1199548Z   [32m  [32mâœ”[39m[0m[90m applies _id default (gh-12264)[0m
2025-04-09T19:13:37.1314882Z   [32m  [32mâœ”[39m[0m[90m gets correct path when underneath map (gh-12997)[0m
2025-04-09T19:13:37.1427260Z   [32m  [32mâœ”[39m[0m[90m bubbles up validation errors from doubly nested doc arrays (gh-14101)[0m
2025-04-09T19:13:37.1505349Z [0m    inspect[0m
2025-04-09T19:13:37.1549654Z     [32m  [32mâœ”[39m[0m[90m works with bad data[0m
2025-04-09T19:13:37.1607577Z [0m    toObject[0m
2025-04-09T19:13:37.1651510Z     [32m  [32mâœ”[39m[0m[90m works with bad data[0m
2025-04-09T19:13:37.1740367Z     [32m  [32mâœ”[39m[0m[90m passes options to its documents (gh-1415) (gh-4455)[0m
2025-04-09T19:13:37.1831534Z     [32m  [32mâœ”[39m[0m[90m uses the correct transform (gh-1412)[0m
2025-04-09T19:13:37.1964634Z [0m    create()[0m
2025-04-09T19:13:37.2015260Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:37.2072365Z [0m    push()[0m
2025-04-09T19:13:37.2271926Z     [32m  [32mâœ”[39m[0m[90m does not re-cast instances of its embedded doc[0m
2025-04-09T19:13:37.2361877Z     [32m  [32mâœ”[39m[0m[90m corrects #ownerDocument() and index if value was created with array.create() (gh-1385)[0m
2025-04-09T19:13:37.2451209Z     [32m  [32mâœ”[39m[0m[90m corrects #ownerDocument() if value was created with array.create() and set() (gh-7504)[0m
2025-04-09T19:13:37.2577578Z     [32m  [32mâœ”[39m[0m[90m reports validation errors with correct index path (gh-7724)[0m
2025-04-09T19:13:37.2636616Z [0m    required (gh-6364)[0m
2025-04-09T19:13:37.2691157Z     [32m  [32mâœ”[39m[0m[90m on top level[0m
2025-04-09T19:13:37.2780638Z     [32m  [32mâœ”[39m[0m[90m in arr[0m
2025-04-09T19:13:37.2838985Z [0m    invalidate()[0m
2025-04-09T19:13:37.2894679Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:37.2988360Z     [32m  [32mâœ”[39m[0m[90m handles validation failures[0m
2025-04-09T19:13:37.3221215Z     [32m  [32mâœ”[39m[0m[90m clears listeners on cast error (gh-6723)[0m
2025-04-09T19:13:37.3315619Z     [32m  [32mâœ”[39m[0m[90m slice() copies parent and path (gh-8317)[0m
2025-04-09T19:13:37.3461909Z     [32m  [32mâœ”[39m[0m[90m map() works (gh-8317)[0m
2025-04-09T19:13:37.3552818Z     [32m  [32mâœ”[39m[0m[90m slice() after map() works (gh-8399)[0m
2025-04-09T19:13:37.3682211Z     [32m  [32mâœ”[39m[0m[90m unshift() after map() works (gh-9012)[0m
2025-04-09T19:13:37.3818033Z 
2025-04-09T19:13:37.3818693Z [0m  esm:[0m
2025-04-09T19:13:37.3851521Z   [32m  [32mâœ”[39m[0m[90m should have default export[0m
2025-04-09T19:13:37.3895183Z   [32m  [32mâœ”[39m[0m[90m should have mongoose export[0m
2025-04-09T19:13:37.3926592Z 
2025-04-09T19:13:37.3927019Z [0m  model: findByIdAndUpdate:[0m
2025-04-09T19:13:37.4130771Z   [32m  [32mâœ”[39m[0m[90m returns the edited document with previous and target discriminators types defined[0m
2025-04-09T19:13:37.4343650Z   [32m  [32mâœ”[39m[0m[90m returns the edited document with only previous discriminator type defined[0m
2025-04-09T19:13:37.4410800Z 
2025-04-09T19:13:37.4415156Z [0m  Query[0m
2025-04-09T19:13:37.4615852Z   [32m  [32mâœ”[39m[0m[90m transform (gh-14236) (gh-7142)[0m
2025-04-09T19:13:37.4941344Z   [32m  [32mâœ”[39m[0m[90m allows skipping timestamps in updateOne() (gh-6980)[0m
2025-04-09T19:13:37.5404387Z   [32m  [32mâœ”[39m[0m[90m increments timestamps for nested subdocs (gh-4412)[0m[33m (40ms)[0m
2025-04-09T19:13:37.5578621Z   [32m  [32mâœ”[39m[0m[90m strictQuery option (gh-4136) (gh-7178)[0m
2025-04-09T19:13:37.5655650Z   [32m  [32mâœ”[39m[0m[90m strictQuery does not inherit from strict (gh-11861)[0m
2025-04-09T19:13:37.5875258Z   [32m  [32mâœ”[39m[0m[90m strictQuery is false by default (gh-11861)[0m
2025-04-09T19:13:37.6055796Z   [32m  [32mâœ”[39m[0m[90m strictQuery = true (gh-6032)[0m
2025-04-09T19:13:37.6282317Z   [32m  [32mâœ”[39m[0m[90m function defaults run after query result is inited (gh-7182)[0m
2025-04-09T19:13:37.6449283Z   [32m  [32mâœ”[39m[0m[90m merging objectids with where() (gh-7360)[0m
2025-04-09T19:13:37.6730008Z   [32m  [32mâœ”[39m[0m[90m maxTimeMS() (gh-7254)[0m
2025-04-09T19:13:37.6999641Z   [32m  [32mâœ”[39m[0m[90m connection-level maxTimeMS() (gh-4066)[0m
2025-04-09T19:13:37.7273708Z   [32m  [32mâœ”[39m[0m[90m mongoose-level maxTimeMS() (gh-4066)[0m
2025-04-09T19:13:37.7450675Z   [32m  [32mâœ”[39m[0m[90m query with top-level _bsontype (gh-8222) (gh-8268)[0m
2025-04-09T19:13:37.7626666Z   [32m  [32mâœ”[39m[0m[90m casts $elemMatch with dbrefs (gh-8577)[0m
2025-04-09T19:13:37.7710864Z   [32m  [32mâœ”[39m[0m[90m throws an error if executed multiple times (gh-7398)[0m
2025-04-09T19:13:37.7815711Z   [32m  [32mâœ”[39m[0m[90m setter priorVal (gh-8629)[0m
2025-04-09T19:13:37.8089765Z   [32m  [32mâœ”[39m[0m[90m casts filter according to discriminator schema if in filter (gh-8881)[0m
2025-04-09T19:13:37.8334122Z   [32m  [32mâœ”[39m[0m[90m casts update object according to child discriminator schema when `discriminatorKey` is present (gh-8982)[0m
2025-04-09T19:13:37.8505623Z   [32m  [32mâœ”[39m[0m[90m allows disabling `setDefaultsOnInsert` (gh-8410)[0m
2025-04-09T19:13:37.8581019Z   [32m  [32mâœ”[39m[0m[90m throws readable error if `$and` and `$or` contain non-objects (gh-8948)[0m
2025-04-09T19:13:37.8889563Z   [32m  [32mâœ”[39m[0m[90m includes `undefined` in filters (gh-3944)[0m
2025-04-09T19:13:37.9124511Z   [32m  [32mâœ”[39m[0m[90m handles push with array filters (gh-9977)[0m
2025-04-09T19:13:37.9207479Z   [32m  [32mâœ”[39m[0m[90m Query#pre() (gh-9784)[0m
2025-04-09T19:13:37.9298753Z   [32m  [32mâœ”[39m[0m[90m applies schema-level `select` on arrays (gh-10029)[0m
2025-04-09T19:13:37.9400516Z   [32m  [32mâœ”[39m[0m[90m sets `writeConcern` option correctly (gh-10009)[0m
2025-04-09T19:13:37.9615664Z   [32m  [32mâœ”[39m[0m[90m no longer has the deprecation warning message with writeConcern gh-10083[0m
2025-04-09T19:13:37.9687767Z   [32m  [32mâœ”[39m[0m[90m sanitizeProjection option (gh-10243)[0m
2025-04-09T19:13:37.9925876Z   [32m  [32mâœ”[39m[0m[90m sanitizeProjection option with plus paths (gh-14333) (gh-10243)[0m
2025-04-09T19:13:37.9996703Z   [32m  [32mâœ”[39m[0m[90m sanitizeFilter option (gh-3944)[0m
2025-04-09T19:13:38.0102791Z   [32m  [32mâœ”[39m[0m[90m sanitizeFilter disables implicit $in (gh-14657)[0m
2025-04-09T19:13:38.0322429Z   [32m  [32mâœ”[39m[0m[90m should not error when $not is used with $size (gh-10716)[0m
2025-04-09T19:13:38.0629762Z   [32m  [32mâœ”[39m[0m[90m should not error when $not is used on an array of strings (gh-11467)[0m
2025-04-09T19:13:38.0804363Z   [32m  [32mâœ”[39m[0m[90m adding `exec` option does not affect the query (gh-11416)[0m
2025-04-09T19:13:38.0987554Z   [32m  [32mâœ”[39m[0m[90m handles queries with EJSON deserialized RegExps (gh-11597)[0m
2025-04-09T19:13:38.1157214Z   [32m  [32mâœ”[39m[0m[90m should return query helper supplied in schema options query property instead of undefined[0m
2025-04-09T19:13:38.1342774Z   [32m  [32mâœ”[39m[0m[90m allows a transform option for lean on a query (gh-10423)[0m
2025-04-09T19:13:38.1653493Z   [32m  [32mâœ”[39m[0m[90m handles a lean transform that deletes _id with populate (gh-12143) (gh-10423)[0m
2025-04-09T19:13:38.1831182Z   [32m  [32mâœ”[39m[0m[90m skips applying default projections over slice projections (gh-11940)[0m
2025-04-09T19:13:38.2061487Z   [32m  [32mâœ”[39m[0m[90m translateAliases option (gh-7511)[0m
2025-04-09T19:13:38.2231614Z   [32m  [32mâœ”[39m[0m[90m translateAliases throws error on conflicting properties (gh-7511)[0m
2025-04-09T19:13:38.2394656Z   [32m  [32mâœ”[39m[0m[90m translateAliases applies before casting (gh-14521) (gh-7511)[0m
2025-04-09T19:13:38.2566725Z   [32m  [32mâœ”[39m[0m[90m schema level translateAliases option (gh-7511)[0m
2025-04-09T19:13:38.2738526Z   [32m  [32mâœ”[39m[0m[90m select: false is ignored for type Map (gh-12445)[0m
2025-04-09T19:13:38.2915776Z   [32m  [32mâœ”[39m[0m[90m Map field with select: false is selected when explicitly requested (gh-12603)[0m
2025-04-09T19:13:38.2983028Z   [32m  [32mâœ”[39m[0m[90m treats ObjectId as object with `_id` for `merge()` (gh-12325)[0m
2025-04-09T19:13:38.3237750Z   [32m  [32mâœ”[39m[0m[90m avoid throwing error when modifying nested field with same name as discriminator key (gh-12517)[0m
2025-04-09T19:13:38.3463219Z   [32m  [32mâœ”[39m[0m[90m avoid throwing error when modifying field with same name as nested discriminator key (gh-12517)[0m
2025-04-09T19:13:38.3682707Z   [32m  [32mâœ”[39m[0m[90m global strictQuery should work if applied after schema creation (gh-12703)[0m
2025-04-09T19:13:38.3878099Z   [32m  [32mâœ”[39m[0m[90m update operation should not remove fields set to undefined (gh-12930)[0m
2025-04-09T19:13:38.4059551Z   [32m  [32mâœ”[39m[0m[90m handles $elemMatch with nested schema (gh-12902)[0m
2025-04-09T19:13:38.4126596Z   [32m  [32mâœ”[39m[0m[90m merges $and, $or conditions (gh-12944)[0m
2025-04-09T19:13:38.4230719Z   [32m  [32mâœ”[39m[0m[90m shallow clones $and, $or if merging with empty filter (gh-14567) (gh-12944)[0m
2025-04-09T19:13:38.4433312Z   [32m  [32mâœ”[39m[0m[90m should avoid sending empty session to MongoDB server (gh-13052)[0m
2025-04-09T19:13:38.4610998Z   [32m  [32mâœ”[39m[0m[90m should avoid sending empty projection to MongoDB server (gh-13065)[0m
2025-04-09T19:13:38.4694220Z   [32m  [32mâœ”[39m[0m[90m should provide a clearer error message when sorting with empty string[0m
2025-04-09T19:13:38.4909152Z   [32m  [32mâœ”[39m[0m[90m allows executing a find() with a subdocument with defaults disabled (gh-13512)[0m
2025-04-09T19:13:38.5065990Z   [32m  [32mâœ”[39m[0m[90m throws a readable error when executing Query instance without a model (gh-13570)[0m
2025-04-09T19:13:38.5225284Z   [32m  [32mâœ”[39m[0m[90m throws a readable error when executing Query instance without an op (gh-13570)[0m
2025-04-09T19:13:38.5457275Z   [32m  [32mâœ”[39m[0m[90m allows deselecting discriminator key (gh-13760) (gh-13679)[0m
2025-04-09T19:13:38.5730269Z   [32m  [32mâœ”[39m[0m[90m does not apply sibling path defaults if using nested projection (gh-14115)[0m
2025-04-09T19:13:38.5798141Z   [32m  [32mâœ”[39m[0m[90m allows overriding sort (gh-14365)[0m
2025-04-09T19:13:38.6038659Z   [32m  [32mâœ”[39m[0m[90m avoids mutating user-provided query selectors (gh-14567)[0m
2025-04-09T19:13:38.6117882Z   [32m  [32mâœ”[39m[0m[90m avoids mutating $or, $and elements when casting (gh-14610)[0m
2025-04-09T19:13:38.6177982Z [0m    constructor[0m
2025-04-09T19:13:38.6222103Z     [32m  [32mâœ”[39m[0m[90m should not corrupt options[0m
2025-04-09T19:13:38.6279915Z [0m    select[0m
2025-04-09T19:13:38.6324203Z     [32m  [32mâœ”[39m[0m[90m (object)[0m
2025-04-09T19:13:38.6392827Z     [32m  [32mâœ”[39m[0m[90m (string)[0m
2025-04-09T19:13:38.6473548Z     [32m  [32mâœ”[39m[0m[90m ("a","b","c")[0m
2025-04-09T19:13:38.6542538Z     [32m  [32mâœ”[39m[0m[90m should not overwrite fields set in prior calls[0m
2025-04-09T19:13:38.6622269Z     [32m  [32mâœ”[39m[0m[90m should remove existing fields from inclusive projection[0m
2025-04-09T19:13:38.6702305Z     [32m  [32mâœ”[39m[0m[90m should remove existing fields from exclusive projection[0m
2025-04-09T19:13:38.6758915Z [0m    projection() (gh-7384)[0m
2025-04-09T19:13:38.6803529Z     [32m  [32mâœ”[39m[0m[90m gets current projection[0m
2025-04-09T19:13:38.6882372Z     [32m  [32mâœ”[39m[0m[90m overwrites current projection[0m
2025-04-09T19:13:38.6938751Z [0m    where[0m
2025-04-09T19:13:38.6983054Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:38.7063388Z     [32m  [32mâœ”[39m[0m[90m throws if non-string or non-object path is passed[0m
2025-04-09T19:13:38.7143056Z     [32m  [32mâœ”[39m[0m[90m does not throw when 0 args passed[0m
2025-04-09T19:13:38.7199402Z [0m    equals[0m
2025-04-09T19:13:38.7243571Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:38.7300010Z [0m    gte[0m
2025-04-09T19:13:38.7344173Z     [32m  [32mâœ”[39m[0m[90m with 2 args[0m
2025-04-09T19:13:38.7424701Z     [32m  [32mâœ”[39m[0m[90m with 1 arg[0m
2025-04-09T19:13:38.7480814Z [0m    gt[0m
2025-04-09T19:13:38.7524895Z     [32m  [32mâœ”[39m[0m[90m with 1 arg[0m
2025-04-09T19:13:38.7604995Z     [32m  [32mâœ”[39m[0m[90m with 2 args[0m
2025-04-09T19:13:38.7661571Z [0m    lte[0m
2025-04-09T19:13:38.7705746Z     [32m  [32mâœ”[39m[0m[90m with 1 arg[0m
2025-04-09T19:13:38.7785722Z     [32m  [32mâœ”[39m[0m[90m with 2 args[0m
2025-04-09T19:13:38.7841345Z [0m    lt[0m
2025-04-09T19:13:38.7885552Z     [32m  [32mâœ”[39m[0m[90m with 1 arg[0m
2025-04-09T19:13:38.7964238Z     [32m  [32mâœ”[39m[0m[90m with 2 args[0m
2025-04-09T19:13:38.8019945Z [0m    combined[0m
2025-04-09T19:13:38.8030772Z [0m      lt and gt[0m
2025-04-09T19:13:38.8085814Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:38.8163915Z [0m    tl on one path and gt on another[0m
2025-04-09T19:13:38.8208060Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:38.8253642Z [0m    ne[0m
2025-04-09T19:13:38.8297861Z     [32m  [32mâœ”[39m[0m[90m with 1 arg[0m
2025-04-09T19:13:38.8376992Z     [32m  [32mâœ”[39m[0m[90m with 2 args[0m
2025-04-09T19:13:38.8433808Z [0m    in[0m
2025-04-09T19:13:38.8478034Z     [32m  [32mâœ”[39m[0m[90m with 1 arg[0m
2025-04-09T19:13:38.8557163Z     [32m  [32mâœ”[39m[0m[90m with 2 args[0m
2025-04-09T19:13:38.8626812Z     [32m  [32mâœ”[39m[0m[90m where a non-array value no via where[0m
2025-04-09T19:13:38.8705668Z     [32m  [32mâœ”[39m[0m[90m where a non-array value via where[0m
2025-04-09T19:13:38.8761597Z [0m    nin[0m
2025-04-09T19:13:38.8807845Z     [32m  [32mâœ”[39m[0m[90m with 1 arg[0m
2025-04-09T19:13:38.8888333Z     [32m  [32mâœ”[39m[0m[90m with 2 args[0m
2025-04-09T19:13:38.8969427Z     [32m  [32mâœ”[39m[0m[90m with a non-array value not via where[0m
2025-04-09T19:13:38.9062139Z     [32m  [32mâœ”[39m[0m[90m with a non-array value via where[0m
2025-04-09T19:13:38.9118705Z [0m    mod[0m
2025-04-09T19:13:38.9163897Z     [32m  [32mâœ”[39m[0m[90m not via where, where [a, b] param[0m
2025-04-09T19:13:38.9245357Z     [32m  [32mâœ”[39m[0m[90m not via where, where a and b params[0m
2025-04-09T19:13:38.9326666Z     [32m  [32mâœ”[39m[0m[90m via where, where [a, b] param[0m
2025-04-09T19:13:38.9409496Z     [32m  [32mâœ”[39m[0m[90m via where, where a and b params[0m
2025-04-09T19:13:38.9472143Z [0m    near[0m
2025-04-09T19:13:38.9516880Z     [32m  [32mâœ”[39m[0m[90m via where, where { center :[lat, long]} param[0m
2025-04-09T19:13:38.9597259Z     [32m  [32mâœ”[39m[0m[90m via where, where [lat, long] param[0m
2025-04-09T19:13:38.9675509Z     [32m  [32mâœ”[39m[0m[90m via where, where lat and long params[0m
2025-04-09T19:13:38.9754411Z     [32m  [32mâœ”[39m[0m[90m not via where, where [lat, long] param[0m
2025-04-09T19:13:38.9832427Z     [32m  [32mâœ”[39m[0m[90m not via where, where lat and long params[0m
2025-04-09T19:13:38.9917444Z     [32m  [32mâœ”[39m[0m[90m via where, where GeoJSON param[0m
2025-04-09T19:13:39.0031463Z     [32m  [32mâœ”[39m[0m[90m with path, where GeoJSON param[0m
2025-04-09T19:13:39.0087593Z [0m    nearSphere[0m
2025-04-09T19:13:39.0132677Z     [32m  [32mâœ”[39m[0m[90m via where, where [lat, long] param[0m
2025-04-09T19:13:39.0212216Z     [32m  [32mâœ”[39m[0m[90m via where, where lat and long params[0m
2025-04-09T19:13:39.0290951Z     [32m  [32mâœ”[39m[0m[90m not via where, where [lat, long] param[0m
2025-04-09T19:13:39.0369454Z     [32m  [32mâœ”[39m[0m[90m not via where, where lat and long params[0m
2025-04-09T19:13:39.0448618Z     [32m  [32mâœ”[39m[0m[90m via where, with object[0m
2025-04-09T19:13:39.0530249Z     [32m  [32mâœ”[39m[0m[90m via where, where GeoJSON param[0m
2025-04-09T19:13:39.0649406Z     [32m  [32mâœ”[39m[0m[90m with path, with GeoJSON[0m
2025-04-09T19:13:39.0741767Z [0m    maxDistance[0m
2025-04-09T19:13:39.0786474Z     [32m  [32mâœ”[39m[0m[90m via where[0m
2025-04-09T19:13:39.0842863Z [0m    within[0m
2025-04-09T19:13:39.0853598Z [0m      box[0m
2025-04-09T19:13:39.0910430Z       [32m  [32mâœ”[39m[0m[90m via where[0m
2025-04-09T19:13:39.1010974Z       [32m  [32mâœ”[39m[0m[90m via where, no object[0m
2025-04-09T19:13:39.1078809Z [0m      center[0m
2025-04-09T19:13:39.1134710Z       [32m  [32mâœ”[39m[0m[90m via where[0m
2025-04-09T19:13:39.1201747Z [0m      centerSphere[0m
2025-04-09T19:13:39.1257452Z       [32m  [32mâœ”[39m[0m[90m via where[0m
2025-04-09T19:13:39.1325837Z [0m      polygon[0m
2025-04-09T19:13:39.1381453Z       [32m  [32mâœ”[39m[0m[90m via where[0m
2025-04-09T19:13:39.1461289Z [0m    exists[0m
2025-04-09T19:13:39.1505940Z     [32m  [32mâœ”[39m[0m[90m 0 args via where[0m
2025-04-09T19:13:39.1587296Z     [32m  [32mâœ”[39m[0m[90m 1 arg via where[0m
2025-04-09T19:13:39.1667902Z     [32m  [32mâœ”[39m[0m[90m where 1 argument not via where[0m
2025-04-09T19:13:39.1748281Z     [32m  [32mâœ”[39m[0m[90m where 2 args not via where[0m
2025-04-09T19:13:39.1806620Z [0m    all[0m
2025-04-09T19:13:39.1851155Z     [32m  [32mâœ”[39m[0m[90m via where[0m
2025-04-09T19:13:39.1932524Z     [32m  [32mâœ”[39m[0m[90m not via where[0m
2025-04-09T19:13:39.1990887Z [0m    find[0m
2025-04-09T19:13:39.2035305Z     [32m  [32mâœ”[39m[0m[90m strict array equivalence condition v[0m
2025-04-09T19:13:39.2115898Z     [32m  [32mâœ”[39m[0m[90m with no args[0m
2025-04-09T19:13:39.2196934Z     [32m  [32mâœ”[39m[0m[90m works with overwriting previous object args (1176)[0m
2025-04-09T19:13:39.2255123Z [0m    size[0m
2025-04-09T19:13:39.2299448Z     [32m  [32mâœ”[39m[0m[90m via where[0m
2025-04-09T19:13:39.2380065Z     [32m  [32mâœ”[39m[0m[90m not via where[0m
2025-04-09T19:13:39.2438624Z [0m    slice[0m
2025-04-09T19:13:39.2483142Z     [32m  [32mâœ”[39m[0m[90m where and positive limit param[0m
2025-04-09T19:13:39.2563844Z     [32m  [32mâœ”[39m[0m[90m where just negative limit param[0m
2025-04-09T19:13:39.2644691Z     [32m  [32mâœ”[39m[0m[90m where [skip, limit] param[0m
2025-04-09T19:13:39.2725378Z     [32m  [32mâœ”[39m[0m[90m where skip and limit params[0m
2025-04-09T19:13:39.2806083Z     [32m  [32mâœ”[39m[0m[90m where just positive limit param[0m
2025-04-09T19:13:39.2891751Z     [32m  [32mâœ”[39m[0m[90m where just negative limit param[0m
2025-04-09T19:13:39.2975517Z     [32m  [32mâœ”[39m[0m[90m where the [skip, limit] param[0m
2025-04-09T19:13:39.3060206Z     [32m  [32mâœ”[39m[0m[90m where the skip and limit params[0m
2025-04-09T19:13:39.3141595Z     [32m  [32mâœ”[39m[0m[90m not via where, with just positive limit param[0m
2025-04-09T19:13:39.3223021Z     [32m  [32mâœ”[39m[0m[90m not via where, where just negative limit param[0m
2025-04-09T19:13:39.3302096Z     [32m  [32mâœ”[39m[0m[90m not via where, where [skip, limit] param[0m
2025-04-09T19:13:39.3381175Z     [32m  [32mâœ”[39m[0m[90m not via where, where skip and limit params[0m
2025-04-09T19:13:39.3437988Z [0m    elemMatch[0m
2025-04-09T19:13:39.3448718Z [0m      not via where[0m
2025-04-09T19:13:39.3493773Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:39.3594868Z       [32m  [32mâœ”[39m[0m[90m where block notation[0m
2025-04-09T19:13:39.3661804Z [0m      via where[0m
2025-04-09T19:13:39.3716573Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:39.3818459Z       [32m  [32mâœ”[39m[0m[90m where block notation[0m
2025-04-09T19:13:39.3896139Z [0m    $where[0m
2025-04-09T19:13:39.3940644Z     [32m  [32mâœ”[39m[0m[90m function arg[0m
2025-04-09T19:13:39.4019692Z     [32m  [32mâœ”[39m[0m[90m string arg[0m
2025-04-09T19:13:39.4078251Z [0m    limit[0m
2025-04-09T19:13:39.4122680Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:39.4216693Z     [32m  [32mâœ”[39m[0m[90m with string limit (gh-11017)[0m
2025-04-09T19:13:39.4273561Z [0m    skip[0m
2025-04-09T19:13:39.4317827Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:39.4374667Z [0m    sort[0m
2025-04-09T19:13:39.4422452Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:39.4479399Z [0m    or[0m
2025-04-09T19:13:39.4525514Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:39.4581924Z [0m    and[0m
2025-04-09T19:13:39.4626766Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:39.4683305Z [0m    populate[0m
2025-04-09T19:13:39.4728510Z     [32m  [32mâœ”[39m[0m[90m converts to PopulateOptions objects[0m
2025-04-09T19:13:39.4808945Z     [32m  [32mâœ”[39m[0m[90m overwrites duplicate paths[0m
2025-04-09T19:13:39.4888685Z     [32m  [32mâœ”[39m[0m[90m accepts space delimited strings[0m
2025-04-09T19:13:39.4944971Z [0m    casting[0m
2025-04-09T19:13:39.4992704Z     [32m  [32mâœ”[39m[0m[90m to an array of mixed[0m
2025-04-09T19:13:39.5236398Z     [32m  [32mâœ”[39m[0m[90m doesn't wipe out $in (gh-6439)[0m
2025-04-09T19:13:39.5331244Z     [32m  [32mâœ”[39m[0m[90m find $ne should not cast single value to array for schematype of Array[0m
2025-04-09T19:13:39.5475552Z     [32m  [32mâœ”[39m[0m[90m subdocument array with $ne: null should not throw[0m
2025-04-09T19:13:39.5588716Z     [32m  [32mâœ”[39m[0m[90m find should not cast single value to array for schematype of Array[0m
2025-04-09T19:13:39.5733743Z     [32m  [32mâœ”[39m[0m[90m an $elemMatch with $in works (gh-1100)[0m
2025-04-09T19:13:39.5851027Z     [32m  [32mâœ”[39m[0m[90m inequality operators for an array[0m
2025-04-09T19:13:39.5970706Z [0m    distinct[0m
2025-04-09T19:13:39.6015092Z     [32m  [32mâœ”[39m[0m[90m op[0m
2025-04-09T19:13:39.6096838Z     [32m  [32mâœ”[39m[0m[90m using options parameter for distinct[0m
2025-04-09T19:13:39.6154993Z [0m    findOne[0m
2025-04-09T19:13:39.6203133Z     [32m  [32mâœ”[39m[0m[90m sets the op[0m
2025-04-09T19:13:39.6292268Z [0m    deleteOne/deleteMany[0m
2025-04-09T19:13:39.6485336Z     [32m  [32mâœ”[39m[0m[90m handles deleteOne[0m
2025-04-09T19:13:39.6718726Z     [32m  [32mâœ”[39m[0m[90m handles deleteMany[0m
2025-04-09T19:13:39.6781075Z [0m    deleteMany[0m
2025-04-09T19:13:39.6839730Z     [32m  [32mâœ”[39m[0m[90m handles cast errors async[0m
2025-04-09T19:13:39.7047613Z     [32m  [32mâœ”[39m[0m[90m supports a single conditions arg[0m
2025-04-09T19:13:39.7237067Z     [32m  [32mâœ”[39m[0m[90m supports a single callback arg[0m
2025-04-09T19:13:39.7427884Z     [32m  [32mâœ”[39m[0m[90m supports conditions and callback args[0m
2025-04-09T19:13:39.7519661Z [0m    querying/updating with model instance containing embedded docs should work (#454)[0m
2025-04-09T19:13:39.7684721Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:39.7748933Z [0m    optionsForExec[0m
2025-04-09T19:13:39.7794336Z     [32m  [32mâœ”[39m[0m[90m should retain key order[0m
2025-04-09T19:13:39.7876033Z     [32m  [32mâœ”[39m[0m[90m applies schema-level writeConcern option[0m
2025-04-09T19:13:39.7957170Z     [32m  [32mâœ”[39m[0m[90m session() (gh-6663)[0m
2025-04-09T19:13:39.8015573Z [0m    options[0m
2025-04-09T19:13:39.8026501Z [0m      tailable[0m
2025-04-09T19:13:39.8082557Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:39.8185374Z       [32m  [32mâœ”[39m[0m[90m supports passing the `awaitData` option[0m
2025-04-09T19:13:39.8256951Z [0m      comment[0m
2025-04-09T19:13:39.8312017Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:39.8380754Z [0m      hint[0m
2025-04-09T19:13:39.8435873Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:39.8505287Z [0m      batchSize[0m
2025-04-09T19:13:39.8560186Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:39.8629562Z [0m      read[0m
2025-04-09T19:13:39.8640360Z [0m        without tags[0m
2025-04-09T19:13:39.8707844Z         [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:39.8786776Z [0m        with tags[0m
2025-04-09T19:13:39.8852867Z         [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:39.8931177Z [0m        inherits its models schema read option[0m
2025-04-09T19:13:39.9001767Z         [32m  [32mâœ”[39m[0m[90m if not set in query[0m
2025-04-09T19:13:39.9123688Z         [32m  [32mâœ”[39m[0m[90m if set in query[0m
2025-04-09T19:13:39.9260211Z         [32m  [32mâœ”[39m[0m[90m and sends it though the driver[0m
2025-04-09T19:13:39.9363751Z [0m    setOptions[0m
2025-04-09T19:13:39.9409903Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:39.9500931Z     [32m  [32mâœ”[39m[0m[90m populate as array in options (gh-4446)[0m
2025-04-09T19:13:39.9559752Z [0m    bug fixes[0m
2025-04-09T19:13:39.9826829Z     [32m  [32mâœ”[39m[0m[90m excludes _id when select false and inclusive mode (gh-3010)[0m
2025-04-09T19:13:39.9943390Z     [32m  [32mâœ”[39m[0m[90m doesnt reverse key order for update docs (gh-3215)[0m
2025-04-09T19:13:40.0108298Z     [32m  [32mâœ”[39m[0m[90m timestamps with $each (gh-4805)[0m
2025-04-09T19:13:40.0244128Z     [32m  [32mâœ”[39m[0m[90m handles nested $ (gh-3265)[0m
2025-04-09T19:13:40.0391013Z     [32m  [32mâœ”[39m[0m[90m $geoWithin with single nested schemas (gh-4044)[0m
2025-04-09T19:13:40.0843910Z     [32m  [32mâœ”[39m[0m[90m setDefaultsOnInsert with empty update (gh-3825)[0m
2025-04-09T19:13:40.1059765Z     [32m  [32mâœ”[39m[0m[90m custom query methods (gh-3714)[0m
2025-04-09T19:13:40.1153657Z     [32m  [32mâœ”[39m[0m[90m string as input (gh-4378)[0m
2025-04-09T19:13:40.1464697Z     [32m  [32mâœ”[39m[0m[90m handles geoWithin with $center and mongoose object (gh-4419)[0m
2025-04-09T19:13:40.1565733Z     [32m  [32mâœ”[39m[0m[90m $not with objects (gh-4495)[0m
2025-04-09T19:13:40.1845422Z     [32m  [32mâœ”[39m[0m[90m geoIntersects with mongoose doc as coords (gh-4408)[0m
2025-04-09T19:13:40.1945756Z     [32m  [32mâœ”[39m[0m[90m string with $not (gh-4592)[0m
2025-04-09T19:13:40.2162673Z     [32m  [32mâœ”[39m[0m[90m does not cast undefined to null in mongoose (gh-6236)[0m
2025-04-09T19:13:40.2375602Z     [32m  [32mâœ”[39m[0m[90m runs query setters with _id field (gh-5351)[0m
2025-04-09T19:13:40.2479302Z     [32m  [32mâœ”[39m[0m[90m runs setters if query field is an array (gh-6277)[0m
2025-04-09T19:13:40.2592264Z     [32m  [32mâœ”[39m[0m[90m $exists under $not (gh-4933)[0m
2025-04-09T19:13:40.2801157Z     [32m  [32mâœ”[39m[0m[90m geojson underneath array (gh-5467)[0m
2025-04-09T19:13:40.3017699Z     [32m  [32mâœ”[39m[0m[90m slice respects schema projections (gh-5450)[0m
2025-04-09T19:13:40.3112827Z     [32m  [32mâœ”[39m[0m[90m overwrites when passing an object when path already set to primitive (gh-6097)[0m
2025-04-09T19:13:40.3237026Z     [32m  [32mâœ”[39m[0m[90m $exists for arrays and embedded docs (gh-4937)[0m
2025-04-09T19:13:40.3359067Z     [32m  [32mâœ”[39m[0m[90m report error in pre hook (gh-5520)[0m
2025-04-09T19:13:40.3471361Z     [32m  [32mâœ”[39m[0m[90m cast error with custom error (gh-5520)[0m
2025-04-09T19:13:40.3703026Z     [32m  [32mâœ”[39m[0m[90m change deleteOne to updateOne for soft deletes using $isDeleted (gh-4428)[0m
2025-04-09T19:13:40.3902205Z     [32m  [32mâœ”[39m[0m[90m child schema with select: false in multiple paths (gh-5603)[0m
2025-04-09T19:13:40.4562665Z     [32m  [32mâœ”[39m[0m[90m errors in post init (gh-5592)[0m[33m (58ms)[0m
2025-04-09T19:13:40.4658736Z     [32m  [32mâœ”[39m[0m[90m with non-object args (gh-1698)[0m
2025-04-09T19:13:41.2881768Z     [32m  [32mâœ”[39m[0m[90m queries with BSON overflow (gh-5812)[0m[31m (811ms)[0m
2025-04-09T19:13:41.3354710Z     [32m  [32mâœ”[39m[0m[90m explain() (gh-6625)[0m
2025-04-09T19:13:41.3564191Z     [32m  [32mâœ”[39m[0m[90m cast embedded discriminators with dot notation (gh-6027)[0m
2025-04-09T19:13:41.3770018Z     [32m  [32mâœ”[39m[0m[90m cast embedded discriminators with embedded obj (gh-6027)[0m
2025-04-09T19:13:41.3994875Z     [32m  [32mâœ”[39m[0m[90m cast embedded discriminators with $elemMatch discriminator key (gh-7449)[0m
2025-04-09T19:13:41.4243535Z     [32m  [32mâœ”[39m[0m[90m handles geoWithin with mongoose docs (gh-4392)[0m
2025-04-09T19:13:41.4300055Z [0m      collations[0m
2025-04-09T19:13:41.4657705Z       [32m  [32mâœ”[39m[0m[90m collation support (gh-4839)[0m
2025-04-09T19:13:41.4924135Z       [32m  [32mâœ”[39m[0m[90m set on schema (gh-5295)[0m
2025-04-09T19:13:41.4997922Z [0m      gh-1950[0m
2025-04-09T19:13:41.5173352Z       [32m  [32mâœ”[39m[0m[90m ignores sort when passed to countDocuments[0m
2025-04-09T19:13:41.5235386Z       [36m  - ignores count when passed to sort[0m
2025-04-09T19:13:41.5257320Z [0m    handles falsy and object projections with defaults (gh-3256)[0m
2025-04-09T19:13:41.5389820Z     [32m  [32mâœ”[39m[0m[90m falsy projection[0m
2025-04-09T19:13:41.5534142Z     [32m  [32mâœ”[39m[0m[90m slice projection[0m
2025-04-09T19:13:41.5673835Z     [32m  [32mâœ”[39m[0m[90m empty projection[0m
2025-04-09T19:13:41.5734871Z [0m    count[0m
2025-04-09T19:13:41.6395694Z     [32m  [32mâœ”[39m[0m[90m calls utils.toObject on conditions (gh-6323)[0m[33m (62ms)[0m
2025-04-09T19:13:41.6459122Z [0m    setQuery[0m
2025-04-09T19:13:41.6504375Z     [32m  [32mâœ”[39m[0m[90m replaces existing query with new value (gh-6854)[0m
2025-04-09T19:13:41.6563408Z [0m    orFail (gh-6841)[0m
2025-04-09T19:13:41.6702310Z     [32m  [32mâœ”[39m[0m[90m find()[0m
2025-04-09T19:13:41.6865814Z     [32m  [32mâœ”[39m[0m[90m findOne()[0m
2025-04-09T19:13:41.7024073Z     [32m  [32mâœ”[39m[0m[90m deleteMany()[0m
2025-04-09T19:13:41.7184882Z     [32m  [32mâœ”[39m[0m[90m deleteOne()[0m
2025-04-09T19:13:41.7342586Z     [32m  [32mâœ”[39m[0m[90m replaceOne()[0m
2025-04-09T19:13:41.7501805Z     [32m  [32mâœ”[39m[0m[90m updateMany()[0m
2025-04-09T19:13:41.7661703Z     [32m  [32mâœ”[39m[0m[90m updateOne()[0m
2025-04-09T19:13:41.7833619Z     [32m  [32mâœ”[39m[0m[90m findOneAndUpdate()[0m
2025-04-09T19:13:41.7990454Z     [32m  [32mâœ”[39m[0m[90m findOneAndDelete()[0m
2025-04-09T19:13:41.8259011Z     [32m  [32mâœ”[39m[0m[90m executes before post hooks (gh-7280)[0m
2025-04-09T19:13:41.8469254Z     [32m  [32mâœ”[39m[0m[90m throws DocumentNotFoundError by default execute (gh-7409)[0m
2025-04-09T19:13:41.8617399Z     [32m  [32mâœ”[39m[0m[90m does not fire on CastError (gh-13165)[0m
2025-04-09T19:13:41.8678542Z [0m    getPopulatedPaths[0m
2025-04-09T19:13:41.8735804Z     [32m  [32mâœ”[39m[0m[90m doesn't break on a query without population (gh-6677)[0m
2025-04-09T19:13:41.9022248Z     [32m  [32mâœ”[39m[0m[90m returns an array of populated paths as strings (gh-6677)[0m
2025-04-09T19:13:41.9118793Z     [32m  [32mâœ”[39m[0m[90m returns deep populated paths (gh-7757)[0m
2025-04-09T19:13:41.9298113Z [0m    setUpdate[0m
2025-04-09T19:13:41.9332868Z     [32m  [32mâœ”[39m[0m[90m replaces existing update doc with new value[0m
2025-04-09T19:13:41.9390236Z [0m    get() (gh-7312)[0m
2025-04-09T19:13:41.9435496Z     [32m  [32mâœ”[39m[0m[90m works with using $set[0m
2025-04-09T19:13:41.9516046Z     [32m  [32mâœ”[39m[0m[90m works with $set syntactic sugar[0m
2025-04-09T19:13:41.9597763Z     [32m  [32mâœ”[39m[0m[90m works with mixed[0m
2025-04-09T19:13:41.9803046Z     [32m  [32mâœ”[39m[0m[90m $set overwrites existing[0m
2025-04-09T19:13:41.9865603Z [0m    increments timestamps for arrays of nested subdocs (gh-4412)[0m
2025-04-09T19:13:42.0128835Z     [32m  [32mâœ”[39m[0m[90m $set nested property with numeric position[0m
2025-04-09T19:13:42.0432593Z     [32m  [32mâœ”[39m[0m[90m $set numeric element[0m
2025-04-09T19:13:42.0708933Z     [32m  [32mâœ”[39m[0m[90m $set with positional operator[0m
2025-04-09T19:13:42.0935608Z     [32m  [32mâœ”[39m[0m[90m $set with positional operator and array (gh-7106)[0m
2025-04-09T19:13:42.0998531Z [0m    merge()[0m
2025-04-09T19:13:42.1215896Z     [32m  [32mâœ”[39m[0m[90m copies populate() (gh-1790)[0m
2025-04-09T19:13:42.1282310Z [0m    Query#validate() (gh-7984)[0m
2025-04-09T19:13:42.1428475Z     [32m  [32mâœ”[39m[0m[90m middleware[0m
2025-04-09T19:13:42.1532270Z     [32m  [32mâœ”[39m[0m[90m pre("validate") errors (gh-7187)[0m
2025-04-09T19:13:42.1618260Z [0m    stack traces[0m
2025-04-09T19:13:42.1663329Z     [36m  - includes calling file for filter cast errors (gh-8691)[0m
2025-04-09T19:13:42.1721396Z [0m    clone[0m
2025-04-09T19:13:42.1935951Z     [32m  [32mâœ”[39m[0m[90m with findOne[0m
2025-04-09T19:13:42.2216924Z     [32m  [32mâœ”[39m[0m[90m with deleteOne[0m
2025-04-09T19:13:42.2588962Z     [32m  [32mâœ”[39m[0m[90m with updateOne[0m
2025-04-09T19:13:42.2857182Z     [32m  [32mâœ”[39m[0m[90m with distinct[0m
2025-04-09T19:13:42.3117367Z     [32m  [32mâœ”[39m[0m[90m with hooks (gh-12365)[0m
2025-04-09T19:13:42.3170305Z [0m    set()[0m
2025-04-09T19:13:42.3219099Z     [32m  [32mâœ”[39m[0m[90m overwrites top-level keys if setting to undefined (gh-12155)[0m
2025-04-09T19:13:42.3318027Z [0m    schemaLevelProjections (gh-11474)[0m
2025-04-09T19:13:42.3484714Z     [32m  [32mâœ”[39m[0m[90m disables schema-level select: false[0m
2025-04-09T19:13:42.3691066Z     [32m  [32mâœ”[39m[0m[90m disables schema-level select: true[0m
2025-04-09T19:13:42.3892318Z     [32m  [32mâœ”[39m[0m[90m works via setOptions()[0m
2025-04-09T19:13:42.4087181Z     [32m  [32mâœ”[39m[0m[90m disabled via truthy value[0m
2025-04-09T19:13:42.4185668Z 
2025-04-09T19:13:42.4186544Z [0m  model: populate: divergent arrays[0m
2025-04-09T19:13:42.4506931Z [0m    from match[0m
2025-04-09T19:13:42.4577509Z     [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-09T19:13:42.4662872Z     [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-09T19:13:42.4746616Z     [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-09T19:13:42.4789932Z [0m    from skip[0m
2025-04-09T19:13:42.4800868Z [0m      2[0m
2025-04-09T19:13:42.4874483Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-09T19:13:42.4978771Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-09T19:13:42.5082021Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-09T19:13:42.5135968Z [0m      0[0m
2025-04-09T19:13:42.5218010Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-09T19:13:42.5328285Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-09T19:13:42.5436939Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-09T19:13:42.5501808Z [0m    from limit[0m
2025-04-09T19:13:42.5512808Z [0m      0[0m
2025-04-09T19:13:42.5586903Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-09T19:13:42.5691580Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-09T19:13:42.5795767Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-09T19:13:42.5849777Z [0m      1[0m
2025-04-09T19:13:42.5922685Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-09T19:13:42.6026652Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-09T19:13:42.6130714Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-09T19:13:42.6195624Z [0m    from deselected _id[0m
2025-04-09T19:13:42.6206577Z [0m      using string and only -_id[0m
2025-04-09T19:13:42.6280423Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-09T19:13:42.6384762Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-09T19:13:42.6488500Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-09T19:13:42.6542281Z [0m      using string[0m
2025-04-09T19:13:42.6616280Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-09T19:13:42.6720547Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-09T19:13:42.6823857Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-09T19:13:42.6877888Z [0m      using object and only _id: 0[0m
2025-04-09T19:13:42.6950527Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-09T19:13:42.7054190Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-09T19:13:42.7157470Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-09T19:13:42.7211494Z [0m      using object[0m
2025-04-09T19:13:42.7283758Z       [32m  [32mâœ”[39m[0m[90m using $set[0m
2025-04-09T19:13:42.7387549Z       [32m  [32mâœ”[39m[0m[90m using $pop 1[0m
2025-04-09T19:13:42.7491172Z       [32m  [32mâœ”[39m[0m[90m using $pop -1[0m
2025-04-09T19:13:42.7597481Z 
2025-04-09T19:13:42.7643123Z [0m  model translate aliases[0m
2025-04-09T19:13:42.7643682Z   [32m  [32mâœ”[39m[0m[90m should translate correctly[0m
2025-04-09T19:13:42.7675290Z 
2025-04-09T19:13:42.7675798Z [0m  collections: capped:[0m
2025-04-09T19:13:42.7709703Z   [32m  [32mâœ”[39m[0m[90m schemas should have option size[0m
2025-04-09T19:13:42.8890041Z   [32m  [32mâœ”[39m[0m[90m creation[0m[31m (113ms)[0m
2025-04-09T19:13:42.9066303Z   [32m  [32mâœ”[39m[0m[90m skips when setting autoCreate to false (gh-8566)[0m
2025-04-09T19:13:42.9124868Z 
2025-04-09T19:13:42.9125491Z [0m  Double[0m
2025-04-09T19:13:42.9165268Z   [32m  [32mâœ”[39m[0m[90m is a valid schema type[0m
2025-04-09T19:13:42.9187032Z [0m    supports the required property[0m
2025-04-09T19:13:42.9238542Z     [32m  [32mâœ”[39m[0m[90m when value is null[0m
2025-04-09T19:13:42.9298942Z     [32m  [32mâœ”[39m[0m[90m when value is non-null[0m
2025-04-09T19:13:42.9342335Z [0m    special inputs[0m
2025-04-09T19:13:42.9389379Z     [32m  [32mâœ”[39m[0m[90m supports undefined as input[0m
2025-04-09T19:13:42.9458027Z     [32m  [32mâœ”[39m[0m[90m supports null as input[0m
2025-04-09T19:13:42.9501198Z [0m    valid casts[0m
2025-04-09T19:13:42.9549345Z     [32m  [32mâœ”[39m[0m[90m casts from decimal string[0m
2025-04-09T19:13:42.9617985Z     [32m  [32mâœ”[39m[0m[90m casts from exponential string[0m
2025-04-09T19:13:42.9676991Z     [32m  [32mâœ”[39m[0m[90m casts from infinite string[0m
2025-04-09T19:13:42.9745159Z     [32m  [32mâœ”[39m[0m[90m casts from NaN string[0m
2025-04-09T19:13:42.9813600Z     [32m  [32mâœ”[39m[0m[90m casts from number[0m
2025-04-09T19:13:42.9882150Z     [32m  [32mâœ”[39m[0m[90m casts from bigint[0m
2025-04-09T19:13:42.9951156Z     [32m  [32mâœ”[39m[0m[90m casts from BSON.Long[0m
2025-04-09T19:13:43.0019753Z     [32m  [32mâœ”[39m[0m[90m casts from BSON.Double[0m
2025-04-09T19:13:43.0087881Z     [32m  [32mâœ”[39m[0m[90m casts boolean true to 1[0m
2025-04-09T19:13:43.0155960Z     [32m  [32mâœ”[39m[0m[90m casts boolean false to 0[0m
2025-04-09T19:13:43.0224215Z     [32m  [32mâœ”[39m[0m[90m casts empty string to null[0m
2025-04-09T19:13:43.0292771Z     [32m  [32mâœ”[39m[0m[90m supports valueOf() function [0m
2025-04-09T19:13:43.0335821Z [0m    cast errors[0m
2025-04-09T19:13:43.0346938Z [0m      when a non-numeric string is provided to an Double field[0m
2025-04-09T19:13:43.0414299Z       [32m  [32mâœ”[39m[0m[90m throws a CastError upon validation[0m
2025-04-09T19:13:43.0479464Z [0m    custom casters[0m
2025-04-09T19:13:43.0531478Z     [32m  [32mâœ”[39m[0m[90m supports cast disabled[0m
2025-04-09T19:13:43.0600971Z     [32m  [32mâœ”[39m[0m[90m supports custom cast[0m
2025-04-09T19:13:43.0644595Z [0m    mongoDB integration[0m
2025-04-09T19:13:43.0774583Z     [32m  [32mâœ”[39m[0m[90m can query with comparison operators[0m
2025-04-09T19:13:43.1030229Z     [32m  [32mâœ”[39m[0m[90m supports populate()[0m
2025-04-09T19:13:43.1062822Z [0m      $type compatibility[0m
2025-04-09T19:13:43.1137322Z       [32m  [32mâœ”[39m[0m[90m is queryable as a JS number in MongoDB[0m
2025-04-09T19:13:43.1244176Z       [32m  [32mâœ”[39m[0m[90m is NOT queryable as a BSON Integer in MongoDB if the value is NOT integer[0m
2025-04-09T19:13:43.1349678Z       [32m  [32mâœ”[39m[0m[90m is queryable as a BSON Double in MongoDB when a non-integer is provided[0m
2025-04-09T19:13:43.1456082Z       [32m  [32mâœ”[39m[0m[90m is queryable as a BSON Double in MongoDB when an integer is provided[0m
2025-04-09T19:13:43.1554504Z 
2025-04-09T19:13:43.1554877Z [0m  geojson[0m
2025-04-09T19:13:43.1749222Z   [32m  [32mâœ”[39m[0m[90m driver query[0m
2025-04-09T19:13:43.1940247Z   [32m  [32mâœ”[39m[0m[90m within helper[0m
2025-04-09T19:13:43.2144517Z   [32m  [32mâœ”[39m[0m[90m index[0m
2025-04-09T19:13:43.2352012Z   [32m  [32mâœ”[39m[0m[90m near[0m
2025-04-09T19:13:43.2420247Z 
2025-04-09T19:13:43.2420599Z [0m  sharding[0m
2025-04-09T19:13:43.2455719Z   [32m  [32mâœ”[39m[0m[90m should handle shard keys properly (gh-2127)[0m
2025-04-09T19:13:43.2487576Z 
2025-04-09T19:13:43.2487873Z [0m  toObject()[0m
2025-04-09T19:13:43.2522863Z   [32m  [32mâœ”[39m[0m[90m should inherit options from schema[0m
2025-04-09T19:13:43.2567300Z   [32m  [32mâœ”[39m[0m[90m can overwrite schema-set default options[0m
2025-04-09T19:13:43.2611811Z   [32m  [32mâœ”[39m[0m[90m doesnt crash with empty object (gh-3130)[0m
2025-04-09T19:13:43.2643915Z 
2025-04-09T19:13:43.2644350Z [0m  SchemaType.cast() (gh-7045)[0m
2025-04-09T19:13:43.2682449Z   [32m  [32mâœ”[39m[0m[90m with inheritance[0m
2025-04-09T19:13:43.2733857Z   [32m  [32mâœ”[39m[0m[90m handles objectid[0m
2025-04-09T19:13:43.2779893Z   [32m  [32mâœ”[39m[0m[90m handles disabling casting[0m
2025-04-09T19:13:43.2828200Z   [32m  [32mâœ”[39m[0m[90m handles boolean[0m
2025-04-09T19:13:43.2874497Z   [32m  [32mâœ”[39m[0m[90m handles disabling casting[0m
2025-04-09T19:13:43.2896400Z [0m    string[0m
2025-04-09T19:13:43.2944956Z     [32m  [32mâœ”[39m[0m[90m supports custom cast functions[0m
2025-04-09T19:13:43.3012413Z     [32m  [32mâœ”[39m[0m[90m supports disabling casting[0m
2025-04-09T19:13:43.3055968Z [0m    date[0m
2025-04-09T19:13:43.3104248Z     [32m  [32mâœ”[39m[0m[90m supports custom cast functions[0m
2025-04-09T19:13:43.3171711Z     [32m  [32mâœ”[39m[0m[90m supports disabling casting[0m
2025-04-09T19:13:43.3215204Z [0m    decimal128[0m
2025-04-09T19:13:43.3264256Z     [32m  [32mâœ”[39m[0m[90m supports custom cast functions[0m
2025-04-09T19:13:43.3339896Z     [32m  [32mâœ”[39m[0m[90m supports disabling casting[0m
2025-04-09T19:13:43.3393793Z 
2025-04-09T19:13:43.3394271Z [0m  model middleware[0m
2025-04-09T19:13:43.3546012Z   [32m  [32mâœ”[39m[0m[90m post save[0m
2025-04-09T19:13:43.3804699Z   [32m  [32mâœ”[39m[0m[90m sync error in post save (gh-3483)[0m
2025-04-09T19:13:43.4891561Z   [32m  [32mâœ”[39m[0m[90m pre hook promises (gh-3779)[0m[31m (103ms)[0m
2025-04-09T19:13:43.6078912Z   [32m  [32mâœ”[39m[0m[90m post hook promises (gh-3779)[0m[31m (112ms)[0m
2025-04-09T19:13:43.6245120Z   [32m  [32mâœ”[39m[0m[90m validate middleware runs before save middleware (gh-2462)[0m
2025-04-09T19:13:43.6322957Z   [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:43.6538635Z   [32m  [32mâœ”[39m[0m[90m gh-1829[0m
2025-04-09T19:13:43.6717300Z   [32m  [32mâœ”[39m[0m[90m sync error in pre save (gh-3483)[0m
2025-04-09T19:13:43.6888336Z   [32m  [32mâœ”[39m[0m[90m sync error in pre save after next() (gh-3483)[0m
2025-04-09T19:13:43.7056055Z   [32m  [32mâœ”[39m[0m[90m validate + remove[0m
2025-04-09T19:13:43.7252975Z   [32m  [32mâœ”[39m[0m[90m static hooks (gh-5982)[0m
2025-04-09T19:13:43.7434845Z   [32m  [32mâœ”[39m[0m[90m deleteOne hooks (gh-7538)[0m
2025-04-09T19:13:43.7476037Z [0m    post init hooks[0m
2025-04-09T19:13:43.7644290Z     [32m  [32mâœ”[39m[0m[90m success[0m
2025-04-09T19:13:43.7857871Z     [32m  [32mâœ”[39m[0m[90m with errors[0m
2025-04-09T19:13:43.7917866Z [0m    createCollection middleware[0m
2025-04-09T19:13:43.8023885Z     [32m  [32mâœ”[39m[0m[90m calls createCollection hooks[0m
2025-04-09T19:13:43.8117062Z     [32m  [32mâœ”[39m[0m[90m allows skipping createCollection from hooks[0m
2025-04-09T19:13:43.8175442Z [0m    bulkWrite middleware[0m
2025-04-09T19:13:43.8232581Z     [32m  [32mâœ”[39m[0m[90m calls bulkWrite hooks[0m
2025-04-09T19:13:43.8494644Z     [32m  [32mâœ”[39m[0m[90m allows updating ops[0m
2025-04-09T19:13:43.8691834Z     [32m  [32mâœ”[39m[0m[90m supports error handlers[0m
2025-04-09T19:13:43.8909739Z     [32m  [32mâœ”[39m[0m[90m supports skipping wrapped function[0m
2025-04-09T19:13:43.9004202Z 
2025-04-09T19:13:43.9004709Z [0m  schema.documentarray[0m
2025-04-09T19:13:43.9057007Z   [32m  [32mâœ”[39m[0m[90m defaults should be preserved[0m
2025-04-09T19:13:43.9113843Z   [32m  [32mâœ”[39m[0m[90m only sets if document has same schema (gh-3701)[0m
2025-04-09T19:13:43.9161640Z   [32m  [32mâœ”[39m[0m[90m sets $implicitlyCreated if created by interpretAsType (gh-4271)[0m
2025-04-09T19:13:43.9207880Z   [32m  [32mâœ”[39m[0m[90m propagates strictQuery to implicitly created schemas (gh-12796)[0m
2025-04-09T19:13:43.9260933Z   [32m  [32mâœ”[39m[0m[90m supports set with array of document arrays (gh-7799)[0m
2025-04-09T19:13:43.9312003Z   [32m  [32mâœ”[39m[0m[90m supports `set()` (gh-8883)[0m
2025-04-09T19:13:43.9358710Z   [32m  [32mâœ”[39m[0m[90m handles default function that returns null (gh-11058)[0m
2025-04-09T19:13:43.9411749Z   [32m  [32mâœ”[39m[0m[90m doValidate() validates entire subdocument (gh-11770)[0m
2025-04-09T19:13:43.9443705Z 
2025-04-09T19:13:43.9444532Z [0m  Int32[0m
2025-04-09T19:13:43.9483460Z   [32m  [32mâœ”[39m[0m[90m is a valid schema type[0m
2025-04-09T19:13:43.9505224Z [0m    supports the required property[0m
2025-04-09T19:13:43.9555043Z     [32m  [32mâœ”[39m[0m[90m when value is null[0m
2025-04-09T19:13:43.9625917Z     [32m  [32mâœ”[39m[0m[90m when value is non-null[0m
2025-04-09T19:13:43.9669283Z [0m    special inputs[0m
2025-04-09T19:13:43.9716894Z     [32m  [32mâœ”[39m[0m[90m supports INT32_MIN as input[0m
2025-04-09T19:13:43.9785509Z     [32m  [32mâœ”[39m[0m[90m supports INT32_MAX as input[0m
2025-04-09T19:13:43.9854124Z     [32m  [32mâœ”[39m[0m[90m supports undefined as input[0m
2025-04-09T19:13:43.9922762Z     [32m  [32mâœ”[39m[0m[90m supports null as input[0m
2025-04-09T19:13:43.9965699Z [0m    valid casts[0m
2025-04-09T19:13:44.0013701Z     [32m  [32mâœ”[39m[0m[90m casts from string[0m
2025-04-09T19:13:44.0082289Z     [32m  [32mâœ”[39m[0m[90m casts from number[0m
2025-04-09T19:13:44.0151246Z     [32m  [32mâœ”[39m[0m[90m casts from bigint[0m
2025-04-09T19:13:44.0220585Z     [32m  [32mâœ”[39m[0m[90m casts from BSON.Int32[0m
2025-04-09T19:13:44.0289361Z     [32m  [32mâœ”[39m[0m[90m casts from BSON.Double provided its value is an integer[0m
2025-04-09T19:13:44.0346731Z     [32m  [32mâœ”[39m[0m[90m casts boolean true to 1[0m
2025-04-09T19:13:44.0415117Z     [32m  [32mâœ”[39m[0m[90m casts boolean false to 0[0m
2025-04-09T19:13:44.0482958Z     [32m  [32mâœ”[39m[0m[90m casts empty string to null[0m
2025-04-09T19:13:44.0551619Z     [32m  [32mâœ”[39m[0m[90m supports valueOf() function [0m
2025-04-09T19:13:44.0583923Z [0m      long[0m
2025-04-09T19:13:44.0642799Z       [32m  [32mâœ”[39m[0m[90m casts from BSON.Long provided its value is within bounds of Int32[0m
2025-04-09T19:13:44.0738892Z       [32m  [32mâœ”[39m[0m[90m calls Long.toNumber when casting long[0m
2025-04-09T19:13:44.0804318Z [0m    cast errors[0m
2025-04-09T19:13:44.0815584Z [0m      when a non-integer decimal input is provided to an Int32 field[0m
2025-04-09T19:13:44.0881921Z       [32m  [32mâœ”[39m[0m[90m throws a CastError upon validation[0m
2025-04-09T19:13:44.0936017Z [0m      when a non-numeric string is provided to an Int32 field[0m
2025-04-09T19:13:44.1000166Z       [32m  [32mâœ”[39m[0m[90m throws a CastError upon validation[0m
2025-04-09T19:13:44.1054194Z [0m      when a non-integer decimal string is provided to an Int32 field[0m
2025-04-09T19:13:44.1117962Z       [32m  [32mâœ”[39m[0m[90m throws a CastError upon validation[0m
2025-04-09T19:13:44.1171982Z [0m      when NaN is provided to an Int32 field[0m
2025-04-09T19:13:44.1235518Z       [32m  [32mâœ”[39m[0m[90m throws a CastError upon validation[0m
2025-04-09T19:13:44.1289587Z [0m      when value above INT32_MAX is provided to an Int32 field[0m
2025-04-09T19:13:44.1353180Z       [32m  [32mâœ”[39m[0m[90m throws a CastError upon validation[0m
2025-04-09T19:13:44.1407177Z [0m      when value below INT32_MIN is provided to an Int32 field[0m
2025-04-09T19:13:44.1471393Z       [32m  [32mâœ”[39m[0m[90m throws a CastError upon validation[0m
2025-04-09T19:13:44.1535791Z [0m    custom casters[0m
2025-04-09T19:13:44.1587551Z     [32m  [32mâœ”[39m[0m[90m supports cast disabled[0m
2025-04-09T19:13:44.1646413Z     [32m  [32mâœ”[39m[0m[90m supports custom cast[0m
2025-04-09T19:13:44.1690001Z [0m    mongoDB integration[0m
2025-04-09T19:13:44.1914011Z     [32m  [32mâœ”[39m[0m[90m can query with comparison operators[0m
2025-04-09T19:13:44.2159286Z     [32m  [32mâœ”[39m[0m[90m supports populate()[0m
2025-04-09T19:13:44.2181058Z [0m      $type compatibility[0m
2025-04-09T19:13:44.2277753Z       [32m  [32mâœ”[39m[0m[90m is queryable as a JS number in MongoDB[0m
2025-04-09T19:13:44.2382641Z       [32m  [32mâœ”[39m[0m[90m is queryable as a BSON Int32 in MongoDB[0m
2025-04-09T19:13:44.2486152Z       [32m  [32mâœ”[39m[0m[90m is NOT queryable as a BSON Double in MongoDB[0m
2025-04-09T19:13:44.2583716Z 
2025-04-09T19:13:44.2584255Z [0m  discriminator docs[0m
2025-04-09T19:13:44.2682008Z   [32m  [32mâœ”[39m[0m[90m The `model.discriminator()` function[0m
2025-04-09T19:13:44.3076394Z   [32m  [32mâœ”[39m[0m[90m Discriminators save to the Event model's collection[0m
2025-04-09T19:13:44.3130396Z   [32m  [32mâœ”[39m[0m[90m Discriminator keys[0m
2025-04-09T19:13:44.3209354Z   [32m  [32mâœ”[39m[0m[90m Update discriminator key[0m
2025-04-09T19:13:44.3276078Z   [32m  [32mâœ”[39m[0m[90m use overwriteDiscriminatorKey to change discriminator key[0m
2025-04-09T19:13:44.3346418Z   [32m  [32mâœ”[39m[0m[90m Discriminators add the discriminator key to queries[0m
2025-04-09T19:13:44.3409004Z   [32m  [32mâœ”[39m[0m[90m Discriminators copy pre and post hooks[0m
2025-04-09T19:13:44.3466644Z   [32m  [32mâœ”[39m[0m[90m Handling custom _id fields[0m
2025-04-09T19:13:44.3849445Z   [32m  [32mâœ”[39m[0m[90m Using discriminators with `Model.create()`[0m
2025-04-09T19:13:44.4025172Z   [32m  [32mâœ”[39m[0m[90m Embedded discriminators in arrays[0m
2025-04-09T19:13:44.4210807Z   [32m  [32mâœ”[39m[0m[90m Recursive embedded discriminators in arrays[0m
2025-04-09T19:13:44.4272371Z   [32m  [32mâœ”[39m[0m[90m Single nested discriminators[0m
2025-04-09T19:13:44.4337013Z 
2025-04-09T19:13:44.4337544Z [0m  getters/setters[0m
2025-04-09T19:13:44.4371722Z [0m    getters[0m
2025-04-09T19:13:44.4425017Z     [32m  [32mâœ”[39m[0m[90m basic example[0m
2025-04-09T19:13:44.4495027Z     [32m  [32mâœ”[39m[0m[90m skip[0m
2025-04-09T19:13:44.4532415Z [0m    setters[0m
2025-04-09T19:13:44.4580544Z     [32m  [32mâœ”[39m[0m[90m basic[0m
2025-04-09T19:13:44.4679766Z     [32m  [32mâœ”[39m[0m[90m updates[0m
2025-04-09T19:13:44.4765543Z     [32m  [32mâœ”[39m[0m[90m update skip[0m
2025-04-09T19:13:44.4831380Z     [32m  [32mâœ”[39m[0m[90m vs ES6[0m
2025-04-09T19:13:44.4874680Z [0m    localization[0m
2025-04-09T19:13:44.5145589Z     [32m  [32mâœ”[39m[0m[90m locale[0m
2025-04-09T19:13:44.5229312Z 
2025-04-09T19:13:44.5229914Z [0m  debug: shell[0m
2025-04-09T19:13:44.5300811Z   [32m  [32mâœ”[39m[0m[90m no-shell[0m
2025-04-09T19:13:44.5354559Z   [32m  [32mâœ”[39m[0m[90m shell[0m
2025-04-09T19:13:44.5558721Z   [32m  [32mâœ”[39m[0m[90m should allow to set the `debug` option on a per-connection basis (gh-12700)[0m
2025-04-09T19:13:44.5768653Z   [32m  [32mâœ”[39m[0m[90m should avoid sending null session option with document ops (gh-13052)[0m
2025-04-09T19:13:44.5855012Z 
2025-04-09T19:13:44.5855508Z [0m  Virtuals[0m
2025-04-09T19:13:44.5932071Z   [32m  [32mâœ”[39m[0m[90m basic[0m
2025-04-09T19:13:44.5981212Z   [32m  [32mâœ”[39m[0m[90m fullName[0m
2025-04-09T19:13:44.6035063Z   [32m  [32mâœ”[39m[0m[90m toJSON[0m
2025-04-09T19:13:44.6103962Z   [32m  [32mâœ”[39m[0m[90m lean[0m
2025-04-09T19:13:44.6170526Z   [32m  [32mâœ”[39m[0m[90m in query[0m
2025-04-09T19:13:44.6349923Z   [32m  [32mâœ”[39m[0m[90m populate[0m
2025-04-09T19:13:44.6399367Z   [32m  [32mâœ”[39m[0m[90m schema-options fullName[0m
2025-04-09T19:13:44.6497041Z   [32m  [32mâœ”[39m[0m[90m schema-options populate[0m
2025-04-09T19:13:44.6557909Z 
2025-04-09T19:13:44.6558355Z [0m  Cast Tutorial[0m
2025-04-09T19:13:44.6733031Z   [32m  [32mâœ”[39m[0m[90m get and set[0m
2025-04-09T19:13:44.6786420Z   [32m  [32mâœ”[39m[0m[90m cast values[0m
2025-04-09T19:13:44.6837383Z   [32m  [32mâœ”[39m[0m[90m cast error[0m
2025-04-09T19:13:44.6888314Z   [32m  [32mâœ”[39m[0m[90m not in schema[0m
2025-04-09T19:13:44.6946022Z   [32m  [32mâœ”[39m[0m[90m strictQuery true[0m
2025-04-09T19:13:44.6998460Z   [32m  [32mâœ”[39m[0m[90m strictQuery throw[0m
2025-04-09T19:13:44.7050041Z   [32m  [32mâœ”[39m[0m[90m strictQuery removes casted empty objects[0m
2025-04-09T19:13:44.7100872Z   [32m  [32mâœ”[39m[0m[90m implicit in[0m
2025-04-09T19:13:44.7150793Z 
2025-04-09T19:13:44.7151132Z [0m  Advanced Schemas[0m
2025-04-09T19:13:44.7320590Z   [32m  [32mâœ”[39m[0m[90m Creating from ES6 Classes Using `loadClass()`[0m
2025-04-09T19:13:44.7370066Z 
2025-04-09T19:13:44.7370410Z [0m  Lean Tutorial[0m
2025-04-09T19:13:44.7424553Z   [36m  - compare sizes lean vs not lean[0m
2025-04-09T19:13:44.7489579Z   [32m  [32mâœ”[39m[0m[90m compare types[0m
2025-04-09T19:13:44.7651954Z   [32m  [32mâœ”[39m[0m[90m getters and virtuals[0m
2025-04-09T19:13:44.7825510Z   [32m  [32mâœ”[39m[0m[90m conventional populate[0m
2025-04-09T19:13:44.7924691Z   [32m  [32mâœ”[39m[0m[90m virtual populate[0m
2025-04-09T19:13:44.8002407Z   [32m  [32mâœ”[39m[0m[90m bigint[0m
2025-04-09T19:13:44.8064181Z 
2025-04-09T19:13:44.8109914Z [0m  custom casting[0m
2025-04-09T19:13:44.8110338Z   [32m  [32mâœ”[39m[0m[90m casting error[0m
2025-04-09T19:13:44.8158255Z   [32m  [32mâœ”[39m[0m[90m casting override[0m
2025-04-09T19:13:44.8190664Z 
2025-04-09T19:13:44.8191020Z [0m  defaults docs[0m
2025-04-09T19:13:44.8278183Z   [32m  [32mâœ”[39m[0m[90m Declaring defaults in your schema[0m
2025-04-09T19:13:44.8327008Z   [32m  [32mâœ”[39m[0m[90m Default functions[0m
2025-04-09T19:13:44.8496532Z   [32m  [32mâœ”[39m[0m[90m The `setDefaultsOnInsert` option[0m
2025-04-09T19:13:44.8546061Z   [32m  [32mâœ”[39m[0m[90m Default functions and `this`[0m
2025-04-09T19:13:44.8591766Z 
2025-04-09T19:13:44.8592273Z [0m  validation docs[0m
2025-04-09T19:13:44.8641126Z   [32m  [32mâœ”[39m[0m[90m Validation[0m
2025-04-09T19:13:44.8700045Z   [32m  [32mâœ”[39m[0m[90m Built-in Validators[0m
2025-04-09T19:13:44.8754001Z   [32m  [32mâœ”[39m[0m[90m Custom Error Messages[0m
2025-04-09T19:13:44.9087082Z   [32m  [32mâœ”[39m[0m[90m The `unique` Option is Not a Validator[0m
2025-04-09T19:13:44.9138618Z   [32m  [32mâœ”[39m[0m[90m Custom Validators[0m
2025-04-09T19:13:44.9183370Z   [32m  [32mâœ”[39m[0m[90m Async Custom Validators[0m
2025-04-09T19:13:44.9236262Z   [32m  [32mâœ”[39m[0m[90m Validation Errors[0m
2025-04-09T19:13:44.9292076Z   [32m  [32mâœ”[39m[0m[90m Cast Errors[0m
2025-04-09T19:13:44.9348237Z   [32m  [32mâœ”[39m[0m[90m Cast Error Message Overwrite[0m
2025-04-09T19:13:44.9394357Z   [32m  [32mâœ”[39m[0m[90m Cast Error Message Function Overwrite[0m
2025-04-09T19:13:44.9440653Z   [32m  [32mâœ”[39m[0m[90m Global SchemaType Validation[0m
2025-04-09T19:13:44.9498401Z   [32m  [32mâœ”[39m[0m[90m Required Validators On Nested Objects[0m
2025-04-09T19:13:44.9546163Z   [32m  [32mâœ”[39m[0m[90m Update Validators[0m
2025-04-09T19:13:44.9602627Z   [32m  [32mâœ”[39m[0m[90m Update Validators and `this`[0m
2025-04-09T19:13:44.9658146Z   [32m  [32mâœ”[39m[0m[90m Update Validators Only Run On Updated Paths[0m
2025-04-09T19:13:44.9733844Z   [32m  [32mâœ”[39m[0m[90m Update Validators Only Run For Some Operations[0m
2025-04-09T19:13:44.9793681Z 
2025-04-09T19:13:44.9794277Z [0m  Date Tutorial[0m
2025-04-09T19:13:44.9841724Z   [32m  [32mâœ”[39m[0m[90m Example 1.2: casts strings to dates[0m
2025-04-09T19:13:44.9891909Z   [32m  [32mâœ”[39m[0m[90m Example 1.3: cast error[0m
2025-04-09T19:13:44.9945158Z   [32m  [32mâœ”[39m[0m[90m Example 1.2.1: min, max[0m
2025-04-09T19:13:45.0005418Z   [32m  [32mâœ”[39m[0m[90m Example 1.4.1: moment[0m
2025-04-09T19:13:45.0047308Z   [32m  [32mâœ”[39m[0m[90m Example 1.4.3: numeric strings[0m
2025-04-09T19:13:45.0068896Z [0m    Example 1.3.1[0m
2025-04-09T19:13:45.0376826Z     [32m  [32mâœ”[39m[0m[90m date queries[0m
2025-04-09T19:13:45.0450318Z 
2025-04-09T19:13:45.0450706Z [0m  schemaTypes[0m
2025-04-09T19:13:45.0500584Z   [32m  [32mâœ”[39m[0m[90m Creating a Basic Custom Schema Type[0m
2025-04-09T19:13:45.0556092Z 
2025-04-09T19:13:45.0556680Z [0m  transactions[0m
2025-04-09T19:13:45.0569820Z   [36m  - basic example[0m
2025-04-09T19:13:45.0570455Z   [36m  - withTransaction[0m
2025-04-09T19:13:45.0570981Z   [36m  - abort[0m
2025-04-09T19:13:45.0571410Z   [36m  - save[0m
2025-04-09T19:13:45.0571925Z   [36m  - create (gh-6909)[0m
2025-04-09T19:13:45.0572457Z   [36m  - aggregate[0m
2025-04-09T19:13:45.0573291Z   [36m  - deleteOne and deleteMany (gh-7857)(gh-6805)[0m
2025-04-09T19:13:45.0574080Z   [36m  - remove, update, updateOne (gh-7455)[0m
2025-04-09T19:13:45.0574705Z   [36m  - distinct (gh-8006)[0m
2025-04-09T19:13:45.0575326Z   [36m  - save() with no changes (gh-8571)[0m
2025-04-09T19:13:45.0575998Z   [36m  - transaction() resets $isNew on error[0m
2025-04-09T19:13:45.0577126Z   [36m  - transaction() resets $isNew between retries (gh-13698)[0m
2025-04-09T19:13:45.0578048Z   [36m  - handles resetting array state with $set atomic (gh-13698)[0m
2025-04-09T19:13:45.0579564Z   [36m  - transaction() retains modified status for documents created outside of the transaction then modified inside the transaction (gh-13973)[0m
2025-04-09T19:13:45.0581143Z   [36m  - transaction() avoids duplicating atomic operations (gh-14848)[0m
2025-04-09T19:13:45.0582170Z   [36m  - doesnt apply schema write concern to transaction operations (gh-11382)[0m
2025-04-09T19:13:45.0583570Z   [36m  - allows custom transaction wrappers to store and reset document state with $createModifiedPathsSnapshot (gh-14268)[0m
2025-04-09T19:13:45.0584911Z   [36m  - throws error if using `create()` with multiple docs in a transaction (gh-15091)[0m
2025-04-09T19:13:45.0585741Z [0m    populate (gh-6754)[0m
2025-04-09T19:13:45.0590872Z     [36m  - `populate()` uses the querys session[0m
2025-04-09T19:13:45.0591500Z     [36m  - can override `populate()` session[0m
2025-04-09T19:13:45.0592052Z     [36m  - `Document#populate()` uses the documents `$session()` by default[0m
2025-04-09T19:13:45.0592591Z     [36m  - `Document#populate()` supports overwriting the session[0m
2025-04-09T19:13:45.0601560Z [0m    transactionAsyncLocalStorage option[0m
2025-04-09T19:13:45.0612929Z     [36m  - transaction() sets `session` by default if transactionAsyncLocalStorage option is set[0m
2025-04-09T19:13:45.0633995Z 
2025-04-09T19:13:45.0634881Z [0m  Tutorial: findOneAndUpdate()[0m
2025-04-09T19:13:45.0950334Z   [32m  [32mâœ”[39m[0m[90m basic case[0m
2025-04-09T19:13:45.1019314Z   [32m  [32mâœ”[39m[0m[90m new option[0m
2025-04-09T19:13:45.1088848Z   [32m  [32mâœ”[39m[0m[90m returnOriginal option[0m
2025-04-09T19:13:45.1174043Z   [32m  [32mâœ”[39m[0m[90m save race condition[0m
2025-04-09T19:13:45.1257098Z   [32m  [32mâœ”[39m[0m[90m upsert[0m
2025-04-09T19:13:45.1338876Z   [32m  [32mâœ”[39m[0m[90m includeResultMetadata[0m
2025-04-09T19:13:45.1398944Z 
2025-04-09T19:13:45.1399400Z [0m  asyncIterator[0m
2025-04-09T19:13:45.1744959Z   [32m  [32mâœ”[39m[0m[90m supports for/await/of on a query (gh-6737)[0m
2025-04-09T19:13:45.1830111Z   [32m  [32mâœ”[39m[0m[90m supports for/await/of on a aggregation (gh-6737)[0m
2025-04-09T19:13:45.1914963Z   [32m  [32mâœ”[39m[0m[90m supports for/await/of on a query cursor (gh-9403)[0m
2025-04-09T19:13:45.1997566Z   [32m  [32mâœ”[39m[0m[90m supports for/await/of on a aggregation cursor (gh-9403)[0m
2025-04-09T19:13:45.2049929Z 
2025-04-09T19:13:45.2050421Z [0m  promises docs[0m
2025-04-09T19:13:45.2214615Z   [32m  [32mâœ”[39m[0m[90m Built-in Promises[0m
2025-04-09T19:13:45.2275482Z   [32m  [32mâœ”[39m[0m[90m Queries are not promises[0m
2025-04-09T19:13:45.2331412Z   [32m  [32mâœ”[39m[0m[90m Queries are thenable[0m
2025-04-09T19:13:45.2385857Z   [36m  - Should You Use `exec()` With `await`?[0m
2025-04-09T19:13:45.2445570Z 
2025-04-09T19:13:45.2446126Z [0m  getSchemaTypes[0m
2025-04-09T19:13:45.2490145Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators (gh-5970)[0m
2025-04-09T19:13:45.2546402Z   [32m  [32mâœ”[39m[0m[90m multiple embedded discriminators (gh-6064)[0m
2025-04-09T19:13:45.2603254Z   [32m  [32mâœ”[39m[0m[90m handles already populated paths (gh-6798)[0m
2025-04-09T19:13:45.2654995Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators in nested arrays (gh-9984)[0m
2025-04-09T19:13:45.2701834Z   [32m  [32mâœ”[39m[0m[90m finds path underneath nested subdocument with map of mixed (gh-12530)[0m
2025-04-09T19:13:45.2733568Z 
2025-04-09T19:13:45.2733983Z [0m  isExclusive[0m
2025-04-09T19:13:45.2767290Z   [32m  [32mâœ”[39m[0m[90m handles $elemMatch (gh-14893)[0m
2025-04-09T19:13:45.2799205Z 
2025-04-09T19:13:45.2799497Z [0m  isIndexSpecEqual[0m
2025-04-09T19:13:45.2833061Z   [32m  [32mâœ”[39m[0m[90m should return true for equal index specifications[0m
2025-04-09T19:13:45.2876708Z   [32m  [32mâœ”[39m[0m[90m should return false for different key order[0m
2025-04-09T19:13:45.2920199Z   [32m  [32mâœ”[39m[0m[90m should return false for different index keys[0m
2025-04-09T19:13:45.2952141Z 
2025-04-09T19:13:45.2952449Z [0m  castArrayFilters[0m
2025-04-09T19:13:45.2989423Z   [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:45.3038363Z   [32m  [32mâœ”[39m[0m[90m casts multiple[0m
2025-04-09T19:13:45.3087402Z   [32m  [32mâœ”[39m[0m[90m casts on multiple fields[0m
2025-04-09T19:13:45.3136746Z   [32m  [32mâœ”[39m[0m[90m sane error on same filter twice[0m
2025-04-09T19:13:45.3183926Z   [32m  [32mâœ”[39m[0m[90m using $in (gh-7431)[0m
2025-04-09T19:13:45.3232775Z   [32m  [32mâœ”[39m[0m[90m all positional operator works (gh-7540)[0m
2025-04-09T19:13:45.3281188Z   [32m  [32mâœ”[39m[0m[90m handles deeply nested arrays (gh-7603)[0m
2025-04-09T19:13:45.3330631Z   [32m  [32mâœ”[39m[0m[90m respects `strictQuery` option (gh-7728)[0m
2025-04-09T19:13:45.3376617Z   [32m  [32mâœ”[39m[0m[90m respects `strict` override (gh-11062)[0m
2025-04-09T19:13:45.3422544Z   [32m  [32mâœ”[39m[0m[90m respects `$or` option (gh-10696)[0m
2025-04-09T19:13:45.3470530Z   [32m  [32mâœ”[39m[0m[90m respects global strictQuery option (gh-11836)[0m
2025-04-09T19:13:45.3525196Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators (gh-12565)[0m
2025-04-09T19:13:45.3574015Z   [32m  [32mâœ”[39m[0m[90m correctly casts array of strings underneath doc array (gh-12565)[0m
2025-04-09T19:13:45.3606060Z 
2025-04-09T19:13:45.3606479Z [0m  isMongooseObject[0m
2025-04-09T19:13:45.3639583Z   [32m  [32mâœ”[39m[0m[90m is when value.$__ != null[0m
2025-04-09T19:13:45.3683522Z   [32m  [32mâœ”[39m[0m[90m is when value is a MongooseArray[0m
2025-04-09T19:13:45.3727317Z   [32m  [32mâœ”[39m[0m[90m is when value.isMongooseBuffer is truthy[0m
2025-04-09T19:13:45.3770967Z   [32m  [32mâœ”[39m[0m[90m is when value.$isMongooseMap is truthy[0m
2025-04-09T19:13:45.3815045Z   [32m  [32mâœ”[39m[0m[90m is not when anything else[0m
2025-04-09T19:13:45.3847104Z 
2025-04-09T19:13:45.3847375Z [0m  setDottedPath[0m
2025-04-09T19:13:45.3881211Z   [32m  [32mâœ”[39m[0m[90m setDottedPath root element[0m
2025-04-09T19:13:45.3925379Z   [32m  [32mâœ”[39m[0m[90m setDottedPath sub element[0m
2025-04-09T19:13:45.3957493Z 
2025-04-09T19:13:45.3957813Z [0m  castexpr[0m
2025-04-09T19:13:45.3998912Z   [32m  [32mâœ”[39m[0m[90m casts comparisons[0m
2025-04-09T19:13:45.4046355Z   [32m  [32mâœ”[39m[0m[90m casts conditions[0m
2025-04-09T19:13:45.4091275Z   [32m  [32mâœ”[39m[0m[90m casts boolean expressions[0m
2025-04-09T19:13:45.4142809Z   [32m  [32mâœ”[39m[0m[90m cast errors[0m
2025-04-09T19:13:45.4191845Z   [32m  [32mâœ”[39m[0m[90m casts $in[0m
2025-04-09T19:13:45.4238107Z   [32m  [32mâœ”[39m[0m[90m casts $not (gh-11689)[0m
2025-04-09T19:13:45.4283367Z   [32m  [32mâœ”[39m[0m[90m casts $round (gh-13881)[0m
2025-04-09T19:13:45.4329430Z   [32m  [32mâœ”[39m[0m[90m casts $switch (gh-14751)[0m
2025-04-09T19:13:45.4361371Z 
2025-04-09T19:13:45.4361688Z [0m  isBsonType[0m
2025-04-09T19:13:45.4395049Z   [32m  [32mâœ”[39m[0m[90m true for any object with _bsontype property equal typename[0m
2025-04-09T19:13:45.4438728Z   [32m  [32mâœ”[39m[0m[90m true for any object without _bsontype property and undefined typename[0m
2025-04-09T19:13:45.4482289Z   [32m  [32mâœ”[39m[0m[90m false for any object with _bsontype property different of typename[0m
2025-04-09T19:13:45.4525800Z   [32m  [32mâœ”[39m[0m[90m false for any object without _bsontype property[0m
2025-04-09T19:13:45.4570163Z   [32m  [32mâœ”[39m[0m[90m true for Decimal128[0m
2025-04-09T19:13:45.4613771Z   [32m  [32mâœ”[39m[0m[90m true for ObjectId[0m
2025-04-09T19:13:45.4657435Z   [32m  [32mâœ”[39m[0m[90m true for Double[0m
2025-04-09T19:13:45.4690474Z   [32m  [32mâœ”[39m[0m[90m true for Int32[0m
2025-04-09T19:13:45.4722448Z 
2025-04-09T19:13:45.4722965Z [0m  castUpdate[0m
2025-04-09T19:13:45.4758528Z   [32m  [32mâœ”[39m[0m[90m avoids adding `$each` if `$addToSet` on mixed array (gh-11284)[0m
2025-04-09T19:13:45.4796846Z   [32m  [32mâœ”[39m[0m[90m casts the update correctly when target discriminator type is missing[0m
2025-04-09T19:13:45.4828351Z 
2025-04-09T19:13:45.4828936Z [0m  stringifyFunctionOperators[0m
2025-04-09T19:13:45.4863347Z   [32m  [32mâœ”[39m[0m[90m converts accumulator args to strings (gh-9364)[0m
2025-04-09T19:13:45.4907338Z   [32m  [32mâœ”[39m[0m[90m converts function args to strings (gh-9897)[0m
2025-04-09T19:13:45.4939114Z 
2025-04-09T19:13:45.4939696Z [0m  prepareDiscriminatorPipeline[0m
2025-04-09T19:13:45.4973575Z   [32m  [32mâœ”[39m[0m[90m handles case where initial $match includes the discriminator key (gh-12478)[0m
2025-04-09T19:13:45.5005181Z 
2025-04-09T19:13:45.5005849Z [0m  cleanPositionalOperators[0m
2025-04-09T19:13:45.5038942Z   [32m  [32mâœ”[39m[0m[90m replaces trailing array filter[0m
2025-04-09T19:13:45.5082522Z   [32m  [32mâœ”[39m[0m[90m replaces trailing $[0m
2025-04-09T19:13:45.5126239Z   [32m  [32mâœ”[39m[0m[90m replaces interior array filters[0m
2025-04-09T19:13:45.5169661Z   [32m  [32mâœ”[39m[0m[90m replaces interior elemMatch[0m
2025-04-09T19:13:45.5201573Z 
2025-04-09T19:13:45.5202099Z [0m  sanitizeFilter[0m
2025-04-09T19:13:45.5235976Z   [32m  [32mâœ”[39m[0m[90m throws when filter includes a query selector[0m
2025-04-09T19:13:45.5280243Z   [32m  [32mâœ”[39m[0m[90m ignores explicitly defined query selectors[0m
2025-04-09T19:13:45.5324352Z   [32m  [32mâœ”[39m[0m[90m handles $and and $or[0m
2025-04-09T19:13:45.5356380Z 
2025-04-09T19:13:45.5366526Z [0m  Query helpers[0m
2025-04-09T19:13:45.5368211Z [0m    selectPopulatedFields[0m
2025-04-09T19:13:45.5412576Z     [32m  [32mâœ”[39m[0m[90m handles nested populate if parent key is projected in (gh-5669)[0m
2025-04-09T19:13:45.5477655Z     [32m  [32mâœ”[39m[0m[90m handles nested populate if parent key is projected out (gh-5669)[0m
2025-04-09T19:13:45.5542765Z     [32m  [32mâœ”[39m[0m[90m handle explicitly excluded paths (gh-7383)[0m
2025-04-09T19:13:45.5608068Z     [32m  [32mâœ”[39m[0m[90m handles paths selected with elemMatch (gh-9973)[0m
2025-04-09T19:13:45.5661537Z 
2025-04-09T19:13:45.5661878Z [0m  applyTimestampsToUpdate[0m
2025-04-09T19:13:45.5695720Z   [32m  [32mâœ”[39m[0m[90m handles update pipelines (gh-11151)[0m
2025-04-09T19:13:45.5727651Z 
2025-04-09T19:13:45.5727940Z [0m  getVirtual[0m
2025-04-09T19:13:45.5769828Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators (gh-6411)[0m
2025-04-09T19:13:45.5822687Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators under single nested (gh-6488)[0m
2025-04-09T19:13:45.5872037Z   [32m  [32mâœ”[39m[0m[90m handles multiple calls with discriminator under doc array (gh-6644)[0m
2025-04-09T19:13:45.5904012Z 
2025-04-09T19:13:45.5904284Z [0m  isInclusive[0m
2025-04-09T19:13:45.5937477Z   [32m  [32mâœ”[39m[0m[90m handles $elemMatch (gh-14893)[0m
2025-04-09T19:13:45.5969464Z 
2025-04-09T19:13:45.5969733Z [0m  isAsyncFunction[0m
2025-04-09T19:13:45.6002949Z   [32m  [32mâœ”[39m[0m[90m should return false for non-functions[0m
2025-04-09T19:13:45.6046396Z   [32m  [32mâœ”[39m[0m[90m should return false for sync function[0m
2025-04-09T19:13:45.6090171Z   [32m  [32mâœ”[39m[0m[90m should return true for async function[0m
2025-04-09T19:13:45.6133708Z   [32m  [32mâœ”[39m[0m[90m should return false for sync function returning a Promise[0m
2025-04-09T19:13:45.6165496Z 
2025-04-09T19:13:45.6165779Z [0m  getFunctionName[0m
2025-04-09T19:13:45.6198774Z   [32m  [32mâœ”[39m[0m[90m return fn.name[0m
2025-04-09T19:13:45.6231657Z   [32m  [32mâœ”[39m[0m[90m return function name[0m
2025-04-09T19:13:45.6275209Z   [32m  [32mâœ”[39m[0m[90m return function functionName[0m
2025-04-09T19:13:45.6318832Z   [32m  [32mâœ”[39m[0m[90m return undefined for arrow function[0m
2025-04-09T19:13:45.6340208Z 
2025-04-09T19:13:45.6340790Z [0m  getDeepestSubdocumentForPath[0m
2025-04-09T19:13:45.6377976Z   [32m  [32mâœ”[39m[0m[90m returns top-level document if no subdocs[0m
2025-04-09T19:13:45.6417525Z   [32m  [32mâœ”[39m[0m[90m picks up single nested subdocs along the path[0m
2025-04-09T19:13:45.6468201Z   [32m  [32mâœ”[39m[0m[90m picks up document arrays[0m
2025-04-09T19:13:45.6519723Z   [32m  [32mâœ”[39m[0m[90m picks up doubly nested subdocuments[0m
2025-04-09T19:13:45.6570176Z   [32m  [32mâœ”[39m[0m[90m returns deepest non-null subdoc[0m
2025-04-09T19:13:45.6622783Z   [32m  [32mâœ”[39m[0m[90m picks up single nested subdocs under document arrays[0m
2025-04-09T19:13:45.6655433Z 
2025-04-09T19:13:45.6655797Z [0m  removeUnusedArrayFilters[0m
2025-04-09T19:13:45.6689389Z   [32m  [32mâœ”[39m[0m[90m respects `$or` (gh-10696)[0m
2025-04-09T19:13:45.6721421Z 
2025-04-09T19:13:45.6721728Z [0m  getSubdocumentStrictValue[0m
2025-04-09T19:13:45.6755828Z   [32m  [32mâœ”[39m[0m[90m returns top-level document if no subdocs[0m
2025-04-09T19:13:45.6801627Z   [32m  [32mâœ”[39m[0m[90m picks up single nested subdocs along the path[0m
2025-04-09T19:13:45.6847710Z   [32m  [32mâœ”[39m[0m[90m picks up document arrays[0m
2025-04-09T19:13:45.6893403Z   [32m  [32mâœ”[39m[0m[90m picks up doubly nested subdocuments[0m
2025-04-09T19:13:45.6960520Z   [32m  [32mâœ”[39m[0m[90m picks up single nested subdocs under document arrays[0m
2025-04-09T19:13:45.6993270Z 
2025-04-09T19:13:45.6993676Z [0m  getPath()[0m
2025-04-09T19:13:45.7029339Z   [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:45.7076406Z   [32m  [32mâœ”[39m[0m[90m nested arrays[0m
2025-04-09T19:13:45.7108202Z 
2025-04-09T19:13:45.7108623Z [0m  setDefaultsOnInsert[0m
2025-04-09T19:13:45.7144026Z   [32m  [32mâœ”[39m[0m[90m properly ignores nested paths (gh-6665)[0m
2025-04-09T19:13:45.7190409Z   [32m  [32mâœ”[39m[0m[90m ignores defaults underneath single nested subdocs (gh-10660)[0m
2025-04-09T19:13:45.7241666Z   [32m  [32mâœ”[39m[0m[90m ignores defaults underneath maps (gh-11235)[0m
2025-04-09T19:13:45.7288116Z   [32m  [32mâœ”[39m[0m[90m sets default if sibling of dotted path is $set (gh-11668)[0m
2025-04-09T19:13:45.7334147Z   [32m  [32mâœ”[39m[0m[90m skips default if parent is $set (gh-12279)[0m
2025-04-09T19:13:45.7366277Z 
2025-04-09T19:13:45.7366635Z [0m  promiseOrCallback()[0m
2025-04-09T19:13:45.7377831Z [0m    apply callback[0m
2025-04-09T19:13:45.7422335Z     [32m  [32mâœ”[39m[0m[90m without error[0m
2025-04-09T19:13:45.7454816Z [0m      with error[0m
2025-04-09T19:13:45.7509172Z       [32m  [32mâœ”[39m[0m[90m without event emitter[0m
2025-04-09T19:13:45.7596156Z       [32m  [32mâœ”[39m[0m[90m with event emitter[0m
2025-04-09T19:13:45.7660935Z [0m    chain promise[0m
2025-04-09T19:13:45.7671851Z [0m      without error[0m
2025-04-09T19:13:45.7726453Z       [32m  [32mâœ”[39m[0m[90m two args[0m
2025-04-09T19:13:45.7813332Z       [32m  [32mâœ”[39m[0m[90m more args[0m
2025-04-09T19:13:45.7867232Z [0m      with error[0m
2025-04-09T19:13:45.7921899Z       [32m  [32mâœ”[39m[0m[90m without event emitter[0m
2025-04-09T19:13:45.8008796Z       [32m  [32mâœ”[39m[0m[90m with event emitter[0m
2025-04-09T19:13:45.8084110Z 
2025-04-09T19:13:45.8084561Z [0m  isSubpath[0m
2025-04-09T19:13:45.8117247Z   [32m  [32mâœ”[39m[0m[90m handles single-part paths[0m
2025-04-09T19:13:45.8161458Z   [32m  [32mâœ”[39m[0m[90m handles multi-part paths[0m
2025-04-09T19:13:45.8193027Z 
2025-04-09T19:13:45.8193616Z [0m  modifiedPaths, bad update value which has circular reference field[0m
2025-04-09T19:13:45.8226388Z   [32m  [32mâœ”[39m[0m[90m update value can be null[0m
2025-04-09T19:13:45.8272245Z   [32m  [32mâœ”[39m[0m[90m values with obvious error on circular reference[0m
2025-04-09T19:13:45.8316219Z   [32m  [32mâœ”[39m[0m[90m values with multiple references which are not circular should succeed[0m
2025-04-09T19:13:45.8348018Z 
2025-04-09T19:13:45.8348329Z [0m  applyProjection[0m
2025-04-09T19:13:45.8382952Z   [32m  [32mâœ”[39m[0m[90m handles deep inclusive projections[0m
2025-04-09T19:13:45.8428190Z   [32m  [32mâœ”[39m[0m[90m handles deep exclusive projections[0m
2025-04-09T19:13:45.8473787Z   [32m  [32mâœ”[39m[0m[90m handles projections underneath arrays (gh-14680)[0m
2025-04-09T19:13:45.8505716Z 
2025-04-09T19:13:45.8506084Z [0m  applyTimestampsToChildren[0m
2025-04-09T19:13:45.8545264Z   [32m  [32mâœ”[39m[0m[90m applies timestamps to nested subdocs within a $push (gh-11775)[0m
2025-04-09T19:13:45.8577356Z 
2025-04-09T19:13:45.8577675Z [0m  getRelatedIndexes[0m
2025-04-09T19:13:45.8601407Z [0m    getRelatedSchemaIndexes[0m
2025-04-09T19:13:45.8651044Z     [32m  [32mâœ”[39m[0m[90m with base model, no discriminator, it gets all indexes[0m
2025-04-09T19:13:45.8938531Z     [32m  [32mâœ”[39m[0m[90m with base model that has discriminator, it ignores discriminator indexes[0m
2025-04-09T19:13:45.9273761Z     [32m  [32mâœ”[39m[0m[90m with base model that has discriminator, it includes discriminator indexes that only checks for existence[0m
2025-04-09T19:13:45.9483096Z     [32m  [32mâœ”[39m[0m[90m with discriminator model, it only gets discriminator indexes[0m
2025-04-09T19:13:45.9775560Z [0m    getRelatedDBIndexes[0m
2025-04-09T19:13:45.9823587Z     [32m  [32mâœ”[39m[0m[90m with base model, no discriminator, it gets all indexes[0m
2025-04-09T19:13:45.9941397Z     [32m  [32mâœ”[39m[0m[90m with base model that has discriminator, it ignores discriminator indexes[0m
2025-04-09T19:13:46.0275701Z     [32m  [32mâœ”[39m[0m[90m with discriminator model, it only gets discriminator indexes[0m
2025-04-09T19:13:46.0592852Z 
2025-04-09T19:13:46.0593348Z [0m  isSimpleValidator[0m
2025-04-09T19:13:46.0626531Z   [32m  [32mâœ”[39m[0m[90m empty object[0m
2025-04-09T19:13:46.0659970Z   [32m  [32mâœ”[39m[0m[90m object with one primitive attribute[0m
2025-04-09T19:13:46.0703653Z   [32m  [32mâœ”[39m[0m[90m object with one simple array attribute[0m
2025-04-09T19:13:46.0747396Z   [32m  [32mâœ”[39m[0m[90m object with some native objects[0m
2025-04-09T19:13:46.0780403Z   [32m  [32mâœ”[39m[0m[90m object with one sub object[0m
2025-04-09T19:13:46.0824296Z   [32m  [32mâœ”[39m[0m[90m object with one attribute of type MongooseDocumentArray[0m
2025-04-09T19:13:46.0856132Z 
2025-04-09T19:13:46.0856926Z [0m  clone[0m
2025-04-09T19:13:46.0890687Z   [32m  [32mâœ”[39m[0m[90m retains RegExp options gh-1355[0m
2025-04-09T19:13:46.0934878Z   [32m  [32mâœ”[39m[0m[90m clones objects created with Object.create(null)[0m
2025-04-09T19:13:46.0978846Z   [32m  [32mâœ”[39m[0m[90m doesnt minimize empty objects in arrays to null (gh-7322)[0m
2025-04-09T19:13:46.1023248Z   [32m  [32mâœ”[39m[0m[90m skips cloning types that have `toBSON()` if `bson` is set (gh-8299)[0m
2025-04-09T19:13:46.1044519Z [0m    falsy[0m
2025-04-09T19:13:46.1088263Z     [32m  [32mâœ”[39m[0m[90m is null when null[0m
2025-04-09T19:13:46.1153495Z     [32m  [32mâœ”[39m[0m[90m is false when false[0m
2025-04-09T19:13:46.1218357Z     [32m  [32mâœ”[39m[0m[90m is undefined when undefined[0m
2025-04-09T19:13:46.1283223Z     [32m  [32mâœ”[39m[0m[90m is 0 when 0[0m
2025-04-09T19:13:46.1326526Z [0m    Array[0m
2025-04-09T19:13:46.1370536Z     [32m  [32mâœ”[39m[0m[90m clones first level[0m
2025-04-09T19:13:46.1435966Z     [32m  [32mâœ”[39m[0m[90m clones deeper[0m
2025-04-09T19:13:46.1479277Z [0m    mongoose object[0m
2025-04-09T19:13:46.1523635Z     [32m  [32mâœ”[39m[0m[90m use toObject[0m
2025-04-09T19:13:46.1589290Z     [32m  [32mâœ”[39m[0m[90m use toJSON[0m
2025-04-09T19:13:46.1655473Z     [32m  [32mâœ”[39m[0m[90m skipSingleNestedGetters[0m
2025-04-09T19:13:46.1698582Z [0m    global objects[0m
2025-04-09T19:13:46.1709606Z [0m      constructor is Object[0m
2025-04-09T19:13:46.1764357Z       [32m  [32mâœ”[39m[0m[90m !minimize || isArrayChild[0m
2025-04-09T19:13:46.1850930Z       [32m  [32mâœ”[39m[0m[90m !constructor && !minimize || isArrayChild[0m
2025-04-09T19:13:46.1937608Z       [32m  [32mâœ”[39m[0m[90m minimize && !isArrayChild && hasKey[0m
2025-04-09T19:13:46.2024339Z       [32m  [32mâœ”[39m[0m[90m minimize and !isArrayChild && !hasKey[0m
2025-04-09T19:13:46.2077866Z [0m      constructor is Data[0m
2025-04-09T19:13:46.2132327Z       [32m  [32mâœ”[39m[0m[90m return new equal date [0m
2025-04-09T19:13:46.2186087Z [0m      constructor is RegExp[0m
2025-04-09T19:13:46.2240898Z       [32m  [32mâœ”[39m[0m[90m return new equal date [0m
2025-04-09T19:13:46.2305288Z [0m    mongo object[0m
2025-04-09T19:13:46.2349687Z     [32m  [32mâœ”[39m[0m[90m is instance of ObjectId[0m
2025-04-09T19:13:46.2392595Z [0m    schema type[0m
2025-04-09T19:13:46.2436618Z     [32m  [32mâœ”[39m[0m[90m have schemaTypeSymbol property[0m
2025-04-09T19:13:46.2479802Z [0m    bson[0m
2025-04-09T19:13:46.2525011Z     [32m  [32mâœ”[39m[0m[90m Decimal128[0m
2025-04-09T19:13:46.2590514Z     [32m  [32mâœ”[39m[0m[90m Decimal128 (flatternDecimal)[0m
2025-04-09T19:13:46.2655796Z     [32m  [32mâœ”[39m[0m[90m does nothing[0m
2025-04-09T19:13:46.2699047Z [0m    any else[0m
2025-04-09T19:13:46.2743284Z     [32m  [32mâœ”[39m[0m[90m valueOf[0m
2025-04-09T19:13:46.2808778Z     [32m  [32mâœ”[39m[0m[90m cloneObject[0m
2025-04-09T19:13:46.2862161Z 
2025-04-09T19:13:46.2862576Z [0m  applyWriteConcern[0m
2025-04-09T19:13:46.2908089Z   [32m  [32mâœ”[39m[0m[90m should not overwrite user specified writeConcern options (gh-13592)[0m
2025-04-09T19:13:46.2963700Z 
2025-04-09T19:13:46.2964242Z [0m  isObject[0m
2025-04-09T19:13:46.2975298Z [0m    true for[0m
2025-04-09T19:13:46.3019183Z     [32m  [32mâœ”[39m[0m[90m {}[0m
2025-04-09T19:13:46.3084611Z     [32m  [32mâœ”[39m[0m[90m Buffer[0m
2025-04-09T19:13:46.3148882Z     [32m  [32mâœ”[39m[0m[90m Object[0m
2025-04-09T19:13:46.3192179Z [0m    false for[0m
2025-04-09T19:13:46.3235754Z     [32m  [32mâœ”[39m[0m[90m ""[0m
2025-04-09T19:13:46.3300749Z     [32m  [32mâœ”[39m[0m[90m /.*/[0m
2025-04-09T19:13:46.3365614Z     [32m  [32mâœ”[39m[0m[90m [][0m
2025-04-09T19:13:46.3430550Z     [32m  [32mâœ”[39m[0m[90m Array[0m
2025-04-09T19:13:46.3495625Z     [32m  [32mâœ”[39m[0m[90m Function[0m
2025-04-09T19:13:46.3560618Z     [32m  [32mâœ”[39m[0m[90m RegExp[0m
2025-04-09T19:13:46.3625522Z     [32m  [32mâœ”[39m[0m[90m String[0m
2025-04-09T19:13:46.3691099Z     [32m  [32mâœ”[39m[0m[90m "[object Object]"[0m
2025-04-09T19:13:46.3744292Z 
2025-04-09T19:13:46.3744789Z [0m  isIndexEqual[0m
2025-04-09T19:13:46.3778738Z   [32m  [32mâœ”[39m[0m[90m ignores default collation options when comparing collations (gh-8994)[0m
2025-04-09T19:13:46.3822636Z   [32m  [32mâœ”[39m[0m[90m works when MongoDB index has collation but Mongoose index doesn't (gh-9224)[0m
2025-04-09T19:13:46.3866332Z   [32m  [32mâœ”[39m[0m[90m handles text indexes (gh-9225)[0m
2025-04-09T19:13:46.3898221Z 
2025-04-09T19:13:46.3898707Z [0m  getModelsMapForPopulate[0m
2025-04-09T19:13:46.4056192Z   [32m  [32mâœ”[39m[0m[90m should error on missing options on populate[0m
2025-04-09T19:13:46.4182765Z 
2025-04-09T19:13:46.4183347Z [0m  selectPopulatedFields[0m
2025-04-09T19:13:46.4217034Z   [32m  [32mâœ”[39m[0m[90m selects refPath[0m
2025-04-09T19:13:46.4261533Z   [32m  [32mâœ”[39m[0m[90m adds refPath to projection if not deselected by user in exclusive projection[0m
2025-04-09T19:13:46.4293224Z 
2025-04-09T19:13:46.4294000Z [0m  arrayDepth[0m
2025-04-09T19:13:46.4327305Z   [32m  [32mâœ”[39m[0m[90m non-array[0m
2025-04-09T19:13:46.4371184Z   [32m  [32mâœ”[39m[0m[90m simple array with no element[0m
2025-04-09T19:13:46.4414773Z   [32m  [32mâœ”[39m[0m[90m simple array with one element[0m
2025-04-09T19:13:46.4458414Z   [32m  [32mâœ”[39m[0m[90m simple array with many elements[0m
2025-04-09T19:13:46.4502047Z   [32m  [32mâœ”[39m[0m[90m simple array with many elements[0m
2025-04-09T19:13:46.4545785Z   [32m  [32mâœ”[39m[0m[90m complex array with one sub-Array[0m
2025-04-09T19:13:46.4589559Z   [32m  [32mâœ”[39m[0m[90m complex array with deeply nested sub-Arrays[0m
2025-04-09T19:13:46.4633285Z   [32m  [32mâœ”[39m[0m[90m complex array with deeply nested sub-Arrays[0m
2025-04-09T19:13:46.4676783Z   [32m  [32mâœ”[39m[0m[90m complex array with deeply nested sub-Arrays[0m
2025-04-09T19:13:46.4708817Z 
2025-04-09T19:13:46.4709190Z [0m  eachAsync()[0m
2025-04-09T19:13:47.5434130Z   [32m  [32mâœ”[39m[0m[90m exhausts large cursor without parallel calls (gh-8235)[0m[31m (1069ms)[0m
2025-04-09T19:13:47.7542589Z   [32m  [32mâœ”[39m[0m[90m waits until the end before resolving the promise (gh-8352)[0m[31m (207ms)[0m
2025-04-09T19:13:47.7701304Z   [32m  [32mâœ”[39m[0m[90m it processes the documents in batches successfully[0m
2025-04-09T19:13:47.7865051Z   [32m  [32mâœ”[39m[0m[90m it processes the documents in batches even if the batch size % document count is not zero successfully[0m
2025-04-09T19:13:47.8006976Z   [32m  [32mâœ”[39m[0m[90m it processes the documents in batches with the parallel option provided[0m
2025-04-09T19:13:47.8096642Z   [32m  [32mâœ”[39m[0m[90m executes all documents and aggregates errors if continueOnError set (gh-6355)[0m
2025-04-09T19:13:47.8152434Z   [32m  [32mâœ”[39m[0m[90m returns aggregated error fetching documents with continueOnError (gh-6355)[0m
2025-04-09T19:13:48.0295856Z   [32m  [32mâœ”[39m[0m[90m avoids mutating document batch with parallel (gh-12652)[0m[31m (210ms)[0m
2025-04-09T19:13:48.0384115Z   [32m  [32mâœ”[39m[0m[90m using AbortSignal (gh-12173)[0m
2025-04-09T19:13:48.0416546Z 
2025-04-09T19:13:48.0417026Z [0m  get[0m
2025-04-09T19:13:48.0450754Z   [32m  [32mâœ”[39m[0m[90m gets dotted properties[0m
2025-04-09T19:13:48.0494715Z   [32m  [32mâœ”[39m[0m[90m returns default on undefined[0m
2025-04-09T19:13:48.0538402Z   [32m  [32mâœ”[39m[0m[90m returns default on bottom null[0m
2025-04-09T19:13:48.0582021Z   [32m  [32mâœ”[39m[0m[90m returns default on top-level null[0m
2025-04-09T19:13:48.0625757Z   [32m  [32mâœ”[39m[0m[90m works with maps[0m
2025-04-09T19:13:48.0669529Z   [32m  [32mâœ”[39m[0m[90m works with dotted at top level[0m
2025-04-09T19:13:48.0713122Z   [32m  [32mâœ”[39m[0m[90m works with dotted nested[0m
2025-04-09T19:13:48.0744878Z 
2025-04-09T19:13:48.0745876Z [0m  schema[0m
2025-04-09T19:13:48.0757905Z [0m    validation[0m
2025-04-09T19:13:48.0815310Z     [32m  [32mâœ”[39m[0m[90m invalid arguments are rejected (1044)[0m
2025-04-09T19:13:48.0884190Z     [32m  [32mâœ”[39m[0m[90m string enum[0m
2025-04-09T19:13:48.0954697Z     [32m  [32mâœ”[39m[0m[90m string regexp[0m
2025-04-09T19:13:48.1028892Z     [32m  [32mâœ”[39m[0m[90m should clear validator errors (gh-2302)[0m
2025-04-09T19:13:48.1092631Z     [32m  [32mâœ”[39m[0m[90m should allow an array of enums (gh-661)[0m
2025-04-09T19:13:48.1162274Z     [32m  [32mâœ”[39m[0m[90m should allow null values for enum gh-3044[0m
2025-04-09T19:13:48.1239191Z     [32m  [32mâœ”[39m[0m[90m should allow an array of subdocuments with enums (gh-3521)[0m
2025-04-09T19:13:48.1316960Z     [32m  [32mâœ”[39m[0m[90m should validate subdocuments subproperty enums (gh-4111)[0m
2025-04-09T19:13:48.1390752Z     [32m  [32mâœ”[39m[0m[90m doesnt do double validation on document arrays (gh-2618)[0m
2025-04-09T19:13:48.1468959Z     [32m  [32mâœ”[39m[0m[90m doesnt do double validation on document arrays underneath nested (gh-5411)[0m
2025-04-09T19:13:48.1789785Z     [32m  [32mâœ”[39m[0m[90m no double validation on set nested docarray (gh-4145)[0m
2025-04-09T19:13:48.1869130Z     [32m  [32mâœ”[39m[0m[90m returns cast errors[0m
2025-04-09T19:13:48.1952601Z     [32m  [32mâœ”[39m[0m[90m handles multiple subdocument errors (gh-2589)[0m
2025-04-09T19:13:48.2062006Z     [32m  [32mâœ”[39m[0m[90m handles subdocument cast errors (gh-2819)[0m
2025-04-09T19:13:48.2132744Z     [32m  [32mâœ”[39m[0m[90m fails when you try to set a nested path to a primitive (gh-2592)[0m
2025-04-09T19:13:48.2202935Z     [32m  [32mâœ”[39m[0m[90m doesnt execute other validators if required fails (gh-2725)[0m
2025-04-09T19:13:48.2272385Z     [32m  [32mâœ”[39m[0m[90m doesnt execute other validators if required fails (gh-3025)[0m
2025-04-09T19:13:48.2342087Z     [32m  [32mâœ”[39m[0m[90m validateSync allows you to filter paths (gh-3153)[0m
2025-04-09T19:13:48.2414107Z     [32m  [32mâœ”[39m[0m[90m validateSync validates array elements when setting pathsToValidate (gh-13159)[0m
2025-04-09T19:13:48.2483888Z     [32m  [32mâœ”[39m[0m[90m adds required validators to the front of the list (gh-2843)[0m
2025-04-09T19:13:48.2558078Z     [32m  [32mâœ”[39m[0m[90m sets path correctly when setter throws exception (gh-2832)[0m
2025-04-09T19:13:48.2633127Z     [32m  [32mâœ”[39m[0m[90m allows you to validate embedded doc that was .create()-ed (gh-2902) (gh-2929)[0m
2025-04-09T19:13:48.2703411Z     [32m  [32mâœ”[39m[0m[90m returns correct kind for user defined custom validators (gh-2885)[0m
2025-04-09T19:13:48.2772830Z     [32m  [32mâœ”[39m[0m[90m enums report kind (gh-3009)[0m
2025-04-09T19:13:48.2856264Z     [32m  [32mâœ”[39m[0m[90m enums on arrays (gh-6102) (gh-8449)[0m
2025-04-09T19:13:48.2926672Z     [32m  [32mâœ”[39m[0m[90m skips conditional required (gh-3539)[0m
2025-04-09T19:13:48.2998150Z     [32m  [32mâœ”[39m[0m[90m handles function for date min/max (gh-7600)[0m
2025-04-09T19:13:48.3068383Z     [32m  [32mâœ”[39m[0m[90m evaluate message function gh6523[0m
2025-04-09T19:13:48.3139494Z     [32m  [32mâœ”[39m[0m[90m Allows for doc to be passed as another parameter (gh-12564)[0m
2025-04-09T19:13:48.3209342Z     [32m  [32mâœ”[39m[0m[90m evaluate message function for required field gh6523[0m
2025-04-09T19:13:48.3280916Z     [32m  [32mâœ”[39m[0m[90m should validate required UUID fields correctly (gh-12991)[0m
2025-04-09T19:13:48.3313180Z [0m      non-required fields[0m
2025-04-09T19:13:48.3370829Z       [32m  [32mâœ”[39m[0m[90m number min and max[0m
2025-04-09T19:13:48.3413957Z [0m        are validated correctly[0m
2025-04-09T19:13:48.3584835Z         [32m  [32mâœ”[39m[0m[90m and can be set to "undefined" (gh-1594)[0m
2025-04-09T19:13:48.3690109Z [0m      required[0m
2025-04-09T19:13:48.3747199Z       [32m  [32mâœ”[39m[0m[90m string required[0m
2025-04-09T19:13:48.3836404Z       [32m  [32mâœ”[39m[0m[90m string conditional required[0m
2025-04-09T19:13:48.3924926Z       [32m  [32mâœ”[39m[0m[90m number required[0m
2025-04-09T19:13:48.4014158Z       [32m  [32mâœ”[39m[0m[90m date required[0m
2025-04-09T19:13:48.4102348Z       [32m  [32mâœ”[39m[0m[90m date not empty string (gh-3132)[0m
2025-04-09T19:13:48.4191170Z       [32m  [32mâœ”[39m[0m[90m objectid required[0m
2025-04-09T19:13:48.4280473Z       [32m  [32mâœ”[39m[0m[90m array required[0m
2025-04-09T19:13:48.4369749Z       [32m  [32mâœ”[39m[0m[90m array required custom required[0m
2025-04-09T19:13:48.4458863Z       [32m  [32mâœ”[39m[0m[90m boolean required[0m
2025-04-09T19:13:48.4547802Z       [32m  [32mâœ”[39m[0m[90m mixed required[0m
2025-04-09T19:13:48.4601711Z [0m      async[0m
2025-04-09T19:13:48.4719643Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:48.4870231Z       [32m  [32mâœ”[39m[0m[90m scope[0m
2025-04-09T19:13:48.4958492Z       [32m  [32mâœ”[39m[0m[90m doValidateSync should ignore async function and script waiting for promises (gh-4885)[0m
2025-04-09T19:13:48.5001644Z [0m      messages[0m
2025-04-09T19:13:48.5012710Z [0m        are customizable[0m
2025-04-09T19:13:48.5092597Z         [32m  [32mâœ”[39m[0m[90m within schema definitions[0m
2025-04-09T19:13:48.5206914Z         [32m  [32mâœ”[39m[0m[90m for custom validators[0m
2025-04-09T19:13:48.5321343Z         [32m  [32mâœ”[39m[0m[90m custom validators with promise (gh-5171)[0m
2025-04-09T19:13:48.5434507Z         [32m  [32mâœ”[39m[0m[90m supports custom properties (gh-2132)[0m
2025-04-09T19:13:48.5549081Z         [32m  [32mâœ”[39m[0m[90m supports dynamic message for validators with callback (gh-1936)[0m
2025-04-09T19:13:48.5623699Z [0m      types[0m
2025-04-09T19:13:48.5634774Z [0m        are customizable[0m
2025-04-09T19:13:48.5705870Z         [32m  [32mâœ”[39m[0m[90m for single custom validators[0m
2025-04-09T19:13:48.5820053Z         [32m  [32mâœ”[39m[0m[90m for many custom validators[0m
2025-04-09T19:13:48.5895516Z [0m      `enum` accepts an object to support TypeScript enums (gh-9546) (gh-9535)[0m
2025-04-09T19:13:48.5954034Z       [32m  [32mâœ”[39m[0m[90m strings[0m
2025-04-09T19:13:48.6034289Z       [32m  [32mâœ”[39m[0m[90m numbers[0m
2025-04-09T19:13:48.6127511Z       [32m  [32mâœ”[39m[0m[90m arrays[0m
2025-04-09T19:13:48.6211258Z       [32m  [32mâœ”[39m[0m[90m passes when using valid data[0m
2025-04-09T19:13:48.6285790Z 
2025-04-09T19:13:48.6287749Z [0m  model: findOneAndUpdate:[0m
2025-04-09T19:13:48.6472462Z   [32m  [32mâœ”[39m[0m[90m returns the edited document[0m
2025-04-09T19:13:48.6697693Z   [32m  [32mâœ”[39m[0m[90m returns the original document[0m
2025-04-09T19:13:48.6889400Z   [32m  [32mâœ”[39m[0m[90m allows upserting[0m
2025-04-09T19:13:48.6967036Z   [32m  [32mâœ”[39m[0m[90m options/conditions/doc are merged when no callback is passed[0m
2025-04-09T19:13:48.7233859Z   [32m  [32mâœ”[39m[0m[90m updates numbers atomically[0m
2025-04-09T19:13:48.7484025Z   [32m  [32mâœ”[39m[0m[90m honors strict schemas[0m
2025-04-09T19:13:48.7720189Z   [32m  [32mâœ”[39m[0m[90m returns errors with strict:throw schemas[0m
2025-04-09T19:13:48.7934078Z   [32m  [32mâœ”[39m[0m[90m returns the original document[0m
2025-04-09T19:13:48.8010031Z   [32m  [32mâœ”[39m[0m[90m options/conditions/doc are merged when no callback is passed[0m
2025-04-09T19:13:48.8138865Z   [32m  [32mâœ”[39m[0m[90m supports v3 select string syntax[0m
2025-04-09T19:13:48.8249953Z   [32m  [32mâœ”[39m[0m[90m supports v3 select object syntax[0m
2025-04-09T19:13:48.8620745Z   [32m  [32mâœ”[39m[0m[90m supports v3 sort string syntax[0m
2025-04-09T19:13:48.8699229Z   [32m  [32mâœ”[39m[0m[90m supports v3 sort object syntax[0m
2025-04-09T19:13:48.8966451Z   [32m  [32mâœ”[39m[0m[90m supports $elemMatch with $in (gh-1091 gh-1100)[0m
2025-04-09T19:13:48.9256994Z   [32m  [32mâœ”[39m[0m[90m supports population (gh-1395)[0m
2025-04-09T19:13:48.9486780Z   [32m  [32mâœ”[39m[0m[90m returns null when doing an upsert & new=false gh-1533[0m
2025-04-09T19:13:48.9689993Z   [32m  [32mâœ”[39m[0m[90m return hydrated document (gh-7734 gh-7735)[0m
2025-04-09T19:13:49.0035359Z   [32m  [32mâœ”[39m[0m[90m return includeResultMetadata when doing an upsert & new=false gh-7770[0m
2025-04-09T19:13:49.0249635Z   [32m  [32mâœ”[39m[0m[90m allows properties to be set to null gh-1643[0m
2025-04-09T19:13:49.0503384Z   [32m  [32mâœ”[39m[0m[90m can do various deep equal checks (lodash.isEqual, lodash.isEqualWith, assert.deepEqual, utils.deepEqual) on object id after findOneAndUpdate (gh-2070)[0m
2025-04-09T19:13:49.0774067Z   [32m  [32mâœ”[39m[0m[90m adds __v on upsert (gh-2122) (gh-4505)[0m
2025-04-09T19:13:49.0992143Z   [32m  [32mâœ”[39m[0m[90m doesn't add __v on upsert if `$set` (gh-4505) (gh-5973)[0m
2025-04-09T19:13:49.1216281Z   [32m  [32mâœ”[39m[0m[90m doesn't add __v on upsert if `$set` with `update()` (gh-5973)[0m
2025-04-09T19:13:49.1468824Z   [32m  [32mâœ”[39m[0m[90m works with nested schemas and $pull+$or (gh-1932)[0m
2025-04-09T19:13:49.1559114Z   [32m  [32mâœ”[39m[0m[90m accepts undefined[0m
2025-04-09T19:13:49.1705563Z   [32m  [32mâœ”[39m[0m[90m cast errors for empty objects as object ids (gh-2732)[0m
2025-04-09T19:13:49.1863111Z   [32m  [32mâœ”[39m[0m[90m cast errors for empty objects as object ids (gh-2732)[0m
2025-04-09T19:13:49.2155736Z   [32m  [32mâœ”[39m[0m[90m with versionKey in top-level and a `$` key (gh-7003)[0m
2025-04-09T19:13:49.2383406Z   [32m  [32mâœ”[39m[0m[90m empty update with timestamps (gh-7041)[0m
2025-04-09T19:13:49.2603719Z   [32m  [32mâœ”[39m[0m[90m skipping updatedAt and createdAt (gh-3934)[0m
2025-04-09T19:13:49.2851104Z   [32m  [32mâœ”[39m[0m[90m runs lowercase on $addToSet, $push, etc (gh-4185)[0m
2025-04-09T19:13:49.3118544Z   [32m  [32mâœ”[39m[0m[90m returnOriginal (gh-7846)[0m
2025-04-09T19:13:49.3479290Z   [32m  [32mâœ”[39m[0m[90m updating embedded discriminator with discriminator key in update (gh-8378)[0m
2025-04-09T19:13:49.3719391Z   [32m  [32mâœ”[39m[0m[90m setDefaultsOnInsert with doubly nested subdocs (gh-8392)[0m
2025-04-09T19:13:49.3963191Z   [32m  [32mâœ”[39m[0m[90m calls setters on mixed type (gh-8444)[0m
2025-04-09T19:13:49.4189254Z   [32m  [32mâœ”[39m[0m[90m returnDocument should work (gh-10321)[0m
2025-04-09T19:13:49.4426143Z   [32m  [32mâœ”[39m[0m[90m supports overwriting nested map paths (gh-10485)[0m
2025-04-09T19:13:49.4662605Z   [32m  [32mâœ”[39m[0m[90m supports $set on elements of map of subdocuments (gh-10720)[0m
2025-04-09T19:13:49.4789346Z   [32m  [32mâœ”[39m[0m[90m handles validating deeply nested subdocuments (gh-11394)[0m
2025-04-09T19:13:49.5111820Z   [32m  [32mâœ”[39m[0m[90m casts array filters (gh-13219)[0m
2025-04-09T19:13:49.5199213Z   [32m  [32mâœ”[39m[0m[90m throws error if filter is not an object (gh-13264)[0m
2025-04-09T19:13:49.5491919Z   [32m  [32mâœ”[39m[0m[90m handles plus path in projection (gh-13413)[0m
2025-04-09T19:13:49.5726378Z   [32m  [32mâœ”[39m[0m[90m allows setting paths with dots in non-strict paths (gh-13434) (gh-10200)[0m
2025-04-09T19:13:49.5948239Z   [32m  [32mâœ”[39m[0m[90m supports the `includeResultMetadata` option (gh-13539)[0m
2025-04-09T19:13:49.6177285Z   [32m  [32mâœ”[39m[0m[90m successfully runs findOneAndUpdate with no update and versionKey set to false (gh-13783)[0m
2025-04-09T19:13:49.6409975Z   [32m  [32mâœ”[39m[0m[90m skips adding defaults to filter when passing empty update (gh-13962)[0m
2025-04-09T19:13:49.6504317Z   [32m  [32mâœ”[39m[0m[90m sets CastError path to full path (gh-14114)[0m
2025-04-09T19:13:49.6663602Z [0m    will correctly[0m
2025-04-09T19:13:49.6915589Z     [32m  [32mâœ”[39m[0m[90m update subdocument in array item[0m
2025-04-09T19:13:49.6984406Z [0m    middleware[0m
2025-04-09T19:13:49.7045576Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:49.7213599Z     [32m  [32mâœ”[39m[0m[90m works with exec()[0m
2025-04-09T19:13:49.7328938Z [0m    validators (gh-860)[0m
2025-04-09T19:13:49.7531672Z     [32m  [32mâœ”[39m[0m[90m applies defaults on upsert[0m
2025-04-09T19:13:49.7747676Z     [32m  [32mâœ”[39m[0m[90m doesnt set default on upsert if query sets it[0m
2025-04-09T19:13:49.8011844Z     [32m  [32mâœ”[39m[0m[90m properly sets default on upsert if query wont set it[0m
2025-04-09T19:13:49.8514462Z     [32m  [32mâœ”[39m[0m[90m skips setting defaults within maps (gh-7909)[0m[33m (41ms)[0m
2025-04-09T19:13:49.8650321Z     [32m  [32mâœ”[39m[0m[90m runs validators if theyre set[0m
2025-04-09T19:13:49.8799465Z     [32m  [32mâœ”[39m[0m[90m validators handle $unset and $setOnInsert[0m
2025-04-09T19:13:49.8953668Z     [32m  [32mâœ”[39m[0m[90m min/max, enum, and regex built-in validators work[0m
2025-04-09T19:13:49.9101763Z     [32m  [32mâœ”[39m[0m[90m multiple validation errors[0m
2025-04-09T19:13:49.9400065Z     [32m  [32mâœ”[39m[0m[90m validators ignore $inc[0m
2025-04-09T19:13:49.9682108Z     [32m  [32mâœ”[39m[0m[90m validators ignore paths underneath mixed (gh-8659)[0m
2025-04-09T19:13:49.9933155Z     [32m  [32mâœ”[39m[0m[90m should work with arrays (gh-3035)[0m
2025-04-09T19:13:50.0246977Z     [32m  [32mâœ”[39m[0m[90m should allow null values in query (gh-3135)[0m
2025-04-09T19:13:50.0495464Z     [32m  [32mâœ”[39m[0m[90m should work with array documents (gh-3034)[0m
2025-04-09T19:13:50.0778282Z     [32m  [32mâœ”[39m[0m[90m handles setting array (gh-3107)[0m
2025-04-09T19:13:50.1082445Z     [32m  [32mâœ”[39m[0m[90m handles nested cast errors (gh-3468)[0m
2025-04-09T19:13:50.1208904Z     [32m  [32mâœ”[39m[0m[90m cast errors with nested schemas (gh-3580)[0m
2025-04-09T19:13:50.1558337Z     [32m  [32mâœ”[39m[0m[90m pull with nested schemas (gh-3616)[0m
2025-04-09T19:13:50.1673871Z     [32m  [32mâœ”[39m[0m[90m setting nested schema (gh-3889)[0m
2025-04-09T19:13:50.1856286Z [0m    bug fixes[0m
2025-04-09T19:13:50.2063801Z     [32m  [32mâœ”[39m[0m[90m passes raw result if includeResultMetadata specified (gh-4925)[0m
2025-04-09T19:13:50.2333212Z     [32m  [32mâœ”[39m[0m[90m handles setting single embedded docs to null (gh-4281)[0m
2025-04-09T19:13:50.2450491Z     [32m  [32mâœ”[39m[0m[90m custom validator on mixed field (gh-4305)[0m
2025-04-09T19:13:50.2607584Z     [32m  [32mâœ”[39m[0m[90m single nested doc cast errors (gh-3602)[0m
2025-04-09T19:13:50.2872912Z     [32m  [32mâœ”[39m[0m[90m projection option as alias for fields (gh-4315)[0m
2025-04-09T19:13:50.2971059Z     [32m  [32mâœ”[39m[0m[90m handles upserting a non-existing field (gh-4757)[0m
2025-04-09T19:13:50.3277734Z     [32m  [32mâœ”[39m[0m[90m strict option (gh-5108)[0m
2025-04-09T19:13:50.3554939Z     [32m  [32mâœ”[39m[0m[90m correct key order (gh-6484)[0m
2025-04-09T19:13:50.3806919Z     [32m  [32mâœ”[39m[0m[90m should not apply schema transforms (gh-4574)[0m
2025-04-09T19:13:50.4057594Z     [32m  [32mâœ”[39m[0m[90m update using $ (gh-5628)[0m
2025-04-09T19:13:50.4296693Z     [32m  [32mâœ”[39m[0m[90m projection with $elemMatch (gh-5661)[0m
2025-04-09T19:13:50.4419320Z     [32m  [32mâœ”[39m[0m[90m multi cast error (gh-5609)[0m
2025-04-09T19:13:50.4566596Z     [32m  [32mâœ”[39m[0m[90m update validators with pushing null (gh-5710)[0m
2025-04-09T19:13:50.4719600Z     [32m  [32mâœ”[39m[0m[90m only calls setters once (gh-6203)[0m
2025-04-09T19:13:50.4879775Z     [32m  [32mâœ”[39m[0m[90m only calls setters once (gh-6203)[0m
2025-04-09T19:13:50.5197958Z     [32m  [32mâœ”[39m[0m[90m update validators with pull + $in (gh-6240)[0m
2025-04-09T19:13:50.5469711Z     [32m  [32mâœ”[39m[0m[90m avoids edge case with middleware cloning buffers (gh-5702)[0m
2025-04-09T19:13:50.5693342Z     [32m  [32mâœ”[39m[0m[90m setting subtype when saving (gh-5551)[0m
2025-04-09T19:13:50.5968620Z     [32m  [32mâœ”[39m[0m[90m properly handles casting nested objects in update (gh-4724)[0m
2025-04-09T19:13:50.6079092Z     [32m  [32mâœ”[39m[0m[90m doesnt do double validation on document arrays during updates (gh-4440)[0m
2025-04-09T19:13:50.6364430Z     [32m  [32mâœ”[39m[0m[90m runs setters on array elements (gh-7679)[0m
2025-04-09T19:13:50.6484068Z     [32m  [32mâœ”[39m[0m[90m avoid calling $pull in doc array (gh-6971) (gh-6889)[0m
2025-04-09T19:13:50.6693092Z     [32m  [32mâœ”[39m[0m[90m $pull with `required` and runValidators (gh-6972)[0m
2025-04-09T19:13:50.6849345Z 
2025-04-09T19:13:50.6850700Z [0m  timestamps[0m
2025-04-09T19:13:50.7050058Z   [32m  [32mâœ”[39m[0m[90m does not override timestamp params defined in schema (gh-4868)[0m
2025-04-09T19:13:50.7229461Z   [32m  [32mâœ”[39m[0m[90m updatedAt without createdAt (gh-5598)[0m
2025-04-09T19:13:50.7470525Z   [32m  [32mâœ”[39m[0m[90m updatedAt without createdAt for nested (gh-5598)[0m
2025-04-09T19:13:50.7653513Z   [32m  [32mâœ”[39m[0m[90m nested paths (gh-4503)[0m
2025-04-09T19:13:50.7829793Z   [32m  [32mâœ”[39m[0m[90m does not override nested timestamp params defined in schema (gh-4868)[0m
2025-04-09T19:13:50.8009602Z   [32m  [32mâœ”[39m[0m[90m does not override timestamps in nested schema (gh-4868)[0m
2025-04-09T19:13:50.8168643Z   [32m  [32mâœ”[39m[0m[90m no timestamps added when parent/child timestamps explicitly false (gh-7202)[0m
2025-04-09T19:13:50.8328657Z   [32m  [32mâœ”[39m[0m[90m avoids calling createdAt getters when setting updatedAt (gh-7496)[0m
2025-04-09T19:13:50.8523399Z   [32m  [32mâœ”[39m[0m[90m handles custom statics that conflict with built-in functions (gh-7698)[0m
2025-04-09T19:13:50.9317277Z   [32m  [32mâœ”[39m[0m[90m timestamps handle reusing child schemas (gh-7712)[0m[33m (73ms)[0m
2025-04-09T19:13:50.9504387Z   [32m  [32mâœ”[39m[0m[90m respects timestamps: false in child schema (gh-8007)[0m
2025-04-09T19:13:51.0196267Z   [32m  [32mâœ”[39m[0m[90m updates updatedAt when calling update without $set (gh-4768)[0m[33m (63ms)[0m
2025-04-09T19:13:51.0419490Z   [32m  [32mâœ”[39m[0m[90m updates updatedAt when calling update on subchild[0m
2025-04-09T19:13:51.0630040Z   [32m  [32mâœ”[39m[0m[90m sets timestamps on deeply nested docs on upsert (gh-8894)[0m
2025-04-09T19:13:51.0935974Z   [32m  [32mâœ”[39m[0m[90m sets timestamps on bulk write without `$set` (gh-9268)[0m
2025-04-09T19:13:51.1116670Z   [32m  [32mâœ”[39m[0m[90m works with property named "set" (gh-9428)[0m
2025-04-09T19:13:51.1301627Z   [32m  [32mâœ”[39m[0m[90m should not override createdAt when not selected (gh-4340)[0m
2025-04-09T19:13:51.1467965Z   [32m  [32mâœ”[39m[0m[90m timestamps with number types (gh-3957)[0m
2025-04-09T19:13:51.1691930Z   [32m  [32mâœ”[39m[0m[90m timestamps with custom timestamp (gh-3957)[0m
2025-04-09T19:13:51.1870680Z   [32m  [32mâœ”[39m[0m[90m timestamps with custom timestamp using getter method (gh-3957)[0m
2025-04-09T19:13:51.2196445Z   [32m  [32mâœ”[39m[0m[90m shouldnt bump updatedAt in single nested subdocs that are not modified (gh-9357)[0m
2025-04-09T19:13:51.2500278Z   [32m  [32mâœ”[39m[0m[90m bumps updatedAt with mixed $set (gh-9357)[0m
2025-04-09T19:13:51.2663729Z   [32m  [32mâœ”[39m[0m[90m makes createdAt immutable by default (gh-10139)[0m
2025-04-09T19:13:51.2864239Z   [32m  [32mâœ”[39m[0m[90m sets createdAt when using $push/$addToSet on path with positional operator (gh-10447)[0m
2025-04-09T19:13:51.3094931Z   [32m  [32mâœ”[39m[0m[90m sets createdAt when creating new single nested subdoc (gh-11603)[0m
2025-04-09T19:13:51.3283309Z   [32m  [32mâœ”[39m[0m[90m sets timestamps on sub-schema if parent schema does not have timestamps: true (gh-12119)[0m
2025-04-09T19:13:51.3477578Z   [32m  [32mâœ”[39m[0m[90m works with insertMany() and embedded discriminators (gh-12150)[0m
2025-04-09T19:13:51.3669855Z   [32m  [32mâœ”[39m[0m[90m findOneAndUpdate creates subdocuments with timestamps in correct order (gh-12475)[0m
2025-04-09T19:13:51.3878827Z   [32m  [32mâœ”[39m[0m[90m should avoid setting null update when updating document with timestamps gh-13379[0m
2025-04-09T19:13:51.3920263Z [0m    schema options[0m
2025-04-09T19:13:51.3965852Z     [32m  [32mâœ”[39m[0m[90m should have createdAt and updatedAt fields[0m
2025-04-09T19:13:51.4062082Z     [32m  [32mâœ”[39m[0m[90m should have createdAt and updatedAt fields[0m
2025-04-09T19:13:51.4142158Z     [32m  [32mâœ”[39m[0m[90m should have created and updatedAt fields[0m
2025-04-09T19:13:51.4221763Z     [32m  [32mâœ”[39m[0m[90m should have created and updatedAt fields[0m
2025-04-09T19:13:51.4301226Z     [32m  [32mâœ”[39m[0m[90m should have created and updated fields[0m
2025-04-09T19:13:51.4380897Z     [32m  [32mâœ”[39m[0m[90m should have just createdAt if updatedAt set to falsy[0m
2025-04-09T19:13:51.4460127Z     [32m  [32mâœ”[39m[0m[90m should have created and updated fields[0m
2025-04-09T19:13:51.4542578Z     [32m  [32mâœ”[39m[0m[90m TTL index with timestamps (gh-5656)[0m
2025-04-09T19:13:51.4599168Z [0m    auto update createdAt and updatedAt when create/save/update document[0m
2025-04-09T19:13:51.4765813Z     [32m  [32mâœ”[39m[0m[90m should have fields when create[0m
2025-04-09T19:13:51.4973496Z     [32m  [32mâœ”[39m[0m[90m sets timestamps on findOneAndUpdate[0m
2025-04-09T19:13:51.5216211Z     [32m  [32mâœ”[39m[0m[90m sets timestamps on findOneAndReplace (gh-9951)[0m
2025-04-09T19:13:51.5434108Z     [32m  [32mâœ”[39m[0m[90m sets timestamps on replaceOne (gh-9951)[0m
2025-04-09T19:13:51.5635476Z     [32m  [32mâœ”[39m[0m[90m should change updatedAt when save[0m
2025-04-09T19:13:51.5832098Z     [32m  [32mâœ”[39m[0m[90m should not change updatedAt when save with no modifications[0m
2025-04-09T19:13:51.6157578Z     [32m  [32mâœ”[39m[0m[90m can skip with timestamps: false (gh-7357)[0m
2025-04-09T19:13:51.6475420Z     [32m  [32mâœ”[39m[0m[90m can skip with `$timestamps(false)` (gh-12117)[0m
2025-04-09T19:13:51.6805262Z     [32m  [32mâœ”[39m[0m[90m should change updatedAt when findOneAndUpdate[0m
2025-04-09T19:13:51.7146558Z     [32m  [32mâœ”[39m[0m[90m insertMany with createdAt off (gh-6381)[0m
2025-04-09T19:13:51.7427168Z     [32m  [32mâœ”[39m[0m[90m should have fields when updateOne[0m
2025-04-09T19:13:51.7650298Z     [32m  [32mâœ”[39m[0m[90m should change updatedAt when updateOne[0m
2025-04-09T19:13:51.7865273Z     [32m  [32mâœ”[39m[0m[90m should change updatedAt when updateMany[0m
2025-04-09T19:13:51.8168791Z     [32m  [32mâœ”[39m[0m[90m nested docs (gh-4049)[0m
2025-04-09T19:13:51.8779718Z     [32m  [32mâœ”[39m[0m[90m nested docs with push (gh-4049)[0m[33m (41ms)[0m
2025-04-09T19:13:51.8886254Z 
2025-04-09T19:13:51.8886858Z [0m  ValidationError[0m
2025-04-09T19:13:51.8922026Z   [32m  [32mâœ”[39m[0m[90m JSON.stringify() with message (gh-5309) (gh-9296)[0m
2025-04-09T19:13:51.8966046Z   [32m  [32mâœ”[39m[0m[90m default error message[0m
2025-04-09T19:13:51.9025233Z   [32m  [32mâœ”[39m[0m[90m should have error name in Cast error gh-10166[0m
2025-04-09T19:13:51.9047340Z [0m    #infiniteRecursion[0m
2025-04-09T19:13:51.9102444Z     [32m  [32mâœ”[39m[0m[90m does not cause RangeError (gh-1834)[0m
2025-04-09T19:13:51.9145738Z [0m    #minDate[0m
2025-04-09T19:13:51.9197044Z     [32m  [32mâœ”[39m[0m[90m causes a validation error[0m
2025-04-09T19:13:51.9239663Z [0m    #maxDate[0m
2025-04-09T19:13:51.9290382Z     [32m  [32mâœ”[39m[0m[90m causes a validation error[0m
2025-04-09T19:13:51.9333235Z [0m    #minLength[0m
2025-04-09T19:13:51.9383969Z     [32m  [32mâœ”[39m[0m[90m causes a validation error[0m
2025-04-09T19:13:51.9454413Z     [32m  [32mâœ”[39m[0m[90m with correct error message (gh-4207)[0m
2025-04-09T19:13:51.9497661Z [0m    #maxLength[0m
2025-04-09T19:13:51.9547915Z     [32m  [32mâœ”[39m[0m[90m causes a validation error[0m
2025-04-09T19:13:51.9590974Z [0m    #toString[0m
2025-04-09T19:13:51.9644551Z     [32m  [32mâœ”[39m[0m[90m does not cause RangeError (gh-1296)[0m
2025-04-09T19:13:51.9687507Z [0m    formatMessage[0m
2025-04-09T19:13:51.9731695Z     [32m  [32mâœ”[39m[0m[90m replaces properties in a message[0m
2025-04-09T19:13:51.9774862Z [0m    when user code defines a r/o Error#toJSON[0m
2025-04-09T19:13:51.9818971Z     [36m  - should not fail[0m
2025-04-09T19:13:51.9872964Z 
2025-04-09T19:13:51.9873604Z [0m  document: strict mode:[0m
2025-04-09T19:13:51.9930116Z   [32m  [32mâœ”[39m[0m[90m nested doc[0m
2025-04-09T19:13:52.0236201Z   [32m  [32mâœ”[39m[0m[90m sub doc[0m
2025-04-09T19:13:52.0387546Z   [32m  [32mâœ”[39m[0m[90m virtuals[0m
2025-04-09T19:13:52.0613385Z   [32m  [32mâœ”[39m[0m[90m can be overridden during set()[0m
2025-04-09T19:13:52.0829047Z   [32m  [32mâœ”[39m[0m[90m can be overridden during update()[0m
2025-04-09T19:13:52.0983096Z   [32m  [32mâœ”[39m[0m[90m can be overwritten with findOneAndUpdate (gh-1967)[0m
2025-04-09T19:13:52.1058206Z   [32m  [32mâœ”[39m[0m[90m handles setting `schema.options.strict` (gh-7103)[0m
2025-04-09T19:13:52.1137067Z [0m    should work[0m
2025-04-09T19:13:52.1359746Z     [32m  [32mâœ”[39m[0m[90m when creating models with non-strict schemas (gh-4274)[0m
2025-04-09T19:13:52.1458399Z     [32m  [32mâœ”[39m[0m[90m when creating models with strict schemas[0m
2025-04-09T19:13:52.1625313Z     [32m  [32mâœ”[39m[0m[90m when overriding strictness[0m
2025-04-09T19:13:52.1941792Z     [32m  [32mâœ”[39m[0m[90m when using Model#create[0m
2025-04-09T19:13:52.2006752Z [0m    "throws" mode[0m
2025-04-09T19:13:52.2073341Z     [32m  [32mâœ”[39m[0m[90m throws on set() of unknown property[0m
2025-04-09T19:13:52.2238708Z     [32m  [32mâœ”[39m[0m[90m fails with extra fields[0m
2025-04-09T19:13:52.2365504Z     [32m  [32mâœ”[39m[0m[90m doesnt throw with refs (gh-2665)[0m
2025-04-09T19:13:52.2479753Z     [32m  [32mâœ”[39m[0m[90m set nested to num throws ObjectExpectedError (gh-3735)[0m
2025-04-09T19:13:52.2600829Z 
2025-04-09T19:13:52.2601258Z [0m  parallelLimit[0m
2025-04-09T19:13:52.2635298Z   [32m  [32mâœ”[39m[0m[90m works with zero functions[0m
2025-04-09T19:13:52.3714819Z   [32m  [32mâœ”[39m[0m[90m executes functions in parallel[0m[31m (104ms)[0m
2025-04-09T19:13:52.3746333Z 
2025-04-09T19:13:52.3747454Z [0m  model: findOneAndDelete:[0m
2025-04-09T19:13:52.3918578Z   [32m  [32mâœ”[39m[0m[90m returns the original document[0m
2025-04-09T19:13:52.4061963Z   [32m  [32mâœ”[39m[0m[90m options/conditions/doc are merged when no callback is passed[0m
2025-04-09T19:13:52.4296934Z   [32m  [32mâœ”[39m[0m[90m returns the original document[0m
2025-04-09T19:13:52.4370729Z   [32m  [32mâœ”[39m[0m[90m options/conditions/doc are merged when no callback is passed[0m
2025-04-09T19:13:52.4480372Z   [32m  [32mâœ”[39m[0m[90m supports v3 select string syntax[0m
2025-04-09T19:13:52.4608967Z   [32m  [32mâœ”[39m[0m[90m supports v3 select object syntax[0m
2025-04-09T19:13:52.4719331Z   [32m  [32mâœ”[39m[0m[90m supports v3 sort string syntax[0m
2025-04-09T19:13:52.4836284Z   [32m  [32mâœ”[39m[0m[90m supports v3 sort object syntax[0m
2025-04-09T19:13:52.5211592Z   [32m  [32mâœ”[39m[0m[90m supports population (gh-1395)[0m
2025-04-09T19:13:52.5309720Z   [32m  [32mâœ”[39m[0m[90m only calls setters once (gh-6203)[0m
2025-04-09T19:13:52.5619241Z   [32m  [32mâœ”[39m[0m[90m supports the `includeResultMetadata` option (gh-13539)[0m
2025-04-09T19:13:52.5661305Z [0m    middleware[0m
2025-04-09T19:13:52.5846227Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:52.6071212Z     [32m  [32mâœ”[39m[0m[90m works with exec() (gh-439)[0m
2025-04-09T19:13:52.6178882Z 
2025-04-09T19:13:52.6181241Z [0m  types.embeddeddocumentdeclarative[0m
2025-04-09T19:13:52.6195791Z [0m    with a parent with a field with type set to a POJO[0m
2025-04-09T19:13:52.6207146Z [0m      creates subdocument schema if `type` is an object with keys[0m
2025-04-09T19:13:52.6261792Z       [32m  [32mâœ”[39m[0m[90m interprets the POJO as a subschema (gh-7494)[0m
2025-04-09T19:13:52.6354582Z       [32m  [32mâœ”[39m[0m[90m enforces provided schema on the child path, unlike Mixed (gh-7494)[0m
2025-04-09T19:13:52.6434315Z       [32m  [32mâœ”[39m[0m[90m underneath array (gh-8627)[0m
2025-04-09T19:13:52.6522828Z       [32m  [32mâœ”[39m[0m[90m nested array (gh-8627)[0m
2025-04-09T19:13:52.6589083Z [0m    with a parent with a POJO field with a field "type" with a type set to "String"[0m
2025-04-09T19:13:52.6632812Z     [32m  [32mâœ”[39m[0m[90m does not create a path for child in either option[0m
2025-04-09T19:13:52.6698179Z     [32m  [32mâœ”[39m[0m[90m treats type as a property name not a type in both options[0m
2025-04-09T19:13:52.6771742Z     [32m  [32mâœ”[39m[0m[90m enforces provided schema on the child tree in both options, unlike Mixed (gh-7494)[0m
2025-04-09T19:13:52.6824709Z 
2025-04-09T19:13:52.6826988Z [0m  connections:[0m
2025-04-09T19:13:52.6860885Z   [32m  [32mâœ”[39m[0m[90m should allow closing a closed connection[0m
2025-04-09T19:13:52.6912792Z   [32m  [32mâœ”[39m[0m[90m should return an error if malformed uri passed[0m
2025-04-09T19:13:52.7983160Z   [32m  [32mâœ”[39m[0m[90m force close (gh-5664)[0m[31m (103ms)[0m
2025-04-09T19:13:52.8061162Z   [32m  [32mâœ”[39m[0m[90m destroy connection and remove it permanently[0m
2025-04-09T19:13:52.8135378Z   [32m  [32mâœ”[39m[0m[90m verify that attempt to re-open destroyed connection throws error, via promise[0m
2025-04-09T19:13:52.8208869Z   [32m  [32mâœ”[39m[0m[90m verify that attempt to re-open destroyed connection throws error, via callback[0m
2025-04-09T19:13:52.9278376Z   [32m  [32mâœ”[39m[0m[90m force close with connection created after close (gh-5664)[0m[31m (102ms)[0m
2025-04-09T19:13:52.9464302Z   [32m  [32mâœ”[39m[0m[90m bufferCommands (gh-5720)[0m
2025-04-09T19:13:52.9523762Z   [32m  [32mâœ”[39m[0m[90m dbName option (gh-6106)[0m
2025-04-09T19:13:52.9586067Z   [32m  [32mâœ”[39m[0m[90m uses default database in uri if options.dbName is not provided[0m
2025-04-09T19:13:52.9712758Z   [32m  [32mâœ”[39m[0m[90m startSession() (gh-6653)[0m
2025-04-09T19:13:52.9884835Z   [32m  [32mâœ”[39m[0m[90m deleteModel()[0m
2025-04-09T19:13:53.0975369Z   [32m  [32mâœ”[39m[0m[90m throws a MongooseServerSelectionError on server selection timeout (gh-8451)[0m[31m (105ms)[0m
2025-04-09T19:13:53.2054002Z   [32m  [32mâœ”[39m[0m[90m avoids unhandled error on createConnection() if error handler registered (gh-14377)[0m[31m (104ms)[0m
2025-04-09T19:13:53.2099419Z   [36m  - `watch()` on a whole collection (gh-8425)[0m
2025-04-09T19:13:53.2177760Z   [32m  [32mâœ”[39m[0m[90m useDB inherits config from default connection (gh-8267)[0m
2025-04-09T19:13:53.2321334Z   [32m  [32mâœ”[39m[0m[90m allows setting client on a disconnected connection (gh-9164)[0m
2025-04-09T19:13:53.2383587Z   [32m  [32mâœ”[39m[0m[90m connection.asPromise() resolves to a connection instance (gh-9496)[0m
2025-04-09T19:13:53.2441706Z   [32m  [32mâœ”[39m[0m[90m allows overwriting models (gh-9406)[0m
2025-04-09T19:13:53.2496238Z   [32m  [32mâœ”[39m[0m[90m allows setting `overwriteModels` globally (gh-9406)[0m
2025-04-09T19:13:53.2541002Z   [32m  [32mâœ”[39m[0m[90m Connection id should be scoped per Mongoose Instance (gh-10025)[0m
2025-04-09T19:13:53.2591034Z   [32m  [32mâœ”[39m[0m[90m model() works with 1 argument and overwriteModels set to true (gh-12359)[0m
2025-04-09T19:13:53.2705796Z   [32m  [32mâœ”[39m[0m[90m creates collection if creating model while connection is disconnected with bufferCommands=false[0m
2025-04-09T19:13:53.2747206Z   [32m  [32mâœ”[39m[0m[90m should create connections with unique IDs also if one has been destroyed (gh-12966)[0m
2025-04-09T19:13:53.2780655Z   [32m  [32mâœ”[39m[0m[90m should not create default connection with createInitialConnection = false (gh-12965)[0m
2025-04-09T19:13:53.2859492Z   [32m  [32mâœ”[39m[0m[90m with autoCreate = false after schema create (gh-12940)[0m
2025-04-09T19:13:53.2907037Z   [32m  [32mâœ”[39m[0m[90m does not wait for buffering if autoCreate: false (gh-15241)[0m
2025-04-09T19:13:53.2951304Z   [32m  [32mâœ”[39m[0m[90m should not create default connection with createInitialConnection = false (gh-12965)[0m
2025-04-09T19:13:53.2995182Z   [36m  - should demonstrate the withSession() function (gh-14330)[0m
2025-04-09T19:13:53.3075260Z   [32m  [32mâœ”[39m[0m[90m listDatabases() should return a list of database objects with a name property (gh-9048)[0m
2025-04-09T19:13:53.3248204Z   [36m  - connection bulkWrite() ordered (gh-15028)[0m
2025-04-09T19:13:53.3410562Z   [36m  - connection bulkWrite() unordered (gh-15028)[0m
2025-04-09T19:13:53.4511277Z   [32m  [32mâœ”[39m[0m[90m buffers connection helpers[0m[31m (105ms)[0m
2025-04-09T19:13:53.5569519Z   [32m  [32mâœ”[39m[0m[90m connection helpers buffering times out[0m[31m (101ms)[0m
2025-04-09T19:13:53.5733627Z   [32m  [32mâœ”[39m[0m[90m supports db-level aggregate on connection (gh-15118)[0m
2025-04-09T19:13:53.5755115Z [0m    openUri (gh-5304)[0m
2025-04-09T19:13:53.5860525Z     [32m  [32mâœ”[39m[0m[90m with mongoose.createConnection()[0m
2025-04-09T19:13:53.5955106Z     [32m  [32mâœ”[39m[0m[90m with autoIndex (gh-5423)[0m
2025-04-09T19:13:53.6178097Z     [32m  [32mâœ”[39m[0m[90m with autoCreate (gh-6489)[0m
2025-04-09T19:13:53.6303546Z     [32m  [32mâœ”[39m[0m[90m with autoCreate = false (gh-8814)[0m
2025-04-09T19:13:53.6517639Z     [32m  [32mâœ”[39m[0m[90m autoCreate when collection already exists does not fail (gh-7122)[0m
2025-04-09T19:13:53.6583874Z     [32m  [32mâœ”[39m[0m[90m throws helpful error with undefined uri (gh-6763)[0m
2025-04-09T19:13:53.6695052Z     [32m  [32mâœ”[39m[0m[90m resolving with q (gh-5714)[0m
2025-04-09T19:13:53.6845504Z     [32m  [32mâœ”[39m[0m[90m connection plugins (gh-7378)[0m
2025-04-09T19:13:53.6888871Z [0m    helpers[0m
2025-04-09T19:13:53.6968454Z     [32m  [32mâœ”[39m[0m[90m dropDatabase()[0m
2025-04-09T19:13:53.7119570Z     [32m  [32mâœ”[39m[0m[90m dropCollection()[0m
2025-04-09T19:13:53.7346907Z     [32m  [32mâœ”[39m[0m[90m createCollection()[0m
2025-04-09T19:13:53.7577121Z     [32m  [32mâœ”[39m[0m[90m listCollections()[0m
2025-04-09T19:13:53.7648584Z [0m    events[0m
2025-04-09T19:13:53.7793345Z     [32m  [32mâœ”[39m[0m[90m operation-start[0m
2025-04-09T19:13:53.7870318Z     [32m  [32mâœ”[39m[0m[90m operation-end[0m
2025-04-09T19:13:53.7947660Z     [32m  [32mâœ”[39m[0m[90m commandStarted, commandFailed, commandSucceeded (gh-14611)[0m
2025-04-09T19:13:53.8007924Z [0m    errors[0m
2025-04-09T19:13:53.8053734Z     [32m  [32mâœ”[39m[0m[90m .catch() means error does not get thrown (gh-5229)[0m
2025-04-09T19:13:53.8133671Z     [32m  [32mâœ”[39m[0m[90m promise is rejected even if there is an error event listener (gh-7850)[0m
2025-04-09T19:13:53.8201164Z     [32m  [32mâœ”[39m[0m[90m readyState is disconnected if initial connection fails (gh-6244)[0m
2025-04-09T19:13:53.8244159Z [0m    .model()[0m
2025-04-09T19:13:53.8300934Z     [32m  [32mâœ”[39m[0m[90m allows passing a schema[0m
2025-04-09T19:13:53.8373021Z     [32m  [32mâœ”[39m[0m[90m should properly assign the db[0m
2025-04-09T19:13:53.8442443Z     [32m  [32mâœ”[39m[0m[90m prevents overwriting pre-existing models[0m
2025-04-09T19:13:53.8512462Z     [32m  [32mâœ”[39m[0m[90m allows passing identical name + schema args[0m
2025-04-09T19:13:53.8583380Z     [32m  [32mâœ”[39m[0m[90m throws on unknown model name[0m
2025-04-09T19:13:53.8615983Z [0m      passing collection name[0m
2025-04-09T19:13:53.8626882Z [0m        when model name already exists[0m
2025-04-09T19:13:53.8697701Z         [32m  [32mâœ”[39m[0m[90m returns a new uncached model[0m
2025-04-09T19:13:53.8767088Z [0m      passing object literal schemas[0m
2025-04-09T19:13:53.8949194Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:53.9032677Z [0m    modelNames()[0m
2025-04-09T19:13:53.9093003Z     [32m  [32mâœ”[39m[0m[90m returns names of all models registered on it[0m
2025-04-09T19:13:53.9136180Z [0m    connection pool sharing: [0m
2025-04-09T19:13:53.9223172Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:53.9498140Z     [32m  [32mâœ”[39m[0m[90m saves correctly[0m
2025-04-09T19:13:53.9575246Z     [32m  [32mâœ”[39m[0m[90m emits connecting events on both[0m
2025-04-09T19:13:53.9649842Z     [32m  [32mâœ”[39m[0m[90m emits connected events on both[0m
2025-04-09T19:13:53.9725016Z     [32m  [32mâœ”[39m[0m[90m emits open events on both[0m
2025-04-09T19:13:53.9806154Z     [32m  [32mâœ”[39m[0m[90m emits disconnecting events on both, closing initial db[0m
2025-04-09T19:13:53.9893278Z     [32m  [32mâœ”[39m[0m[90m emits disconnecting events on both, closing secondary db[0m
2025-04-09T19:13:53.9991366Z     [32m  [32mâœ”[39m[0m[90m emits disconnected events on both, closing initial db[0m
2025-04-09T19:13:54.0085871Z     [32m  [32mâœ”[39m[0m[90m emits disconnected events on both, closing secondary db[0m
2025-04-09T19:13:54.0192919Z     [32m  [32mâœ”[39m[0m[90m closes correctly for all dbs, closing initial db[0m
2025-04-09T19:13:54.0316367Z     [32m  [32mâœ”[39m[0m[90m handles re-opening base connection (gh-11240)[0m
2025-04-09T19:13:54.0416488Z     [32m  [32mâœ”[39m[0m[90m closes correctly for all dbs, closing secondary db[0m
2025-04-09T19:13:54.0523182Z     [32m  [32mâœ”[39m[0m[90m cache connections to the same db[0m
2025-04-09T19:13:54.0679765Z     [32m  [32mâœ”[39m[0m[90m supports removing db (gh-11821)[0m
2025-04-09T19:13:54.0722627Z [0m    shouldAuthenticate()[0m
2025-04-09T19:13:54.0733693Z [0m      when using standard authentication[0m
2025-04-09T19:13:54.0744686Z [0m        when username and password are undefined[0m
2025-04-09T19:13:54.0839856Z         [32m  [32mâœ”[39m[0m[90m should return false[0m
2025-04-09T19:13:54.0905024Z [0m        when username and password are empty strings[0m
2025-04-09T19:13:54.0999005Z         [32m  [32mâœ”[39m[0m[90m should return false[0m
2025-04-09T19:13:54.1063562Z [0m        when both username and password are defined[0m
2025-04-09T19:13:54.1195639Z         [32m  [32mâœ”[39m[0m[90m should return true[0m
2025-04-09T19:13:54.1272232Z [0m      when using MONGODB-X509 authentication[0m
2025-04-09T19:13:54.1282943Z [0m        when username and password are undefined[0m
2025-04-09T19:13:54.1377438Z         [32m  [32mâœ”[39m[0m[90m should return false[0m
2025-04-09T19:13:54.1431380Z [0m        when only username is defined[0m
2025-04-09T19:13:54.1542389Z         [32m  [32mâœ”[39m[0m[90m should return false[0m
2025-04-09T19:13:54.1609500Z [0m        when both username and password are defined[0m
2025-04-09T19:13:54.1719946Z         [32m  [32mâœ”[39m[0m[90m should return false[0m
2025-04-09T19:13:54.1807273Z [0m    passing a function into createConnection[0m
2025-04-09T19:13:54.1959325Z     [32m  [32mâœ”[39m[0m[90m should store the name of the function (gh-6517)[0m
2025-04-09T19:13:54.2002707Z [0m    when connecting with a secondary read preference(gh-9374)[0m
2025-04-09T19:13:54.2013417Z [0m      mongoose.connect[0m
2025-04-09T19:13:54.2100796Z       [32m  [32mâœ”[39m[0m[90m forces autoIndex & autoCreate to be false if read preference is secondary or secondaryPreferred[0m
2025-04-09T19:13:54.2189487Z       [32m  [32mâœ”[39m[0m[90m throws if options try to set autoIndex to true[0m
2025-04-09T19:13:54.2277903Z       [32m  [32mâœ”[39m[0m[90m throws if options.config.autoIndex is true, even if options.autoIndex is false[0m
2025-04-09T19:13:54.2331690Z [0m      mongoose.createConnection[0m
2025-04-09T19:13:54.2458542Z       [32m  [32mâœ”[39m[0m[90m forces autoIndex & autoCreate to be false if read preference is secondary or secondaryPreferred (gh-9374)[0m
2025-04-09T19:13:54.2576306Z       [32m  [32mâœ”[39m[0m[90m keeps autoIndex & autoCreate as true by default if read preference is primaryPreferred (gh-9374)[0m
2025-04-09T19:13:54.2664715Z       [32m  [32mâœ”[39m[0m[90m throws if options try to set autoIndex to true[0m
2025-04-09T19:13:54.2753460Z       [32m  [32mâœ”[39m[0m[90m throws if options.config.autoIndex is true, even if options.autoIndex is false[0m
2025-04-09T19:13:54.2817446Z [0m    Automatic init[0m
2025-04-09T19:13:54.3208667Z     [32m  [32mâœ”[39m[0m[90m re-runs init() if connecting after disconnecting (gh-12047)[0m
2025-04-09T19:13:54.3466989Z     [32m  [32mâœ”[39m[0m[90m re-runs init() if running setClient() after disconnecting (gh-12047)[0m
2025-04-09T19:13:54.3502489Z [0m    Connection#syncIndexes() (gh-10893) (gh-11039)[0m
2025-04-09T19:13:54.3798179Z     [32m  [32mâœ”[39m[0m[90m Allows a syncIndexes option with connection mongoose.connection.syncIndexes (gh-10893)[0m
2025-04-09T19:13:54.4089576Z     [32m  [32mâœ”[39m[0m[90m does not sync indexes automatically when `autoIndex: true` (gh-11039)[0m
2025-04-09T19:13:54.4716914Z     [32m  [32mâœ”[39m[0m[90m stops as soon as one model fails with `continueOnError: false` (gh-11039)[0m[33m (48ms)[0m
2025-04-09T19:13:54.5040292Z     [32m  [32mâœ”[39m[0m[90m error includes a property with all the errors when `continueOnError: false`[0m
2025-04-09T19:13:54.5348213Z     [32m  [32mâœ”[39m[0m[90m `continueOnError` is false by default[0m
2025-04-09T19:13:54.5828639Z     [32m  [32mâœ”[39m[0m[90m when `continueOnError: true` it will continue to sync indexes even if one model fails[0m[33m (39ms)[0m
2025-04-09T19:13:54.6294661Z     [32m  [32mâœ”[39m[0m[90m when `continueOnError: true` it will return a map of modelNames and their sync results/errors[0m[33m (39ms)[0m
2025-04-09T19:13:54.6825928Z     [32m  [32mâœ”[39m[0m[90m mongoose.syncIndexes(...) accepts `continueOnError`[0m[33m (45ms)[0m
2025-04-09T19:13:54.6906332Z [0m    createCollections()[0m
2025-04-09T19:13:54.7201709Z     [32m  [32mâœ”[39m[0m[90m should create collections for all models on the connection with the createCollections() function (gh-13300)[0m
2025-04-09T19:13:54.7244530Z [0m    processConnectionOptions[0m
2025-04-09T19:13:54.7307819Z     [32m  [32mâœ”[39m[0m[90m should not throw an error when attempting to mutate unmutable options object gh-13335[0m
2025-04-09T19:13:54.7385661Z 
2025-04-09T19:13:54.7386134Z [0m  SchemaDate[0m
2025-04-09T19:13:54.7425011Z   [32m  [32mâœ”[39m[0m[90m accepts a Date[0m
2025-04-09T19:13:54.7469155Z   [32m  [32mâœ”[39m[0m[90m casts a date string to a string[0m
2025-04-09T19:13:54.7513336Z   [32m  [32mâœ”[39m[0m[90m interprets a number as a unix timestamp[0m
2025-04-09T19:13:54.7557712Z   [32m  [32mâœ”[39m[0m[90m attempts to interpret a string as a Date, not a timestamo (gh-5395)[0m
2025-04-09T19:13:54.7602167Z   [32m  [32mâœ”[39m[0m[90m casts any object with a `.valueOf` function to a date[0m
2025-04-09T19:13:54.7646415Z   [32m  [32mâœ”[39m[0m[90m casts string representation of unix timestamps (gh-6443)[0m
2025-04-09T19:13:54.7677899Z 
2025-04-09T19:13:54.7678404Z [0m  pre/post hooks, type of this[0m
2025-04-09T19:13:54.8058377Z   [32m  [32mâœ”[39m[0m[90m dynamic type of this in pre/post hooks[0m
2025-04-09T19:13:54.8141860Z 
2025-04-09T19:13:54.8143391Z [0m  model: querying:[0m
2025-04-09T19:13:54.8324570Z   [32m  [32mâœ”[39m[0m[90m find returns a Query[0m
2025-04-09T19:13:54.8510545Z   [32m  [32mâœ”[39m[0m[90m findOne returns a Query[0m
2025-04-09T19:13:54.8882091Z   [32m  [32mâœ”[39m[0m[90m by Date (gh-336)[0m
2025-04-09T19:13:54.9133278Z   [32m  [32mâœ”[39m[0m[90m mixed types with $elemMatch (gh-591)[0m
2025-04-09T19:13:54.9581052Z   [32m  [32mâœ”[39m[0m[90m works with different methods and query types[0m
2025-04-09T19:13:55.0059553Z   [32m  [32mâœ”[39m[0m[90m with conditionals[0m[33m (39ms)[0m
2025-04-09T19:13:55.0224757Z   [32m  [32mâœ”[39m[0m[90m with previously existing null values in the db[0m
2025-04-09T19:13:55.0456430Z   [32m  [32mâœ”[39m[0m[90m with unused values in the db[0m
2025-04-09T19:13:55.0690765Z   [32m  [32mâœ”[39m[0m[90m does not apply string schema setters on $regex (gh-11426)[0m
2025-04-09T19:13:55.0821962Z [0m    distinct[0m
2025-04-09T19:13:55.0871335Z     [32m  [32mâœ”[39m[0m[90m returns a Query[0m
2025-04-09T19:13:55.1226905Z     [32m  [32mâœ”[39m[0m[90m executes when you exec[0m
2025-04-09T19:13:55.1554882Z     [32m  [32mâœ”[39m[0m[90m permits excluding conditions gh-1541[0m
2025-04-09T19:13:55.1645543Z [0m    updateOne[0m
2025-04-09T19:13:55.1704928Z     [32m  [32mâœ”[39m[0m[90m returns a Query[0m
2025-04-09T19:13:55.1983991Z     [32m  [32mâœ”[39m[0m[90m can handle minimize option (gh-3381)[0m
2025-04-09T19:13:55.2049883Z [0m    findOne[0m
2025-04-09T19:13:55.2207394Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:55.2404269Z     [32m  [32mâœ”[39m[0m[90m casts $modifiers[0m
2025-04-09T19:13:55.2601927Z     [32m  [32mâœ”[39m[0m[90m querying if an array contains one of multiple members $in a set[0m
2025-04-09T19:13:55.2804340Z     [32m  [32mâœ”[39m[0m[90m querying if an array contains one of multiple members $in a set 2[0m
2025-04-09T19:13:55.3019515Z     [32m  [32mâœ”[39m[0m[90m querying via $where a string[0m
2025-04-09T19:13:55.3419034Z     [32m  [32mâœ”[39m[0m[90m querying via $where a function[0m
2025-04-09T19:13:55.3630097Z     [32m  [32mâœ”[39m[0m[90m based on nested fields[0m
2025-04-09T19:13:55.3843567Z     [32m  [32mâœ”[39m[0m[90m based on embedded doc fields (gh-242, gh-463)[0m
2025-04-09T19:13:55.4049961Z     [32m  [32mâœ”[39m[0m[90m works with nested docs and string ids (gh-389)[0m
2025-04-09T19:13:55.4314820Z     [32m  [32mâœ”[39m[0m[90m using #all with nested #elemMatch[0m
2025-04-09T19:13:55.4529600Z     [32m  [32mâœ”[39m[0m[90m using #or with nested #elemMatch[0m
2025-04-09T19:13:55.4738473Z     [32m  [32mâœ”[39m[0m[90m buffer $in array[0m
2025-04-09T19:13:55.4967352Z     [32m  [32mâœ”[39m[0m[90m regex with Array (gh-599)[0m
2025-04-09T19:13:55.5177596Z     [32m  [32mâœ”[39m[0m[90m regex with options[0m
2025-04-09T19:13:55.5406983Z     [32m  [32mâœ”[39m[0m[90m works with $elemMatch and $in combo (gh-1100)[0m
2025-04-09T19:13:55.5470031Z [0m    findById[0m
2025-04-09T19:13:55.5628520Z     [32m  [32mâœ”[39m[0m[90m handles undefined[0m
2025-04-09T19:13:55.5826234Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:55.6054365Z     [32m  [32mâœ”[39m[0m[90m works with partial initialization[0m
2025-04-09T19:13:55.6237634Z     [32m  [32mâœ”[39m[0m[90m querying if an array contains at least a certain single member (gh-220)[0m
2025-04-09T19:13:55.6517962Z     [32m  [32mâœ”[39m[0m[90m where an array where the $slice operator[0m
2025-04-09T19:13:55.6582202Z [0m    find[0m
2025-04-09T19:13:55.6754105Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:55.6938262Z     [32m  [32mâœ”[39m[0m[90m returns docs where an array that contains one specific member[0m
2025-04-09T19:13:55.7211121Z     [32m  [32mâœ”[39m[0m[90m works when comparing $ne with single value against an array[0m
2025-04-09T19:13:55.7453156Z     [32m  [32mâœ”[39m[0m[90m with partial initialization[0m
2025-04-09T19:13:55.7752838Z     [32m  [32mâœ”[39m[0m[90m where $exists[0m
2025-04-09T19:13:55.7956386Z     [32m  [32mâœ”[39m[0m[90m works with $elemMatch (gh-1100)[0m
2025-04-09T19:13:55.8189337Z     [32m  [32mâœ”[39m[0m[90m where $mod[0m
2025-04-09T19:13:55.8465047Z     [32m  [32mâœ”[39m[0m[90m where $not[0m
2025-04-09T19:13:56.0295344Z     [32m  [32mâœ”[39m[0m[90m where or()[0m[31m (173ms)[0m
2025-04-09T19:13:56.0676886Z     [32m  [32mâœ”[39m[0m[90m using $or with array of Document[0m
2025-04-09T19:13:56.1014771Z     [32m  [32mâœ”[39m[0m[90m where $ne[0m
2025-04-09T19:13:56.1412285Z     [32m  [32mâœ”[39m[0m[90m where $nor[0m
2025-04-09T19:13:56.1784577Z     [32m  [32mâœ”[39m[0m[90m STRICT null matches[0m
2025-04-09T19:13:56.2164499Z     [32m  [32mâœ”[39m[0m[90m null matches null and undefined[0m
2025-04-09T19:13:56.2466937Z     [32m  [32mâœ”[39m[0m[90m a document whose arrays contain at least $all string values[0m
2025-04-09T19:13:56.2741679Z     [32m  [32mâœ”[39m[0m[90m using #nor with nested #elemMatch[0m
2025-04-09T19:13:56.2989270Z     [32m  [32mâœ”[39m[0m[90m strings via regexp[0m
2025-04-09T19:13:56.3284678Z     [32m  [32mâœ”[39m[0m[90m a document whose arrays contain at least $all values[0m
2025-04-09T19:13:56.3527264Z     [32m  [32mâœ”[39m[0m[90m where $size[0m
2025-04-09T19:13:56.4112541Z     [32m  [32mâœ”[39m[0m[90m $gt, $lt, $lte, $gte work on strings[0m[33m (49ms)[0m
2025-04-09T19:13:56.4182112Z [0m      text search indexes[0m
2025-04-09T19:13:56.4450759Z       [32m  [32mâœ”[39m[0m[90m works with text search ensure indexes [0m
2025-04-09T19:13:56.4720007Z       [32m  [32mâœ”[39m[0m[90m works when text search is called by a schema (gh-3824) (gh-6851)[0m
2025-04-09T19:13:56.4809573Z [0m    limit[0m
2025-04-09T19:13:56.5005547Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:56.5071247Z [0m    skip[0m
2025-04-09T19:13:56.5280072Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:56.5344972Z [0m    sort[0m
2025-04-09T19:13:56.5523253Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:56.5810573Z     [32m  [32mâœ”[39m[0m[90m handles sorting by text score[0m
2025-04-09T19:13:56.5879047Z [0m    nested mixed "x.y.z"[0m
2025-04-09T19:13:56.5929518Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:56.6019167Z [0m    $all[0m
2025-04-09T19:13:56.6244837Z     [32m  [32mâœ”[39m[0m[90m with ObjectIds (gh-690)[0m
2025-04-09T19:13:56.6552264Z     [32m  [32mâœ”[39m[0m[90m with Dates[0m
2025-04-09T19:13:56.6897998Z     [32m  [32mâœ”[39m[0m[90m with $elemMatch (gh-3163)[0m
2025-04-09T19:13:56.6966048Z [0m    and[0m
2025-04-09T19:13:56.7159985Z     [32m  [32mâœ”[39m[0m[90m works with queries gh-1188[0m
2025-04-09T19:13:56.7300152Z     [32m  [32mâœ”[39m[0m[90m works with nested query selectors gh-1884[0m
2025-04-09T19:13:56.7407456Z [0m    2d[0m
2025-04-09T19:13:56.7677701Z     [32m  [32mâœ”[39m[0m[90m $near (gh-309)[0m
2025-04-09T19:13:56.7922307Z     [32m  [32mâœ”[39m[0m[90m $within arrays (gh-586)[0m
2025-04-09T19:13:56.8167703Z     [32m  [32mâœ”[39m[0m[90m $nearSphere with arrays (gh-610)[0m
2025-04-09T19:13:56.8412803Z     [32m  [32mâœ”[39m[0m[90m $nearSphere with invalid coordinate does not crash (gh-1874)[0m
2025-04-09T19:13:56.8666715Z     [32m  [32mâœ”[39m[0m[90m $maxDistance with arrays[0m
2025-04-09T19:13:56.8735159Z [0m    2dsphere[0m
2025-04-09T19:13:56.8904405Z     [32m  [32mâœ”[39m[0m[90m index is allowed in schema[0m
2025-04-09T19:13:56.8975885Z [0m      $geometry[0m
2025-04-09T19:13:56.9198003Z       [32m  [32mâœ”[39m[0m[90m Polygon[0m
2025-04-09T19:13:56.9279203Z [0m      $geoIntersects[0m
2025-04-09T19:13:56.9491881Z       [32m  [32mâœ”[39m[0m[90m LineString[0m
2025-04-09T19:13:56.9857893Z       [32m  [32mâœ”[39m[0m[90m MultiLineString[0m
2025-04-09T19:13:57.0148107Z       [32m  [32mâœ”[39m[0m[90m MultiPolygon[0m
2025-04-09T19:13:57.0226555Z [0m      $near[0m
2025-04-09T19:13:57.0448991Z       [32m  [32mâœ”[39m[0m[90m Point[0m
2025-04-09T19:13:57.0730267Z       [32m  [32mâœ”[39m[0m[90m works with GeoJSON (gh-1482)[0m
2025-04-09T19:13:57.1042911Z       [32m  [32mâœ”[39m[0m[90m works with legacy 2dsphere pair in schema (gh-6937)[0m
2025-04-09T19:13:57.1139023Z [0m    hashed indexes[0m
2025-04-09T19:13:57.1452970Z     [32m  [32mâœ”[39m[0m[90m work[0m
2025-04-09T19:13:57.1522335Z [0m    lean[0m
2025-04-09T19:13:57.1715910Z     [32m  [32mâœ”[39m[0m[90m find[0m
2025-04-09T19:13:57.1966167Z     [32m  [32mâœ”[39m[0m[90m removes the __v property if versionKey: false is set (gh-8934)[0m
2025-04-09T19:13:57.2181035Z     [32m  [32mâœ”[39m[0m[90m findOne[0m
2025-04-09T19:13:57.2280228Z     [32m  [32mâœ”[39m[0m[90m properly casts nested and/or queries (gh-676)[0m
2025-04-09T19:13:57.2455180Z     [32m  [32mâœ”[39m[0m[90m properly casts deeply nested and/or queries (gh-676)[0m
2025-04-09T19:13:57.2808422Z     [32m  [32mâœ”[39m[0m[90m casts $elemMatch (gh-2199)[0m
2025-04-09T19:13:57.2928737Z     [32m  [32mâœ”[39m[0m[90m does not run resetId setter on query (gh-6093)[0m
2025-04-09T19:13:57.3106105Z [0m      $eq[0m
2025-04-09T19:13:57.3182734Z       [32m  [32mâœ”[39m[0m[90m casts $eq (gh-2752)[0m
2025-04-09T19:13:57.3303559Z 
2025-04-09T19:13:57.3304011Z [0m  model: validate: [0m
2025-04-09T19:13:57.3363476Z   [32m  [32mâœ”[39m[0m[90m Model.validate() (gh-7587)[0m
2025-04-09T19:13:57.3416793Z   [32m  [32mâœ”[39m[0m[90m Model.validate(...) validates paths in arrays (gh-8821)[0m
2025-04-09T19:13:57.3477915Z   [32m  [32mâœ”[39m[0m[90m Model.validate(...) respects discriminators (gh-12621)[0m
2025-04-09T19:13:57.3526976Z   [32m  [32mâœ”[39m[0m[90m Model.validate() works with arrays (gh-10669)[0m
2025-04-09T19:13:57.3577560Z   [32m  [32mâœ”[39m[0m[90m Model.validate(...) uses document instance as context by default (gh-10132)[0m
2025-04-09T19:13:57.3616275Z   [32m  [32mâœ”[39m[0m[90m Model.validate(...) uses object as context by default (gh-10346)[0m
2025-04-09T19:13:57.3669618Z   [32m  [32mâœ”[39m[0m[90m Model.validate(...) supports passing in an object, array or string (gh-10353)[0m
2025-04-09T19:13:57.3729016Z   [32m  [32mâœ”[39m[0m[90m runs validation on casted paths even if cast error happened[0m
2025-04-09T19:13:57.3761632Z 
2025-04-09T19:13:57.3763528Z [0m  types array[0m
2025-04-09T19:13:57.3812576Z   [32m  [32mâœ”[39m[0m[90m behaves and quacks like an Array[0m
2025-04-09T19:13:57.3886872Z   [32m  [32mâœ”[39m[0m[90m is `deepEqual()` another array (gh-7700)[0m
2025-04-09T19:13:57.3998708Z   [32m  [32mâœ”[39m[0m[90m does not mutate passed-in array (gh-10766)[0m
2025-04-09T19:13:57.4129378Z   [32m  [32mâœ”[39m[0m[90m test "castNonArrays" property option[0m
2025-04-09T19:13:57.4245624Z   [32m  [32mâœ”[39m[0m[90m `castNonArrays` on specific paths takes precedence over global option[0m
2025-04-09T19:13:57.4312655Z   [32m  [32mâœ”[39m[0m[90m supports setting nested arrays directly (gh-13372)[0m
2025-04-09T19:13:57.4451630Z   [32m  [32mâœ”[39m[0m[90m calls array setters (gh-11380)[0m
2025-04-09T19:13:57.4549220Z [0m    hasAtomics[0m
2025-04-09T19:13:57.4594271Z     [32m  [32mâœ”[39m[0m[90m does not throw[0m
2025-04-09T19:13:57.4655164Z [0m    indexOf()[0m
2025-04-09T19:13:57.5045067Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:57.5160577Z [0m    includes()[0m
2025-04-09T19:13:57.5519993Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:57.5591066Z [0m    push()[0m
2025-04-09T19:13:57.5775466Z     [32m  [32mâœ”[39m[0m[90m works with numbers[0m
2025-04-09T19:13:57.6009605Z     [32m  [32mâœ”[39m[0m[90m works with strings[0m
2025-04-09T19:13:57.6241733Z     [32m  [32mâœ”[39m[0m[90m works with buffers[0m
2025-04-09T19:13:57.6535397Z     [32m  [32mâœ”[39m[0m[90m works with mixed[0m
2025-04-09T19:13:57.6799797Z     [32m  [32mâœ”[39m[0m[90m works with sub-docs[0m
2025-04-09T19:13:57.7041990Z     [32m  [32mâœ”[39m[0m[90m applies setters (gh-3032)[0m
2025-04-09T19:13:57.7107662Z [0m    splice()[0m
2025-04-09T19:13:57.7297447Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:57.7563624Z     [32m  [32mâœ”[39m[0m[90m on embedded docs[0m
2025-04-09T19:13:57.7627970Z [0m    unshift()[0m
2025-04-09T19:13:57.7817209Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:57.8031247Z     [32m  [32mâœ”[39m[0m[90m applies setters (gh-3032)[0m
2025-04-09T19:13:57.8096720Z [0m    shift()[0m
2025-04-09T19:13:57.8305738Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:57.8371101Z [0m    $shift[0m
2025-04-09T19:13:57.8574785Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:57.8657024Z [0m    pop()[0m
2025-04-09T19:13:57.8870509Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:57.8936370Z [0m    pull()[0m
2025-04-09T19:13:57.9171924Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:57.9403146Z     [32m  [32mâœ”[39m[0m[90m registers $pull atomic if pulling from middle (gh-14502)[0m
2025-04-09T19:13:57.9642859Z     [32m  [32mâœ”[39m[0m[90m handles pulling with no _id (gh-3341)[0m
2025-04-09T19:13:57.9886902Z     [32m  [32mâœ”[39m[0m[90m properly works with undefined[0m
2025-04-09T19:13:57.9987903Z     [32m  [32mâœ”[39m[0m[90m avoids adding default paths to query filter (gh-12294)[0m
2025-04-09T19:13:58.0119046Z     [32m  [32mâœ”[39m[0m[90m avoids adding default paths to query filter with _id (gh-12294)[0m
2025-04-09T19:13:58.0211183Z [0m    $pop()[0m
2025-04-09T19:13:58.0481459Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:58.0540506Z [0m    addToSet()[0m
2025-04-09T19:13:58.0808789Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:58.1025028Z     [32m  [32mâœ”[39m[0m[90m handles sub-documents that do not have an _id gh-1973[0m
2025-04-09T19:13:58.1241039Z     [32m  [32mâœ”[39m[0m[90m applies setters (gh-3032)[0m
2025-04-09T19:13:58.1307628Z [0m    options[0m
2025-04-09T19:13:58.1381793Z     [32m  [32mâœ”[39m[0m[90m castNonArrays (gh-7371) (gh-7479)[0m
2025-04-09T19:13:58.1707084Z     [32m  [32mâœ”[39m[0m[90m works with $addToSet and $push (gh-7479)[0m
2025-04-09T19:13:58.1772259Z [0m    nonAtomicPush()[0m
2025-04-09T19:13:58.1959222Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:58.2023597Z [0m    sort()[0m
2025-04-09T19:13:58.2233853Z     [32m  [32mâœ”[39m[0m[90m order should be saved[0m
2025-04-09T19:13:58.2301986Z [0m    set()[0m
2025-04-09T19:13:58.2499967Z     [32m  [32mâœ”[39m[0m[90m works combined with other ops[0m
2025-04-09T19:13:58.2743469Z     [32m  [32mâœ”[39m[0m[90m works with numbers[0m
2025-04-09T19:13:58.3005819Z     [32m  [32mâœ”[39m[0m[90m works with strings[0m
2025-04-09T19:13:58.3245521Z     [32m  [32mâœ”[39m[0m[90m works with buffers[0m
2025-04-09T19:13:58.3495910Z     [32m  [32mâœ”[39m[0m[90m works with mixed[0m
2025-04-09T19:13:58.3790067Z     [32m  [32mâœ”[39m[0m[90m works with sub-docs[0m
2025-04-09T19:13:58.4116598Z     [32m  [32mâœ”[39m[0m[90m applies setters (gh-3032)[0m
2025-04-09T19:13:58.4179205Z [0m    slice[0m
2025-04-09T19:13:58.4228391Z     [32m  [32mâœ”[39m[0m[90m copies schema correctly (gh-8482)[0m
2025-04-09T19:13:58.4347350Z     [32m  [32mâœ”[39m[0m[90m with unshift (gh-8482)[0m
2025-04-09T19:13:58.4471725Z     [32m  [32mâœ”[39m[0m[90m with push (gh-8655)[0m
2025-04-09T19:13:58.4529609Z [0m    setting a doc array[0m
2025-04-09T19:13:58.4723635Z     [32m  [32mâœ”[39m[0m[90m should adjust path positions[0m
2025-04-09T19:13:58.4785472Z [0m    paths with similar names[0m
2025-04-09T19:13:58.4974238Z     [32m  [32mâœ”[39m[0m[90m should be saved[0m
2025-04-09T19:13:58.5038385Z [0m    of number[0m
2025-04-09T19:13:58.5236589Z     [32m  [32mâœ”[39m[0m[90m allows null and undefined[0m
2025-04-09T19:13:58.5299517Z [0m    bug fixes[0m
2025-04-09T19:13:58.5608807Z     [32m  [32mâœ”[39m[0m[90m modifying subdoc props and manipulating the array works (gh-842)[0m
2025-04-09T19:13:58.5699109Z     [32m  [32mâœ”[39m[0m[90m toObject returns a vanilla JavaScript array (gh-9540)[0m
2025-04-09T19:13:58.6005258Z     [32m  [32mâœ”[39m[0m[90m pushing top level arrays and subarrays works (gh-1073)[0m
2025-04-09T19:13:58.6105118Z     [32m  [32mâœ”[39m[0m[90m finding ids by string (gh-4011)[0m
2025-04-09T19:13:58.6198230Z [0m    default type[0m
2025-04-09T19:13:58.6249500Z     [32m  [32mâœ”[39m[0m[90m casts to Mixed[0m
2025-04-09T19:13:58.6351481Z [0m    removing from an array atomically using MongooseArray#remove[0m
2025-04-09T19:13:58.6524465Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:58.6575951Z [0m      with subdocs[0m
2025-04-09T19:13:58.6718974Z       [32m  [32mâœ”[39m[0m[90m supports passing strings[0m
2025-04-09T19:13:58.6909173Z       [32m  [32mâœ”[39m[0m[90m supports passing numbers[0m
2025-04-09T19:13:58.7101728Z       [32m  [32mâœ”[39m[0m[90m supports passing objectids[0m
2025-04-09T19:13:58.7302094Z       [32m  [32mâœ”[39m[0m[90m supports passing buffers[0m
2025-04-09T19:13:58.7385990Z [0m    built-in array methods that modify element structure return vanilla arrays (gh-8356)[0m
2025-04-09T19:13:58.7435843Z     [32m  [32mâœ”[39m[0m[90m filter[0m
2025-04-09T19:13:58.7520204Z     [32m  [32mâœ”[39m[0m[90m flat[0m
2025-04-09T19:13:58.7604412Z     [32m  [32mâœ”[39m[0m[90m flatMap[0m
2025-04-09T19:13:58.7690618Z     [32m  [32mâœ”[39m[0m[90m map[0m
2025-04-09T19:13:58.7776061Z     [32m  [32mâœ”[39m[0m[90m slice[0m
2025-04-09T19:13:58.7873852Z 
2025-04-09T19:13:58.7874317Z [0m  updateValidators[0m
2025-04-09T19:13:58.7885530Z [0m    validators[0m
2025-04-09T19:13:58.7932155Z     [32m  [32mâœ”[39m[0m[90m flattens paths[0m
2025-04-09T19:13:58.7998305Z     [32m  [32mâœ”[39m[0m[90m doesnt flatten dates (gh-3194)[0m
2025-04-09T19:13:58.8064128Z     [32m  [32mâœ”[39m[0m[90m doesnt flatten empty arrays (gh-3554)[0m
2025-04-09T19:13:58.8133308Z     [32m  [32mâœ”[39m[0m[90m doesnt flatten decimal128 (gh-7561)[0m
2025-04-09T19:13:58.8201385Z     [32m  [32mâœ”[39m[0m[90m handles nested paths correctly (gh-3587)[0m
2025-04-09T19:13:58.8254730Z 
2025-04-09T19:13:58.8255293Z [0m  model: findOneAndReplace:[0m
2025-04-09T19:13:58.8414320Z   [32m  [32mâœ”[39m[0m[90m returns the original document[0m
2025-04-09T19:13:58.8557543Z   [32m  [32mâœ”[39m[0m[90m options/conditions/doc are merged when no callback is passed[0m
2025-04-09T19:13:58.8807172Z   [32m  [32mâœ”[39m[0m[90m returns the original document[0m
2025-04-09T19:13:58.8893812Z   [32m  [32mâœ”[39m[0m[90m options/conditions/doc are merged when no callback is passed[0m
2025-04-09T19:13:58.9023051Z   [32m  [32mâœ”[39m[0m[90m supports v3 select string syntax[0m
2025-04-09T19:13:58.9162720Z   [32m  [32mâœ”[39m[0m[90m supports v3 select object syntax[0m
2025-04-09T19:13:58.9346784Z   [32m  [32mâœ”[39m[0m[90m supports v3 sort string syntax[0m
2025-04-09T19:13:58.9471883Z   [32m  [32mâœ”[39m[0m[90m supports v3 sort object syntax[0m
2025-04-09T19:13:58.9969674Z   [32m  [32mâœ”[39m[0m[90m supports population (gh-1395)[0m
2025-04-09T19:13:59.0082026Z   [32m  [32mâœ”[39m[0m[90m only calls setters once (gh-6203)[0m
2025-04-09T19:13:59.0429885Z   [32m  [32mâœ”[39m[0m[90m works (gh-7654)[0m
2025-04-09T19:13:59.0793823Z   [32m  [32mâœ”[39m[0m[90m schema-level projection (gh-7654)[0m
2025-04-09T19:13:59.1033366Z   [32m  [32mâœ”[39m[0m[90m supports `new` in addition to `returnOriginal` (gh-7846)[0m
2025-04-09T19:13:59.1580767Z   [32m  [32mâœ”[39m[0m[90m orFail() (gh-8030)[0m
2025-04-09T19:13:59.1908892Z   [32m  [32mâœ”[39m[0m[90m skips validation if `runValidators` === false (gh-11559)[0m
2025-04-09T19:13:59.2009998Z   [32m  [32mâœ”[39m[0m[90m respects query-level strict option (gh-13507)[0m
2025-04-09T19:13:59.2233637Z   [32m  [32mâœ”[39m[0m[90m respects schema-level strict option (gh-13507)[0m
2025-04-09T19:13:59.2430610Z   [32m  [32mâœ”[39m[0m[90m does not send overwrite or timestamps option to MongoDB[0m
2025-04-09T19:13:59.2930280Z   [32m  [32mâœ”[39m[0m[90m supports the `includeResultMetadata` option (gh-13539)[0m
2025-04-09T19:13:59.2981838Z [0m    middleware[0m
2025-04-09T19:13:59.3201600Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:13:59.3484843Z     [32m  [32mâœ”[39m[0m[90m works with exec() (gh-439)[0m
2025-04-09T19:13:59.3590470Z 
2025-04-09T19:13:59.3591279Z [0m  schematype[0m
2025-04-09T19:13:59.3602712Z [0m    boolean[0m
2025-04-09T19:13:59.3662198Z     [32m  [32mâœ”[39m[0m[90m null default is permitted (gh-523)[0m
2025-04-09T19:13:59.3721597Z 
2025-04-09T19:13:59.3728509Z [0m  schema[0m
2025-04-09T19:13:59.3792703Z   [32m  [32mâœ”[39m[0m[90m can be created without the "new" keyword[0m
2025-04-09T19:13:59.3951153Z   [32m  [32mâœ”[39m[0m[90m does expose a property for duck-typing instanceof[0m
2025-04-09T19:13:59.4020776Z   [32m  [32mâœ”[39m[0m[90m supports different schematypes[0m
2025-04-09T19:13:59.4104983Z   [32m  [32mâœ”[39m[0m[90m supports dot notation for path accessors[0m
2025-04-09T19:13:59.4173532Z   [32m  [32mâœ”[39m[0m[90m allows paths nested > 2 levels[0m
2025-04-09T19:13:59.4243084Z   [32m  [32mâœ”[39m[0m[90m default definition[0m
2025-04-09T19:13:59.4307403Z   [32m  [32mâœ”[39m[0m[90m Mixed defaults can be empty arrays[0m
2025-04-09T19:13:59.4371334Z   [32m  [32mâœ”[39m[0m[90m methods declaration[0m
2025-04-09T19:13:59.4436287Z   [32m  [32mâœ”[39m[0m[90m static declaration[0m
2025-04-09T19:13:59.4500154Z   [32m  [32mâœ”[39m[0m[90m debugging msgs[0m
2025-04-09T19:13:59.4577314Z   [32m  [32mâœ”[39m[0m[90m required() with doc arrays (gh-3199)[0m
2025-04-09T19:13:59.4650960Z   [32m  [32mâœ”[39m[0m[90m custom typeKey in doc arrays (gh-3560)[0m
2025-04-09T19:13:59.4730201Z   [32m  [32mâœ”[39m[0m[90m required for single nested schemas (gh-3562)[0m
2025-04-09T19:13:59.4894412Z   [32m  [32mâœ”[39m[0m[90m booleans cause cast error for date (gh-3935)[0m
2025-04-09T19:13:59.4964740Z   [32m  [32mâœ”[39m[0m[90m trim: false works with strings (gh-4042)[0m
2025-04-09T19:13:59.5038863Z   [32m  [32mâœ”[39m[0m[90m arrays with typeKey (gh-4548)[0m
2025-04-09T19:13:59.5102541Z   [32m  [32mâœ”[39m[0m[90m arrays of mixed arrays (gh-5416)[0m
2025-04-09T19:13:59.5174502Z   [32m  [32mâœ”[39m[0m[90m throws a sane error if passing a schema to `ref` (gh-6915)[0m
2025-04-09T19:13:59.5263170Z   [32m  [32mâœ”[39m[0m[90m allows using ObjectId type as schema path (gh-7049)[0m
2025-04-09T19:13:59.5326309Z   [32m  [32mâœ”[39m[0m[90m throws error if invalid type (gh-7303)[0m
2025-04-09T19:13:59.5387710Z   [32m  [32mâœ”[39m[0m[90m supports _id: false in paths definition (gh-7480) (gh-7524)[0m
2025-04-09T19:13:59.5452085Z   [32m  [32mâœ”[39m[0m[90m schema.pathType() with positional path that isnt in schema (gh-7935)[0m
2025-04-09T19:13:59.5515119Z   [32m  [32mâœ”[39m[0m[90m supports pre(Array, Function) and post(Array, Function) (gh-7803)[0m
2025-04-09T19:13:59.5581906Z   [32m  [32mâœ”[39m[0m[90m supports array with { type: ObjectID } (gh-8034)[0m
2025-04-09T19:13:59.5647328Z   [32m  [32mâœ”[39m[0m[90m supports getting path under array (gh-8057)[0m
2025-04-09T19:13:59.5822087Z   [32m  [32mâœ”[39m[0m[90m required paths with clone() (gh-8111)[0m
2025-04-09T19:13:59.5946987Z   [32m  [32mâœ”[39m[0m[90m getters/setters with clone() (gh-8124)[0m
2025-04-09T19:13:59.6068754Z   [32m  [32mâœ”[39m[0m[90m required with nullish value (gh-8219)[0m
2025-04-09T19:13:59.6139299Z   [32m  [32mâœ”[39m[0m[90m SchemaStringOptions line up with schema/string (gh-8256)[0m
2025-04-09T19:13:59.6200583Z   [32m  [32mâœ”[39m[0m[90m supports passing schema options to `Schema#path()` (gh-8292)[0m
2025-04-09T19:13:59.6282759Z   [32m  [32mâœ”[39m[0m[90m supports defining `_id: false` on single nested paths (gh-8137)[0m
2025-04-09T19:13:59.6352596Z   [32m  [32mâœ”[39m[0m[90m supports defining `_id: false` on document arrays (gh-8450)[0m
2025-04-09T19:13:59.6418152Z   [32m  [32mâœ”[39m[0m[90m copies `.add()`-ed paths when calling `.add()` with a schema argument (gh-8429)[0m
2025-04-09T19:13:59.6482757Z   [32m  [32mâœ”[39m[0m[90m copies indexes when calling add() with schema instance (gh-12654)[0m
2025-04-09T19:13:59.6546601Z   [32m  [32mâœ”[39m[0m[90m disables `id` virtual if no `_id` path (gh-3936)[0m
2025-04-09T19:13:59.6609481Z   [32m  [32mâœ”[39m[0m[90m treats dotted paths with no parent as a nested path (gh-9020)[0m
2025-04-09T19:13:59.6724296Z   [32m  [32mâœ”[39m[0m[90m allows using `mongoose.Schema.Types.Array` as type (gh-9194)[0m
2025-04-09T19:13:59.6790986Z   [32m  [32mâœ”[39m[0m[90m handles using a schematype when defining a path (gh-9370)[0m
2025-04-09T19:13:59.6858099Z   [32m  [32mâœ”[39m[0m[90m applies correct schema to nested primitive arrays (gh-9429)[0m
2025-04-09T19:13:59.6926478Z   [32m  [32mâœ”[39m[0m[90m supports `of` for array type definition (gh-9564)[0m
2025-04-09T19:13:59.6995962Z   [32m  [32mâœ”[39m[0m[90m should use the top-most class's getter/setter gh-8892[0m
2025-04-09T19:13:59.7285066Z   [32m  [32mâœ”[39m[0m[90m handles loadClass with inheritted getters (gh-9975)[0m
2025-04-09T19:13:59.7353021Z   [32m  [32mâœ”[39m[0m[90m loadClass with static getter (gh-10436)[0m
2025-04-09T19:13:59.7420650Z   [32m  [32mâœ”[39m[0m[90m supports setting `ref` on array SchemaType (gh-10029)[0m
2025-04-09T19:13:59.7486563Z   [32m  [32mâœ”[39m[0m[90m path() gets single nested paths within document arrays (gh-10164)[0m
2025-04-09T19:13:59.7552824Z   [32m  [32mâœ”[39m[0m[90m supports creating nested paths underneath document arrays (gh-10193)[0m
2025-04-09T19:13:59.7665074Z   [32m  [32mâœ”[39m[0m[90m propagates map `ref` down to individual map elements (gh-10329)[0m
2025-04-09T19:13:59.7730308Z   [32m  [32mâœ”[39m[0m[90m handles maps of maps (gh-10644)[0m
2025-04-09T19:13:59.7798532Z   [32m  [32mâœ”[39m[0m[90m handles `type: { subpath: String }` in document array definitions (gh-10750)[0m
2025-04-09T19:13:59.7862589Z   [32m  [32mâœ”[39m[0m[90m handles `Date` with `type` (gh-10807)[0m
2025-04-09T19:13:59.8072478Z   [32m  [32mâœ”[39m[0m[90m setting path with `Mixed` type to an array after number (gh-11417)[0m
2025-04-09T19:13:59.8618525Z   [32m  [32mâœ”[39m[0m[90m sets an _applyDiscriminators property on the schema and add discriminator to appropriate model (gh-7971)[0m[33m (45ms)[0m
2025-04-09T19:13:59.8906661Z   [32m  [32mâœ”[39m[0m[90m supports numbers with Schema.discriminator() (gh-13788)[0m
2025-04-09T19:13:59.9072584Z   [32m  [32mâœ”[39m[0m[90m can use on as a schema property (gh-11580)[0m
2025-04-09T19:13:59.9240817Z   [32m  [32mâœ”[39m[0m[90m disallows using schemas with schema-level projections with map subdocuments (gh-11698)[0m
2025-04-09T19:13:59.9451759Z   [32m  [32mâœ”[39m[0m[90m allows a lean option on schemas so that all documents are lean when running a query (gh-10090)[0m
2025-04-09T19:13:59.9552048Z   [32m  [32mâœ”[39m[0m[90m disallows setting special properties with `add()` or constructor (gh-12085)[0m
2025-04-09T19:13:59.9628995Z   [32m  [32mâœ”[39m[0m[90m enable defining virtual paths by using schema constructor (gh-11908)[0m
2025-04-09T19:13:59.9693970Z   [32m  [32mâœ”[39m[0m[90m allows defining ObjectIds and Decimal128s using Types.* (gh-12205)[0m
2025-04-09T19:13:59.9762871Z   [32m  [32mâœ”[39m[0m[90m _getSchema finds path underneath nested subdocument with map of mixed (gh-12530)[0m
2025-04-09T19:13:59.9892286Z   [32m  [32mâœ”[39m[0m[90m should not allow to create a path with primitive values (gh-7558)[0m
2025-04-09T19:13:59.9964533Z   [32m  [32mâœ”[39m[0m[90m should allow deleting a virtual path off the schema gh-8397[0m
2025-04-09T19:14:00.0097374Z   [32m  [32mâœ”[39m[0m[90m should allow deleting multiple virtuals gh-8397[0m
2025-04-09T19:14:00.0216404Z   [32m  [32mâœ”[39m[0m[90m should throw an error if attempting to delete a virtual path that does not exist gh-8397[0m
2025-04-09T19:14:00.0290777Z   [32m  [32mâœ”[39m[0m[90m should throw an error if using schema with "timeseries" option as a nested schema[0m
2025-04-09T19:14:00.0506207Z   [32m  [32mâœ”[39m[0m[90m should allow timestamps on a sub document when having _id field in the main document gh-13343[0m
2025-04-09T19:14:00.0713504Z   [32m  [32mâœ”[39m[0m[90m should not save objectids as strings when using the `flattenObjectIds` option (gh-13648)[0m
2025-04-09T19:14:00.0782465Z   [32m  [32mâœ”[39m[0m[90m deduplicates idGetter (gh-14457)[0m
2025-04-09T19:14:00.0920597Z   [32m  [32mâœ”[39m[0m[90m handles recursive definitions in discriminators (gh-13978)[0m
2025-04-09T19:14:00.1178309Z   [32m  [32mâœ”[39m[0m[90m handles recursive definitions of arrays in discriminators (gh-14055)[0m
2025-04-09T19:14:00.1405700Z   [32m  [32mâœ”[39m[0m[90m should have the correct schema definition with array schemas (gh-14416)[0m
2025-04-09T19:14:00.1657167Z   [32m  [32mâœ”[39m[0m[90m handles discriminator options with Schema.prototype.discriminator (gh-14448)[0m
2025-04-09T19:14:00.1744532Z   [32m  [32mâœ”[39m[0m[90m supports schema-level readConcern (gh-14511)[0m
2025-04-09T19:14:00.1852928Z   [32m  [32mâœ”[39m[0m[90m supports casting object to subdocument (gh-14748) (gh-9076)[0m
2025-04-09T19:14:00.1929733Z   [32m  [32mâœ”[39m[0m[90m throws "already has an index" error if duplicate index definition (gh-15056)[0m
2025-04-09T19:14:00.4345875Z   [32m  [32mâœ”[39m[0m[90m path() clears existing child schemas (gh-15253)[0m[31m (230ms)[0m
2025-04-09T19:14:00.4403096Z [0m    nested fields with same name[0m
2025-04-09T19:14:00.4568565Z     [32m  [32mâœ”[39m[0m[90m don't disappear[0m
2025-04-09T19:14:00.4638427Z [0m    casting[0m
2025-04-09T19:14:00.4684405Z     [32m  [32mâœ”[39m[0m[90m number[0m
2025-04-09T19:14:00.4771115Z     [32m  [32mâœ”[39m[0m[90m date[0m
2025-04-09T19:14:00.4859268Z     [32m  [32mâœ”[39m[0m[90m objectid[0m
2025-04-09T19:14:00.5007427Z     [32m  [32mâœ”[39m[0m[90m array[0m
2025-04-09T19:14:00.5117476Z     [32m  [32mâœ”[39m[0m[90m array of arrays[0m
2025-04-09T19:14:00.5202556Z     [32m  [32mâœ”[39m[0m[90m boolean[0m
2025-04-09T19:14:00.5252551Z [0m      string[0m
2025-04-09T19:14:00.5310178Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:14:00.5395106Z [0m    setters[0m
2025-04-09T19:14:00.5442207Z     [32m  [32mâœ”[39m[0m[90m work[0m
2025-04-09T19:14:00.5531131Z     [32m  [32mâœ”[39m[0m[90m order[0m
2025-04-09T19:14:00.5621099Z     [32m  [32mâœ”[39m[0m[90m scope[0m
2025-04-09T19:14:00.5708203Z     [32m  [32mâœ”[39m[0m[90m casting[0m
2025-04-09T19:14:00.5798752Z     [32m  [32mâœ”[39m[0m[90m applying when none have been defined[0m
2025-04-09T19:14:00.5937472Z     [32m  [32mâœ”[39m[0m[90m assignment of non-functions throw[0m
2025-04-09T19:14:00.5988510Z [0m      array[0m
2025-04-09T19:14:00.6048004Z       [32m  [32mâœ”[39m[0m[90m object setters will be applied for each object in array[0m
2025-04-09T19:14:00.6125359Z [0m      string[0m
2025-04-09T19:14:00.6182268Z       [32m  [32mâœ”[39m[0m[90m lowercase[0m
2025-04-09T19:14:00.6293794Z       [32m  [32mâœ”[39m[0m[90m uppercase[0m
2025-04-09T19:14:00.6401292Z       [32m  [32mâœ”[39m[0m[90m trim[0m
2025-04-09T19:14:00.6488632Z [0m    getters[0m
2025-04-09T19:14:00.6534523Z     [32m  [32mâœ”[39m[0m[90m work[0m
2025-04-09T19:14:00.6621427Z     [32m  [32mâœ”[39m[0m[90m order[0m
2025-04-09T19:14:00.6784898Z     [32m  [32mâœ”[39m[0m[90m scope[0m
2025-04-09T19:14:00.6872206Z     [32m  [32mâœ”[39m[0m[90m casting[0m
2025-04-09T19:14:00.6960593Z     [32m  [32mâœ”[39m[0m[90m applying when none have been defined[0m
2025-04-09T19:14:00.7049946Z     [32m  [32mâœ”[39m[0m[90m assignment of non-functions throw[0m
2025-04-09T19:14:00.7135680Z     [32m  [32mâœ”[39m[0m[90m auto _id[0m
2025-04-09T19:14:00.7199056Z [0m    indexes[0m
2025-04-09T19:14:00.7210598Z [0m      definition[0m
2025-04-09T19:14:00.7281421Z       [32m  [32mâœ”[39m[0m[90m basic[0m
2025-04-09T19:14:00.7390132Z       [32m  [32mâœ”[39m[0m[90m compound[0m
2025-04-09T19:14:00.7532753Z       [32m  [32mâœ”[39m[0m[90m compound based on name (gh-6499)[0m
2025-04-09T19:14:00.7624773Z       [32m  [32mâœ”[39m[0m[90m using "ascending" and "descending" for order (gh-13725)[0m
2025-04-09T19:14:00.7735803Z       [32m  [32mâœ”[39m[0m[90m with single nested doc (gh-6113)[0m
2025-04-09T19:14:00.7844760Z       [32m  [32mâœ”[39m[0m[90m with embedded discriminator (gh-6485)[0m
2025-04-09T19:14:00.7927706Z [0m    plugins[0m
2025-04-09T19:14:00.7974526Z     [32m  [32mâœ”[39m[0m[90m work[0m
2025-04-09T19:14:00.8059225Z     [32m  [32mâœ”[39m[0m[90m options param (gh-12077)[0m
2025-04-09T19:14:00.8127525Z [0m    options[0m
2025-04-09T19:14:00.8173199Z     [32m  [32mâœ”[39m[0m[90m defaults are set[0m
2025-04-09T19:14:00.8307320Z     [32m  [32mâœ”[39m[0m[90m setting[0m
2025-04-09T19:14:00.8374549Z [0m    virtuals[0m
2025-04-09T19:14:00.8420681Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:14:00.8473474Z [0m      id[0m
2025-04-09T19:14:00.8531139Z       [32m  [32mâœ”[39m[0m[90m default creation of id can be overridden (gh-298)[0m
2025-04-09T19:14:00.8647481Z       [32m  [32mâœ”[39m[0m[90m disabling[0m
2025-04-09T19:14:00.8721603Z [0m      getter[0m
2025-04-09T19:14:00.8778338Z       [32m  [32mâœ”[39m[0m[90m scope[0m
2025-04-09T19:14:00.8851262Z [0m      setter[0m
2025-04-09T19:14:00.8908327Z       [32m  [32mâœ”[39m[0m[90m scope[0m
2025-04-09T19:14:00.8990868Z [0m    other contexts[0m
2025-04-09T19:14:00.9096433Z     [36m  - work[0m
2025-04-09T19:14:00.9167139Z [0m    #add()[0m
2025-04-09T19:14:00.9219686Z     [32m  [32mâœ”[39m[0m[90m does not pollute existing paths[0m
2025-04-09T19:14:00.9308251Z     [32m  [32mâœ”[39m[0m[90m returns the schema instance[0m
2025-04-09T19:14:00.9400332Z     [32m  [32mâœ”[39m[0m[90m returns the schema instance when schema instance is passed[0m
2025-04-09T19:14:00.9647255Z     [32m  [32mâœ”[39m[0m[90m merging nested objects (gh-662)[0m
2025-04-09T19:14:00.9749776Z     [32m  [32mâœ”[39m[0m[90m prefix (gh-1730)[0m
2025-04-09T19:14:00.9835721Z     [32m  [32mâœ”[39m[0m[90m adds another schema (gh-6897)[0m
2025-04-09T19:14:00.9923100Z     [32m  [32mâœ”[39m[0m[90m overwrites existing paths (gh-10203)[0m
2025-04-09T19:14:01.0040892Z [0m    construction[0m
2025-04-09T19:14:01.0098844Z     [32m  [32mâœ”[39m[0m[90m array of object literal missing a type is interpreted as DocumentArray[0m
2025-04-09T19:14:01.0198035Z     [32m  [32mâœ”[39m[0m[90m array of object literal with type.type is interpreted as DocumentArray[0m
2025-04-09T19:14:01.0294261Z     [32m  [32mâœ”[39m[0m[90m does not alter original argument (gh-1364)[0m
2025-04-09T19:14:01.0572194Z     [32m  [32mâœ”[39m[0m[90m properly gets value of plain objects when dealing with refs (gh-1606)[0m
2025-04-09T19:14:01.0674345Z     [32m  [32mâœ”[39m[0m[90m array of of schemas and objects (gh-7218)[0m
2025-04-09T19:14:01.0761938Z     [32m  [32mâœ”[39m[0m[90m copies options from array of schemas[0m
2025-04-09T19:14:01.0851122Z     [32m  [32mâœ”[39m[0m[90m propagates typeKey down to implicitly created single nested schemas (gh-13154)[0m
2025-04-09T19:14:01.0943637Z [0m    property names[0m
2025-04-09T19:14:01.1016122Z     [32m  [32mâœ”[39m[0m[90m that do not conflict do not throw[0m
2025-04-09T19:14:01.1068098Z [0m      reserved keys are log a warning (gh-9010)[0m
2025-04-09T19:14:01.1131185Z       [32m  [32mâœ”[39m[0m[90m `emit` when used as a schema path logs a warning[0m
2025-04-09T19:14:01.1242215Z       [32m  [32mâœ”[39m[0m[90m `emit` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-09T19:14:01.1355303Z       [32m  [32mâœ”[39m[0m[90m `listeners` when used as a schema path logs a warning[0m
2025-04-09T19:14:01.1468018Z       [32m  [32mâœ”[39m[0m[90m `listeners` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-09T19:14:01.1579590Z       [32m  [32mâœ”[39m[0m[90m `removeListener` when used as a schema path logs a warning[0m
2025-04-09T19:14:01.1749611Z       [32m  [32mâœ”[39m[0m[90m `removeListener` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-09T19:14:01.1862482Z       [32m  [32mâœ”[39m[0m[90m `errors` when used as a schema path logs a warning[0m
2025-04-09T19:14:01.1971285Z       [32m  [32mâœ”[39m[0m[90m `errors` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-09T19:14:01.2080805Z       [32m  [32mâœ”[39m[0m[90m `get` when used as a schema path logs a warning[0m
2025-04-09T19:14:01.2191553Z       [32m  [32mâœ”[39m[0m[90m `get` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-09T19:14:01.2309804Z       [32m  [32mâœ”[39m[0m[90m `init` when used as a schema path logs a warning[0m
2025-04-09T19:14:01.2485356Z       [32m  [32mâœ”[39m[0m[90m `init` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-09T19:14:01.2585475Z       [32m  [32mâœ”[39m[0m[90m `isModified` when used as a schema path logs a warning[0m
2025-04-09T19:14:01.2695321Z       [32m  [32mâœ”[39m[0m[90m `isModified` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-09T19:14:01.2796276Z       [32m  [32mâœ”[39m[0m[90m `isNew` when used as a schema path logs a warning[0m
2025-04-09T19:14:01.2908893Z       [32m  [32mâœ”[39m[0m[90m `isNew` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-09T19:14:01.3037794Z       [32m  [32mâœ”[39m[0m[90m `populated` when used as a schema path logs a warning[0m
2025-04-09T19:14:01.3167703Z       [32m  [32mâœ”[39m[0m[90m `populated` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-09T19:14:01.3265999Z       [32m  [32mâœ”[39m[0m[90m `remove` when used as a schema path logs a warning[0m
2025-04-09T19:14:01.3379775Z       [32m  [32mâœ”[39m[0m[90m `remove` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-09T19:14:01.3491798Z       [32m  [32mâœ”[39m[0m[90m `save` when used as a schema path logs a warning[0m
2025-04-09T19:14:01.3601862Z       [32m  [32mâœ”[39m[0m[90m `save` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-09T19:14:01.3711557Z       [32m  [32mâœ”[39m[0m[90m `toObject` when used as a schema path logs a warning[0m
2025-04-09T19:14:01.3867434Z       [32m  [32mâœ”[39m[0m[90m `toObject` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-09T19:14:01.3984592Z       [32m  [32mâœ”[39m[0m[90m `validate` when used as a schema path logs a warning[0m
2025-04-09T19:14:01.4082563Z       [32m  [32mâœ”[39m[0m[90m `validate` when used as a schema path doesn't log a warning if `suppressReservedKeysWarning` is true[0m
2025-04-09T19:14:01.4174126Z [0m    pathType()[0m
2025-04-09T19:14:01.4230922Z     [32m  [32mâœ”[39m[0m[90m handles maps (gh-7448) (gh-7464)[0m
2025-04-09T19:14:01.4282793Z [0m      when called on an explicit real path[0m
2025-04-09T19:14:01.4339565Z       [32m  [32mâœ”[39m[0m[90m returns "real"[0m
2025-04-09T19:14:01.4412518Z [0m      when called on a virtual[0m
2025-04-09T19:14:01.4470873Z       [32m  [32mâœ”[39m[0m[90m returns virtual[0m
2025-04-09T19:14:01.4597664Z [0m      when called on nested structure[0m
2025-04-09T19:14:01.4653791Z       [32m  [32mâœ”[39m[0m[90m returns nested[0m
2025-04-09T19:14:01.4727518Z [0m      when called on undefined path[0m
2025-04-09T19:14:01.4785104Z       [32m  [32mâœ”[39m[0m[90m returns adHocOrUndefined[0m
2025-04-09T19:14:01.4869247Z [0m    remove()[0m
2025-04-09T19:14:01.4922392Z     [32m  [32mâœ”[39m[0m[90m returns the schema instance[0m
2025-04-09T19:14:01.5008211Z     [32m  [32mâœ”[39m[0m[90m removes a single path[0m
2025-04-09T19:14:01.5094981Z     [32m  [32mâœ”[39m[0m[90m removes a nested path[0m
2025-04-09T19:14:01.5180103Z     [32m  [32mâœ”[39m[0m[90m removes all children of a nested path (gh-2398)[0m
2025-04-09T19:14:01.5298120Z     [32m  [32mâœ”[39m[0m[90m removes an array of paths[0m
2025-04-09T19:14:01.5372625Z     [32m  [32mâœ”[39m[0m[90m works properly with virtuals (gh-2398)[0m
2025-04-09T19:14:01.5462085Z     [32m  [32mâœ”[39m[0m[90m methods named toString (gh-4551)[0m
2025-04-09T19:14:01.5553396Z     [32m  [32mâœ”[39m[0m[90m handles default value = 0 (gh-4620)[0m
2025-04-09T19:14:01.5647541Z     [32m  [32mâœ”[39m[0m[90m type: childSchema (gh-5521)[0m
2025-04-09T19:14:01.5737133Z     [32m  [32mâœ”[39m[0m[90m Decimal128 type (gh-4759)[0m
2025-04-09T19:14:01.5828862Z     [32m  [32mâœ”[39m[0m[90m childSchemas prop (gh-5695)[0m
2025-04-09T19:14:01.5880123Z [0m      clone()[0m
2025-04-09T19:14:01.6008731Z       [32m  [32mâœ”[39m[0m[90m copies methods, statics, and query helpers (gh-5752)[0m
2025-04-09T19:14:01.6119063Z       [32m  [32mâœ”[39m[0m[90m copies validators declared with validate() (gh-5607)[0m
2025-04-09T19:14:01.6217535Z       [32m  [32mâœ”[39m[0m[90m copies virtuals (gh-6133)[0m
2025-04-09T19:14:01.6332266Z       [32m  [32mâœ”[39m[0m[90m with nested virtuals (gh-6274)[0m
2025-04-09T19:14:01.6477285Z       [32m  [32mâœ”[39m[0m[90m with alternative option syntaxes (gh-6274)[0m
2025-04-09T19:14:01.6608989Z       [32m  [32mâœ”[39m[0m[90m copies base for using custom types after cloning (gh-7377)[0m
2025-04-09T19:14:01.6717772Z       [32m  [32mâœ”[39m[0m[90m clones schema types (gh-7537)[0m
2025-04-09T19:14:01.6883797Z       [32m  [32mâœ”[39m[0m[90m correctly copies all child schemas (gh-7537)[0m
2025-04-09T19:14:01.7012786Z       [32m  [32mâœ”[39m[0m[90m copies single embedded discriminators (gh-7894)[0m
2025-04-09T19:14:01.7166667Z       [32m  [32mâœ”[39m[0m[90m copies array discriminators (gh-7954)[0m
2025-04-09T19:14:01.7277401Z       [32m  [32mâœ”[39m[0m[90m uses Mongoose instance's Schema constructor (gh-9426)[0m
2025-04-09T19:14:01.7380037Z       [32m  [32mâœ”[39m[0m[90m avoids creating duplicate array constructors when cloning doc array underneath subdoc (gh-13626)[0m
2025-04-09T19:14:01.7464273Z [0m    pick() (gh-8207)[0m
2025-04-09T19:14:01.7551844Z     [32m  [32mâœ”[39m[0m[90m works with nested paths[0m
2025-04-09T19:14:01.7644396Z     [32m  [32mâœ”[39m[0m[90m with single nested paths[0m
2025-04-09T19:14:01.7706607Z [0m    omit() (gh-12931)[0m
2025-04-09T19:14:01.7756835Z     [32m  [32mâœ”[39m[0m[90m works with nested paths[0m
2025-04-09T19:14:01.7845491Z     [32m  [32mâœ”[39m[0m[90m with single nested paths[0m
2025-04-09T19:14:01.7907279Z [0m    path-level custom cast (gh-8300)[0m
2025-04-09T19:14:01.7958533Z     [32m  [32mâœ”[39m[0m[90m with numbers[0m
2025-04-09T19:14:01.8048585Z     [32m  [32mâœ”[39m[0m[90m with function cast error format[0m
2025-04-09T19:14:01.8176422Z     [32m  [32mâœ”[39m[0m[90m with objectids[0m
2025-04-09T19:14:01.8265946Z     [32m  [32mâœ”[39m[0m[90m with boolean[0m
2025-04-09T19:14:01.8328498Z [0m    gh-8849[0m
2025-04-09T19:14:01.8539188Z     [32m  [32mâœ”[39m[0m[90m treats `select: undefined` as not specifying `select` option[0m
2025-04-09T19:14:01.8756680Z     [32m  [32mâœ”[39m[0m[90m treats `select: null` as not specifying `select` option[0m
2025-04-09T19:14:01.8887269Z [0m    mongoose.set(`strictQuery`, value); (gh-6658)[0m
2025-04-09T19:14:01.8901770Z     [32m  [32mâœ”[39m[0m[90m setting `strictQuery` on base sets strictQuery to schema (gh-6658)[0m
2025-04-09T19:14:01.8987908Z     [32m  [32mâœ”[39m[0m[90m `strictQuery` set on base gets overwritten by option set on schema (gh-6658)[0m
2025-04-09T19:14:01.9050292Z [0m    cast option (gh-8407)[0m
2025-04-09T19:14:01.9105903Z     [32m  [32mâœ”[39m[0m[90m disable casting using `false`[0m
2025-04-09T19:14:01.9195184Z     [32m  [32mâœ”[39m[0m[90m custom casters[0m
2025-04-09T19:14:01.9255992Z [0m    jsonSchema() (gh-11162)[0m
2025-04-09T19:14:01.9776054Z     [32m  [32mâœ”[39m[0m[90m handles basic example with only top-level keys[0m[33m (49ms)[0m
2025-04-09T19:14:01.9910477Z     [32m  [32mâœ”[39m[0m[90m handles all primitive data types[0m
2025-04-09T19:14:02.0393654Z     [32m  [32mâœ”[39m[0m[90m handles arrays and document arrays[0m[33m (40ms)[0m
2025-04-09T19:14:02.0744619Z     [32m  [32mâœ”[39m[0m[90m handles nested paths and subdocuments[0m
2025-04-09T19:14:02.1208886Z     [32m  [32mâœ”[39m[0m[90m handles maps[0m
2025-04-09T19:14:02.1333770Z     [32m  [32mâœ”[39m[0m[90m handles map with required element[0m
2025-04-09T19:14:02.1426902Z     [32m  [32mâœ”[39m[0m[90m handles required enums[0m
2025-04-09T19:14:02.1621169Z     [32m  [32mâœ”[39m[0m[90m throws error on mixed type[0m
2025-04-09T19:14:02.1725579Z 
2025-04-09T19:14:02.1726452Z [0m  insertMany()[0m
2025-04-09T19:14:02.1931207Z   [32m  [32mâœ”[39m[0m[90m with timestamps (gh-723)[0m
2025-04-09T19:14:02.2142288Z   [32m  [32mâœ”[39m[0m[90m timestamps respect $timestamps() (gh-12117)[0m
2025-04-09T19:14:02.2403548Z   [32m  [32mâœ”[39m[0m[90m insertMany() with nested timestamps (gh-12060)[0m
2025-04-09T19:14:02.2623179Z   [32m  [32mâœ”[39m[0m[90m insertMany() (gh-723)[0m
2025-04-09T19:14:02.3076397Z   [32m  [32mâœ”[39m[0m[90m insertMany() ordered option for constraint errors (gh-3893)[0m[33m (38ms)[0m
2025-04-09T19:14:02.3409074Z   [32m  [32mâœ”[39m[0m[90m insertMany() ordered option for validation errors (gh-5068)[0m
2025-04-09T19:14:02.3798293Z   [32m  [32mâœ”[39m[0m[90m insertMany() `writeErrors` if only one error (gh-8938)[0m
2025-04-09T19:14:02.3896883Z   [32m  [32mâœ”[39m[0m[90m insertMany() ordered option for single validation error[0m
2025-04-09T19:14:02.4132097Z   [32m  [32mâœ”[39m[0m[90m insertMany() hooks (gh-3846)[0m
2025-04-09T19:14:02.4209312Z   [32m  [32mâœ”[39m[0m[90m returns empty array if no documents (gh-8130)[0m
2025-04-09T19:14:02.4454185Z   [32m  [32mâœ”[39m[0m[90m insertMany() multi validation error with ordered false (gh-5337)[0m
2025-04-09T19:14:02.4611639Z   [32m  [32mâœ”[39m[0m[90m insertMany() validation error with ordered true when all documents are invalid[0m
2025-04-09T19:14:02.4735554Z   [32m  [32mâœ”[39m[0m[90m insertMany() validation error with ordered false when all documents are invalid[0m
2025-04-09T19:14:02.4964280Z   [32m  [32mâœ”[39m[0m[90m insertMany() validation error with ordered false and rawResult for checking which documents failed (gh-12791)[0m
2025-04-09T19:14:02.5226135Z   [32m  [32mâœ”[39m[0m[90m insertMany() validation error with ordered false and rawResult for mixed write and validation error (gh-12791)[0m
2025-04-09T19:14:02.5635141Z   [32m  [32mâœ”[39m[0m[90m insertMany() populate option (gh-9720)[0m
2025-04-09T19:14:02.5824558Z   [32m  [32mâœ”[39m[0m[90m insertMany() sets `isNew` for inserted documents with `ordered = false` (gh-9677)[0m
2025-04-09T19:14:02.6020786Z   [32m  [32mâœ”[39m[0m[90m insertMany() returns only inserted docs with `ordered = true`[0m
2025-04-09T19:14:02.6188856Z   [32m  [32mâœ”[39m[0m[90m insertMany() validation error with ordered true and rawResult true when all documents are invalid[0m
2025-04-09T19:14:02.6322616Z   [32m  [32mâœ”[39m[0m[90m insertMany() validation error with ordered false and rawResult true when all documents are invalid[0m
2025-04-09T19:14:02.6618648Z   [32m  [32mâœ”[39m[0m[90m insertMany() depopulate (gh-4590)[0m
2025-04-09T19:14:02.6906660Z   [32m  [32mâœ”[39m[0m[90m insertMany() with error handlers (gh-6228)[0m
2025-04-09T19:14:02.7050588Z   [32m  [32mâœ”[39m[0m[90m insertMany() with non object array error can be catched (gh-8363)[0m
2025-04-09T19:14:02.7258263Z   [32m  [32mâœ”[39m[0m[90m insertMany() return docs with empty modifiedPaths (gh-7852)[0m
2025-04-09T19:14:02.7461862Z   [32m  [32mâœ”[39m[0m[90m insertMany with Decimal (gh-5190)[0m
2025-04-09T19:14:02.7509878Z [0m    insertMany() lean option to bypass validation (gh-8234)[0m
2025-04-09T19:14:02.7638959Z     [32m  [32mâœ”[39m[0m[90m insertMany() should bypass validation if lean option set to `true`[0m
2025-04-09T19:14:02.7814401Z     [32m  [32mâœ”[39m[0m[90m insertMany() should validate if lean option not set[0m
2025-04-09T19:14:02.7927726Z     [32m  [32mâœ”[39m[0m[90m insertMany() should validate if lean option set to `false`[0m
2025-04-09T19:14:02.8036907Z 
2025-04-09T19:14:02.8037607Z [0m  SchemaString[0m
2025-04-09T19:14:02.8080261Z   [32m  [32mâœ”[39m[0m[90m works when RegExp has global flag set (gh-9287)[0m
2025-04-09T19:14:02.8112735Z 
2025-04-09T19:14:02.8113123Z [0m  VirtualType[0m
2025-04-09T19:14:02.8124513Z [0m    clone[0m
2025-04-09T19:14:02.8170548Z     [32m  [32mâœ”[39m[0m[90m copies path and options correctly (gh-8587)[0m
2025-04-09T19:14:02.8224276Z 
2025-04-09T19:14:02.8226634Z [0m  encrypted schema declaration[0m
2025-04-09T19:14:02.8238298Z [0m    schemaMap generation tests[0m
2025-04-09T19:14:02.8249838Z [0m      When a schema is instantiated with an encrypted field of type string for csfle[0m
2025-04-09T19:14:02.8307678Z       [32m  [32mâœ”[39m[0m[90m Then the schema has an encrypted property of type string[0m
2025-04-09T19:14:02.8431360Z       [32m  [32mâœ”[39m[0m[90m then the generated schemaMap is correct[0m
2025-04-09T19:14:02.8486837Z [0m      When a schema is instantiated with an encrypted field of type string for queryableEncryption[0m
2025-04-09T19:14:02.8544132Z       [32m  [32mâœ”[39m[0m[90m Then the schema has an encrypted property of type string[0m
2025-04-09T19:14:02.8635471Z       [32m  [32mâœ”[39m[0m[90m then the generated encryptedFieldsMap is correct[0m
2025-04-09T19:14:02.8690443Z [0m      When a schema is instantiated with an encrypted field of type boolean for csfle[0m
2025-04-09T19:14:02.8747055Z       [32m  [32mâœ”[39m[0m[90m Then the schema has an encrypted property of type boolean[0m
2025-04-09T19:14:02.8835510Z       [32m  [32mâœ”[39m[0m[90m then the generated schemaMap is correct[0m
2025-04-09T19:14:02.8890759Z [0m      When a schema is instantiated with an encrypted field of type boolean for queryableEncryption[0m
2025-04-09T19:14:02.8969698Z       [32m  [32mâœ”[39m[0m[90m Then the schema has an encrypted property of type boolean[0m
2025-04-09T19:14:02.9058841Z       [32m  [32mâœ”[39m[0m[90m then the generated encryptedFieldsMap is correct[0m
2025-04-09T19:14:02.9113787Z [0m      When a schema is instantiated with an encrypted field of type buffer for csfle[0m
2025-04-09T19:14:02.9171884Z       [32m  [32mâœ”[39m[0m[90m Then the schema has an encrypted property of type buffer[0m
2025-04-09T19:14:02.9261794Z       [32m  [32mâœ”[39m[0m[90m then the generated schemaMap is correct[0m
2025-04-09T19:14:02.9317496Z [0m      When a schema is instantiated with an encrypted field of type buffer for queryableEncryption[0m
2025-04-09T19:14:02.9372782Z       [32m  [32mâœ”[39m[0m[90m Then the schema has an encrypted property of type buffer[0m
2025-04-09T19:14:02.9461350Z       [32m  [32mâœ”[39m[0m[90m then the generated encryptedFieldsMap is correct[0m
2025-04-09T19:14:02.9549978Z [0m      When a schema is instantiated with an encrypted field of type date for csfle[0m
2025-04-09T19:14:02.9606463Z       [32m  [32mâœ”[39m[0m[90m Then the schema has an encrypted property of type date[0m
2025-04-09T19:14:02.9695221Z       [32m  [32mâœ”[39m[0m[90m then the generated schemaMap is correct[0m
2025-04-09T19:14:02.9751003Z [0m      When a schema is instantiated with an encrypted field of type date for queryableEncryption[0m
2025-04-09T19:14:02.9806997Z       [32m  [32mâœ”[39m[0m[90m Then the schema has an encrypted property of type date[0m
2025-04-09T19:14:02.9896023Z       [32m  [32mâœ”[39m[0m[90m then the generated encryptedFieldsMap is correct[0m
2025-04-09T19:14:02.9951064Z [0m      When a schema is instantiated with an encrypted field of type objectid for csfle[0m
2025-04-09T19:14:03.0047144Z       [32m  [32mâœ”[39m[0m[90m Then the schema has an encrypted property of type objectid[0m
2025-04-09T19:14:03.0098114Z       [32m  [32mâœ”[39m[0m[90m then the generated schemaMap is correct[0m
2025-04-09T19:14:03.0186466Z [0m      When a schema is instantiated with an encrypted field of type objectid for queryableEncryption[0m
2025-04-09T19:14:03.0223194Z       [32m  [32mâœ”[39m[0m[90m Then the schema has an encrypted property of type objectid[0m
2025-04-09T19:14:03.0312570Z       [32m  [32mâœ”[39m[0m[90m then the generated encryptedFieldsMap is correct[0m
2025-04-09T19:14:03.0367820Z [0m      When a schema is instantiated with an encrypted field of type bigint for csfle[0m
2025-04-09T19:14:03.0424704Z       [32m  [32mâœ”[39m[0m[90m Then the schema has an encrypted property of type bigint[0m
2025-04-09T19:14:03.0511810Z       [32m  [32mâœ”[39m[0m[90m then the generated schemaMap is correct[0m
2025-04-09T19:14:03.0566123Z [0m      When a schema is instantiated with an encrypted field of type bigint for queryableEncryption[0m
2025-04-09T19:14:03.0620439Z       [32m  [32mâœ”[39m[0m[90m Then the schema has an encrypted property of type bigint[0m
2025-04-09T19:14:03.0707601Z       [32m  [32mâœ”[39m[0m[90m then the generated encryptedFieldsMap is correct[0m
2025-04-09T19:14:03.0761426Z [0m      When a schema is instantiated with an encrypted field of type Decimal128 for csfle[0m
2025-04-09T19:14:03.0817113Z       [32m  [32mâœ”[39m[0m[90m Then the schema has an encrypted property of type Decimal128[0m
2025-04-09T19:14:03.0903700Z       [32m  [32mâœ”[39m[0m[90m then the generated schemaMap is correct[0m
2025-04-09T19:14:03.0957883Z [0m      When a schema is instantiated with an encrypted field of type Decimal128 for queryableEncryption[0m
2025-04-09T19:14:03.1001602Z       [32m  [32mâœ”[39m[0m[90m Then the schema has an encrypted property of type Decimal128[0m
2025-04-09T19:14:03.1087952Z       [32m  [32mâœ”[39m[0m[90m then the generated encryptedFieldsMap is correct[0m
2025-04-09T19:14:03.1141959Z [0m      When a schema is instantiated with an encrypted field of type int32 for csfle[0m
2025-04-09T19:14:03.1197722Z       [32m  [32mâœ”[39m[0m[90m Then the schema has an encrypted property of type int32[0m
2025-04-09T19:14:03.1284528Z       [32m  [32mâœ”[39m[0m[90m then the generated schemaMap is correct[0m
2025-04-09T19:14:03.1338259Z [0m      When a schema is instantiated with an encrypted field of type int32 for queryableEncryption[0m
2025-04-09T19:14:03.1392594Z       [32m  [32mâœ”[39m[0m[90m Then the schema has an encrypted property of type int32[0m
2025-04-09T19:14:03.1479427Z       [32m  [32mâœ”[39m[0m[90m then the generated encryptedFieldsMap is correct[0m
2025-04-09T19:14:03.1533362Z [0m      When a schema is instantiated with an encrypted field of type double for csfle[0m
2025-04-09T19:14:03.1588171Z       [32m  [32mâœ”[39m[0m[90m Then the schema has an encrypted property of type double[0m
2025-04-09T19:14:03.1675456Z       [32m  [32mâœ”[39m[0m[90m then the generated schemaMap is correct[0m
2025-04-09T19:14:03.1729632Z [0m      When a schema is instantiated with an encrypted field of type double for queryableEncryption[0m
2025-04-09T19:14:03.1784327Z       [32m  [32mâœ”[39m[0m[90m Then the schema has an encrypted property of type double[0m
2025-04-09T19:14:03.1871101Z       [32m  [32mâœ”[39m[0m[90m then the generated encryptedFieldsMap is correct[0m
2025-04-09T19:14:03.1935876Z [0m    Tests that fields of valid schema types can be declared as encrypted schemas[0m
2025-04-09T19:14:03.1981737Z     [32m  [32mâœ”[39m[0m[90m mongoose maps with csfle[0m
2025-04-09T19:14:03.2048301Z     [32m  [32mâœ”[39m[0m[90m mongoose maps with queryableEncryption[0m
2025-04-09T19:14:03.2116345Z     [32m  [32mâœ”[39m[0m[90m subdocument for csfle[0m
2025-04-09T19:14:03.2183357Z     [32m  [32mâœ”[39m[0m[90m subdocument for queryableEncryption[0m
2025-04-09T19:14:03.2249983Z     [32m  [32mâœ”[39m[0m[90m nested object for csfle[0m
2025-04-09T19:14:03.2315970Z     [32m  [32mâœ”[39m[0m[90m nested object for queryableEncryption[0m
2025-04-09T19:14:03.2383421Z     [32m  [32mâœ”[39m[0m[90m schema with encrypted array for csfle[0m
2025-04-09T19:14:03.2449913Z     [32m  [32mâœ”[39m[0m[90m schema with encrypted array for queryableEncryption[0m
2025-04-09T19:14:03.2492971Z [0m    invalid schema types for encrypted schemas[0m
2025-04-09T19:14:03.2504148Z [0m      When a schema is instantiated with an encrypted field of type Number[0m
2025-04-09T19:14:03.2561019Z       [32m  [32mâœ”[39m[0m[90m Then an error is thrown[0m
2025-04-09T19:14:03.2614757Z [0m      When a schema is instantiated with an encrypted field of type Mixed[0m
2025-04-09T19:14:03.2671596Z       [32m  [32mâœ”[39m[0m[90m Then an error is thrown[0m
2025-04-09T19:14:03.2725584Z [0m      When a schema is instantiated with a custom schema type plugin[0m
2025-04-09T19:14:03.2782170Z       [32m  [32mâœ”[39m[0m[90m Then an error is thrown[0m
2025-04-09T19:14:03.2847254Z [0m    options.encryptionType[0m
2025-04-09T19:14:03.2858642Z [0m      when an encrypted schema is instantiated and an encryptionType is not provided[0m
2025-04-09T19:14:03.2914225Z       [32m  [32mâœ”[39m[0m[90m an error is thrown[0m
2025-04-09T19:14:03.2968698Z [0m      when a nested encrypted schema is provided to schema constructor and the encryption types are different[0m
2025-04-09T19:14:03.3014937Z       [32m  [32mâœ”[39m[0m[90m then an error is thrown[0m
2025-04-09T19:14:03.3080267Z [0m    tests for schema mutation methods[0m
2025-04-09T19:14:03.3091034Z [0m      Schema.prototype.add()[0m
2025-04-09T19:14:03.3102113Z [0m        Given a schema with no encrypted fields[0m
2025-04-09T19:14:03.3113081Z [0m          When an encrypted field is added[0m
2025-04-09T19:14:03.3190375Z           [32m  [32mâœ”[39m[0m[90m Then the encrypted field is added to the encrypted fields for the schema[0m
2025-04-09T19:14:03.3276048Z [0m        Given a schema with an encrypted field[0m
2025-04-09T19:14:03.3287111Z [0m          when an encrypted field is added[0m
2025-04-09T19:14:03.3298319Z [0m            and the encryption type matches the existing encryption type[0m
2025-04-09T19:14:03.3386259Z             [32m  [32mâœ”[39m[0m[90m Then the encrypted field is added to the encrypted fields for the schema[0m
2025-04-09T19:14:03.3492985Z [0m        Given a schema with an encrypted field[0m
2025-04-09T19:14:03.3504332Z [0m          when an encrypted field is added with different encryption settings for the same field[0m
2025-04-09T19:14:03.3582387Z           [32m  [32mâœ”[39m[0m[90m The encryption settings for the field are overridden[0m
2025-04-09T19:14:03.3657453Z [0m          When an unencrypted field is added for the same field[0m
2025-04-09T19:14:03.3734041Z           [32m  [32mâœ”[39m[0m[90m The field on the schema is overridden[0m
2025-04-09T19:14:03.3819747Z [0m        Given a schema[0m
2025-04-09T19:14:03.3831233Z [0m          When multiple encrypted fields are added to the schema in one call to add()[0m
2025-04-09T19:14:03.3907884Z           [32m  [32mâœ”[39m[0m[90m Then all the encrypted fields are added to the schema[0m
2025-04-09T19:14:03.4004432Z [0m      Schema.prototype.remove()[0m
2025-04-09T19:14:03.4015214Z [0m        Given a schema with one encrypted field[0m
2025-04-09T19:14:03.4025927Z [0m          When the encrypted field is removed[0m
2025-04-09T19:14:03.4102633Z           [32m  [32mâœ”[39m[0m[90m Then the encrypted fields on the schema does not contain the removed field[0m
2025-04-09T19:14:03.4188361Z [0m        Given a schema with multiple encrypted fields[0m
2025-04-09T19:14:03.4199192Z [0m          When one encrypted field is removed[0m
2025-04-09T19:14:03.4276244Z           [32m  [32mâœ”[39m[0m[90m The encrypted fields on the schema does not contain the removed field[0m
2025-04-09T19:14:03.4351243Z [0m          When all encrypted fields are removed[0m
2025-04-09T19:14:03.4427994Z           [32m  [32mâœ”[39m[0m[90m The encrypted fields on the schema does not contain the removed field[0m
2025-04-09T19:14:03.4515241Z [0m        when a nested encrypted property is removed[0m
2025-04-09T19:14:03.4581038Z         [32m  [32mâœ”[39m[0m[90m the encrypted field is removed from the schema[0m
2025-04-09T19:14:03.4667350Z [0m    tests for schema copying methods[0m
2025-04-09T19:14:03.4678110Z [0m      Schema.prototype.clone()[0m
2025-04-09T19:14:03.4688726Z [0m        Given a schema with encrypted fields[0m
2025-04-09T19:14:03.4699551Z [0m          When the schema is cloned[0m
2025-04-09T19:14:03.4777310Z           [32m  [32mâœ”[39m[0m[90m The resultant schema contains all the same encrypted fields as the original schema[0m
2025-04-09T19:14:03.4907850Z           [32m  [32mâœ”[39m[0m[90m The encryption type of the cloned schema is the same as the original[0m
2025-04-09T19:14:03.4972681Z [0m            When the cloned schema is modified[0m
2025-04-09T19:14:03.5060584Z             [32m  [32mâœ”[39m[0m[90m The original is not modified[0m
2025-04-09T19:14:03.5178140Z [0m      Schema.prototype.pick()[0m
2025-04-09T19:14:03.5189198Z [0m        When pick() is used with only unencrypted fields[0m
2025-04-09T19:14:03.5256986Z         [32m  [32mâœ”[39m[0m[90m Then the resultant schema has none of the original schemaâ€™s encrypted fields[0m
2025-04-09T19:14:03.5356352Z         [32m  [32mâœ”[39m[0m[90m Then the encryption type is set to the cloned schemas encryptionType[0m
2025-04-09T19:14:03.5421097Z [0m        When pick() is used with some unencrypted fields[0m
2025-04-09T19:14:03.5488052Z         [32m  [32mâœ”[39m[0m[90m Then the resultant schema has the encrypted fields of the original schema that were specified to pick().[0m
2025-04-09T19:14:03.5597221Z         [32m  [32mâœ”[39m[0m[90m Then the encryption type is the same as the original schemaâ€™s encryption type[0m
2025-04-09T19:14:03.5661711Z [0m        When pick() is used with nested paths[0m
2025-04-09T19:14:03.5728987Z         [32m  [32mâœ”[39m[0m[90m Then the resultant schema has the encrypted fields of the original schema that were specified to pick().[0m
2025-04-09T19:14:03.5838068Z         [32m  [32mâœ”[39m[0m[90m Then the encryption type is the same as the original schemaâ€™s encryption type[0m
2025-04-09T19:14:03.5913129Z [0m      Schema.prototype.omit()[0m
2025-04-09T19:14:03.5924125Z [0m        When omit() is used with only unencrypted fields[0m
2025-04-09T19:14:03.5991144Z         [32m  [32mâœ”[39m[0m[90m Then the resultant schema has all the original schemaâ€™s encrypted fields[0m
2025-04-09T19:14:03.6101238Z         [32m  [32mâœ”[39m[0m[90m Then the encryption type is the same as the original schemaâ€™s encryption type[0m
2025-04-09T19:14:03.6166102Z [0m        When omit() is used with some unencrypted fields[0m
2025-04-09T19:14:03.6232970Z         [32m  [32mâœ”[39m[0m[90m Then the resultant schema has the encrypted fields of the original schema that were specified to omit()[0m
2025-04-09T19:14:03.6342121Z         [32m  [32mâœ”[39m[0m[90m Then the encryption type is the same as the original schemaâ€™s encryption type[0m
2025-04-09T19:14:03.6406612Z [0m        When omit() is used with all the encrypted fields[0m
2025-04-09T19:14:03.6473082Z         [32m  [32mâœ”[39m[0m[90m Then the encryption type is the same as the original schemaâ€™s encryption type[0m
2025-04-09T19:14:03.6569213Z 
2025-04-09T19:14:03.6569530Z [0m  QueryCursor[0m
2025-04-09T19:14:03.6785869Z   [32m  [32mâœ”[39m[0m[90m as readable stream[0m
2025-04-09T19:14:03.7017333Z   [32m  [32mâœ”[39m[0m[90m handles non-boolean lean option (gh-7137)[0m
2025-04-09T19:14:03.7374609Z   [32m  [32mâœ”[39m[0m[90m data before close (gh-4998)[0m
2025-04-09T19:14:03.7632824Z   [32m  [32mâœ”[39m[0m[90m pulls schema-level readPreference (gh-8421)[0m
2025-04-09T19:14:03.9097572Z   [32m  [32mâœ”[39m[0m[90m eachAsync() with parallel > numDocs (gh-8422)[0m[31m (121ms)[0m
2025-04-09T19:14:03.9516834Z   [32m  [32mâœ”[39m[0m[90m eachAsync() with sort, parallel, and sync function (gh-8557)[0m
2025-04-09T19:14:03.9957734Z   [32m  [32mâœ”[39m[0m[90m closing query cursor emits `close` event only once (gh-8835)[0m
2025-04-09T19:14:04.0413111Z   [32m  [32mâœ”[39m[0m[90m closing aggregation cursor emits `close` event only once (gh-8835)[0m
2025-04-09T19:14:04.2787025Z   [32m  [32mâœ”[39m[0m[90m closing query cursor emits `close` event only once with stream pause/resume (gh-10876)[0m[31m (215ms)[0m
2025-04-09T19:14:04.5167379Z   [32m  [32mâœ”[39m[0m[90m closing aggregation cursor emits `close` event only once with stream pause/resume (gh-10876)[0m[31m (216ms)[0m
2025-04-09T19:14:04.7535086Z   [32m  [32mâœ”[39m[0m[90m query cursor emit end event (gh-10902)[0m[31m (216ms)[0m
2025-04-09T19:14:04.9911474Z   [32m  [32mâœ”[39m[0m[90m aggregate cursor emit end event (gh-10902)[0m[31m (215ms)[0m
2025-04-09T19:14:05.0799208Z   [32m  [32mâœ”[39m[0m[90m query cursor emit end event before close event (gh-10902)[0m[33m (68ms)[0m
2025-04-09T19:14:05.1753571Z   [32m  [32mâœ”[39m[0m[90m aggregate cursor emit end event before close event (gh-10902)[0m[33m (69ms)[0m
2025-04-09T19:14:05.2268507Z   [32m  [32mâœ”[39m[0m[90m passes document index as the second argument for query cursor (gh-8972)[0m
2025-04-09T19:14:05.2702652Z   [32m  [32mâœ”[39m[0m[90m passes document index as the second argument for aggregation cursor (gh-8972)[0m
2025-04-09T19:14:05.3133688Z   [32m  [32mâœ”[39m[0m[90m post hooks (gh-9435)[0m
2025-04-09T19:14:05.3532429Z   [32m  [32mâœ”[39m[0m[90m reports CastError with noCursorTimeout set (gh-10150)[0m
2025-04-09T19:14:05.4025080Z   [32m  [32mâœ”[39m[0m[90m reports error in pre save hook (gh-10785)[0m
2025-04-09T19:14:05.4542440Z   [32m  [32mâœ”[39m[0m[90m applies selected fields when using discriminators (gh-11130)[0m
2025-04-09T19:14:05.4901118Z   [32m  [32mâœ”[39m[0m[90m should allow middleware to run before applying _optionsForExec() gh-13417[0m
2025-04-09T19:14:05.5324431Z   [32m  [32mâœ”[39m[0m[90m handles skipMiddlewareFunction() (gh-13411)[0m
2025-04-09T19:14:05.5595026Z   [32m  [32mâœ”[39m[0m[90m supports including fields using plus path that have select: false in schema (gh-13773)[0m
2025-04-09T19:14:05.5992322Z   [32m  [32mâœ”[39m[0m[90m throws if calling skipMiddlewareFunction() with non-empty array (gh-13411)[0m
2025-04-09T19:14:05.6430048Z   [32m  [32mâœ”[39m[0m[90m returns the underlying Node driver cursor with getDriverCursor()[0m
2025-04-09T19:14:05.6638624Z   [32m  [32mâœ”[39m[0m[90m handles destroy() (gh-14966)[0m
2025-04-09T19:14:05.6846752Z   [32m  [32mâœ”[39m[0m[90m handles destroy() before cursor is created (gh-14966)[0m
2025-04-09T19:14:05.6880882Z [0m    #next()[0m
2025-04-09T19:14:05.7105671Z     [32m  [32mâœ”[39m[0m[90m with promises[0m
2025-04-09T19:14:05.7343975Z     [32m  [32mâœ”[39m[0m[90m with limit (gh-4266)[0m
2025-04-09T19:14:05.7748664Z     [32m  [32mâœ”[39m[0m[90m with projection[0m
2025-04-09T19:14:05.8003485Z     [32m  [32mâœ”[39m[0m[90m casting ObjectIds with where() (gh-4355)[0m
2025-04-09T19:14:05.8237809Z     [32m  [32mâœ”[39m[0m[90m cast errors (gh-4355)[0m
2025-04-09T19:14:05.8483759Z     [32m  [32mâœ”[39m[0m[90m with pre-find hooks (gh-5096)[0m
2025-04-09T19:14:05.8531954Z [0m      with populate[0m
2025-04-09T19:14:05.9234099Z       [32m  [32mâœ”[39m[0m[90m with populate without specify batchSize[0m
2025-04-09T19:14:06.0045071Z       [32m  [32mâœ”[39m[0m[90m with populate using custom batchSize[0m
2025-04-09T19:14:06.0129214Z [0m    `transform` option[0m
2025-04-09T19:14:06.0336986Z     [32m  [32mâœ”[39m[0m[90m transforms document[0m
2025-04-09T19:14:06.0398687Z [0m    #map[0m
2025-04-09T19:14:06.0632476Z     [32m  [32mâœ”[39m[0m[90m maps documents[0m
2025-04-09T19:14:06.0891209Z     [32m  [32mâœ”[39m[0m[90m with #next[0m
2025-04-09T19:14:06.0952183Z [0m    #eachAsync()[0m
2025-04-09T19:14:06.2172152Z     [32m  [32mâœ”[39m[0m[90m iterates one-by-one, stopping for promises[0m[31m (104ms)[0m
2025-04-09T19:14:06.2465807Z     [32m  [32mâœ”[39m[0m[90m parallelization[0m
2025-04-09T19:14:06.2526505Z [0m    #lean()[0m
2025-04-09T19:14:06.2717311Z     [32m  [32mâœ”[39m[0m[90m lean[0m
2025-04-09T19:14:06.2946769Z     [32m  [32mâœ”[39m[0m[90m lean = false (gh-7197)[0m
2025-04-09T19:14:06.3008101Z [0m    #close()[0m
2025-04-09T19:14:06.3246513Z     [32m  [32mâœ”[39m[0m[90m works (gh-4258)[0m
2025-04-09T19:14:06.3341811Z 
2025-04-09T19:14:06.3342659Z [0m  schema select option[0m
2025-04-09T19:14:06.3548646Z   [32m  [32mâœ”[39m[0m[90m excluding paths through schematype[0m
2025-04-09T19:14:06.3745163Z   [32m  [32mâœ”[39m[0m[90m including paths through schematype[0m
2025-04-09T19:14:06.3822575Z   [32m  [32mâœ”[39m[0m[90m should not project in discriminator key if projected in implicitly with .$ (gh-9361)[0m
2025-04-09T19:14:06.4037412Z   [32m  [32mâœ”[39m[0m[90m conflicting schematype path selection should not error[0m
2025-04-09T19:14:06.4108331Z   [32m  [32mâœ”[39m[0m[90m selecting _id works with excluded schematype path[0m
2025-04-09T19:14:06.4224126Z   [32m  [32mâœ”[39m[0m[90m selecting _id works with excluded schematype path on sub doc[0m
2025-04-09T19:14:06.4474161Z   [32m  [32mâœ”[39m[0m[90m inclusive/exclusive combos should work[0m
2025-04-09T19:14:06.4738134Z   [32m  [32mâœ”[39m[0m[90m when select is false in the schema definition, all inclusive/exclusive combos should work[0m
2025-04-09T19:14:06.5048628Z   [32m  [32mâœ”[39m[0m[90m when select is set to true in the schema definition, all inclusive/exclusive combos should work[0m
2025-04-09T19:14:06.5242640Z   [32m  [32mâœ”[39m[0m[90m does not set defaults for nested objects (gh-4707)[0m
2025-04-09T19:14:06.5437903Z   [32m  [32mâœ”[39m[0m[90m does not create nested objects if not included (gh-4669)[0m
2025-04-09T19:14:06.5619612Z   [32m  [32mâœ”[39m[0m[90m initializes nested defaults with selected objects (gh-2629)[0m
2025-04-09T19:14:06.5793673Z   [32m  [32mâœ”[39m[0m[90m should allow deselecting a field on a query even if the definition has select set to true (gh-11694)[0m
2025-04-09T19:14:06.5830602Z [0m    overriding schematype select options[0m
2025-04-09T19:14:06.5854650Z [0m      works[0m
2025-04-09T19:14:06.5869316Z [0m        for inclusions[0m
2025-04-09T19:14:06.5952993Z         [32m  [32mâœ”[39m[0m[90m with find[0m
2025-04-09T19:14:06.6148279Z         [32m  [32mâœ”[39m[0m[90m for findById[0m
2025-04-09T19:14:06.6353567Z         [32m  [32mâœ”[39m[0m[90m with findOneAndUpdate[0m
2025-04-09T19:14:06.6550544Z         [32m  [32mâœ”[39m[0m[90m for findByIdAndUpdate[0m
2025-04-09T19:14:06.6632199Z [0m        for exclusions[0m
2025-04-09T19:14:06.6761036Z         [32m  [32mâœ”[39m[0m[90m with find[0m
2025-04-09T19:14:06.6947734Z         [32m  [32mâœ”[39m[0m[90m with findById[0m
2025-04-09T19:14:06.7139168Z         [32m  [32mâœ”[39m[0m[90m with findOneAndUpdate[0m
2025-04-09T19:14:06.7335482Z         [32m  [32mâœ”[39m[0m[90m with findOneAndDelete[0m
2025-04-09T19:14:06.7437801Z [0m    exclusion in root schema should override child schema[0m
2025-04-09T19:14:06.7489916Z     [32m  [32mâœ”[39m[0m[90m works (gh-1333)[0m
2025-04-09T19:14:06.7696057Z     [32m  [32mâœ”[39m[0m[90m with nested (gh-7945)[0m
2025-04-09T19:14:06.7756541Z [0m    forcing inclusion of a deselected schema path[0m
2025-04-09T19:14:06.7938503Z     [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:14:06.8127240Z     [32m  [32mâœ”[39m[0m[90m works if only one plus path and only one deselected field[0m
2025-04-09T19:14:06.8317898Z     [32m  [32mâœ”[39m[0m[90m works with query.slice (gh-1370)[0m
2025-04-09T19:14:06.8512621Z     [32m  [32mâœ”[39m[0m[90m ignores if path does not have select in schema (gh-6785)[0m
2025-04-09T19:14:06.8688786Z     [32m  [32mâœ”[39m[0m[90m omits if not in schema (gh-7017)[0m
2025-04-09T19:14:06.8874204Z 
2025-04-09T19:14:06.8875012Z [0m  document.populate[0m
2025-04-09T19:14:06.9161305Z   [32m  [32mâœ”[39m[0m[90m works with await[0m
2025-04-09T19:14:06.9490646Z   [32m  [32mâœ”[39m[0m[90m populating using space delimited paths with options[0m
2025-04-09T19:14:06.9774194Z   [32m  [32mâœ”[39m[0m[90m using multiple populate calls[0m
2025-04-09T19:14:07.0090180Z   [32m  [32mâœ”[39m[0m[90m with custom model selection[0m
2025-04-09T19:14:07.0369144Z   [32m  [32mâœ”[39m[0m[90m one path, model selection as second argument[0m
2025-04-09T19:14:07.0682509Z   [32m  [32mâœ”[39m[0m[90m multiple paths, model selection as second argument[0m
2025-04-09T19:14:07.0983170Z   [32m  [32mâœ”[39m[0m[90m multiple paths, mixed argument types[0m
2025-04-09T19:14:07.1275216Z   [32m  [32mâœ”[39m[0m[90m multiple paths, multiple options[0m
2025-04-09T19:14:07.1542347Z   [32m  [32mâœ”[39m[0m[90m a property not in schema[0m
2025-04-09T19:14:07.1811427Z   [32m  [32mâœ”[39m[0m[90m of empty array[0m
2025-04-09T19:14:07.2159823Z   [32m  [32mâœ”[39m[0m[90m of array of null/undefined[0m
2025-04-09T19:14:07.2438154Z   [32m  [32mâœ”[39m[0m[90m of null property[0m
2025-04-09T19:14:07.2732337Z   [32m  [32mâœ”[39m[0m[90m String _ids[0m
2025-04-09T19:14:07.3194845Z   [32m  [32mâœ”[39m[0m[90m Buffer _ids[0m
2025-04-09T19:14:07.3487533Z   [32m  [32mâœ”[39m[0m[90m Number _ids[0m
2025-04-09T19:14:07.3824825Z   [32m  [32mâœ”[39m[0m[90m depopulates when setting `_id` (gh-3308)[0m
2025-04-09T19:14:07.4167995Z   [32m  [32mâœ”[39m[0m[90m does not allow you to call populate() on nested docs (gh-4552)[0m
2025-04-09T19:14:07.4710116Z   [32m  [32mâœ”[39m[0m[90m handles pulling from populated array (gh-3579)[0m
2025-04-09T19:14:07.5241248Z   [32m  [32mâœ”[39m[0m[90m populated() works with nested subdocs (gh-7685)[0m
2025-04-09T19:14:07.5827805Z   [32m  [32mâœ”[39m[0m[90m works with single strings (gh-11160)[0m
2025-04-09T19:14:07.6265689Z   [32m  [32mâœ”[39m[0m[90m works when populating a nested document inside an array parent (gh-14435)[0m
2025-04-09T19:14:07.6862839Z   [32m  [32mâœ”[39m[0m[90m supports populate with ordered option (gh-15231)[0m
2025-04-09T19:14:07.7389877Z   [32m  [32mâœ”[39m[0m[90m handles re-populating map of array of refs (gh-9359)[0m
2025-04-09T19:14:07.7431047Z [0m    populating two paths[0m
2025-04-09T19:14:07.7750222Z     [32m  [32mâœ”[39m[0m[90m with space delmited string works[0m
2025-04-09T19:14:07.7812100Z [0m    sub-level properties[0m
2025-04-09T19:14:07.8073311Z     [32m  [32mâœ”[39m[0m[90m with string arg[0m
2025-04-09T19:14:07.8133859Z [0m    of new document[0m
2025-04-09T19:14:07.8427096Z     [32m  [32mâœ”[39m[0m[90m should save just the populated _id (gh-1442)[0m
2025-04-09T19:14:07.8488894Z [0m    gh-2214[0m
2025-04-09T19:14:07.8925317Z     [32m  [32mâœ”[39m[0m[90m should return a real document array when populating[0m
2025-04-09T19:14:07.8993058Z [0m    gh-7889[0m
2025-04-09T19:14:07.9446556Z     [32m  [32mâœ”[39m[0m[90m should save item added to array after populating the array[0m
2025-04-09T19:14:07.9506685Z [0m    depopulate[0m
2025-04-09T19:14:08.0009256Z     [32m  [32mâœ”[39m[0m[90m can depopulate specific path (gh-2509)[0m
2025-04-09T19:14:08.0577820Z     [32m  [32mâœ”[39m[0m[90m depopulates all (gh-6073)[0m
2025-04-09T19:14:08.0967579Z     [32m  [32mâœ”[39m[0m[90m doesn't throw when called on a doc that is not populated (gh-6075)[0m
2025-04-09T19:14:08.1628079Z     [32m  [32mâœ”[39m[0m[90m depopulates virtuals (gh-6075)[0m
2025-04-09T19:14:08.2398254Z     [32m  [32mâœ”[39m[0m[90m depopulates field with empty array (gh-7740)[0m
2025-04-09T19:14:08.2972474Z     [32m  [32mâœ”[39m[0m[90m depopulates after pushing manually populated (gh-2509)[0m
2025-04-09T19:14:08.3034337Z [0m    #populated() with virtuals (gh-7440)[0m
2025-04-09T19:14:08.3454947Z     [32m  [32mâœ”[39m[0m[90m works with justOne: false[0m
2025-04-09T19:14:08.3947429Z     [32m  [32mâœ”[39m[0m[90m works with justOne: true[0m
2025-04-09T19:14:08.4009054Z [0m    #populated() with getters on embedded schema (gh-7521)[0m
2025-04-09T19:14:08.4515355Z     [32m  [32mâœ”[39m[0m[90m works with populate[0m
2025-04-09T19:14:08.4619209Z 
2025-04-09T19:14:08.4621331Z [0m  model: updateOne:[0m
2025-04-09T19:14:08.4872257Z   [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:14:08.5069379Z   [32m  [32mâœ”[39m[0m[90m casts doc arrays[0m
2025-04-09T19:14:08.5259485Z   [32m  [32mâœ”[39m[0m[90m makes copy of conditions and update options[0m
2025-04-09T19:14:08.5453711Z   [32m  [32mâœ”[39m[0m[90m $addToSet with $ (gh-479)[0m
2025-04-09T19:14:08.5646795Z   [32m  [32mâœ”[39m[0m[90m works with nested positional notation[0m
2025-04-09T19:14:08.5862238Z   [32m  [32mâœ”[39m[0m[90m handles $pull with obj literal (gh-542)[0m
2025-04-09T19:14:08.6077171Z   [32m  [32mâœ”[39m[0m[90m handles $pull of obj literal and nested $in[0m
2025-04-09T19:14:08.6296901Z   [32m  [32mâœ”[39m[0m[90m handles $pull and nested $nin[0m
2025-04-09T19:14:08.6534748Z   [32m  [32mâœ”[39m[0m[90m updates numbers atomically[0m
2025-04-09T19:14:08.6742488Z   [32m  [32mâœ”[39m[0m[90m passes number of affected docs[0m
2025-04-09T19:14:08.6944690Z   [32m  [32mâœ”[39m[0m[90m updates a number to null (gh-640)[0m
2025-04-09T19:14:08.7340399Z   [32m  [32mâœ”[39m[0m[90m handles $pull from Mixed arrays (gh-735)[0m
2025-04-09T19:14:08.7676766Z   [32m  [32mâœ”[39m[0m[90m handles $push with $ positionals (gh-1057)[0m
2025-04-09T19:14:08.8039971Z   [32m  [32mâœ”[39m[0m[90m handles nested paths starting with numbers (gh-1062)[0m
2025-04-09T19:14:08.8337468Z   [32m  [32mâœ”[39m[0m[90m handles positional operators with referenced docs (gh-1572)[0m
2025-04-09T19:14:08.8754108Z   [32m  [32mâœ”[39m[0m[90m use .where for update condition (gh-2170)[0m
2025-04-09T19:14:08.9155360Z   [32m  [32mâœ”[39m[0m[90m casts empty arrays[0m
2025-04-09T19:14:08.9484026Z   [32m  [32mâœ”[39m[0m[90m successfully casts set with nested mixed objects (gh-2796)[0m
2025-04-09T19:14:08.9766497Z   [32m  [32mâœ”[39m[0m[90m handles empty update with promises (gh-2796)[0m
2025-04-09T19:14:08.9951970Z   [32m  [32mâœ”[39m[0m[90m works with undefined date (gh-2833)[0m
2025-04-09T19:14:09.0300087Z   [32m  [32mâœ”[39m[0m[90m does not add virtuals to update (gh-2046)[0m
2025-04-09T19:14:09.0500511Z   [32m  [32mâœ”[39m[0m[90m doesnt modify original argument doc (gh-3008)[0m
2025-04-09T19:14:09.0568007Z [0m    using last[0m
2025-04-09T19:14:09.0755662Z     [32m  [32mâœ”[39m[0m[90m handles date casting (gh-479)[0m
2025-04-09T19:14:09.0991670Z     [32m  [32mâœ”[39m[0m[90m handles $addToSet (gh-545)[0m
2025-04-09T19:14:09.1232075Z     [32m  [32mâœ”[39m[0m[90m handles $addToSet with $each (gh-545)[0m
2025-04-09T19:14:09.1452054Z     [32m  [32mâœ”[39m[0m[90m handles $pop and $unset (gh-574)[0m
2025-04-09T19:14:09.1512135Z [0m    mongodb 2.4 features[0m
2025-04-09T19:14:09.1808678Z     [32m  [32mâœ”[39m[0m[90m $setOnInsert operator[0m
2025-04-09T19:14:09.2133247Z     [32m  [32mâœ”[39m[0m[90m push with $slice[0m
2025-04-09T19:14:09.2195037Z [0m    mongodb 2.6 features[0m
2025-04-09T19:14:09.2475704Z     [32m  [32mâœ”[39m[0m[90m supports $position[0m
2025-04-09T19:14:09.2861455Z     [32m  [32mâœ”[39m[0m[90m supports $currentDate[0m
2025-04-09T19:14:09.2922666Z [0m    defaults and validators (gh-860)[0m
2025-04-09T19:14:09.3196661Z     [32m  [32mâœ”[39m[0m[90m applies defaults on upsert[0m
2025-04-09T19:14:09.3855916Z     [32m  [32mâœ”[39m[0m[90m avoids nested paths if setting parent path (gh-4911)[0m
2025-04-09T19:14:09.4169869Z     [32m  [32mâœ”[39m[0m[90m doesnt set default on upsert if query sets it[0m
2025-04-09T19:14:09.4486058Z     [32m  [32mâœ”[39m[0m[90m properly sets default on upsert if query wont set it[0m
2025-04-09T19:14:09.4786150Z     [32m  [32mâœ”[39m[0m[90m handles defaults on document arrays (gh-4456)[0m
2025-04-09T19:14:09.5000204Z     [32m  [32mâœ”[39m[0m[90m runs validators if theyre set[0m
2025-04-09T19:14:09.5220590Z     [32m  [32mâœ”[39m[0m[90m validators handle $unset and $setOnInsert[0m
2025-04-09T19:14:09.5451154Z     [32m  [32mâœ”[39m[0m[90m global validators option (gh-6578)[0m
2025-04-09T19:14:09.5696343Z     [32m  [32mâœ”[39m[0m[90m min/max, enum, and regex built-in validators work[0m
2025-04-09T19:14:09.5927406Z     [32m  [32mâœ”[39m[0m[90m multiple validation errors[0m
2025-04-09T19:14:09.6153703Z     [32m  [32mâœ”[39m[0m[90m validators ignore $inc[0m
2025-04-09T19:14:09.6374101Z     [32m  [32mâœ”[39m[0m[90m validators handle positional operator (gh-3167)[0m
2025-04-09T19:14:09.6627149Z     [32m  [32mâœ”[39m[0m[90m validators handle arrayFilters (gh-7536)[0m
2025-04-09T19:14:09.6930458Z     [32m  [32mâœ”[39m[0m[90m required and single nested (gh-4479)[0m
2025-04-09T19:14:09.7012114Z [0m    middleware[0m
2025-04-09T19:14:09.7280671Z     [32m  [32mâœ”[39m[0m[90m can specify pre and post hooks[0m
2025-04-09T19:14:09.7484690Z     [32m  [32mâœ”[39m[0m[90m runs before validators (gh-2706)[0m
2025-04-09T19:14:09.7557144Z [0m      objects and arrays[0m
2025-04-09T19:14:09.7744120Z       [32m  [32mâœ”[39m[0m[90m embedded objects (gh-2706)[0m
2025-04-09T19:14:09.8006814Z       [32m  [32mâœ”[39m[0m[90m handles document array validation (gh-2733)[0m
2025-04-09T19:14:09.8247622Z       [32m  [32mâœ”[39m[0m[90m validators on arrays (gh-3724)[0m
2025-04-09T19:14:09.8337923Z [0m    set() (gh-5770)[0m
2025-04-09T19:14:09.8603496Z     [32m  [32mâœ”[39m[0m[90m works with middleware and doesn't change the op[0m
2025-04-09T19:14:09.8913846Z     [32m  [32mâœ”[39m[0m[90m object syntax for path parameter[0m
2025-04-09T19:14:09.8975076Z [0m    bug fixes[0m
2025-04-09T19:14:09.9641741Z     [32m  [32mâœ”[39m[0m[90m can $rename (gh-1845)[0m[33m (47ms)[0m
2025-04-09T19:14:09.9862274Z     [32m  [32mâœ”[39m[0m[90m throws CastError if $rename fails to cast to string (gh-1845)[0m
2025-04-09T19:14:10.0225275Z     [32m  [32mâœ”[39m[0m[90m allows objects with positional operator (gh-3185)[0m
2025-04-09T19:14:10.0554484Z     [32m  [32mâœ”[39m[0m[90m mixed type casting (gh-3305)[0m
2025-04-09T19:14:10.0869754Z     [32m  [32mâœ”[39m[0m[90m replaceOne[0m
2025-04-09T19:14:10.1211514Z     [32m  [32mâœ”[39m[0m[90m mixed nested type casting (gh-3337)[0m
2025-04-09T19:14:10.1535982Z     [32m  [32mâœ”[39m[0m[90m with single nested (gh-3820)[0m
2025-04-09T19:14:10.1849322Z     [32m  [32mâœ”[39m[0m[90m with single nested and transform (gh-4621)[0m
2025-04-09T19:14:10.2053658Z     [32m  [32mâœ”[39m[0m[90m works with buffers (gh-3496)[0m
2025-04-09T19:14:10.2375111Z     [32m  [32mâœ”[39m[0m[90m .updateOne(doc) (gh-3221)[0m
2025-04-09T19:14:10.2686345Z     [32m  [32mâœ”[39m[0m[90m middleware update with exec (gh-3549)[0m
2025-04-09T19:14:10.2898448Z     [32m  [32mâœ”[39m[0m[90m $push with buffer doesnt throw error (gh-3890)[0m
2025-04-09T19:14:10.3216335Z     [32m  [32mâœ”[39m[0m[90m $set with buffer (gh-3961)[0m
2025-04-09T19:14:10.3555355Z     [32m  [32mâœ”[39m[0m[90m versioning with setDefaultsOnInsert (gh-2593)[0m
2025-04-09T19:14:10.4386590Z     [32m  [32mâœ”[39m[0m[90m updates with timestamps with $set (gh-4989) (gh-7152)[0m[33m (63ms)[0m
2025-04-09T19:14:10.4696225Z     [32m  [32mâœ”[39m[0m[90m lets $currentDate go through with updatedAt (gh-5222)[0m
2025-04-09T19:14:10.4923289Z     [32m  [32mâœ”[39m[0m[90m update validators on single nested (gh-4332)[0m
2025-04-09T19:14:10.5344225Z     [32m  [32mâœ”[39m[0m[90m updates child schema timestamps with $push (gh-4049)[0m
2025-04-09T19:14:10.5682561Z     [32m  [32mâœ”[39m[0m[90m updates child schema timestamps with $set (gh-4049)[0m
2025-04-09T19:14:10.5902692Z     [32m  [32mâœ”[39m[0m[90m handles positional operator with timestamps (gh-4418)[0m
2025-04-09T19:14:10.6250160Z     [32m  [32mâœ”[39m[0m[90m push with timestamps (gh-4514)[0m
2025-04-09T19:14:10.6460989Z     [32m  [32mâœ”[39m[0m[90m addToSet (gh-4953)[0m
2025-04-09T19:14:10.6825781Z     [32m  [32mâœ”[39m[0m[90m overwrite with timestamps (gh-4054)[0m
2025-04-09T19:14:10.7148357Z     [32m  [32mâœ”[39m[0m[90m update with buffer and exec (gh-4609)[0m
2025-04-09T19:14:10.7462899Z     [32m  [32mâœ”[39m[0m[90m single nested with runValidators (gh-4420)[0m
2025-04-09T19:14:10.7797914Z     [32m  [32mâœ”[39m[0m[90m single nested under doc array with runValidators (gh-4960)[0m
2025-04-09T19:14:10.8032957Z     [32m  [32mâœ”[39m[0m[90m handles $set on document array in discriminator with runValidators (gh-12518)[0m
2025-04-09T19:14:10.8367369Z     [32m  [32mâœ”[39m[0m[90m single nested schema with geo (gh-4465)[0m
2025-04-09T19:14:10.8700675Z     [32m  [32mâœ”[39m[0m[90m runs validation on Mixed properties of embedded arrays during updates (gh-4441)[0m
2025-04-09T19:14:10.9165150Z     [32m  [32mâœ”[39m[0m[90m updating single nested doc property casts correctly (gh-4655)[0m
2025-04-09T19:14:10.9486508Z     [32m  [32mâœ”[39m[0m[90m findOneAndUpdate with nested arrays (gh-5032)[0m
2025-04-09T19:14:10.9821926Z     [32m  [32mâœ”[39m[0m[90m findOneAndUpdate with timestamps (gh-5045)[0m
2025-04-09T19:14:11.0056551Z     [32m  [32mâœ”[39m[0m[90m doesnt double-call setters when updating an array (gh-5041)[0m
2025-04-09T19:14:11.0389566Z     [32m  [32mâœ”[39m[0m[90m does not fail if passing whole doc (gh-5088)[0m
2025-04-09T19:14:11.0705456Z     [32m  [32mâœ”[39m[0m[90m does not fail if passing whole doc (gh-5111)[0m
2025-04-09T19:14:11.1059809Z     [32m  [32mâœ”[39m[0m[90m $pullAll with null (gh-5164)[0m
2025-04-09T19:14:11.1380594Z     [32m  [32mâœ”[39m[0m[90m $set array (gh-5403)[0m
2025-04-09T19:14:11.1734125Z     [32m  [32mâœ”[39m[0m[90m doesn't skip casting the query on nested arrays (gh-7098)[0m
2025-04-09T19:14:11.2047799Z     [32m  [32mâœ”[39m[0m[90m defaults with overwrite and no update validators (gh-5384)[0m
2025-04-09T19:14:11.2343353Z     [32m  [32mâœ”[39m[0m[90m update validators with nested required (gh-5269)[0m
2025-04-09T19:14:11.2575309Z     [32m  [32mâœ”[39m[0m[90m $push with updateValidators and top-level doc (gh-5430)[0m
2025-04-09T19:14:11.3004434Z     [32m  [32mâœ”[39m[0m[90m $pull with updateValidators (gh-5555)[0m
2025-04-09T19:14:11.3328473Z     [32m  [32mâœ”[39m[0m[90m $pull with updateValidators and $in (gh-5744)[0m
2025-04-09T19:14:11.3544011Z     [32m  [32mâœ”[39m[0m[90m $pull with updateValidators and required array (gh-6341)[0m
2025-04-09T19:14:11.4037289Z     [32m  [32mâœ”[39m[0m[90m update with Decimal type (gh-5361)[0m
2025-04-09T19:14:11.4346306Z     [32m  [32mâœ”[39m[0m[90m strict false in query (gh-5453)[0m
2025-04-09T19:14:11.4674139Z     [32m  [32mâœ”[39m[0m[90m replaceOne with buffer (gh-6124)[0m
2025-04-09T19:14:11.4908115Z     [32m  [32mâœ”[39m[0m[90m returns error if passing array as conditions (gh-3677)[0m
2025-04-09T19:14:11.5255378Z     [32m  [32mâœ”[39m[0m[90m upsert: 1 (gh-5839)[0m
2025-04-09T19:14:11.5573018Z     [32m  [32mâœ”[39m[0m[90m casting $addToSet without $each (gh-6086)[0m
2025-04-09T19:14:11.5878715Z     [32m  [32mâœ”[39m[0m[90m doesn't add $each when pushing an array into an array (gh-6768)[0m
2025-04-09T19:14:11.6843130Z     [32m  [32mâœ”[39m[0m[90m casting embedded discriminators if path specified in filter (gh-5841)[0m[31m (79ms)[0m
2025-04-09T19:14:11.7174094Z     [32m  [32mâœ”[39m[0m[90m update with nested id (gh-5640)[0m
2025-04-09T19:14:11.7534251Z     [32m  [32mâœ”[39m[0m[90m $inc cast errors (gh-6770)[0m
2025-04-09T19:14:11.7743517Z     [32m  [32mâœ”[39m[0m[90m does not treat virtuals as an error for strict: throw (gh-6731)[0m
2025-04-09T19:14:11.7980797Z     [32m  [32mâœ”[39m[0m[90m cast error in update conditions (gh-5477)[0m
2025-04-09T19:14:11.8243992Z     [32m  [32mâœ”[39m[0m[90m single embedded schema under document array (gh-4519)[0m
2025-04-09T19:14:11.8616427Z     [32m  [32mâœ”[39m[0m[90m casts objects to array when clobbering with $set (gh-6532)[0m
2025-04-09T19:14:11.8711491Z 
2025-04-09T19:14:11.8712230Z [0m  model: updateOne: [0m
2025-04-09T19:14:11.8871532Z   [32m  [32mâœ”[39m[0m[90m updating a map (gh-7111)[0m
2025-04-09T19:14:11.9089974Z   [32m  [32mâœ”[39m[0m[90m updating a map path underneath a single nested subdoc (gh-9298)[0m
2025-04-09T19:14:11.9169894Z   [32m  [32mâœ”[39m[0m[90m overwrite an array with empty (gh-7135)[0m
2025-04-09T19:14:11.9487067Z   [32m  [32mâœ”[39m[0m[90m sets child timestamps even without $set (gh-7261)[0m
2025-04-09T19:14:11.9718689Z   [32m  [32mâœ”[39m[0m[90m supports discriminators if key is specified in conditions (gh-7843)[0m
2025-04-09T19:14:11.9891674Z   [32m  [32mâœ”[39m[0m[90m immutable createdAt (gh-7917)[0m
2025-04-09T19:14:12.0079948Z   [32m  [32mâœ”[39m[0m[90m overwriting immutable createdAt (gh-8619)[0m
2025-04-09T19:14:12.0283017Z   [32m  [32mâœ”[39m[0m[90m conditional immutable (gh-8001)[0m
2025-04-09T19:14:12.0449108Z   [32m  [32mâœ”[39m[0m[90m allow $pull with non-existent schema field (gh-8166)[0m
2025-04-09T19:14:12.0652222Z   [32m  [32mâœ”[39m[0m[90m update embedded discriminator path if key in $elemMatch (gh-8063)[0m
2025-04-09T19:14:12.0834793Z   [32m  [32mâœ”[39m[0m[90m moves $set of immutable properties to $setOnInsert (gh-8467) (gh-9537)[0m
2025-04-09T19:14:12.1017362Z   [32m  [32mâœ”[39m[0m[90m moves $set of immutable properties to $setOnInsert (gh-8951)[0m
2025-04-09T19:14:12.1255040Z   [32m  [32mâœ”[39m[0m[90m updates buffers with `runValidators` successfully (gh-8580)[0m
2025-04-09T19:14:12.1530113Z   [32m  [32mâœ”[39m[0m[90m allows overriding child strict mode with top-level strict (gh-8961)[0m
2025-04-09T19:14:12.1849819Z   [32m  [32mâœ”[39m[0m[90m handles timestamp properties in nested paths when overwriting parent path (gh-9105)[0m
2025-04-09T19:14:12.1935513Z   [32m  [32mâœ”[39m[0m[90m update validators respect storeSubdocValidationError (gh-9172)[0m
2025-04-09T19:14:12.2381204Z   [32m  [32mâœ”[39m[0m[90m handles spread docs (gh-9518)[0m
2025-04-09T19:14:12.2690739Z   [32m  [32mâœ”[39m[0m[90m works with doubly nested arrays with $pullAll (gh-13190)[0m
2025-04-09T19:14:12.3000613Z   [32m  [32mâœ”[39m[0m[90m should throw when matchedCount === 0 and using orFail() on the query gh-11620[0m
2025-04-09T19:14:12.3443336Z   [32m  [32mâœ”[39m[0m[90m updateOne with top level key that starts with $ (gh-13786)[0m
2025-04-09T19:14:12.3656813Z   [32m  [32mâœ”[39m[0m[90m works with update validators and single nested doc with numberic paths (gh-13977)[0m
2025-04-09T19:14:12.3865406Z   [32m  [32mâœ”[39m[0m[90m handles embedded discriminators with $pull when discriminator key set in filter (gh-14675)[0m
2025-04-09T19:14:12.4092321Z   [32m  [32mâœ”[39m[0m[90m casts using overwritten discriminator key schema (gh-15051)[0m
2025-04-09T19:14:12.4130492Z [0m    mongodb 42 features[0m
2025-04-09T19:14:12.4431381Z     [32m  [32mâœ”[39m[0m[90m update pipeline (gh-8225)[0m
2025-04-09T19:14:12.4696752Z     [32m  [32mâœ”[39m[0m[90m update pipeline - $unset with string (gh-11106)[0m
2025-04-09T19:14:12.4959901Z     [32m  [32mâœ”[39m[0m[90m update pipeline timestamps (gh-8524)[0m
2025-04-09T19:14:12.5020549Z [0m    overwriteDiscriminatorKey[0m
2025-04-09T19:14:12.5308026Z     [32m  [32mâœ”[39m[0m[90m allows changing discriminator key in update (gh-6087)[0m
2025-04-09T19:14:12.5369268Z [0m    converts dot separated paths to nested structure (gh-10200)[0m
2025-04-09T19:14:12.5427742Z     [32m  [32mâœ”[39m[0m[90m works with new Model(...)[0m
2025-04-09T19:14:12.5664906Z     [32m  [32mâœ”[39m[0m[90m works with Model.create(...)[0m
2025-04-09T19:14:12.6196727Z     [32m  [32mâœ”[39m[0m[90m works with Model.updateOne(...)[0m
2025-04-09T19:14:12.6409257Z     [32m  [32mâœ”[39m[0m[90m works with Model.bulkWrite(...)[0m
2025-04-09T19:14:12.6508855Z 
2025-04-09T19:14:12.6509370Z [0m  document[0m
2025-04-09T19:14:12.6561952Z   [32m  [32mâœ”[39m[0m[90m isSelected()[0m
2025-04-09T19:14:12.6608899Z   [32m  [32mâœ”[39m[0m[90m isDirectSelected (gh-5063)[0m
2025-04-09T19:14:12.6630291Z 
2025-04-09T19:14:12.6630567Z [0m  Query:[0m
2025-04-09T19:14:12.6641773Z [0m    toConstructor[0m
2025-04-09T19:14:12.6710241Z     [32m  [32mâœ”[39m[0m[90m creates a query[0m
2025-04-09T19:14:12.6776142Z     [32m  [32mâœ”[39m[0m[90m copies all the right values[0m
2025-04-09T19:14:12.6861183Z     [32m  [32mâœ”[39m[0m[90m gets expected results[0m
2025-04-09T19:14:12.6969640Z     [32m  [32mâœ”[39m[0m[90m can be re-used multiple times[0m
2025-04-09T19:14:12.7036906Z     [32m  [32mâœ”[39m[0m[90m options get merged properly[0m
2025-04-09T19:14:12.7103596Z     [32m  [32mâœ”[39m[0m[90m options get cloned (gh-3176)[0m
2025-04-09T19:14:12.7171215Z     [32m  [32mâœ”[39m[0m[90m creates subclasses of mquery[0m
2025-04-09T19:14:12.7246377Z     [32m  [32mâœ”[39m[0m[90m with findOneAndUpdate (gh-4318)[0m
2025-04-09T19:14:12.7389113Z     [32m  [32mâœ”[39m[0m[90m gets middleware from model (gh-6455)[0m
2025-04-09T19:14:12.7458870Z     [32m  [32mâœ”[39m[0m[90m works with entries-style sort() syntax (gh-8159)[0m
2025-04-09T19:14:12.7566968Z 
2025-04-09T19:14:12.7567612Z [0m  types.subdocument[0m
2025-04-09T19:14:12.7621779Z   [32m  [32mâœ”[39m[0m[90m returns a proper ownerDocument (gh-3589)[0m
2025-04-09T19:14:12.7676125Z   [32m  [32mâœ”[39m[0m[90m not setting timestamps in subdocuments[0m
2025-04-09T19:14:12.7690337Z [0m    #isModified[0m
2025-04-09T19:14:12.7741336Z     [32m  [32mâœ”[39m[0m[90m defers to parent isModified (gh-8223)[0m
2025-04-09T19:14:12.7835929Z 
2025-04-09T19:14:12.7836307Z [0m  types.embeddeddocument[0m
2025-04-09T19:14:12.7879087Z   [32m  [32mâœ”[39m[0m[90m returns a proper ownerDocument (gh-3589)[0m
2025-04-09T19:14:12.7911163Z 
2025-04-09T19:14:12.7911438Z [0m  BigInt[0m
2025-04-09T19:14:12.7949954Z   [32m  [32mâœ”[39m[0m[90m is a valid schema type[0m
2025-04-09T19:14:12.7997777Z   [32m  [32mâœ”[39m[0m[90m casting from strings and numbers[0m
2025-04-09T19:14:12.8049985Z   [32m  [32mâœ”[39m[0m[90m handles cast errors[0m
2025-04-09T19:14:12.8099475Z   [32m  [32mâœ”[39m[0m[90m supports required[0m
2025-04-09T19:14:12.8121275Z [0m    MongoDB integration[0m
2025-04-09T19:14:12.8198126Z     [32m  [32mâœ”[39m[0m[90m is stored as a long in MongoDB[0m
2025-04-09T19:14:12.8271137Z     [32m  [32mâœ”[39m[0m[90m becomes a bigint with lean using useBigInt64[0m
2025-04-09T19:14:12.8382746Z     [32m  [32mâœ”[39m[0m[90m can query with comparison operators[0m
2025-04-09T19:14:12.8675382Z     [32m  [32mâœ”[39m[0m[90m supports populate()[0m
2025-04-09T19:14:12.8757846Z 
2025-04-09T19:14:12.8759332Z [0m  mongoose module:[0m
2025-04-09T19:14:12.8796004Z   [32m  [32mâœ”[39m[0m[90m legacy pluralize by default (gh-5958)[0m
2025-04-09T19:14:12.8840971Z   [32m  [32mâœ”[39m[0m[90m returns legacy pluralize function by default[0m
2025-04-09T19:14:12.8888501Z   [32m  [32mâœ”[39m[0m[90m sets custom pluralize function (gh-5877)[0m
2025-04-09T19:14:12.9003589Z   [32m  [32mâœ”[39m[0m[90m debug to stream (gh-7018)[0m
2025-04-09T19:14:12.9076269Z   [32m  [32mâœ”[39m[0m[90m should collect the args correctly gh-13364[0m
2025-04-09T19:14:12.9112136Z   [32m  [32mâœ”[39m[0m[90m {g,s}etting options[0m
2025-04-09T19:14:12.9158849Z   [32m  [32mâœ”[39m[0m[90m allows `const { model } = mongoose` (gh-3768)[0m
2025-04-09T19:14:12.9202836Z   [32m  [32mâœ”[39m[0m[90m options object (gh-8144)[0m
2025-04-09T19:14:12.9250011Z   [32m  [32mâœ”[39m[0m[90m bufferCommands option (gh-5879) (gh-9179)[0m
2025-04-09T19:14:12.9302217Z   [32m  [32mâœ”[39m[0m[90m cloneSchemas option (gh-6274)[0m
2025-04-09T19:14:12.9349392Z   [32m  [32mâœ”[39m[0m[90m supports disabling `id` via global plugin (gh-10701)[0m
2025-04-09T19:14:12.9394096Z   [32m  [32mâœ”[39m[0m[90m objectIdGetter option (gh-6588)[0m
2025-04-09T19:14:12.9468848Z   [32m  [32mâœ”[39m[0m[90m runValidators option (gh-6865) (gh-6578)[0m
2025-04-09T19:14:12.9521011Z   [32m  [32mâœ”[39m[0m[90m toJSON options (gh-6815)[0m
2025-04-09T19:14:12.9571485Z   [32m  [32mâœ”[39m[0m[90m toObject options (gh-6815)[0m
2025-04-09T19:14:12.9628327Z   [32m  [32mâœ”[39m[0m[90m strict option (gh-6858)[0m
2025-04-09T19:14:12.9875971Z   [32m  [32mâœ”[39m[0m[90m declaring global plugins (gh-5690)[0m
2025-04-09T19:14:12.9931539Z   [32m  [32mâœ”[39m[0m[90m declaring global plugins with tags (gh-9780)[0m
2025-04-09T19:14:12.9989145Z   [32m  [32mâœ”[39m[0m[90m global plugins on nested schemas underneath embedded discriminators (gh-7370)[0m
2025-04-09T19:14:13.0044460Z   [32m  [32mâœ”[39m[0m[90m global plugins with applyPluginsToDiscriminators (gh-7435)[0m
2025-04-09T19:14:13.0099147Z   [32m  [32mâœ”[39m[0m[90m global plugins with applyPluginsToChildSchemas (gh-13887)[0m
2025-04-09T19:14:13.0141042Z   [32m  [32mâœ”[39m[0m[90m global plugins recompile schemas (gh-7572)[0m
2025-04-09T19:14:13.0190821Z   [32m  [32mâœ”[39m[0m[90m top-level ObjectId, Decimal128, Mixed (gh-6760)[0m
2025-04-09T19:14:13.0449194Z   [32m  [32mâœ”[39m[0m[90m stubbing now() for timestamps (gh-6728)[0m
2025-04-09T19:14:13.0497255Z   [32m  [32mâœ”[39m[0m[90m isolates custom types between mongoose instances (gh-6933) (gh-7158)[0m
2025-04-09T19:14:13.0543757Z   [32m  [32mâœ”[39m[0m[90m throws an error on setting invalid options (gh-6899)[0m
2025-04-09T19:14:13.0592676Z   [32m  [32mâœ”[39m[0m[90m clones schema when instance of another Mongoose instance's Schema class (gh-11047)[0m
2025-04-09T19:14:13.0643479Z   [32m  [32mâœ”[39m[0m[90m deleteModel()[0m
2025-04-09T19:14:13.0689180Z   [32m  [32mâœ”[39m[0m[90m isValidObjectId (gh-3823)[0m
2025-04-09T19:14:13.0734253Z   [32m  [32mâœ”[39m[0m[90m isObjectIdOrHexString (gh-11419)[0m
2025-04-09T19:14:13.1040821Z   [32m  [32mâœ”[39m[0m[90m global `strictPopulate` works when false (gh-10694)[0m
2025-04-09T19:14:13.1185537Z   [32m  [32mâœ”[39m[0m[90m global `strictPopulate` works when true (gh-10694)[0m
2025-04-09T19:14:13.1327971Z   [32m  [32mâœ”[39m[0m[90m allows global `strictPopulate` to be overriden on specific queries set to true (gh-10694)[0m
2025-04-09T19:14:13.1454494Z   [32m  [32mâœ”[39m[0m[90m allows global `strictPopulate` to be overriden on specific queries set to false (gh-10694)[0m
2025-04-09T19:14:13.1475649Z [0m    default connection works[0m
2025-04-09T19:14:13.1549405Z     [32m  [32mâœ”[39m[0m[90m without options[0m
2025-04-09T19:14:13.1643793Z     [32m  [32mâœ”[39m[0m[90m with promise (gh-3790)[0m
2025-04-09T19:14:13.1687311Z [0m    disconnection of all connections[0m
2025-04-09T19:14:13.1761173Z     [32m  [32mâœ”[39m[0m[90m with callback[0m
2025-04-09T19:14:13.1855843Z     [32m  [32mâœ”[39m[0m[90m with promise (gh-3790)[0m
2025-04-09T19:14:13.1888113Z [0m      no callback[0m
2025-04-09T19:14:13.1987222Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:14:13.2051856Z [0m    model()[0m
2025-04-09T19:14:13.2097525Z     [32m  [32mâœ”[39m[0m[90m accessing a model that hasn't been defined[0m
2025-04-09T19:14:13.2170332Z     [32m  [32mâœ”[39m[0m[90m returns the model at creation[0m
2025-04-09T19:14:13.2239850Z     [32m  [32mâœ”[39m[0m[90m prevents overwriting pre-existing models[0m
2025-04-09T19:14:13.2307847Z     [32m  [32mâœ”[39m[0m[90m allows passing identical name + schema args[0m
2025-04-09T19:14:13.2376103Z     [32m  [32mâœ”[39m[0m[90m allows passing identical name+schema+collection args (gh-5767)[0m
2025-04-09T19:14:13.2441610Z     [32m  [32mâœ”[39m[0m[90m throws on unknown model name[0m
2025-04-09T19:14:13.2473913Z [0m      passing collection name[0m
2025-04-09T19:14:13.2484796Z [0m        when model name already exists[0m
2025-04-09T19:14:13.2554362Z         [32m  [32mâœ”[39m[0m[90m returns a new uncached model[0m
2025-04-09T19:14:13.2629673Z [0m      passing object literal schemas[0m
2025-04-09T19:14:13.2692338Z       [32m  [32mâœ”[39m[0m[90m works[0m
2025-04-09T19:14:13.2757308Z [0m    connecting with a signature of uri, options, function[0m
2025-04-09T19:14:13.2830091Z     [32m  [32mâœ”[39m[0m[90m with single mongod[0m
2025-04-09T19:14:13.2923524Z     [32m  [32mâœ”[39m[0m[90m with replica set[0m
2025-04-09T19:14:13.2966879Z [0m    exports[0m
2025-04-09T19:14:13.3011235Z     [32m  [32mâœ”[39m[0m[90m of module[0m
2025-04-09T19:14:13.3077096Z     [32m  [32mâœ”[39m[0m[90m of new Mongoose instances[0m
2025-04-09T19:14:13.3182277Z     [32m  [32mâœ”[39m[0m[90m of result from .connect() (gh-3940)[0m
2025-04-09T19:14:13.4281820Z     [32m  [32mâœ”[39m[0m[90m connect with url doesnt cause unhandled rejection (gh-6997)[0m[31m (103ms)[0m
2025-04-09T19:14:13.4538429Z     [32m  [32mâœ”[39m[0m[90m can set `setDefaultsOnInsert` as a global option (gh-9032)[0m
2025-04-09T19:14:13.4826523Z     [32m  [32mâœ”[39m[0m[90m setting `setDefaultOnInsert` on operation has priority over base option (gh-9032)[0m
2025-04-09T19:14:13.4891488Z     [32m  [32mâœ”[39m[0m[90m should prevent non-hexadecimal strings (gh-9996)[0m
2025-04-09T19:14:13.4957826Z     [32m  [32mâœ”[39m[0m[90m Allows a syncIndexes shorthand mongoose.syncIndexes (gh-10893)[0m
2025-04-09T19:14:13.5027542Z     [32m  [32mâœ”[39m[0m[90m Allows for the removal of indexes via string or object (gh-11547)[0m
2025-04-09T19:14:13.5060182Z [0m      global `allowDiskUse` (gh-11478)[0m
2025-04-09T19:14:13.5180548Z       [32m  [32mâœ”[39m[0m[90m is `undefined` by default[0m
2025-04-09T19:14:13.5365311Z       [32m  [32mâœ”[39m[0m[90m works when set to `true` and no option provided[0m
2025-04-09T19:14:13.5520452Z       [32m  [32mâœ”[39m[0m[90m can be overridden by a specific query[0m
2025-04-09T19:14:13.5574738Z [0m      global `timestamps.createdAt.immutable` (gh-10139)[0m
2025-04-09T19:14:13.5631294Z       [32m  [32mâœ”[39m[0m[90m is `true` by default[0m
2025-04-09T19:14:13.5720225Z       [32m  [32mâœ”[39m[0m[90m can be overridden to `false`[0m
2025-04-09T19:14:13.5785028Z [0m    global id option[0m
2025-04-09T19:14:13.6029644Z     [32m  [32mâœ”[39m[0m[90m can disable the id virtual on schemas gh-11966[0m
2025-04-09T19:14:13.6072283Z [0m    set()[0m
2025-04-09T19:14:13.6117409Z     [32m  [32mâœ”[39m[0m[90m should be able to set a option through set with (key, value)[0m
2025-04-09T19:14:13.6183272Z     [32m  [32mâœ”[39m[0m[90m should be able to set a option through a object with {key: value}[0m
2025-04-09T19:14:13.6249451Z     [32m  [32mâœ”[39m[0m[90m should throw a single error when using a invalid key[0m
2025-04-09T19:14:13.6316531Z     [32m  [32mâœ”[39m[0m[90m should throw a error with many errors when using multiple invalid keys[0m
2025-04-09T19:14:13.6383196Z     [32m  [32mâœ”[39m[0m[90m should apply all values, even if there are errors[0m
2025-04-09T19:14:13.6449295Z     [32m  [32mâœ”[39m[0m[90m should throw a single error when using a invalid key when getting[0m
2025-04-09T19:14:13.6492229Z [0m    createInitialConnection (gh-8302)[0m
2025-04-09T19:14:13.6537274Z     [32m  [32mâœ”[39m[0m[90m should delete existing connection when setting createInitialConnection to false[0m
2025-04-09T19:14:13.6603149Z     [32m  [32mâœ”[39m[0m[90m should create connection when createConnection is called[0m
2025-04-09T19:14:13.6687062Z     [32m  [32mâœ”[39m[0m[90m should create a new connection automatically when connect() is called if no existing default connection[0m
2025-04-09T19:14:13.6770011Z     [32m  [32mâœ”[39m[0m[90m should not delete default connection if it has models[0m
2025-04-09T19:14:13.6852920Z     [32m  [32mâœ”[39m[0m[90m should not delete default connection if it is connected[0m
2025-04-09T19:14:13.6929717Z 
2025-04-09T19:14:13.6930528Z [0m  versioning[0m
2025-04-09T19:14:13.6996795Z   [32m  [32mâœ”[39m[0m[90m is only added to parent schema (gh-1265)[0m
2025-04-09T19:14:13.7268856Z   [32m  [32mâœ”[39m[0m[90m versioning without version key[0m
2025-04-09T19:14:13.7508105Z   [32m  [32mâœ”[39m[0m[90m version works with strict docs[0m
2025-04-09T19:14:13.7682934Z   [32m  [32mâœ”[39m[0m[90m version works with existing unversioned docs[0m
2025-04-09T19:14:13.7906004Z   [32m  [32mâœ”[39m[0m[90m versionKey is configurable[0m
2025-04-09T19:14:13.8138514Z   [32m  [32mâœ”[39m[0m[90m can be disabled[0m
2025-04-09T19:14:13.8324826Z   [32m  [32mâœ”[39m[0m[90m works with numbericAlpha paths[0m
2025-04-09T19:14:13.8540342Z   [32m  [32mâœ”[39m[0m[90m allows concurrent push[0m
2025-04-09T19:14:13.8741823Z   [32m  [32mâœ”[39m[0m[90m allows concurrent push and pull[0m
2025-04-09T19:14:13.8967936Z   [32m  [32mâœ”[39m[0m[90m throws if you set a positional path after pulling[0m
2025-04-09T19:14:13.9244343Z   [32m  [32mâœ”[39m[0m[90m allows pull/push after $set[0m
2025-04-09T19:14:13.9442483Z   [32m  [32mâœ”[39m[0m[90m should add version to where clause[0m
2025-04-09T19:14:13.9635234Z   [32m  [32mâœ”[39m[0m[90m $set after pull/push throws[0m
2025-04-09T19:14:13.9859341Z   [32m  [32mâœ”[39m[0m[90m doesnt persist conflicting changes[0m
2025-04-09T19:14:14.0080099Z   [32m  [32mâœ”[39m[0m[90m increments version on push[0m
2025-04-09T19:14:14.0312496Z   [32m  [32mâœ”[39m[0m[90m does not increment version when setting nested paths[0m
2025-04-09T19:14:14.0494730Z   [32m  [32mâœ”[39m[0m[90m increments version when modifying mixed array[0m
2025-04-09T19:14:14.0735385Z   [32m  [32mâœ”[39m[0m[90m increments version when $set-ing an array[0m
2025-04-09T19:14:14.0939998Z   [32m  [32mâœ”[39m[0m[90m increments version and converts to $set when mixing $shift and $addToSet[0m
2025-04-09T19:14:14.1136980Z   [32m  [32mâœ”[39m[0m[90m should not increment version for non-versioned fields[0m
2025-04-09T19:14:14.1342359Z   [32m  [32mâœ”[39m[0m[90m should not increment version for non-versioned sub-document fields[0m
2025-04-09T19:14:14.1620534Z   [32m  [32mâœ”[39m[0m[90m should persist correctly when optimisticConcurrency is true gh-10128[0m
2025-04-09T19:14:14.1865009Z   [32m  [32mâœ”[39m[0m[90m throws VersionError when saving with no changes and optimistic concurrency is true (gh-11295)[0m
2025-04-09T19:14:14.2138977Z   [32m  [32mâœ”[39m[0m[90m should support optimisticConcurrency being an array of strings[0m
2025-04-09T19:14:14.2362746Z   [32m  [32mâœ”[39m[0m[90m gh-1898[0m
2025-04-09T19:14:14.2595507Z   [32m  [32mâœ”[39m[0m[90m can remove version key from toObject() (gh-2675)[0m
2025-04-09T19:14:14.2856058Z   [32m  [32mâœ”[39m[0m[90m pull doesnt add version where clause (gh-6190)[0m
2025-04-09T19:14:14.3104496Z   [32m  [32mâœ”[39m[0m[90m copying doc works (gh-5779)[0m
2025-04-09T19:14:14.3384676Z   [32m  [32mâœ”[39m[0m[90m optimistic concurrency (gh-9001) (gh-5424)[0m
2025-04-09T19:14:14.3712692Z   [32m  [32mâœ”[39m[0m[90m adds version to filter if pushing to a nested array (gh-11108)[0m
2025-04-09T19:14:14.3931023Z   [32m  [32mâœ”[39m[0m[90m can store version key in nested property (gh-10980)[0m
2025-04-09T19:14:14.3971337Z [0m    doc.increment()[0m
2025-04-09T19:14:14.4166059Z     [32m  [32mâœ”[39m[0m[90m works without any other changes (gh-1475)[0m
2025-04-09T19:14:14.4267835Z 
2025-04-09T19:14:14.4268274Z [0m  types.decimal128[0m
2025-04-09T19:14:14.4307082Z   [32m  [32mâœ”[39m[0m[90m casts from type number (gh-6331)[0m
2025-04-09T19:14:14.4355284Z   [32m  [32mâœ”[39m[0m[90m uses valueOf method if one exists (gh-6418)[0m
2025-04-09T19:14:14.4386876Z 
2025-04-09T19:14:14.4388424Z [0m  model[0m
2025-04-09T19:14:14.4710401Z   [32m  [32mâœ”[39m[0m[90m attempting to populate on base model a virtual path defined on discriminator does not throw an error (gh-8924)[0m
2025-04-09T19:14:14.4780291Z   [32m  [32mâœ”[39m[0m[90m accepts a POJO as a schema for discriminators (gh-8984)[0m
2025-04-09T19:14:14.4981470Z   [32m  [32mâœ”[39m[0m[90m removes paths underneath mixed type if discriminator schema sets path to mixed (gh-9042)[0m
2025-04-09T19:14:14.5205016Z   [32m  [32mâœ”[39m[0m[90m doesnt remove paths at the same level (gh-9362)[0m
2025-04-09T19:14:14.5406416Z   [32m  [32mâœ”[39m[0m[90m overwrites if discriminator schema sets a path to single nested but base schema sets to doc array (gh-9354)[0m
2025-04-09T19:14:14.5621709Z   [32m  [32mâœ”[39m[0m[90m can use compiled model schema as a discriminator (gh-9238)[0m
2025-04-09T19:14:14.6155418Z   [32m  [32mâœ”[39m[0m[90m embedded discriminator array of arrays (gh-9984)[0m
2025-04-09T19:14:14.6232654Z   [32m  [32mâœ”[39m[0m[90m recursive embedded discriminator using schematype (gh-9600)[0m
2025-04-09T19:14:14.6322232Z   [32m  [32mâœ”[39m[0m[90m takes discriminator schema's single nested over base schema's (gh-10157)[0m
2025-04-09T19:14:14.6719103Z   [32m  [32mâœ”[39m[0m[90m allows using array as tied value (gh-10303)[0m
2025-04-09T19:14:14.6909235Z   [32m  [32mâœ”[39m[0m[90m handles nested discriminators (gh-10702)[0m
2025-04-09T19:14:14.6983363Z   [32m  [32mâœ”[39m[0m[90m Should allow reusing discriminators (gh-10931)[0m
2025-04-09T19:14:14.7460361Z   [32m  [32mâœ”[39m[0m[90m handles updating multiple properties nested underneath a discriminator (gh-11428)[0m
2025-04-09T19:14:14.7750730Z   [32m  [32mâœ”[39m[0m[90m allows defining discriminator at the subSchema level in the subschema (gh-7971)[0m
2025-04-09T19:14:14.7938061Z   [32m  [32mâœ”[39m[0m[90m handles discriminators on maps of subdocuments (gh-11720)[0m
2025-04-09T19:14:14.8018566Z   [32m  [32mâœ”[39m[0m[90m supports `mergeHooks` option to use the discriminator schema's hooks over the base schema's (gh-12472)[0m
2025-04-09T19:14:14.8351713Z   [32m  [32mâœ”[39m[0m[90m supports `mergePlugins` option to use the discriminator schema's plugins over the base schema's (gh-12604)[0m
2025-04-09T19:14:14.8808866Z   [32m  [32mâœ”[39m[0m[90m applies built-in plugins if mergePlugins and mergeHooks disabled (gh-12696) (gh-12604)[0m
2025-04-09T19:14:14.8896251Z   [32m  [32mâœ”[39m[0m[90m should not throw an error when the user is not modifying anything involving discriminators gh-12135[0m
2025-04-09T19:14:14.9107152Z   [32m  [32mâœ”[39m[0m[90m should throw an error because of the different typeKeys gh-12135[0m
2025-04-09T19:14:14.9216140Z   [32m  [32mâœ”[39m[0m[90m handles customizable discriminator options gh-12135[0m
2025-04-09T19:14:14.9417065Z   [32m  [32mâœ”[39m[0m[90m uses "value" over "name" for multi-dimensonal arrays (gh-13201)[0m
2025-04-09T19:14:14.9485457Z   [32m  [32mâœ”[39m[0m[90m runs base schema paths validators and setters before child schema validators and setters (gh-13794)[0m
2025-04-09T19:14:14.9760783Z   [32m  [32mâœ”[39m[0m[90m should not fail when using a discriminator key multiple times (gh-13906)[0m
2025-04-09T19:14:15.0318165Z   [32m  [32mâœ”[39m[0m[90m correctly gathers subdocs with discriminators (gh-15088)[0m
2025-04-09T19:14:15.0539357Z   [32m  [32mâœ”[39m[0m[90m triggers save hooks on subdocuments (gh-15092)[0m
2025-04-09T19:14:15.0576853Z [0m    discriminator()[0m
2025-04-09T19:14:15.0647515Z     [32m  [32mâœ”[39m[0m[90m model defaults without discriminator[0m
2025-04-09T19:14:15.1036766Z     [32m  [32mâœ”[39m[0m[90m is instance of root[0m
2025-04-09T19:14:15.1127096Z     [32m  [32mâœ”[39m[0m[90m can define static and instance methods[0m
2025-04-09T19:14:15.1339871Z     [32m  [32mâœ”[39m[0m[90m can define virtuals and methods using schema options (gh-12246)[0m
2025-04-09T19:14:15.1542402Z     [32m  [32mâœ”[39m[0m[90m sets schema root discriminator mapping[0m
2025-04-09T19:14:15.1623332Z     [32m  [32mâœ”[39m[0m[90m sets schema discriminator type mapping[0m
2025-04-09T19:14:15.1704376Z     [32m  [32mâœ”[39m[0m[90m adds discriminatorKey to schema with default as name[0m
2025-04-09T19:14:15.1790151Z     [32m  [32mâœ”[39m[0m[90m adds discriminator to Model.discriminators object[0m
2025-04-09T19:14:15.1893922Z     [32m  [32mâœ”[39m[0m[90m throws error on invalid schema[0m
2025-04-09T19:14:15.1979563Z     [32m  [32mâœ”[39m[0m[90m throws error when attempting to nest discriminators[0m
2025-04-09T19:14:15.2063239Z     [32m  [32mâœ”[39m[0m[90m throws error when discriminator has mapped discriminator key in schema[0m
2025-04-09T19:14:15.2148221Z     [32m  [32mâœ”[39m[0m[90m throws error when discriminator has mapped discriminator key in schema with discriminatorKey option set[0m
2025-04-09T19:14:15.2313506Z     [32m  [32mâœ”[39m[0m[90m throws error when discriminator with taken name is added[0m
2025-04-09T19:14:15.2532121Z     [32m  [32mâœ”[39m[0m[90m throws error if model name is taken (gh-4148)[0m
2025-04-09T19:14:15.2695585Z     [32m  [32mâœ”[39m[0m[90m works with nested schemas (gh-2821)[0m
2025-04-09T19:14:15.3063363Z     [32m  [32mâœ”[39m[0m[90m embedded with single nested subdocs (gh-5244)[0m
2025-04-09T19:14:15.3392609Z     [32m  [32mâœ”[39m[0m[90m embedded with single nested subdocs and tied value (gh-8164) (gh-9108)[0m
2025-04-09T19:14:15.3754582Z     [32m  [32mâœ”[39m[0m[90m supports ObjectId as tied value (gh-10130)[0m
2025-04-09T19:14:15.3960136Z     [32m  [32mâœ”[39m[0m[90m Embedded discriminators in nested doc arrays (gh-6202)[0m
2025-04-09T19:14:15.4048537Z     [32m  [32mâœ”[39m[0m[90m throws an error if calling discriminator on non-doc array (gh-6202)[0m
2025-04-09T19:14:15.4171202Z     [32m  [32mâœ”[39m[0m[90m supports using a schema that was used for another discriminator (gh-7200)[0m
2025-04-09T19:14:15.4564854Z     [32m  [32mâœ”[39m[0m[90m should copy plugins[0m
2025-04-09T19:14:15.4613187Z [0m      options[0m
2025-04-09T19:14:15.4668648Z       [32m  [32mâœ”[39m[0m[90m allows toObject to be overridden[0m
2025-04-09T19:14:15.4769101Z       [32m  [32mâœ”[39m[0m[90m allows toJSON to be overridden[0m
2025-04-09T19:14:15.4862139Z       [32m  [32mâœ”[39m[0m[90m is not customizable[0m
2025-04-09T19:14:15.4929774Z [0m      root schema inheritance[0m
2025-04-09T19:14:15.4984798Z       [32m  [32mâœ”[39m[0m[90m inherits field mappings[0m
2025-04-09T19:14:15.5085212Z       [32m  [32mâœ”[39m[0m[90m inherits validators[0m
2025-04-09T19:14:15.5194362Z       [32m  [32mâœ”[39m[0m[90m does not inherit and override fields that exist[0m
2025-04-09T19:14:15.5318339Z       [32m  [32mâœ”[39m[0m[90m inherits methods[0m
2025-04-09T19:14:15.5418344Z       [32m  [32mâœ”[39m[0m[90m inherits statics[0m
2025-04-09T19:14:15.5520673Z       [32m  [32mâœ”[39m[0m[90m inherits virtual (g.s)etters[0m
2025-04-09T19:14:15.5621683Z       [32m  [32mâœ”[39m[0m[90m does not inherit indexes[0m
2025-04-09T19:14:15.5723999Z       [32m  [32mâœ”[39m[0m[90m gets options overridden by root options except toJSON and toObject[0m
2025-04-09T19:14:15.5829934Z       [32m  [32mâœ”[39m[0m[90m does not allow setting discriminator key (gh-2041)[0m
2025-04-09T19:14:15.5943143Z       [32m  [32mâœ”[39m[0m[90m deduplicates hooks (gh-2945)[0m
2025-04-09T19:14:15.6176411Z       [32m  [32mâœ”[39m[0m[90m with typeKey (gh-4339)[0m
2025-04-09T19:14:15.6403792Z       [32m  [32mâœ”[39m[0m[90m embedded discriminators with array defaults (gh-7687)[0m
2025-04-09T19:14:15.6660092Z       [32m  [32mâœ”[39m[0m[90m embedded discriminators with create() (gh-5001)[0m
2025-04-09T19:14:15.6885478Z       [32m  [32mâœ”[39m[0m[90m embedded discriminator with numeric type (gh-7808)[0m
2025-04-09T19:14:15.7158908Z       [32m  [32mâœ”[39m[0m[90m supports clone() (gh-4983)[0m
2025-04-09T19:14:15.7275656Z       [32m  [32mâœ”[39m[0m[90m clone() allows reusing schemas (gh-5098)[0m
2025-04-09T19:14:15.7645263Z       [32m  [32mâœ”[39m[0m[90m clone() does not modify original schema `obj` (gh-14821)[0m
2025-04-09T19:14:15.7916816Z       [32m  [32mâœ”[39m[0m[90m clone() allows reusing with different models (gh-5721)[0m
2025-04-09T19:14:15.8314806Z       [32m  [32mâœ”[39m[0m[90m incorrect discriminator key throws readable error with create (gh-6434)[0m
2025-04-09T19:14:15.8557661Z       [32m  [32mâœ”[39m[0m[90m copies query hooks (gh-5147)[0m
2025-04-09T19:14:15.8775491Z       [32m  [32mâœ”[39m[0m[90m reusing schema for discriminators (gh-5684)[0m
2025-04-09T19:14:15.8959036Z       [32m  [32mâœ”[39m[0m[90m overwrites nested paths in parent schema (gh-6076)[0m
2025-04-09T19:14:15.9296533Z       [32m  [32mâœ”[39m[0m[90m nested discriminator key with projecting in parent (gh-5775)[0m
2025-04-09T19:14:15.9604140Z       [32m  [32mâœ”[39m[0m[90m with $meta projection (gh-5859)[0m
2025-04-09T19:14:15.9846350Z       [32m  [32mâœ”[39m[0m[90m embedded discriminators with $push (gh-5009)[0m
2025-04-09T19:14:16.0094231Z       [32m  [32mâœ”[39m[0m[90m embedded discriminators with $push + $each (gh-5070)[0m
2025-04-09T19:14:16.0336875Z       [32m  [32mâœ”[39m[0m[90m embedded discriminators with $set (gh-5130)[0m
2025-04-09T19:14:16.0578585Z       [32m  [32mâœ”[39m[0m[90m embedded in document arrays (gh-2723)[0m
2025-04-09T19:14:16.0639552Z [0m        applyPluginsToDiscriminators[0m
2025-04-09T19:14:16.0715270Z         [32m  [32mâœ”[39m[0m[90m works (gh-4965)[0m
2025-04-09T19:14:16.0848726Z         [32m  [32mâœ”[39m[0m[90m works with customized options (gh-7458)[0m
2025-04-09T19:14:16.0939691Z [0m      embedded discriminators + hooks (gh-5706)[0m
2025-04-09T19:14:16.1116172Z       [32m  [32mâœ”[39m[0m[90m should call the hooks on the embedded document defined by both the parent and discriminated schemas[0m
2025-04-09T19:14:16.1327837Z       [32m  [32mâœ”[39m[0m[90m should call the hooks on the embedded document in an embedded array defined by both the parent and discriminated schemas[0m
2025-04-09T19:14:16.1410018Z [0m    bug fixes[0m
2025-04-09T19:14:16.1461664Z     [32m  [32mâœ”[39m[0m[90m discriminators with classes modifies class in place (gh-5175)[0m
2025-04-09T19:14:16.1545501Z     [32m  [32mâœ”[39m[0m[90m allows overwriting base class methods (gh-5227)[0m
2025-04-09T19:14:16.1636141Z     [32m  [32mâœ”[39m[0m[90m supports adding properties (gh-5104) (gh-5635)[0m
2025-04-09T19:14:16.1724589Z     [32m  [32mâœ”[39m[0m[90m with subclassing (gh-7547)[0m
2025-04-09T19:14:16.1814052Z     [32m  [32mâœ”[39m[0m[90m uses correct discriminator when using `new BaseModel` (gh-7586)[0m
2025-04-09T19:14:16.1902922Z     [32m  [32mâœ”[39m[0m[90m uses correct discriminator when using `new BaseModel` with value (gh-7851)[0m
2025-04-09T19:14:16.2126679Z     [32m  [32mâœ”[39m[0m[90m allows setting custom discriminator key in schema (gh-7807)[0m
2025-04-09T19:14:16.2450816Z     [32m  [32mâœ”[39m[0m[90m does not project in embedded discriminator key if it is the only selected field (gh-7574)[0m
2025-04-09T19:14:16.2604350Z     [32m  [32mâœ”[39m[0m[90m merges schemas instead of overwriting (gh-7884)[0m
2025-04-09T19:14:16.2845686Z     [32m  [32mâœ”[39m[0m[90m _id: false in discriminator nested schema (gh-8274)[0m
2025-04-09T19:14:16.2978318Z     [32m  [32mâœ”[39m[0m[90m with discriminators in embedded arrays (gh-8273)[0m
2025-04-09T19:14:16.3096675Z [0m    Discriminator Key test[0m
2025-04-09T19:14:16.3368194Z     [32m  [32mâœ”[39m[0m[90m gh-9015[0m
2025-04-09T19:14:16.3465532Z 
2025-04-09T19:14:16.3466074Z [0m  schema.onthefly[0m
2025-04-09T19:14:16.3514571Z   [32m  [32mâœ”[39m[0m[90m setting should cache the schema type and cast values appropriately[0m
2025-04-09T19:14:16.3624603Z   [32m  [32mâœ”[39m[0m[90m should be local to the particular document[0m
2025-04-09T19:14:16.3851921Z   [32m  [32mâœ”[39m[0m[90m querying a document that had an on the fly schema should work[0m
2025-04-09T19:14:16.3922746Z   [32m  [32mâœ”[39m[0m[90m on the fly Embedded Array schemas should cast properly[0m
2025-04-09T19:14:16.4144089Z   [32m  [32mâœ”[39m[0m[90m on the fly Embedded Array schemas should get from a fresh queried document properly[0m
2025-04-09T19:14:16.4208567Z   [32m  [32mâœ”[39m[0m[90m casts on get() (gh-2360)[0m
2025-04-09T19:14:16.4323690Z 
2025-04-09T19:14:16.4325046Z [0m  model[0m
2025-04-09T19:14:16.4336737Z [0m    discriminator()[0m
2025-04-09T19:14:16.4359799Z [0m      pushing discriminated objects[0m
2025-04-09T19:14:16.5261728Z       [32m  [32mâœ”[39m[0m[90m into non-discriminated arrays works[0m[31m (81ms)[0m
2025-04-09T19:14:16.5339599Z [0m      find[0m
2025-04-09T19:14:16.5700142Z       [32m  [32mâœ”[39m[0m[90m hydrates correct models[0m
2025-04-09T19:14:16.6064503Z       [32m  [32mâœ”[39m[0m[90m hydrates correct models when fields selection set as string[0m
2025-04-09T19:14:16.6435229Z       [32m  [32mâœ”[39m[0m[90m hydrates correct models when fields selection set as object[0m
2025-04-09T19:14:16.6909391Z       [32m  [32mâœ”[39m[0m[90m casts underneath $or if discriminator key in filter (gh-9018)[0m
2025-04-09T19:14:16.7260639Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds documents of its type when fields selection set as string inclusive[0m
2025-04-09T19:14:16.7631622Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds documents of its type when fields selection set as string exclusive[0m
2025-04-09T19:14:16.7990323Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds documents of its type when fields selection set as empty string[0m
2025-04-09T19:14:16.8340841Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds documents of its type when fields selection set as object inclusive[0m
2025-04-09T19:14:16.8690371Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds documents of its type when fields selection set as object exclusive[0m
2025-04-09T19:14:16.9052169Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds documents of its type when fields selection set as empty object[0m
2025-04-09T19:14:16.9112223Z [0m        discriminator model only finds documents of its type[0m
2025-04-09T19:14:16.9122994Z [0m          using "ModelDiscriminator#findById"[0m
2025-04-09T19:14:16.9436158Z           [32m  [32mâœ”[39m[0m[90m to find a document of the appropriate discriminator[0m
2025-04-09T19:14:16.9528530Z [0m          using "ModelDiscriminator#find"[0m
2025-04-09T19:14:16.9856273Z           [32m  [32mâœ”[39m[0m[90m to find documents of the appropriate discriminator[0m
2025-04-09T19:14:16.9979284Z [0m      findOne[0m
2025-04-09T19:14:17.0290826Z       [32m  [32mâœ”[39m[0m[90m when selecting `select: false` field (gh-4629) (gh-11546)[0m
2025-04-09T19:14:17.0732682Z       [32m  [32mâœ”[39m[0m[90m select: false in base schema (gh-5448)[0m
2025-04-09T19:14:17.1095140Z       [32m  [32mâœ”[39m[0m[90m hydrates correct model[0m
2025-04-09T19:14:17.1501995Z       [32m  [32mâœ”[39m[0m[90m hydrates correct model when fields selection set as string inclusive[0m
2025-04-09T19:14:17.1859939Z       [32m  [32mâœ”[39m[0m[90m hydrates correct model when fields selection set as string exclusive[0m
2025-04-09T19:14:17.2212494Z       [32m  [32mâœ”[39m[0m[90m hydrates correct model when fields selection set as empty string[0m
2025-04-09T19:14:17.2643109Z       [32m  [32mâœ”[39m[0m[90m hydrates correct model when fields selection set as object inclusive[0m
2025-04-09T19:14:17.3001069Z       [32m  [32mâœ”[39m[0m[90m hydrates correct model when fields selection set as object exclusive[0m
2025-04-09T19:14:17.3369934Z       [32m  [32mâœ”[39m[0m[90m hydrates correct model when fields selection set as empty object[0m
2025-04-09T19:14:17.3768664Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds a document of its type[0m
2025-04-09T19:14:17.4115137Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds a document of its type when fields selection set as string inclusive[0m
2025-04-09T19:14:17.4496719Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds a document of its type when fields selection set as string exclusive[0m
2025-04-09T19:14:17.4878979Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds a document of its type when fields selection set as empty string[0m
2025-04-09T19:14:17.5232023Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds a document of its type when fields selection set as object inclusive[0m
2025-04-09T19:14:17.5580836Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds a document of its type when fields selection set as object exclusive[0m
2025-04-09T19:14:17.5916180Z       [32m  [32mâœ”[39m[0m[90m discriminator model only finds a document of its type when fields selection set as empty object[0m
2025-04-09T19:14:17.5987301Z [0m      findOneAndUpdate[0m
2025-04-09T19:14:17.6320351Z       [32m  [32mâœ”[39m[0m[90m does not update models of other types[0m
2025-04-09T19:14:17.6655721Z       [32m  [32mâœ”[39m[0m[90m updates models of its own type[0m
2025-04-09T19:14:17.7025300Z       [32m  [32mâœ”[39m[0m[90m base model modifies any event type[0m
2025-04-09T19:14:17.7095858Z [0m      population/reference mapping[0m
2025-04-09T19:14:17.7602485Z       [32m  [32mâœ”[39m[0m[90m populates and hydrates correct models[0m[33m (44ms)[0m
2025-04-09T19:14:17.8159930Z       [32m  [32mâœ”[39m[0m[90m reference in child schemas (gh-2719)[0m[33m (43ms)[0m
2025-04-09T19:14:17.8644525Z       [32m  [32mâœ”[39m[0m[90m populates parent array reference (gh-4643)[0m
2025-04-09T19:14:17.9042468Z       [32m  [32mâœ”[39m[0m[90m updating discriminator key (gh-5613)[0m
2025-04-09T19:14:17.9474221Z       [32m  [32mâœ”[39m[0m[90m disallows updating discriminator key using `$unset` (gh-11456)[0m
2025-04-09T19:14:17.9909068Z       [32m  [32mâœ”[39m[0m[90m allows updating discriminator key using `overwriteDiscriminatorKey` with `strict: throw` (gh-12513)[0m
2025-04-09T19:14:18.0412413Z       [32m  [32mâœ”[39m[0m[90m allows updating document where discriminator key is present in payload but have the same value (13055)[0m
2025-04-09T19:14:18.0935567Z       [32m  [32mâœ”[39m[0m[90m reference in child schemas (gh-2719-2)[0m[33m (41ms)[0m
2025-04-09T19:14:18.1522143Z       [32m  [32mâœ”[39m[0m[90m correctly populates doc with nonexistent discriminator key (gh-10082)[0m[33m (47ms)[0m
2025-04-09T19:14:18.1595709Z [0m      deleteOne and deleteMany (gh-8471)[0m
2025-04-09T19:14:18.2058059Z       [32m  [32mâœ”[39m[0m[90m adds discriminator filter if no conditions passed[0m[33m (39ms)[0m
2025-04-09T19:14:18.2130770Z [0m      aggregate[0m
2025-04-09T19:14:18.2141586Z [0m        using "RootModel#aggregate"[0m
2025-04-09T19:14:18.2537130Z         [32m  [32mâœ”[39m[0m[90m to aggregate documents of all discriminators[0m
2025-04-09T19:14:18.2636768Z [0m        using "ModelDiscriminator#aggregate"[0m
2025-04-09T19:14:18.3013317Z         [32m  [32mâœ”[39m[0m[90m only aggregates documents of the appropriate discriminator[0m
2025-04-09T19:14:18.3680851Z         [32m  [32mâœ”[39m[0m[90m hides fields when discriminated model has select (gh-4991)[0m
2025-04-09T19:14:18.4295925Z         [32m  [32mâœ”[39m[0m[90m doesnt exclude field if slice (gh-4991)[0m
2025-04-09T19:14:18.4754509Z         [32m  [32mâœ”[39m[0m[90m merges the first pipeline stages if applicable[0m
2025-04-09T19:14:18.4894061Z 
2025-04-09T19:14:18.5165849Z 
2025-04-09T19:14:18.5167234Z [92m [0m[32m 3796 passing[0m[90m (1m)[0m
2025-04-09T19:14:18.5167755Z [36m [0m[36m 59 pending[0m
2025-04-09T19:14:18.5167951Z 
