Requested labels: ubuntu-latest
Job defined at: django/django/.github/workflows/linters.yml@refs/pull/19063/merge
Waiting for a runner to pick up this job...
Job is waiting for a hosted runner to come online.
Job is about to start running on the hosted runner: GitHub Actions 8 (hosted)
Current runner version: '2.323.0'
##[group]Operating System
Ubuntu
24.04.2
LTS
##[endgroup]
##[group]Runner Image
Image: ubuntu-24.04
Version: 20250406.1.0
Included Software: https://github.com/actions/runner-images/blob/ubuntu24/20250406.1/images/ubuntu/Ubuntu2404-Readme.md
Image Release: https://github.com/actions/runner-images/releases/tag/ubuntu24%2F20250406.1
##[endgroup]
##[group]Runner Image Provisioner
2.0.422.1
##[endgroup]
##[group]GITHUB_TOKEN Permissions
Contents: <:*:>
Metadata: read
##[endgroup]
Secret source: <:*:>
Prepare workflow directory
Prepare all required actions
Getting action download info
##[group]Download immutable action package <:*:>
Version: 4.2.2
Digest: sha256:<:SEQ:>
Source commit SHA: <:SEQ:>
##[endgroup]
Download action repository <:*:> (SHA:<:SEQ:>)
Complete job name: <:*:>
##[group]Run <:*:>
with:
repository: <:*:>
token: ***
ssh-strict: true
ssh-user: git
persist-credentials: <:*:>
clean: true
sparse-checkout-cone-mode: true
fetch-depth: <:NUM:>
fetch-tags: false
show-progress: true
lfs: false
submodules: <:*:>
set-safe-directory: true
##[endgroup]
Syncing repository: <:*:>
##[group]Getting Git version info
Working directory is <:*:>
[command]/usr/bin/git version
git version <:NUM:>.<:NUM:>.<:NUM:>
##[endgroup]
Temporarily overriding HOME='/home/runner/work/_temp/fc977f5e-df7c-4a1e-9bff-769c834a29fb' before making global git config changes
Adding repository directory to the temporary git global config as a safe directory
[command]/usr/bin/git config --global --add safe.directory /home/runner/work/django/django
Deleting the contents of <:*:>
##[group]Initializing the repository
[command]/usr/bin/git init <:*:>
hint: Using 'master' as the name for the initial branch. This default branch name
hint: is subject to change. To configure the initial branch name to use in all
hint: of your new repositories, which will suppress this warning, call:
hint:
hint: git config --global init.defaultBranch <name>
hint:
hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
hint: 'development'. The just-created branch can be renamed via this command:
hint:
hint: git branch -m <name>
Initialized empty Git repository in <:*:>
[command]/usr/bin/git remote add origin <:*:>
##[endgroup]
##[group]Disabling automatic garbage collection
[command]/usr/bin/git config --local gc.auto 0
##[endgroup]
##[group]Setting up auth
[command]/usr/bin/git config --local --name-only --get-regexp <:*:>
[command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp <:*:> && git config --local --unset-all <:*:> || :"
[command]/usr/bin/git config --local --name-only --get-regexp <:*:>
[command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp <:*:> && git config --local --unset-all <:*:> || :"
[command]/usr/bin/git config <:*:> http.https://github.com/.extraheader AUTHORIZATION: basic ***
##[endgroup]
##[group]Fetching the repository
[command]/usr/bin/git -c protocol.version=<:NUM:> fetch <:*:> <:*:> <:*:> <:*:> <:*:> <:*:>
From <:*:>
* [new ref] <:SEQ:>-> <:*:>
##[endgroup]
##[group]Determining the checkout info
##[endgroup]
[command]/usr/bin/git sparse-checkout disable
[command]/usr/bin/git config --local --unset-all extensions.worktreeConfig
##[group]Checking out the ref
[command]/usr/bin/git checkout --progress --force refs/remotes/pull/<:NUM:>/merge
Note: switching to 'refs/remotes/pull/<:NUM:>/merge'.
2025-04-15T07:59:05.6212452Z
You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.
2025-04-15T07:59:05.6218195Z
If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:
2025-04-15T07:59:05.6220512Z
git switch -c <new-branch-name>
2025-04-15T07:59:05.6221188Z
Or undo this operation with:
2025-04-15T07:59:05.6221860Z
git switch -
2025-04-15T07:59:05.6222443Z
Turn off this advice by setting config variable advice.detachedHead to false
2025-04-15T07:59:05.6223616Z
HEAD is now at <:*:> Merge <:SEQ:> into <:SEQ:>
##[endgroup]
[command]/usr/bin/git log <:NUM:> <:*:>
<:SEQ:>
##[group]Run <:*:>
with:
options: --check --diff
src: .
<:*:> false
use_pyproject: false
<:*:> true
##[endgroup]
##[group]Run # Even when black fails, do not close the shell
[36;1m# Even when black fails, do not close the shell[0m
[36;1mset +e[0m
[36;1m[0m
[36;1mif [ "$RUNNER_OS" == "Windows" ]; then[0m
[36;1m  runner="python"[0m
[<:NUM:>;1melse[0m
[36;1m  runner="python3"[0m
[<:NUM:>;1mfi[0m
[36;1m[0m
[36;1mout=$(${runner} $GITHUB_ACTION_PATH/action/main.py)[0m
[36;1mexit_code=$?[0m
[36;1m[0m
[36;1m# Display the raw output in the step[0m
[<:NUM:>;1mecho <:*:>
[36;1m[0m
[36;1mif [ "true" == "true" ]; then[0m
[36;1m  # Display the Markdown output in the job summary[0m
[36;1m  echo "\`\`\`python" >> $GITHUB_STEP_SUMMARY[0m
[36;1m  echo "${out}" >> $GITHUB_STEP_SUMMARY[0m
[36;1m  echo "\`\`\`" >> $GITHUB_STEP_SUMMARY[0m
[<:NUM:>;1mfi[0m
[36;1m[0m
[36;1m# Exit with the exit-code returned by Black[0m
[36;1mexit ${exit_code}[0m
shell: /usr/bin/bash --noprofile --norc -e -o pipefail {<:NUM:>}
env:
INPUT_OPTIONS: --check --diff
INPUT_SRC: .
INPUT_JUPYTER: false
INPUT_BLACK_ARGS:
INPUT_VERSION:
INPUT_USE_PYPROJECT: false
pythonioencoding: utf-8
##[endgroup]
Installing black[colorama]==25.1.0...
--- /home/runner/work/django/django/tests/auth_tests/test_forms.py	2025-04-15 07:59:05.493516+00:00
+++ /home/runner/work/django/django/tests/auth_tests/test_forms.py	2025-04-15 07:59:28.788445+00:00
@@ -1453,11 +1453,11 @@
hashed_html = "<p><strong>No password set.</p>"
self.assertHTMLEqual(render_password_as_hash(None), hashed_html)
self.assertHTMLEqual(
widget.render("name", None, {}),
f'<div>{hashed_html}<p><a role="button" class="button" href="../password/">'
-            'Set password</a></p></div>',
+            "Set password</a></p></div>",
)
2025-04-15T07:59:48.0985029Z
@override_settings(
PASSWORD_HASHERS=["django.contrib.auth.hashers.PBKDF2PasswordHasher"]
)
@@ -1470,11 +1470,11 @@
)
self.assertHTMLEqual(render_password_as_hash(value), hashed_html)
self.assertHTMLEqual(
widget.render("name", value, {}),
f'<div>{hashed_html}<p><a role="button" class="button" href="../password/">'
-            'Reset password</a></p></div>',
+            "Reset password</a></p></div>",
)
2025-04-15T07:59:48.0989710Z
def test_readonly_field_has_changed(self):
field = ReadOnlyPasswordHashField()
self.assertIs(field.disabled, True)
would reformat /home/runner/work/django/django/tests/auth_tests/test_forms.py
--- /home/runner/work/django/django/tests/auth_tests/test_views.py	2025-04-15 07:59:05.494516+00:00
+++ /home/runner/work/django/django/tests/auth_tests/test_views.py	2025-04-15 07:59:29.649205+00:00
@@ -1715,11 +1715,12 @@
hash_string[:6],
),
html=True,
)
self.assertNotContains(
-            response, '<a role="button" class="button" href="../password/">Reset password</a>'
+            response,
+            '<a role="button" class="button" href="../password/">Reset password</a>',
)
# Value in POST data is ignored.
data = self.get_user_data(u)
data["password"] = "shouldnotchange"
change_url = reverse("auth_test_admin:auth_user_change", args=(u.pk,))
would reformat /home/runner/work/django/django/tests/auth_tests/test_views.py
2025-04-15T07:59:48.0996750Z
Oh no! ðŸ’¥ ðŸ’” ðŸ’¥
2 files would be reformatted, 2830 files would be left unchanged.
##[error]Process completed with exit code 1.
Post job cleanup.
[command]/usr/bin/git version
git version <:NUM:>.<:NUM:>.<:NUM:>
Temporarily overriding HOME='/home/runner/work/_temp/ee9adab5-ee57-430c-a276-4646f0a57577' before making global git config changes
Adding repository directory to the temporary git global config as a safe directory
[command]/usr/bin/git config --global --add safe.directory /home/runner/work/django/django
[command]/usr/bin/git config --local --name-only --get-regexp <:*:>
[command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp <:*:> && git config --local --unset-all <:*:> || :"
[command]/usr/bin/git config --local --name-only --get-regexp <:*:>
http.https://github.com/.extraheader
[command]/usr/bin/git config --local --unset-all http.https://github.com/.extraheader
[command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp <:*:> && git config --local --unset-all <:*:> || :"
Cleaning up orphan processes
