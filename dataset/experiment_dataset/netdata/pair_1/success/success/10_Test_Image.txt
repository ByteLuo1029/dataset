2025-04-15T08:06:47.2618357Z ##[group]Run .github/scripts/docker-test.sh
2025-04-15T08:06:47.2618735Z [36;1m.github/scripts/docker-test.sh[0m
2025-04-15T08:06:47.2720486Z shell: /usr/bin/bash -e {0}
2025-04-15T08:06:47.2720741Z env:
2025-04-15T08:06:47.2720919Z   DISABLE_TELEMETRY: 1
2025-04-15T08:06:47.2721125Z   NIGHTLY_COUNT: 4
2025-04-15T08:06:47.2721311Z ##[endgroup]
2025-04-15T08:06:47.2837655Z ##[group]Netdata buildinfo
2025-04-15T08:06:47.5090159Z time=2025-04-15T08:06:47.508Z comm=netdata source=daemon level=notice errno="2, No such file or directory" tid=1  msg="CONFIG: cannot load user config '/etc/netdata/stream.conf'. Will try stock config."
2025-04-15T08:06:47.6804441Z Packaging:
2025-04-15T08:06:47.6805015Z     Netdata Version ____________________________________________ : v2.4.0-4-nightly
2025-04-15T08:06:47.6805745Z     Installation Type __________________________________________ : oci
2025-04-15T08:06:47.6806551Z     Package Architecture _______________________________________ : x86_64
2025-04-15T08:06:47.6807229Z     Package Distro _____________________________________________ : unknown
2025-04-15T08:06:47.6813442Z     Configure Options __________________________________________ : cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_C_STANDARD=11 -DCMAKE_CXX_STANDARD=14 -DBUILD_SHARED_LIBS= -DCMAKE_C_FLAGS='-ffunction-sections -fdata-sections -O2 -funroll-loops -pipe -fexceptions -fstack-protector-strong -D_FORTIFY_SOURCE=3 -fstack-clash-protection -fcf-protection=full -Wno-builtin-macro-redefined -fexceptions -fno-omit-frame-pointer -funwind-tables -fasynchronous-unwind-tables' -DCMAKE_CXX_FLAGS=' -ffunction-sections -fdata-sections -O2 -funroll-loops -pipe -fexceptions -fstack-protector-strong -D_FORTIFY_SOURCE=3 -fstack-clash-protection -fcf-protection=full -Wno-builtin-macro-redefined -fexceptions -fno-omit-frame-pointer -funwind-tables -fasynchronous-unwind-tables' -DCMAKE_COMPILE_DEFINITIONS='_GNU_SOURCE' -DCMAKE_EXE_LINKER_FLAGS='-Wl,--gc-sections -fexceptions -fstack-protector-strong -D_FORTIFY_SOURCE=3 -fstack-clash-protection -fcf-protection=full -Wno-builtin-macro-redefined -fexceptions -rdynamic' -DCMAKE_SHARED_LINKER_FLAGS='-Wl,--gc-sections'
2025-04-15T08:06:47.6819086Z Default Directories:
2025-04-15T08:06:47.6819383Z     User Configurations ________________________________________ : /etc/netdata
2025-04-15T08:06:47.6819819Z     Stock Configurations _______________________________________ : /usr/lib/netdata/conf.d
2025-04-15T08:06:47.6820281Z     Ephemeral Databases (metrics data, metadata) _______________ : /var/cache/netdata
2025-04-15T08:06:47.6820729Z     Permanent Databases ________________________________________ : /var/lib/netdata
2025-04-15T08:06:47.6821175Z     Plugins ____________________________________________________ : /usr/libexec/netdata/plugins.d
2025-04-15T08:06:47.6821599Z     Static Web Files ___________________________________________ : /usr/share/netdata/web
2025-04-15T08:06:47.6821989Z     Log Files __________________________________________________ : /var/log/netdata
2025-04-15T08:06:47.6822370Z     Lock Files _________________________________________________ : /var/lib/netdata/lock
2025-04-15T08:06:47.6822737Z     Home _______________________________________________________ : /var/lib/netdata
2025-04-15T08:06:47.6823026Z Operating System:
2025-04-15T08:06:47.6823264Z     Kernel _____________________________________________________ : Linux
2025-04-15T08:06:47.6823629Z     Kernel Version _____________________________________________ : 6.8.0-1025-azure
2025-04-15T08:06:47.6824011Z     Operating System ___________________________________________ : unknown
2025-04-15T08:06:47.6824375Z     Operating System ID ________________________________________ : unknown
2025-04-15T08:06:47.6824740Z     Operating System ID Like ___________________________________ : unknown
2025-04-15T08:06:47.6825218Z     Operating System Version ___________________________________ : unknown
2025-04-15T08:06:47.6825593Z     Operating System Version ID ________________________________ : 12
2025-04-15T08:06:47.6825949Z     Detection __________________________________________________ : unknown
2025-04-15T08:06:47.6826754Z Hardware:
2025-04-15T08:06:47.6826983Z     CPU Cores __________________________________________________ : 4
2025-04-15T08:06:47.6827329Z     CPU Frequency ______________________________________________ : 3267000000
2025-04-15T08:06:47.6827673Z     RAM Bytes __________________________________________________ : 16766754816
2025-04-15T08:06:47.6828020Z     Disk Capacity ______________________________________________ : 161061273600
2025-04-15T08:06:47.6828385Z     CPU Architecture ___________________________________________ : x86_64
2025-04-15T08:06:47.6828772Z     Virtualization Technology __________________________________ : microsoft
2025-04-15T08:06:47.6829173Z     Virtualization Detection ___________________________________ : lscpu
2025-04-15T08:06:47.6829491Z Container:
2025-04-15T08:06:47.6829716Z     Container __________________________________________________ : docker
2025-04-15T08:06:47.6830078Z     Container Detection ________________________________________ : dockerenv
2025-04-15T08:06:47.6830467Z     Container Orchestrator _____________________________________ : none
2025-04-15T08:06:47.6830870Z     Container Operating System _________________________________ : Debian GNU/Linux
2025-04-15T08:06:47.6831278Z     Container Operating System ID ______________________________ : debian
2025-04-15T08:06:47.6831669Z     Container Operating System ID Like _________________________ : unknown
2025-04-15T08:06:47.6832079Z     Container Operating System Version _________________________ : 12 (bookworm)
2025-04-15T08:06:47.6832485Z     Container Operating System Version ID ______________________ : 12
2025-04-15T08:06:47.6832905Z     Container Operating System Detection _______________________ : /etc/os-release
2025-04-15T08:06:47.6833374Z Features:
2025-04-15T08:06:47.6833587Z     Built For __________________________________________________ : Linux
2025-04-15T08:06:47.6833955Z     Netdata Cloud ______________________________________________ : YES
2025-04-15T08:06:47.6835105Z     Health (trigger alerts and send notifications) _____________ : YES
2025-04-15T08:06:47.6835798Z     Streaming (stream metrics to parent Netdata servers) _______ : YES
2025-04-15T08:06:47.6836651Z     Back-filling (of higher database tiers) ____________________ : YES
2025-04-15T08:06:47.6837292Z     Replication (fill the gaps of parent Netdata servers) ______ : YES
2025-04-15T08:06:47.6838003Z     Streaming and Replication Compression ______________________ : YES (zstd lz4 gzip)
2025-04-15T08:06:47.6838567Z     Contexts (index all active and archived metrics) ___________ : YES
2025-04-15T08:06:47.6838962Z     Tiering (multiple dbs with different metrics resolution) ___ : YES (5)
2025-04-15T08:06:47.6839451Z     Machine Learning ___________________________________________ : YES
2025-04-15T08:06:47.6839818Z     Memory Allocator ___________________________________________ : system
2025-04-15T08:06:47.6840217Z Database Engines:
2025-04-15T08:06:47.6840485Z     dbengine (compression) _____________________________________ : YES (zstd lz4)
2025-04-15T08:06:47.6840953Z     alloc ______________________________________________________ : YES
2025-04-15T08:06:47.6841259Z     ram ________________________________________________________ : YES
2025-04-15T08:06:47.6841588Z     none _______________________________________________________ : YES
2025-04-15T08:06:47.6842030Z Connectivity Capabilities:
2025-04-15T08:06:47.6842317Z     ACLK (Agent-Cloud Link: MQTT over WebSockets over TLS) _____ : YES
2025-04-15T08:06:47.6842908Z     static (Netdata internal web server) _______________________ : YES
2025-04-15T08:06:47.6843358Z     h2o (web server) ___________________________________________ : NO
2025-04-15T08:06:47.6843721Z     WebRTC (experimental) ______________________________________ : NO
2025-04-15T08:06:47.6844184Z     Native HTTPS (TLS Support) _________________________________ : YES
2025-04-15T08:06:47.6844539Z     TLS Host Verification ______________________________________ : YES
2025-04-15T08:06:47.6845143Z Libraries:
2025-04-15T08:06:47.6845387Z     LZ4 (extremely fast lossless compression algorithm) ________ : YES
2025-04-15T08:06:47.6845870Z     ZSTD (fast, lossless compression algorithm) ________________ : YES
2025-04-15T08:06:47.6846500Z     zlib (lossless data-compression library) ___________________ : YES
2025-04-15T08:06:47.6846908Z     Brotli (generic-purpose lossless compression algorithm) ____ : NO
2025-04-15T08:06:47.6847490Z     protobuf (platform-neutral data serialization protocol) ____ : YES (system)
2025-04-15T08:06:47.6848005Z     OpenSSL (cryptography) _____________________________________ : YES
2025-04-15T08:06:47.6848391Z     libdatachannel (stand-alone WebRTC data channels) __________ : NO
2025-04-15T08:06:47.6848884Z     JSON-C (lightweight JSON manipulation) _____________________ : YES
2025-04-15T08:06:47.6849270Z     libcap (Linux capabilities system operations) ______________ : NO
2025-04-15T08:06:47.6849766Z     libcrypto (cryptographic functions) ________________________ : YES
2025-04-15T08:06:47.6850149Z     libyaml (library for parsing and emitting YAML) ____________ : YES
2025-04-15T08:06:47.6850619Z     libmnl (library for working with netfilter) ________________ : YES
2025-04-15T08:06:47.6851170Z     stacktraces (library for getting stack traces) _____________ : libbacktrace (mmap, threads, data)
2025-04-15T08:06:47.6851673Z Plugins:
2025-04-15T08:06:47.6852007Z     apps (monitor processes) ___________________________________ : YES
2025-04-15T08:06:47.6852382Z     cgroups (monitor containers and VMs) _______________________ : YES
2025-04-15T08:06:47.6852989Z     cgroup-network (associate interfaces to CGROUPS) ___________ : YES
2025-04-15T08:06:47.6853570Z     proc (monitor Linux systems) _______________________________ : YES
2025-04-15T08:06:47.6854615Z     tc (monitor Linux network QoS) _____________________________ : YES
2025-04-15T08:06:47.6855265Z     diskspace (monitor Linux mount points) _____________________ : YES
2025-04-15T08:06:47.6855885Z     freebsd (monitor FreeBSD systems) __________________________ : NO
2025-04-15T08:06:47.6856605Z     macos (monitor MacOS systems) ______________________________ : NO
2025-04-15T08:06:47.6857365Z     windows (monitor Windows systems) __________________________ : NO
2025-04-15T08:06:47.6858177Z     statsd (collect custom application metrics) ________________ : YES
2025-04-15T08:06:47.6858588Z     timex (check system clock synchronization) _________________ : YES
2025-04-15T08:06:47.6859224Z     idlejitter (check system latency and jitter) _______________ : YES
2025-04-15T08:06:47.6859672Z     bash (support shell data collection jobs - charts.d) _______ : YES
2025-04-15T08:06:47.6860043Z     debugfs (kernel debugging metrics) _________________________ : YES
2025-04-15T08:06:47.6860412Z     cups (monitor printers and print jobs) _____________________ : NO
2025-04-15T08:06:47.6861003Z     ebpf (monitor system calls) ________________________________ : NO
2025-04-15T08:06:47.6861632Z     freeipmi (monitor enterprise server H/W) ___________________ : YES
2025-04-15T08:06:47.6862315Z     network-viewer (monitor TCP/UDP IPv4/6 sockets) ____________ : YES
2025-04-15T08:06:47.6863015Z     systemd-journal (monitor journal logs) _____________________ : YES
2025-04-15T08:06:47.6863458Z     windows-events (monitor Windows events) ____________________ : NO
2025-04-15T08:06:47.6863940Z     nfacct (gather netfilter accounting) _______________________ : NO
2025-04-15T08:06:47.6864320Z     perf (collect kernel performance events) ___________________ : YES
2025-04-15T08:06:47.6864937Z     slabinfo (monitor kernel object caching) ___________________ : YES
2025-04-15T08:06:47.6865559Z     Xen ________________________________________________________ : NO
2025-04-15T08:06:47.6866574Z     Xen VBD Error Tracking _____________________________________ : NO
2025-04-15T08:06:47.6867113Z Exporters:
2025-04-15T08:06:47.6867521Z     AWS Kinesis ________________________________________________ : NO
2025-04-15T08:06:47.6868126Z     GCP PubSub _________________________________________________ : NO
2025-04-15T08:06:47.6868922Z     MongoDB ____________________________________________________ : YES
2025-04-15T08:06:47.6869521Z     Prometheus (OpenMetrics) Exporter __________________________ : YES
2025-04-15T08:06:47.6870140Z     Prometheus Remote Write ____________________________________ : YES
2025-04-15T08:06:47.6870721Z     Graphite ___________________________________________________ : YES
2025-04-15T08:06:47.6871290Z     Graphite HTTP / HTTPS ______________________________________ : YES
2025-04-15T08:06:47.6871857Z     JSON _______________________________________________________ : YES
2025-04-15T08:06:47.6872409Z     JSON HTTP / HTTPS __________________________________________ : YES
2025-04-15T08:06:47.6872959Z     OpenTSDB ___________________________________________________ : YES
2025-04-15T08:06:47.6873560Z     OpenTSDB HTTP / HTTPS ______________________________________ : YES
2025-04-15T08:06:47.6874176Z     All Metrics API ____________________________________________ : YES
2025-04-15T08:06:47.6874877Z     Shell (use metrics in shell scripts) _______________________ : YES
2025-04-15T08:06:47.6875393Z Debug/Developer Features:
2025-04-15T08:06:47.6875867Z     Trace All Netdata Allocations (with charts) ________________ : NO
2025-04-15T08:06:47.6876703Z     Developer Mode (more runtime checks, slower) _______________ : NO
2025-04-15T08:06:47.6877229Z Runtime Information:
2025-04-15T08:06:47.6877666Z     Profile ____________________________________________________ : standalone
2025-04-15T08:06:47.6878291Z     Stream Parent (accept data from Children) __________________ : NO
2025-04-15T08:06:47.6878889Z     Stream Child (send data to a Parent) _______________________ : NO
2025-04-15T08:06:47.6879526Z     Total System Memory ________________________________________ : 16766754816
2025-04-15T08:06:47.6880488Z     Available System Memory ____________________________________ : 15208206336
2025-04-15T08:06:47.7559588Z ##[endgroup]
2025-04-15T08:06:47.7846631Z 7e771d153550888948265dc15bfef0695b9e65983060bf258d76c26a9e6d2a65
2025-04-15T08:07:18.0744636Z Waiting for netdata on localhost:19999 ... OK
2025-04-15T08:07:18.0846881Z {
2025-04-15T08:07:18.0848522Z     "version":"v2.4.0-4-nightly",
2025-04-15T08:07:18.0848993Z     "uid":"333b2cd1-cf21-443e-97cf-0e7a9e700b95",
2025-04-15T08:07:18.0849459Z     "hosts-available":1,
2025-04-15T08:07:18.0849832Z     "mirrored_hosts":["7e771d153550"],
2025-04-15T08:07:18.0850241Z     "mirrored_hosts_status":[{
2025-04-15T08:07:18.0850622Z             "hostname":"7e771d153550",
2025-04-15T08:07:18.0850999Z             "hops":0,
2025-04-15T08:07:18.0851311Z             "reachable":true,
2025-04-15T08:07:18.0851709Z             "guid":"333b2cd1-cf21-443e-97cf-0e7a9e700b95",
2025-04-15T08:07:18.0852167Z             "node_id":null,
2025-04-15T08:07:18.0852618Z             "claim_id":null
2025-04-15T08:07:18.0852968Z         }],
2025-04-15T08:07:18.0853239Z     "alarms":{
2025-04-15T08:07:18.0853540Z         "normal":117,
2025-04-15T08:07:18.0853889Z         "warning":0,
2025-04-15T08:07:18.0854195Z         "critical":0
2025-04-15T08:07:18.0854473Z     },
2025-04-15T08:07:18.0854746Z     "os_name":"Ubuntu",
2025-04-15T08:07:18.0855070Z     "os_id":"ubuntu",
2025-04-15T08:07:18.0855382Z     "os_id_like":"debian",
2025-04-15T08:07:18.0855759Z     "os_version":"22.04.5 LTS (Jammy Jellyfish)",
2025-04-15T08:07:18.0856401Z     "os_version_id":"22.04",
2025-04-15T08:07:18.0856785Z     "os_detection":"/host/etc/os-release",
2025-04-15T08:07:18.0857188Z     "cores_total":"4",
2025-04-15T08:07:18.0857521Z     "total_disk_space":"161061273600",
2025-04-15T08:07:18.0857904Z     "cpu_freq":"3246000000",
2025-04-15T08:07:18.0858246Z     "ram_total":"16766754816",
2025-04-15T08:07:18.0858611Z     "container_os_name":"Debian GNU/Linux",
2025-04-15T08:07:18.0859033Z     "container_os_id":"debian",
2025-04-15T08:07:18.0859405Z     "container_os_id_like":"unknown",
2025-04-15T08:07:18.0859820Z     "container_os_version":"12 (bookworm)",
2025-04-15T08:07:18.0860420Z     "container_os_version_id":"12",
2025-04-15T08:07:18.0860681Z     "container_os_detection":"/etc/os-release",
2025-04-15T08:07:18.0860941Z     "is_k8s_node":"false",
2025-04-15T08:07:18.0861154Z     "kernel_name":"Linux",
2025-04-15T08:07:18.0861367Z     "kernel_version":"6.8.0-1025-azure",
2025-04-15T08:07:18.0861611Z     "architecture":"x86_64",
2025-04-15T08:07:18.0861824Z     "virtualization":"microsoft",
2025-04-15T08:07:18.0862051Z     "virt_detection":"lscpu",
2025-04-15T08:07:18.0862262Z     "container":"docker",
2025-04-15T08:07:18.0862471Z     "container_detection":"dockerenv",
2025-04-15T08:07:18.0862717Z     "cloud_provider_type":"Azure",
2025-04-15T08:07:18.0862959Z     "cloud_instance_type":"Standard_D4ads_v5",
2025-04-15T08:07:18.0863231Z     "cloud_instance_region":"northcentralus",
2025-04-15T08:07:18.0863488Z     "host_labels":{
2025-04-15T08:07:18.0863686Z         "_cloud_provider_type":"Azure",
2025-04-15T08:07:18.0863922Z         "_hostname":"7e771d153550",
2025-04-15T08:07:18.0864134Z         "_os":"linux",
2025-04-15T08:07:18.0864326Z         "_timezone":"Etc/UTC",
2025-04-15T08:07:18.0864545Z         "_abbrev_timezone":"UTC",
2025-04-15T08:07:18.0864764Z         "_os_name":"Ubuntu",
2025-04-15T08:07:18.0864991Z         "_os_version":"22.04.5 LTS (Jammy Jellyfish)",
2025-04-15T08:07:18.0865258Z         "_kernel_version":"6.8.0-1025-azure",
2025-04-15T08:07:18.0865491Z         "_system_cores":"4",
2025-04-15T08:07:18.0865704Z         "_system_cpu_freq":"3246000000",
2025-04-15T08:07:18.0865982Z         "_system_cpu_model":"AMD EPYC 7763 64-Core Processor",
2025-04-15T08:07:18.0866532Z         "_system_ram_total":"16766754816",
2025-04-15T08:07:18.0866779Z         "_system_disk_space":"161061273600",
2025-04-15T08:07:18.0867018Z         "_architecture":"x86_64",
2025-04-15T08:07:18.0867434Z         "_virtualization":"microsoft",
2025-04-15T08:07:18.0867670Z         "_container":"docker",
2025-04-15T08:07:18.0867902Z         "_container_detection":"dockerenv",
2025-04-15T08:07:18.0868154Z         "_hw_product_type":"vm",
2025-04-15T08:07:18.0868396Z         "_cloud_instance_type":"Standard_D4ads_v5",
2025-04-15T08:07:18.0868660Z         "_virt_detection":"lscpu",
2025-04-15T08:07:18.0868884Z         "_is_k8s_node":"false",
2025-04-15T08:07:18.0869096Z         "_install_type":"oci",
2025-04-15T08:07:18.0869303Z         "_prebuilt_arch":"x86_64",
2025-04-15T08:07:18.0869524Z         "_hw_sys_vendor":"Azure",
2025-04-15T08:07:18.0869760Z         "_hw_product_name":"Standard_D4ads_v5",
2025-04-15T08:07:18.0870008Z         "_aclk_available":"true",
2025-04-15T08:07:18.0870224Z         "_aclk_proxy":"none",
2025-04-15T08:07:18.0870442Z         "_aclk_ng_new_cloud_protocol":"true",
2025-04-15T08:07:18.0870698Z         "_has_unstable_connection":"false",
2025-04-15T08:07:18.0870969Z         "_cloud_instance_region":"northcentralus",
2025-04-15T08:07:18.0871221Z         "_is_parent":"false",
2025-04-15T08:07:18.0871430Z         "_mqtt_version":"5",
2025-04-15T08:07:18.0871633Z         "_is_ephemeral":"false"
2025-04-15T08:07:18.0871836Z     },
2025-04-15T08:07:18.0871990Z     "functions":{
2025-04-15T08:07:18.0872174Z         "netdata-streaming":{
2025-04-15T08:07:18.0872431Z             "help":"Streaming status for parents and children.",
2025-04-15T08:07:18.0872716Z             "timeout":10,
2025-04-15T08:07:18.0872920Z             "version":0,
2025-04-15T08:07:18.0873111Z             "options":["GLOBAL"],
2025-04-15T08:07:18.0873319Z             "tags":"top",
2025-04-15T08:07:18.0873551Z             "access":["signed-in","same-space","sensitive-data"],
2025-04-15T08:07:18.0873829Z             "priority":101
2025-04-15T08:07:18.0874015Z         },
2025-04-15T08:07:18.0874181Z         "netdata-api-calls":{
2025-04-15T08:07:18.0874487Z             "help":"View the progress on the running and latest Netdata API Requests",
2025-04-15T08:07:18.0874813Z             "timeout":10,
2025-04-15T08:07:18.0874993Z             "version":0,
2025-04-15T08:07:18.0875185Z             "options":["GLOBAL"],
2025-04-15T08:07:18.0875513Z             "tags":"top",
2025-04-15T08:07:18.0875748Z             "access":["signed-in","same-space","sensitive-data"],
2025-04-15T08:07:18.0876017Z             "priority":101
2025-04-15T08:07:18.0876402Z         },
2025-04-15T08:07:18.0876586Z         "netdata-metrics-cardinality":{
2025-04-15T08:07:18.0876900Z             "help":"Shows metrics cardinality per context across all nodes.",
2025-04-15T08:07:18.0877201Z             "timeout":10,
2025-04-15T08:07:18.0877378Z             "version":0,
2025-04-15T08:07:18.0877566Z             "options":["GLOBAL"],
2025-04-15T08:07:18.0877768Z             "tags":"top",
2025-04-15T08:07:18.0877966Z             "access":["anonymous-data"],
2025-04-15T08:07:18.0878197Z             "priority":101
2025-04-15T08:07:18.0878380Z         },
2025-04-15T08:07:18.0878546Z         "mount-points":{
2025-04-15T08:07:18.0878762Z             "help":"View mount point statistics",
2025-04-15T08:07:18.0879005Z             "timeout":10,
2025-04-15T08:07:18.0879195Z             "version":0,
2025-04-15T08:07:18.0879380Z             "options":["GLOBAL"],
2025-04-15T08:07:18.0879586Z             "tags":"top",
2025-04-15T08:07:18.0879783Z             "access":["anonymous-data"],
2025-04-15T08:07:18.0880012Z             "priority":100
2025-04-15T08:07:18.0880194Z         },
2025-04-15T08:07:18.0880356Z         "network-interfaces":{
2025-04-15T08:07:18.0880599Z             "help":"View network interface statistics",
2025-04-15T08:07:18.0880853Z             "timeout":10,
2025-04-15T08:07:18.0881037Z             "version":0,
2025-04-15T08:07:18.0881226Z             "options":["GLOBAL"],
2025-04-15T08:07:18.0881429Z             "tags":"top",
2025-04-15T08:07:18.0881629Z             "access":["anonymous-data"],
2025-04-15T08:07:18.0881857Z             "priority":100
2025-04-15T08:07:18.0882171Z         },
2025-04-15T08:07:18.0882340Z         "containers-vms":{
2025-04-15T08:07:18.0882564Z             "help":"View running containers",
2025-04-15T08:07:18.0882807Z             "timeout":10,
2025-04-15T08:07:18.0883006Z             "version":0,
2025-04-15T08:07:18.0883203Z             "options":["GLOBAL"],
2025-04-15T08:07:18.0883414Z             "tags":"top",
2025-04-15T08:07:18.0883610Z             "access":["anonymous-data"],
2025-04-15T08:07:18.0883842Z             "priority":50
2025-04-15T08:07:18.0884028Z         },
2025-04-15T08:07:18.0884195Z         "systemd-services":{
2025-04-15T08:07:18.0884409Z             "help":"View systemd services",
2025-04-15T08:07:18.0884642Z             "timeout":10,
2025-04-15T08:07:18.0884832Z             "version":0,
2025-04-15T08:07:18.0885025Z             "options":["GLOBAL"],
2025-04-15T08:07:18.0885234Z             "tags":"top",
2025-04-15T08:07:18.0885430Z             "access":["anonymous-data"],
2025-04-15T08:07:18.0885661Z             "priority":33
2025-04-15T08:07:18.0885923Z         },
2025-04-15T08:07:18.0886606Z         "processes":{
2025-04-15T08:07:18.0886900Z             "help":"Detailed information on the currently running processes.",
2025-04-15T08:07:18.0887219Z             "timeout":10,
2025-04-15T08:07:18.0887413Z             "version":0,
2025-04-15T08:07:18.0887610Z             "options":["GLOBAL"],
2025-04-15T08:07:18.0887819Z             "tags":"top",
2025-04-15T08:07:18.0888061Z             "access":["signed-in","same-space","sensitive-data"],
2025-04-15T08:07:18.0888326Z             "priority":10
2025-04-15T08:07:18.0888509Z         },
2025-04-15T08:07:18.0888673Z         "block-devices":{
2025-04-15T08:07:18.0888887Z             "help":"View block device statistics",
2025-04-15T08:07:18.0889129Z             "timeout":10,
2025-04-15T08:07:18.0889306Z             "version":0,
2025-04-15T08:07:18.0889502Z             "options":["GLOBAL"],
2025-04-15T08:07:18.0889707Z             "tags":"top",
2025-04-15T08:07:18.0889912Z             "access":["anonymous-data"],
2025-04-15T08:07:18.0890146Z             "priority":100
2025-04-15T08:07:18.0890328Z         },
2025-04-15T08:07:18.0890505Z         "network-connections":{
2025-04-15T08:07:18.0890880Z             "help":"Network connections explorer",
2025-04-15T08:07:18.0891127Z             "timeout":60,
2025-04-15T08:07:18.0891317Z             "version":0,
2025-04-15T08:07:18.0891505Z             "options":["GLOBAL"],
2025-04-15T08:07:18.0891713Z             "tags":"top",
2025-04-15T08:07:18.0891947Z             "access":["signed-in","same-space","sensitive-data"],
2025-04-15T08:07:18.0892220Z             "priority":100
2025-04-15T08:07:18.0892409Z         }
2025-04-15T08:07:18.0892559Z     },
2025-04-15T08:07:18.0892719Z     "collectors":[{
2025-04-15T08:07:18.0892927Z             "plugin":"idlejitter.plugin",
2025-04-15T08:07:18.0893207Z             "module":""
2025-04-15T08:07:18.0893385Z         },{
2025-04-15T08:07:18.0893564Z             "plugin":"statsd.plugin",
2025-04-15T08:07:18.0893805Z             "module":"stats"
2025-04-15T08:07:18.0894002Z         },{
2025-04-15T08:07:18.0894172Z             "plugin":"netdata",
2025-04-15T08:07:18.0894376Z             "module":"pulse"
2025-04-15T08:07:18.0894574Z         },{
2025-04-15T08:07:18.0894738Z             "plugin":"netdata",
2025-04-15T08:07:18.0894939Z             "module":"stats"
2025-04-15T08:07:18.0895130Z         },{
2025-04-15T08:07:18.0895296Z             "plugin":"proc.plugin",
2025-04-15T08:07:18.0895527Z             "module":"/proc/net/dev"
2025-04-15T08:07:18.0895742Z         },{
2025-04-15T08:07:18.0895915Z             "plugin":"debugfs.plugin",
2025-04-15T08:07:18.0896326Z             "module":"/sys/kernel/debug/extfrag"
2025-04-15T08:07:18.0896553Z         },{
2025-04-15T08:07:18.0896730Z             "plugin":"diskspace.plugin",
2025-04-15T08:07:18.0896956Z             "module":""
2025-04-15T08:07:18.0897133Z         },{
2025-04-15T08:07:18.0897294Z             "plugin":"apps.plugin",
2025-04-15T08:07:18.0897641Z             "module":""
2025-04-15T08:07:18.0897814Z         },{
2025-04-15T08:07:18.0897979Z             "plugin":"ml.plugin",
2025-04-15T08:07:18.0898194Z             "module":"training"
2025-04-15T08:07:18.0898389Z         },{
2025-04-15T08:07:18.0898550Z             "plugin":"ml.plugin",
2025-04-15T08:07:18.0898762Z             "module":"detection"
2025-04-15T08:07:18.0898962Z         },{
2025-04-15T08:07:18.0899128Z             "plugin":"proc.plugin",
2025-04-15T08:07:18.0899345Z             "module":"/proc/stat"
2025-04-15T08:07:18.0899545Z         },{
2025-04-15T08:07:18.0899712Z             "plugin":"proc.plugin",
2025-04-15T08:07:18.0899930Z             "module":"/proc/uptime"
2025-04-15T08:07:18.0900131Z         },{
2025-04-15T08:07:18.0900288Z             "plugin":"proc.plugin",
2025-04-15T08:07:18.0900550Z             "module":"/proc/loadavg"
2025-04-15T08:07:18.0900824Z         },{
2025-04-15T08:07:18.0900990Z             "plugin":"proc.plugin",
2025-04-15T08:07:18.0901214Z             "module":"/proc/sys/fs/file-nr"
2025-04-15T08:07:18.0901440Z         },{
2025-04-15T08:07:18.0901601Z             "plugin":"proc.plugin",
2025-04-15T08:07:18.0901849Z             "module":"/proc/sys/kernel/random/entropy_avail"
2025-04-15T08:07:18.0902105Z         },{
2025-04-15T08:07:18.0902275Z             "plugin":"proc.plugin",
2025-04-15T08:07:18.0902491Z             "module":"/proc/pressure"
2025-04-15T08:07:18.0902708Z         },{
2025-04-15T08:07:18.0902872Z             "plugin":"proc.plugin",
2025-04-15T08:07:18.0903095Z             "module":"/proc/interrupts"
2025-04-15T08:07:18.0903304Z         },{
2025-04-15T08:07:18.0903472Z             "plugin":"proc.plugin",
2025-04-15T08:07:18.0903692Z             "module":"/proc/softirqs"
2025-04-15T08:07:18.0903901Z         },{
2025-04-15T08:07:18.0904062Z             "plugin":"proc.plugin",
2025-04-15T08:07:18.0904275Z             "module":"/proc/vmstat"
2025-04-15T08:07:18.0904485Z         },{
2025-04-15T08:07:18.0904651Z             "plugin":"proc.plugin",
2025-04-15T08:07:18.0904876Z             "module":"/proc/meminfo"
2025-04-15T08:07:18.0905087Z         },{
2025-04-15T08:07:18.0905250Z             "plugin":"proc.plugin",
2025-04-15T08:07:18.0905479Z             "module":"/proc/net/sockstat"
2025-04-15T08:07:18.0905833Z         },{
2025-04-15T08:07:18.0906001Z             "plugin":"proc.plugin",
2025-04-15T08:07:18.0906624Z             "module":"/proc/net/sockstat6"
2025-04-15T08:07:18.0906860Z         },{
2025-04-15T08:07:18.0907037Z             "plugin":"proc.plugin",
2025-04-15T08:07:18.0907274Z             "module":"/proc/net/netstat"
2025-04-15T08:07:18.0907494Z         },{
2025-04-15T08:07:18.0907667Z             "plugin":"proc.plugin",
2025-04-15T08:07:18.0907899Z             "module":"/proc/net/softnet_stat"
2025-04-15T08:07:18.0908134Z         },{
2025-04-15T08:07:18.0908305Z             "plugin":"proc.plugin",
2025-04-15T08:07:18.0908555Z             "module":"/proc/net/stat/nf_conntrack"
2025-04-15T08:07:18.0908793Z         },{
2025-04-15T08:07:18.0908966Z             "plugin":"proc",
2025-04-15T08:07:18.0909188Z             "module":"/proc/diskstats"
2025-04-15T08:07:18.0909411Z         },{
2025-04-15T08:07:18.0909581Z             "plugin":"proc.plugin",
2025-04-15T08:07:18.0928158Z             "module":"/proc/diskstats"
2025-04-15T08:07:18.0928617Z         },{
2025-04-15T08:07:18.0928918Z             "plugin":"proc.plugin",
2025-04-15T08:07:18.0929295Z             "module":"ipc"
2025-04-15T08:07:18.0929631Z         },{
2025-04-15T08:07:18.0929837Z             "plugin":"timex.plugin",
2025-04-15T08:07:18.0930079Z             "module":""
2025-04-15T08:07:18.0930268Z         },{
2025-04-15T08:07:18.0930449Z             "plugin":"cgroups.plugin",
2025-04-15T08:07:18.0930694Z             "module":"/sys/fs/cgroup"
2025-04-15T08:07:18.0930913Z         },{
2025-04-15T08:07:18.0931095Z             "plugin":"cgroups.plugin",
2025-04-15T08:07:18.0931341Z             "module":"systemd"
2025-04-15T08:07:18.0931541Z         }],
2025-04-15T08:07:18.0931943Z     "cloud-enabled":true,
2025-04-15T08:07:18.0932164Z     "cloud-available":true,
2025-04-15T08:07:18.0932379Z     "agent-claimed":false,
2025-04-15T08:07:18.0932583Z     "aclk-available":false,
2025-04-15T08:07:18.0932802Z     "memory-mode":"dbengine",
2025-04-15T08:07:18.0933033Z     "multidb-disk-quota":1024,
2025-04-15T08:07:18.0933256Z     "page-cache-size":32,
2025-04-15T08:07:18.0933462Z     "web-enabled":true,
2025-04-15T08:07:18.0933656Z     "stream-enabled":false,
2025-04-15T08:07:18.0933871Z     "stream-compression":false,
2025-04-15T08:07:18.0934092Z     "https-enabled":true,
2025-04-15T08:07:18.0935060Z     "buildinfo":"Netdata Cloud|Stream Compression|Machine Learning|allocator|dbengine|Native HTTPS|TLS Host Verification|zlib|protobuf|JSON-C|libcrypto|libyaml|libmnl|apps|cgroup Network Tracking|debugfs|IPMI|NETWORK-VIEWER|SYSTEMD-JOURNAL|perf|slabinfo|MongoDB|Prometheus Remote Write",
2025-04-15T08:07:18.0936212Z     "release-channel":"nightly",
2025-04-15T08:07:18.0936453Z     "notification-methods":null,
2025-04-15T08:07:18.0936681Z     "exporting-enabled":false,
2025-04-15T08:07:18.0936904Z     "exporting-connectors":null,
2025-04-15T08:07:18.0937140Z     "allmetrics-prometheus-used":0,
2025-04-15T08:07:18.0937390Z     "allmetrics-shell-used":0,
2025-04-15T08:07:18.0937608Z     "allmetrics-json-used":0,
2025-04-15T08:07:18.0937814Z     "dashboard-used":0,
2025-04-15T08:07:18.0938004Z     "charts-count":0,
2025-04-15T08:07:18.0938191Z     "metrics-count":0,
2025-04-15T08:07:18.0938375Z     "ml-info":{
2025-04-15T08:07:18.0938546Z         "version":1,
2025-04-15T08:07:18.0938718Z         "enabled":true,
2025-04-15T08:07:18.0938913Z         "min-train-samples":900,
2025-04-15T08:07:18.0939133Z         "max-train-samples":21600,
2025-04-15T08:07:18.0939359Z         "train-every":10800,
2025-04-15T08:07:18.0939551Z         "diff-n":1,
2025-04-15T08:07:18.0939726Z         "smooth-n":3,
2025-04-15T08:07:18.0939904Z         "lag-n":5,
2025-04-15T08:07:18.0940095Z         "random-sampling-ratio":0.2,
2025-04-15T08:07:18.0940335Z         "max-kmeans-iters":0,
2025-04-15T08:07:18.0940571Z         "dimension-anomaly-score-threshold":0.99,
2025-04-15T08:07:18.0940881Z         "anomaly-detection-grouping-method":"average",
2025-04-15T08:07:18.0941313Z         "anomaly-detection-query-duration":300,
2025-04-15T08:07:18.0941573Z         "hosts-to-skip":"!*",
2025-04-15T08:07:18.0941830Z         "charts-to-skip":"anomaly_detection.* netdata.*"
2025-04-15T08:07:18.0942086Z     }
2025-04-15T08:07:18.0942241Z }
2025-04-15T08:07:18.1350144Z "v2.4.0-4-nightly"
2025-04-15T08:07:18.1402008Z <!doctype html><html lang="en" dir="ltr"><head><meta charset="utf-8"/><title>Netdata</title><script>const CONFIG = {
2025-04-15T08:07:18.1403199Z       cache: {
2025-04-15T08:07:18.1403596Z         agentInfo: false,
2025-04-15T08:07:18.1403974Z         cloudToken: true,
2025-04-15T08:07:18.1404411Z         agentToken: true,
2025-04-15T08:07:18.1404789Z       }
2025-04-15T08:07:18.1405068Z     }
2025-04-15T08:07:18.1405233Z 
2025-04-15T08:07:18.1405530Z     // STATE MANAGEMENT ======================================================================== //
2025-04-15T08:07:18.1406330Z     const state = {
2025-04-15T08:07:18.1406675Z       loading: {
2025-04-15T08:07:18.1407013Z         spaces: false,
2025-04-15T08:07:18.1407362Z         rooms: false,
2025-04-15T08:07:18.1407717Z         claimingToken: false,
2025-04-15T08:07:18.1408134Z         claimingAgent: false
2025-04-15T08:07:18.1408508Z       },
2025-04-15T08:07:18.1408793Z       claim: {
2025-04-15T08:07:18.1409151Z         status: {},
2025-04-15T08:07:18.1409490Z         response: {},
2025-04-15T08:07:18.1409849Z         shouldClaim: false,
2025-04-15T08:07:18.1410215Z         step: 1,
2025-04-15T08:07:18.1410578Z         selectedSpaceIds: [],
2025-04-15T08:07:18.1411022Z         selectedRoomIds: [],
2025-04-15T08:07:18.1411508Z         privateKey: ""
2025-04-15T08:07:18.1411899Z       },
2025-04-15T08:07:18.1412260Z       cache: {
2025-04-15T08:07:18.1412600Z         spaces: undefined,
2025-04-15T08:07:18.1413251Z         rooms: {},
2025-04-15T08:07:18.1413664Z         claimingTokensPerSpace: {}
2025-04-15T08:07:18.1414074Z       }
2025-04-15T08:07:18.1414353Z     }
2025-04-15T08:07:18.1414539Z 
2025-04-15T08:07:18.1414768Z     const getSelectedRooms = state => {
2025-04-15T08:07:18.1415618Z       const spaceId = state.claim.selectedSpaceIds.length ? state.claim.selectedSpaceIds[0] : null;
2025-04-15T08:07:18.1416501Z       if (!spaceId) return [];
2025-04-15T08:07:18.1416938Z       if (state.claim.selectedRoomIds.length) {
2025-04-15T08:07:18.1417713Z         return state.cache?.rooms?.[spaceId]?.filter(({ id }) => state.claim.selectedRoomIds.includes(id)) || [];
2025-04-15T08:07:18.1418408Z       }
2025-04-15T08:07:18.1418676Z       return [];
2025-04-15T08:07:18.1418953Z     }
2025-04-15T08:07:18.1419101Z 
2025-04-15T08:07:18.1419228Z     const syncUI = () => {
2025-04-15T08:07:18.1419562Z       // Elements
2025-04-15T08:07:18.1420066Z       const splashMessage = document.getElementById("splashMessageContainer");
2025-04-15T08:07:18.1420859Z       const claiming = document.getElementById("claimingContentsContainer");
2025-04-15T08:07:18.1421558Z       const step1 = document.getElementById("connectionStep-1");
2025-04-15T08:07:18.1422191Z       const step2 = document.getElementById("connectionStep-2");
2025-04-15T08:07:18.1422859Z       const btnPrev = document.getElementById("btnConnectionStepPrev");
2025-04-15T08:07:18.1423588Z       const btnNext = document.getElementById("btnConnectionStepNext");
2025-04-15T08:07:18.1424242Z       const btnClaim = document.getElementById("btnClaim");
2025-04-15T08:07:18.1424885Z       const roomsSelector = document.getElementById("roomsSelector");
2025-04-15T08:07:18.1425643Z       const claimErrorMessage = document.getElementById("claimErrorMessage");
2025-04-15T08:07:18.1426428Z 
2025-04-15T08:07:18.1426546Z       // State
2025-04-15T08:07:18.1427439Z       const { spaces: spacesLoading, rooms: roomsLoading, claimingToken: claimingTokenLoading, claimingAgent: claimingAgentLoading } = state.loading;
2025-04-15T08:07:18.1428712Z       const { shouldClaim, step, selectedSpaceIds, selectedRoomIds, privateKey } = state.claim;
2025-04-15T08:07:18.1430035Z       const claimingTokenExists = state.claim.selectedSpaceIds.length ? !!state.cache.claimingTokensPerSpace[state.claim.selectedSpaceIds[0]] : false;
2025-04-15T08:07:18.1431180Z 
2025-04-15T08:07:18.1431481Z       splashMessage.style.display = !shouldClaim ? "initial" : "none";
2025-04-15T08:07:18.1432164Z       claiming.style.display = shouldClaim ? "initial" : "none";
2025-04-15T08:07:18.1432564Z 
2025-04-15T08:07:18.1432694Z       // Loading spaces
2025-04-15T08:07:18.1433019Z       if (step1) {
2025-04-15T08:07:18.1433412Z         const spacesLoader = step1.querySelector(".loader");
2025-04-15T08:07:18.1433894Z         if (spacesLoader) {
2025-04-15T08:07:18.1434402Z           spacesLoader.style.display = spacesLoading ? "initial" : "none";
2025-04-15T08:07:18.1434951Z         }
2025-04-15T08:07:18.1435224Z       }
2025-04-15T08:07:18.1435372Z 
2025-04-15T08:07:18.1435496Z       // Loading rooms
2025-04-15T08:07:18.1435822Z       if (roomsSelector) {
2025-04-15T08:07:18.1436487Z         const message = roomsSelector.querySelector(".selected-items");
2025-04-15T08:07:18.1437299Z         const selectedRoomNames = getSelectedRooms(state).map(({ name }) => name).join(", ");
2025-04-15T08:07:18.1437942Z         if (message) {
2025-04-15T08:07:18.1438539Z           message.innerText = roomsLoading ? "Loading rooms..." : (selectedRoomNames || "Select room");
2025-04-15T08:07:18.1439209Z         }
2025-04-15T08:07:18.1439460Z       }
2025-04-15T08:07:18.1439617Z 
2025-04-15T08:07:18.1439743Z       // Steps visibility
2025-04-15T08:07:18.1440162Z       step1.style.display = step == 1 ? "initial" : "none";
2025-04-15T08:07:18.1440713Z       step2.style.display = step == 2 ? "initial" : "none";
2025-04-15T08:07:18.1441055Z 
2025-04-15T08:07:18.1441176Z       // Rooms
2025-04-15T08:07:18.1441463Z       if (step == 1) {
2025-04-15T08:07:18.1441981Z         // Reset rooms
2025-04-15T08:07:18.1442782Z         const checkboxes = document.getElementById("roomsSelectorOptionsContainer").querySelectorAll('input[type="checkbox"]');
2025-04-15T08:07:18.1443706Z         checkboxes.forEach((checkbox) => {
2025-04-15T08:07:18.1444131Z           if (checkbox.checked) {
2025-04-15T08:07:18.1444522Z             checkbox.checked = false;
2025-04-15T08:07:18.1445023Z             checkbox.dispatchEvent(new Event("change"));
2025-04-15T08:07:18.1445460Z           }
2025-04-15T08:07:18.1445723Z         });
2025-04-15T08:07:18.1445986Z       }
2025-04-15T08:07:18.1446295Z 
2025-04-15T08:07:18.1446444Z       if (claimErrorMessage) {
2025-04-15T08:07:18.1447068Z         claimErrorMessage.style.display = state.claim?.response?.error ? "initial" : "none";
2025-04-15T08:07:18.1448048Z         claimErrorMessage.innerText = state.claim?.response?.error ? state.claim.response.error : "";
2025-04-15T08:07:18.1448742Z       }
2025-04-15T08:07:18.1448888Z 
2025-04-15T08:07:18.1449013Z       // Footer
2025-04-15T08:07:18.1449368Z       btnPrev.style.opacity = step == 1 ? "0" : "1";
2025-04-15T08:07:18.1449907Z       btnPrev.style.cursor = step == 1 ? "default" : "pointer";
2025-04-15T08:07:18.1450438Z       btnPrev.disabled = step == 1;
2025-04-15T08:07:18.1450926Z       btnNext.style.display = step == 1 ? "initial" : "none";
2025-04-15T08:07:18.1451466Z       btnNext.disabled = !selectedSpaceIds.length;
2025-04-15T08:07:18.1452012Z       btnClaim.style.display = step == 2 ? "initial" : "none";
2025-04-15T08:07:18.1453021Z       btnClaim.disabled = !selectedRoomIds.length || !privateKey || !claimingTokenExists || claimingTokenLoading || claimingAgentLoading;
2025-04-15T08:07:18.1454119Z       btnClaim.textContent = claimingAgentLoading ? "Claiming..." : "Claim";
2025-04-15T08:07:18.1454591Z 
2025-04-15T08:07:18.1454730Z       return Promise.resolve();
2025-04-15T08:07:18.1455077Z     }
2025-04-15T08:07:18.1455227Z 
2025-04-15T08:07:18.1455433Z     const toggleSpacesLoadingState = isLoading => {
2025-04-15T08:07:18.1455998Z       state.loading = { ...state.loading, spaces: isLoading };
2025-04-15T08:07:18.1456672Z       return syncUI();
2025-04-15T08:07:18.1457012Z     }
2025-04-15T08:07:18.1457362Z 
2025-04-15T08:07:18.1457553Z     const toggleRoomsLoadingState = isLoading => {
2025-04-15T08:07:18.1458097Z       state.loading = { ...state.loading, rooms: isLoading };
2025-04-15T08:07:18.1458574Z       return syncUI();
2025-04-15T08:07:18.1458885Z     }
2025-04-15T08:07:18.1459029Z 
2025-04-15T08:07:18.1459268Z     const toggleClaimingTokenLoadingState = isLoading => {
2025-04-15T08:07:18.1459883Z       state.loading = { ...state.loading, claimingToken: isLoading };
2025-04-15T08:07:18.1460367Z       return syncUI();
2025-04-15T08:07:18.1460646Z     }
2025-04-15T08:07:18.1460781Z 
2025-04-15T08:07:18.1461010Z     const toggleClaimingAgentLoadingState = isLoading => {
2025-04-15T08:07:18.1461614Z       state.loading = { ...state.loading, claimingAgent: isLoading };
2025-04-15T08:07:18.1462126Z       return syncUI();
2025-04-15T08:07:18.1462412Z     }
2025-04-15T08:07:18.1462557Z 
2025-04-15T08:07:18.1462749Z     const setShouldClaimStatus = shouldClaim => {
2025-04-15T08:07:18.1463249Z       state.claim = { ...state.claim, shouldClaim };
2025-04-15T08:07:18.1463670Z       return syncUI();
2025-04-15T08:07:18.1463953Z     }
2025-04-15T08:07:18.1464096Z 
2025-04-15T08:07:18.1464254Z     const setClaimStatusState = status => {
2025-04-15T08:07:18.1464701Z       state.claim = { ...state.claim, status };
2025-04-15T08:07:18.1465105Z       return syncUI();
2025-04-15T08:07:18.1465400Z     }
2025-04-15T08:07:18.1465542Z 
2025-04-15T08:07:18.1465723Z     const setClaimResponseState = response => {
2025-04-15T08:07:18.1466368Z       state.claim = { ...state.claim, response };
2025-04-15T08:07:18.1466788Z       return syncUI();
2025-04-15T08:07:18.1467084Z     }
2025-04-15T08:07:18.1467227Z 
2025-04-15T08:07:18.1467381Z     const setClaimingStep = async arg => {
2025-04-15T08:07:18.1468151Z       const nextStep = typeof arg == "function" ? arg(state.claim.step) : arg;
2025-04-15T08:07:18.1469049Z       state.claim = { ...state.claim, step: nextStep, ...(nextStep == 1 ? { selectedRoomIds: [], privateKey: "" } : {}) };
2025-04-15T08:07:18.1469791Z       await syncUI();
2025-04-15T08:07:18.1470143Z       return Promise.resolve(nextStep);
2025-04-15T08:07:18.1470529Z     }
2025-04-15T08:07:18.1470671Z 
2025-04-15T08:07:18.1470840Z     const setSelectedSpacesStatus = arg => {
2025-04-15T08:07:18.1471626Z       const spaceIds = typeof arg == "function" ? arg(state.claim.selectedSpaceIds) : Array.isArray(arg) ? arg : [arg];
2025-04-15T08:07:18.1472686Z       state.claim = { ...state.claim, selectedSpaceIds: spaceIds, selectedRoomIds: [], privateKey: "" };
2025-04-15T08:07:18.1473374Z       return syncUI();
2025-04-15T08:07:18.1473670Z     }
2025-04-15T08:07:18.1473809Z 
2025-04-15T08:07:18.1473976Z     const setSelectedRoomsStatus = arg => {
2025-04-15T08:07:18.1474759Z       const roomIds = typeof arg == "function" ? arg(state.claim.selectedRoomIds) : Array.isArray(arg) ? arg : [arg];
2025-04-15T08:07:18.1475632Z       state.claim = { ...state.claim, selectedRoomIds: roomIds };
2025-04-15T08:07:18.1476284Z       return syncUI();
2025-04-15T08:07:18.1476605Z     }
2025-04-15T08:07:18.1476752Z 
2025-04-15T08:07:18.1476979Z     const setClaimingPrivateKeyState = (value = "") => {
2025-04-15T08:07:18.1477536Z       state.claim = { ...state.claim, privateKey: value };
2025-04-15T08:07:18.1478012Z       return syncUI();
2025-04-15T08:07:18.1478318Z     }
2025-04-15T08:07:18.1478472Z 
2025-04-15T08:07:18.1478626Z     const cacheSpaces = (spaces) => {
2025-04-15T08:07:18.1479071Z       if (!spaces) return Promise.resolve([]);
2025-04-15T08:07:18.1479515Z       state.cache.spaces = spaces;
2025-04-15T08:07:18.1479924Z       return Promise.resolve(spaces);
2025-04-15T08:07:18.1480302Z     }
2025-04-15T08:07:18.1480451Z 
2025-04-15T08:07:18.1480624Z     const cacheRooms = (spaceId, rooms) => {
2025-04-15T08:07:18.1481095Z       if (!spaceId) return Promise.resolve([]);
2025-04-15T08:07:18.1481642Z       state.cache.rooms = { ...state.cache.rooms, [spaceId]: rooms };
2025-04-15T08:07:18.1482197Z       return Promise.resolve(rooms);
2025-04-15T08:07:18.1482828Z     }
2025-04-15T08:07:18.1482989Z 
2025-04-15T08:07:18.1483168Z     const cacheClaimingToken = (spaceId, token) => {
2025-04-15T08:07:18.1483492Z       if (!spaceId || !token) return Promise.resolve();
2025-04-15T08:07:18.1483961Z       state.cache.claimingTokensPerSpace = { ...state.cache.claimingTokensPerSpace, [spaceId]: token };
2025-04-15T08:07:18.1484522Z       return Promise.resolve(token);
2025-04-15T08:07:18.1484757Z     }
2025-04-15T08:07:18.1485051Z 
2025-04-15T08:07:18.1485223Z     // ========================================================================================= //
2025-04-15T08:07:18.1485420Z 
2025-04-15T08:07:18.1485667Z     const pathsRegex = /\/(spaces|nodes|overview|alerts|dashboards|anomalies|events|cloud|v3)\/?.*/;
2025-04-15T08:07:18.1486267Z     function getBasename() {
2025-04-15T08:07:18.1486667Z       return window.location.origin + window.location.pathname.replace(pathsRegex, "")
2025-04-15T08:07:18.1487173Z     }
2025-04-15T08:07:18.1487346Z 
2025-04-15T08:07:18.1487492Z     let goToOld = function(path) {
2025-04-15T08:07:18.1488031Z       let goToUrl = getBasename() + path;
2025-04-15T08:07:18.1488445Z       if (path !== "/v3") {
2025-04-15T08:07:18.1489077Z         let pathsRegex = /(\/(spaces|nodes|overview|alerts|dashboards|anomalies|events|cloud|v3)\/?.*)/
2025-04-15T08:07:18.1489970Z         if (pathsRegex.test(window.location.origin + window.location.pathname)) {
2025-04-15T08:07:18.1490868Z           goToUrl = (window.location.origin + window.location.pathname).replace(pathsRegex, "/v3$1")
2025-04-15T08:07:18.1491537Z         }
2025-04-15T08:07:18.1491807Z       }
2025-04-15T08:07:18.1492298Z       window.location.replace(ensureOneSlash(goToUrl + window.location.search))
2025-04-15T08:07:18.1492901Z     }
2025-04-15T08:07:18.1493299Z 
2025-04-15T08:07:18.1493550Z     const searchParams = new URLSearchParams(location.search);
2025-04-15T08:07:18.1494089Z     window.envSettings = {
2025-04-15T08:07:18.1494436Z       isAgent: true,
2025-04-15T08:07:18.1494818Z       apiUrl: "https://app.netdata.cloud",
2025-04-15T08:07:18.1495273Z       cloudUrl: "https://app.netdata.cloud",
2025-04-15T08:07:18.1495704Z       demoSlug: "netdata-demo",
2025-04-15T08:07:18.1500215Z       demoFavourites: {"postgresql":["Applications-0_Postgres-1"],"redis":["Applications-0_Redis-1"],"dns-query":["Applications-0_CoreDNS-1"],"http-endpoints":["Applications-0_HTTP_Checks-1"],"nginx":["Applications-0_web_log-1","Applications-0_Nginx-1"],"apache":["Applications-0_Apache-1"],"host-reachability":["Synthetic_Checks-0"],"cassandra":["Applications-0_Cassandra-1"],"coredns":["Applications-0_CoreDNS-1"],"logind":["Applications-0_systemd_LoginD-1"],"iis":["Applications-0_MS_IIS-1"],"active-directory":["Applications-0_MS_Active_Directory-1"],"windows":["Applications-0_Windows-1","Applications-0_MS_Active_Directory-1","Applications-0_MS_IIS-1","Applications-0_MS_SQL-1","Applications-0_MS_Exchange-1","Applications-0__NET_Framework-1"],"docker":["Containers___VMs-0"],"ups":["Hardware___Sensors-0_NUT_UPS-1"]},
2025-04-15T08:07:18.1504652Z       webpackPublicPath: "https://app.netdata.cloud" || (getBasename() + "/v3"),
2025-04-15T08:07:18.1505360Z       agentApiUrl: searchParams.get("agent") || getBasename(),
2025-04-15T08:07:18.1506039Z       posthogToken: "phc_hnhlqe6D2Q4IcQNrFItaqdXJAxQ8RcHkPAFAp74pubv",
2025-04-15T08:07:18.1506769Z       version: "7.48.0",
2025-04-15T08:07:18.1507051Z       tracking: !false,
2025-04-15T08:07:18.1507273Z       cookieDomain: ".netdata.cloud",
2025-04-15T08:07:18.1507512Z       onprem: false,
2025-04-15T08:07:18.1507701Z       isLocal: false,
2025-04-15T08:07:18.1507893Z       nodeEnv: "production"
2025-04-15T08:07:18.1508085Z     }
2025-04-15T08:07:18.1508173Z 
2025-04-15T08:07:18.1508260Z     window.visitedNodes = []
2025-04-15T08:07:18.1508401Z 
2025-04-15T08:07:18.1508492Z     const getHashValueByKey = key => {
2025-04-15T08:07:18.1508893Z       return location.hash.substr(1).split("&").find(pair => pair.split("=")[0] == key)?.split("=")[1]
2025-04-15T08:07:18.1509466Z     }
2025-04-15T08:07:18.1509552Z 
2025-04-15T08:07:18.1509631Z     // Check cloud token
2025-04-15T08:07:18.1509842Z     const CLOUD_TOKEN_KEY = "netdataJWT"
2025-04-15T08:07:18.1510135Z     const redirectUri = getHashValueByKey("redirect_uri")
2025-04-15T08:07:18.1510440Z     const token = getHashValueByKey("token")
2025-04-15T08:07:18.1510680Z     if (token) {
2025-04-15T08:07:18.1510893Z       localStorage.setItem(CLOUD_TOKEN_KEY, token)
2025-04-15T08:07:18.1511143Z     }
2025-04-15T08:07:18.1511533Z     if (redirectUri) {
2025-04-15T08:07:18.1511721Z       try {
2025-04-15T08:07:18.1511937Z         const decodedUrl = decodeURIComponent(redirectUri)
2025-04-15T08:07:18.1512291Z         const parsedUrl = new URL(decodedUrl, window.location.origin)
2025-04-15T08:07:18.1512527Z 
2025-04-15T08:07:18.1512658Z         if (parsedUrl.origin === window.location.origin) {
2025-04-15T08:07:18.1512954Z           window.location.href = parsedUrl.href
2025-04-15T08:07:18.1513198Z         } else {
2025-04-15T08:07:18.1513467Z           console.error("Blocked potentially unsafe redirect to: ", decodedUrl)
2025-04-15T08:07:18.1513782Z         }
2025-04-15T08:07:18.1513944Z       } catch (error) {
2025-04-15T08:07:18.1514186Z         console.error("Invalid URL detected: ", error.message)
2025-04-15T08:07:18.1514457Z       }
2025-04-15T08:07:18.1514631Z     }</script><style>body.netdata-splash {
2025-04-15T08:07:18.1514865Z       height: 100%;
2025-04-15T08:07:18.1515047Z       overflow: hidden;
2025-04-15T08:07:18.1515249Z       background: var(--main-bg);
2025-04-15T08:07:18.1515461Z       margin: 0;
2025-04-15T08:07:18.1515627Z       padding: 0;
2025-04-15T08:07:18.1515810Z       color: var(--text);
2025-04-15T08:07:18.1516307Z       font-family: system-ui, "Segoe UI", Roboto, Helvetica, Arial, sans-serif,
2025-04-15T08:07:18.1517713Z         "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
2025-04-15T08:07:18.1517985Z     }
2025-04-15T08:07:18.1518070Z 
2025-04-15T08:07:18.1518137Z     :root {
2025-04-15T08:07:18.1518316Z       --scrollbar-thumb: #fcfffd;
2025-04-15T08:07:18.1518537Z       --primary: #00ab44;
2025-04-15T08:07:18.1518734Z       --text: #93a4a4;
2025-04-15T08:07:18.1518924Z       --text-dark: #001107;
2025-04-15T08:07:18.1519126Z       --text-light: #fcfffd;
2025-04-15T08:07:18.1519332Z       --menu-item: #5b6c6c;
2025-04-15T08:07:18.1519527Z       --main-bg: #000;
2025-04-15T08:07:18.1519712Z       --highlight: #00ef5f;
2025-04-15T08:07:18.1519912Z       --tab-active: #ddffeb;
2025-04-15T08:07:18.1520109Z       --tab-hover: #d2d9d9;
2025-04-15T08:07:18.1520314Z       --panel-bg: transparent;
2025-04-15T08:07:18.1520532Z       --font-small: 14px;
2025-04-15T08:07:18.1520737Z       --font-medium: 16px;
2025-04-15T08:07:18.1520933Z       --row-2n: #101313;
2025-04-15T08:07:18.1521125Z       --border: #00ab4436;
2025-04-15T08:07:18.1521326Z       --border-neutral: #252c2c;
2025-04-15T08:07:18.1521550Z       --key-value-table: #93a4a4;
2025-04-15T08:07:18.1521762Z       --accent: #ddffeb;
2025-04-15T08:07:18.1521962Z       --module-height: 45vh;
2025-04-15T08:07:18.1522187Z       --list-option-bg: rgba(12, 15, 15, 0.5);
2025-04-15T08:07:18.1522447Z       --list-option-selected-bg: #000;
2025-04-15T08:07:18.1522712Z       --list-option-hover-bg: rgba(12, 15, 15, 1);
2025-04-15T08:07:18.1522972Z       --footer-height: 70px;
2025-04-15T08:07:18.1523179Z       --code-bg: #00220e;
2025-04-15T08:07:18.1523379Z       --progress-bar-height: 2px;
2025-04-15T08:07:18.1523626Z       background-color: var(--main-bg);
2025-04-15T08:07:18.1523853Z     }
2025-04-15T08:07:18.1523938Z 
2025-04-15T08:07:18.1524011Z     :root iframe {
2025-04-15T08:07:18.1524191Z       border-width: 0;
2025-04-15T08:07:18.1524366Z     }
2025-04-15T08:07:18.1524455Z 
2025-04-15T08:07:18.1524567Z     body.netdata-splash.loading .frame-right {
2025-04-15T08:07:18.1524835Z       display: none;
2025-04-15T08:07:18.1525017Z     }
2025-04-15T08:07:18.1525102Z 
2025-04-15T08:07:18.1525212Z     body.netdata-splash.loading .frame-left {
2025-04-15T08:07:18.1525594Z       grid-column: auto / span 12;
2025-04-15T08:07:18.1525805Z     }
2025-04-15T08:07:18.1525893Z 
2025-04-15T08:07:18.1526025Z     body.netdata-splash.loading .sphere-stats-container,
2025-04-15T08:07:18.1526551Z     body.netdata-splash.loading .head-summary,
2025-04-15T08:07:18.1526825Z     body.netdata-splash.loading .tabs {
2025-04-15T08:07:18.1527057Z       display: none;
2025-04-15T08:07:18.1527228Z     }
2025-04-15T08:07:18.1527317Z 
2025-04-15T08:07:18.1527429Z     body.netdata-splash.loading .loading-message {
2025-04-15T08:07:18.1527689Z       display: flex;
2025-04-15T08:07:18.1527869Z       position: absolute;
2025-04-15T08:07:18.1528053Z       inset: 0;
2025-04-15T08:07:18.1528220Z       margin: auto;
2025-04-15T08:07:18.1528399Z       align-items: center;
2025-04-15T08:07:18.1528608Z       justify-content: center;
2025-04-15T08:07:18.1528817Z       color: var(--accent);
2025-04-15T08:07:18.1529004Z     }
2025-04-15T08:07:18.1529092Z 
2025-04-15T08:07:18.1529180Z     body.netdata-splash .error {
2025-04-15T08:07:18.1529395Z       color: #DB162F;
2025-04-15T08:07:18.1529568Z     }
2025-04-15T08:07:18.1529650Z 
2025-04-15T08:07:18.1529750Z     body.netdata-splash .loading-message {
2025-04-15T08:07:18.1529981Z       display: none;
2025-04-15T08:07:18.1530148Z     }
2025-04-15T08:07:18.1530234Z 
2025-04-15T08:07:18.1530313Z     body.netdata-splash h1 {
2025-04-15T08:07:18.1530519Z       font-size: 36px;
2025-04-15T08:07:18.1530704Z       margin-top: 8px;
2025-04-15T08:07:18.1530891Z       margin-bottom: 8px;
2025-04-15T08:07:18.1531101Z       color: var(--text-light);
2025-04-15T08:07:18.1531314Z       filter: blur(0.6px);
2025-04-15T08:07:18.1531501Z     }
2025-04-15T08:07:18.1531583Z 
2025-04-15T08:07:18.1531667Z     body.netdata-splash h2 {
2025-04-15T08:07:18.1532003Z       font-size: 16px;
2025-04-15T08:07:18.1532176Z     }
2025-04-15T08:07:18.1532262Z 
2025-04-15T08:07:18.1532338Z     body.netdata-splash h4 {
2025-04-15T08:07:18.1532544Z       font-size: 12px;
2025-04-15T08:07:18.1532735Z       margin-bottom: 12px;
2025-04-15T08:07:18.1532928Z       margin-top: 8px;
2025-04-15T08:07:18.1533103Z     }
2025-04-15T08:07:18.1533189Z 
2025-04-15T08:07:18.1533272Z     body.netdata-splash a:link,
2025-04-15T08:07:18.1533500Z     body.netdata-splash a:visited,
2025-04-15T08:07:18.1533740Z     body.netdata-splash a:active {
2025-04-15T08:07:18.1533964Z       text-decoration: none;
2025-04-15T08:07:18.1534176Z       color: var(--primary);
2025-04-15T08:07:18.1534370Z     }
2025-04-15T08:07:18.1534452Z 
2025-04-15T08:07:18.1534540Z     body.netdata-splash a:hover {
2025-04-15T08:07:18.1534769Z       color: var(--highlight);
2025-04-15T08:07:18.1534966Z     }
2025-04-15T08:07:18.1535054Z 
2025-04-15T08:07:18.1535138Z     body.netdata-splash canvas {
2025-04-15T08:07:18.1535366Z       display: block;
2025-04-15T08:07:18.1535544Z     }
2025-04-15T08:07:18.1535631Z 
2025-04-15T08:07:18.1535718Z     body.netdata-splash code {
2025-04-15T08:07:18.1535940Z       background: var(--code-bg);
2025-04-15T08:07:18.1536362Z       color: var(--highlight);
2025-04-15T08:07:18.1536584Z       border: 1px solid var(--border);
2025-04-15T08:07:18.1536817Z       border-radius: 2px;
2025-04-15T08:07:18.1537012Z       padding: 12px;
2025-04-15T08:07:18.1537197Z       line-break: anywhere;
2025-04-15T08:07:18.1537403Z       word-break: break-all;
2025-04-15T08:07:18.1537592Z     }
2025-04-15T08:07:18.1537676Z 
2025-04-15T08:07:18.1537768Z     body.netdata-splash .text-small {
2025-04-15T08:07:18.1537996Z       font-size: 12px;
2025-04-15T08:07:18.1538164Z     }
2025-04-15T08:07:18.1538251Z 
2025-04-15T08:07:18.1538331Z     body.netdata-splash .logo {
2025-04-15T08:07:18.1538630Z       filter: drop-shadow(2px 2px 32px rgba(255, 255, 255, 0.7)) blur(1px);
2025-04-15T08:07:18.1538940Z       opacity: 0.9;
2025-04-15T08:07:18.1539120Z       width: 150px;
2025-04-15T08:07:18.1539303Z       height: 150px;
2025-04-15T08:07:18.1539485Z     }
2025-04-15T08:07:18.1539576Z 
2025-04-15T08:07:18.1539681Z     body.netdata-splash .claim-message .logo {
2025-04-15T08:07:18.1540065Z       width: 100px;
2025-04-15T08:07:18.1540241Z       height: 100px;
2025-04-15T08:07:18.1540407Z     }
2025-04-15T08:07:18.1540497Z 
2025-04-15T08:07:18.1540583Z     body.netdata-splash .grid {
2025-04-15T08:07:18.1540797Z       display: grid;
2025-04-15T08:07:18.1540986Z       grid-column-gap: 16px;
2025-04-15T08:07:18.1541198Z       grid-row-gap: 16px;
2025-04-15T08:07:18.1541426Z       grid-template-columns: repeat(12, 1fr);
2025-04-15T08:07:18.1541693Z       grid-template-rows: repeat(12, 1fr);
2025-04-15T08:07:18.1541943Z       grid-auto-rows: min-content;
2025-04-15T08:07:18.1542157Z     }
2025-04-15T08:07:18.1542242Z 
2025-04-15T08:07:18.1542344Z     body.netdata-splash .grid-columns-10 {
2025-04-15T08:07:18.1542588Z       display: grid;
2025-04-15T08:07:18.1542775Z       grid-column-gap: 16px;
2025-04-15T08:07:18.1542985Z       grid-row-gap: 16px;
2025-04-15T08:07:18.1543210Z       grid-template-columns: repeat(10, 1fr);
2025-04-15T08:07:18.1543448Z     }
2025-04-15T08:07:18.1543536Z 
2025-04-15T08:07:18.1543627Z     body.netdata-splash .col-span-1 {
2025-04-15T08:07:18.1543870Z       grid-column: auto / span 1;
2025-04-15T08:07:18.1544078Z     }
2025-04-15T08:07:18.1544166Z 
2025-04-15T08:07:18.1544256Z     body.netdata-splash .col-span-2 {
2025-04-15T08:07:18.1544495Z       grid-column: auto / span 2;
2025-04-15T08:07:18.1544693Z     }
2025-04-15T08:07:18.1544782Z 
2025-04-15T08:07:18.1544898Z     body.netdata-splash .col-span-3 {
2025-04-15T08:07:18.1545132Z       grid-column: auto / span 3;
2025-04-15T08:07:18.1545334Z     }
2025-04-15T08:07:18.1545417Z 
2025-04-15T08:07:18.1545507Z     body.netdata-splash .col-span-4 {
2025-04-15T08:07:18.1545733Z       grid-column: auto / span 4;
2025-04-15T08:07:18.1545937Z     }
2025-04-15T08:07:18.1546307Z 
2025-04-15T08:07:18.1546395Z     body.netdata-splash .col-span-5 {
2025-04-15T08:07:18.1546640Z       grid-column: auto / span 5;
2025-04-15T08:07:18.1546844Z     }
2025-04-15T08:07:18.1546928Z 
2025-04-15T08:07:18.1547017Z     body.netdata-splash .col-span-6 {
2025-04-15T08:07:18.1547251Z       grid-column: auto / span 6;
2025-04-15T08:07:18.1547451Z     }
2025-04-15T08:07:18.1547533Z 
2025-04-15T08:07:18.1547623Z     body.netdata-splash .col-span-7 {
2025-04-15T08:07:18.1547851Z       grid-column: auto / span 7;
2025-04-15T08:07:18.1548044Z     }
2025-04-15T08:07:18.1548131Z 
2025-04-15T08:07:18.1548213Z     body.netdata-splash .col-span-8 {
2025-04-15T08:07:18.1548438Z       grid-column: auto / span 8;
2025-04-15T08:07:18.1548641Z     }
2025-04-15T08:07:18.1548752Z 
2025-04-15T08:07:18.1548911Z     body.netdata-splash .col-span-9 {
2025-04-15T08:07:18.1549300Z       grid-column: auto / span 9;
2025-04-15T08:07:18.1549635Z     }
2025-04-15T08:07:18.1549775Z 
2025-04-15T08:07:18.1549925Z     body.netdata-splash .col-span-10 {
2025-04-15T08:07:18.1550314Z       grid-column: auto / span 10;
2025-04-15T08:07:18.1550593Z     }
2025-04-15T08:07:18.1550678Z 
2025-04-15T08:07:18.1550766Z     body.netdata-splash .col-span-11 {
2025-04-15T08:07:18.1551012Z       grid-column: auto / span 11;
2025-04-15T08:07:18.1551319Z     }
2025-04-15T08:07:18.1551406Z 
2025-04-15T08:07:18.1551498Z     body.netdata-splash .col-span-12 {
2025-04-15T08:07:18.1551733Z       grid-column: auto / span 12;
2025-04-15T08:07:18.1551981Z     }
2025-04-15T08:07:18.1552121Z 
2025-04-15T08:07:18.1552211Z     body.netdata-splash .col-start-1 {
2025-04-15T08:07:18.1552448Z       grid-column-start: 1;
2025-04-15T08:07:18.1552758Z     }
2025-04-15T08:07:18.1553241Z 
2025-04-15T08:07:18.1553423Z     body.netdata-splash .col-start-2 {
2025-04-15T08:07:18.1553846Z       grid-column-start: 2;
2025-04-15T08:07:18.1554212Z     }
2025-04-15T08:07:18.1554375Z 
2025-04-15T08:07:18.1554539Z     body.netdata-splash .col-start-3 {
2025-04-15T08:07:18.1554983Z       grid-column-start: 3;
2025-04-15T08:07:18.1555332Z     }
2025-04-15T08:07:18.1555484Z 
2025-04-15T08:07:18.1555649Z     body.netdata-splash .col-start-4 {
2025-04-15T08:07:18.1556336Z       grid-column-start: 4;
2025-04-15T08:07:18.1556956Z     }
2025-04-15T08:07:18.1557134Z 
2025-04-15T08:07:18.1557298Z     body.netdata-splash .col-start-5 {
2025-04-15T08:07:18.1557734Z       grid-column-start: 5;
2025-04-15T08:07:18.1558059Z     }
2025-04-15T08:07:18.1558220Z 
2025-04-15T08:07:18.1558371Z     body.netdata-splash .col-start-6 {
2025-04-15T08:07:18.1558780Z       grid-column-start: 6;
2025-04-15T08:07:18.1559107Z     }
2025-04-15T08:07:18.1559243Z 
2025-04-15T08:07:18.1559394Z     body.netdata-splash .col-start-7 {
2025-04-15T08:07:18.1559707Z       grid-column-start: 7;
2025-04-15T08:07:18.1559896Z     }
2025-04-15T08:07:18.1559984Z 
2025-04-15T08:07:18.1560072Z     body.netdata-splash .col-start-8 {
2025-04-15T08:07:18.1560303Z       grid-column-start: 8;
2025-04-15T08:07:18.1560500Z     }
2025-04-15T08:07:18.1560582Z 
2025-04-15T08:07:18.1560672Z     body.netdata-splash .col-start-9 {
2025-04-15T08:07:18.1560894Z       grid-column-start: 9;
2025-04-15T08:07:18.1561082Z     }
2025-04-15T08:07:18.1561176Z 
2025-04-15T08:07:18.1561266Z     body.netdata-splash .col-start-10 {
2025-04-15T08:07:18.1561510Z       grid-column-start: 10;
2025-04-15T08:07:18.1561710Z     }
2025-04-15T08:07:18.1561795Z 
2025-04-15T08:07:18.1561884Z     body.netdata-splash .col-start-12 {
2025-04-15T08:07:18.1562127Z       grid-column-start: 11;
2025-04-15T08:07:18.1562324Z     }
2025-04-15T08:07:18.1562406Z 
2025-04-15T08:07:18.1562497Z     body.netdata-splash .col-start-12 {
2025-04-15T08:07:18.1562728Z       grid-column-start: 12;
2025-04-15T08:07:18.1562913Z     }
2025-04-15T08:07:18.1563002Z 
2025-04-15T08:07:18.1563095Z     @media screen and (max-width: 1280px) {
2025-04-15T08:07:18.1563367Z       body.netdata-splash .md-grid-columns-12 {
2025-04-15T08:07:18.1563631Z         display: grid;
2025-04-15T08:07:18.1564053Z         grid-column-gap: 16px;
2025-04-15T08:07:18.1564262Z         grid-row-gap: 16px;
2025-04-15T08:07:18.1564488Z         grid-template-columns: repeat(12, 1fr);
2025-04-15T08:07:18.1564732Z       }
2025-04-15T08:07:18.1564822Z 
2025-04-15T08:07:18.1564924Z       body.netdata-splash .md-col-span-1 {
2025-04-15T08:07:18.1565176Z         grid-column: auto / span 1;
2025-04-15T08:07:18.1565381Z       }
2025-04-15T08:07:18.1565474Z 
2025-04-15T08:07:18.1565565Z       body.netdata-splash .md-col-span-2 {
2025-04-15T08:07:18.1565806Z         grid-column: auto / span 2;
2025-04-15T08:07:18.1566012Z       }
2025-04-15T08:07:18.1566287Z 
2025-04-15T08:07:18.1566415Z       body.netdata-splash .md-col-span-3 {
2025-04-15T08:07:18.1566671Z         grid-column: auto / span 3;
2025-04-15T08:07:18.1566876Z       }
2025-04-15T08:07:18.1566968Z 
2025-04-15T08:07:18.1567060Z       body.netdata-splash .md-col-span-4 {
2025-04-15T08:07:18.1567302Z         grid-column: auto / span 4;
2025-04-15T08:07:18.1567516Z       }
2025-04-15T08:07:18.1567604Z 
2025-04-15T08:07:18.1567702Z       body.netdata-splash .md-col-span-5 {
2025-04-15T08:07:18.1567937Z         grid-column: auto / span 5;
2025-04-15T08:07:18.1568147Z       }
2025-04-15T08:07:18.1568241Z 
2025-04-15T08:07:18.1568330Z       body.netdata-splash .md-col-span-6 {
2025-04-15T08:07:18.1568577Z         grid-column: auto / span 6;
2025-04-15T08:07:18.1568796Z       }
2025-04-15T08:07:18.1568884Z 
2025-04-15T08:07:18.1568977Z       body.netdata-splash .md-col-span-7 {
2025-04-15T08:07:18.1569223Z         grid-column: auto / span 7;
2025-04-15T08:07:18.1569438Z       }
2025-04-15T08:07:18.1569526Z 
2025-04-15T08:07:18.1569625Z       body.netdata-splash .md-col-span-8 {
2025-04-15T08:07:18.1569876Z         grid-column: auto / span 8;
2025-04-15T08:07:18.1570086Z       }
2025-04-15T08:07:18.1570177Z 
2025-04-15T08:07:18.1570268Z       body.netdata-splash .md-col-span-9 {
2025-04-15T08:07:18.1570513Z         grid-column: auto / span 9;
2025-04-15T08:07:18.1570721Z       }
2025-04-15T08:07:18.1570812Z 
2025-04-15T08:07:18.1570914Z       body.netdata-splash .md-col-span-10 {
2025-04-15T08:07:18.1571170Z         grid-column: auto / span 10;
2025-04-15T08:07:18.1571388Z       }
2025-04-15T08:07:18.1571610Z 
2025-04-15T08:07:18.1571705Z       body.netdata-splash .md-col-span-11 {
2025-04-15T08:07:18.1571954Z         grid-column: auto / span 11;
2025-04-15T08:07:18.1572164Z       }
2025-04-15T08:07:18.1572248Z 
2025-04-15T08:07:18.1572338Z       body.netdata-splash .md-col-span-12 {
2025-04-15T08:07:18.1572583Z         grid-column: auto / span 12;
2025-04-15T08:07:18.1572795Z       }
2025-04-15T08:07:18.1572946Z     }
2025-04-15T08:07:18.1573034Z 
2025-04-15T08:07:18.1573129Z     body.netdata-splash .row-span-1 {
2025-04-15T08:07:18.1573367Z       grid-row: auto / span 1;
2025-04-15T08:07:18.1573570Z     }
2025-04-15T08:07:18.1573659Z 
2025-04-15T08:07:18.1573748Z     body.netdata-splash .row-span-2 {
2025-04-15T08:07:18.1573978Z       grid-row: auto / span 2;
2025-04-15T08:07:18.1574183Z     }
2025-04-15T08:07:18.1574267Z 
2025-04-15T08:07:18.1574356Z     body.netdata-splash .row-span-3 {
2025-04-15T08:07:18.1574611Z       grid-row: auto / span 3;
2025-04-15T08:07:18.1574813Z     }
2025-04-15T08:07:18.1574904Z 
2025-04-15T08:07:18.1574988Z     body.netdata-splash .row-span-4 {
2025-04-15T08:07:18.1575364Z       grid-row: auto / span 4;
2025-04-15T08:07:18.1575694Z     }
2025-04-15T08:07:18.1575831Z 
2025-04-15T08:07:18.1575969Z     body.netdata-splash .row-span-5 {
2025-04-15T08:07:18.1576486Z       grid-row: auto / span 5;
2025-04-15T08:07:18.1576836Z     }
2025-04-15T08:07:18.1576995Z 
2025-04-15T08:07:18.1577161Z     body.netdata-splash .row-span-6 {
2025-04-15T08:07:18.1577579Z       grid-row: auto / span 6;
2025-04-15T08:07:18.1577916Z     }
2025-04-15T08:07:18.1578062Z 
2025-04-15T08:07:18.1578209Z     body.netdata-splash .row-span-7 {
2025-04-15T08:07:18.1578616Z       grid-row: auto / span 7;
2025-04-15T08:07:18.1578956Z     }
2025-04-15T08:07:18.1579099Z 
2025-04-15T08:07:18.1579449Z     body.netdata-splash .row-span-8 {
2025-04-15T08:07:18.1579850Z       grid-row: auto / span 8;
2025-04-15T08:07:18.1580182Z     }
2025-04-15T08:07:18.1580328Z 
2025-04-15T08:07:18.1580474Z     body.netdata-splash .row-span-9 {
2025-04-15T08:07:18.1580876Z       grid-row: auto / span 9;
2025-04-15T08:07:18.1581201Z     }
2025-04-15T08:07:18.1581341Z 
2025-04-15T08:07:18.1581495Z     body.netdata-splash .row-span-10 {
2025-04-15T08:07:18.1581902Z       grid-row: auto / span 10;
2025-04-15T08:07:18.1582239Z     }
2025-04-15T08:07:18.1582382Z 
2025-04-15T08:07:18.1582538Z     body.netdata-splash .row-span-11 {
2025-04-15T08:07:18.1582933Z       grid-row: auto / span 11;
2025-04-15T08:07:18.1583260Z     }
2025-04-15T08:07:18.1583407Z 
2025-04-15T08:07:18.1583556Z     body.netdata-splash .row-span-12 {
2025-04-15T08:07:18.1583959Z       grid-row: auto / span 12;
2025-04-15T08:07:18.1584292Z     }
2025-04-15T08:07:18.1584431Z 
2025-04-15T08:07:18.1584581Z     body.netdata-splash .relative {
2025-04-15T08:07:18.1584979Z       position: relative;
2025-04-15T08:07:18.1585290Z     }
2025-04-15T08:07:18.1585444Z 
2025-04-15T08:07:18.1585578Z     body.netdata-splash .absolute {
2025-04-15T08:07:18.1585821Z       position: absolute;
2025-04-15T08:07:18.1586015Z     }
2025-04-15T08:07:18.1586292Z 
2025-04-15T08:07:18.1586414Z     body.netdata-splash .index-10 {
2025-04-15T08:07:18.1586636Z       z-index: 10;
2025-04-15T08:07:18.1586806Z     }
2025-04-15T08:07:18.1586894Z 
2025-04-15T08:07:18.1586980Z     body.netdata-splash .m-auto {
2025-04-15T08:07:18.1587197Z       margin: auto;
2025-04-15T08:07:18.1587366Z     }
2025-04-15T08:07:18.1587449Z 
2025-04-15T08:07:18.1587530Z     body.netdata-splash .full-h {
2025-04-15T08:07:18.1587753Z       height: 100%;
2025-04-15T08:07:18.1587927Z     }
2025-04-15T08:07:18.1588009Z 
2025-04-15T08:07:18.1588097Z     body.netdata-splash .flex {
2025-04-15T08:07:18.1588317Z       display: flex;
2025-04-15T08:07:18.1588486Z     }
2025-04-15T08:07:18.1588572Z 
2025-04-15T08:07:18.1588663Z     body.netdata-splash .flex-col {
2025-04-15T08:07:18.1588896Z       flex-direction: column;
2025-04-15T08:07:18.1589095Z     }
2025-04-15T08:07:18.1589178Z 
2025-04-15T08:07:18.1589277Z     body.netdata-splash .space-between {
2025-04-15T08:07:18.1589678Z       justify-content: space-between;
2025-04-15T08:07:18.1589902Z     }
2025-04-15T08:07:18.1589991Z 
2025-04-15T08:07:18.1590082Z     body.netdata-splash .align-center {
2025-04-15T08:07:18.1590321Z       align-items: center;
2025-04-15T08:07:18.1590518Z     }
2025-04-15T08:07:18.1590599Z 
2025-04-15T08:07:18.1590688Z     body.netdata-splash .container {
2025-04-15T08:07:18.1590928Z       background: var(--main-bg);
2025-04-15T08:07:18.1591146Z       height: 100vh;
2025-04-15T08:07:18.1591328Z       column-gap: 0;
2025-04-15T08:07:18.1591505Z     }
2025-04-15T08:07:18.1591591Z 
2025-04-15T08:07:18.1591674Z     body.netdata-splash .frame {
2025-04-15T08:07:18.1591887Z       height: 100vh;
2025-04-15T08:07:18.1592056Z     }
2025-04-15T08:07:18.1592143Z 
2025-04-15T08:07:18.1592244Z     body.netdata-splash .light-beam:after {
2025-04-15T08:07:18.1592488Z       content: "";
2025-04-15T08:07:18.1592668Z       position: absolute;
2025-04-15T08:07:18.1592863Z       top: 0;
2025-04-15T08:07:18.1593033Z       bottom: 0;
2025-04-15T08:07:18.1593196Z       left: 0;
2025-04-15T08:07:18.1593356Z       width: 1px;
2025-04-15T08:07:18.1593582Z       box-shadow: 20px 0px 110px 55px rgb(0 255 100 / 10%);
2025-04-15T08:07:18.1593840Z     }
2025-04-15T08:07:18.1593926Z 
2025-04-15T08:07:18.1594015Z     body.netdata-splash #setupGrid {
2025-04-15T08:07:18.1594244Z       opacity: 0.15;
2025-04-15T08:07:18.1594429Z       position: absolute;
2025-04-15T08:07:18.1594613Z       inset: 0;
2025-04-15T08:07:18.1594784Z     }
2025-04-15T08:07:18.1594872Z 
2025-04-15T08:07:18.1594963Z     body.netdata-splash #monitorGrid {
2025-04-15T08:07:18.1595207Z       opacity: 0.4;
2025-04-15T08:07:18.1595394Z       transition: 1s ease;
2025-04-15T08:07:18.1595587Z     }
2025-04-15T08:07:18.1595803Z 
2025-04-15T08:07:18.1595911Z     body.netdata-splash #monitorGrid.hovered {
2025-04-15T08:07:18.1596358Z       opacity: 0.7;
2025-04-15T08:07:18.1596538Z     }
2025-04-15T08:07:18.1596624Z 
2025-04-15T08:07:18.1596733Z     body.netdata-splash #sphereContainer {
2025-04-15T08:07:18.1596981Z       height: calc(100vh);
2025-04-15T08:07:18.1597187Z       position: relative;
2025-04-15T08:07:18.1597375Z     }
2025-04-15T08:07:18.1597462Z 
2025-04-15T08:07:18.1597571Z     body.netdata-splash #sphereContainer h4 {
2025-04-15T08:07:18.1597819Z       display: none;
2025-04-15T08:07:18.1597987Z     }
2025-04-15T08:07:18.1598076Z 
2025-04-15T08:07:18.1598161Z     body.netdata-splash .setup {
2025-04-15T08:07:18.1598382Z       z-index: 10;
2025-04-15T08:07:18.1598570Z       position: relative;
2025-04-15T08:07:18.1598795Z       box-shadow: 20px 0px 160px 5px #012f13c2;
2025-04-15T08:07:18.1599055Z       background: linear-gradient(90deg,
2025-04-15T08:07:18.1599298Z           rgba(0, 0, 0, 1) 0%,
2025-04-15T08:07:18.1599513Z           rgb(0 19 7 / 76%) 100%);
2025-04-15T08:07:18.1599726Z     }
2025-04-15T08:07:18.1599813Z 
2025-04-15T08:07:18.1599908Z     body.netdata-splash .setup>.stats {
2025-04-15T08:07:18.1600143Z       padding: 16px;
2025-04-15T08:07:18.1600339Z       overflow: auto;
2025-04-15T08:07:18.1600529Z       height: 100%;
2025-04-15T08:07:18.1600716Z       position: absolute;
2025-04-15T08:07:18.1600906Z       top: 65px;
2025-04-15T08:07:18.1601082Z       left: 0;
2025-04-15T08:07:18.1601252Z       right: 0;
2025-04-15T08:07:18.1601427Z       bottom: 0;
2025-04-15T08:07:18.1601596Z     }
2025-04-15T08:07:18.1601682Z 
2025-04-15T08:07:18.1601775Z     body.netdata-splash .setup .header {
2025-04-15T08:07:18.1602018Z       position: sticky;
2025-04-15T08:07:18.1602207Z       top: 0;
2025-04-15T08:07:18.1602388Z       padding: 8px 16px;
2025-04-15T08:07:18.1602801Z       margin: 0;
2025-04-15T08:07:18.1603076Z       backdrop-filter: blur(8px);
2025-04-15T08:07:18.1603408Z       background: rgba(0, 0, 0, 0.1);
2025-04-15T08:07:18.1603826Z       /* border-bottom: 1px solid var(--border); */
2025-04-15T08:07:18.1604199Z       display: flex;
2025-04-15T08:07:18.1604472Z       align-items: center;
2025-04-15T08:07:18.1604976Z       justify-content: space-between;
2025-04-15T08:07:18.1634389Z     }
2025-04-15T08:07:18.1634607Z 
2025-04-15T08:07:18.1634795Z     body.netdata-splash .header .title {
2025-04-15T08:07:18.1635262Z       display: flex;
2025-04-15T08:07:18.1635631Z       align-items: center;
2025-04-15T08:07:18.1635970Z       gap: 8px;
2025-04-15T08:07:18.1636498Z     }
2025-04-15T08:07:18.1636652Z 
2025-04-15T08:07:18.1636805Z     body.netdata-splash .header .logo {
2025-04-15T08:07:18.1637197Z       width: 32px;
2025-04-15T08:07:18.1637502Z       height: auto;
2025-04-15T08:07:18.1637791Z     }
2025-04-15T08:07:18.1637945Z 
2025-04-15T08:07:18.1638108Z     body.netdata-splash .splash-message {
2025-04-15T08:07:18.1638574Z       position: absolute;
2025-04-15T08:07:18.1638933Z       inset: 0;
2025-04-15T08:07:18.1639264Z       margin: auto;
2025-04-15T08:07:18.1639560Z       display: flex;
2025-04-15T08:07:18.1639892Z       align-items: center;
2025-04-15T08:07:18.1640240Z       justify-content: center;
2025-04-15T08:07:18.1640654Z       flex-direction: column;
2025-04-15T08:07:18.1641016Z       overflow-y: auto;
2025-04-15T08:07:18.1641309Z     }
2025-04-15T08:07:18.1641458Z 
2025-04-15T08:07:18.1641632Z     body.netdata-splash .splash-message p {
2025-04-15T08:07:18.1642053Z       margin-top: 0;
2025-04-15T08:07:18.1642374Z       margin-bottom: 24px;
2025-04-15T08:07:18.1642727Z       color: var(--text-light);
2025-04-15T08:07:18.1643079Z       filter: blur(0.6px);
2025-04-15T08:07:18.1643395Z     }
2025-04-15T08:07:18.1643547Z 
2025-04-15T08:07:18.1643694Z     body.netdata-splash .tagline {
2025-04-15T08:07:18.1644083Z       position: absolute;
2025-04-15T08:07:18.1644409Z       bottom: 24px;
2025-04-15T08:07:18.1644705Z       font-size: 12px;
2025-04-15T08:07:18.1645081Z       color: var(--text-light);
2025-04-15T08:07:18.1645636Z     }
2025-04-15T08:07:18.1645787Z 
2025-04-15T08:07:18.1645946Z     body.netdata-splash .skip-link {
2025-04-15T08:07:18.1646533Z       font-size: 12px;
2025-04-15T08:07:18.1646851Z       color: var(--text-light);
2025-04-15T08:07:18.1647214Z       text-align: center;
2025-04-15T08:07:18.1647524Z     }
2025-04-15T08:07:18.1647669Z 
2025-04-15T08:07:18.1647827Z     body.netdata-splash .license-link {
2025-04-15T08:07:18.1648229Z       padding: 0 16px 4px;
2025-04-15T08:07:18.1648551Z       font-size: 12px;
2025-04-15T08:07:18.1648876Z       color: var(--text-light);
2025-04-15T08:07:18.1649196Z     }
2025-04-15T08:07:18.1649328Z 
2025-04-15T08:07:18.1649457Z     body.netdata-splash .button {
2025-04-15T08:07:18.1649804Z       padding: 8px 12px;
2025-04-15T08:07:18.1650110Z       border-radius: 2px;
2025-04-15T08:07:18.1650426Z       font-size: 16px;
2025-04-15T08:07:18.1650638Z       min-width: 88px;
2025-04-15T08:07:18.1650842Z       text-align: center;
2025-04-15T08:07:18.1651044Z       cursor: pointer;
2025-04-15T08:07:18.1651236Z       transition: 250ms ease;
2025-04-15T08:07:18.1651442Z       border: none;
2025-04-15T08:07:18.1651616Z     }
2025-04-15T08:07:18.1651703Z 
2025-04-15T08:07:18.1651815Z     body.netdata-splash .button-primary {
2025-04-15T08:07:18.1652075Z       background: var(--primary);
2025-04-15T08:07:18.1652316Z       color: var(--text-light);
2025-04-15T08:07:18.1652530Z     }
2025-04-15T08:07:18.1652622Z 
2025-04-15T08:07:18.1652744Z     body.netdata-splash .button-primary:hover {
2025-04-15T08:07:18.1653021Z       background: var(--highlight);
2025-04-15T08:07:18.1653239Z     }
2025-04-15T08:07:18.1653330Z 
2025-04-15T08:07:18.1653418Z     body.netdata-splash a.button {
2025-04-15T08:07:18.1653650Z       color: var(--text-dark);
2025-04-15T08:07:18.1653847Z     }
2025-04-15T08:07:18.1653930Z 
2025-04-15T08:07:18.1654027Z     body.netdata-splash .button-ghost {
2025-04-15T08:07:18.1654288Z       background: transparent;
2025-04-15T08:07:18.1654505Z       color: var(--primary);
2025-04-15T08:07:18.1654826Z     }
2025-04-15T08:07:18.1654972Z 
2025-04-15T08:07:18.1655145Z     body.netdata-splash .button-ghost:hover {
2025-04-15T08:07:18.1655573Z       color: var(--highlight);
2025-04-15T08:07:18.1656219Z     }
2025-04-15T08:07:18.1656373Z 
2025-04-15T08:07:18.1656473Z     body.netdata-splash .clear-button {
2025-04-15T08:07:18.1656717Z       font-size: 12px;
2025-04-15T08:07:18.1656909Z       padding: 0;
2025-04-15T08:07:18.1657090Z       min-width: auto;
2025-04-15T08:07:18.1657263Z     }
2025-04-15T08:07:18.1657346Z 
2025-04-15T08:07:18.1657430Z     body.netdata-splash .tabs {
2025-04-15T08:07:18.1657641Z       display: flex;
2025-04-15T08:07:18.1657829Z       align-items: center;
2025-04-15T08:07:18.1658035Z       justify-content: center;
2025-04-15T08:07:18.1658258Z       border-top: 1px solid var(--border);
2025-04-15T08:07:18.1658510Z       backdrop-filter: blur(4px);
2025-04-15T08:07:18.1658722Z     }
2025-04-15T08:07:18.1658814Z 
2025-04-15T08:07:18.1658911Z     body.netdata-splash button.tab {
2025-04-15T08:07:18.1659148Z       background: rgba(0, 0, 0, 0.2);
2025-04-15T08:07:18.1659363Z       border: none;
2025-04-15T08:07:18.1659546Z       color: var(--menu-item);
2025-04-15T08:07:18.1659764Z       padding: 8px 0 24px;
2025-04-15T08:07:18.1659968Z       border-left: 0;
2025-04-15T08:07:18.1660164Z       cursor: pointer;
2025-04-15T08:07:18.1660359Z       backdrop-filter: blur(2px);
2025-04-15T08:07:18.1660576Z       width: 100%;
2025-04-15T08:07:18.1660752Z       font-size: 12px;
2025-04-15T08:07:18.1660932Z       display: flex;
2025-04-15T08:07:18.1661120Z       flex-direction: column;
2025-04-15T08:07:18.1661324Z       align-items: center;
2025-04-15T08:07:18.1661519Z       gap: 8px;
2025-04-15T08:07:18.1661687Z     }
2025-04-15T08:07:18.1661774Z 
2025-04-15T08:07:18.1661891Z     body.netdata-splash button.tab:first-child {
2025-04-15T08:07:18.1662196Z       /* border-left: 1px solid var(--primary); */
2025-04-15T08:07:18.1662445Z     }
2025-04-15T08:07:18.1662674Z 
2025-04-15T08:07:18.1662799Z     body.netdata-splash button.tab:not(.active):hover {
2025-04-15T08:07:18.1663073Z       color: var(--tab-hover);
2025-04-15T08:07:18.1663278Z       transition: 100ms ease;
2025-04-15T08:07:18.1663468Z     }
2025-04-15T08:07:18.1663554Z 
2025-04-15T08:07:18.1663654Z     body.netdata-splash button.tab.active {
2025-04-15T08:07:18.1663901Z       background: transparent;
2025-04-15T08:07:18.1664128Z       /* border-bottom: 1px solid transparent; */
2025-04-15T08:07:18.1664377Z       backdrop-filter: blur(0);
2025-04-15T08:07:18.1664582Z       color: var(--tab-active);
2025-04-15T08:07:18.1664778Z       cursor: default;
2025-04-15T08:07:18.1664951Z     }
2025-04-15T08:07:18.1665032Z 
2025-04-15T08:07:18.1665120Z     body.netdata-splash .tab-icon {
2025-04-15T08:07:18.1665340Z       width: 24px;
2025-04-15T08:07:18.1665507Z       height: 24px;
2025-04-15T08:07:18.1665672Z     }
2025-04-15T08:07:18.1665757Z 
2025-04-15T08:07:18.1665845Z     body.netdata-splash .tab-icon svg {
2025-04-15T08:07:18.1666245Z       height: 100%;
2025-04-15T08:07:18.1666420Z       width: 100%;
2025-04-15T08:07:18.1666576Z     }
2025-04-15T08:07:18.1666663Z 
2025-04-15T08:07:18.1666764Z     body.netdata-splash .tab-icon svg path {
2025-04-15T08:07:18.1667020Z       fill: var(--menu-item);
2025-04-15T08:07:18.1667223Z       transition: 100ms ease;
2025-04-15T08:07:18.1667410Z     }
2025-04-15T08:07:18.1667491Z 
2025-04-15T08:07:18.1667616Z     body.netdata-splash .tab.active .tab-icon svg path {
2025-04-15T08:07:18.1667894Z       fill: var(--tab-active);
2025-04-15T08:07:18.1668085Z     }
2025-04-15T08:07:18.1668165Z 
2025-04-15T08:07:18.1668259Z     button.tab:not(.active):hover svg path {
2025-04-15T08:07:18.1668332Z       fill: var(--tab-hover);
2025-04-15T08:07:18.1668392Z     }
2025-04-15T08:07:18.1668396Z 
2025-04-15T08:07:18.1668478Z     body.netdata-splash .panel {
2025-04-15T08:07:18.1668560Z       background: var(--panel-bg);
2025-04-15T08:07:18.1668634Z       padding: 16px;
2025-04-15T08:07:18.1668713Z       border-radius: 4px;
2025-04-15T08:07:18.1668799Z       border: 1px solid var(--border);
2025-04-15T08:07:18.1668878Z       backdrop-filter: blur(0px);
2025-04-15T08:07:18.1668945Z     }
2025-04-15T08:07:18.1669070Z 
2025-04-15T08:07:18.1669162Z     body.netdata-splash .panel-tab {
2025-04-15T08:07:18.1669240Z       border-radius: 0 0 4px 4px;
2025-04-15T08:07:18.1669315Z       border-top: 0;
2025-04-15T08:07:18.1669407Z       border-left: 1px solid var(--primary);
2025-04-15T08:07:18.1669505Z       border-bottom: 1px solid var(--primary);
2025-04-15T08:07:18.1669598Z       border-right: 1px solid var(--primary);
2025-04-15T08:07:18.1669673Z       padding: 4px 24px;
2025-04-15T08:07:18.1669747Z       display: none;
2025-04-15T08:07:18.1669815Z       height: 70%;
2025-04-15T08:07:18.1669888Z       overflow: auto;
2025-04-15T08:07:18.1669948Z     }
2025-04-15T08:07:18.1669952Z 
2025-04-15T08:07:18.1670041Z     body.netdata-splash .data-tab {
2025-04-15T08:07:18.1670110Z       display: block;
2025-04-15T08:07:18.1670182Z       opacity: 0;
2025-04-15T08:07:18.1670261Z       transition: 800ms ease;
2025-04-15T08:07:18.1670338Z       pointer-events: none;
2025-04-15T08:07:18.1670401Z     }
2025-04-15T08:07:18.1670410Z 
2025-04-15T08:07:18.1670506Z     body.netdata-splash .data-tab.active {
2025-04-15T08:07:18.1670573Z       opacity: 1;
2025-04-15T08:07:18.1670651Z       pointer-events: all;
2025-04-15T08:07:18.1670712Z     }
2025-04-15T08:07:18.1670716Z 
2025-04-15T08:07:18.1670819Z     body.netdata-splash .data-tab-container {
2025-04-15T08:07:18.1670901Z       position: absolute;
2025-04-15T08:07:18.1670968Z       left: 0;
2025-04-15T08:07:18.1671033Z       right: 0;
2025-04-15T08:07:18.1671099Z       top: 45%;
2025-04-15T08:07:18.1671176Z       /* height: 40vh; */
2025-04-15T08:07:18.1671237Z     }
2025-04-15T08:07:18.1671241Z 
2025-04-15T08:07:18.1671342Z     body.netdata-splash .system-container {
2025-04-15T08:07:18.1671411Z       overflow: auto;
2025-04-15T08:07:18.1671496Z       height: calc(100% - 330px);
2025-04-15T08:07:18.1671695Z       padding: 0 24px 24px;
2025-04-15T08:07:18.1671767Z       margin: 0 -24px;
2025-04-15T08:07:18.1671889Z       scrollbar-color: var(--scrollbar-thumb) #293030;
2025-04-15T08:07:18.1671971Z       scrollbar-width: thin;
2025-04-15T08:07:18.1672033Z     }
2025-04-15T08:07:18.1672042Z 
2025-04-15T08:07:18.1672174Z     body.netdata-splash .data-tab-container .system>div {
2025-04-15T08:07:18.1672243Z       display: flex;
2025-04-15T08:07:18.1672329Z       /* margin-bottom: 24px; */
2025-04-15T08:07:18.1672416Z       /* backdrop-filter: blur(1px); */
2025-04-15T08:07:18.1672488Z       height: auto;
2025-04-15T08:07:18.1672558Z       min-height: 40px;
2025-04-15T08:07:18.1672629Z       overflow: hidden;
2025-04-15T08:07:18.1672695Z     }
2025-04-15T08:07:18.1672699Z 
2025-04-15T08:07:18.1672846Z     body.netdata-splash .data-tab-container .system .key-value {
2025-04-15T08:07:18.1672928Z       flex-direction: column;
2025-04-15T08:07:18.1672993Z       gap: 8px;
2025-04-15T08:07:18.1673077Z       align-items: flex-start;
2025-04-15T08:07:18.1673157Z       justify-content: start;
2025-04-15T08:07:18.1673224Z       width: 100%;
2025-04-15T08:07:18.1673297Z       padding: 0;
2025-04-15T08:07:18.1673364Z     }
2025-04-15T08:07:18.1673367Z 
2025-04-15T08:07:18.1673577Z     body.netdata-splash .data-tab-container .system .key-value span:nth-child(1) {
2025-04-15T08:07:18.1673657Z       padding: 8px 16px;
2025-04-15T08:07:18.1673753Z       border-bottom: 1px solid var(--border);
2025-04-15T08:07:18.1673827Z       width: 100%;
2025-04-15T08:07:18.1673897Z       color: #8eae9b;
2025-04-15T08:07:18.1673986Z       background: rgba(0, 0, 0, 0.8);
2025-04-15T08:07:18.1674049Z     }
2025-04-15T08:07:18.1674053Z 
2025-04-15T08:07:18.1674251Z     body.netdata-splash .data-tab-container .system .key-value span:nth-child(2) {
2025-04-15T08:07:18.1674336Z       /* font-size: 16px; */
2025-04-15T08:07:18.1674415Z       padding: 4px 16px 12px;
2025-04-15T08:07:18.1674492Z       text-align: left;
2025-04-15T08:07:18.1674570Z       color: var(--accent);
2025-04-15T08:07:18.1674635Z     }
2025-04-15T08:07:18.1674639Z 
2025-04-15T08:07:18.1674733Z     body.netdata-splash .panel:hover h4 {
2025-04-15T08:07:18.1674812Z       color: var(--highlight);
2025-04-15T08:07:18.1674966Z     }
2025-04-15T08:07:18.1674970Z 
2025-04-15T08:07:18.1675060Z     body.netdata-splash .hide-title h4 {
2025-04-15T08:07:18.1675144Z       visibility: hidden;
2025-04-15T08:07:18.1675207Z     }
2025-04-15T08:07:18.1675211Z 
2025-04-15T08:07:18.1675328Z     body.netdata-splash .no-key span:first-child {
2025-04-15T08:07:18.1675400Z       display: none;
2025-04-15T08:07:18.1675462Z     }
2025-04-15T08:07:18.1675465Z 
2025-04-15T08:07:18.1675556Z     body.netdata-splash .no-title h4 {
2025-04-15T08:07:18.1675625Z       display: none;
2025-04-15T08:07:18.1675691Z     }
2025-04-15T08:07:18.1675695Z 
2025-04-15T08:07:18.1675789Z     body.netdata-splash .absolute-center {
2025-04-15T08:07:18.1675863Z       position: absolute;
2025-04-15T08:07:18.1675939Z       inset: 0;
2025-04-15T08:07:18.1676006Z       margin: auto;
2025-04-15T08:07:18.1676217Z     }
2025-04-15T08:07:18.1676225Z 
2025-04-15T08:07:18.1676380Z     body.netdata-splash .align-end {
2025-04-15T08:07:18.1676473Z       align-content: flex-end;
2025-04-15T08:07:18.1676537Z     }
2025-04-15T08:07:18.1676544Z 
2025-04-15T08:07:18.1676653Z     body.netdata-splash .panel-tab .separator {
2025-04-15T08:07:18.1676748Z       border-bottom: 1px solid var(--border);
2025-04-15T08:07:18.1676823Z       margin: 8px -24px;
2025-04-15T08:07:18.1676890Z     }
2025-04-15T08:07:18.1676893Z 
2025-04-15T08:07:18.1676983Z     body.netdata-splash .section-image {
2025-04-15T08:07:18.1677055Z       height: 16px;
2025-04-15T08:07:18.1677121Z       width: 16px;
2025-04-15T08:07:18.1677181Z     }
2025-04-15T08:07:18.1677185Z 
2025-04-15T08:07:18.1677286Z     body.netdata-splash .section-image svg {
2025-04-15T08:07:18.1677353Z       width: 100%;
2025-04-15T08:07:18.1677422Z       height: 100%;
2025-04-15T08:07:18.1677616Z     }
2025-04-15T08:07:18.1677620Z 
2025-04-15T08:07:18.1677712Z     body.netdata-splash .section-title {
2025-04-15T08:07:18.1677791Z       font-size: 14px;
2025-04-15T08:07:18.1677864Z       font-weight: bold;
2025-04-15T08:07:18.1677941Z       margin: 8px 0;
2025-04-15T08:07:18.1678019Z       display: inline-block;
2025-04-15T08:07:18.1678081Z     }
2025-04-15T08:07:18.1678089Z 
2025-04-15T08:07:18.1678203Z     body.netdata-splash .sphere-stats-container {
2025-04-15T08:07:18.1678269Z       width: 80%;
2025-04-15T08:07:18.1678342Z       height: 100vh;
2025-04-15T08:07:18.1678410Z       display: flex;
2025-04-15T08:07:18.1678489Z       align-items: center;
2025-04-15T08:07:18.1678567Z       flex-direction: column;
2025-04-15T08:07:18.1678644Z       justify-content: center;
2025-04-15T08:07:18.1678723Z       margin-bottom: 10vmin;
2025-04-15T08:07:18.1678789Z       gap: 16px;
2025-04-15T08:07:18.1678855Z     }
2025-04-15T08:07:18.1678859Z 
2025-04-15T08:07:18.1678945Z     body.netdata-splash .key-value {
2025-04-15T08:07:18.1679033Z       font-size: var(--font-small);
2025-04-15T08:07:18.1679113Z       display: flex;
2025-04-15T08:07:18.1679202Z       justify-content: space-between;
2025-04-15T08:07:18.1679288Z       align-items: center;
2025-04-15T08:07:18.1679361Z       padding: 8px 0;
2025-04-15T08:07:18.1679448Z       color: var(--key-value-table);
2025-04-15T08:07:18.1679510Z     }
2025-04-15T08:07:18.1679514Z 
2025-04-15T08:07:18.1679592Z     /* .key-value:nth-child(2n) {
2025-04-15T08:07:18.1679675Z       background: var(--row-2n);
2025-04-15T08:07:18.1679738Z     } */
2025-04-15T08:07:18.1679835Z     body.netdata-splash .key-value:hover {
2025-04-15T08:07:18.1679911Z       color: var(--highlight);
2025-04-15T08:07:18.1679972Z     }
2025-04-15T08:07:18.1679976Z 
2025-04-15T08:07:18.1680100Z     body.netdata-splash .key-value span:nth-child(2) {
2025-04-15T08:07:18.1680173Z       text-align: right;
2025-04-15T08:07:18.1680238Z     }
2025-04-15T08:07:18.1680242Z 
2025-04-15T08:07:18.1680343Z     body.netdata-splash .metrics-container {
2025-04-15T08:07:18.1680424Z       position: absolute;
2025-04-15T08:07:18.1680493Z       top: 150px;
2025-04-15T08:07:18.1680559Z     }
2025-04-15T08:07:18.1680563Z 
2025-04-15T08:07:18.1680819Z     body.netdata-splash .collected-metrics .key-value {
2025-04-15T08:07:18.1680898Z       flex-direction: column;
2025-04-15T08:07:18.1680976Z       align-items: center;
2025-04-15T08:07:18.1681055Z       justify-content: center;
2025-04-15T08:07:18.1681127Z       background: none;
2025-04-15T08:07:18.1681205Z       text-align: center;
2025-04-15T08:07:18.1681288Z       text-transform: uppercase;
2025-04-15T08:07:18.1681366Z       font-size: 12px;
2025-04-15T08:07:18.1681439Z       color: var(--text);
2025-04-15T08:07:18.1681508Z     }
2025-04-15T08:07:18.1681512Z 
2025-04-15T08:07:18.1681695Z     body.netdata-splash .collected-metrics .key-value span:nth-child(2) {
2025-04-15T08:07:18.1681769Z       font-size: 7vmin;
2025-04-15T08:07:18.1681848Z       font-weight: 700;
2025-04-15T08:07:18.1681928Z       color: rgb(254 254 254 / 80%);
2025-04-15T08:07:18.1682007Z       filter: blur(0.8px);
2025-04-15T08:07:18.1682078Z       text-align: center;
2025-04-15T08:07:18.1682140Z     }
2025-04-15T08:07:18.1682156Z 
2025-04-15T08:07:18.1682248Z     #server .key-value span:first-child,
2025-04-15T08:07:18.1682343Z     #package .key-value span:first-child {
2025-04-15T08:07:18.1682419Z       display: none;
2025-04-15T08:07:18.1682480Z     }
2025-04-15T08:07:18.1682484Z 
2025-04-15T08:07:18.1682577Z     #server .key-value span:nth-child(2),
2025-04-15T08:07:18.1682670Z     #package .key-value span:nth-child(2) {
2025-04-15T08:07:18.1682743Z       font-size: 12px;
2025-04-15T08:07:18.1682824Z       color: var(--primary);
2025-04-15T08:07:18.1682900Z       font-family: monospace;
2025-04-15T08:07:18.1682965Z     }
2025-04-15T08:07:18.1682969Z 
2025-04-15T08:07:18.1683056Z     body.netdata-splash .head-summary {
2025-04-15T08:07:18.1683127Z       left: 0;
2025-04-15T08:07:18.1683282Z       padding: 16px;
2025-04-15T08:07:18.1683347Z       right: 0;
2025-04-15T08:07:18.1683420Z       display: flex;
2025-04-15T08:07:18.1683494Z       flex-direction: row;
2025-04-15T08:07:18.1683586Z       justify-content: space-between;
2025-04-15T08:07:18.1683652Z     }
2025-04-15T08:07:18.1683656Z 
2025-04-15T08:07:18.1683738Z     body.netdata-splash .module {
2025-04-15T08:07:18.1683826Z       border: 2px solid var(--border);
2025-04-15T08:07:18.1683900Z       border-radius: 16px;
2025-04-15T08:07:18.1684054Z       box-shadow: -1px 1px var(--main-bg), -2px 2px var(--main-bg),
2025-04-15T08:07:18.1684174Z         -3px 3px var(--border), -4px 4px 24px var(--border);
2025-04-15T08:07:18.1684257Z       height: var(--module-height);
2025-04-15T08:07:18.1684333Z       overflow: auto;
2025-04-15T08:07:18.1684445Z       scrollbar-color: var(--scrollbar-thumb) #293030;
2025-04-15T08:07:18.1684529Z       scrollbar-width: thin;
2025-04-15T08:07:18.1684617Z       /* backdrop-filter: blur(2px); */
2025-04-15T08:07:18.1684688Z     }
2025-04-15T08:07:18.1684692Z 
2025-04-15T08:07:18.1684781Z     body.netdata-splash .module-header {
2025-04-15T08:07:18.1684849Z       display: flex;
2025-04-15T08:07:18.1684926Z       align-items: center;
2025-04-15T08:07:18.1684996Z       gap: 4px;
2025-04-15T08:07:18.1685075Z       padding: 4px 16px;
2025-04-15T08:07:18.1685155Z       background: rgba(0, 0, 0, 0.8);
2025-04-15T08:07:18.1685235Z       border-radius: 16px 16px 0 0;
2025-04-15T08:07:18.1685310Z       color: #8eae9b;
2025-04-15T08:07:18.1685405Z       border-bottom: 1px solid var(--border);
2025-04-15T08:07:18.1685485Z       position: sticky;
2025-04-15T08:07:18.1685552Z       top: 0;
2025-04-15T08:07:18.1685618Z     }
2025-04-15T08:07:18.1685622Z 
2025-04-15T08:07:18.1685732Z     body.netdata-splash .module-header svg path {
2025-04-15T08:07:18.1685805Z       fill: var(--accent);
2025-04-15T08:07:18.1685873Z     }
2025-04-15T08:07:18.1685877Z 
2025-04-15T08:07:18.1685975Z     body.netdata-splash .modules-container {
2025-04-15T08:07:18.1686198Z       max-height: 100%;
2025-04-15T08:07:18.1686323Z       text-align: center;
2025-04-15T08:07:18.1686437Z       margin: auto;
2025-04-15T08:07:18.1686572Z       column-gap: 24px;
2025-04-15T08:07:18.1686846Z     }
2025-04-15T08:07:18.1686851Z 
2025-04-15T08:07:18.1686952Z     body.netdata-splash .module-content {
2025-04-15T08:07:18.1687025Z       padding: 4px 16px;
2025-04-15T08:07:18.1687093Z     }
2025-04-15T08:07:18.1687097Z 
2025-04-15T08:07:18.1687202Z     body.netdata-splash .db-metrics-container {
2025-04-15T08:07:18.1687272Z       display: flex;
2025-04-15T08:07:18.1687353Z       justify-content: center;
2025-04-15T08:07:18.1687420Z       gap: 16px;
2025-04-15T08:07:18.1687484Z     }
2025-04-15T08:07:18.1687489Z 
2025-04-15T08:07:18.1687583Z     body.netdata-splash .db-metrics-blocks {
2025-04-15T08:07:18.1687655Z       /* display: flex; */
2025-04-15T08:07:18.1687740Z       /* flex-direction: column; */
2025-04-15T08:07:18.1687813Z       /* align-items: center;
2025-04-15T08:07:18.1687901Z       justify-content: center;
2025-04-15T08:07:18.1687968Z       gap: 24px; */
2025-04-15T08:07:18.1688054Z       height: var(--module-height);
2025-04-15T08:07:18.1688120Z       width: 100%;
2025-04-15T08:07:18.1688188Z     }
2025-04-15T08:07:18.1688192Z 
2025-04-15T08:07:18.1688270Z     /* .db-metrics-block {
2025-04-15T08:07:18.1688337Z       display: flex;
2025-04-15T08:07:18.1688417Z       flex-direction: column;
2025-04-15T08:07:18.1688490Z       text-align: center;
2025-04-15T08:07:18.1688562Z       min-width: 15vmax;
2025-04-15T08:07:18.1688635Z       height: 150px;
2025-04-15T08:07:18.1688705Z       padding: 0 24px;
2025-04-15T08:07:18.1688772Z     } */
2025-04-15T08:07:18.1688908Z     body.netdata-splash .db-metrics-blocks .module-content {
2025-04-15T08:07:18.1688977Z       padding: 0;
2025-04-15T08:07:18.1689044Z     }
2025-04-15T08:07:18.1689048Z 
2025-04-15T08:07:18.1689138Z     /* .db-metrics-block:not(:last-child) {
2025-04-15T08:07:18.1689233Z       border-right: 1px solid var(--border);
2025-04-15T08:07:18.1689414Z     } */
2025-04-15T08:07:18.1689512Z     body.netdata-splash .db-metrics-title {
2025-04-15T08:07:18.1689582Z       font-size: 1.5vmin;
2025-04-15T08:07:18.1689643Z     }
2025-04-15T08:07:18.1689654Z 
2025-04-15T08:07:18.1689769Z     body.netdata-splash .db-metrics-block-title {
2025-04-15T08:07:18.1689839Z       font-size: 14px;
2025-04-15T08:07:18.1689916Z       padding: 8px 16px;
2025-04-15T08:07:18.1689985Z       z-index: 100;
2025-04-15T08:07:18.1690057Z       font-weight: bold;
2025-04-15T08:07:18.1690128Z       color: #fff;
2025-04-15T08:07:18.1690189Z     }
2025-04-15T08:07:18.1690192Z 
2025-04-15T08:07:18.1690299Z     body.netdata-splash .db-metrics .key-value {
2025-04-15T08:07:18.1690367Z       display: flex;
2025-04-15T08:07:18.1690449Z       flex-direction: column;
2025-04-15T08:07:18.1690525Z       align-items: flex-start;
2025-04-15T08:07:18.1690586Z     }
2025-04-15T08:07:18.1690590Z 
2025-04-15T08:07:18.1690750Z     body.netdata-splash .db-metrics .key-value span:nth-child(2) {
2025-04-15T08:07:18.1690825Z       font-size: 12px;
2025-04-15T08:07:18.1690903Z       color: var(--accent);
2025-04-15T08:07:18.1690975Z       filter: blur(0.5px);
2025-04-15T08:07:18.1691046Z       text-align: center;
2025-04-15T08:07:18.1691120Z     }
2025-04-15T08:07:18.1691123Z 
2025-04-15T08:07:18.1691210Z     body.netdata-splash .db-metrics {
2025-04-15T08:07:18.1691287Z       padding: 8px 16px;
2025-04-15T08:07:18.1691378Z       border-bottom: 1px solid var(--border);
2025-04-15T08:07:18.1691444Z     }
2025-04-15T08:07:18.1691448Z 
2025-04-15T08:07:18.1691534Z     body.netdata-splash .disk-stats {
2025-04-15T08:07:18.1691610Z       /* border-bottom: 0; */
2025-04-15T08:07:18.1691684Z       padding: 16px;
2025-04-15T08:07:18.1691744Z     }
2025-04-15T08:07:18.1691747Z 
2025-04-15T08:07:18.1691899Z     body.netdata-splash .module-content:last-child .disk-stats {
2025-04-15T08:07:18.1691978Z       padding-bottom: 112px;
2025-04-15T08:07:18.1692043Z     }
2025-04-15T08:07:18.1692052Z 
2025-04-15T08:07:18.1692152Z     body.netdata-splash .disk-max .key-value {
2025-04-15T08:07:18.1692225Z       flex-direction: row;
2025-04-15T08:07:18.1692299Z       font-size: 12px;
2025-04-15T08:07:18.1692382Z       justify-content: space-between;
2025-04-15T08:07:18.1692550Z       padding: 2px 0;
2025-04-15T08:07:18.1692611Z     }
2025-04-15T08:07:18.1692614Z 
2025-04-15T08:07:18.1692753Z     body.netdata-splash .disk-max .key-value span:nth-child(2) {
2025-04-15T08:07:18.1692828Z       font-size: 12px;
2025-04-15T08:07:18.1692896Z       display: flex;
2025-04-15T08:07:18.1692984Z       justify-content: space-between;
2025-04-15T08:07:18.1693051Z       width: 100%;
2025-04-15T08:07:18.1693116Z     }
2025-04-15T08:07:18.1693119Z 
2025-04-15T08:07:18.1693217Z     body.netdata-splash .disk-used .key-value {
2025-04-15T08:07:18.1693288Z       padding: 2px 0;
2025-04-15T08:07:18.1693355Z     }
2025-04-15T08:07:18.1693359Z 
2025-04-15T08:07:18.1693525Z     body.netdata-splash .disk-max .key-value span:nth-child(2):before {
2025-04-15T08:07:18.1693610Z       content: "Disk Size";
2025-04-15T08:07:18.1693671Z     }
2025-04-15T08:07:18.1693674Z 
2025-04-15T08:07:18.1693846Z     body.netdata-splash .disk-used .key-value span:nth-child(2):before {
2025-04-15T08:07:18.1693922Z       content: "Used ";
2025-04-15T08:07:18.1693982Z     }
2025-04-15T08:07:18.1693986Z 
2025-04-15T08:07:18.1694136Z     body.netdata-splash .disk-used .key-value span:nth-child(2) {
2025-04-15T08:07:18.1694208Z       font-size: 12px;
2025-04-15T08:07:18.1694280Z       display: flex;
2025-04-15T08:07:18.1694362Z       justify-content: space-between;
2025-04-15T08:07:18.1694424Z       width: 100%;
2025-04-15T08:07:18.1694489Z     }
2025-04-15T08:07:18.1694492Z 
2025-04-15T08:07:18.1694637Z     body.netdata-splash .db-metrics .key-value span:first-child {
2025-04-15T08:07:18.1694709Z       font-size: 12px;
2025-04-15T08:07:18.1694778Z       color: var(--text);
2025-04-15T08:07:18.1694840Z     }
2025-04-15T08:07:18.1694844Z 
2025-04-15T08:07:18.1695036Z     body.netdata-splash .percentage-container {
2025-04-15T08:07:18.1695101Z       width: 100%;
2025-04-15T08:07:18.1695187Z       background: transparent;
2025-04-15T08:07:18.1695272Z       border: 1px solid var(--primary);
2025-04-15T08:07:18.1695351Z       height: 16px;
2025-04-15T08:07:18.1695420Z       border-radius: 1px;
2025-04-15T08:07:18.1695497Z       position: relative;
2025-04-15T08:07:18.1695555Z     }
2025-04-15T08:07:18.1695558Z 
2025-04-15T08:07:18.1695646Z     body.netdata-splash .percentage-bar {
2025-04-15T08:07:18.1695724Z       background: #016a2b94;
2025-04-15T08:07:18.1695795Z       position: absolute;
2025-04-15T08:07:18.1695867Z       bottom: 0;
2025-04-15T08:07:18.1695927Z       top: 0;
2025-04-15T08:07:18.1695989Z       left: 0;
2025-04-15T08:07:18.1696216Z       backdrop-filter: blur(1px);
2025-04-15T08:07:18.1696324Z     }
2025-04-15T08:07:18.1696331Z 
2025-04-15T08:07:18.1696479Z     body.netdata-splash .percentage-text {
2025-04-15T08:07:18.1696556Z       position: absolute;
2025-04-15T08:07:18.1696636Z       font-size: 12px;
2025-04-15T08:07:18.1696697Z       top: 0;
2025-04-15T08:07:18.1696767Z       padding: 0 2px;
2025-04-15T08:07:18.1696936Z       color: var(--accent);
2025-04-15T08:07:18.1697004Z     }
2025-04-15T08:07:18.1697008Z 
2025-04-15T08:07:18.1697101Z     body.netdata-splash .data-tab-table {
2025-04-15T08:07:18.1697169Z       padding: 16px;
2025-04-15T08:07:18.1697233Z       width: 400px;
2025-04-15T08:07:18.1697317Z       height: var(--module-height);
2025-04-15T08:07:18.1697383Z       margin: auto;
2025-04-15T08:07:18.1697443Z     }
2025-04-15T08:07:18.1697447Z 
2025-04-15T08:07:18.1697548Z     body.netdata-splash .node-info-container {
2025-04-15T08:07:18.1697619Z       display: flex;
2025-04-15T08:07:18.1697695Z       flex-direction: column;
2025-04-15T08:07:18.1697760Z       width: 100%;
2025-04-15T08:07:18.1697840Z       justify-content: center;
2025-04-15T08:07:18.1697916Z       align-items: center;
2025-04-15T08:07:18.1697989Z       gap: 8px;
2025-04-15T08:07:18.1698053Z     }
2025-04-15T08:07:18.1698056Z 
2025-04-15T08:07:18.1698143Z     body.netdata-splash .node-info {
2025-04-15T08:07:18.1698216Z       display: flex;
2025-04-15T08:07:18.1698293Z       justify-content: center;
2025-04-15T08:07:18.1698520Z       width: 100%;
2025-04-15T08:07:18.1698586Z       gap: 8px;
2025-04-15T08:07:18.1698659Z       flex-direction: row;
2025-04-15T08:07:18.1698722Z     }
2025-04-15T08:07:18.1698726Z 
2025-04-15T08:07:18.1698849Z     body.netdata-splash .node-info-container .title {
2025-04-15T08:07:18.1698924Z       font-size: 12px;
2025-04-15T08:07:18.1698986Z     }
2025-04-15T08:07:18.1698989Z 
2025-04-15T08:07:18.1699091Z     body.netdata-splash .node-info .key-value {
2025-04-15T08:07:18.1699178Z       border: 1px solid var(--highlight);
2025-04-15T08:07:18.1699249Z       padding: 2px 8px;
2025-04-15T08:07:18.1699331Z       border-radius: 4px;
2025-04-15T08:07:18.1699400Z       font-size: 12px;
2025-04-15T08:07:18.1699477Z       color: var(--highlight);
2025-04-15T08:07:18.1699550Z       height: 20px;
2025-04-15T08:07:18.1699609Z     }
2025-04-15T08:07:18.1699612Z 
2025-04-15T08:07:18.1699759Z     body.netdata-splash .node-info .key-value span:first-child {
2025-04-15T08:07:18.1699835Z       margin-right: 4px;
2025-04-15T08:07:18.1699907Z       font-weight: normal;
2025-04-15T08:07:18.1699965Z     }
2025-04-15T08:07:18.1699969Z 
2025-04-15T08:07:18.1700058Z     body.netdata-splash .availability {
2025-04-15T08:07:18.1700128Z       text-align: right;
2025-04-15T08:07:18.1700201Z       font-family: monospace;
2025-04-15T08:07:18.1700270Z       display: flex;
2025-04-15T08:07:18.1700341Z       flex-direction: column;
2025-04-15T08:07:18.1700423Z       text-transform: capitalize;
2025-04-15T08:07:18.1700492Z       padding: 8px 16px;
2025-04-15T08:07:18.1700558Z       color: #fff;
2025-04-15T08:07:18.1700628Z       font-size: 12px;
2025-04-15T08:07:18.1700688Z     }
2025-04-15T08:07:18.1700691Z 
2025-04-15T08:07:18.1700805Z     body.netdata-splash .availability .key-valye {
2025-04-15T08:07:18.1700990Z       padding: 4px 0;
2025-04-15T08:07:18.1701056Z     }
2025-04-15T08:07:18.1701060Z 
2025-04-15T08:07:18.1701147Z     body.netdata-splash .sub-module {
2025-04-15T08:07:18.1701213Z       width: 100%;
2025-04-15T08:07:18.1701284Z     }
2025-04-15T08:07:18.1701288Z 
2025-04-15T08:07:18.1701369Z     body.netdata-splash .hardware {
2025-04-15T08:07:18.1701448Z       flex-direction: column;
2025-04-15T08:07:18.1701508Z     }
2025-04-15T08:07:18.1701512Z 
2025-04-15T08:07:18.1701625Z     body.netdata-splash .hardware .module-content {
2025-04-15T08:07:18.1701693Z       padding: 0;
2025-04-15T08:07:18.1701761Z       display: flex;
2025-04-15T08:07:18.1701827Z     }
2025-04-15T08:07:18.1701830Z 
2025-04-15T08:07:18.1701961Z     body.netdata-splash .module.has-title .section-title {
2025-04-15T08:07:18.1702047Z       padding-bottom: 12px;
2025-04-15T08:07:18.1702119Z       margin-bottom: 0;
2025-04-15T08:07:18.1702180Z     }
2025-04-15T08:07:18.1702183Z 
2025-04-15T08:07:18.1702274Z     body.netdata-splash .h-auto {
2025-04-15T08:07:18.1702341Z       height: auto;
2025-04-15T08:07:18.1702406Z     }
2025-04-15T08:07:18.1702410Z 
2025-04-15T08:07:18.1702493Z     body.netdata-splash .none {
2025-04-15T08:07:18.1702569Z       display: none;
2025-04-15T08:07:18.1702629Z     }
2025-04-15T08:07:18.1702632Z 
2025-04-15T08:07:18.1702724Z     body.netdata-splash .claim-message {
2025-04-15T08:07:18.1702806Z       position: absolute;
2025-04-15T08:07:18.1702869Z       top: 0;
2025-04-15T08:07:18.1702942Z       left: 0;
2025-04-15T08:07:18.1703006Z       right: 0;
2025-04-15T08:07:18.1703075Z       margin: auto;
2025-04-15T08:07:18.1703150Z       padding: 0 24px;
2025-04-15T08:07:18.1703222Z       overflow-y: auto;
2025-04-15T08:07:18.1703288Z     }
2025-04-15T08:07:18.1703291Z 
2025-04-15T08:07:18.1703397Z     body.netdata-splash .claim-message .welcome {
2025-04-15T08:07:18.1703473Z       padding: 16px 0;
2025-04-15T08:07:18.1703544Z       text-align: center;
2025-04-15T08:07:18.1703606Z     }
2025-04-15T08:07:18.1703615Z 
2025-04-15T08:07:18.1703710Z     body.netdata-splash .text-center {
2025-04-15T08:07:18.1703781Z       text-align: center;
2025-04-15T08:07:18.1703846Z     }
2025-04-15T08:07:18.1703849Z 
2025-04-15T08:07:18.1704030Z     body.netdata-splash .connection-modal {
2025-04-15T08:07:18.1704110Z       background: rgba(0, 0, 0, 0.4);
2025-04-15T08:07:18.1704197Z       border: 1px solid var(--border);
2025-04-15T08:07:18.1704270Z       padding: 16px 16px;
2025-04-15T08:07:18.1704339Z       display: flex;
2025-04-15T08:07:18.1704412Z       flex-direction: column;
2025-04-15T08:07:18.1704483Z       gap: 12px;
2025-04-15T08:07:18.1704555Z       position: relative;
2025-04-15T08:07:18.1704624Z       font-size: 14px;
2025-04-15T08:07:18.1704689Z     }
2025-04-15T08:07:18.1704693Z 
2025-04-15T08:07:18.1704786Z     body.netdata-splash .connection-step {
2025-04-15T08:07:18.1704859Z       display: flex;
2025-04-15T08:07:18.1704933Z       flex-direction: column;
2025-04-15T08:07:18.1705006Z       gap: 12px;
2025-04-15T08:07:18.1705093Z       position: relative;
2025-04-15T08:07:18.1705172Z       min-height: 300px;
2025-04-15T08:07:18.1705232Z     }
2025-04-15T08:07:18.1705236Z 
2025-04-15T08:07:18.1705328Z     body.netdata-splash .dropdown-custom {
2025-04-15T08:07:18.1705406Z       display: flex;
2025-04-15T08:07:18.1705482Z       flex-direction: column;
2025-04-15T08:07:18.1705551Z       gap: 12px;
2025-04-15T08:07:18.1705622Z       position: relative;
2025-04-15T08:07:18.1705682Z     }
2025-04-15T08:07:18.1705694Z 
2025-04-15T08:07:18.1705781Z     body.netdata-splash .modal-footer {
2025-04-15T08:07:18.1705861Z       height: var(--footer-height);
2025-04-15T08:07:18.1705938Z       padding: 10px 0 0;
2025-04-15T08:07:18.1706005Z       display: flex;
2025-04-15T08:07:18.1706287Z       justify-content: space-between;
2025-04-15T08:07:18.1706353Z     }
2025-04-15T08:07:18.1706357Z 
2025-04-15T08:07:18.1706459Z     body.netdata-splash .modal-footer .button {
2025-04-15T08:07:18.1706534Z       height: 32px;
2025-04-15T08:07:18.1706747Z       font-size: 14px;
2025-04-15T08:07:18.1706810Z     }
2025-04-15T08:07:18.1706813Z 
2025-04-15T08:07:18.1706903Z     body.netdata-splash .list-options {
2025-04-15T08:07:18.1706971Z       margin: 0;
2025-04-15T08:07:18.1707041Z       padding: 0;
2025-04-15T08:07:18.1707112Z       list-style: none;
2025-04-15T08:07:18.1707187Z       height: 300px;
2025-04-15T08:07:18.1707255Z       overflow: auto;
2025-04-15T08:07:18.1707373Z       scrollbar-color: var(--scrollbar-thumb) #293030;
2025-04-15T08:07:18.1707451Z       scrollbar-width: thin;
2025-04-15T08:07:18.1707511Z     }
2025-04-15T08:07:18.1707515Z 
2025-04-15T08:07:18.1707612Z     body.netdata-splash .list-options li {
2025-04-15T08:07:18.1707684Z       padding: 8px 12px;
2025-04-15T08:07:18.1707778Z       background: var(--list-option-bg);
2025-04-15T08:07:18.1707871Z       border: 1px solid var(--border-neutral);
2025-04-15T08:07:18.1707945Z       margin-bottom: 12px;
2025-04-15T08:07:18.1708016Z       cursor: pointer;
2025-04-15T08:07:18.1708079Z     }
2025-04-15T08:07:18.1708083Z 
2025-04-15T08:07:18.1708202Z     body.netdata-splash .list-options li:hover {
2025-04-15T08:07:18.1708298Z       background: var(--list-option-hover-bg);
2025-04-15T08:07:18.1708369Z     }
2025-04-15T08:07:18.1708373Z 
2025-04-15T08:07:18.1708483Z     body.netdata-splash .list-options li.selected {
2025-04-15T08:07:18.1708588Z       background: var(--list-option-selected-bg);
2025-04-15T08:07:18.1708670Z       color: var(--highlight);
2025-04-15T08:07:18.1708739Z       display: flex;
2025-04-15T08:07:18.1708828Z       justify-content: space-between;
2025-04-15T08:07:18.1708889Z     }
2025-04-15T08:07:18.1708892Z 
2025-04-15T08:07:18.1709026Z     body.netdata-splash .list-options li.selected:after {
2025-04-15T08:07:18.1709095Z       content: "\2713";
2025-04-15T08:07:18.1709167Z       margin-left: 2px;
2025-04-15T08:07:18.1709232Z     }
2025-04-15T08:07:18.1709236Z 
2025-04-15T08:07:18.1709330Z     body.netdata-splash input[type="text"] {
2025-04-15T08:07:18.1709416Z       background: #2d3535;
2025-04-15T08:07:18.1709488Z       padding: 4px 8px;
2025-04-15T08:07:18.1709556Z       border: 0;
2025-04-15T08:07:18.1709630Z       font-size: 14px;
2025-04-15T08:07:18.1709823Z       min-height: 28px;
2025-04-15T08:07:18.1709899Z       color: var(--text);
2025-04-15T08:07:18.1709977Z       border-radius: 2px;
2025-04-15T08:07:18.1710038Z     }
2025-04-15T08:07:18.1710047Z 
2025-04-15T08:07:18.1710158Z     body.netdata-splash input[type="text"]:focus {
2025-04-15T08:07:18.1710243Z       outline: 1px solid var(--border);
2025-04-15T08:07:18.1710310Z     }
2025-04-15T08:07:18.1710314Z 
2025-04-15T08:07:18.1710400Z     body.netdata-splash .dropdown {
2025-04-15T08:07:18.1710480Z       position: relative;
2025-04-15T08:07:18.1710547Z       width: auto;
2025-04-15T08:07:18.1710631Z       border: 1px solid var(--border);
2025-04-15T08:07:18.1710711Z       border-radius: 4px;
2025-04-15T08:07:18.1710780Z       padding: 8px;
2025-04-15T08:07:18.1710854Z       cursor: pointer;
2025-04-15T08:07:18.1710920Z     }
2025-04-15T08:07:18.1710923Z 
2025-04-15T08:07:18.1711022Z     body.netdata-splash .dropdown-toggle {
2025-04-15T08:07:18.1711091Z       display: flex;
2025-04-15T08:07:18.1711178Z       justify-content: space-between;
2025-04-15T08:07:18.1711262Z       align-items: center;
2025-04-15T08:07:18.1711324Z     }
2025-04-15T08:07:18.1711328Z 
2025-04-15T08:07:18.1711435Z     body.netdata-splash .checkbox-container {
2025-04-15T08:07:18.1711504Z       display: none;
2025-04-15T08:07:18.1711578Z       position: absolute;
2025-04-15T08:07:18.1711648Z       top: 100%;
2025-04-15T08:07:18.1711712Z       left: 0;
2025-04-15T08:07:18.1711783Z       width: 100%;
2025-04-15T08:07:18.1711864Z       border: 1px solid var(--border);
2025-04-15T08:07:18.1711949Z       background-color: var(--main-bg);
2025-04-15T08:07:18.1712020Z       z-index: 1;
2025-04-15T08:07:18.1712094Z       max-height: 150px;
2025-04-15T08:07:18.1712170Z       overflow-y: auto;
2025-04-15T08:07:18.1712238Z       padding: 8px;
2025-04-15T08:07:18.1712391Z     }
2025-04-15T08:07:18.1712395Z 
2025-04-15T08:07:18.1712510Z     body.netdata-splash .checkbox-container label {
2025-04-15T08:07:18.1712581Z       display: block;
2025-04-15T08:07:18.1712664Z       margin-bottom: 8px;
2025-04-15T08:07:18.1712726Z     }
2025-04-15T08:07:18.1712729Z 
2025-04-15T08:07:18.1712841Z     body.netdata-splash .checkbox-container input {
2025-04-15T08:07:18.1712914Z       margin-right: 5px;
2025-04-15T08:07:18.1712975Z     }
2025-04-15T08:07:18.1712984Z 
2025-04-15T08:07:18.1713077Z     body.netdata-splash .selected-rooms {
2025-04-15T08:07:18.1713150Z       font-size: 14px;
2025-04-15T08:07:18.1713220Z       color: #333;
2025-04-15T08:07:18.1713280Z     }
2025-04-15T08:07:18.1713284Z 
2025-04-15T08:07:18.1713376Z     body.netdata-splash .text-padding {
2025-04-15T08:07:18.1713456Z       padding: 8px 8px 16px;
2025-04-15T08:07:18.1713521Z     }
2025-04-15T08:07:18.1713525Z 
2025-04-15T08:07:18.1713618Z     body.netdata-splash .nd-radio,
2025-04-15T08:07:18.1713709Z     body.netdata-splash .nd-checkbox {
2025-04-15T08:07:18.1713782Z       display: block;
2025-04-15T08:07:18.1713854Z       position: relative;
2025-04-15T08:07:18.1713928Z       padding-left: 32px;
2025-04-15T08:07:18.1714007Z       cursor: pointer;
2025-04-15T08:07:18.1714077Z       font-size: 16px;
2025-04-15T08:07:18.1714169Z       -webkit-user-select: none;
2025-04-15T08:07:18.1714250Z       -moz-user-select: none;
2025-04-15T08:07:18.1714326Z       user-select: none;
2025-04-15T08:07:18.1714399Z       line-height: 20px;
2025-04-15T08:07:18.1714462Z     }
2025-04-15T08:07:18.1714466Z 
2025-04-15T08:07:18.1714569Z     body.netdata-splash .nd-checkbox input {
2025-04-15T08:07:18.1714644Z       position: absolute;
2025-04-15T08:07:18.1714716Z       opacity: 0;
2025-04-15T08:07:18.1714787Z       cursor: pointer;
2025-04-15T08:07:18.1714853Z       height: 0;
2025-04-15T08:07:18.1714925Z       width: 0;
2025-04-15T08:07:18.1714988Z     }
2025-04-15T08:07:18.1714991Z 
2025-04-15T08:07:18.1715107Z     body.netdata-splash .nd-checkbox .checkmark {
2025-04-15T08:07:18.1715182Z       position: absolute;
2025-04-15T08:07:18.1715251Z       top: 0;
2025-04-15T08:07:18.1715318Z       left: 0;
2025-04-15T08:07:18.1715476Z       height: 16px;
2025-04-15T08:07:18.1715552Z       width: 16px;
2025-04-15T08:07:18.1715639Z       background-color: var(--main-bg);
2025-04-15T08:07:18.1715729Z       border: 1px solid var(--primary);
2025-04-15T08:07:18.1715803Z       border-radius: 2px;
2025-04-15T08:07:18.1715866Z     }
2025-04-15T08:07:18.1715870Z 
2025-04-15T08:07:18.1716017Z     body.netdata-splash .nd-checkbox:hover input~.checkmark {
2025-04-15T08:07:18.1716321Z       background-color: var(--border);
2025-04-15T08:07:18.1716413Z     }
2025-04-15T08:07:18.1716418Z 
2025-04-15T08:07:18.1716563Z     body.netdata-splash .nd-checkbox :hover input~.checkmark {
2025-04-15T08:07:18.1716648Z       background-color: #ccc;
2025-04-15T08:07:18.1716710Z     }
2025-04-15T08:07:18.1716713Z 
2025-04-15T08:07:18.1716860Z     body.netdata-splash .nd-checkbox input:checked~.checkmark {
2025-04-15T08:07:18.1716949Z       background-color: var(--boder);
2025-04-15T08:07:18.1717008Z     }
2025-04-15T08:07:18.1717012Z 
2025-04-15T08:07:18.1717139Z     body.netdata-splash .nd-checkbox .checkmark:after {
2025-04-15T08:07:18.1717206Z       content: "";
2025-04-15T08:07:18.1717281Z       position: absolute;
2025-04-15T08:07:18.1717350Z       display: none;
2025-04-15T08:07:18.1717411Z     }
2025-04-15T08:07:18.1717414Z 
2025-04-15T08:07:18.1717579Z     body.netdata-splash .nd-checkbox input:checked~.checkmark:after {
2025-04-15T08:07:18.1717649Z       display: block;
2025-04-15T08:07:18.1717716Z     }
2025-04-15T08:07:18.1717721Z 
2025-04-15T08:07:18.1717836Z     body.netdata-splash .nd-checkbox .checkmark:after {
2025-04-15T08:07:18.1717907Z       inset: 0 0 2px 0;
2025-04-15T08:07:18.1717980Z       margin: auto;
2025-04-15T08:07:18.1718048Z       width: 2px;
2025-04-15T08:07:18.1718120Z       height: 8px;
2025-04-15T08:07:18.1718333Z       border: solid var(--highlight);
2025-04-15T08:07:18.1718421Z       border-width: 0 2px 2px 0;
2025-04-15T08:07:18.1718500Z       transform: rotate(45deg);
2025-04-15T08:07:18.1718561Z     }
2025-04-15T08:07:18.1718571Z 
2025-04-15T08:07:18.1718648Z     /* Retention table */
2025-04-15T08:07:18.1718721Z     #tiers-container {
2025-04-15T08:07:18.1718793Z       height: auto;
2025-04-15T08:07:18.1718854Z     }
2025-04-15T08:07:18.1718857Z 
2025-04-15T08:07:18.1718924Z     #tiers-table {
2025-04-15T08:07:18.1718993Z       width: 100%;
2025-04-15T08:07:18.1719072Z       border-collapse: collapse;
2025-04-15T08:07:18.1719138Z     }
2025-04-15T08:07:18.1719141Z 
2025-04-15T08:07:18.1719238Z     #tiers-table thead tr:nth-of-type(1) th {
2025-04-15T08:07:18.1719319Z       padding-top: 16px;
2025-04-15T08:07:18.1719381Z     }
2025-04-15T08:07:18.1719384Z 
2025-04-15T08:07:18.1719477Z     #tiers-table thead tr:nth-of-type(2) th {
2025-04-15T08:07:18.1719561Z       padding-bottom: 16px;
2025-04-15T08:07:18.1719627Z     }
2025-04-15T08:07:18.1719631Z 
2025-04-15T08:07:18.1719723Z     #tiers-table tbody tr:nth-of-type(1) td {
2025-04-15T08:07:18.1719812Z       border-top: 1px solid var(--border);
2025-04-15T08:07:18.1719886Z       padding-top: 16px;
2025-04-15T08:07:18.1719959Z     }
2025-04-15T08:07:18.1719962Z 
2025-04-15T08:07:18.1720053Z     #tiers-table tbody tr:last-of-type td {
2025-04-15T08:07:18.1720134Z       padding-bottom: 24px;
2025-04-15T08:07:18.1720194Z     }
2025-04-15T08:07:18.1720197Z 
2025-04-15T08:07:18.1720271Z     #tiers-table th {
2025-04-15T08:07:18.1720353Z       font-size: var(--font-small);
2025-04-15T08:07:18.1720427Z       padding: 8px 4px;
2025-04-15T08:07:18.1720494Z     }
2025-04-15T08:07:18.1720497Z 
2025-04-15T08:07:18.1720565Z     #tiers-table td {
2025-04-15T08:07:18.1720650Z       font-size: var(--font-medium);
2025-04-15T08:07:18.1720721Z       text-align: center;
2025-04-15T08:07:18.1720796Z       padding: 12px 4px;
2025-04-15T08:07:18.1720854Z     }
2025-04-15T08:07:18.1720862Z 
2025-04-15T08:07:18.1720948Z     #tiers-table th:first-of-type,
2025-04-15T08:07:18.1721033Z     #tiers-table td:first-of-type {
2025-04-15T08:07:18.1721104Z       padding-left: 12px;
2025-04-15T08:07:18.1721174Z     }
2025-04-15T08:07:18.1721361Z   
2025-04-15T08:07:18.1721441Z     #tiers-table th:last-of-type,  
2025-04-15T08:07:18.1721525Z     #tiers-table td:last-of-type {
2025-04-15T08:07:18.1721601Z       padding-right: 12px;
2025-04-15T08:07:18.1721664Z     }
2025-04-15T08:07:18.1721667Z 
2025-04-15T08:07:18.1721744Z     #tiers-table .section-start {
2025-04-15T08:07:18.1721829Z       border-left: 1px solid var(--border);
2025-04-15T08:07:18.1721893Z     }
2025-04-15T08:07:18.1721896Z 
2025-04-15T08:07:18.1721977Z     .progress-indicator {
2025-04-15T08:07:18.1722044Z       gap: 8px;
2025-04-15T08:07:18.1722114Z       padding: 0 8px;
2025-04-15T08:07:18.1722184Z     }
2025-04-15T08:07:18.1722187Z 
2025-04-15T08:07:18.1722270Z     .progress-bar-container {
2025-04-15T08:07:18.1722344Z       position: relative;
2025-04-15T08:07:18.1722421Z       width: 100%;
2025-04-15T08:07:18.1722515Z       height: var(--progress-bar-height);
2025-04-15T08:07:18.1722614Z       background-color: var(--border-neutral);
2025-04-15T08:07:18.1722691Z       overflow: hidden;
2025-04-15T08:07:18.1722764Z       border-radius: 2px;
2025-04-15T08:07:18.1722829Z     }
2025-04-15T08:07:18.1722833Z 
2025-04-15T08:07:18.1722901Z     .progress-bar {
2025-04-15T08:07:18.1722978Z       position: absolute;
2025-04-15T08:07:18.1723043Z       top: 0;
2025-04-15T08:07:18.1723111Z       left: 0;
2025-04-15T08:07:18.1723201Z       height: var(--progress-bar-height);
2025-04-15T08:07:18.1723287Z       background-color: var(--primary);
2025-04-15T08:07:18.1723351Z     }
2025-04-15T08:07:18.1723354Z 
2025-04-15T08:07:18.1723417Z     #tooltip {
2025-04-15T08:07:18.1723491Z       max-width: 300px;
2025-04-15T08:07:18.1723575Z       background-color: var(--accent);
2025-04-15T08:07:18.1723652Z       color: var(--text-dark);
2025-04-15T08:07:18.1723816Z       border-radius: 4px;
2025-04-15T08:07:18.1723887Z       padding: 8px 16px;
2025-04-15T08:07:18.1723959Z       position: fixed;
2025-04-15T08:07:18.1724035Z       font-size: var(--font-small);
2025-04-15T08:07:18.1724113Z       line-height: 1.5;
2025-04-15T08:07:18.1724183Z       z-index: 9999;
2025-04-15T08:07:18.1724249Z       display: none;
2025-04-15T08:07:18.1724350Z     }</style><script>const toggleTab = tab => {
2025-04-15T08:07:18.1724487Z       const factors = document.querySelectorAll(".data-tab");
2025-04-15T08:07:18.1724613Z       const tabs = document.querySelectorAll(".btn-tab");
2025-04-15T08:07:18.1724618Z 
2025-04-15T08:07:18.1724703Z       factors.forEach(function (factor) {
2025-04-15T08:07:18.1724838Z         let dataTab = parseInt(factor.getAttribute("data-tab"));
2025-04-15T08:07:18.1724933Z         if (dataTab == tab || dataTab === 0) {
2025-04-15T08:07:18.1725018Z           factor.classList.add("active");
2025-04-15T08:07:18.1725083Z         } else {
2025-04-15T08:07:18.1725181Z           factor.classList.remove("active");
2025-04-15T08:07:18.1725249Z         }
2025-04-15T08:07:18.1725309Z       });
2025-04-15T08:07:18.1725313Z 
2025-04-15T08:07:18.1725397Z       // Toggle active class on tab buttons
2025-04-15T08:07:18.1725488Z       tabs.forEach(tabButton => {
2025-04-15T08:07:18.1725575Z         if (tabButton.dataset?.tab == tab) {
2025-04-15T08:07:18.1725671Z           tabButton.classList.add("active");
2025-04-15T08:07:18.1725737Z         } else {
2025-04-15T08:07:18.1725838Z           tabButton.classList.remove("active");
2025-04-15T08:07:18.1725907Z         }
2025-04-15T08:07:18.1725968Z       });
2025-04-15T08:07:18.1726033Z     }
2025-04-15T08:07:18.1726038Z 
2025-04-15T08:07:18.1726300Z     const initGrid = () => {
2025-04-15T08:07:18.1726445Z       const canvas1 = document.getElementById("monitorGrid");
2025-04-15T08:07:18.1726548Z       const context1 = canvas1.getContext("2d");
2025-04-15T08:07:18.1726660Z       const frame = document.querySelector(".frame");
2025-04-15T08:07:18.1726747Z       const cellSize = 4;
2025-04-15T08:07:18.1726821Z       const gapSize = 2;
2025-04-15T08:07:18.1726961Z       const colors = ["#001107", "#003114", "#014420", "#047031", "#049846"];
2025-04-15T08:07:18.1727086Z 
2025-04-15T08:07:18.1727157Z       let grid = [];
2025-04-15T08:07:18.1727161Z 
2025-04-15T08:07:18.1727250Z       const getRandomColor = () => {
2025-04-15T08:07:18.1727388Z         return colors[Math.floor(Math.random() * colors.length)];
2025-04-15T08:07:18.1727452Z       }
2025-04-15T08:07:18.1727456Z 
2025-04-15T08:07:18.1727558Z       const resizeCanvas = (canvas, context) => {
2025-04-15T08:07:18.1727647Z         canvas.width = frame.clientWidth;
2025-04-15T08:07:18.1727744Z         canvas.height = frame.clientHeight;
2025-04-15T08:07:18.1727748Z 
2025-04-15T08:07:18.1727886Z         const cols = Math.floor(canvas.width / (cellSize + gapSize));
2025-04-15T08:07:18.1728033Z         const rows = Math.floor(canvas.height / (cellSize + gapSize));
2025-04-15T08:07:18.1728043Z 
2025-04-15T08:07:18.1728135Z         grid = Array.from({ length: rows }, () =>
2025-04-15T08:07:18.1728240Z           Array.from({ length: cols }, getRandomColor)
2025-04-15T08:07:18.1728310Z         );
2025-04-15T08:07:18.1728319Z 
2025-04-15T08:07:18.1728400Z         drawGrid(context, canvas);
2025-04-15T08:07:18.1728468Z       }
2025-04-15T08:07:18.1728471Z 
2025-04-15T08:07:18.1728560Z       const drawGrid = (context, canvas) => {
2025-04-15T08:07:18.1728694Z         context.clearRect(0, 0, canvas.width, canvas.height);
2025-04-15T08:07:18.1728830Z         const cols = Math.floor(canvas.width / (cellSize + gapSize));
2025-04-15T08:07:18.1728967Z         const rows = Math.floor(canvas.height / (cellSize + gapSize));
2025-04-15T08:07:18.1728976Z 
2025-04-15T08:07:18.1729062Z         for (let row = 0; row < rows; row++) {
2025-04-15T08:07:18.1729152Z           for (let col = 0; col < cols; col++) {
2025-04-15T08:07:18.1729240Z             if (grid[row] && grid[row][col]) {
2025-04-15T08:07:18.1729470Z               context.fillStyle = grid[row][col];
2025-04-15T08:07:18.1729557Z               context.fillRect(
2025-04-15T08:07:18.1729640Z                 col * (cellSize + gapSize),
2025-04-15T08:07:18.1729721Z                 row * (cellSize + gapSize),
2025-04-15T08:07:18.1729801Z                 cellSize,
2025-04-15T08:07:18.1729867Z                 cellSize
2025-04-15T08:07:18.1729936Z               );
2025-04-15T08:07:18.1730001Z             }
2025-04-15T08:07:18.1730065Z           }
2025-04-15T08:07:18.1730133Z         }
2025-04-15T08:07:18.1730196Z       }
2025-04-15T08:07:18.1730200Z 
2025-04-15T08:07:18.1730294Z       resizeCanvas(canvas1, context1);
2025-04-15T08:07:18.1730299Z 
2025-04-15T08:07:18.1730490Z       window.addEventListener("resize", () => resizeCanvas(canvas1, context1));
2025-04-15T08:07:18.1780935Z     }</script></head><body class="loading netdata-splash"><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-N6CBMJD" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="app" class="container grid"><div class="frame frame-left col-span-7 grid light-beam relative"><div class="head-summary absolute index-10"><div class="server"><div class="no-title" id="server"></div><div class="no-title" id="package"></div></div><div class="availability h-auto module"><div class="title">Cloud status</div><div class="no-key" id="cloud_status"></div></div></div><div class="col-span-12 row-span-11"><div id="sphereContainer"><div id="loadingMessage" class="loading-message">Loading...</div><div class="hide-title absolute-center sphere-stats-container"><div class="metrics-container"><div class="collected-metrics" id="collectedMetrics"></div><div class="node-info-container"><div class="title">NODES</div><div class="node-info" id="nodes_streaming"></div></div></div><div class="system-container data-tab data-tab-container" data-tab="2"><div class="system grid-columns-10 md-grid-columns-12"><div class="flex-col col-span-5 md-col-span-6"><div class="section-title">Kernel</div><div class="grid-columns-10"><div class="h-auto module col-span-5" id="kernel"></div><div class="h-auto module col-span-5" id="kernelVersion"></div></div></div><div class="flex-col col-span-5 md-col-span-6"><div class="section-title">OS</div><div class="grid-columns-10"><div id="os" class="h-auto module col-span-5"></div><div class="h-auto module col-span-5" id="id"></div></div></div><div class="hardware module-section col-span-10 md-col-span-12"><div class="section-title">Hardware</div><div class="grid-columns-10 md-grid-columns-12"><div class="module h-auto col-span-2 md-col-span-4" id="cpuCores"></div><div class="module h-auto col-span-2 md-col-span-4" id="cpuFrequency"></div><div class="module h-auto col-span-2 md-col-span-4" id="ram"></div><div class="module h-auto col-span-2 md-col-span-4" id="disk"></div><div class="module h-auto col-span-2 md-col-span-4" id="cpuArchitecture"></div><div class="module h-auto col-span-2 md-col-span-4" id="virtualization"></div></div></div></div></div><div class="data-tab data-tab-container" data-tab="1"><div class="db-metrics-container"><div id="tiers-container" class="db-metrics-blocks module"><table id="tiers-table"><thead><tr><th rowspan="2"><span data-tooltip="A database layer that stores metrics at a specific resolution.">Tier</span></th><th rowspan="2">Resolution</th><th colspan="2" class="section-start">Stored</th><th colspan="3" class="section-start">Retention</th><th colspan="2" class="section-start">Disk</th></tr><tr><th class="section-start">Metrics</th><th><span data-tooltip="The total number of measurements stored in the database across all metrics. Each sample represents a recorded value for a specific metric at a given time.">Samples</span></th><th class="section-start">Current</th><th><span data-tooltip="The maximum time data can be kept, based on the configured time and disk space limits.">Effective</span></th><th>Configured</th><th class="section-start">Used</th><th>Configured</th></tr></thead><tbody><tr id="tiers-table-data-placeholder"></tr></tbody></table></div></div></div><div class="data-tab data-tab-container" data-tab="3"><div class="modules-container grid"><div class="module col-span-4"><div class="module-header"><div class="section-image"><svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M16.5299 4.47019C16.2399 4.18019 15.7599 4.18019 15.4699 4.47019L13.5299 6.41019L11.5899 4.47019L13.5299 2.53019C13.8199 2.24019 13.8199 1.76019 13.5299 1.47019C13.2399 1.18019 12.7599 1.18019 12.4699 1.47019L10.5299 3.41019L8.99994 1.88019L5.74994 5.13019C4.93994 5.93019 4.49994 7.01019 4.49994 8.15019V8.38019L3.72994 9.15019C2.53994 10.3302 2.45994 12.2002 3.43994 13.5002L1.96994 14.9702C1.67994 15.2602 1.67994 15.7402 1.96994 16.0302C2.11994 16.1802 2.30994 16.2502 2.49994 16.2502C2.68994 16.2502 2.87994 16.1802 3.02994 16.0302L4.49994 14.5602C5.06994 15.0002 5.76994 15.2402 6.49994 15.2402C7.38994 15.2402 8.21994 14.8902 8.84994 14.2702L9.61994 13.5002H9.84994C10.9899 13.5002 12.0599 13.0602 12.8699 12.2502L16.1199 9.00019L14.5899 7.47019L16.5299 5.53019C16.8199 5.24019 16.8199 4.76019 16.5299 4.47019ZM11.8099 11.1902C11.2899 11.7102 10.5899 12.0002 9.84994 12.0002H8.99994L7.78994 13.2102C7.42994 13.5702 6.96994 13.7402 6.49994 13.7402C6.02994 13.7402 5.56994 13.5602 5.20994 13.2102L4.78994 12.7902C4.07994 12.0802 4.07994 10.9202 4.78994 10.2102L5.46994 9.53019L6.40994 10.4702C6.99994 11.0602 7.94994 11.0602 8.52994 10.4702L6.01994 7.96019C6.06994 7.30019 6.33994 6.67019 6.80994 6.19019L8.99994 4.00019L13.9999 9.00019L11.8099 11.1902Z" fill="var(--text)"/></svg></div><span class="section-title">Plugins</span></div><div class="module-content" id="plugins"></div></div><div class="module col-span-4"><div class="module-header"><div class="section-image"><svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M7 18C7.55 18 8 17.55 8 17C8 16.45 7.55 16 7 16C6.45 16 6 16.45 6 17C6 17.55 6.45 18 7 18ZM14 17.79C14.28 17.51 14.28 17.07 14 16.79C13.72 16.51 13.28 16.51 13 16.79C12.72 17.07 12.72 17.51 13 17.79C13.28 18.07 13.72 18.07 14 17.79ZM17 8V4H12V2H2V22H22V8H17ZM10 20H4V4H10V20ZM15 20H12V6H15V20ZM20 20H17V10H20V20ZM19 17.79C19.28 17.51 19.28 17.07 19 16.79C18.72 16.51 18.28 16.51 18 16.79C17.72 17.07 17.72 17.51 18 17.79C18.28 18.07 18.72 18.07 19 17.79Z" fill="var(--text)"/></svg></div><span class="section-title">Libraries</span></div><div class="module-content" id="libs"></div></div><div class="module col-span-4"><div class="module-header"><div class="section-image"><svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M4 16.0002H5V14.5002H4V16.0002ZM2 16.0002H3V14.5002H2V16.0002ZM15.28 6.97019L10.25 1.94019L5.22 6.97019C4.927 7.26319 4.927 7.73819 5.22 8.03119C5.513 8.32419 5.988 8.32419 6.281 8.03119L9.5 4.81119V11.8392C9.5 13.3062 8.306 14.5002 6.838 14.5002H6V16.0002H6.838C9.136 16.0002 11 14.1372 11 11.8382V4.81119L14.22 8.03119C14.366 8.17719 14.558 8.25119 14.75 8.25119C14.942 8.25119 15.134 8.17819 15.28 8.03119C15.573 7.73719 15.573 7.26319 15.28 6.97019Z" fill="var(--text)"/></svg></div><span class="section-title">Exporters</span></div><div class="module-content" id="exporters"></div></div></div></div><div class="data-tab data-tab-container" data-tab="4"><div class="module data-tab-table" id="directories"></div></div></div></div></div><div class="relative row-span-1 col-span-12 full-h"><div class="license-link"><a href="https://app.netdata.cloud/LICENSE.txt" target="_blank">Netdata UI License</a></div><div class="tabs full-h"><button type="button" name="button" class="btn-tab tab active" data-tab="1"><div class="tab-icon"><svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M9 10C14.153 10 16.5 7.927 16.5 6C16.5 4.073 14.153 2 9 2C3.847 2 1.5 4.073 1.5 6C1.5 7.927 3.847 10 9 10ZM9 3.5C12.313 3.5 15 4.619 15 6C15 7.381 12.313 8.5 9 8.5C5.687 8.5 3 7.381 3 6C3 4.619 5.687 3.5 9 3.5ZM14.566 12.931C13.68 13.85 11.523 14.5 9 14.5C6.477 14.5 4.32 13.85 3.434 12.931C2.639 12.547 2.01 12.081 1.545 11.563C1.518 11.708 1.5 11.854 1.5 12C1.5 13.927 3.847 16 9 16C14.153 16 16.5 13.927 16.5 12C16.5 11.854 16.482 11.708 16.455 11.562C15.99 12.081 15.361 12.546 14.566 12.931ZM14.566 9.931C13.68 10.85 11.523 11.5 9 11.5C6.477 11.5 4.32 10.85 3.434 9.931C2.639 9.547 2.01 9.081 1.545 8.563C1.518 8.708 1.5 8.854 1.5 9C1.5 10.927 3.847 13 9 13C14.153 13 16.5 10.927 16.5 9C16.5 8.854 16.482 8.708 16.455 8.562C15.99 9.081 15.361 9.546 14.566 9.931Z"/></svg></div>Database</button> <button type="button" name="button" class="btn-tab tab" data-tab="2"><div class="tab-icon"><svg width="60" height="60" viewBox="0 0 60 60" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M40.3125 18.75H19.6875C19.1697 18.75 18.75 19.1697 18.75 19.6875V40.3125C18.75 40.8303 19.1697 41.25 19.6875 41.25H40.3125C40.8303 41.25 41.25 40.8303 41.25 40.3125V19.6875C41.25 19.1697 40.8303 18.75 40.3125 18.75Z"/><path d="M54.375 22.5C54.8723 22.5 55.3492 22.3025 55.7008 21.9508C56.0525 21.5992 56.25 21.1223 56.25 20.625C56.25 20.1277 56.0525 19.6508 55.7008 19.2992C55.3492 18.9475 54.8723 18.75 54.375 18.75H52.5V15C52.4978 13.0115 51.707 11.1051 50.3009 9.6991C48.8949 8.29305 46.9885 7.50217 45 7.5H41.25V5.625C41.25 5.12772 41.0525 4.65081 40.7008 4.29917C40.3492 3.94754 39.8723 3.75 39.375 3.75C38.8777 3.75 38.4008 3.94754 38.0492 4.29917C37.6975 4.65081 37.5 5.12772 37.5 5.625V7.5H31.875V5.625C31.875 5.12772 31.6775 4.65081 31.3258 4.29917C30.9742 3.94754 30.4973 3.75 30 3.75C29.5027 3.75 29.0258 3.94754 28.6742 4.29917C28.3225 4.65081 28.125 5.12772 28.125 5.625V7.5H22.5V5.625C22.5 5.12772 22.3025 4.65081 21.9508 4.29917C21.5992 3.94754 21.1223 3.75 20.625 3.75C20.1277 3.75 19.6508 3.94754 19.2992 4.29917C18.9475 4.65081 18.75 5.12772 18.75 5.625V7.5H15C13.0115 7.50217 11.1051 8.29305 9.6991 9.6991C8.29305 11.1051 7.50217 13.0115 7.5 15V18.75H5.625C5.12772 18.75 4.65081 18.9475 4.29917 19.2992C3.94754 19.6508 3.75 20.1277 3.75 20.625C3.75 21.1223 3.94754 21.5992 4.29917 21.9508C4.65081 22.3025 5.12772 22.5 5.625 22.5H7.5V28.125H5.625C5.12772 28.125 4.65081 28.3225 4.29917 28.6742C3.94754 29.0258 3.75 29.5027 3.75 30C3.75 30.4973 3.94754 30.9742 4.29917 31.3258C4.65081 31.6775 5.12772 31.875 5.625 31.875H7.5V37.5H5.625C5.12772 37.5 4.65081 37.6975 4.29917 38.0492C3.94754 38.4008 3.75 38.8777 3.75 39.375C3.75 39.8723 3.94754 40.3492 4.29917 40.7008C4.65081 41.0525 5.12772 41.25 5.625 41.25H7.5V45C7.50217 46.9885 8.29305 48.8949 9.6991 50.3009C11.1051 51.707 13.0115 52.4978 15 52.5H18.75V54.375C18.75 54.8723 18.9475 55.3492 19.2992 55.7008C19.6508 56.0525 20.1277 56.25 20.625 56.25C21.1223 56.25 21.5992 56.0525 21.9508 55.7008C22.3025 55.3492 22.5 54.8723 22.5 54.375V52.5H28.125V54.375C28.125 54.8723 28.3225 55.3492 28.6742 55.7008C29.0258 56.0525 29.5027 56.25 30 56.25C30.4973 56.25 30.9742 56.0525 31.3258 55.7008C31.6775 55.3492 31.875 54.8723 31.875 54.375V52.5H37.5V54.375C37.5 54.8723 37.6975 55.3492 38.0492 55.7008C38.4008 56.0525 38.8777 56.25 39.375 56.25C39.8723 56.25 40.3492 56.0525 40.7008 55.7008C41.0525 55.3492 41.25 54.8723 41.25 54.375V52.5H45C46.9885 52.4978 48.8949 51.707 50.3009 50.3009C51.707 48.8949 52.4978 46.9885 52.5 45V41.25H54.375C54.8723 41.25 55.3492 41.0525 55.7008 40.7008C56.0525 40.3492 56.25 39.8723 56.25 39.375C56.25 38.8777 56.0525 38.4008 55.7008 38.0492C55.3492 37.6975 54.8723 37.5 54.375 37.5H52.5V31.875H54.375C54.8723 31.875 55.3492 31.6775 55.7008 31.3258C56.0525 30.9742 56.25 30.4973 56.25 30C56.25 29.5027 56.0525 29.0258 55.7008 28.6742C55.3492 28.3225 54.8723 28.125 54.375 28.125H52.5V22.5H54.375ZM45 41.25C45 42.2446 44.6049 43.1984 43.9016 43.9016C43.1984 44.6049 42.2446 45 41.25 45H18.75C17.7554 45 16.8016 44.6049 16.0984 43.9016C15.3951 43.1984 15 42.2446 15 41.25V18.75C15 17.7554 15.3951 16.8016 16.0984 16.0984C16.8016 15.3951 17.7554 15 18.75 15H41.25C42.2446 15 43.1984 15.3951 43.9016 16.0984C44.6049 16.8016 45 17.7554 45 18.75V41.25Z"/></svg></div>System</button> <button type="button" name="button" class="btn-tab tab" data-tab="3"><div class="tab-icon"><svg width="60" height="60" viewBox="0 0 60 60" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M59.7937 16.4062C59.7164 16.2322 59.6084 16.0734 59.475 15.9375C59.3495 15.8165 59.2112 15.7097 59.0625 15.6187L30.9 0.224957C30.615 0.0603916 30.2916 -0.0262451 29.9625 -0.0262451C29.6334 -0.0262451 29.31 0.0603916 29.025 0.224957L1.06875 15.525C1.06875 15.525 1.06875 15.6187 0.91875 15.6375C0.762779 15.7334 0.618116 15.8466 0.4875 15.975C0.433211 16.047 0.383128 16.1221 0.3375 16.2C0.244093 16.3333 0.168457 16.4783 0.1125 16.6312C0.1125 16.6312 0.1125 16.6312 0.1125 16.7437C0.103788 16.8435 0.103788 16.9439 0.1125 17.0437C0.1125 17.0437 0.1125 17.1562 0.1125 17.2125V42.7687C0.0613239 42.8827 0.0235706 43.0023 0 43.125L0 43.3875C0.142582 43.8604 0.466002 44.2579 0.9 44.4937L29.025 59.8312H29.1375H29.2875C29.5116 59.9337 29.7537 59.9911 30 60C30.2245 59.9926 30.4462 59.9482 30.6563 59.8687H30.7875H30.9L59.025 44.5312C59.3209 44.3693 59.5676 44.1306 59.7392 43.8402C59.9108 43.5498 60.0009 43.2185 60 42.8812V17.2125C59.9937 16.9939 59.9493 16.7782 59.8688 16.575C59.8516 16.5155 59.8264 16.4588 59.7937 16.4062ZM28.125 54.975L3.75 41.6625V20.3812L28.125 33.75V54.975ZM30 30.4125L5.79375 17.2875L30 4.01246L54.2062 17.1375L30 30.4125ZM56.25 41.6625L31.875 54.975V33.75L56.25 20.4562V41.6625Z"/></svg></div>Modules</button> <button type="button" name="button" class="btn-tab tab" data-tab="4"><div class="tab-icon"><svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M16 10.5V5.5H10V7.25H5.75V6.5H8V1.5H2V6.5H4.25V14.75H10V16.5H16V11.5H10V13.25H5.75V8.75H10V10.5H16ZM11.5 7H14.5V9H11.5V7ZM11.5 13H14.5V15H11.5V13ZM3.5 5V3H6.5V5H3.5Z"/></svg></div>Directories</button></div></div></div><div class="frame relative col-span-5 frame-right"><canvas id="monitorGrid"></canvas><div id="splashMessageContainer" class="splash-message"><svg width="133" height="105" viewBox="0 0 133 105" fill="none" xmlns="http://www.w3.org/2000/svg" class="logo"><path fill-rule="evenodd" clip-rule="evenodd" d="M81.697 105H55.0693L0.5 0.5H77.9598C108.079 0.554913 132.484 24.7711 132.5 54.6451C132.452 82.485 109.73 105 81.697 105Z" fill="#FCFFFD"/></svg><h1 class="text-center">Welcome to Netdata</h1><p id="msgSignIn">Please sign-in to continue</p><a id="btnSignIn" href="javascript:loadDashboard(true);" class="button button-primary">Sign-in</a><div class="tagline skip-link"><a class="opt-out-link" href="javascript:loadDashboard();">Skip and use the dashboard anonymously.</a> <span class="no-anonymous-access"></span></div></div><div id="claimingContentsContainer" class="claim-message" style="display:none;"><div class="welcome"><svg width="133" height="105" viewBox="0 0 133 105" fill="none" xmlns="http://www.w3.org/2000/svg" class="logo"><path fill-rule="evenodd" clip-rule="evenodd" d="M81.697 105H55.0693L0.5 0.5H77.9598C108.079 0.554913 132.484 24.7711 132.5 54.6451C132.452 82.485 109.73 105 81.697 105Z" fill="#FCFFFD"/></svg><h1 class="text-center">Welcome to Netdata</h1><span>Please connect your agent to continue.</span></div><div class="connection-modal"><div id="connectionStep-1"><div class="connection-step"><span class="text-small">Please select the space you want this agent to join:</span> <span class="loader">Loading spaces...</span><ul id="spacesList" class="list-options"></ul></div></div><div id="connectionStep-2" style="display:none;"><div class="connection-step"><div class="dropdown-custom" data-target="claimMessage"><div class="dropdown-custom-input flex space-between align-center"><span class="text-small">Select room(s)</span><button class="text-small button button-ghost clear-button">Clear</button></div><div id="roomsSelector" class="dropdown"><div class="dropdown-toggle"><span id="selectedItems" class="selected-items">Select room</span> <span>▼</span></div><div id="roomsSelectorOptionsContainer" class="checkbox-container"></div></div></div><div id="claimMessage" class="selected-message"></div><div class="">Please run the command below in your terminal:</div><code id="claimCommand"></code><div class="">and paste the generated private key in the field below:</div><input id="claimingPrivateKey" name="claimingPrivateKey" value="" placeholder="Private Key"/></div><div id="claimTip" class="text-padding text-small">Tip: If the command doesn’t work out-of-the-box, locate the {keyFilename} file, open it in your favourite text editor, and copy it to your clipboard.</div><div id="claimErrorMessage" class="text-padding error" style="display:none;"></div></div><div class="modal-footer flex-col"><div class="flex space-between"><button id="btnConnectionStepPrev" class="button button-ghost">&#8592; Back</button> <button id="btnConnectionStepNext" class="button button-primary">Next</button> <button id="btnClaim" class="button button-primary">Claim</button></div><div class="skip-link"><a class="signout-link" href="javascript:signout()">Sign out to switch user</a></div></div></div></div></div><div id="tooltip"></div></div></body><script>const initPrimaryButtonHover = () => {
2025-04-15T08:07:18.1781913Z     const button = document.getElementById("btnSignIn");
2025-04-15T08:07:18.1782060Z     const canvas = document.getElementById("monitorGrid");
2025-04-15T08:07:18.1782065Z 
2025-04-15T08:07:18.1782143Z     if (button) {
2025-04-15T08:07:18.1782256Z       button.addEventListener("mouseover", () => {
2025-04-15T08:07:18.1782359Z         canvas.classList.add("hovered");
2025-04-15T08:07:18.1782422Z       });
2025-04-15T08:07:18.1782489Z     }
2025-04-15T08:07:18.1782493Z 
2025-04-15T08:07:18.1782558Z     if (canvas) {
2025-04-15T08:07:18.1782662Z       button.addEventListener("mouseout", () => {
2025-04-15T08:07:18.1782762Z         canvas.classList.remove("hovered");
2025-04-15T08:07:18.1782825Z       });
2025-04-15T08:07:18.1782893Z     }
2025-04-15T08:07:18.1782953Z   }
2025-04-15T08:07:18.1782958Z 
2025-04-15T08:07:18.1783033Z   const initTabs = () => {
2025-04-15T08:07:18.1783176Z     const btnTabs = document.querySelectorAll(".btn-tab");
2025-04-15T08:07:18.1783257Z     btnTabs.forEach(btn => {
2025-04-15T08:07:18.1783353Z       btn.addEventListener("click", e => {
2025-04-15T08:07:18.1783454Z         const tab = e.currentTarget?.dataset?.tab;
2025-04-15T08:07:18.1783522Z         if (tab) {
2025-04-15T08:07:18.1783595Z           toggleTab(tab);
2025-04-15T08:07:18.1783763Z         }
2025-04-15T08:07:18.1783829Z       })
2025-04-15T08:07:18.1783888Z     })
2025-04-15T08:07:18.1783953Z   }
2025-04-15T08:07:18.1783957Z 
2025-04-15T08:07:18.1784042Z   // =============================================== //
2025-04-15T08:07:18.1784048Z 
2025-04-15T08:07:18.1784116Z   const status = {
2025-04-15T08:07:18.1784194Z     TIMEOUT: 'timeout',
2025-04-15T08:07:18.1784264Z     SUCCESS: 'success',
2025-04-15T08:07:18.1784341Z     SKIPPED: 'skipped'
2025-04-15T08:07:18.1784401Z   };
2025-04-15T08:07:18.1784405Z 
2025-04-15T08:07:18.1784488Z   const getSessionId = () => {
2025-04-15T08:07:18.1784575Z     const key = "telemetrySessionId"
2025-04-15T08:07:18.1784667Z     if (!sessionStorage.getItem(key)) {
2025-04-15T08:07:18.1785005Z       sessionStorage.setItem(key, self.crypto && self.crypto.randomUUID ? self.crypto.randomUUID() : new Date().getTime());
2025-04-15T08:07:18.1785071Z     }
2025-04-15T08:07:18.1785177Z     return sessionStorage.getItem(key) || "";
2025-04-15T08:07:18.1785245Z   }
2025-04-15T08:07:18.1785249Z 
2025-04-15T08:07:18.1785374Z   const defaultErrorMessage = "Something went wrong."
2025-04-15T08:07:18.1785628Z   const agentUri = window.location.origin + window.location.pathname.replace(pathsRegex, "");
2025-04-15T08:07:18.1785728Z   const telemetrySessionId = getSessionId();
2025-04-15T08:07:18.1785900Z   const ensureOneSlash = urlStr => urlStr.replace(/([^:]\/)\/+/g, "$1");
2025-04-15T08:07:18.1785906Z 
2025-04-15T08:07:18.1786016Z   // Utils =============================================================================== //
2025-04-15T08:07:18.1786021Z 
2025-04-15T08:07:18.1786219Z   const createElem = (tag, attrs) => {
2025-04-15T08:07:18.1786294Z     if (!tag) return null
2025-04-15T08:07:18.1786397Z     const elem = document.createElement(tag);
2025-04-15T08:07:18.1786605Z     if (Object.keys(attrs || {}).length) {
2025-04-15T08:07:18.1786704Z       Object.entries(attrs).forEach(([k, v]) => {
2025-04-15T08:07:18.1786777Z         elem[k] = v;
2025-04-15T08:07:18.1786845Z       })
2025-04-15T08:07:18.1786909Z     }
2025-04-15T08:07:18.1786974Z     return elem
2025-04-15T08:07:18.1787036Z   }
2025-04-15T08:07:18.1787041Z 
2025-04-15T08:07:18.1787183Z   const getDOM = ({ tag = "div", children = [], ...rest } = {}) => {
2025-04-15T08:07:18.1787288Z     const element = document.createElement(tag);
2025-04-15T08:07:18.1787293Z 
2025-04-15T08:07:18.1787403Z     Object.entries(rest || {}).forEach(([k, v]) => {
2025-04-15T08:07:18.1787487Z       if (element[k] !== undefined) {
2025-04-15T08:07:18.1787605Z         if (k == "dataset" && Object.keys(v).length == 1) {
2025-04-15T08:07:18.1787705Z           const dataPair = Object.entries(v)[0]
2025-04-15T08:07:18.1787793Z           element[k][dataPair[0]] = dataPair[1]
2025-04-15T08:07:18.1787865Z         } else {
2025-04-15T08:07:18.1787944Z           element[k] = v;
2025-04-15T08:07:18.1788014Z         }
2025-04-15T08:07:18.1788075Z       }
2025-04-15T08:07:18.1788136Z     })
2025-04-15T08:07:18.1788145Z 
2025-04-15T08:07:18.1788227Z     if (!!children?.length) {
2025-04-15T08:07:18.1788432Z       children.filter(({ condition = true }) => !!condition).forEach(childStructure => {
2025-04-15T08:07:18.1788555Z         element.appendChild(getDOM(childStructure));
2025-04-15T08:07:18.1788618Z       });
2025-04-15T08:07:18.1788684Z     }
2025-04-15T08:07:18.1788688Z 
2025-04-15T08:07:18.1788757Z     return element;
2025-04-15T08:07:18.1788818Z   }
2025-04-15T08:07:18.1788830Z 
2025-04-15T08:07:18.1788928Z   // ===================================================================================== //
2025-04-15T08:07:18.1788933Z 
2025-04-15T08:07:18.1788999Z   // Agent info
2025-04-15T08:07:18.1789173Z   const AGENT_INFO_KEY = `agentInfo:${window.envSettings.agentApiUrl}`
2025-04-15T08:07:18.1789254Z   const getAgentInfo = () => {
2025-04-15T08:07:18.1789396Z     const agentInfo = localStorage.getItem(AGENT_INFO_KEY)
2025-04-15T08:07:18.1789466Z     if (agentInfo) {
2025-04-15T08:07:18.1789533Z       try {
2025-04-15T08:07:18.1789648Z         return Promise.resolve(JSON.parse(agentInfo))
2025-04-15T08:07:18.1789836Z       } catch (err) {
2025-04-15T08:07:18.1789925Z         return Promise.resolve()
2025-04-15T08:07:18.1789987Z       }
2025-04-15T08:07:18.1790053Z     }
2025-04-15T08:07:18.1790058Z 
2025-04-15T08:07:18.1790424Z     return fetch(ensureOneSlash(`${window.envSettings.agentApiUrl}/api/v3/info`)).then(response => response.json()).then(data => {
2025-04-15T08:07:18.1790513Z       if (CONFIG.cache.agentInfo) {
2025-04-15T08:07:18.1790683Z         localStorage.setItem(AGENT_INFO_KEY, JSON.stringify(data || {}))
2025-04-15T08:07:18.1790745Z       }
2025-04-15T08:07:18.1790815Z       return data
2025-04-15T08:07:18.1790901Z     }).catch(() => Promise.resolve())
2025-04-15T08:07:18.1790966Z   }
2025-04-15T08:07:18.1790976Z 
2025-04-15T08:07:18.1791197Z   const loadStyle = (url, { media, insertAfter: aref, insertBefore: bref, rel, type } = {}) => {
2025-04-15T08:07:18.1791274Z     rel = rel || 'stylesheet'
2025-04-15T08:07:18.1791355Z     type = type || 'text/css'
2025-04-15T08:07:18.1791472Z     return new Promise(function (resolve, reject) {
2025-04-15T08:07:18.1791579Z       let link = document.createElement('link');
2025-04-15T08:07:18.1791652Z       link.type = type;
2025-04-15T08:07:18.1791722Z       link.rel = rel;
2025-04-15T08:07:18.1791798Z       link.href = url;
2025-04-15T08:07:18.1791879Z       link.media = media || 'all';
2025-04-15T08:07:18.1791883Z 
2025-04-15T08:07:18.1791971Z       link.onerror = function (err) {
2025-04-15T08:07:18.1792192Z         reject(new URIError(`loadStyle: the stylesheet ${err.target.src} is not accessible.`));
2025-04-15T08:07:18.1792259Z       };
2025-04-15T08:07:18.1792263Z 
2025-04-15T08:07:18.1792342Z       link.onload = function () {
2025-04-15T08:07:18.1792407Z         resolve();
2025-04-15T08:07:18.1792559Z       };
2025-04-15T08:07:18.1792563Z 
2025-04-15T08:07:18.1792627Z       if (aref) {
2025-04-15T08:07:18.1792771Z         aref.parentNode.insertBefore(link, aref.nextSibling);
2025-04-15T08:07:18.1792840Z         return;
2025-04-15T08:07:18.1792906Z       }
2025-04-15T08:07:18.1792910Z 
2025-04-15T08:07:18.1792972Z       if (bref) {
2025-04-15T08:07:18.1793079Z         bref.parentNode.insertBefore(link, bref);
2025-04-15T08:07:18.1793148Z         return;
2025-04-15T08:07:18.1793210Z       }
2025-04-15T08:07:18.1793214Z 
2025-04-15T08:07:18.1793313Z       document.head.appendChild(link);
2025-04-15T08:07:18.1793378Z     });
2025-04-15T08:07:18.1793437Z   }
2025-04-15T08:07:18.1793446Z 
2025-04-15T08:07:18.1793780Z   const loadScript = (url, { async = true, defer = false, insertAfter: aref, insertBefore: bref, timeout = 5000, attrs, skipIf } = {}) => {
2025-04-15T08:07:18.1793893Z     return new Promise(function (resolve, reject) {
2025-04-15T08:07:18.1794001Z       if (typeof skipIf === 'function' && skipIf()) {
2025-04-15T08:07:18.1794091Z         resolve(status.SKIPPED);
2025-04-15T08:07:18.1794159Z         return;
2025-04-15T08:07:18.1794222Z       }
2025-04-15T08:07:18.1794225Z 
2025-04-15T08:07:18.1794446Z       let rejectWithTimeout = setTimeout(function () { reject(status.TIMEOUT) }, timeout);
2025-04-15T08:07:18.1794459Z 
2025-04-15T08:07:18.1794569Z       let script = document.createElement('script');
2025-04-15T08:07:18.1794658Z       script.type = 'text/javascript';
2025-04-15T08:07:18.1794735Z       script.src = url;
2025-04-15T08:07:18.1794812Z       script.async = async;
2025-04-15T08:07:18.1794891Z       script.defer = defer;
2025-04-15T08:07:18.1794896Z 
2025-04-15T08:07:18.1794961Z       if (attrs) {
2025-04-15T08:07:18.1795040Z         for (let attr in attrs) {
2025-04-15T08:07:18.1795145Z           script.setAttribute(attr, attrs[attr]);
2025-04-15T08:07:18.1795207Z         }
2025-04-15T08:07:18.1795273Z       }
2025-04-15T08:07:18.1795277Z 
2025-04-15T08:07:18.1795368Z       script.onerror = function (err) {
2025-04-15T08:07:18.1795584Z         reject(new URIError(`loadScript: the script ${err.target.src} is not accessible.`));
2025-04-15T08:07:18.1795648Z       };
2025-04-15T08:07:18.1795735Z 
2025-04-15T08:07:18.1795820Z       script.onload = function () {
2025-04-15T08:07:18.1795919Z         clearTimeout(rejectWithTimeout);
2025-04-15T08:07:18.1795999Z         resolve(status.SUCCESS);
2025-04-15T08:07:18.1796165Z       };
2025-04-15T08:07:18.1796171Z 
2025-04-15T08:07:18.1796237Z       if (aref) {
2025-04-15T08:07:18.1796387Z         aref.parentNode.insertBefore(script, aref.nextSibling);
2025-04-15T08:07:18.1796450Z         return;
2025-04-15T08:07:18.1796511Z       }
2025-04-15T08:07:18.1796516Z 
2025-04-15T08:07:18.1796585Z       if (bref) {
2025-04-15T08:07:18.1796694Z         bref.parentNode.insertBefore(script, bref);
2025-04-15T08:07:18.1796764Z         return;
2025-04-15T08:07:18.1796825Z       }
2025-04-15T08:07:18.1796828Z 
2025-04-15T08:07:18.1796926Z       document.body.appendChild(script);
2025-04-15T08:07:18.1796991Z     });
2025-04-15T08:07:18.1797052Z   }
2025-04-15T08:07:18.1797057Z 
2025-04-15T08:07:18.1797570Z   __webpack_public_path__ = ensureOneSlash(window.envSettings.webpackPublicPath ? (window.envSettings.webpackPublicPath + "/") : (window.envSettings.agentApiUrl + "/v3/"))
2025-04-15T08:07:18.1797583Z 
2025-04-15T08:07:18.1797662Z   const loadLatestUI = () => {
2025-04-15T08:07:18.1798033Z     return fetch(__webpack_public_path__ + "bundlesManifest." + window.envSettings.version.toString().replace(/(\d+)\..+/, "$1") + ".json")
2025-04-15T08:07:18.1798157Z       .then(function (response) { return response.json() })
2025-04-15T08:07:18.1798241Z       .catch(() => goToOld('/v3'))
2025-04-15T08:07:18.1798321Z       .then(function (data) {
2025-04-15T08:07:18.1798417Z         Object.keys(data).forEach(function (k) {
2025-04-15T08:07:18.1798520Z           if (/\.(map|ico|html)$/.test(data[k])) return
2025-04-15T08:07:18.1798609Z           if (/static\//.test(data[k])) return
2025-04-15T08:07:18.1798750Z 
2025-04-15T08:07:18.1798838Z           if (/\.css.*$/.test(data[k])) {
2025-04-15T08:07:18.1798993Z             loadStyle(ensureOneSlash(__webpack_public_path__ + data[k]))
2025-04-15T08:07:18.1799067Z             return
2025-04-15T08:07:18.1799130Z           }
2025-04-15T08:07:18.1799134Z 
2025-04-15T08:07:18.1799211Z           if (/\.js.*$/.test(data[k])) {
2025-04-15T08:07:18.1799375Z             loadScript(ensureOneSlash(__webpack_public_path__ + data[k]), {
2025-04-15T08:07:18.1799446Z               async: false,
2025-04-15T08:07:18.1799518Z             });
2025-04-15T08:07:18.1799580Z           }
2025-04-15T08:07:18.1799642Z         })
2025-04-15T08:07:18.1799730Z         return Promise.resolve()
2025-04-15T08:07:18.1799791Z       })
2025-04-15T08:07:18.1799858Z   }
2025-04-15T08:07:18.1799862Z 
2025-04-15T08:07:18.1799947Z   const loadDashboard = signIn => {
2025-04-15T08:07:18.1800032Z     loadLatestUI().then(() => {
2025-04-15T08:07:18.1800103Z       if (signIn) {
2025-04-15T08:07:18.1800201Z         window.location.href = ensureOneSlash(
2025-04-15T08:07:18.1800397Z           `${window.envSettings.cloudUrl}/trust?redirect_uri=${encodeURIComponent(
2025-04-15T08:07:18.1800482Z             window.location.href
2025-04-15T08:07:18.1800578Z           )}&agent_uri=${encodeURIComponent(
2025-04-15T08:07:18.1800687Z             agentUri || window.envSettings.agentApiUrl
2025-04-15T08:07:18.1800795Z           )}&telemetry_session_id=${telemetrySessionId}`
2025-04-15T08:07:18.1800864Z         )
2025-04-15T08:07:18.1800924Z       }
2025-04-15T08:07:18.1800991Z     })
2025-04-15T08:07:18.1801051Z   }
2025-04-15T08:07:18.1801055Z 
2025-04-15T08:07:18.1801132Z   const signout = () => {
2025-04-15T08:07:18.1801230Z     localStorage.removeItem(CLOUD_TOKEN_KEY)
2025-04-15T08:07:18.1801314Z     window.location.reload()
2025-04-15T08:07:18.1801379Z   }
2025-04-15T08:07:18.1801384Z 
2025-04-15T08:07:18.1801468Z   const fetchRegistryInfo = () => {
2025-04-15T08:07:18.1801621Z     if (window.localNetdataRegistry) return Promise.resolve()
2025-04-15T08:07:18.1801626Z 
2025-04-15T08:07:18.1802021Z     return fetch(ensureOneSlash(window.envSettings.agentApiUrl + "/api/v1/registry?action=hello"), { cache: "no-cache", credentials: "include" })
2025-04-15T08:07:18.1802240Z       .then(response => {
2025-04-15T08:07:18.1802423Z         if (!response.ok) return Promise.reject({ message: defaultErrorMessage })
2025-04-15T08:07:18.1802504Z         return response.json()
2025-04-15T08:07:18.1802572Z       })
2025-04-15T08:07:18.1802639Z       .then(data => {
2025-04-15T08:07:18.1802818Z         if (!data) return Promise.reject({ message: "No registry data available." })
2025-04-15T08:07:18.1802823Z 
2025-04-15T08:07:18.1802929Z         let to = data.cloud_base_url.lastIndexOf('/');
2025-04-15T08:07:18.1803120Z         to = (to == -1 || to < data.cloud_base_url.length - 2) ? data.cloud_base_url.length : to;
2025-04-15T08:07:18.1803243Z         let cloudUrl = data.cloud_base_url.substring(0, to);
2025-04-15T08:07:18.1803253Z 
2025-04-15T08:07:18.1803350Z         let withoutNodes = btoa(JSON.stringify({
2025-04-15T08:07:18.1803435Z           registry: data.registry,
2025-04-15T08:07:18.1803522Z           machine_guid: data.machine_guid,
2025-04-15T08:07:18.1803610Z           hostname: data.hostname,
2025-04-15T08:07:18.1803687Z           agent: data.agent,
2025-04-15T08:07:18.1803758Z           nodes: []
2025-04-15T08:07:18.1803820Z         }))
2025-04-15T08:07:18.1803928Z         let iframe = document.createElement('iframe');
2025-04-15T08:07:18.1804247Z         iframe.src = data.registry + "/registry-access.html?x=" + withoutNodes + "&originUrl=" + window.envSettings.agentApiUrl;
2025-04-15T08:07:18.1804391Z         iframe.style = { position: "absolute", left: "-99999999px" };
2025-04-15T08:07:18.1804469Z         iframe.width = 0;
2025-04-15T08:07:18.1804544Z         iframe.height = 0;
2025-04-15T08:07:18.1804625Z         iframe.tabindex = -1;
2025-04-15T08:07:18.1804707Z         iframe.title = "empty";
2025-04-15T08:07:18.1804881Z         iframe.classList.add("hidden");
2025-04-15T08:07:18.1804981Z         document.body.appendChild(iframe);
2025-04-15T08:07:18.1804986Z 
2025-04-15T08:07:18.1805063Z         setTimeout(function () {
2025-04-15T08:07:18.1805215Z           document.title = data.hostname + ': Netdata Agent Console';
2025-04-15T08:07:18.1805500Z           iframe.contentWindow.postMessage(["netdata-registry", window.envSettings.agentApiUrl, data], "*")
2025-04-15T08:07:18.1805565Z         }, 300);
2025-04-15T08:07:18.1805569Z 
2025-04-15T08:07:18.1805704Z         window.addEventListener('message', function (event) {
2025-04-15T08:07:18.1805820Z           if (event.source !== iframe.contentWindow) return;
2025-04-15T08:07:18.1805825Z 
2025-04-15T08:07:18.1806217Z           if (event.data.status === "disabled") console.error("Your netdata registry is disabled! Check your configuration.")
2025-04-15T08:07:18.1806225Z 
2025-04-15T08:07:18.1806302Z           if (event.data) {
2025-04-15T08:07:18.1806411Z             if (!window.localNetdataRegistry) {
2025-04-15T08:07:18.1806507Z               window.localNetdataRegistry = {}
2025-04-15T08:07:18.1806572Z             }
2025-04-15T08:07:18.1806577Z 
2025-04-15T08:07:18.1806732Z             window.localNetdataRegistry.pg = event.data.person_guid
2025-04-15T08:07:18.1806737Z 
2025-04-15T08:07:18.1806820Z             if (!window.envSettings) {
2025-04-15T08:07:18.1806910Z               window.envSettings = {}
2025-04-15T08:07:18.1806972Z             }
2025-04-15T08:07:18.1806976Z 
2025-04-15T08:07:18.1807109Z             window.envSettings.visitor = event.data.person_guid
2025-04-15T08:07:18.1807114Z 
2025-04-15T08:07:18.1807177Z             try {
2025-04-15T08:07:18.1807381Z               var visitedNodesByName = event.data.urls.reduce(function (vn, visitedUrl) {
2025-04-15T08:07:18.1807484Z                 vn[visitedUrl[4]] = vn[visitedUrl[4]] || {}
2025-04-15T08:07:18.1807575Z                 vn[visitedUrl[4]].id = visitedUrl[0]
2025-04-15T08:07:18.1807675Z                 vn[visitedUrl[4]].name = visitedUrl[4]
2025-04-15T08:07:18.1807792Z                 vn[visitedUrl[4]].lastAccessTime = visitedUrl[2]
2025-04-15T08:07:18.1807918Z                 vn[visitedUrl[4]].urls = vn[visitedUrl[4]].urls || []
2025-04-15T08:07:18.1808143Z                 vn[visitedUrl[4]].urls.push(visitedUrl[1])
2025-04-15T08:07:18.1808147Z 
2025-04-15T08:07:18.1808219Z                 return vn
2025-04-15T08:07:18.1808283Z               }, {})
2025-04-15T08:07:18.1808288Z 
2025-04-15T08:07:18.1808481Z               window.visitedNodes = Object.keys(visitedNodesByName).map(function (vn) {
2025-04-15T08:07:18.1808579Z                 return visitedNodesByName[vn]
2025-04-15T08:07:18.1808641Z               })
2025-04-15T08:07:18.1808717Z             } catch (e) {
2025-04-15T08:07:18.1808785Z               // do nothing
2025-04-15T08:07:18.1808854Z             }
2025-04-15T08:07:18.1808917Z           }
2025-04-15T08:07:18.1808977Z         });
2025-04-15T08:07:18.1808990Z 
2025-04-15T08:07:18.1809078Z         return Promise.resolve()
2025-04-15T08:07:18.1809140Z       })
2025-04-15T08:07:18.1809211Z   }
2025-04-15T08:07:18.1809214Z 
2025-04-15T08:07:18.1809418Z   const cloudRequest = async (endpoint, {allowAnonymous = false, ...options} = {}) => {
2025-04-15T08:07:18.1809565Z     const cloudToken = localStorage.getItem(CLOUD_TOKEN_KEY)
2025-04-15T08:07:18.1809742Z     if (!allowAnonymous && !cloudToken) return Promise.reject("No cloud token")
2025-04-15T08:07:18.1809747Z 
2025-04-15T08:07:18.1810203Z     options = { ...options, headers: { ...(options?.headers || {}), ...(!!cloudToken && {Authorization: `*** } }
2025-04-15T08:07:18.1810209Z 
2025-04-15T08:07:18.1810434Z     return fetch(ensureOneSlash(`${window.envSettings.apiUrl}/${endpoint}`), options)
2025-04-15T08:07:18.1810509Z   }
2025-04-15T08:07:18.1810513Z 
2025-04-15T08:07:18.1810591Z   const sleep = (ms) => {
2025-04-15T08:07:18.1810723Z     return new Promise(resolve => setTimeout(resolve, ms));
2025-04-15T08:07:18.1810908Z   }
2025-04-15T08:07:18.1810913Z 
2025-04-15T08:07:18.1811028Z   const claimAgent = ({ key, token, rooms } = {}) => {
2025-04-15T08:07:18.1811136Z     const url = window.envSettings.apiUrl;
2025-04-15T08:07:18.1811307Z     let query = new URLSearchParams({ key, rooms, token, url }).toString()
2025-04-15T08:07:18.1811441Z     query = key && rooms && token && url && query ? `?${query}` : ""
2025-04-15T08:07:18.1811731Z     return fetch(ensureOneSlash(`${window.envSettings.agentApiUrl}/api/v3/claim${query}`)).then(response => {
2025-04-15T08:07:18.1811874Z       const contentType = response.headers.get("content-type");
2025-04-15T08:07:18.1811884Z 
2025-04-15T08:07:18.1812004Z       if (contentType && contentType.includes("text")) {
2025-04-15T08:07:18.1812090Z         throw response.text();
2025-04-15T08:07:18.1812160Z       }
2025-04-15T08:07:18.1812164Z 
2025-04-15T08:07:18.1812275Z       if (contentType && contentType.includes("json")) {
2025-04-15T08:07:18.1812359Z         return response.json();
2025-04-15T08:07:18.1812426Z       }
2025-04-15T08:07:18.1812430Z 
2025-04-15T08:07:18.1812571Z       throw new Error('Unsupported content type: ' + contentType);
2025-04-15T08:07:18.1812649Z     }).then(data => {
2025-04-15T08:07:18.1812735Z       if (data.success === false) {
2025-04-15T08:07:18.1812816Z         throw data.message
2025-04-15T08:07:18.1812878Z       }
2025-04-15T08:07:18.1812882Z 
2025-04-15T08:07:18.1813014Z       if (key && data.can_be_claimed === false && !data.agent.nd) {
2025-04-15T08:07:18.1813106Z         return sleep(1000).then(claimAgent);
2025-04-15T08:07:18.1813168Z       }
2025-04-15T08:07:18.1813172Z 
2025-04-15T08:07:18.1813243Z       return data
2025-04-15T08:07:18.1813304Z     });
2025-04-15T08:07:18.1813368Z   }
2025-04-15T08:07:18.1813372Z 
2025-04-15T08:07:18.1813446Z   const checkMe = mg => {
2025-04-15T08:07:18.1813656Z     return fetch(ensureOneSlash(`${window.envSettings.agentApiUrl}/api/v3/me`), {
2025-04-15T08:07:18.1813725Z       headers: {
2025-04-15T08:07:18.1813926Z         "X-Netdata-Auth": `***
2025-04-15T08:07:18.1813989Z       }
2025-04-15T08:07:18.1814051Z     })
2025-04-15T08:07:18.1814143Z       .then(response => response.json())
2025-04-15T08:07:18.1814214Z       .catch(() => ({
2025-04-15T08:07:18.1814371Z         auth: "none",
2025-04-15T08:07:18.1814448Z         cloud_account_id: null,
2025-04-15T08:07:18.1814522Z         client_name: "",
2025-04-15T08:07:18.1814608Z         access: ["anonymous-data"],
2025-04-15T08:07:18.1814680Z         user_role: "any",
2025-04-15T08:07:18.1814746Z       }))
2025-04-15T08:07:18.1814810Z   }
2025-04-15T08:07:18.1814816Z 
2025-04-15T08:07:18.1814906Z   const fetchUserAccess = (mg, nd) => {
2025-04-15T08:07:18.1815335Z     return cloudRequest(`/api/v1/agents/${mg}/user_agent_node_access${nd ? `?nodeID=${nd}` : ""}`, {allowAnonymous: true}).then(response => response.json()).then(data => {
2025-04-15T08:07:18.1816394Z       window.localNetdataRegistry.limitations = data.limitations ? {limit: data.limitations.limit || 99999999, customDashboardsLimit: data.limitations.custom_dashboards_limit || 99999999, windowsSupport: data.limitations.windows_support || false} : {limit: 99999999, customDashboardsLimit: 99999999, windowsSupport: true}
2025-04-15T08:07:18.1816416Z 
2025-04-15T08:07:18.1816513Z       if (data.user_node_status === "noAccess") {
2025-04-15T08:07:18.1816581Z         return data
2025-04-15T08:07:18.1816649Z       }
2025-04-15T08:07:18.1816785Z       window.localNetdataRegistry.spaceId = data.space_id
2025-04-15T08:07:18.1816790Z 
2025-04-15T08:07:18.1816912Z       const room = data.rooms.find(r => r.untouchable)
2025-04-15T08:07:18.1816916Z 
2025-04-15T08:07:18.1817031Z       window.localNetdataRegistry.roomId = room.id
2025-04-15T08:07:18.1817140Z       window.localNetdataRegistry.room = room
2025-04-15T08:07:18.1817145Z 
2025-04-15T08:07:18.1817211Z       return data
2025-04-15T08:07:18.1817284Z     }).catch((err) => { })
2025-04-15T08:07:18.1817350Z   }
2025-04-15T08:07:18.1817354Z 
2025-04-15T08:07:18.1817480Z   const getAgentToken = ({ mg, nd, claimId }, agent) => {
2025-04-15T08:07:18.1817911Z     return cloudRequest(`/api/v2/bearer_get_token?node_id=${nd}&claim_id=${claimId}&machine_guid=${mg}`).then(response => {
2025-04-15T08:07:18.1818003Z       if (response.status === 401) {
2025-04-15T08:07:18.1818077Z         signout()
2025-04-15T08:07:18.1818140Z         return
2025-04-15T08:07:18.1818202Z       }
2025-04-15T08:07:18.1818282Z       if (!response.ok) {
2025-04-15T08:07:18.1818395Z         // Parse the error response to extract the message
2025-04-15T08:07:18.1818502Z         return response.json().then(errorData => {
2025-04-15T08:07:18.1818616Z           const error = new Error(errorData.errorMessage);
2025-04-15T08:07:18.1818712Z           error.data = errorData.errorContext
2025-04-15T08:07:18.1818785Z           throw error
2025-04-15T08:07:18.1818850Z         });
2025-04-15T08:07:18.1818915Z       }
2025-04-15T08:07:18.1818994Z       return response.json();
2025-04-15T08:07:18.1819063Z     }).then(data => {
2025-04-15T08:07:18.1819149Z       if (data && data.token) {
2025-04-15T08:07:18.1819273Z         localStorage.setItem(`agentJWT:${mg}`, data?.token)
2025-04-15T08:07:18.1819428Z         localStorage.setItem(`agentJWTExp:${mg}`, data?.expiration)
2025-04-15T08:07:18.1819495Z       }
2025-04-15T08:07:18.1819564Z       return data
2025-04-15T08:07:18.1819636Z     }).catch((err) => {
2025-04-15T08:07:18.1819705Z       stopLoading()
2025-04-15T08:07:18.1819709Z 
2025-04-15T08:07:18.1819840Z       let message = "Something went wrong. Please try again."
2025-04-15T08:07:18.1819944Z       if (err.data && err.data.state === "created") {
2025-04-15T08:07:18.1820206Z         message = "The node is claimed and is syncing with Netdata Cloud. Please wait a few seconds and try again."
2025-04-15T08:07:18.1820270Z       } else {
2025-04-15T08:07:18.1820363Z         message = (err && err.message) || message
2025-04-15T08:07:18.1820431Z       }
2025-04-15T08:07:18.1820435Z 
2025-04-15T08:07:18.1820438Z 
2025-04-15T08:07:18.1820575Z       const msgSignIn = document.getElementById("msgSignIn");
2025-04-15T08:07:18.1820670Z       msgSignIn.textContent = message
2025-04-15T08:07:18.1820675Z 
2025-04-15T08:07:18.1820803Z       const btnSignIn = document.getElementById("btnSignIn");
2025-04-15T08:07:18.1821022Z       btnSignIn.style.display = "none"
2025-04-15T08:07:18.1821026Z 
2025-04-15T08:07:18.1821110Z       setupOptOutMessage(agent)
2025-04-15T08:07:18.1821179Z     })
2025-04-15T08:07:18.1821242Z   }
2025-04-15T08:07:18.1821246Z 
2025-04-15T08:07:18.1821336Z   const setupOptOutMessage = agent => {
2025-04-15T08:07:18.1821473Z     const bearerProtection = agent.api.bearer_protection;
2025-04-15T08:07:18.1821477Z 
2025-04-15T08:07:18.1821683Z     const isWindows = (agent.application.os.kernel || "").toLowerCase() === "windows"
2025-04-15T08:07:18.1822134Z     const lockWindows = isWindows && (!window.localNetdataRegistry.limitation || window.localNetdataRegistry.limitations.windowsSupport === false);
2025-04-15T08:07:18.1822139Z 
2025-04-15T08:07:18.1822294Z     const denyAnonymousAccess = bearerProtection || lockWindows;
2025-04-15T08:07:18.1822299Z 
2025-04-15T08:07:18.1822412Z     // Get all elements with the "opt-out-link" class
2025-04-15T08:07:18.1822618Z     const optOutLinkElems = document.getElementsByClassName("opt-out-link");
2025-04-15T08:07:18.1822713Z     if (optOutLinkElems.length > 0) {
2025-04-15T08:07:18.1822828Z       for (let i = 0; i < optOutLinkElems.length; i++) {
2025-04-15T08:07:18.1823024Z         optOutLinkElems[i].style.display = denyAnonymousAccess ? "none" : "inline";
2025-04-15T08:07:18.1823093Z       }
2025-04-15T08:07:18.1823160Z     }
2025-04-15T08:07:18.1823164Z 
2025-04-15T08:07:18.1823300Z     // Get all elements with the "no-anonymous-access" class
2025-04-15T08:07:18.1823563Z     const anonymousAccessDeniedElems = document.getElementsByClassName("no-anonymous-access");
2025-04-15T08:07:18.1823684Z     if (anonymousAccessDeniedElems.length > 0) {
2025-04-15T08:07:18.1823823Z       for (let i = 0; i < anonymousAccessDeniedElems.length; i++) {
2025-04-15T08:07:18.1824060Z         if (anonymousAccessDeniedElems[i].textContent === "") {
2025-04-15T08:07:18.1824828Z           anonymousAccessDeniedElems[i].innerHTML = bearerProtection ? "Anonymous access is not allowed. *** is enabled.<br />Please sign in to continue." : "Anonymous access to the dashboard of Windows nodes is not allowed.<br />Please sign in to continue.";
2025-04-15T08:07:18.1824905Z         }
2025-04-15T08:07:18.1825148Z         anonymousAccessDeniedElems[i].style.display = denyAnonymousAccess ? "inline" : "none";
2025-04-15T08:07:18.1825219Z       }
2025-04-15T08:07:18.1825281Z     }
2025-04-15T08:07:18.1825341Z   }
2025-04-15T08:07:18.1825347Z 
2025-04-15T08:07:18.1825452Z   const createClaimingToken = spaceId => {
2025-04-15T08:07:18.1825548Z     if (!spaceId) return Promise.resolve();
2025-04-15T08:07:18.1825656Z     toggleClaimingTokenLoadingState(true);
2025-04-15T08:07:18.1825839Z     return cloudRequest(`/api/v1/spaces/${spaceId}/token`).then(response => {
2025-04-15T08:07:18.1825952Z       toggleClaimingTokenLoadingState(false);
2025-04-15T08:07:18.1826039Z       return response.json();
2025-04-15T08:07:18.1826199Z     });
2025-04-15T08:07:18.1826272Z   }
2025-04-15T08:07:18.1826276Z 
2025-04-15T08:07:18.1826376Z   const getClaimingToken = async spaceId => {
2025-04-15T08:07:18.1826473Z     if (!spaceId) return Promise.resolve();
2025-04-15T08:07:18.1826645Z     const cachedToken = state.cache.claimingTokensPerSpace[spaceId];
2025-04-15T08:07:18.1826773Z     if (cachedToken) return Promise.resolve(cachedToken);
2025-04-15T08:07:18.1826895Z     const token = await createClaimingToken(spaceId);
2025-04-15T08:07:18.1826987Z     cacheClaimingToken(spaceId, token);
2025-04-15T08:07:18.1827080Z     return Promise.resolve(token);
2025-04-15T08:07:18.1827144Z   }
2025-04-15T08:07:18.1827148Z 
2025-04-15T08:07:18.1827232Z   const fetchSpaces = () => {
2025-04-15T08:07:18.1827323Z     toggleSpacesLoadingState(true);
2025-04-15T08:07:18.1827462Z     return cloudRequest("/api/v3/spaces").then(response => {
2025-04-15T08:07:18.1827560Z       toggleSpacesLoadingState(false);
2025-04-15T08:07:18.1827638Z       return response.json();
2025-04-15T08:07:18.1827705Z     });
2025-04-15T08:07:18.1827886Z   }
2025-04-15T08:07:18.1827890Z 
2025-04-15T08:07:18.1827971Z   const getSpaces = async () => {
2025-04-15T08:07:18.1828076Z     const cachedSpaces = state.cache.spaces;
2025-04-15T08:07:18.1828210Z     if (cachedSpaces) return Promise.resolve(cachedSpaces);
2025-04-15T08:07:18.1828304Z     const spaces = await fetchSpaces();
2025-04-15T08:07:18.1828383Z     cacheSpaces(spaces);
2025-04-15T08:07:18.1828476Z     return Promise.resolve(spaces);
2025-04-15T08:07:18.1828538Z   }
2025-04-15T08:07:18.1828542Z 
2025-04-15T08:07:18.1828629Z   const fetchSpaceRooms = spaceId => {
2025-04-15T08:07:18.1828728Z     if (!spaceId) return Promise.resolve([])
2025-04-15T08:07:18.1828817Z     toggleRoomsLoadingState(true);
2025-04-15T08:07:18.1829091Z     return cloudRequest(`/api/v2/spaces/${spaceId}/rooms?show_all=true&default=false`).then(response => {
2025-04-15T08:07:18.1829187Z       toggleRoomsLoadingState(false);
2025-04-15T08:07:18.1829269Z       return response.json();
2025-04-15T08:07:18.1829337Z     })
2025-04-15T08:07:18.1829398Z   }
2025-04-15T08:07:18.1829402Z 
2025-04-15T08:07:18.1829499Z   const getSpaceRooms = async spaceId => {
2025-04-15T08:07:18.1829597Z     if (!spaceId) return Promise.resolve([]);
2025-04-15T08:07:18.1829718Z     const cachedRooms = state.cache.rooms[spaceId];
2025-04-15T08:07:18.1829844Z     if (cachedRooms) return Promise.resolve(cachedRooms);
2025-04-15T08:07:18.1829949Z     const rooms = await fetchSpaceRooms(spaceId);
2025-04-15T08:07:18.1830037Z     cacheRooms(spaceId, rooms);
2025-04-15T08:07:18.1830123Z     return Promise.resolve(rooms);
2025-04-15T08:07:18.1830189Z   }
2025-04-15T08:07:18.1830193Z 
2025-04-15T08:07:18.1830291Z   const updateSelectedOptions = root => {
2025-04-15T08:07:18.1830369Z     if (!root) return;
2025-04-15T08:07:18.1830763Z     const checkboxes = root.querySelectorAll('.dropdown > .checkbox-container input[type="checkbox"]');
2025-04-15T08:07:18.1842356Z     const selected = Array.from(checkboxes)
2025-04-15T08:07:18.1842506Z       .filter((checkbox) => checkbox.checked)
2025-04-15T08:07:18.1842717Z       .map((checkbox) => ({ value: checkbox.value, name: checkbox.dataset.name }));
2025-04-15T08:07:18.1842723Z 
2025-04-15T08:07:18.1842859Z     const selectedNames = selected.map(({ name }) => name);
2025-04-15T08:07:18.1842999Z     const selectedValues = selected.map(({ value }) => value);
2025-04-15T08:07:18.1843004Z 
2025-04-15T08:07:18.1843145Z     const selectedSpaceIds = state.claim.selectedSpaceIds;
2025-04-15T08:07:18.1843240Z     const spaces = state.cache.spaces;
2025-04-15T08:07:18.1843552Z     const selectedSpaceName = selectedSpaceIds.length ? spaces.find(({ id }) => id == selectedSpaceIds[0])?.name : null;
2025-04-15T08:07:18.1843561Z 
2025-04-15T08:07:18.1843833Z     const dropdownChangeEvent = new CustomEvent("dropdownChange", { detail: { values: selectedValues } });
2025-04-15T08:07:18.1843946Z     root.dispatchEvent(dropdownChangeEvent);
2025-04-15T08:07:18.1843951Z 
2025-04-15T08:07:18.1844070Z     root.querySelector("#selectedItems").textContent =
2025-04-15T08:07:18.1844247Z       selectedNames.length > 0 ? selectedNames.join(", ") : "Select Rooms";
2025-04-15T08:07:18.1844252Z 
2025-04-15T08:07:18.1844400Z     const target = document.getElementById(root.dataset.target);
2025-04-15T08:07:18.1844481Z     target.textContent =
2025-04-15T08:07:18.1844560Z       selected.length > 0
2025-04-15T08:07:18.1844727Z         ? `You are ready to connect your agent to room(s): ${selectedNames.join(
2025-04-15T08:07:18.1844792Z           ", "
2025-04-15T08:07:18.1844983Z         )}${selectedSpaceName ? ` of ${selectedSpaceName} space` : ""}`
2025-04-15T08:07:18.1845044Z         : "";
2025-04-15T08:07:18.1845107Z   }
2025-04-15T08:07:18.1845112Z 
2025-04-15T08:07:18.1845203Z   const bindDropdownOptions = () => {
2025-04-15T08:07:18.1845375Z     document.querySelectorAll(".dropdown-custom").forEach(root => {
2025-04-15T08:07:18.1845542Z       root.querySelectorAll(".nd-checkbox > input").forEach(input => {
2025-04-15T08:07:18.1845891Z         input.addEventListener("change", () => updateSelectedOptions(root));
2025-04-15T08:07:18.1845956Z       });
2025-04-15T08:07:18.1846019Z     });
2025-04-15T08:07:18.1846201Z   }
2025-04-15T08:07:18.1846208Z 
2025-04-15T08:07:18.1846305Z   const buildRoomsList = (rooms = []) => {
2025-04-15T08:07:18.1846505Z     const container = document.getElementById("roomsSelectorOptionsContainer");
2025-04-15T08:07:18.1846578Z     if (container) {
2025-04-15T08:07:18.1846661Z       container.innerHTML = "";
2025-04-15T08:07:18.1846748Z       rooms.forEach(({ id, name }) => {
2025-04-15T08:07:18.1846857Z         const isDefaultSelected = name === "All nodes"
2025-04-15T08:07:18.1846861Z 
2025-04-15T08:07:18.1846945Z         if (isDefaultSelected) {
2025-04-15T08:07:18.1847030Z           setSelectedRoomsStatus(id)
2025-04-15T08:07:18.1847098Z         }
2025-04-15T08:07:18.1847102Z 
2025-04-15T08:07:18.1847254Z         const label = createElem("label", { classList: "nd-checkbox" });
2025-04-15T08:07:18.1847480Z         const input = createElem("input", { type: "checkbox", value: id, checked: isDefaultSelected });
2025-04-15T08:07:18.1847574Z         input.dataset.name = name;
2025-04-15T08:07:18.1847653Z         input.onchange = e => {
2025-04-15T08:07:18.1847756Z           setSelectedRoomsStatus(prev => {
2025-04-15T08:07:18.1847860Z             if (e.target.checked) return [...prev, id];
2025-04-15T08:07:18.1847951Z             return prev.filter(r => r != id);
2025-04-15T08:07:18.1848018Z           });
2025-04-15T08:07:18.1848081Z         }
2025-04-15T08:07:18.1848085Z 
2025-04-15T08:07:18.1848228Z         const span = createElem("span", { classList: "checkmark" });
2025-04-15T08:07:18.1848333Z         const text = document.createTextNode(name);
2025-04-15T08:07:18.1848337Z 
2025-04-15T08:07:18.1848552Z         label.appendChild(input);
2025-04-15T08:07:18.1848635Z         label.appendChild(span);
2025-04-15T08:07:18.1848712Z         label.appendChild(text);
2025-04-15T08:07:18.1848805Z         container.appendChild(label);
2025-04-15T08:07:18.1848873Z       });
2025-04-15T08:07:18.1848877Z 
2025-04-15T08:07:18.1848962Z       bindDropdownOptions();
2025-04-15T08:07:18.1849025Z     }
2025-04-15T08:07:18.1849087Z   }
2025-04-15T08:07:18.1849094Z 
2025-04-15T08:07:18.1849188Z   const buildSpacesList = (spaces = []) => {
2025-04-15T08:07:18.1849325Z     const container = document.getElementById("spacesList");
2025-04-15T08:07:18.1849398Z     if (container) {
2025-04-15T08:07:18.1849476Z       container.innerHTML = "";
2025-04-15T08:07:18.1849599Z       spaces.forEach(({ id, name, permissions = [] }) => {
2025-04-15T08:07:18.1849711Z         if (!permissions.includes("node:Create")) return
2025-04-15T08:07:18.1849715Z 
2025-04-15T08:07:18.1849803Z         const listItem = createElem("li");
2025-04-15T08:07:18.1849892Z         listItem.innerText = name;
2025-04-15T08:07:18.1849983Z         listItem.className = "space-item";
2025-04-15T08:07:18.1850071Z         listItem.dataset.id = id;
2025-04-15T08:07:18.1850158Z         listItem.onclick = async () => {
2025-04-15T08:07:18.1850415Z           document.querySelectorAll(".space-item").forEach(item => item.classList.remove("selected"));
2025-04-15T08:07:18.1850511Z           listItem.classList.add("selected");
2025-04-15T08:07:18.1850601Z           setSelectedSpacesStatus([id]);
2025-04-15T08:07:18.1850671Z         };
2025-04-15T08:07:18.1850760Z         container.appendChild(listItem);
2025-04-15T08:07:18.1850827Z       });
2025-04-15T08:07:18.1850890Z     }
2025-04-15T08:07:18.1850972Z     return Promise.resolve();
2025-04-15T08:07:18.1851038Z   }
2025-04-15T08:07:18.1851043Z 
2025-04-15T08:07:18.1851130Z   const initCustomDropdown = () => {
2025-04-15T08:07:18.1851219Z     const toggleDropdown = e => {
2025-04-15T08:07:18.1851303Z       if (!e.currentTarget) return;
2025-04-15T08:07:18.1851527Z       const checkboxContainer = e.currentTarget.querySelector(".checkbox-container");
2025-04-15T08:07:18.1851607Z       if (checkboxContainer) {
2025-04-15T08:07:18.1851888Z         checkboxContainer.style.display = checkboxContainer.style.display === "block" ? "none" : "block";
2025-04-15T08:07:18.1852073Z       }
2025-04-15T08:07:18.1852136Z     }
2025-04-15T08:07:18.1852140Z 
2025-04-15T08:07:18.1852225Z     const clearSelection = e => {
2025-04-15T08:07:18.1852305Z       if (!e.currentTarget) return;
2025-04-15T08:07:18.1852439Z       const root = e.currentTarget.closest(".dropdown-custom");
2025-04-15T08:07:18.1852513Z       if (root) {
2025-04-15T08:07:18.1852777Z         const checkboxes = root.querySelectorAll('.dropdown > .checkbox-container input[type="checkbox"]');
2025-04-15T08:07:18.1852936Z         checkboxes.forEach((checkbox) => (checkbox.checked = false));
2025-04-15T08:07:18.1853024Z         updateSelectedOptions(root);
2025-04-15T08:07:18.1853093Z       }
2025-04-15T08:07:18.1853160Z     }
2025-04-15T08:07:18.1853164Z 
2025-04-15T08:07:18.1853327Z     document.querySelectorAll(".dropdown-custom").forEach(root => {
2025-04-15T08:07:18.1853460Z       const btnClear = root.querySelector(".clear-button");
2025-04-15T08:07:18.1853581Z       const dropdown = root.querySelector(".dropdown");
2025-04-15T08:07:18.1853657Z       if (dropdown) {
2025-04-15T08:07:18.1853729Z         if (btnClear) {
2025-04-15T08:07:18.1853863Z           btnClear.addEventListener("click", clearSelection);
2025-04-15T08:07:18.1853927Z         }
2025-04-15T08:07:18.1854053Z         dropdown.addEventListener("click", toggleDropdown);
2025-04-15T08:07:18.1854121Z       }
2025-04-15T08:07:18.1854184Z     });
2025-04-15T08:07:18.1854188Z 
2025-04-15T08:07:18.1854296Z     document.addEventListener("click", (e) => {
2025-04-15T08:07:18.1854476Z       document.querySelectorAll(".dropdown-custom").forEach(dropdown => {
2025-04-15T08:07:18.1854676Z         const checkboxContainer = dropdown.querySelector(".checkbox-container");
2025-04-15T08:07:18.1854944Z         if (dropdown && checkboxContainer && !dropdown.contains(e.target)) {
2025-04-15T08:07:18.1855054Z           checkboxContainer.style.display = "none";
2025-04-15T08:07:18.1855129Z         }
2025-04-15T08:07:18.1855189Z       });
2025-04-15T08:07:18.1855255Z     });
2025-04-15T08:07:18.1855259Z 
2025-04-15T08:07:18.1855340Z     return Promise.resolve();
2025-04-15T08:07:18.1855401Z   }
2025-04-15T08:07:18.1855404Z 
2025-04-15T08:07:18.1855497Z   const initClaimingElements = () => {
2025-04-15T08:07:18.1855650Z     const claimCommand = document.getElementById("claimCommand");
2025-04-15T08:07:18.1855781Z     const claimTip = document.getElementById("claimTip");
2025-04-15T08:07:18.1855946Z     const btnPrev = document.getElementById("btnConnectionStepPrev");
2025-04-15T08:07:18.1856210Z     const btnNext = document.getElementById("btnConnectionStepNext");
2025-04-15T08:07:18.1856333Z     const btnClaim = document.getElementById("btnClaim");
2025-04-15T08:07:18.1856530Z     const claimingPrivateKey = document.getElementById("claimingPrivateKey");
2025-04-15T08:07:18.1856539Z 
2025-04-15T08:07:18.1856658Z     if (claimCommand && !!state.claim?.status?.command) {
2025-04-15T08:07:18.1856796Z       claimCommand.innerText = state.claim.status.command;
2025-04-15T08:07:18.1856863Z     }
2025-04-15T08:07:18.1856867Z 
2025-04-15T08:07:18.1856979Z     if (claimTip && !!state.claim?.status?.key_filename) {
2025-04-15T08:07:18.1857700Z       claimTip.innerText = `Tip: If the command doesn’t work out-of-the-box, locate the ${state.claim.status.key_filename} file, open it in your favourite text editor, and copy it to your clipboard.`;
2025-04-15T08:07:18.1857766Z     }
2025-04-15T08:07:18.1857770Z 
2025-04-15T08:07:18.1857843Z     if (btnPrev) {
2025-04-15T08:07:18.1857954Z       btnPrev.addEventListener("click", () => {
2025-04-15T08:07:18.1858054Z         setClaimingStep(prev => prev - 1);
2025-04-15T08:07:18.1858122Z       });
2025-04-15T08:07:18.1858182Z     }
2025-04-15T08:07:18.1858195Z 
2025-04-15T08:07:18.1858267Z     if (btnNext) {
2025-04-15T08:07:18.1858385Z       btnNext.addEventListener("click", async () => {
2025-04-15T08:07:18.1858525Z         const newStep = await setClaimingStep(prev => prev + 1);
2025-04-15T08:07:18.1858812Z         if (newStep == 2 && !!state.claim.selectedSpaceIds.length) {
2025-04-15T08:07:18.1858935Z           const spaceId = state.claim.selectedSpaceIds[0];
2025-04-15T08:07:18.1859043Z           const rooms = await getSpaceRooms(spaceId);
2025-04-15T08:07:18.1859126Z           buildRoomsList(rooms);
2025-04-15T08:07:18.1859221Z           await getClaimingToken(spaceId);
2025-04-15T08:07:18.1859284Z         }
2025-04-15T08:07:18.1859346Z       });
2025-04-15T08:07:18.1859411Z     }
2025-04-15T08:07:18.1859414Z 
2025-04-15T08:07:18.1859483Z     if (btnClaim) {
2025-04-15T08:07:18.1859602Z       btnClaim.addEventListener("click", async () => {
2025-04-15T08:07:18.1859707Z         toggleClaimingAgentLoadingState(true);
2025-04-15T08:07:18.1859810Z         await setClaimResponseState({});
2025-04-15T08:07:18.1859992Z         const { selectedSpaceIds, selectedRoomIds, privateKey } = state.claim;
2025-04-15T08:07:18.1860298Z         const { token } = selectedSpaceIds.length ? state.cache.claimingTokensPerSpace[selectedSpaceIds[0]] || {} : {};
2025-04-15T08:07:18.1860308Z 
2025-04-15T08:07:18.1860389Z         let didCatch = false;
2025-04-15T08:07:18.1860629Z         const data = await claimAgent({ key: privateKey, token, rooms: selectedRoomIds }).catch(err => {
2025-04-15T08:07:18.1860709Z           didCatch = true;
2025-04-15T08:07:18.1860825Z           setClaimResponseState({ error: err.message });
2025-04-15T08:07:18.1860890Z         })
2025-04-15T08:07:18.1860894Z 
2025-04-15T08:07:18.1860975Z         if (data === "invalid key") {
2025-04-15T08:07:18.1861048Z           didCatch = true;
2025-04-15T08:07:18.1861168Z           setClaimResponseState({ error: "Invalid key" });
2025-04-15T08:07:18.1861228Z         }
2025-04-15T08:07:18.1861474Z         toggleClaimingAgentLoadingState(false);
2025-04-15T08:07:18.1861479Z 
2025-04-15T08:07:18.1861552Z         if (didCatch) return;
2025-04-15T08:07:18.1861557Z 
2025-04-15T08:07:18.1861624Z         if (data) {
2025-04-15T08:07:18.1861702Z           if (data.success) {
2025-04-15T08:07:18.1861787Z             window.location.reload();
2025-04-15T08:07:18.1861854Z           } else {
2025-04-15T08:07:18.1861945Z             setClaimResponseState(data);
2025-04-15T08:07:18.1862011Z           }
2025-04-15T08:07:18.1862071Z         }
2025-04-15T08:07:18.1862131Z       });
2025-04-15T08:07:18.1862195Z     }
2025-04-15T08:07:18.1862198Z 
2025-04-15T08:07:18.1862277Z     if (claimingPrivateKey) {
2025-04-15T08:07:18.1862554Z       claimingPrivateKey.addEventListener("input", e => setClaimingPrivateKeyState(e.target.value));
2025-04-15T08:07:18.1862616Z     }
2025-04-15T08:07:18.1862681Z   }
2025-04-15T08:07:18.1862685Z 
2025-04-15T08:07:18.1862771Z   const setClaimStatus = async () => {
2025-04-15T08:07:18.1862859Z     const status = await claimAgent();
2025-04-15T08:07:18.1862940Z     const claimStatus = {
2025-04-15T08:07:18.1863075Z       command: status.cmd || `sudo cat ${status.key_filename}`,
2025-04-15T08:07:18.1863148Z       ...status
2025-04-15T08:07:18.1863210Z     };
2025-04-15T08:07:18.1863308Z     await setClaimStatusState(claimStatus);
2025-04-15T08:07:18.1863391Z     return Promise.resolve();
2025-04-15T08:07:18.1863452Z   }
2025-04-15T08:07:18.1863455Z 
2025-04-15T08:07:18.1863553Z   const prepareClaiming = async agent => {
2025-04-15T08:07:18.1863630Z     await setClaimStatus();
2025-04-15T08:07:18.1863718Z     setupOptOutMessage(agent)
2025-04-15T08:07:18.1863802Z     const spaces = await getSpaces();
2025-04-15T08:07:18.1863887Z     await buildSpacesList(spaces);
2025-04-15T08:07:18.1863969Z     initCustomDropdown();
2025-04-15T08:07:18.1864049Z     initClaimingElements();
2025-04-15T08:07:18.1864119Z     syncUI();
2025-04-15T08:07:18.1864180Z   }
2025-04-15T08:07:18.1864184Z 
2025-04-15T08:07:18.1864267Z   const startLoading = () => {
2025-04-15T08:07:18.1864354Z     const body = document.body;
2025-04-15T08:07:18.1864419Z     if (body) {
2025-04-15T08:07:18.1864509Z       body.classList.add("loading");
2025-04-15T08:07:18.1864733Z     }
2025-04-15T08:07:18.1864792Z   }
2025-04-15T08:07:18.1864800Z 
2025-04-15T08:07:18.1864877Z   const stopLoading = () => {
2025-04-15T08:07:18.1864958Z     const body = document.body;
2025-04-15T08:07:18.1865026Z     if (body) {
2025-04-15T08:07:18.1865117Z       body.classList.remove("loading");
2025-04-15T08:07:18.1865226Z       window.dispatchEvent(new Event("resize"));
2025-04-15T08:07:18.1865289Z     }
2025-04-15T08:07:18.1865349Z   }
2025-04-15T08:07:18.1865352Z 
2025-04-15T08:07:18.1865513Z   const showErrorMessage = (message = defaultErrorMessage) => {
2025-04-15T08:07:18.1865689Z     const messageContainer = document.getElementById("loadingMessage");
2025-04-15T08:07:18.1865771Z     if (messageContainer) {
2025-04-15T08:07:18.1865865Z       messageContainer.innerHTML = message;
2025-04-15T08:07:18.1865946Z       startLoading();
2025-04-15T08:07:18.1866007Z     }
2025-04-15T08:07:18.1866166Z   }
2025-04-15T08:07:18.1866170Z 
2025-04-15T08:07:18.1866256Z   const initMetrics = data => {
2025-04-15T08:07:18.1866461Z     if (!data?.agents?.[0]) return Promise.reject({ message: "No agent data available." })
2025-04-15T08:07:18.1866466Z 
2025-04-15T08:07:18.1866617Z     const setPercentageBarWidth = (containerId, percent) => {
2025-04-15T08:07:18.1866748Z       const container = document.getElementById(containerId);
2025-04-15T08:07:18.1866822Z       if (container) {
2025-04-15T08:07:18.1866975Z         const percentageContainer = document.createElement("div");
2025-04-15T08:07:18.1867122Z         percentageContainer.className = "percentage-container";
2025-04-15T08:07:18.1867127Z 
2025-04-15T08:07:18.1867255Z         const percentageBar = document.createElement("div");
2025-04-15T08:07:18.1867366Z         percentageBar.className = "percentage-bar";
2025-04-15T08:07:18.1867601Z         percentageBar.style.width = percent + "%";
2025-04-15T08:07:18.1867606Z 
2025-04-15T08:07:18.1867730Z         const percentageText = document.createElement("div");
2025-04-15T08:07:18.1867850Z         percentageText.className = "percentage-text";
2025-04-15T08:07:18.1868085Z         percentageText.innerText = percent + "%"; // Display the rounded percentage value with "%"
2025-04-15T08:07:18.1868091Z 
2025-04-15T08:07:18.1868227Z         // Calculate the right position dynamically, capped at 96%
2025-04-15T08:07:18.1868366Z         const rightPosition = Math.min(100 - percent, 96) + "%";
2025-04-15T08:07:18.1868476Z         percentageText.style.right = rightPosition;
2025-04-15T08:07:18.1868481Z 
2025-04-15T08:07:18.1868610Z         percentageContainer.appendChild(percentageBar);
2025-04-15T08:07:18.1868828Z         percentageContainer.appendChild(percentageText); // Append the percentage text
2025-04-15T08:07:18.1868834Z 
2025-04-15T08:07:18.1868944Z         container.appendChild(percentageContainer);
2025-04-15T08:07:18.1869011Z       }
2025-04-15T08:07:18.1869076Z     }
2025-04-15T08:07:18.1869080Z 
2025-04-15T08:07:18.1869185Z     const units = ["", "K", "M", "B", "T", "P", "E"]
2025-04-15T08:07:18.1869194Z 
2025-04-15T08:07:18.1869283Z     const abbreviateNumber = number => {
2025-04-15T08:07:18.1869363Z       if (!number) return 0
2025-04-15T08:07:18.1869423Z     
2025-04-15T08:07:18.1869538Z       const tier = (Math.log10(Math.abs(number)) / 3) | 0
2025-04-15T08:07:18.1869598Z     
2025-04-15T08:07:18.1869675Z       if (!tier) return number
2025-04-15T08:07:18.1869738Z     
2025-04-15T08:07:18.1869817Z       const suffix = units[tier]
2025-04-15T08:07:18.1869909Z       const scale = Math.pow(10, tier * 3)
2025-04-15T08:07:18.1869991Z       const scaled = number / scale
2025-04-15T08:07:18.1870082Z       return scaled.toFixed(1) + suffix
2025-04-15T08:07:18.1870144Z     }
2025-04-15T08:07:18.1870148Z 
2025-04-15T08:07:18.1870230Z     const formatBytes = (bytes) => {
2025-04-15T08:07:18.1870319Z       if (bytes === 0) return "0 Bytes";
2025-04-15T08:07:18.1870389Z       const k = 1024,
2025-04-15T08:07:18.1870529Z         sizes = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"],
2025-04-15T08:07:18.1870753Z         i = Math.floor(Math.log(bytes) / Math.log(k));
2025-04-15T08:07:18.1870819Z       return (
2025-04-15T08:07:18.1870983Z         parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i]
2025-04-15T08:07:18.1871047Z       );
2025-04-15T08:07:18.1871112Z     }
2025-04-15T08:07:18.1871116Z 
2025-04-15T08:07:18.1871214Z     const formatLargeNumbers = (number) => {
2025-04-15T08:07:18.1871310Z       return number.toLocaleString();
2025-04-15T08:07:18.1871372Z     }
2025-04-15T08:07:18.1871376Z 
2025-04-15T08:07:18.1871471Z     const formatTimestamp = (timestamp) => {
2025-04-15T08:07:18.1871569Z       const date = new Date(timestamp * 1000);
2025-04-15T08:07:18.1871639Z       const months = [
2025-04-15T08:07:18.1871711Z         "Jan",
2025-04-15T08:07:18.1871777Z         "Feb",
2025-04-15T08:07:18.1871845Z         "Mar",
2025-04-15T08:07:18.1871916Z         "Apr",
2025-04-15T08:07:18.1871979Z         "May",
2025-04-15T08:07:18.1872045Z         "Jun",
2025-04-15T08:07:18.1872108Z         "Jul",
2025-04-15T08:07:18.1872177Z         "Aug",
2025-04-15T08:07:18.1872244Z         "Sep",
2025-04-15T08:07:18.1872306Z         "Oct",
2025-04-15T08:07:18.1872370Z         "Nov",
2025-04-15T08:07:18.1872431Z         "Dec",
2025-04-15T08:07:18.1872499Z       ];
2025-04-15T08:07:18.1872630Z       const days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
2025-04-15T08:07:18.1872717Z       const day = days[date.getUTCDay()];
2025-04-15T08:07:18.1872818Z       const month = months[date.getUTCMonth()];
2025-04-15T08:07:18.1872904Z       const year = date.getUTCFullYear();
2025-04-15T08:07:18.1873052Z       const hours = date.getUTCHours().toString().padStart(2, "0");
2025-04-15T08:07:18.1873206Z       const minutes = date.getUTCMinutes().toString().padStart(2, "0");
2025-04-15T08:07:18.1873444Z       const seconds = date.getUTCSeconds().toString().padStart(2, "0");
2025-04-15T08:07:18.1873453Z 
2025-04-15T08:07:18.1873627Z       return `${month} ${date.getUTCDate()}, ${year} ${hours}:${minutes}:${seconds}`;
2025-04-15T08:07:18.1873695Z     }
2025-04-15T08:07:18.1873699Z 
2025-04-15T08:07:18.1873823Z     const formatDuration = (seconds, short = false) => {
2025-04-15T08:07:18.1873909Z       if (seconds <= 0) return "0 seconds";
2025-04-15T08:07:18.1874020Z       const days = Math.floor(seconds / (24 * 3600));
2025-04-15T08:07:18.1874141Z       const hours = Math.floor((seconds % (24 * 3600)) / 3600);
2025-04-15T08:07:18.1874253Z       const minutes = Math.floor((seconds % 3600) / 60);
2025-04-15T08:07:18.1874345Z       const remainingSeconds = seconds % 60;
2025-04-15T08:07:18.1874350Z 
2025-04-15T08:07:18.1874418Z       if (short) {
2025-04-15T08:07:18.1874495Z         if (days > 3) {
2025-04-15T08:07:18.1874572Z           return days + " days";
2025-04-15T08:07:18.1874653Z         } else if (days > 0) {
2025-04-15T08:07:18.1874747Z           return days * 24 + hours + " hours";
2025-04-15T08:07:18.1874810Z         }
2025-04-15T08:07:18.1874877Z       }
2025-04-15T08:07:18.1874881Z 
2025-04-15T08:07:18.1874957Z       const parts = [];
2025-04-15T08:07:18.1875098Z       if (days > 0) parts.push(days + " day" + (days > 1 ? "s" : ""));
2025-04-15T08:07:18.1875239Z       if (hours > 0) parts.push(hours + " hour" + (hours > 1 ? "s" : ""));
2025-04-15T08:07:18.1875313Z       if (minutes > 0)
2025-04-15T08:07:18.1875445Z         parts.push(minutes + " minute" + (minutes > 1 ? "s" : ""));
2025-04-15T08:07:18.1875531Z       if (remainingSeconds > 0)
2025-04-15T08:07:18.1875607Z         parts.push(
2025-04-15T08:07:18.1875762Z           remainingSeconds + " second" + (remainingSeconds > 1 ? "s" : "")
2025-04-15T08:07:18.1875829Z         );
2025-04-15T08:07:18.1875953Z       return parts.join(" • ");
2025-04-15T08:07:18.1876017Z     }
2025-04-15T08:07:18.1876026Z 
2025-04-15T08:07:18.1876213Z     const createKeyValuePairs = (
2025-04-15T08:07:18.1876292Z       containerId,
2025-04-15T08:07:18.1876366Z       dataObject,
2025-04-15T08:07:18.1876434Z       keys = null,
2025-04-15T08:07:18.1876517Z       shortFormat = false,
2025-04-15T08:07:18.1876722Z       usePercentageBar = false
2025-04-15T08:07:18.1876784Z     ) => {
2025-04-15T08:07:18.1876930Z       const container = document.getElementById(containerId);
2025-04-15T08:07:18.1877008Z       if (!container) return;
2025-04-15T08:07:18.1877159Z       if (dataObject === null || typeof dataObject !== "object") return
2025-04-15T08:07:18.1877164Z 
2025-04-15T08:07:18.1877277Z       container.innerHTML = ""; // Clear the container
2025-04-15T08:07:18.1877281Z 
2025-04-15T08:07:18.1877396Z       const keysToUse = keys || Object.keys(dataObject);
2025-04-15T08:07:18.1877401Z 
2025-04-15T08:07:18.1877491Z       keysToUse.forEach(function (key) {
2025-04-15T08:07:18.1877591Z         if (dataObject.hasOwnProperty(key)) {
2025-04-15T08:07:18.1877700Z           let value = dataObject[key].toString();
2025-04-15T08:07:18.1877787Z           if (value === "false") return;
2025-04-15T08:07:18.1877791Z 
2025-04-15T08:07:18.1877875Z           if (key === "cpu_frequency") {
2025-04-15T08:07:18.1877993Z             value = (dataObject[key] / 1e9).toFixed(2) + " GHz";
2025-04-15T08:07:18.1878065Z           } else if (
2025-04-15T08:07:18.1878137Z             key === "ram" ||
2025-04-15T08:07:18.1878207Z             key === "disk" ||
2025-04-15T08:07:18.1878288Z             key === "disk_used" ||
2025-04-15T08:07:18.1878356Z             key === "disk_max"
2025-04-15T08:07:18.1878422Z           ) {
2025-04-15T08:07:18.1878517Z             value = formatBytes(dataObject[key]);
2025-04-15T08:07:18.1878583Z           } else if (
2025-04-15T08:07:18.1878660Z             key === "samples" ||
2025-04-15T08:07:18.1878746Z             key === "currently_collected_metrics"
2025-04-15T08:07:18.1878812Z           ) {
2025-04-15T08:07:18.1878919Z             value = formatLargeNumbers(dataObject[key]);
2025-04-15T08:07:18.1879129Z           } else if (key === "from" || key === "to") {
2025-04-15T08:07:18.1879240Z             value = formatTimestamp(dataObject[key]);
2025-04-15T08:07:18.1879307Z           } else if (
2025-04-15T08:07:18.1879389Z             key === "retention" ||
2025-04-15T08:07:18.1879476Z             key === "expected_retention" ||
2025-04-15T08:07:18.1879559Z             key === "requested_retention"
2025-04-15T08:07:18.1879621Z           ) {
2025-04-15T08:07:18.1879744Z             value = formatDuration(dataObject[key], shortFormat);
2025-04-15T08:07:18.1879834Z           } else if (key === "disk_percent") {
2025-04-15T08:07:18.1880036Z             const roundedValue = Math.round(dataObject[key]); // Round the percentage value
2025-04-15T08:07:18.1880123Z             if (usePercentageBar) {
2025-04-15T08:07:18.1880250Z               setPercentageBarWidth(containerId, roundedValue);
2025-04-15T08:07:18.1880399Z               return; // No need to create key-value pair for percentage bar
2025-04-15T08:07:18.1880470Z             } else {
2025-04-15T08:07:18.1880608Z               value = roundedValue + "%"; // Append "%" to the rounded value
2025-04-15T08:07:18.1880674Z             }
2025-04-15T08:07:18.1880742Z           }
2025-04-15T08:07:18.1880746Z 
2025-04-15T08:07:18.1880822Z           const div = getDOM({
2025-04-15T08:07:18.1880892Z             tag: "div",
2025-04-15T08:07:18.1880970Z             classList: "key-value",
2025-04-15T08:07:18.1881042Z             children: [
2025-04-15T08:07:18.1881106Z               {
2025-04-15T08:07:18.1881180Z                 tag: "span",
2025-04-15T08:07:18.1881358Z                 innerText: key.charAt(0).toUpperCase() + key.slice(1).replace(/_/g, " ")
2025-04-15T08:07:18.1881424Z               },
2025-04-15T08:07:18.1881487Z               {
2025-04-15T08:07:18.1881556Z                 tag: "span",
2025-04-15T08:07:18.1881634Z                 innerText: value,
2025-04-15T08:07:18.1881719Z                 condition: value !== "true"
2025-04-15T08:07:18.1881790Z               }
2025-04-15T08:07:18.1881852Z             ]
2025-04-15T08:07:18.1881913Z           });
2025-04-15T08:07:18.1881917Z 
2025-04-15T08:07:18.1882008Z           container.appendChild(div);
2025-04-15T08:07:18.1882174Z         }
2025-04-15T08:07:18.1882238Z       });
2025-04-15T08:07:18.1882298Z     }
2025-04-15T08:07:18.1882302Z 
2025-04-15T08:07:18.1882399Z     const setupCollectedMetrics = data => {
2025-04-15T08:07:18.1882479Z       const agent = data?.agents?.[0]
2025-04-15T08:07:18.1882664Z       const metricsFromDbSize = agent?.db_size?.[0]?.currently_collected_metrics
2025-04-15T08:07:18.1882948Z       const collectedMetrics = metricsFromDbSize !== undefined ? metricsFromDbSize : agent?.metrics?.collected;
2025-04-15T08:07:18.1883103Z       const container = document.getElementById("collectedMetrics");
2025-04-15T08:07:18.1883234Z       if (collectedMetrics === undefined || !container) return;
2025-04-15T08:07:18.1883239Z 
2025-04-15T08:07:18.1883311Z       const div = getDOM({
2025-04-15T08:07:18.1883384Z         tag: "div",
2025-04-15T08:07:18.1883461Z         classList: "key-value",
2025-04-15T08:07:18.1883528Z         children: [
2025-04-15T08:07:18.1883598Z           {
2025-04-15T08:07:18.1883673Z             tag: "span",
2025-04-15T08:07:18.1883774Z             innerText: "Currently Collected Metrics"
2025-04-15T08:07:18.1883836Z           },
2025-04-15T08:07:18.1883899Z           {
2025-04-15T08:07:18.1883970Z             tag: "span",
2025-04-15T08:07:18.1884287Z             innerText: collectedMetrics > 99999 ? abbreviateNumber(collectedMetrics) : formatLargeNumbers(collectedMetrics),
2025-04-15T08:07:18.1884534Z             // ...(collectedMetrics > 99999 ? { dataset: { tooltip: formatLargeNumbers(collectedMetrics) } } : {})
2025-04-15T08:07:18.1884598Z           }
2025-04-15T08:07:18.1884661Z         ]
2025-04-15T08:07:18.1884721Z       });
2025-04-15T08:07:18.1884725Z 
2025-04-15T08:07:18.1884808Z       container.appendChild(div);
2025-04-15T08:07:18.1884872Z     }
2025-04-15T08:07:18.1884961Z 
2025-04-15T08:07:18.1885035Z     const buildTier = ({
2025-04-15T08:07:18.1885104Z       tier: index,
2025-04-15T08:07:18.1885169Z       granularity,
2025-04-15T08:07:18.1885231Z       metrics,
2025-04-15T08:07:18.1885301Z       samples,
2025-04-15T08:07:18.1885369Z       retention_human,
2025-04-15T08:07:18.1885448Z       expected_retention_human,
2025-04-15T08:07:18.1885524Z       requested_retention_human,
2025-04-15T08:07:18.1885586Z       disk_used,
2025-04-15T08:07:18.1885655Z       disk_percent,
2025-04-15T08:07:18.1885717Z       disk_max,
2025-04-15T08:07:18.1885781Z       ...rest
2025-04-15T08:07:18.1885841Z     }) => {
2025-04-15T08:07:18.1885984Z       const disk_used_exists = disk_used !== null && !isNaN(disk_used)
2025-04-15T08:07:18.1886219Z       const disk_max_exists = disk_max !== null && !isNaN(disk_max)
2025-04-15T08:07:18.1886225Z 
2025-04-15T08:07:18.1886305Z       const contentsStructure = {
2025-04-15T08:07:18.1886374Z         tag: "tr",
2025-04-15T08:07:18.1886443Z         children: [
2025-04-15T08:07:18.1886506Z           {
2025-04-15T08:07:18.1886571Z             tag: "td",
2025-04-15T08:07:18.1886648Z             classList: "cell-data",
2025-04-15T08:07:18.1886724Z             textContent: index
2025-04-15T08:07:18.1886788Z           },
2025-04-15T08:07:18.1886851Z           {
2025-04-15T08:07:18.1886915Z             tag: "td",
2025-04-15T08:07:18.1886989Z             classList: "cell-data",
2025-04-15T08:07:18.1887071Z             textContent: granularity
2025-04-15T08:07:18.1887131Z           },
2025-04-15T08:07:18.1887194Z           {
2025-04-15T08:07:18.1887256Z             tag: "td",
2025-04-15T08:07:18.1887352Z             classList: "cell-data section-start",
2025-04-15T08:07:18.1887419Z             children: [
2025-04-15T08:07:18.1887480Z               {
2025-04-15T08:07:18.1887553Z                 tag: "span",
2025-04-15T08:07:18.1887656Z                 textContent: abbreviateNumber(metrics),
2025-04-15T08:07:18.1887780Z                 // dataset: { tooltip: formatLargeNumbers(metrics) }
2025-04-15T08:07:18.1887846Z               }
2025-04-15T08:07:18.1887906Z             ]
2025-04-15T08:07:18.1887970Z           },
2025-04-15T08:07:18.1888030Z           {
2025-04-15T08:07:18.1888220Z             tag: "td",
2025-04-15T08:07:18.1888295Z             classList: "cell-data",
2025-04-15T08:07:18.1888365Z             children: [
2025-04-15T08:07:18.1888428Z               {
2025-04-15T08:07:18.1888495Z                 tag: "span",
2025-04-15T08:07:18.1888596Z                 textContent: abbreviateNumber(samples),
2025-04-15T08:07:18.1888711Z                 // dataset: { tooltip: formatLargeNumbers(samples) }
2025-04-15T08:07:18.1888776Z               }
2025-04-15T08:07:18.1888836Z             ]
2025-04-15T08:07:18.1888896Z           },
2025-04-15T08:07:18.1888959Z           {
2025-04-15T08:07:18.1889024Z             tag: "td",
2025-04-15T08:07:18.1889118Z             classList: "cell-data section-start",
2025-04-15T08:07:18.1889210Z             textContent: retention_human || "-"
2025-04-15T08:07:18.1889275Z           },
2025-04-15T08:07:18.1889338Z           {
2025-04-15T08:07:18.1889402Z             tag: "td",
2025-04-15T08:07:18.1889481Z             classList: "cell-data",
2025-04-15T08:07:18.1889591Z             textContent: expected_retention_human || "-"
2025-04-15T08:07:18.1889653Z           },
2025-04-15T08:07:18.1889716Z           {
2025-04-15T08:07:18.1889780Z             tag: "td",
2025-04-15T08:07:18.1889862Z             classList: "cell-data",
2025-04-15T08:07:18.1889968Z             textContent: requested_retention_human || "-"
2025-04-15T08:07:18.1890029Z           },
2025-04-15T08:07:18.1890094Z           {
2025-04-15T08:07:18.1890161Z             tag: "td",
2025-04-15T08:07:18.1890260Z             classList: "cell-data section-start",
2025-04-15T08:07:18.1890328Z             children: [
2025-04-15T08:07:18.1890392Z               {
2025-04-15T08:07:18.1890512Z                 className: "progress-indicator flex flex-col",
2025-04-15T08:07:18.1890696Z                 children: [
2025-04-15T08:07:18.1890760Z                   {
2025-04-15T08:07:18.1890830Z                     tag: "span",
2025-04-15T08:07:18.1890985Z                     textContent: disk_used_exists ? formatBytes(disk_used) : "-"
2025-04-15T08:07:18.1891052Z                   },
2025-04-15T08:07:18.1891134Z                   ...(disk_used_exists ? [{
2025-04-15T08:07:18.1891237Z                     className: "progress-bar-container",
2025-04-15T08:07:18.1891307Z                     children: [
2025-04-15T08:07:18.1891373Z                       {
2025-04-15T08:07:18.1891464Z                         className: "progress-bar",
2025-04-15T08:07:18.1891538Z                         dataset: {
2025-04-15T08:07:18.1891622Z                           fill: disk_percent
2025-04-15T08:07:18.1891688Z                         }
2025-04-15T08:07:18.1891754Z                       }
2025-04-15T08:07:18.1891816Z                     ]
2025-04-15T08:07:18.1891883Z                   }] : [])
2025-04-15T08:07:18.1891952Z                 ]
2025-04-15T08:07:18.1892013Z               }
2025-04-15T08:07:18.1892075Z             ]
2025-04-15T08:07:18.1892135Z           },
2025-04-15T08:07:18.1892200Z           {
2025-04-15T08:07:18.1892270Z             tag: "td",
2025-04-15T08:07:18.1892351Z             classList: "cell-data",
2025-04-15T08:07:18.1892498Z             textContent: disk_max_exists ? formatBytes(disk_max) : "-"
2025-04-15T08:07:18.1892561Z           }
2025-04-15T08:07:18.1892624Z         ]
2025-04-15T08:07:18.1892685Z       }
2025-04-15T08:07:18.1892689Z 
2025-04-15T08:07:18.1892778Z       return getDOM(contentsStructure);
2025-04-15T08:07:18.1892842Z     }
2025-04-15T08:07:18.1892847Z 
2025-04-15T08:07:18.1892922Z     const buildTiers = () => {
2025-04-15T08:07:18.1893021Z       const tiers = data.agents[0].db_size || [];
2025-04-15T08:07:18.1893227Z       const placeholder = document.getElementById("tiers-table-data-placeholder");
2025-04-15T08:07:18.1893320Z       if (placeholder && !!tiers.length) {
2025-04-15T08:07:18.1893411Z         const rows = tiers.map(buildTier)
2025-04-15T08:07:18.1893498Z         placeholder.replaceWith(...rows);
2025-04-15T08:07:18.1893562Z       }
2025-04-15T08:07:18.1893566Z 
2025-04-15T08:07:18.1893731Z       return Promise.resolve()
2025-04-15T08:07:18.1893793Z     }
2025-04-15T08:07:18.1893797Z 
2025-04-15T08:07:18.1893883Z     const setupProgressBars = () => {
2025-04-15T08:07:18.1894035Z       document.querySelectorAll(".progress-bar").forEach(el => {
2025-04-15T08:07:18.1894116Z         const fill = el.dataset.fill
2025-04-15T08:07:18.1894193Z         el.style.width = `${fill}%`
2025-04-15T08:07:18.1894256Z       })
2025-04-15T08:07:18.1894315Z     }
2025-04-15T08:07:18.1894319Z 
2025-04-15T08:07:18.1894484Z     createKeyValuePairs("kernel", data.agents[0].application.os, [
2025-04-15T08:07:18.1894546Z       "kernel",
2025-04-15T08:07:18.1894605Z     ]);
2025-04-15T08:07:18.1894789Z     createKeyValuePairs("kernelVersion", data.agents[0].application.os, [
2025-04-15T08:07:18.1894868Z       "kernel_version",
2025-04-15T08:07:18.1894931Z     ]);
2025-04-15T08:07:18.1895095Z     createKeyValuePairs("id", data.agents[0].application.os, ["id"]);
2025-04-15T08:07:18.1895260Z     createKeyValuePairs("os", data.agents[0].application.os, ["os"]);
2025-04-15T08:07:18.1895270Z 
2025-04-15T08:07:18.1895447Z     createKeyValuePairs("package", data.agents[0].application.package, [
2025-04-15T08:07:18.1895512Z       "version",
2025-04-15T08:07:18.1895576Z     ]);
2025-04-15T08:07:18.1895656Z     createKeyValuePairs(
2025-04-15T08:07:18.1895726Z       "directories",
2025-04-15T08:07:18.1895821Z       data.agents[0].application.directories
2025-04-15T08:07:18.1895886Z     );
2025-04-15T08:07:18.1896016Z     createKeyValuePairs("server", data.agents[0], ["nm"]);
2025-04-15T08:07:18.1896275Z     createKeyValuePairs("cpuCores", data.agents[0].application.hw, [
2025-04-15T08:07:18.1896348Z       "cpu_cores",
2025-04-15T08:07:18.1896409Z     ]);
2025-04-15T08:07:18.1896585Z     createKeyValuePairs("cpuFrequency", data.agents[0].application.hw, [
2025-04-15T08:07:18.1896772Z       "cpu_frequency",
2025-04-15T08:07:18.1896832Z     ]);
2025-04-15T08:07:18.1897001Z     createKeyValuePairs("ram", data.agents[0].application.hw, ["ram"]);
2025-04-15T08:07:18.1897176Z     createKeyValuePairs("disk", data.agents[0].application.hw, ["disk"]);
2025-04-15T08:07:18.1897364Z     createKeyValuePairs("cpuArchitecture", data.agents[0].application.hw, [
2025-04-15T08:07:18.1897438Z       "cpu_architecture",
2025-04-15T08:07:18.1897500Z     ]);
2025-04-15T08:07:18.1897679Z     createKeyValuePairs("virtualization", data.agents[0].application.hw, [
2025-04-15T08:07:18.1897751Z       "virtualization",
2025-04-15T08:07:18.1897815Z     ]);
2025-04-15T08:07:18.1897984Z     createKeyValuePairs("cloud_status", data.agents[0].cloud, ["status"]);
2025-04-15T08:07:18.1898138Z     createKeyValuePairs("nodes_streaming", data.agents[0].nodes);
2025-04-15T08:07:18.1898309Z     createKeyValuePairs("plugins", data.agents[0].application.plugins);
2025-04-15T08:07:18.1898464Z     createKeyValuePairs("libs", data.agents[0].application.libs);
2025-04-15T08:07:18.1898651Z     createKeyValuePairs("exporters", data.agents[0].application.exporters);
2025-04-15T08:07:18.1898742Z     setupCollectedMetrics(data);
2025-04-15T08:07:18.1898746Z 
2025-04-15T08:07:18.1898850Z     buildTiers().then(() => setupProgressBars())
2025-04-15T08:07:18.1898855Z 
2025-04-15T08:07:18.1898933Z     return Promise.resolve();
2025-04-15T08:07:18.1898997Z   }
2025-04-15T08:07:18.1899001Z 
2025-04-15T08:07:18.1899078Z   const initTooltips = () => {
2025-04-15T08:07:18.1899200Z     const tooltip = document.getElementById("tooltip");
2025-04-15T08:07:18.1899276Z     if (!tooltip) return;
2025-04-15T08:07:18.1899279Z 
2025-04-15T08:07:18.1899432Z     document.querySelectorAll("[data-tooltip]").forEach(elem => {
2025-04-15T08:07:18.1899538Z       elem.addEventListener("mouseenter", () => {
2025-04-15T08:07:18.1899630Z         const content = elem.dataset.tooltip;
2025-04-15T08:07:18.1899741Z         const rect = elem.getBoundingClientRect();
2025-04-15T08:07:18.1899824Z         const top = rect.bottom + 10;
2025-04-15T08:07:18.1899896Z         const left = rect.x;
2025-04-15T08:07:18.1900098Z         tooltip.textContent = content;
2025-04-15T08:07:18.1900184Z         tooltip.style.top = `${top}px`;
2025-04-15T08:07:18.1900271Z         tooltip.style.left = `${left}px`;
2025-04-15T08:07:18.1900358Z         tooltip.style.display = "block";
2025-04-15T08:07:18.1900423Z       });
2025-04-15T08:07:18.1900427Z 
2025-04-15T08:07:18.1900527Z       elem.addEventListener("mouseleave", () => {
2025-04-15T08:07:18.1900609Z         tooltip.textContent = "";
2025-04-15T08:07:18.1900696Z         tooltip.style.display = "none";
2025-04-15T08:07:18.1900756Z       })
2025-04-15T08:07:18.1900818Z     })
2025-04-15T08:07:18.1900877Z   }
2025-04-15T08:07:18.1900881Z 
2025-04-15T08:07:18.1900939Z   /**
2025-04-15T08:07:18.1901038Z    * Get agent info and initialize splash screen
2025-04-15T08:07:18.1901102Z    */
2025-04-15T08:07:18.1901194Z   const initSplashScreen = async () => {
2025-04-15T08:07:18.1901327Z     const msgSignIn = document.getElementById("msgSignIn");
2025-04-15T08:07:18.1901456Z     const btnSignIn = document.getElementById("btnSignIn");
2025-04-15T08:07:18.1901557Z     msgSignIn.textContent = "Please wait..."
2025-04-15T08:07:18.1901643Z     btnSignIn.style.display = "none"
2025-04-15T08:07:18.1901647Z 
2025-04-15T08:07:18.1901739Z     const agentInfo = await getAgentInfo()
2025-04-15T08:07:18.1901744Z 
2025-04-15T08:07:18.1902102Z     if (!agentInfo || !Array.isArray(agentInfo.agents) || !agentInfo.agents[0]) return Promise.reject({ message: "No agent data available." })
2025-04-15T08:07:18.1902108Z 
2025-04-15T08:07:18.1902214Z     const agent = (agentInfo?.agents || [])[0] || {}
2025-04-15T08:07:18.1902318Z     const status = agent.cloud && agent.cloud.status
2025-04-15T08:07:18.1902433Z     const claimId = agent.cloud && agent.cloud.claim_id
2025-04-15T08:07:18.1902536Z     const cloudUrl = agent.cloud && agent.cloud.url
2025-04-15T08:07:18.1902626Z 
2025-04-15T08:07:18.1902720Z     window.localNetdataRegistry = {
2025-04-15T08:07:18.1902793Z       hostname: agent.nm,
2025-04-15T08:07:18.1902863Z       mg: agent.mg,
2025-04-15T08:07:18.1902931Z       nd: agent.nd,
2025-04-15T08:07:18.1903000Z       claimId: claimId,
2025-04-15T08:07:18.1903082Z       xNetdataAuthHeader: true
2025-04-15T08:07:18.1903142Z     }
2025-04-15T08:07:18.1903146Z 
2025-04-15T08:07:18.1903329Z     window.envSettings.cloudUrl = cloudUrl || window.envSettings.cloudUrl
2025-04-15T08:07:18.1903504Z     window.envSettings.apiUrl = cloudUrl || window.envSettings.apiUrl
2025-04-15T08:07:18.1903508Z 
2025-04-15T08:07:18.1903661Z     const isCloudSignedIn = !!localStorage.getItem(CLOUD_TOKEN_KEY)
2025-04-15T08:07:18.1903666Z 
2025-04-15T08:07:18.1903744Z     if (!isCloudSignedIn) {
2025-04-15T08:07:18.1903832Z       msgSignIn.style.display = "inline"
2025-04-15T08:07:18.1903959Z       msgSignIn.textContent = "Please sign-in to continue"
2025-04-15T08:07:18.1904051Z       btnSignIn.style.display = "block"
2025-04-15T08:07:18.1904110Z     }
2025-04-15T08:07:18.1904116Z 
2025-04-15T08:07:18.1904189Z     initMetrics(agentInfo)
2025-04-15T08:07:18.1904197Z 
2025-04-15T08:07:18.1904348Z     if (!claimId && isCloudSignedIn && !window.envSettings.isLocal) {
2025-04-15T08:07:18.1904435Z       setShouldClaimStatus(true);
2025-04-15T08:07:18.1904516Z       prepareClaiming(agent)
2025-04-15T08:07:18.1904625Z       return Promise.resolve({ stopLoading: true })
2025-04-15T08:07:18.1904686Z     }
2025-04-15T08:07:18.1904690Z 
2025-04-15T08:07:18.1904770Z     let me = await checkMe(agent.mg)
2025-04-15T08:07:18.1904776Z 
2025-04-15T08:07:18.1904954Z     if (isCloudSignedIn && agent.nd && (me.auth === "none" || me.auth === "god")) {
2025-04-15T08:07:18.1905171Z       await getAgentToken({ mg: agent.mg, nd: agent.nd, claimId: agent.cloud.claim_id }, agent)
2025-04-15T08:07:18.1905253Z       me = await checkMe(agent.mg)
2025-04-15T08:07:18.1905319Z     }
2025-04-15T08:07:18.1905323Z 
2025-04-15T08:07:18.1905486Z     const claimStatusesToProceed = ["online", "indirect", "offline"]
2025-04-15T08:07:18.1905490Z 
2025-04-15T08:07:18.1905679Z     if ((me.auth === "bearer" || me.auth === "god") && claimStatusesToProceed.includes(status)) {
2025-04-15T08:07:18.1905884Z       await fetchUserAccess(agent.mg, agent.nd)
2025-04-15T08:07:18.1905961Z       return loadDashboard()
2025-04-15T08:07:18.1906147Z     } else if (window.envSettings.isLocal) {
2025-04-15T08:07:18.1906227Z       return loadDashboard()
2025-04-15T08:07:18.1906289Z     } else {
2025-04-15T08:07:18.1906388Z       await fetchUserAccess(agent.mg, agent.nd)
2025-04-15T08:07:18.1906449Z     }
2025-04-15T08:07:18.1906453Z 
2025-04-15T08:07:18.1906530Z     if (!isCloudSignedIn) {
2025-04-15T08:07:18.1906613Z       setupOptOutMessage(agent)
2025-04-15T08:07:18.1906719Z       return Promise.resolve({ stopLoading: true })
2025-04-15T08:07:18.1906782Z     }
2025-04-15T08:07:18.1906787Z 
2025-04-15T08:07:18.1906870Z     return Promise.resolve()
2025-04-15T08:07:18.1906933Z   }
2025-04-15T08:07:18.1906936Z 
2025-04-15T08:07:18.1907017Z   // =============================================== //
2025-04-15T08:07:18.1907025Z 
2025-04-15T08:07:18.1907156Z   document.addEventListener("DOMContentLoaded", () => {
2025-04-15T08:07:18.1907223Z     initGrid();
2025-04-15T08:07:18.1907307Z     initPrimaryButtonHover();
2025-04-15T08:07:18.1907377Z     toggleTab(1);
2025-04-15T08:07:18.1907441Z     initTabs();
2025-04-15T08:07:18.1907446Z 
2025-04-15T08:07:18.1907593Z     fetchRegistryInfo().then(initSplashScreen).then(data => {
2025-04-15T08:07:18.1907669Z       if (data?.stopLoading) {
2025-04-15T08:07:18.1907739Z         stopLoading()
2025-04-15T08:07:18.1907804Z       }
2025-04-15T08:07:18.1907876Z       initTooltips()
2025-04-15T08:07:18.1907947Z     }).catch(err => {
2025-04-15T08:07:18.1908030Z       showErrorMessage(err?.message)
2025-04-15T08:07:18.1908091Z     })
2025-04-15T08:07:18.1908403Z   });</script></html><!doctype html><html lang="en" dir="ltr"><head><meta charset="utf-8"/><title>Netdata</title><script>const CONFIG = {
2025-04-15T08:07:18.1908593Z       cache: {
2025-04-15T08:07:18.1908669Z         agentInfo: false,
2025-04-15T08:07:18.1908746Z         cloudToken: true,
2025-04-15T08:07:18.1908819Z         agentToken: true,
2025-04-15T08:07:18.1908883Z       }
2025-04-15T08:07:18.1908941Z     }
2025-04-15T08:07:18.1908945Z 
2025-04-15T08:07:18.1909097Z     // STATE MANAGEMENT ======================================================================== //
2025-04-15T08:07:18.1909164Z     const state = {
2025-04-15T08:07:18.1909230Z       loading: {
2025-04-15T08:07:18.1909297Z         spaces: false,
2025-04-15T08:07:18.1909361Z         rooms: false,
2025-04-15T08:07:18.1909439Z         claimingToken: false,
2025-04-15T08:07:18.1909513Z         claimingAgent: false
2025-04-15T08:07:18.1909577Z       },
2025-04-15T08:07:18.1909639Z       claim: {
2025-04-15T08:07:18.1909707Z         status: {},
2025-04-15T08:07:18.1909780Z         response: {},
2025-04-15T08:07:18.1909853Z         shouldClaim: false,
2025-04-15T08:07:18.1909921Z         step: 1,
2025-04-15T08:07:18.1909999Z         selectedSpaceIds: [],
2025-04-15T08:07:18.1910083Z         selectedRoomIds: [],
2025-04-15T08:07:18.1910152Z         privateKey: ""
2025-04-15T08:07:18.1910214Z       },
2025-04-15T08:07:18.1910283Z       cache: {
2025-04-15T08:07:18.1910356Z         spaces: undefined,
2025-04-15T08:07:18.1910424Z         rooms: {},
2025-04-15T08:07:18.1910509Z         claimingTokensPerSpace: {}
2025-04-15T08:07:18.1910569Z       }
2025-04-15T08:07:18.1910632Z     }
2025-04-15T08:07:18.1910636Z 
2025-04-15T08:07:18.1910723Z     const getSelectedRooms = state => {
2025-04-15T08:07:18.1910988Z       const spaceId = state.claim.selectedSpaceIds.length ? state.claim.selectedSpaceIds[0] : null;
2025-04-15T08:07:18.1911065Z       if (!spaceId) return [];
2025-04-15T08:07:18.1911178Z       if (state.claim.selectedRoomIds.length) {
2025-04-15T08:07:18.1911441Z         return state.cache?.rooms?.[spaceId]?.filter(({ id }) => state.claim.selectedRoomIds.includes(id)) || [];
2025-04-15T08:07:18.1911503Z       }
2025-04-15T08:07:18.1911570Z       return [];
2025-04-15T08:07:18.1911745Z     }
2025-04-15T08:07:18.1911749Z 
2025-04-15T08:07:18.1911826Z     const syncUI = () => {
2025-04-15T08:07:18.1911889Z       // Elements
2025-04-15T08:07:18.1912082Z       const splashMessage = document.getElementById("splashMessageContainer");
2025-04-15T08:07:18.1912266Z       const claiming = document.getElementById("claimingContentsContainer");
2025-04-15T08:07:18.1912407Z       const step1 = document.getElementById("connectionStep-1");
2025-04-15T08:07:18.1912546Z       const step2 = document.getElementById("connectionStep-2");
2025-04-15T08:07:18.1912713Z       const btnPrev = document.getElementById("btnConnectionStepPrev");
2025-04-15T08:07:18.1912876Z       const btnNext = document.getElementById("btnConnectionStepNext");
2025-04-15T08:07:18.1913001Z       const btnClaim = document.getElementById("btnClaim");
2025-04-15T08:07:18.1913165Z       const roomsSelector = document.getElementById("roomsSelector");
2025-04-15T08:07:18.1913353Z       const claimErrorMessage = document.getElementById("claimErrorMessage");
2025-04-15T08:07:18.1913362Z 
2025-04-15T08:07:18.1913425Z       // State
2025-04-15T08:07:18.1913837Z       const { spaces: spacesLoading, rooms: roomsLoading, claimingToken: claimingTokenLoading, claimingAgent: claimingAgentLoading } = state.loading;
2025-04-15T08:07:18.1914070Z       const { shouldClaim, step, selectedSpaceIds, selectedRoomIds, privateKey } = state.claim;
2025-04-15T08:07:18.1914512Z       const claimingTokenExists = state.claim.selectedSpaceIds.length ? !!state.cache.claimingTokensPerSpace[state.claim.selectedSpaceIds[0]] : false;
2025-04-15T08:07:18.1914517Z 
2025-04-15T08:07:18.1914682Z       splashMessage.style.display = !shouldClaim ? "initial" : "none";
2025-04-15T08:07:18.1914824Z       claiming.style.display = shouldClaim ? "initial" : "none";
2025-04-15T08:07:18.1914926Z 
2025-04-15T08:07:18.1915001Z       // Loading spaces
2025-04-15T08:07:18.1915070Z       if (step1) {
2025-04-15T08:07:18.1915203Z         const spacesLoader = step1.querySelector(".loader");
2025-04-15T08:07:18.1915286Z         if (spacesLoader) {
2025-04-15T08:07:18.1915461Z           spacesLoader.style.display = spacesLoading ? "initial" : "none";
2025-04-15T08:07:18.1915525Z         }
2025-04-15T08:07:18.1915592Z       }
2025-04-15T08:07:18.1915596Z 
2025-04-15T08:07:18.1915663Z       // Loading rooms
2025-04-15T08:07:18.1915738Z       if (roomsSelector) {
2025-04-15T08:07:18.1915897Z         const message = roomsSelector.querySelector(".selected-items");
2025-04-15T08:07:18.1916208Z         const selectedRoomNames = getSelectedRooms(state).map(({ name }) => name).join(", ");
2025-04-15T08:07:18.1916288Z         if (message) {
2025-04-15T08:07:18.1916531Z           message.innerText = roomsLoading ? "Loading rooms..." : (selectedRoomNames || "Select room");
2025-04-15T08:07:18.1916605Z         }
2025-04-15T08:07:18.1916668Z       }
2025-04-15T08:07:18.1916671Z 
2025-04-15T08:07:18.1916744Z       // Steps visibility
2025-04-15T08:07:18.1916873Z       step1.style.display = step == 1 ? "initial" : "none";
2025-04-15T08:07:18.1916993Z       step2.style.display = step == 2 ? "initial" : "none";
2025-04-15T08:07:18.1916998Z 
2025-04-15T08:07:18.1917065Z       // Rooms
2025-04-15T08:07:18.1917133Z       if (step == 1) {
2025-04-15T08:07:18.1917204Z         // Reset rooms
2025-04-15T08:07:18.1917559Z         const checkboxes = document.getElementById("roomsSelectorOptionsContainer").querySelectorAll('input[type="checkbox"]');
2025-04-15T08:07:18.1917655Z         checkboxes.forEach((checkbox) => {
2025-04-15T08:07:18.1917741Z           if (checkbox.checked) {
2025-04-15T08:07:18.1917824Z             checkbox.checked = false;
2025-04-15T08:07:18.1917943Z             checkbox.dispatchEvent(new Event("change"));
2025-04-15T08:07:18.1918007Z           }
2025-04-15T08:07:18.1918069Z         });
2025-04-15T08:07:18.1918139Z       }
2025-04-15T08:07:18.1918143Z 
2025-04-15T08:07:18.1918222Z       if (claimErrorMessage) {
2025-04-15T08:07:18.1918458Z         claimErrorMessage.style.display = state.claim?.response?.error ? "initial" : "none";
2025-04-15T08:07:18.1918833Z         claimErrorMessage.innerText = state.claim?.response?.error ? state.claim.response.error : "";
2025-04-15T08:07:18.1918900Z       }
2025-04-15T08:07:18.1918904Z 
2025-04-15T08:07:18.1918966Z       // Footer
2025-04-15T08:07:18.1919074Z       btnPrev.style.opacity = step == 1 ? "0" : "1";
2025-04-15T08:07:18.1919219Z       btnPrev.style.cursor = step == 1 ? "default" : "pointer";
2025-04-15T08:07:18.1919306Z       btnPrev.disabled = step == 1;
2025-04-15T08:07:18.1919446Z       btnNext.style.display = step == 1 ? "initial" : "none";
2025-04-15T08:07:18.1919559Z       btnNext.disabled = !selectedSpaceIds.length;
2025-04-15T08:07:18.1919696Z       btnClaim.style.display = step == 2 ? "initial" : "none";
2025-04-15T08:07:18.1920073Z       btnClaim.disabled = !selectedRoomIds.length || !privateKey || !claimingTokenExists || claimingTokenLoading || claimingAgentLoading;
2025-04-15T08:07:18.1920256Z       btnClaim.textContent = claimingAgentLoading ? "Claiming..." : "Claim";
2025-04-15T08:07:18.1920270Z 
2025-04-15T08:07:18.1920352Z       return Promise.resolve();
2025-04-15T08:07:18.1920417Z     }
2025-04-15T08:07:18.1920421Z 
2025-04-15T08:07:18.1920538Z     const toggleSpacesLoadingState = isLoading => {
2025-04-15T08:07:18.1920665Z       state.loading = { ...state.loading, spaces: isLoading };
2025-04-15T08:07:18.1920740Z       return syncUI();
2025-04-15T08:07:18.1920805Z     }
2025-04-15T08:07:18.1920809Z 
2025-04-15T08:07:18.1920917Z     const toggleRoomsLoadingState = isLoading => {
2025-04-15T08:07:18.1921047Z       state.loading = { ...state.loading, rooms: isLoading };
2025-04-15T08:07:18.1921118Z       return syncUI();
2025-04-15T08:07:18.1921184Z     }
2025-04-15T08:07:18.1921188Z 
2025-04-15T08:07:18.1921326Z     const toggleClaimingTokenLoadingState = isLoading => {
2025-04-15T08:07:18.1921594Z       state.loading = { ...state.loading, claimingToken: isLoading };
2025-04-15T08:07:18.1921665Z       return syncUI();
2025-04-15T08:07:18.1921727Z     }
2025-04-15T08:07:18.1921739Z 
2025-04-15T08:07:18.1921872Z     const toggleClaimingAgentLoadingState = isLoading => {
2025-04-15T08:07:18.1922015Z       state.loading = { ...state.loading, claimingAgent: isLoading };
2025-04-15T08:07:18.1922089Z       return syncUI();
2025-04-15T08:07:18.1922150Z     }
2025-04-15T08:07:18.1922155Z 
2025-04-15T08:07:18.1922264Z     const setShouldClaimStatus = shouldClaim => {
2025-04-15T08:07:18.1922368Z       state.claim = { ...state.claim, shouldClaim };
2025-04-15T08:07:18.1922441Z       return syncUI();
2025-04-15T08:07:18.1922505Z     }
2025-04-15T08:07:18.1922508Z 
2025-04-15T08:07:18.1922603Z     const setClaimStatusState = status => {
2025-04-15T08:07:18.1922699Z       state.claim = { ...state.claim, status };
2025-04-15T08:07:18.1922767Z       return syncUI();
2025-04-15T08:07:18.1922839Z     }
2025-04-15T08:07:18.1922842Z 
2025-04-15T08:07:18.1922942Z     const setClaimResponseState = response => {
2025-04-15T08:07:18.1923037Z       state.claim = { ...state.claim, response };
2025-04-15T08:07:18.1923116Z       return syncUI();
2025-04-15T08:07:18.1923178Z     }
2025-04-15T08:07:18.1923181Z 
2025-04-15T08:07:18.1923277Z     const setClaimingStep = async arg => {
2025-04-15T08:07:18.1923450Z       const nextStep = typeof arg == "function" ? arg(state.claim.step) : arg;
2025-04-15T08:07:18.1923723Z       state.claim = { ...state.claim, step: nextStep, ...(nextStep == 1 ? { selectedRoomIds: [], privateKey: "" } : {}) };
2025-04-15T08:07:18.1923793Z       await syncUI();
2025-04-15T08:07:18.1923882Z       return Promise.resolve(nextStep);
2025-04-15T08:07:18.1923948Z     }
2025-04-15T08:07:18.1923951Z 
2025-04-15T08:07:18.1924047Z     const setSelectedSpacesStatus = arg => {
2025-04-15T08:07:18.1924338Z       const spaceIds = typeof arg == "function" ? arg(state.claim.selectedSpaceIds) : Array.isArray(arg) ? arg : [arg];
2025-04-15T08:07:18.1924591Z       state.claim = { ...state.claim, selectedSpaceIds: spaceIds, selectedRoomIds: [], privateKey: "" };
2025-04-15T08:07:18.1924755Z       return syncUI();
2025-04-15T08:07:18.1924814Z     }
2025-04-15T08:07:18.1924818Z 
2025-04-15T08:07:18.1924910Z     const setSelectedRoomsStatus = arg => {
2025-04-15T08:07:18.1925202Z       const roomIds = typeof arg == "function" ? arg(state.claim.selectedRoomIds) : Array.isArray(arg) ? arg : [arg];
2025-04-15T08:07:18.1925340Z       state.claim = { ...state.claim, selectedRoomIds: roomIds };
2025-04-15T08:07:18.1925413Z       return syncUI();
2025-04-15T08:07:18.1925476Z     }
2025-04-15T08:07:18.1925479Z 
2025-04-15T08:07:18.1925608Z     const setClaimingPrivateKeyState = (value = "") => {
2025-04-15T08:07:18.1925723Z       state.claim = { ...state.claim, privateKey: value };
2025-04-15T08:07:18.1925792Z       return syncUI();
2025-04-15T08:07:18.1925858Z     }
2025-04-15T08:07:18.1925867Z 
2025-04-15T08:07:18.1925953Z     const cacheSpaces = (spaces) => {
2025-04-15T08:07:18.1926053Z       if (!spaces) return Promise.resolve([]);
2025-04-15T08:07:18.1926233Z       state.cache.spaces = spaces;
2025-04-15T08:07:18.1926329Z       return Promise.resolve(spaces);
2025-04-15T08:07:18.1926389Z     }
2025-04-15T08:07:18.1926393Z 
2025-04-15T08:07:18.1926487Z     const cacheRooms = (spaceId, rooms) => {
2025-04-15T08:07:18.1926586Z       if (!spaceId) return Promise.resolve([]);
2025-04-15T08:07:18.1926730Z       state.cache.rooms = { ...state.cache.rooms, [spaceId]: rooms };
2025-04-15T08:07:18.1926819Z       return Promise.resolve(rooms);
2025-04-15T08:07:18.1926881Z     }
2025-04-15T08:07:18.1926884Z 
2025-04-15T08:07:18.1926996Z     const cacheClaimingToken = (spaceId, token) => {
2025-04-15T08:07:18.1927111Z       if (!spaceId || !token) return Promise.resolve();
2025-04-15T08:07:18.1927383Z       state.cache.claimingTokensPerSpace = { ...state.cache.claimingTokensPerSpace, [spaceId]: token };
2025-04-15T08:07:18.1927610Z       return Promise.resolve(token);
2025-04-15T08:07:18.1927672Z     }
2025-04-15T08:07:18.1927676Z 
2025-04-15T08:07:18.1927778Z     // ========================================================================================= //
2025-04-15T08:07:18.1927787Z 
2025-04-15T08:07:18.1928021Z     const pathsRegex = /\/(spaces|nodes|overview|alerts|dashboards|anomalies|events|cloud|v3)\/?.*/;
2025-04-15T08:07:18.1928106Z     function getBasename() {
2025-04-15T08:07:18.1928323Z       return window.location.origin + window.location.pathname.replace(pathsRegex, "")
2025-04-15T08:07:18.1928385Z     }
2025-04-15T08:07:18.1928389Z 
2025-04-15T08:07:18.1928473Z     let goToOld = function(path) {
2025-04-15T08:07:18.1928560Z       let goToUrl = getBasename() + path;
2025-04-15T08:07:18.1928639Z       if (path !== "/v3") {
2025-04-15T08:07:18.1928867Z         let pathsRegex = /(\/(spaces|nodes|overview|alerts|dashboards|anomalies|events|cloud|v3)\/?.*)/
2025-04-15T08:07:18.1929070Z         if (pathsRegex.test(window.location.origin + window.location.pathname)) {
2025-04-15T08:07:18.1929307Z           goToUrl = (window.location.origin + window.location.pathname).replace(pathsRegex, "/v3$1")
2025-04-15T08:07:18.1929377Z         }
2025-04-15T08:07:18.1929446Z       }
2025-04-15T08:07:18.1929644Z       window.location.replace(ensureOneSlash(goToUrl + window.location.search))
2025-04-15T08:07:18.1929712Z     }
2025-04-15T08:07:18.1929716Z 
2025-04-15T08:07:18.1929859Z     const searchParams = new URLSearchParams(location.search);
2025-04-15T08:07:18.1929942Z     window.envSettings = {
2025-04-15T08:07:18.1930014Z       isAgent: true,
2025-04-15T08:07:18.1930117Z       apiUrl: "https://app.netdata.cloud",
2025-04-15T08:07:18.1930222Z       cloudUrl: "https://app.netdata.cloud",
2025-04-15T08:07:18.1930305Z       demoSlug: "netdata-demo",
2025-04-15T08:07:18.1932552Z       demoFavourites: {"postgresql":["Applications-0_Postgres-1"],"redis":["Applications-0_Redis-1"],"dns-query":["Applications-0_CoreDNS-1"],"http-endpoints":["Applications-0_HTTP_Checks-1"],"nginx":["Applications-0_web_log-1","Applications-0_Nginx-1"],"apache":["Applications-0_Apache-1"],"host-reachability":["Synthetic_Checks-0"],"cassandra":["Applications-0_Cassandra-1"],"coredns":["Applications-0_CoreDNS-1"],"logind":["Applications-0_systemd_LoginD-1"],"iis":["Applications-0_MS_IIS-1"],"active-directory":["Applications-0_MS_Active_Directory-1"],"windows":["Applications-0_Windows-1","Applications-0_MS_Active_Directory-1","Applications-0_MS_IIS-1","Applications-0_MS_SQL-1","Applications-0_MS_Exchange-1","Applications-0__NET_Framework-1"],"docker":["Containers___VMs-0"],"ups":["Hardware___Sensors-0_NUT_UPS-1"]},
2025-04-15T08:07:18.1932865Z       webpackPublicPath: "https://app.netdata.cloud" || (getBasename() + "/v3"),
2025-04-15T08:07:18.1933004Z       agentApiUrl: searchParams.get("agent") || getBasename(),
2025-04-15T08:07:18.1933180Z       posthogToken: "phc_hnhlqe6D2Q4IcQNrFItaqdXJAxQ8RcHkPAFAp74pubv",
2025-04-15T08:07:18.1933260Z       version: "7.48.0",
2025-04-15T08:07:18.1933330Z       tracking: !false,
2025-04-15T08:07:18.1933418Z       cookieDomain: ".netdata.cloud",
2025-04-15T08:07:18.1933485Z       onprem: false,
2025-04-15T08:07:18.1933559Z       isLocal: false,
2025-04-15T08:07:18.1933640Z       nodeEnv: "production"
2025-04-15T08:07:18.1933701Z     }
2025-04-15T08:07:18.1933705Z 
2025-04-15T08:07:18.1933788Z     window.visitedNodes = []
2025-04-15T08:07:18.1933792Z 
2025-04-15T08:07:18.1933881Z     const getHashValueByKey = key => {
2025-04-15T08:07:18.1934110Z       return location.hash.substr(1).split("&").find(pair => pair.split("=")[0] == key)?.split("=")[1]
2025-04-15T08:07:18.1934177Z     }
2025-04-15T08:07:18.1934181Z 
2025-04-15T08:07:18.1934251Z     // Check cloud token
2025-04-15T08:07:18.1934342Z     const CLOUD_TOKEN_KEY = "netdataJWT"
2025-04-15T08:07:18.1934469Z     const redirectUri = getHashValueByKey("redirect_uri")
2025-04-15T08:07:18.1934567Z     const token = getHashValueByKey("token")
2025-04-15T08:07:18.1934718Z     if (token) {
2025-04-15T08:07:18.1934823Z       localStorage.setItem(CLOUD_TOKEN_KEY, token)
2025-04-15T08:07:18.1934889Z     }
2025-04-15T08:07:18.1934959Z     if (redirectUri) {
2025-04-15T08:07:18.1935030Z       try {
2025-04-15T08:07:18.1935151Z         const decodedUrl = decodeURIComponent(redirectUri)
2025-04-15T08:07:18.1935300Z         const parsedUrl = new URL(decodedUrl, window.location.origin)
2025-04-15T08:07:18.1935308Z 
2025-04-15T08:07:18.1935423Z         if (parsedUrl.origin === window.location.origin) {
2025-04-15T08:07:18.1935521Z           window.location.href = parsedUrl.href
2025-04-15T08:07:18.1935588Z         } else {
2025-04-15T08:07:18.1935760Z           console.error("Blocked potentially unsafe redirect to: ", decodedUrl)
2025-04-15T08:07:18.1935826Z         }
2025-04-15T08:07:18.1935895Z       } catch (error) {
2025-04-15T08:07:18.1936020Z         console.error("Invalid URL detected: ", error.message)
2025-04-15T08:07:18.1936177Z       }
2025-04-15T08:07:18.1936276Z     }</script><style>body.netdata-splash {
2025-04-15T08:07:18.1936348Z       height: 100%;
2025-04-15T08:07:18.1936418Z       overflow: hidden;
2025-04-15T08:07:18.1936503Z       background: var(--main-bg);
2025-04-15T08:07:18.1936571Z       margin: 0;
2025-04-15T08:07:18.1936642Z       padding: 0;
2025-04-15T08:07:18.1936717Z       color: var(--text);
2025-04-15T08:07:18.1936889Z       font-family: system-ui, "Segoe UI", Roboto, Helvetica, Arial, sans-serif,
2025-04-15T08:07:18.1937025Z         "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
2025-04-15T08:07:18.1937086Z     }
2025-04-15T08:07:18.1937089Z 
2025-04-15T08:07:18.1937151Z     :root {
2025-04-15T08:07:18.1937240Z       --scrollbar-thumb: #fcfffd;
2025-04-15T08:07:18.1937315Z       --primary: #00ab44;
2025-04-15T08:07:18.1937387Z       --text: #93a4a4;
2025-04-15T08:07:18.1937462Z       --text-dark: #001107;
2025-04-15T08:07:18.1937536Z       --text-light: #fcfffd;
2025-04-15T08:07:18.1937614Z       --menu-item: #5b6c6c;
2025-04-15T08:07:18.1937689Z       --main-bg: #000;
2025-04-15T08:07:18.1937767Z       --highlight: #00ef5f;
2025-04-15T08:07:18.1937840Z       --tab-active: #ddffeb;
2025-04-15T08:07:18.1937915Z       --tab-hover: #d2d9d9;
2025-04-15T08:07:18.1938116Z       --panel-bg: transparent;
2025-04-15T08:07:18.1938191Z       --font-small: 14px;
2025-04-15T08:07:18.1938271Z       --font-medium: 16px;
2025-04-15T08:07:18.1938341Z       --row-2n: #101313;
2025-04-15T08:07:18.1938417Z       --border: #00ab4436;
2025-04-15T08:07:18.1938496Z       --border-neutral: #252c2c;
2025-04-15T08:07:18.1938574Z       --key-value-table: #93a4a4;
2025-04-15T08:07:18.1938647Z       --accent: #ddffeb;
2025-04-15T08:07:18.1938722Z       --module-height: 45vh;
2025-04-15T08:07:18.1938824Z       --list-option-bg: rgba(12, 15, 15, 0.5);
2025-04-15T08:07:18.1938912Z       --list-option-selected-bg: #000;
2025-04-15T08:07:18.1939015Z       --list-option-hover-bg: rgba(12, 15, 15, 1);
2025-04-15T08:07:18.1939095Z       --footer-height: 70px;
2025-04-15T08:07:18.1939170Z       --code-bg: #00220e;
2025-04-15T08:07:18.1939257Z       --progress-bar-height: 2px;
2025-04-15T08:07:18.1939344Z       background-color: var(--main-bg);
2025-04-15T08:07:18.1939409Z     }
2025-04-15T08:07:18.1939418Z 
2025-04-15T08:07:18.1939482Z     :root iframe {
2025-04-15T08:07:18.1939553Z       border-width: 0;
2025-04-15T08:07:18.1939618Z     }
2025-04-15T08:07:18.1939621Z 
2025-04-15T08:07:18.1939726Z     body.netdata-splash.loading .frame-right {
2025-04-15T08:07:18.1939801Z       display: none;
2025-04-15T08:07:18.1939862Z     }
2025-04-15T08:07:18.1939865Z 
2025-04-15T08:07:18.1939970Z     body.netdata-splash.loading .frame-left {
2025-04-15T08:07:18.1940049Z       grid-column: auto / span 12;
2025-04-15T08:07:18.1940109Z     }
2025-04-15T08:07:18.1940113Z 
2025-04-15T08:07:18.1940251Z     body.netdata-splash.loading .sphere-stats-container,
2025-04-15T08:07:18.1940352Z     body.netdata-splash.loading .head-summary,
2025-04-15T08:07:18.1940445Z     body.netdata-splash.loading .tabs {
2025-04-15T08:07:18.1940636Z       display: none;
2025-04-15T08:07:18.1940697Z     }
2025-04-15T08:07:18.1940700Z 
2025-04-15T08:07:18.1940819Z     body.netdata-splash.loading .loading-message {
2025-04-15T08:07:18.1940892Z       display: flex;
2025-04-15T08:07:18.1940968Z       position: absolute;
2025-04-15T08:07:18.1941034Z       inset: 0;
2025-04-15T08:07:18.1941104Z       margin: auto;
2025-04-15T08:07:18.1941175Z       align-items: center;
2025-04-15T08:07:18.1941253Z       justify-content: center;
2025-04-15T08:07:18.1941328Z       color: var(--accent);
2025-04-15T08:07:18.1941389Z     }
2025-04-15T08:07:18.1941392Z 
2025-04-15T08:07:18.1941476Z     body.netdata-splash .error {
2025-04-15T08:07:18.1941543Z       color: #DB162F;
2025-04-15T08:07:18.1941601Z     }
2025-04-15T08:07:18.1941605Z 
2025-04-15T08:07:18.1941700Z     body.netdata-splash .loading-message {
2025-04-15T08:07:18.1941770Z       display: none;
2025-04-15T08:07:18.1941832Z     }
2025-04-15T08:07:18.1941836Z 
2025-04-15T08:07:18.1941922Z     body.netdata-splash h1 {
2025-04-15T08:07:18.1941995Z       font-size: 36px;
2025-04-15T08:07:18.1942065Z       margin-top: 8px;
2025-04-15T08:07:18.1942137Z       margin-bottom: 8px;
2025-04-15T08:07:18.1942222Z       color: var(--text-light);
2025-04-15T08:07:18.1942294Z       filter: blur(0.6px);
2025-04-15T08:07:18.1942356Z     }
2025-04-15T08:07:18.1942359Z 
2025-04-15T08:07:18.1942434Z     body.netdata-splash h2 {
2025-04-15T08:07:18.1942503Z       font-size: 16px;
2025-04-15T08:07:18.1942567Z     }
2025-04-15T08:07:18.1942571Z 
2025-04-15T08:07:18.1942648Z     body.netdata-splash h4 {
2025-04-15T08:07:18.1942722Z       font-size: 12px;
2025-04-15T08:07:18.1942794Z       margin-bottom: 12px;
2025-04-15T08:07:18.1942868Z       margin-top: 8px;
2025-04-15T08:07:18.1942929Z     }
2025-04-15T08:07:18.1942932Z 
2025-04-15T08:07:18.1943013Z     body.netdata-splash a:link,
2025-04-15T08:07:18.1943104Z     body.netdata-splash a:visited,
2025-04-15T08:07:18.1943187Z     body.netdata-splash a:active {
2025-04-15T08:07:18.1943271Z       text-decoration: none;
2025-04-15T08:07:18.1943345Z       color: var(--primary);
2025-04-15T08:07:18.1943405Z     }
2025-04-15T08:07:18.1943409Z 
2025-04-15T08:07:18.1943496Z     body.netdata-splash a:hover {
2025-04-15T08:07:18.1943661Z       color: var(--highlight);
2025-04-15T08:07:18.1943726Z     }
2025-04-15T08:07:18.1943730Z 
2025-04-15T08:07:18.1943812Z     body.netdata-splash canvas {
2025-04-15T08:07:18.1943885Z       display: block;
2025-04-15T08:07:18.1943945Z     }
2025-04-15T08:07:18.1943948Z 
2025-04-15T08:07:18.1944026Z     body.netdata-splash code {
2025-04-15T08:07:18.1944107Z       background: var(--code-bg);
2025-04-15T08:07:18.1944180Z       color: var(--highlight);
2025-04-15T08:07:18.1944264Z       border: 1px solid var(--border);
2025-04-15T08:07:18.1944337Z       border-radius: 2px;
2025-04-15T08:07:18.1944407Z       padding: 12px;
2025-04-15T08:07:18.1944485Z       line-break: anywhere;
2025-04-15T08:07:18.1944559Z       word-break: break-all;
2025-04-15T08:07:18.1944628Z     }
2025-04-15T08:07:18.1944632Z 
2025-04-15T08:07:18.1944718Z     body.netdata-splash .text-small {
2025-04-15T08:07:18.1944792Z       font-size: 12px;
2025-04-15T08:07:18.1944853Z     }
2025-04-15T08:07:18.1944862Z 
2025-04-15T08:07:18.1944967Z     body.netdata-splash .logo {
2025-04-15T08:07:18.1945131Z       filter: drop-shadow(2px 2px 32px rgba(255, 255, 255, 0.7)) blur(1px);
2025-04-15T08:07:18.1945198Z       opacity: 0.9;
2025-04-15T08:07:18.1945271Z       width: 150px;
2025-04-15T08:07:18.1945337Z       height: 150px;
2025-04-15T08:07:18.1945397Z     }
2025-04-15T08:07:18.1945401Z 
2025-04-15T08:07:18.1945505Z     body.netdata-splash .claim-message .logo {
2025-04-15T08:07:18.1945570Z       width: 100px;
2025-04-15T08:07:18.1945641Z       height: 100px;
2025-04-15T08:07:18.1945703Z     }
2025-04-15T08:07:18.1945707Z 
2025-04-15T08:07:18.1945788Z     body.netdata-splash .grid {
2025-04-15T08:07:18.1945856Z       display: grid;
2025-04-15T08:07:18.1945934Z       grid-column-gap: 16px;
2025-04-15T08:07:18.1946196Z       grid-row-gap: 16px;
2025-04-15T08:07:18.1946296Z       grid-template-columns: repeat(12, 1fr);
2025-04-15T08:07:18.1946392Z       grid-template-rows: repeat(12, 1fr);
2025-04-15T08:07:18.1946483Z       grid-auto-rows: min-content;
2025-04-15T08:07:18.1946546Z     }
2025-04-15T08:07:18.1946554Z 
2025-04-15T08:07:18.1946648Z     body.netdata-splash .grid-columns-10 {
2025-04-15T08:07:18.1946717Z       display: grid;
2025-04-15T08:07:18.1946798Z       grid-column-gap: 16px;
2025-04-15T08:07:18.1946872Z       grid-row-gap: 16px;
2025-04-15T08:07:18.1946973Z       grid-template-columns: repeat(10, 1fr);
2025-04-15T08:07:18.1947033Z     }
2025-04-15T08:07:18.1947037Z 
2025-04-15T08:07:18.1947123Z     body.netdata-splash .col-span-1 {
2025-04-15T08:07:18.1947204Z       grid-column: auto / span 1;
2025-04-15T08:07:18.1947265Z     }
2025-04-15T08:07:18.1947269Z 
2025-04-15T08:07:18.1947358Z     body.netdata-splash .col-span-2 {
2025-04-15T08:07:18.1947436Z       grid-column: auto / span 2;
2025-04-15T08:07:18.1947504Z     }
2025-04-15T08:07:18.1947508Z 
2025-04-15T08:07:18.1947593Z     body.netdata-splash .col-span-3 {
2025-04-15T08:07:18.1947669Z       grid-column: auto / span 3;
2025-04-15T08:07:18.1947739Z     }
2025-04-15T08:07:18.1947743Z 
2025-04-15T08:07:18.1947826Z     body.netdata-splash .col-span-4 {
2025-04-15T08:07:18.1947905Z       grid-column: auto / span 4;
2025-04-15T08:07:18.1947965Z     }
2025-04-15T08:07:18.1947969Z 
2025-04-15T08:07:18.1948052Z     body.netdata-splash .col-span-5 {
2025-04-15T08:07:18.1948131Z       grid-column: auto / span 5;
2025-04-15T08:07:18.1948192Z     }
2025-04-15T08:07:18.1948195Z 
2025-04-15T08:07:18.1948282Z     body.netdata-splash .col-span-6 {
2025-04-15T08:07:18.1948359Z       grid-column: auto / span 6;
2025-04-15T08:07:18.1948424Z     }
2025-04-15T08:07:18.1948427Z 
2025-04-15T08:07:18.1948511Z     body.netdata-splash .col-span-7 {
2025-04-15T08:07:18.1948585Z       grid-column: auto / span 7;
2025-04-15T08:07:18.1948655Z     }
2025-04-15T08:07:18.1948658Z 
2025-04-15T08:07:18.1948740Z     body.netdata-splash .col-span-8 {
2025-04-15T08:07:18.1948819Z       grid-column: auto / span 8;
2025-04-15T08:07:18.1948879Z     }
2025-04-15T08:07:18.1948997Z 
2025-04-15T08:07:18.1949086Z     body.netdata-splash .col-span-9 {
2025-04-15T08:07:18.1949161Z       grid-column: auto / span 9;
2025-04-15T08:07:18.1949224Z     }
2025-04-15T08:07:18.1949228Z 
2025-04-15T08:07:18.1949320Z     body.netdata-splash .col-span-10 {
2025-04-15T08:07:18.1949398Z       grid-column: auto / span 10;
2025-04-15T08:07:18.1949463Z     }
2025-04-15T08:07:18.1949467Z 
2025-04-15T08:07:18.1949553Z     body.netdata-splash .col-span-11 {
2025-04-15T08:07:18.1949633Z       grid-column: auto / span 11;
2025-04-15T08:07:18.1949693Z     }
2025-04-15T08:07:18.1949697Z 
2025-04-15T08:07:18.1949781Z     body.netdata-splash .col-span-12 {
2025-04-15T08:07:18.1949862Z       grid-column: auto / span 12;
2025-04-15T08:07:18.1949924Z     }
2025-04-15T08:07:18.1949927Z 
2025-04-15T08:07:18.1950024Z     body.netdata-splash .col-start-1 {
2025-04-15T08:07:18.1950104Z       grid-column-start: 1;
2025-04-15T08:07:18.1950166Z     }
2025-04-15T08:07:18.1950173Z 
2025-04-15T08:07:18.1950258Z     body.netdata-splash .col-start-2 {
2025-04-15T08:07:18.1950340Z       grid-column-start: 2;
2025-04-15T08:07:18.1950407Z     }
2025-04-15T08:07:18.1950411Z 
2025-04-15T08:07:18.1950495Z     body.netdata-splash .col-start-3 {
2025-04-15T08:07:18.1950576Z       grid-column-start: 3;
2025-04-15T08:07:18.1950638Z     }
2025-04-15T08:07:18.1950641Z 
2025-04-15T08:07:18.1950725Z     body.netdata-splash .col-start-4 {
2025-04-15T08:07:18.1950807Z       grid-column-start: 4;
2025-04-15T08:07:18.1950869Z     }
2025-04-15T08:07:18.1950873Z 
2025-04-15T08:07:18.1950961Z     body.netdata-splash .col-start-5 {
2025-04-15T08:07:18.1951036Z       grid-column-start: 5;
2025-04-15T08:07:18.1951101Z     }
2025-04-15T08:07:18.1951105Z 
2025-04-15T08:07:18.1951191Z     body.netdata-splash .col-start-6 {
2025-04-15T08:07:18.1951401Z       grid-column-start: 6;
2025-04-15T08:07:18.1951466Z     }
2025-04-15T08:07:18.1951470Z 
2025-04-15T08:07:18.1951556Z     body.netdata-splash .col-start-7 {
2025-04-15T08:07:18.1951634Z       grid-column-start: 7;
2025-04-15T08:07:18.1951698Z     }
2025-04-15T08:07:18.1951702Z 
2025-04-15T08:07:18.1951790Z     body.netdata-splash .col-start-8 {
2025-04-15T08:07:18.1951867Z       grid-column-start: 8;
2025-04-15T08:07:18.1951929Z     }
2025-04-15T08:07:18.1951933Z 
2025-04-15T08:07:18.1952022Z     body.netdata-splash .col-start-9 {
2025-04-15T08:07:18.1952097Z       grid-column-start: 9;
2025-04-15T08:07:18.1952161Z     }
2025-04-15T08:07:18.1952165Z 
2025-04-15T08:07:18.1952254Z     body.netdata-splash .col-start-10 {
2025-04-15T08:07:18.1952333Z       grid-column-start: 10;
2025-04-15T08:07:18.1952400Z     }
2025-04-15T08:07:18.1952403Z 
2025-04-15T08:07:18.1952490Z     body.netdata-splash .col-start-12 {
2025-04-15T08:07:18.1952571Z       grid-column-start: 11;
2025-04-15T08:07:18.1952638Z     }
2025-04-15T08:07:18.1952642Z 
2025-04-15T08:07:18.1952739Z     body.netdata-splash .col-start-12 {
2025-04-15T08:07:18.1952814Z       grid-column-start: 12;
2025-04-15T08:07:18.1952876Z     }
2025-04-15T08:07:18.1952884Z 
2025-04-15T08:07:18.1952977Z     @media screen and (max-width: 1280px) {
2025-04-15T08:07:18.1953080Z       body.netdata-splash .md-grid-columns-12 {
2025-04-15T08:07:18.1953156Z         display: grid;
2025-04-15T08:07:18.1953238Z         grid-column-gap: 16px;
2025-04-15T08:07:18.1953313Z         grid-row-gap: 16px;
2025-04-15T08:07:18.1953409Z         grid-template-columns: repeat(12, 1fr);
2025-04-15T08:07:18.1953473Z       }
2025-04-15T08:07:18.1953477Z 
2025-04-15T08:07:18.1953568Z       body.netdata-splash .md-col-span-1 {
2025-04-15T08:07:18.1953649Z         grid-column: auto / span 1;
2025-04-15T08:07:18.1953714Z       }
2025-04-15T08:07:18.1953718Z 
2025-04-15T08:07:18.1953807Z       body.netdata-splash .md-col-span-2 {
2025-04-15T08:07:18.1953883Z         grid-column: auto / span 2;
2025-04-15T08:07:18.1953953Z       }
2025-04-15T08:07:18.1953957Z 
2025-04-15T08:07:18.1954045Z       body.netdata-splash .md-col-span-3 {
2025-04-15T08:07:18.1954125Z         grid-column: auto / span 3;
2025-04-15T08:07:18.1954270Z       }
2025-04-15T08:07:18.1954274Z 
2025-04-15T08:07:18.1954365Z       body.netdata-splash .md-col-span-4 {
2025-04-15T08:07:18.1954442Z         grid-column: auto / span 4;
2025-04-15T08:07:18.1954505Z       }
2025-04-15T08:07:18.1954509Z 
2025-04-15T08:07:18.1954602Z       body.netdata-splash .md-col-span-5 {
2025-04-15T08:07:18.1954680Z         grid-column: auto / span 5;
2025-04-15T08:07:18.1954747Z       }
2025-04-15T08:07:18.1954751Z 
2025-04-15T08:07:18.1954840Z       body.netdata-splash .md-col-span-6 {
2025-04-15T08:07:18.1954921Z         grid-column: auto / span 6;
2025-04-15T08:07:18.1954981Z       }
2025-04-15T08:07:18.1954985Z 
2025-04-15T08:07:18.1955072Z       body.netdata-splash .md-col-span-7 {
2025-04-15T08:07:18.1955154Z         grid-column: auto / span 7;
2025-04-15T08:07:18.1955220Z       }
2025-04-15T08:07:18.1955224Z 
2025-04-15T08:07:18.1955312Z       body.netdata-splash .md-col-span-8 {
2025-04-15T08:07:18.1955389Z         grid-column: auto / span 8;
2025-04-15T08:07:18.1955459Z       }
2025-04-15T08:07:18.1955463Z 
2025-04-15T08:07:18.1955551Z       body.netdata-splash .md-col-span-9 {
2025-04-15T08:07:18.1955627Z         grid-column: auto / span 9;
2025-04-15T08:07:18.1955691Z       }
2025-04-15T08:07:18.1955695Z 
2025-04-15T08:07:18.1955785Z       body.netdata-splash .md-col-span-10 {
2025-04-15T08:07:18.1955866Z         grid-column: auto / span 10;
2025-04-15T08:07:18.1955928Z       }
2025-04-15T08:07:18.1955932Z 
2025-04-15T08:07:18.1956025Z       body.netdata-splash .md-col-span-11 {
2025-04-15T08:07:18.1956202Z         grid-column: auto / span 11;
2025-04-15T08:07:18.1956263Z       }
2025-04-15T08:07:18.1956267Z 
2025-04-15T08:07:18.1956358Z       body.netdata-splash .md-col-span-12 {
2025-04-15T08:07:18.1956435Z         grid-column: auto / span 12;
2025-04-15T08:07:18.1956618Z       }
2025-04-15T08:07:18.1956679Z     }
2025-04-15T08:07:18.1956683Z 
2025-04-15T08:07:18.1956770Z     body.netdata-splash .row-span-1 {
2025-04-15T08:07:18.1956849Z       grid-row: auto / span 1;
2025-04-15T08:07:18.1956912Z     }
2025-04-15T08:07:18.1956916Z 
2025-04-15T08:07:18.1957002Z     body.netdata-splash .row-span-2 {
2025-04-15T08:07:18.1957076Z       grid-row: auto / span 2;
2025-04-15T08:07:18.1957138Z     }
2025-04-15T08:07:18.1957142Z 
2025-04-15T08:07:18.1957224Z     body.netdata-splash .row-span-3 {
2025-04-15T08:07:18.1957300Z       grid-row: auto / span 3;
2025-04-15T08:07:18.1957364Z     }
2025-04-15T08:07:18.1957367Z 
2025-04-15T08:07:18.1957450Z     body.netdata-splash .row-span-4 {
2025-04-15T08:07:18.1957524Z       grid-row: auto / span 4;
2025-04-15T08:07:18.1957587Z     }
2025-04-15T08:07:18.1957590Z 
2025-04-15T08:07:18.1957675Z     body.netdata-splash .row-span-5 {
2025-04-15T08:07:18.1957747Z       grid-row: auto / span 5;
2025-04-15T08:07:18.1957813Z     }
2025-04-15T08:07:18.1957816Z 
2025-04-15T08:07:18.1957901Z     body.netdata-splash .row-span-6 {
2025-04-15T08:07:18.1957976Z       grid-row: auto / span 6;
2025-04-15T08:07:18.1958039Z     }
2025-04-15T08:07:18.1958047Z 
2025-04-15T08:07:18.1958129Z     body.netdata-splash .row-span-7 {
2025-04-15T08:07:18.1958204Z       grid-row: auto / span 7;
2025-04-15T08:07:18.1958266Z     }
2025-04-15T08:07:18.1958270Z 
2025-04-15T08:07:18.1958355Z     body.netdata-splash .row-span-8 {
2025-04-15T08:07:18.1958431Z       grid-row: auto / span 8;
2025-04-15T08:07:18.1958494Z     }
2025-04-15T08:07:18.1958497Z 
2025-04-15T08:07:18.1958582Z     body.netdata-splash .row-span-9 {
2025-04-15T08:07:18.1958655Z       grid-row: auto / span 9;
2025-04-15T08:07:18.1958716Z     }
2025-04-15T08:07:18.1958722Z 
2025-04-15T08:07:18.1958809Z     body.netdata-splash .row-span-10 {
2025-04-15T08:07:18.1958883Z       grid-row: auto / span 10;
2025-04-15T08:07:18.1958953Z     }
2025-04-15T08:07:18.1958958Z 
2025-04-15T08:07:18.1959049Z     body.netdata-splash .row-span-11 {
2025-04-15T08:07:18.1959131Z       grid-row: auto / span 11;
2025-04-15T08:07:18.1959192Z     }
2025-04-15T08:07:18.1959196Z 
2025-04-15T08:07:18.1959282Z     body.netdata-splash .row-span-12 {
2025-04-15T08:07:18.1959481Z       grid-row: auto / span 12;
2025-04-15T08:07:18.1959543Z     }
2025-04-15T08:07:18.1959547Z 
2025-04-15T08:07:18.1959633Z     body.netdata-splash .relative {
2025-04-15T08:07:18.1959710Z       position: relative;
2025-04-15T08:07:18.1959776Z     }
2025-04-15T08:07:18.1959780Z 
2025-04-15T08:07:18.1959863Z     body.netdata-splash .absolute {
2025-04-15T08:07:18.1959936Z       position: absolute;
2025-04-15T08:07:18.1960004Z     }
2025-04-15T08:07:18.1960008Z 
2025-04-15T08:07:18.1960089Z     body.netdata-splash .index-10 {
2025-04-15T08:07:18.1960164Z       z-index: 10;
2025-04-15T08:07:18.1960225Z     }
2025-04-15T08:07:18.1960230Z 
2025-04-15T08:07:18.1960313Z     body.netdata-splash .m-auto {
2025-04-15T08:07:18.1960387Z       margin: auto;
2025-04-15T08:07:18.1960454Z     }
2025-04-15T08:07:18.1960458Z 
2025-04-15T08:07:18.1960544Z     body.netdata-splash .full-h {
2025-04-15T08:07:18.1960611Z       height: 100%;
2025-04-15T08:07:18.1960678Z     }
2025-04-15T08:07:18.1960686Z 
2025-04-15T08:07:18.1960767Z     body.netdata-splash .flex {
2025-04-15T08:07:18.1960838Z       display: flex;
2025-04-15T08:07:18.1960905Z     }
2025-04-15T08:07:18.1960908Z 
2025-04-15T08:07:18.1960992Z     body.netdata-splash .flex-col {
2025-04-15T08:07:18.1961079Z       flex-direction: column;
2025-04-15T08:07:18.1961142Z     }
2025-04-15T08:07:18.1961146Z 
2025-04-15T08:07:18.1961243Z     body.netdata-splash .space-between {
2025-04-15T08:07:18.1961331Z       justify-content: space-between;
2025-04-15T08:07:18.1961394Z     }
2025-04-15T08:07:18.1961398Z 
2025-04-15T08:07:18.1961491Z     body.netdata-splash .align-center {
2025-04-15T08:07:18.1961569Z       align-items: center;
2025-04-15T08:07:18.1961635Z     }
2025-04-15T08:07:18.1961639Z 
2025-04-15T08:07:18.1961808Z     body.netdata-splash .container {
2025-04-15T08:07:18.1961895Z       background: var(--main-bg);
2025-04-15T08:07:18.1961963Z       height: 100vh;
2025-04-15T08:07:18.1962033Z       column-gap: 0;
2025-04-15T08:07:18.1962102Z     }
2025-04-15T08:07:18.1962106Z 
2025-04-15T08:07:18.1962191Z     body.netdata-splash .frame {
2025-04-15T08:07:18.1962265Z       height: 100vh;
2025-04-15T08:07:18.1962326Z     }
2025-04-15T08:07:18.1962330Z 
2025-04-15T08:07:18.1962426Z     body.netdata-splash .light-beam:after {
2025-04-15T08:07:18.1962499Z       content: "";
2025-04-15T08:07:18.1962574Z       position: absolute;
2025-04-15T08:07:18.1962646Z       top: 0;
2025-04-15T08:07:18.1962712Z       bottom: 0;
2025-04-15T08:07:18.1962777Z       left: 0;
2025-04-15T08:07:18.1962850Z       width: 1px;
2025-04-15T08:07:18.1962970Z       box-shadow: 20px 0px 110px 55px rgb(0 255 100 / 10%);
2025-04-15T08:07:18.1963038Z     }
2025-04-15T08:07:18.1963041Z 
2025-04-15T08:07:18.1963127Z     body.netdata-splash #setupGrid {
2025-04-15T08:07:18.1963206Z       opacity: 0.15;
2025-04-15T08:07:18.1963279Z       position: absolute;
2025-04-15T08:07:18.1963344Z       inset: 0;
2025-04-15T08:07:18.1963411Z     }
2025-04-15T08:07:18.1963421Z 
2025-04-15T08:07:18.1963510Z     body.netdata-splash #monitorGrid {
2025-04-15T08:07:18.1963583Z       opacity: 0.4;
2025-04-15T08:07:18.1963658Z       transition: 1s ease;
2025-04-15T08:07:18.1963720Z     }
2025-04-15T08:07:18.1963724Z 
2025-04-15T08:07:18.1963835Z     body.netdata-splash #monitorGrid.hovered {
2025-04-15T08:07:18.1963905Z       opacity: 0.7;
2025-04-15T08:07:18.1963975Z     }
2025-04-15T08:07:18.1963979Z 
2025-04-15T08:07:18.1964073Z     body.netdata-splash #sphereContainer {
2025-04-15T08:07:18.1964153Z       height: calc(100vh);
2025-04-15T08:07:18.1964228Z       position: relative;
2025-04-15T08:07:18.1964291Z     }
2025-04-15T08:07:18.1964295Z 
2025-04-15T08:07:18.1964402Z     body.netdata-splash #sphereContainer h4 {
2025-04-15T08:07:18.1964473Z       display: none;
2025-04-15T08:07:18.1964545Z     }
2025-04-15T08:07:18.1964549Z 
2025-04-15T08:07:18.1964631Z     body.netdata-splash .setup {
2025-04-15T08:07:18.1964707Z       z-index: 10;
2025-04-15T08:07:18.1964781Z       position: relative;
2025-04-15T08:07:18.1964967Z       box-shadow: 20px 0px 160px 5px #012f13c2;
2025-04-15T08:07:18.1965060Z       background: linear-gradient(90deg,
2025-04-15T08:07:18.1965133Z           rgba(0, 0, 0, 1) 0%,
2025-04-15T08:07:18.1965211Z           rgb(0 19 7 / 76%) 100%);
2025-04-15T08:07:18.1965275Z     }
2025-04-15T08:07:18.1965279Z 
2025-04-15T08:07:18.1965364Z     body.netdata-splash .setup>.stats {
2025-04-15T08:07:18.1965439Z       padding: 16px;
2025-04-15T08:07:18.1965512Z       overflow: auto;
2025-04-15T08:07:18.1965586Z       height: 100%;
2025-04-15T08:07:18.1965659Z       position: absolute;
2025-04-15T08:07:18.1965727Z       top: 65px;
2025-04-15T08:07:18.1965797Z       left: 0;
2025-04-15T08:07:18.1965862Z       right: 0;
2025-04-15T08:07:18.1965931Z       bottom: 0;
2025-04-15T08:07:18.1965999Z     }
2025-04-15T08:07:18.1966002Z 
2025-04-15T08:07:18.1966186Z     body.netdata-splash .setup .header {
2025-04-15T08:07:18.1966261Z       position: sticky;
2025-04-15T08:07:18.1966324Z       top: 0;
2025-04-15T08:07:18.1966410Z       padding: 8px 16px;
2025-04-15T08:07:18.1966476Z       margin: 0;
2025-04-15T08:07:18.1966561Z       backdrop-filter: blur(8px);
2025-04-15T08:07:18.1966643Z       background: rgba(0, 0, 0, 0.1);
2025-04-15T08:07:18.1966745Z       /* border-bottom: 1px solid var(--border); */
2025-04-15T08:07:18.1966824Z       display: flex;
2025-04-15T08:07:18.1966902Z       align-items: center;
2025-04-15T08:07:18.1966994Z       justify-content: space-between;
2025-04-15T08:07:18.1967054Z     }
2025-04-15T08:07:18.1967058Z 
2025-04-15T08:07:18.1967149Z     body.netdata-splash .header .title {
2025-04-15T08:07:18.1967218Z       display: flex;
2025-04-15T08:07:18.1967293Z       align-items: center;
2025-04-15T08:07:18.1967363Z       gap: 8px;
2025-04-15T08:07:18.1967546Z     }
2025-04-15T08:07:18.1967551Z 
2025-04-15T08:07:18.1967642Z     body.netdata-splash .header .logo {
2025-04-15T08:07:18.1967710Z       width: 32px;
2025-04-15T08:07:18.1967776Z       height: auto;
2025-04-15T08:07:18.1967845Z     }
2025-04-15T08:07:18.1967849Z 
2025-04-15T08:07:18.1967945Z     body.netdata-splash .splash-message {
2025-04-15T08:07:18.1968024Z       position: absolute;
2025-04-15T08:07:18.1968089Z       inset: 0;
2025-04-15T08:07:18.1968161Z       margin: auto;
2025-04-15T08:07:18.1968232Z       display: flex;
2025-04-15T08:07:18.1968309Z       align-items: center;
2025-04-15T08:07:18.1968389Z       justify-content: center;
2025-04-15T08:07:18.1968465Z       flex-direction: column;
2025-04-15T08:07:18.1968540Z       overflow-y: auto;
2025-04-15T08:07:18.1968600Z     }
2025-04-15T08:07:18.1968604Z 
2025-04-15T08:07:18.1968699Z     body.netdata-splash .splash-message p {
2025-04-15T08:07:18.1968771Z       margin-top: 0;
2025-04-15T08:07:18.1968845Z       margin-bottom: 24px;
2025-04-15T08:07:18.1968930Z       color: var(--text-light);
2025-04-15T08:07:18.1969006Z       filter: blur(0.6px);
2025-04-15T08:07:18.1969066Z     }
2025-04-15T08:07:18.1969070Z 
2025-04-15T08:07:18.1969158Z     body.netdata-splash .tagline {
2025-04-15T08:07:18.1969235Z       position: absolute;
2025-04-15T08:07:18.1969308Z       bottom: 24px;
2025-04-15T08:07:18.1969379Z       font-size: 12px;
2025-04-15T08:07:18.1969457Z       color: var(--text-light);
2025-04-15T08:07:18.1969517Z     }
2025-04-15T08:07:18.1969520Z 
2025-04-15T08:07:18.1969606Z     body.netdata-splash .skip-link {
2025-04-15T08:07:18.1969679Z       font-size: 12px;
2025-04-15T08:07:18.1969752Z       color: var(--text-light);
2025-04-15T08:07:18.1969827Z       text-align: center;
2025-04-15T08:07:18.1969887Z     }
2025-04-15T08:07:18.1969891Z 
2025-04-15T08:07:18.1969978Z     body.netdata-splash .license-link {
2025-04-15T08:07:18.1970054Z       padding: 0 16px 4px;
2025-04-15T08:07:18.1970123Z       font-size: 12px;
2025-04-15T08:07:18.1970206Z       color: var(--text-light);
2025-04-15T08:07:18.1970266Z     }
2025-04-15T08:07:18.1970270Z 
2025-04-15T08:07:18.1970360Z     body.netdata-splash .button {
2025-04-15T08:07:18.1970433Z       padding: 8px 12px;
2025-04-15T08:07:18.1970653Z       border-radius: 2px;
2025-04-15T08:07:18.1970726Z       font-size: 16px;
2025-04-15T08:07:18.1970794Z       min-width: 88px;
2025-04-15T08:07:18.1970867Z       text-align: center;
2025-04-15T08:07:18.1970938Z       cursor: pointer;
2025-04-15T08:07:18.1971011Z       transition: 250ms ease;
2025-04-15T08:07:18.1971081Z       border: none;
2025-04-15T08:07:18.1971141Z     }
2025-04-15T08:07:18.1971145Z 
2025-04-15T08:07:18.1971241Z     body.netdata-splash .button-primary {
2025-04-15T08:07:18.1971318Z       background: var(--primary);
2025-04-15T08:07:18.1971394Z       color: var(--text-light);
2025-04-15T08:07:18.1971461Z     }
2025-04-15T08:07:18.1971465Z 
2025-04-15T08:07:18.1971570Z     body.netdata-splash .button-primary:hover {
2025-04-15T08:07:18.1971659Z       background: var(--highlight);
2025-04-15T08:07:18.1971726Z     }
2025-04-15T08:07:18.1971730Z 
2025-04-15T08:07:18.1971819Z     body.netdata-splash a.button {
2025-04-15T08:07:18.1971898Z       color: var(--text-dark);
2025-04-15T08:07:18.1971965Z     }
2025-04-15T08:07:18.1971968Z 
2025-04-15T08:07:18.1972060Z     body.netdata-splash .button-ghost {
2025-04-15T08:07:18.1972139Z       background: transparent;
2025-04-15T08:07:18.1972219Z       color: var(--primary);
2025-04-15T08:07:18.1972280Z     }
2025-04-15T08:07:18.1972283Z 
2025-04-15T08:07:18.1972388Z     body.netdata-splash .button-ghost:hover {
2025-04-15T08:07:18.1972462Z       color: var(--highlight);
2025-04-15T08:07:18.1972522Z     }
2025-04-15T08:07:18.1972526Z 
2025-04-15T08:07:18.1972614Z     body.netdata-splash .clear-button {
2025-04-15T08:07:18.1972684Z       font-size: 12px;
2025-04-15T08:07:18.1972754Z       padding: 0;
2025-04-15T08:07:18.1972823Z       min-width: auto;
2025-04-15T08:07:18.1972883Z     }
2025-04-15T08:07:18.1972890Z 
2025-04-15T08:07:18.1973059Z     body.netdata-splash .tabs {
2025-04-15T08:07:18.1973127Z       display: flex;
2025-04-15T08:07:18.1973203Z       align-items: center;
2025-04-15T08:07:18.1973279Z       justify-content: center;
2025-04-15T08:07:18.1973376Z       border-top: 1px solid var(--border);
2025-04-15T08:07:18.1973454Z       backdrop-filter: blur(4px);
2025-04-15T08:07:18.1973514Z     }
2025-04-15T08:07:18.1973518Z 
2025-04-15T08:07:18.1973607Z     body.netdata-splash button.tab {
2025-04-15T08:07:18.1973683Z       background: rgba(0, 0, 0, 0.2);
2025-04-15T08:07:18.1973752Z       border: none;
2025-04-15T08:07:18.1973825Z       color: var(--menu-item);
2025-04-15T08:07:18.1973898Z       padding: 8px 0 24px;
2025-04-15T08:07:18.1973971Z       border-left: 0;
2025-04-15T08:07:18.1974039Z       cursor: pointer;
2025-04-15T08:07:18.1974126Z       backdrop-filter: blur(2px);
2025-04-15T08:07:18.1974190Z       width: 100%;
2025-04-15T08:07:18.1974263Z       font-size: 12px;
2025-04-15T08:07:18.1974330Z       display: flex;
2025-04-15T08:07:18.1974410Z       flex-direction: column;
2025-04-15T08:07:18.1974489Z       align-items: center;
2025-04-15T08:07:18.1974559Z       gap: 8px;
2025-04-15T08:07:18.1974626Z     }
2025-04-15T08:07:18.1974634Z 
2025-04-15T08:07:18.1974743Z     body.netdata-splash button.tab:first-child {
2025-04-15T08:07:18.1974843Z       /* border-left: 1px solid var(--primary); */
2025-04-15T08:07:18.1974911Z     }
2025-04-15T08:07:18.1974916Z 
2025-04-15T08:07:18.1975038Z     body.netdata-splash button.tab:not(.active):hover {
2025-04-15T08:07:18.1975120Z       color: var(--tab-hover);
2025-04-15T08:07:18.1975194Z       transition: 100ms ease;
2025-04-15T08:07:18.1975256Z     }
2025-04-15T08:07:18.1975260Z 
2025-04-15T08:07:18.1975355Z     body.netdata-splash button.tab.active {
2025-04-15T08:07:18.1975432Z       background: transparent;
2025-04-15T08:07:18.1975536Z       /* border-bottom: 1px solid transparent; */
2025-04-15T08:07:18.1975614Z       backdrop-filter: blur(0);
2025-04-15T08:07:18.1975696Z       color: var(--tab-active);
2025-04-15T08:07:18.1975764Z       cursor: default;
2025-04-15T08:07:18.1975825Z     }
2025-04-15T08:07:18.1975831Z 
2025-04-15T08:07:18.1975915Z     body.netdata-splash .tab-icon {
2025-04-15T08:07:18.1976186Z       width: 24px;
2025-04-15T08:07:18.1976259Z       height: 24px;
2025-04-15T08:07:18.1976320Z     }
2025-04-15T08:07:18.1976323Z 
2025-04-15T08:07:18.1976414Z     body.netdata-splash .tab-icon svg {
2025-04-15T08:07:18.1976478Z       height: 100%;
2025-04-15T08:07:18.1976542Z       width: 100%;
2025-04-15T08:07:18.1976603Z     }
2025-04-15T08:07:18.1976607Z 
2025-04-15T08:07:18.1976702Z     body.netdata-splash .tab-icon svg path {
2025-04-15T08:07:18.1976781Z       fill: var(--menu-item);
2025-04-15T08:07:18.1976853Z       transition: 100ms ease;
2025-04-15T08:07:18.1976912Z     }
2025-04-15T08:07:18.1976919Z 
2025-04-15T08:07:18.1977044Z     body.netdata-splash .tab.active .tab-icon svg path {
2025-04-15T08:07:18.1977125Z       fill: var(--tab-active);
2025-04-15T08:07:18.1977194Z     }
2025-04-15T08:07:18.1977198Z 
2025-04-15T08:07:18.1977289Z     button.tab:not(.active):hover svg path {
2025-04-15T08:07:18.1977365Z       fill: var(--tab-hover);
2025-04-15T08:07:18.1977426Z     }
2025-04-15T08:07:18.1977435Z 
2025-04-15T08:07:18.1977521Z     body.netdata-splash .panel {
2025-04-15T08:07:18.1977605Z       background: var(--panel-bg);
2025-04-15T08:07:18.1977673Z       padding: 16px;
2025-04-15T08:07:18.1977752Z       border-radius: 4px;
2025-04-15T08:07:18.1977832Z       border: 1px solid var(--border);
2025-04-15T08:07:18.1977919Z       backdrop-filter: blur(0px);
2025-04-15T08:07:18.1977979Z     }
2025-04-15T08:07:18.1977983Z 
2025-04-15T08:07:18.1978069Z     body.netdata-splash .panel-tab {
2025-04-15T08:07:18.1978151Z       border-radius: 0 0 4px 4px;
2025-04-15T08:07:18.1978221Z       border-top: 0;
2025-04-15T08:07:18.1978319Z       border-left: 1px solid var(--primary);
2025-04-15T08:07:18.1978416Z       border-bottom: 1px solid var(--primary);
2025-04-15T08:07:18.1978632Z       border-right: 1px solid var(--primary);
2025-04-15T08:07:18.1978712Z       padding: 4px 24px;
2025-04-15T08:07:18.1978780Z       display: none;
2025-04-15T08:07:18.1978852Z       height: 70%;
2025-04-15T08:07:18.1978927Z       overflow: auto;
2025-04-15T08:07:18.1978988Z     }
2025-04-15T08:07:18.1978996Z 
2025-04-15T08:07:18.1979083Z     body.netdata-splash .data-tab {
2025-04-15T08:07:18.1979156Z       display: block;
2025-04-15T08:07:18.1979228Z       opacity: 0;
2025-04-15T08:07:18.1979307Z       transition: 800ms ease;
2025-04-15T08:07:18.1979388Z       pointer-events: none;
2025-04-15T08:07:18.1979448Z     }
2025-04-15T08:07:18.1979452Z 
2025-04-15T08:07:18.1979545Z     body.netdata-splash .data-tab.active {
2025-04-15T08:07:18.1979616Z       opacity: 1;
2025-04-15T08:07:18.1979692Z       pointer-events: all;
2025-04-15T08:07:18.1979758Z     }
2025-04-15T08:07:18.1979762Z 
2025-04-15T08:07:18.1979862Z     body.netdata-splash .data-tab-container {
2025-04-15T08:07:18.1979939Z       position: absolute;
2025-04-15T08:07:18.1980008Z       left: 0;
2025-04-15T08:07:18.1980071Z       right: 0;
2025-04-15T08:07:18.1980140Z       top: 45%;
2025-04-15T08:07:18.1980210Z       /* height: 40vh; */
2025-04-15T08:07:18.1980280Z     }
2025-04-15T08:07:18.1980283Z 
2025-04-15T08:07:18.1980377Z     body.netdata-splash .system-container {
2025-04-15T08:07:18.1980446Z       overflow: auto;
2025-04-15T08:07:18.1980529Z       height: calc(100% - 330px);
2025-04-15T08:07:18.1980603Z       padding: 0 24px 24px;
2025-04-15T08:07:18.1980679Z       margin: 0 -24px;
2025-04-15T08:07:18.1980797Z       scrollbar-color: var(--scrollbar-thumb) #293030;
2025-04-15T08:07:18.1980875Z       scrollbar-width: thin;
2025-04-15T08:07:18.1980943Z     }
2025-04-15T08:07:18.1980946Z 
2025-04-15T08:07:18.1981077Z     body.netdata-splash .data-tab-container .system>div {
2025-04-15T08:07:18.1981152Z       display: flex;
2025-04-15T08:07:18.1981233Z       /* margin-bottom: 24px; */
2025-04-15T08:07:18.1981323Z       /* backdrop-filter: blur(1px); */
2025-04-15T08:07:18.1981395Z       height: auto;
2025-04-15T08:07:18.1981467Z       min-height: 40px;
2025-04-15T08:07:18.1981544Z       overflow: hidden;
2025-04-15T08:07:18.1981605Z     }
2025-04-15T08:07:18.1981723Z 
2025-04-15T08:07:18.1981879Z     body.netdata-splash .data-tab-container .system .key-value {
2025-04-15T08:07:18.1981956Z       flex-direction: column;
2025-04-15T08:07:18.1982021Z       gap: 8px;
2025-04-15T08:07:18.1982105Z       align-items: flex-start;
2025-04-15T08:07:18.1982181Z       justify-content: start;
2025-04-15T08:07:18.1982252Z       width: 100%;
2025-04-15T08:07:18.1982321Z       padding: 0;
2025-04-15T08:07:18.1982391Z     }
2025-04-15T08:07:18.1982395Z 
2025-04-15T08:07:18.1982600Z     body.netdata-splash .data-tab-container .system .key-value span:nth-child(1) {
2025-04-15T08:07:18.1982678Z       padding: 8px 16px;
2025-04-15T08:07:18.1982777Z       border-bottom: 1px solid var(--border);
2025-04-15T08:07:18.1982844Z       width: 100%;
2025-04-15T08:07:18.1982923Z       color: #8eae9b;
2025-04-15T08:07:18.1983005Z       background: rgba(0, 0, 0, 0.8);
2025-04-15T08:07:18.1983069Z     }
2025-04-15T08:07:18.1983078Z 
2025-04-15T08:07:18.1983274Z     body.netdata-splash .data-tab-container .system .key-value span:nth-child(2) {
2025-04-15T08:07:18.1983353Z       /* font-size: 16px; */
2025-04-15T08:07:18.1983435Z       padding: 4px 16px 12px;
2025-04-15T08:07:18.1983507Z       text-align: left;
2025-04-15T08:07:18.1983586Z       color: var(--accent);
2025-04-15T08:07:18.1983647Z     }
2025-04-15T08:07:18.1983651Z 
2025-04-15T08:07:18.1983744Z     body.netdata-splash .panel:hover h4 {
2025-04-15T08:07:18.1983829Z       color: var(--highlight);
2025-04-15T08:07:18.1983890Z     }
2025-04-15T08:07:18.1983894Z 
2025-04-15T08:07:18.1983991Z     body.netdata-splash .hide-title h4 {
2025-04-15T08:07:18.1984066Z       visibility: hidden;
2025-04-15T08:07:18.1984132Z     }
2025-04-15T08:07:18.1984136Z 
2025-04-15T08:07:18.1984246Z     body.netdata-splash .no-key span:first-child {
2025-04-15T08:07:18.1984403Z       display: none;
2025-04-15T08:07:18.1984471Z     }
2025-04-15T08:07:18.1984474Z 
2025-04-15T08:07:18.1990265Z     body.netdata-splash .no-title h4 {
2025-04-15T08:07:18.1990387Z       display: none;
2025-04-15T08:07:18.1990456Z     }
2025-04-15T08:07:18.1990461Z 
2025-04-15T08:07:18.1990571Z     body.netdata-splash .absolute-center {
2025-04-15T08:07:18.1990656Z       position: absolute;
2025-04-15T08:07:18.1990723Z       inset: 0;
2025-04-15T08:07:18.1990795Z       margin: auto;
2025-04-15T08:07:18.1990855Z     }
2025-04-15T08:07:18.1990859Z 
2025-04-15T08:07:18.1990952Z     body.netdata-splash .align-end {
2025-04-15T08:07:18.1991035Z       align-content: flex-end;
2025-04-15T08:07:18.1991097Z     }
2025-04-15T08:07:18.1991101Z 
2025-04-15T08:07:18.1991218Z     body.netdata-splash .panel-tab .separator {
2025-04-15T08:07:18.1991318Z       border-bottom: 1px solid var(--border);
2025-04-15T08:07:18.1991402Z       margin: 8px -24px;
2025-04-15T08:07:18.1991468Z     }
2025-04-15T08:07:18.1991472Z 
2025-04-15T08:07:18.1991572Z     body.netdata-splash .section-image {
2025-04-15T08:07:18.1991644Z       height: 16px;
2025-04-15T08:07:18.1991712Z       width: 16px;
2025-04-15T08:07:18.1991781Z     }
2025-04-15T08:07:18.1991785Z 
2025-04-15T08:07:18.1991885Z     body.netdata-splash .section-image svg {
2025-04-15T08:07:18.1991956Z       width: 100%;
2025-04-15T08:07:18.1992023Z       height: 100%;
2025-04-15T08:07:18.1992082Z     }
2025-04-15T08:07:18.1992086Z 
2025-04-15T08:07:18.1992181Z     body.netdata-splash .section-title {
2025-04-15T08:07:18.1992254Z       font-size: 14px;
2025-04-15T08:07:18.1992331Z       font-weight: bold;
2025-04-15T08:07:18.1992399Z       margin: 8px 0;
2025-04-15T08:07:18.1992482Z       display: inline-block;
2025-04-15T08:07:18.1992543Z     }
2025-04-15T08:07:18.1992547Z 
2025-04-15T08:07:18.1992665Z     body.netdata-splash .sphere-stats-container {
2025-04-15T08:07:18.1992734Z       width: 80%;
2025-04-15T08:07:18.1992802Z       height: 100vh;
2025-04-15T08:07:18.1992877Z       display: flex;
2025-04-15T08:07:18.1992951Z       align-items: center;
2025-04-15T08:07:18.1993030Z       flex-direction: column;
2025-04-15T08:07:18.1993111Z       justify-content: center;
2025-04-15T08:07:18.1993345Z       margin-bottom: 10vmin;
2025-04-15T08:07:18.1993414Z       gap: 16px;
2025-04-15T08:07:18.1993473Z     }
2025-04-15T08:07:18.1993478Z 
2025-04-15T08:07:18.1993562Z     body.netdata-splash .key-value {
2025-04-15T08:07:18.1993646Z       font-size: var(--font-small);
2025-04-15T08:07:18.1993715Z       display: flex;
2025-04-15T08:07:18.1993804Z       justify-content: space-between;
2025-04-15T08:07:18.1993877Z       align-items: center;
2025-04-15T08:07:18.1993949Z       padding: 8px 0;
2025-04-15T08:07:18.1994028Z       color: var(--key-value-table);
2025-04-15T08:07:18.1994087Z     }
2025-04-15T08:07:18.1994091Z 
2025-04-15T08:07:18.1994171Z     /* .key-value:nth-child(2n) {
2025-04-15T08:07:18.1994249Z       background: var(--row-2n);
2025-04-15T08:07:18.1994318Z     } */
2025-04-15T08:07:18.1994409Z     body.netdata-splash .key-value:hover {
2025-04-15T08:07:18.1994485Z       color: var(--highlight);
2025-04-15T08:07:18.1994547Z     }
2025-04-15T08:07:18.1994552Z 
2025-04-15T08:07:18.1994677Z     body.netdata-splash .key-value span:nth-child(2) {
2025-04-15T08:07:18.1994753Z       text-align: right;
2025-04-15T08:07:18.1994811Z     }
2025-04-15T08:07:18.1994815Z 
2025-04-15T08:07:18.1994913Z     body.netdata-splash .metrics-container {
2025-04-15T08:07:18.1994987Z       position: absolute;
2025-04-15T08:07:18.1995054Z       top: 150px;
2025-04-15T08:07:18.1995115Z     }
2025-04-15T08:07:18.1995118Z 
2025-04-15T08:07:18.1995241Z     body.netdata-splash .collected-metrics .key-value {
2025-04-15T08:07:18.1995320Z       flex-direction: column;
2025-04-15T08:07:18.1995390Z       align-items: center;
2025-04-15T08:07:18.1995471Z       justify-content: center;
2025-04-15T08:07:18.1995543Z       background: none;
2025-04-15T08:07:18.1995614Z       text-align: center;
2025-04-15T08:07:18.1995818Z       text-transform: uppercase;
2025-04-15T08:07:18.1995891Z       font-size: 12px;
2025-04-15T08:07:18.1995965Z       color: var(--text);
2025-04-15T08:07:18.1996025Z     }
2025-04-15T08:07:18.1996033Z 
2025-04-15T08:07:18.1996339Z     body.netdata-splash .collected-metrics .key-value span:nth-child(2) {
2025-04-15T08:07:18.1996417Z       font-size: 7vmin;
2025-04-15T08:07:18.1996485Z       font-weight: 700;
2025-04-15T08:07:18.1996564Z       color: rgb(254 254 254 / 80%);
2025-04-15T08:07:18.1996636Z       filter: blur(0.8px);
2025-04-15T08:07:18.1996705Z       text-align: center;
2025-04-15T08:07:18.1996771Z     }
2025-04-15T08:07:18.1996775Z 
2025-04-15T08:07:18.1996864Z     #server .key-value span:first-child,
2025-04-15T08:07:18.1996959Z     #package .key-value span:first-child {
2025-04-15T08:07:18.1997026Z       display: none;
2025-04-15T08:07:18.1997090Z     }
2025-04-15T08:07:18.1997093Z 
2025-04-15T08:07:18.1997180Z     #server .key-value span:nth-child(2),
2025-04-15T08:07:18.1997279Z     #package .key-value span:nth-child(2) {
2025-04-15T08:07:18.1997356Z       font-size: 12px;
2025-04-15T08:07:18.1997433Z       color: var(--primary);
2025-04-15T08:07:18.1997517Z       font-family: monospace;
2025-04-15T08:07:18.1997584Z     }
2025-04-15T08:07:18.1997588Z 
2025-04-15T08:07:18.1997680Z     body.netdata-splash .head-summary {
2025-04-15T08:07:18.1997744Z       left: 0;
2025-04-15T08:07:18.1997815Z       padding: 16px;
2025-04-15T08:07:18.1997883Z       right: 0;
2025-04-15T08:07:18.1997952Z       display: flex;
2025-04-15T08:07:18.1998031Z       flex-direction: row;
2025-04-15T08:07:18.1998119Z       justify-content: space-between;
2025-04-15T08:07:18.1998181Z     }
2025-04-15T08:07:18.1998185Z 
2025-04-15T08:07:18.1998271Z     body.netdata-splash .module {
2025-04-15T08:07:18.1998355Z       border: 2px solid var(--border);
2025-04-15T08:07:18.1998434Z       border-radius: 16px;
2025-04-15T08:07:18.1998583Z       box-shadow: -1px 1px var(--main-bg), -2px 2px var(--main-bg),
2025-04-15T08:07:18.1998710Z         -3px 3px var(--border), -4px 4px 24px var(--border);
2025-04-15T08:07:18.1998799Z       height: var(--module-height);
2025-04-15T08:07:18.1998870Z       overflow: auto;
2025-04-15T08:07:18.1999131Z       scrollbar-color: var(--scrollbar-thumb) #293030;
2025-04-15T08:07:18.1999212Z       scrollbar-width: thin;
2025-04-15T08:07:18.1999304Z       /* backdrop-filter: blur(2px); */
2025-04-15T08:07:18.1999366Z     }
2025-04-15T08:07:18.1999370Z 
2025-04-15T08:07:18.1999460Z     body.netdata-splash .module-header {
2025-04-15T08:07:18.1999531Z       display: flex;
2025-04-15T08:07:18.1999604Z       align-items: center;
2025-04-15T08:07:18.1999677Z       gap: 4px;
2025-04-15T08:07:18.1999751Z       padding: 4px 16px;
2025-04-15T08:07:18.1999834Z       background: rgba(0, 0, 0, 0.8);
2025-04-15T08:07:18.1999916Z       border-radius: 16px 16px 0 0;
2025-04-15T08:07:18.1999982Z       color: #8eae9b;
2025-04-15T08:07:18.2000081Z       border-bottom: 1px solid var(--border);
2025-04-15T08:07:18.2000157Z       position: sticky;
2025-04-15T08:07:18.2000225Z       top: 0;
2025-04-15T08:07:18.2000285Z     }
2025-04-15T08:07:18.2000289Z 
2025-04-15T08:07:18.2000398Z     body.netdata-splash .module-header svg path {
2025-04-15T08:07:18.2000478Z       fill: var(--accent);
2025-04-15T08:07:18.2000537Z     }
2025-04-15T08:07:18.2000541Z 
2025-04-15T08:07:18.2000643Z     body.netdata-splash .modules-container {
2025-04-15T08:07:18.2000712Z       max-height: 100%;
2025-04-15T08:07:18.2000783Z       text-align: center;
2025-04-15T08:07:18.2000853Z       margin: auto;
2025-04-15T08:07:18.2000924Z       column-gap: 24px;
2025-04-15T08:07:18.2000986Z     }
2025-04-15T08:07:18.2000990Z 
2025-04-15T08:07:18.2001080Z     body.netdata-splash .module-content {
2025-04-15T08:07:18.2001155Z       padding: 4px 16px;
2025-04-15T08:07:18.2001215Z     }
2025-04-15T08:07:18.2001218Z 
2025-04-15T08:07:18.2001325Z     body.netdata-splash .db-metrics-container {
2025-04-15T08:07:18.2001400Z       display: flex;
2025-04-15T08:07:18.2001603Z       justify-content: center;
2025-04-15T08:07:18.2001672Z       gap: 16px;
2025-04-15T08:07:18.2001731Z     }
2025-04-15T08:07:18.2001735Z 
2025-04-15T08:07:18.2001828Z     body.netdata-splash .db-metrics-blocks {
2025-04-15T08:07:18.2001907Z       /* display: flex; */
2025-04-15T08:07:18.2001984Z       /* flex-direction: column; */
2025-04-15T08:07:18.2002061Z       /* align-items: center;
2025-04-15T08:07:18.2002138Z       justify-content: center;
2025-04-15T08:07:18.2002207Z       gap: 24px; */
2025-04-15T08:07:18.2002284Z       height: var(--module-height);
2025-04-15T08:07:18.2002349Z       width: 100%;
2025-04-15T08:07:18.2002412Z     }
2025-04-15T08:07:18.2002416Z 
2025-04-15T08:07:18.2002487Z     /* .db-metrics-block {
2025-04-15T08:07:18.2002559Z       display: flex;
2025-04-15T08:07:18.2002634Z       flex-direction: column;
2025-04-15T08:07:18.2002707Z       text-align: center;
2025-04-15T08:07:18.2002782Z       min-width: 15vmax;
2025-04-15T08:07:18.2002852Z       height: 150px;
2025-04-15T08:07:18.2002931Z       padding: 0 24px;
2025-04-15T08:07:18.2002992Z     } */
2025-04-15T08:07:18.2003129Z     body.netdata-splash .db-metrics-blocks .module-content {
2025-04-15T08:07:18.2003209Z       padding: 0;
2025-04-15T08:07:18.2003268Z     }
2025-04-15T08:07:18.2003272Z 
2025-04-15T08:07:18.2003368Z     /* .db-metrics-block:not(:last-child) {
2025-04-15T08:07:18.2003457Z       border-right: 1px solid var(--border);
2025-04-15T08:07:18.2003525Z     } */
2025-04-15T08:07:18.2003618Z     body.netdata-splash .db-metrics-title {
2025-04-15T08:07:18.2003691Z       font-size: 1.5vmin;
2025-04-15T08:07:18.2003756Z     }
2025-04-15T08:07:18.2003760Z 
2025-04-15T08:07:18.2003873Z     body.netdata-splash .db-metrics-block-title {
2025-04-15T08:07:18.2003947Z       font-size: 14px;
2025-04-15T08:07:18.2004020Z       padding: 8px 16px;
2025-04-15T08:07:18.2004092Z       z-index: 100;
2025-04-15T08:07:18.2004169Z       font-weight: bold;
2025-04-15T08:07:18.2004237Z       color: #fff;
2025-04-15T08:07:18.2004307Z     }
2025-04-15T08:07:18.2004311Z 
2025-04-15T08:07:18.2004415Z     body.netdata-splash .db-metrics .key-value {
2025-04-15T08:07:18.2004489Z       display: flex;
2025-04-15T08:07:18.2004565Z       flex-direction: column;
2025-04-15T08:07:18.2004735Z       align-items: flex-start;
2025-04-15T08:07:18.2004802Z     }
2025-04-15T08:07:18.2004806Z 
2025-04-15T08:07:18.2004959Z     body.netdata-splash .db-metrics .key-value span:nth-child(2) {
2025-04-15T08:07:18.2005035Z       font-size: 12px;
2025-04-15T08:07:18.2005109Z       color: var(--accent);
2025-04-15T08:07:18.2005182Z       filter: blur(0.5px);
2025-04-15T08:07:18.2005263Z       text-align: center;
2025-04-15T08:07:18.2005326Z     }
2025-04-15T08:07:18.2005329Z 
2025-04-15T08:07:18.2005419Z     body.netdata-splash .db-metrics {
2025-04-15T08:07:18.2005493Z       padding: 8px 16px;
2025-04-15T08:07:18.2005589Z       border-bottom: 1px solid var(--border);
2025-04-15T08:07:18.2005650Z     }
2025-04-15T08:07:18.2005654Z 
2025-04-15T08:07:18.2005743Z     body.netdata-splash .disk-stats {
2025-04-15T08:07:18.2005823Z       /* border-bottom: 0; */
2025-04-15T08:07:18.2005894Z       padding: 16px;
2025-04-15T08:07:18.2005960Z     }
2025-04-15T08:07:18.2005968Z 
2025-04-15T08:07:18.2006216Z     body.netdata-splash .module-content:last-child .disk-stats {
2025-04-15T08:07:18.2006302Z       padding-bottom: 112px;
2025-04-15T08:07:18.2006364Z     }
2025-04-15T08:07:18.2006368Z 
2025-04-15T08:07:18.2006468Z     body.netdata-splash .disk-max .key-value {
2025-04-15T08:07:18.2006549Z       flex-direction: row;
2025-04-15T08:07:18.2006620Z       font-size: 12px;
2025-04-15T08:07:18.2006709Z       justify-content: space-between;
2025-04-15T08:07:18.2006780Z       padding: 2px 0;
2025-04-15T08:07:18.2006844Z     }
2025-04-15T08:07:18.2006851Z 
2025-04-15T08:07:18.2006993Z     body.netdata-splash .disk-max .key-value span:nth-child(2) {
2025-04-15T08:07:18.2007062Z       font-size: 12px;
2025-04-15T08:07:18.2007133Z       display: flex;
2025-04-15T08:07:18.2007341Z       justify-content: space-between;
2025-04-15T08:07:18.2007413Z       width: 100%;
2025-04-15T08:07:18.2007476Z     }
2025-04-15T08:07:18.2007480Z 
2025-04-15T08:07:18.2007578Z     body.netdata-splash .disk-used .key-value {
2025-04-15T08:07:18.2007658Z       padding: 2px 0;
2025-04-15T08:07:18.2007720Z     }
2025-04-15T08:07:18.2007724Z 
2025-04-15T08:07:18.2007896Z     body.netdata-splash .disk-max .key-value span:nth-child(2):before {
2025-04-15T08:07:18.2007972Z       content: "Disk Size";
2025-04-15T08:07:18.2008036Z     }
2025-04-15T08:07:18.2008040Z 
2025-04-15T08:07:18.2008205Z     body.netdata-splash .disk-used .key-value span:nth-child(2):before {
2025-04-15T08:07:18.2008275Z       content: "Used ";
2025-04-15T08:07:18.2008340Z     }
2025-04-15T08:07:18.2008344Z 
2025-04-15T08:07:18.2008491Z     body.netdata-splash .disk-used .key-value span:nth-child(2) {
2025-04-15T08:07:18.2008565Z       font-size: 12px;
2025-04-15T08:07:18.2008634Z       display: flex;
2025-04-15T08:07:18.2008724Z       justify-content: space-between;
2025-04-15T08:07:18.2008792Z       width: 100%;
2025-04-15T08:07:18.2008852Z     }
2025-04-15T08:07:18.2008857Z 
2025-04-15T08:07:18.2009009Z     body.netdata-splash .db-metrics .key-value span:first-child {
2025-04-15T08:07:18.2009084Z       font-size: 12px;
2025-04-15T08:07:18.2009160Z       color: var(--text);
2025-04-15T08:07:18.2009220Z     }
2025-04-15T08:07:18.2009223Z 
2025-04-15T08:07:18.2009329Z     body.netdata-splash .percentage-container {
2025-04-15T08:07:18.2009396Z       width: 100%;
2025-04-15T08:07:18.2009477Z       background: transparent;
2025-04-15T08:07:18.2009565Z       border: 1px solid var(--primary);
2025-04-15T08:07:18.2009631Z       height: 16px;
2025-04-15T08:07:18.2009705Z       border-radius: 1px;
2025-04-15T08:07:18.2009781Z       position: relative;
2025-04-15T08:07:18.2009841Z     }
2025-04-15T08:07:18.2009844Z 
2025-04-15T08:07:18.2009940Z     body.netdata-splash .percentage-bar {
2025-04-15T08:07:18.2010017Z       background: #016a2b94;
2025-04-15T08:07:18.2010099Z       position: absolute;
2025-04-15T08:07:18.2010165Z       bottom: 0;
2025-04-15T08:07:18.2010228Z       top: 0;
2025-04-15T08:07:18.2010297Z       left: 0;
2025-04-15T08:07:18.2010496Z       backdrop-filter: blur(1px);
2025-04-15T08:07:18.2010560Z     }
2025-04-15T08:07:18.2010564Z 
2025-04-15T08:07:18.2010659Z     body.netdata-splash .percentage-text {
2025-04-15T08:07:18.2010731Z       position: absolute;
2025-04-15T08:07:18.2010804Z       font-size: 12px;
2025-04-15T08:07:18.2010867Z       top: 0;
2025-04-15T08:07:18.2010940Z       padding: 0 2px;
2025-04-15T08:07:18.2011013Z       color: var(--accent);
2025-04-15T08:07:18.2011078Z     }
2025-04-15T08:07:18.2011081Z 
2025-04-15T08:07:18.2011173Z     body.netdata-splash .data-tab-table {
2025-04-15T08:07:18.2011243Z       padding: 16px;
2025-04-15T08:07:18.2011313Z       width: 400px;
2025-04-15T08:07:18.2011396Z       height: var(--module-height);
2025-04-15T08:07:18.2011468Z       margin: auto;
2025-04-15T08:07:18.2011535Z     }
2025-04-15T08:07:18.2011538Z 
2025-04-15T08:07:18.2011641Z     body.netdata-splash .node-info-container {
2025-04-15T08:07:18.2011714Z       display: flex;
2025-04-15T08:07:18.2011793Z       flex-direction: column;
2025-04-15T08:07:18.2011866Z       width: 100%;
2025-04-15T08:07:18.2011945Z       justify-content: center;
2025-04-15T08:07:18.2012024Z       align-items: center;
2025-04-15T08:07:18.2012091Z       gap: 8px;
2025-04-15T08:07:18.2012153Z     }
2025-04-15T08:07:18.2012157Z 
2025-04-15T08:07:18.2012247Z     body.netdata-splash .node-info {
2025-04-15T08:07:18.2012316Z       display: flex;
2025-04-15T08:07:18.2012398Z       justify-content: center;
2025-04-15T08:07:18.2012464Z       width: 100%;
2025-04-15T08:07:18.2012529Z       gap: 8px;
2025-04-15T08:07:18.2012607Z       flex-direction: row;
2025-04-15T08:07:18.2012667Z     }
2025-04-15T08:07:18.2012671Z 
2025-04-15T08:07:18.2012793Z     body.netdata-splash .node-info-container .title {
2025-04-15T08:07:18.2012864Z       font-size: 12px;
2025-04-15T08:07:18.2013010Z     }
2025-04-15T08:07:18.2013017Z 
2025-04-15T08:07:18.2013118Z     body.netdata-splash .node-info .key-value {
2025-04-15T08:07:18.2013204Z       border: 1px solid var(--highlight);
2025-04-15T08:07:18.2013288Z       padding: 2px 8px;
2025-04-15T08:07:18.2013363Z       border-radius: 4px;
2025-04-15T08:07:18.2013438Z       font-size: 12px;
2025-04-15T08:07:18.2013514Z       color: var(--highlight);
2025-04-15T08:07:18.2013581Z       height: 20px;
2025-04-15T08:07:18.2013646Z     }
2025-04-15T08:07:18.2013649Z 
2025-04-15T08:07:18.2013793Z     body.netdata-splash .node-info .key-value span:first-child {
2025-04-15T08:07:18.2013873Z       margin-right: 4px;
2025-04-15T08:07:18.2013944Z       font-weight: normal;
2025-04-15T08:07:18.2014004Z     }
2025-04-15T08:07:18.2014012Z 
2025-04-15T08:07:18.2014099Z     body.netdata-splash .availability {
2025-04-15T08:07:18.2014172Z       text-align: right;
2025-04-15T08:07:18.2014252Z       font-family: monospace;
2025-04-15T08:07:18.2014324Z       display: flex;
2025-04-15T08:07:18.2014404Z       flex-direction: column;
2025-04-15T08:07:18.2014487Z       text-transform: capitalize;
2025-04-15T08:07:18.2014562Z       padding: 8px 16px;
2025-04-15T08:07:18.2014635Z       color: #fff;
2025-04-15T08:07:18.2014704Z       font-size: 12px;
2025-04-15T08:07:18.2014768Z     }
2025-04-15T08:07:18.2014772Z 
2025-04-15T08:07:18.2014879Z     body.netdata-splash .availability .key-valye {
2025-04-15T08:07:18.2014948Z       padding: 4px 0;
2025-04-15T08:07:18.2015012Z     }
2025-04-15T08:07:18.2015016Z 
2025-04-15T08:07:18.2015101Z     body.netdata-splash .sub-module {
2025-04-15T08:07:18.2015170Z       width: 100%;
2025-04-15T08:07:18.2015229Z     }
2025-04-15T08:07:18.2015233Z 
2025-04-15T08:07:18.2015321Z     body.netdata-splash .hardware {
2025-04-15T08:07:18.2015397Z       flex-direction: column;
2025-04-15T08:07:18.2015458Z     }
2025-04-15T08:07:18.2015461Z 
2025-04-15T08:07:18.2015574Z     body.netdata-splash .hardware .module-content {
2025-04-15T08:07:18.2015645Z       padding: 0;
2025-04-15T08:07:18.2015717Z       display: flex;
2025-04-15T08:07:18.2015778Z     }
2025-04-15T08:07:18.2015781Z 
2025-04-15T08:07:18.2015914Z     body.netdata-splash .module.has-title .section-title {
2025-04-15T08:07:18.2016174Z       padding-bottom: 12px;
2025-04-15T08:07:18.2016249Z       margin-bottom: 0;
2025-04-15T08:07:18.2016313Z     }
2025-04-15T08:07:18.2016317Z 
2025-04-15T08:07:18.2016398Z     body.netdata-splash .h-auto {
2025-04-15T08:07:18.2016468Z       height: auto;
2025-04-15T08:07:18.2016527Z     }
2025-04-15T08:07:18.2016531Z 
2025-04-15T08:07:18.2016610Z     body.netdata-splash .none {
2025-04-15T08:07:18.2016684Z       display: none;
2025-04-15T08:07:18.2016746Z     }
2025-04-15T08:07:18.2016750Z 
2025-04-15T08:07:18.2016843Z     body.netdata-splash .claim-message {
2025-04-15T08:07:18.2016916Z       position: absolute;
2025-04-15T08:07:18.2016981Z       top: 0;
2025-04-15T08:07:18.2017046Z       left: 0;
2025-04-15T08:07:18.2017108Z       right: 0;
2025-04-15T08:07:18.2017183Z       margin: auto;
2025-04-15T08:07:18.2017251Z       padding: 0 24px;
2025-04-15T08:07:18.2017325Z       overflow-y: auto;
2025-04-15T08:07:18.2017385Z     }
2025-04-15T08:07:18.2017389Z 
2025-04-15T08:07:18.2017497Z     body.netdata-splash .claim-message .welcome {
2025-04-15T08:07:18.2017569Z       padding: 16px 0;
2025-04-15T08:07:18.2017640Z       text-align: center;
2025-04-15T08:07:18.2017704Z     }
2025-04-15T08:07:18.2017707Z 
2025-04-15T08:07:18.2017794Z     body.netdata-splash .text-center {
2025-04-15T08:07:18.2017867Z       text-align: center;
2025-04-15T08:07:18.2017926Z     }
2025-04-15T08:07:18.2017930Z 
2025-04-15T08:07:18.2018022Z     body.netdata-splash .connection-modal {
2025-04-15T08:07:18.2018105Z       background: rgba(0, 0, 0, 0.4);
2025-04-15T08:07:18.2018182Z       border: 1px solid var(--border);
2025-04-15T08:07:18.2018255Z       padding: 16px 16px;
2025-04-15T08:07:18.2018322Z       display: flex;
2025-04-15T08:07:18.2018396Z       flex-direction: column;
2025-04-15T08:07:18.2018608Z       gap: 12px;
2025-04-15T08:07:18.2018684Z       position: relative;
2025-04-15T08:07:18.2018757Z       font-size: 14px;
2025-04-15T08:07:18.2018817Z     }
2025-04-15T08:07:18.2018826Z 
2025-04-15T08:07:18.2018921Z     body.netdata-splash .connection-step {
2025-04-15T08:07:18.2018990Z       display: flex;
2025-04-15T08:07:18.2019065Z       flex-direction: column;
2025-04-15T08:07:18.2019133Z       gap: 12px;
2025-04-15T08:07:18.2019202Z       position: relative;
2025-04-15T08:07:18.2019278Z       min-height: 300px;
2025-04-15T08:07:18.2019336Z     }
2025-04-15T08:07:18.2019339Z 
2025-04-15T08:07:18.2019430Z     body.netdata-splash .dropdown-custom {
2025-04-15T08:07:18.2019498Z       display: flex;
2025-04-15T08:07:18.2019570Z       flex-direction: column;
2025-04-15T08:07:18.2019635Z       gap: 12px;
2025-04-15T08:07:18.2019706Z       position: relative;
2025-04-15T08:07:18.2019765Z     }
2025-04-15T08:07:18.2019768Z 
2025-04-15T08:07:18.2019856Z     body.netdata-splash .modal-footer {
2025-04-15T08:07:18.2019940Z       height: var(--footer-height);
2025-04-15T08:07:18.2020012Z       padding: 10px 0 0;
2025-04-15T08:07:18.2020078Z       display: flex;
2025-04-15T08:07:18.2020164Z       justify-content: space-between;
2025-04-15T08:07:18.2020231Z     }
2025-04-15T08:07:18.2020235Z 
2025-04-15T08:07:18.2020335Z     body.netdata-splash .modal-footer .button {
2025-04-15T08:07:18.2020404Z       height: 32px;
2025-04-15T08:07:18.2020473Z       font-size: 14px;
2025-04-15T08:07:18.2020536Z     }
2025-04-15T08:07:18.2020540Z 
2025-04-15T08:07:18.2020626Z     body.netdata-splash .list-options {
2025-04-15T08:07:18.2020690Z       margin: 0;
2025-04-15T08:07:18.2020758Z       padding: 0;
2025-04-15T08:07:18.2020830Z       list-style: none;
2025-04-15T08:07:18.2020899Z       height: 300px;
2025-04-15T08:07:18.2020967Z       overflow: auto;
2025-04-15T08:07:18.2021086Z       scrollbar-color: var(--scrollbar-thumb) #293030;
2025-04-15T08:07:18.2021165Z       scrollbar-width: thin;
2025-04-15T08:07:18.2021232Z     }
2025-04-15T08:07:18.2021235Z 
2025-04-15T08:07:18.2021330Z     body.netdata-splash .list-options li {
2025-04-15T08:07:18.2021401Z       padding: 8px 12px;
2025-04-15T08:07:18.2021489Z       background: var(--list-option-bg);
2025-04-15T08:07:18.2021703Z       border: 1px solid var(--border-neutral);
2025-04-15T08:07:18.2021778Z       margin-bottom: 12px;
2025-04-15T08:07:18.2021852Z       cursor: pointer;
2025-04-15T08:07:18.2021912Z     }
2025-04-15T08:07:18.2021916Z 
2025-04-15T08:07:18.2022022Z     body.netdata-splash .list-options li:hover {
2025-04-15T08:07:18.2022119Z       background: var(--list-option-hover-bg);
2025-04-15T08:07:18.2022184Z     }
2025-04-15T08:07:18.2022187Z 
2025-04-15T08:07:18.2022297Z     body.netdata-splash .list-options li.selected {
2025-04-15T08:07:18.2022402Z       background: var(--list-option-selected-bg);
2025-04-15T08:07:18.2022480Z       color: var(--highlight);
2025-04-15T08:07:18.2022549Z       display: flex;
2025-04-15T08:07:18.2022641Z       justify-content: space-between;
2025-04-15T08:07:18.2022702Z     }
2025-04-15T08:07:18.2022707Z 
2025-04-15T08:07:18.2022837Z     body.netdata-splash .list-options li.selected:after {
2025-04-15T08:07:18.2022906Z       content: "\2713";
2025-04-15T08:07:18.2022982Z       margin-left: 2px;
2025-04-15T08:07:18.2023046Z     }
2025-04-15T08:07:18.2023050Z 
2025-04-15T08:07:18.2023144Z     body.netdata-splash input[type="text"] {
2025-04-15T08:07:18.2023220Z       background: #2d3535;
2025-04-15T08:07:18.2023292Z       padding: 4px 8px;
2025-04-15T08:07:18.2023358Z       border: 0;
2025-04-15T08:07:18.2023430Z       font-size: 14px;
2025-04-15T08:07:18.2023500Z       min-height: 28px;
2025-04-15T08:07:18.2023574Z       color: var(--text);
2025-04-15T08:07:18.2023647Z       border-radius: 2px;
2025-04-15T08:07:18.2023709Z     }
2025-04-15T08:07:18.2023716Z 
2025-04-15T08:07:18.2023821Z     body.netdata-splash input[type="text"]:focus {
2025-04-15T08:07:18.2023902Z       outline: 1px solid var(--border);
2025-04-15T08:07:18.2024050Z     }
2025-04-15T08:07:18.2024054Z 
2025-04-15T08:07:18.2024138Z     body.netdata-splash .dropdown {
2025-04-15T08:07:18.2024213Z       position: relative;
2025-04-15T08:07:18.2024278Z       width: auto;
2025-04-15T08:07:18.2024366Z       border: 1px solid var(--border);
2025-04-15T08:07:18.2024442Z       border-radius: 4px;
2025-04-15T08:07:18.2024508Z       padding: 8px;
2025-04-15T08:07:18.2024578Z       cursor: pointer;
2025-04-15T08:07:18.2024636Z     }
2025-04-15T08:07:18.2024640Z 
2025-04-15T08:07:18.2024733Z     body.netdata-splash .dropdown-toggle {
2025-04-15T08:07:18.2024803Z       display: flex;
2025-04-15T08:07:18.2024888Z       justify-content: space-between;
2025-04-15T08:07:18.2024963Z       align-items: center;
2025-04-15T08:07:18.2025022Z     }
2025-04-15T08:07:18.2025026Z 
2025-04-15T08:07:18.2025127Z     body.netdata-splash .checkbox-container {
2025-04-15T08:07:18.2025194Z       display: none;
2025-04-15T08:07:18.2025266Z       position: absolute;
2025-04-15T08:07:18.2025339Z       top: 100%;
2025-04-15T08:07:18.2025400Z       left: 0;
2025-04-15T08:07:18.2025466Z       width: 100%;
2025-04-15T08:07:18.2025544Z       border: 1px solid var(--border);
2025-04-15T08:07:18.2025630Z       background-color: var(--main-bg);
2025-04-15T08:07:18.2025702Z       z-index: 1;
2025-04-15T08:07:18.2025773Z       max-height: 150px;
2025-04-15T08:07:18.2025847Z       overflow-y: auto;
2025-04-15T08:07:18.2025914Z       padding: 8px;
2025-04-15T08:07:18.2025972Z     }
2025-04-15T08:07:18.2025979Z 
2025-04-15T08:07:18.2026180Z     body.netdata-splash .checkbox-container label {
2025-04-15T08:07:18.2026251Z       display: block;
2025-04-15T08:07:18.2026325Z       margin-bottom: 8px;
2025-04-15T08:07:18.2026385Z     }
2025-04-15T08:07:18.2026388Z 
2025-04-15T08:07:18.2026498Z     body.netdata-splash .checkbox-container input {
2025-04-15T08:07:18.2026570Z       margin-right: 5px;
2025-04-15T08:07:18.2026629Z     }
2025-04-15T08:07:18.2026633Z 
2025-04-15T08:07:18.2026725Z     body.netdata-splash .selected-rooms {
2025-04-15T08:07:18.2026798Z       font-size: 14px;
2025-04-15T08:07:18.2026865Z       color: #333;
2025-04-15T08:07:18.2026924Z     }
2025-04-15T08:07:18.2026928Z 
2025-04-15T08:07:18.2027016Z     body.netdata-splash .text-padding {
2025-04-15T08:07:18.2027212Z       padding: 8px 8px 16px;
2025-04-15T08:07:18.2027272Z     }
2025-04-15T08:07:18.2027276Z 
2025-04-15T08:07:18.2027363Z     body.netdata-splash .nd-radio,
2025-04-15T08:07:18.2027451Z     body.netdata-splash .nd-checkbox {
2025-04-15T08:07:18.2027520Z       display: block;
2025-04-15T08:07:18.2027592Z       position: relative;
2025-04-15T08:07:18.2027664Z       padding-left: 32px;
2025-04-15T08:07:18.2027733Z       cursor: pointer;
2025-04-15T08:07:18.2027801Z       font-size: 16px;
2025-04-15T08:07:18.2027889Z       -webkit-user-select: none;
2025-04-15T08:07:18.2027967Z       -moz-user-select: none;
2025-04-15T08:07:18.2028041Z       user-select: none;
2025-04-15T08:07:18.2028110Z       line-height: 20px;
2025-04-15T08:07:18.2028174Z     }
2025-04-15T08:07:18.2028178Z 
2025-04-15T08:07:18.2028273Z     body.netdata-splash .nd-checkbox input {
2025-04-15T08:07:18.2028343Z       position: absolute;
2025-04-15T08:07:18.2028411Z       opacity: 0;
2025-04-15T08:07:18.2028483Z       cursor: pointer;
2025-04-15T08:07:18.2028549Z       height: 0;
2025-04-15T08:07:18.2028615Z       width: 0;
2025-04-15T08:07:18.2028674Z     }
2025-04-15T08:07:18.2028677Z 
2025-04-15T08:07:18.2028784Z     body.netdata-splash .nd-checkbox .checkmark {
2025-04-15T08:07:18.2028859Z       position: absolute;
2025-04-15T08:07:18.2028926Z       top: 0;
2025-04-15T08:07:18.2028989Z       left: 0;
2025-04-15T08:07:18.2029055Z       height: 16px;
2025-04-15T08:07:18.2029125Z       width: 16px;
2025-04-15T08:07:18.2029211Z       background-color: var(--main-bg);
2025-04-15T08:07:18.2029294Z       border: 1px solid var(--primary);
2025-04-15T08:07:18.2029368Z       border-radius: 2px;
2025-04-15T08:07:18.2029429Z     }
2025-04-15T08:07:18.2029433Z 
2025-04-15T08:07:18.2029691Z     body.netdata-splash .nd-checkbox:hover input~.checkmark {
2025-04-15T08:07:18.2029775Z       background-color: var(--border);
2025-04-15T08:07:18.2029839Z     }
2025-04-15T08:07:18.2029842Z 
2025-04-15T08:07:18.2029985Z     body.netdata-splash .nd-checkbox :hover input~.checkmark {
2025-04-15T08:07:18.2030068Z       background-color: #ccc;
2025-04-15T08:07:18.2030127Z     }
2025-04-15T08:07:18.2030130Z 
2025-04-15T08:07:18.2030270Z     body.netdata-splash .nd-checkbox input:checked~.checkmark {
2025-04-15T08:07:18.2030357Z       background-color: var(--boder);
2025-04-15T08:07:18.2030418Z     }
2025-04-15T08:07:18.2030421Z 
2025-04-15T08:07:18.2030542Z     body.netdata-splash .nd-checkbox .checkmark:after {
2025-04-15T08:07:18.2030610Z       content: "";
2025-04-15T08:07:18.2030682Z       position: absolute;
2025-04-15T08:07:18.2030752Z       display: none;
2025-04-15T08:07:18.2030813Z     }
2025-04-15T08:07:18.2030816Z 
2025-04-15T08:07:18.2030978Z     body.netdata-splash .nd-checkbox input:checked~.checkmark:after {
2025-04-15T08:07:18.2031053Z       display: block;
2025-04-15T08:07:18.2031115Z     }
2025-04-15T08:07:18.2031119Z 
2025-04-15T08:07:18.2031235Z     body.netdata-splash .nd-checkbox .checkmark:after {
2025-04-15T08:07:18.2031307Z       inset: 0 0 2px 0;
2025-04-15T08:07:18.2031375Z       margin: auto;
2025-04-15T08:07:18.2031444Z       width: 2px;
2025-04-15T08:07:18.2031512Z       height: 8px;
2025-04-15T08:07:18.2031593Z       border: solid var(--highlight);
2025-04-15T08:07:18.2031672Z       border-width: 0 2px 2px 0;
2025-04-15T08:07:18.2031752Z       transform: rotate(45deg);
2025-04-15T08:07:18.2031811Z     }
2025-04-15T08:07:18.2031814Z 
2025-04-15T08:07:18.2031887Z     /* Retention table */
2025-04-15T08:07:18.2031957Z     #tiers-container {
2025-04-15T08:07:18.2032024Z       height: auto;
2025-04-15T08:07:18.2032084Z     }
2025-04-15T08:07:18.2032087Z 
2025-04-15T08:07:18.2032153Z     #tiers-table {
2025-04-15T08:07:18.2032220Z       width: 100%;
2025-04-15T08:07:18.2032302Z       border-collapse: collapse;
2025-04-15T08:07:18.2032363Z     }
2025-04-15T08:07:18.2032367Z 
2025-04-15T08:07:18.2032461Z     #tiers-table thead tr:nth-of-type(1) th {
2025-04-15T08:07:18.2032537Z       padding-top: 16px;
2025-04-15T08:07:18.2032700Z     }
2025-04-15T08:07:18.2032704Z 
2025-04-15T08:07:18.2032796Z     #tiers-table thead tr:nth-of-type(2) th {
2025-04-15T08:07:18.2032879Z       padding-bottom: 16px;
2025-04-15T08:07:18.2032937Z     }
2025-04-15T08:07:18.2032940Z 
2025-04-15T08:07:18.2033031Z     #tiers-table tbody tr:nth-of-type(1) td {
2025-04-15T08:07:18.2033118Z       border-top: 1px solid var(--border);
2025-04-15T08:07:18.2033189Z       padding-top: 16px;
2025-04-15T08:07:18.2033253Z     }
2025-04-15T08:07:18.2033256Z 
2025-04-15T08:07:18.2033344Z     #tiers-table tbody tr:last-of-type td {
2025-04-15T08:07:18.2033423Z       padding-bottom: 24px;
2025-04-15T08:07:18.2033484Z     }
2025-04-15T08:07:18.2033488Z 
2025-04-15T08:07:18.2033556Z     #tiers-table th {
2025-04-15T08:07:18.2033640Z       font-size: var(--font-small);
2025-04-15T08:07:18.2033711Z       padding: 8px 4px;
2025-04-15T08:07:18.2033772Z     }
2025-04-15T08:07:18.2033775Z 
2025-04-15T08:07:18.2033841Z     #tiers-table td {
2025-04-15T08:07:18.2033927Z       font-size: var(--font-medium);
2025-04-15T08:07:18.2033996Z       text-align: center;
2025-04-15T08:07:18.2034065Z       padding: 12px 4px;
2025-04-15T08:07:18.2034126Z     }
2025-04-15T08:07:18.2034130Z 
2025-04-15T08:07:18.2034211Z     #tiers-table th:first-of-type,
2025-04-15T08:07:18.2034295Z     #tiers-table td:first-of-type {
2025-04-15T08:07:18.2034368Z       padding-left: 12px;
2025-04-15T08:07:18.2034432Z     }
2025-04-15T08:07:18.2034494Z   
2025-04-15T08:07:18.2034575Z     #tiers-table th:last-of-type,  
2025-04-15T08:07:18.2034656Z     #tiers-table td:last-of-type {
2025-04-15T08:07:18.2034736Z       padding-right: 12px;
2025-04-15T08:07:18.2034798Z     }
2025-04-15T08:07:18.2034802Z 
2025-04-15T08:07:18.2034881Z     #tiers-table .section-start {
2025-04-15T08:07:18.2035061Z       border-left: 1px solid var(--border);
2025-04-15T08:07:18.2035125Z     }
2025-04-15T08:07:18.2035129Z 
2025-04-15T08:07:18.2035209Z     .progress-indicator {
2025-04-15T08:07:18.2035279Z       gap: 8px;
2025-04-15T08:07:18.2035354Z       padding: 0 8px;
2025-04-15T08:07:18.2035416Z     }
2025-04-15T08:07:18.2035420Z 
2025-04-15T08:07:18.2035502Z     .progress-bar-container {
2025-04-15T08:07:18.2035575Z       position: relative;
2025-04-15T08:07:18.2035645Z       width: 100%;
2025-04-15T08:07:18.2035736Z       height: var(--progress-bar-height);
2025-04-15T08:07:18.2035838Z       background-color: var(--border-neutral);
2025-04-15T08:07:18.2035909Z       overflow: hidden;
2025-04-15T08:07:18.2035982Z       border-radius: 2px;
2025-04-15T08:07:18.2036046Z     }
2025-04-15T08:07:18.2036050Z 
2025-04-15T08:07:18.2036216Z     .progress-bar {
2025-04-15T08:07:18.2036291Z       position: absolute;
2025-04-15T08:07:18.2036355Z       top: 0;
2025-04-15T08:07:18.2036423Z       left: 0;
2025-04-15T08:07:18.2036518Z       height: var(--progress-bar-height);
2025-04-15T08:07:18.2036603Z       background-color: var(--primary);
2025-04-15T08:07:18.2036665Z     }
2025-04-15T08:07:18.2036669Z 
2025-04-15T08:07:18.2036738Z     #tooltip {
2025-04-15T08:07:18.2036810Z       max-width: 300px;
2025-04-15T08:07:18.2036894Z       background-color: var(--accent);
2025-04-15T08:07:18.2036971Z       color: var(--text-dark);
2025-04-15T08:07:18.2037045Z       border-radius: 4px;
2025-04-15T08:07:18.2037116Z       padding: 8px 16px;
2025-04-15T08:07:18.2037186Z       position: fixed;
2025-04-15T08:07:18.2037264Z       font-size: var(--font-small);
2025-04-15T08:07:18.2037335Z       line-height: 1.5;
2025-04-15T08:07:18.2037405Z       z-index: 9999;
2025-04-15T08:07:18.2037474Z       display: none;
2025-04-15T08:07:18.2037571Z     }</style><script>const toggleTab = tab => {
2025-04-15T08:07:18.2037710Z       const factors = document.querySelectorAll(".data-tab");
2025-04-15T08:07:18.2037833Z       const tabs = document.querySelectorAll(".btn-tab");
2025-04-15T08:07:18.2037842Z 
2025-04-15T08:07:18.2037930Z       factors.forEach(function (factor) {
2025-04-15T08:07:18.2038066Z         let dataTab = parseInt(factor.getAttribute("data-tab"));
2025-04-15T08:07:18.2038278Z         if (dataTab == tab || dataTab === 0) {
2025-04-15T08:07:18.2038365Z           factor.classList.add("active");
2025-04-15T08:07:18.2038433Z         } else {
2025-04-15T08:07:18.2038523Z           factor.classList.remove("active");
2025-04-15T08:07:18.2038588Z         }
2025-04-15T08:07:18.2038647Z       });
2025-04-15T08:07:18.2038651Z 
2025-04-15T08:07:18.2038735Z       // Toggle active class on tab buttons
2025-04-15T08:07:18.2038818Z       tabs.forEach(tabButton => {
2025-04-15T08:07:18.2038904Z         if (tabButton.dataset?.tab == tab) {
2025-04-15T08:07:18.2038995Z           tabButton.classList.add("active");
2025-04-15T08:07:18.2039057Z         } else {
2025-04-15T08:07:18.2039153Z           tabButton.classList.remove("active");
2025-04-15T08:07:18.2039222Z         }
2025-04-15T08:07:18.2039282Z       });
2025-04-15T08:07:18.2039344Z     }
2025-04-15T08:07:18.2039348Z 
2025-04-15T08:07:18.2039423Z     const initGrid = () => {
2025-04-15T08:07:18.2039561Z       const canvas1 = document.getElementById("monitorGrid");
2025-04-15T08:07:18.2039660Z       const context1 = canvas1.getContext("2d");
2025-04-15T08:07:18.2039771Z       const frame = document.querySelector(".frame");
2025-04-15T08:07:18.2039846Z       const cellSize = 4;
2025-04-15T08:07:18.2039916Z       const gapSize = 2;
2025-04-15T08:07:18.2040053Z       const colors = ["#001107", "#003114", "#014420", "#047031", "#049846"];
2025-04-15T08:07:18.2040058Z 
2025-04-15T08:07:18.2040123Z       let grid = [];
2025-04-15T08:07:18.2040127Z 
2025-04-15T08:07:18.2040210Z       const getRandomColor = () => {
2025-04-15T08:07:18.2040343Z         return colors[Math.floor(Math.random() * colors.length)];
2025-04-15T08:07:18.2040404Z       }
2025-04-15T08:07:18.2040408Z 
2025-04-15T08:07:18.2040639Z       const resizeCanvas = (canvas, context) => {
2025-04-15T08:07:18.2040728Z         canvas.width = frame.clientWidth;
2025-04-15T08:07:18.2040821Z         canvas.height = frame.clientHeight;
2025-04-15T08:07:18.2040831Z 
2025-04-15T08:07:18.2040972Z         const cols = Math.floor(canvas.width / (cellSize + gapSize));
2025-04-15T08:07:18.2041116Z         const rows = Math.floor(canvas.height / (cellSize + gapSize));
2025-04-15T08:07:18.2041120Z 
2025-04-15T08:07:18.2041212Z         grid = Array.from({ length: rows }, () =>
2025-04-15T08:07:18.2041315Z           Array.from({ length: cols }, getRandomColor)
2025-04-15T08:07:18.2041381Z         );
2025-04-15T08:07:18.2041385Z 
2025-04-15T08:07:18.2041464Z         drawGrid(context, canvas);
2025-04-15T08:07:18.2041526Z       }
2025-04-15T08:07:18.2041530Z 
2025-04-15T08:07:18.2041618Z       const drawGrid = (context, canvas) => {
2025-04-15T08:07:18.2041744Z         context.clearRect(0, 0, canvas.width, canvas.height);
2025-04-15T08:07:18.2041878Z         const cols = Math.floor(canvas.width / (cellSize + gapSize));
2025-04-15T08:07:18.2042019Z         const rows = Math.floor(canvas.height / (cellSize + gapSize));
2025-04-15T08:07:18.2042027Z 
2025-04-15T08:07:18.2042111Z         for (let row = 0; row < rows; row++) {
2025-04-15T08:07:18.2042200Z           for (let col = 0; col < cols; col++) {
2025-04-15T08:07:18.2042286Z             if (grid[row] && grid[row][col]) {
2025-04-15T08:07:18.2042378Z               context.fillStyle = grid[row][col];
2025-04-15T08:07:18.2042457Z               context.fillRect(
2025-04-15T08:07:18.2042540Z                 col * (cellSize + gapSize),
2025-04-15T08:07:18.2042617Z                 row * (cellSize + gapSize),
2025-04-15T08:07:18.2042686Z                 cellSize,
2025-04-15T08:07:18.2042750Z                 cellSize
2025-04-15T08:07:18.2042812Z               );
2025-04-15T08:07:18.2042872Z             }
2025-04-15T08:07:18.2042932Z           }
2025-04-15T08:07:18.2042995Z         }
2025-04-15T08:07:18.2043054Z       }
2025-04-15T08:07:18.2043062Z 
2025-04-15T08:07:18.2043148Z       resizeCanvas(canvas1, context1);
2025-04-15T08:07:18.2043153Z 
2025-04-15T08:07:18.2043343Z       window.addEventListener("resize", () => resizeCanvas(canvas1, context1));
2025-04-15T08:07:18.2093145Z     }</script></head><body class="loading netdata-splash"><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-N6CBMJD" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="app" class="container grid"><div class="frame frame-left col-span-7 grid light-beam relative"><div class="head-summary absolute index-10"><div class="server"><div class="no-title" id="server"></div><div class="no-title" id="package"></div></div><div class="availability h-auto module"><div class="title">Cloud status</div><div class="no-key" id="cloud_status"></div></div></div><div class="col-span-12 row-span-11"><div id="sphereContainer"><div id="loadingMessage" class="loading-message">Loading...</div><div class="hide-title absolute-center sphere-stats-container"><div class="metrics-container"><div class="collected-metrics" id="collectedMetrics"></div><div class="node-info-container"><div class="title">NODES</div><div class="node-info" id="nodes_streaming"></div></div></div><div class="system-container data-tab data-tab-container" data-tab="2"><div class="system grid-columns-10 md-grid-columns-12"><div class="flex-col col-span-5 md-col-span-6"><div class="section-title">Kernel</div><div class="grid-columns-10"><div class="h-auto module col-span-5" id="kernel"></div><div class="h-auto module col-span-5" id="kernelVersion"></div></div></div><div class="flex-col col-span-5 md-col-span-6"><div class="section-title">OS</div><div class="grid-columns-10"><div id="os" class="h-auto module col-span-5"></div><div class="h-auto module col-span-5" id="id"></div></div></div><div class="hardware module-section col-span-10 md-col-span-12"><div class="section-title">Hardware</div><div class="grid-columns-10 md-grid-columns-12"><div class="module h-auto col-span-2 md-col-span-4" id="cpuCores"></div><div class="module h-auto col-span-2 md-col-span-4" id="cpuFrequency"></div><div class="module h-auto col-span-2 md-col-span-4" id="ram"></div><div class="module h-auto col-span-2 md-col-span-4" id="disk"></div><div class="module h-auto col-span-2 md-col-span-4" id="cpuArchitecture"></div><div class="module h-auto col-span-2 md-col-span-4" id="virtualization"></div></div></div></div></div><div class="data-tab data-tab-container" data-tab="1"><div class="db-metrics-container"><div id="tiers-container" class="db-metrics-blocks module"><table id="tiers-table"><thead><tr><th rowspan="2"><span data-tooltip="A database layer that stores metrics at a specific resolution.">Tier</span></th><th rowspan="2">Resolution</th><th colspan="2" class="section-start">Stored</th><th colspan="3" class="section-start">Retention</th><th colspan="2" class="section-start">Disk</th></tr><tr><th class="section-start">Metrics</th><th><span data-tooltip="The total number of measurements stored in the database across all metrics. Each sample represents a recorded value for a specific metric at a given time.">Samples</span></th><th class="section-start">Current</th><th><span data-tooltip="The maximum time data can be kept, based on the configured time and disk space limits.">Effective</span></th><th>Configured</th><th class="section-start">Used</th><th>Configured</th></tr></thead><tbody><tr id="tiers-table-data-placeholder"></tr></tbody></table></div></div></div><div class="data-tab data-tab-container" data-tab="3"><div class="modules-container grid"><div class="module col-span-4"><div class="module-header"><div class="section-image"><svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M16.5299 4.47019C16.2399 4.18019 15.7599 4.18019 15.4699 4.47019L13.5299 6.41019L11.5899 4.47019L13.5299 2.53019C13.8199 2.24019 13.8199 1.76019 13.5299 1.47019C13.2399 1.18019 12.7599 1.18019 12.4699 1.47019L10.5299 3.41019L8.99994 1.88019L5.74994 5.13019C4.93994 5.93019 4.49994 7.01019 4.49994 8.15019V8.38019L3.72994 9.15019C2.53994 10.3302 2.45994 12.2002 3.43994 13.5002L1.96994 14.9702C1.67994 15.2602 1.67994 15.7402 1.96994 16.0302C2.11994 16.1802 2.30994 16.2502 2.49994 16.2502C2.68994 16.2502 2.87994 16.1802 3.02994 16.0302L4.49994 14.5602C5.06994 15.0002 5.76994 15.2402 6.49994 15.2402C7.38994 15.2402 8.21994 14.8902 8.84994 14.2702L9.61994 13.5002H9.84994C10.9899 13.5002 12.0599 13.0602 12.8699 12.2502L16.1199 9.00019L14.5899 7.47019L16.5299 5.53019C16.8199 5.24019 16.8199 4.76019 16.5299 4.47019ZM11.8099 11.1902C11.2899 11.7102 10.5899 12.0002 9.84994 12.0002H8.99994L7.78994 13.2102C7.42994 13.5702 6.96994 13.7402 6.49994 13.7402C6.02994 13.7402 5.56994 13.5602 5.20994 13.2102L4.78994 12.7902C4.07994 12.0802 4.07994 10.9202 4.78994 10.2102L5.46994 9.53019L6.40994 10.4702C6.99994 11.0602 7.94994 11.0602 8.52994 10.4702L6.01994 7.96019C6.06994 7.30019 6.33994 6.67019 6.80994 6.19019L8.99994 4.00019L13.9999 9.00019L11.8099 11.1902Z" fill="var(--text)"/></svg></div><span class="section-title">Plugins</span></div><div class="module-content" id="plugins"></div></div><div class="module col-span-4"><div class="module-header"><div class="section-image"><svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M7 18C7.55 18 8 17.55 8 17C8 16.45 7.55 16 7 16C6.45 16 6 16.45 6 17C6 17.55 6.45 18 7 18ZM14 17.79C14.28 17.51 14.28 17.07 14 16.79C13.72 16.51 13.28 16.51 13 16.79C12.72 17.07 12.72 17.51 13 17.79C13.28 18.07 13.72 18.07 14 17.79ZM17 8V4H12V2H2V22H22V8H17ZM10 20H4V4H10V20ZM15 20H12V6H15V20ZM20 20H17V10H20V20ZM19 17.79C19.28 17.51 19.28 17.07 19 16.79C18.72 16.51 18.28 16.51 18 16.79C17.72 17.07 17.72 17.51 18 17.79C18.28 18.07 18.72 18.07 19 17.79Z" fill="var(--text)"/></svg></div><span class="section-title">Libraries</span></div><div class="module-content" id="libs"></div></div><div class="module col-span-4"><div class="module-header"><div class="section-image"><svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M4 16.0002H5V14.5002H4V16.0002ZM2 16.0002H3V14.5002H2V16.0002ZM15.28 6.97019L10.25 1.94019L5.22 6.97019C4.927 7.26319 4.927 7.73819 5.22 8.03119C5.513 8.32419 5.988 8.32419 6.281 8.03119L9.5 4.81119V11.8392C9.5 13.3062 8.306 14.5002 6.838 14.5002H6V16.0002H6.838C9.136 16.0002 11 14.1372 11 11.8382V4.81119L14.22 8.03119C14.366 8.17719 14.558 8.25119 14.75 8.25119C14.942 8.25119 15.134 8.17819 15.28 8.03119C15.573 7.73719 15.573 7.26319 15.28 6.97019Z" fill="var(--text)"/></svg></div><span class="section-title">Exporters</span></div><div class="module-content" id="exporters"></div></div></div></div><div class="data-tab data-tab-container" data-tab="4"><div class="module data-tab-table" id="directories"></div></div></div></div></div><div class="relative row-span-1 col-span-12 full-h"><div class="license-link"><a href="https://app.netdata.cloud/LICENSE.txt" target="_blank">Netdata UI License</a></div><div class="tabs full-h"><button type="button" name="button" class="btn-tab tab active" data-tab="1"><div class="tab-icon"><svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M9 10C14.153 10 16.5 7.927 16.5 6C16.5 4.073 14.153 2 9 2C3.847 2 1.5 4.073 1.5 6C1.5 7.927 3.847 10 9 10ZM9 3.5C12.313 3.5 15 4.619 15 6C15 7.381 12.313 8.5 9 8.5C5.687 8.5 3 7.381 3 6C3 4.619 5.687 3.5 9 3.5ZM14.566 12.931C13.68 13.85 11.523 14.5 9 14.5C6.477 14.5 4.32 13.85 3.434 12.931C2.639 12.547 2.01 12.081 1.545 11.563C1.518 11.708 1.5 11.854 1.5 12C1.5 13.927 3.847 16 9 16C14.153 16 16.5 13.927 16.5 12C16.5 11.854 16.482 11.708 16.455 11.562C15.99 12.081 15.361 12.546 14.566 12.931ZM14.566 9.931C13.68 10.85 11.523 11.5 9 11.5C6.477 11.5 4.32 10.85 3.434 9.931C2.639 9.547 2.01 9.081 1.545 8.563C1.518 8.708 1.5 8.854 1.5 9C1.5 10.927 3.847 13 9 13C14.153 13 16.5 10.927 16.5 9C16.5 8.854 16.482 8.708 16.455 8.562C15.99 9.081 15.361 9.546 14.566 9.931Z"/></svg></div>Database</button> <button type="button" name="button" class="btn-tab tab" data-tab="2"><div class="tab-icon"><svg width="60" height="60" viewBox="0 0 60 60" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M40.3125 18.75H19.6875C19.1697 18.75 18.75 19.1697 18.75 19.6875V40.3125C18.75 40.8303 19.1697 41.25 19.6875 41.25H40.3125C40.8303 41.25 41.25 40.8303 41.25 40.3125V19.6875C41.25 19.1697 40.8303 18.75 40.3125 18.75Z"/><path d="M54.375 22.5C54.8723 22.5 55.3492 22.3025 55.7008 21.9508C56.0525 21.5992 56.25 21.1223 56.25 20.625C56.25 20.1277 56.0525 19.6508 55.7008 19.2992C55.3492 18.9475 54.8723 18.75 54.375 18.75H52.5V15C52.4978 13.0115 51.707 11.1051 50.3009 9.6991C48.8949 8.29305 46.9885 7.50217 45 7.5H41.25V5.625C41.25 5.12772 41.0525 4.65081 40.7008 4.29917C40.3492 3.94754 39.8723 3.75 39.375 3.75C38.8777 3.75 38.4008 3.94754 38.0492 4.29917C37.6975 4.65081 37.5 5.12772 37.5 5.625V7.5H31.875V5.625C31.875 5.12772 31.6775 4.65081 31.3258 4.29917C30.9742 3.94754 30.4973 3.75 30 3.75C29.5027 3.75 29.0258 3.94754 28.6742 4.29917C28.3225 4.65081 28.125 5.12772 28.125 5.625V7.5H22.5V5.625C22.5 5.12772 22.3025 4.65081 21.9508 4.29917C21.5992 3.94754 21.1223 3.75 20.625 3.75C20.1277 3.75 19.6508 3.94754 19.2992 4.29917C18.9475 4.65081 18.75 5.12772 18.75 5.625V7.5H15C13.0115 7.50217 11.1051 8.29305 9.6991 9.6991C8.29305 11.1051 7.50217 13.0115 7.5 15V18.75H5.625C5.12772 18.75 4.65081 18.9475 4.29917 19.2992C3.94754 19.6508 3.75 20.1277 3.75 20.625C3.75 21.1223 3.94754 21.5992 4.29917 21.9508C4.65081 22.3025 5.12772 22.5 5.625 22.5H7.5V28.125H5.625C5.12772 28.125 4.65081 28.3225 4.29917 28.6742C3.94754 29.0258 3.75 29.5027 3.75 30C3.75 30.4973 3.94754 30.9742 4.29917 31.3258C4.65081 31.6775 5.12772 31.875 5.625 31.875H7.5V37.5H5.625C5.12772 37.5 4.65081 37.6975 4.29917 38.0492C3.94754 38.4008 3.75 38.8777 3.75 39.375C3.75 39.8723 3.94754 40.3492 4.29917 40.7008C4.65081 41.0525 5.12772 41.25 5.625 41.25H7.5V45C7.50217 46.9885 8.29305 48.8949 9.6991 50.3009C11.1051 51.707 13.0115 52.4978 15 52.5H18.75V54.375C18.75 54.8723 18.9475 55.3492 19.2992 55.7008C19.6508 56.0525 20.1277 56.25 20.625 56.25C21.1223 56.25 21.5992 56.0525 21.9508 55.7008C22.3025 55.3492 22.5 54.8723 22.5 54.375V52.5H28.125V54.375C28.125 54.8723 28.3225 55.3492 28.6742 55.7008C29.0258 56.0525 29.5027 56.25 30 56.25C30.4973 56.25 30.9742 56.0525 31.3258 55.7008C31.6775 55.3492 31.875 54.8723 31.875 54.375V52.5H37.5V54.375C37.5 54.8723 37.6975 55.3492 38.0492 55.7008C38.4008 56.0525 38.8777 56.25 39.375 56.25C39.8723 56.25 40.3492 56.0525 40.7008 55.7008C41.0525 55.3492 41.25 54.8723 41.25 54.375V52.5H45C46.9885 52.4978 48.8949 51.707 50.3009 50.3009C51.707 48.8949 52.4978 46.9885 52.5 45V41.25H54.375C54.8723 41.25 55.3492 41.0525 55.7008 40.7008C56.0525 40.3492 56.25 39.8723 56.25 39.375C56.25 38.8777 56.0525 38.4008 55.7008 38.0492C55.3492 37.6975 54.8723 37.5 54.375 37.5H52.5V31.875H54.375C54.8723 31.875 55.3492 31.6775 55.7008 31.3258C56.0525 30.9742 56.25 30.4973 56.25 30C56.25 29.5027 56.0525 29.0258 55.7008 28.6742C55.3492 28.3225 54.8723 28.125 54.375 28.125H52.5V22.5H54.375ZM45 41.25C45 42.2446 44.6049 43.1984 43.9016 43.9016C43.1984 44.6049 42.2446 45 41.25 45H18.75C17.7554 45 16.8016 44.6049 16.0984 43.9016C15.3951 43.1984 15 42.2446 15 41.25V18.75C15 17.7554 15.3951 16.8016 16.0984 16.0984C16.8016 15.3951 17.7554 15 18.75 15H41.25C42.2446 15 43.1984 15.3951 43.9016 16.0984C44.6049 16.8016 45 17.7554 45 18.75V41.25Z"/></svg></div>System</button> <button type="button" name="button" class="btn-tab tab" data-tab="3"><div class="tab-icon"><svg width="60" height="60" viewBox="0 0 60 60" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M59.7937 16.4062C59.7164 16.2322 59.6084 16.0734 59.475 15.9375C59.3495 15.8165 59.2112 15.7097 59.0625 15.6187L30.9 0.224957C30.615 0.0603916 30.2916 -0.0262451 29.9625 -0.0262451C29.6334 -0.0262451 29.31 0.0603916 29.025 0.224957L1.06875 15.525C1.06875 15.525 1.06875 15.6187 0.91875 15.6375C0.762779 15.7334 0.618116 15.8466 0.4875 15.975C0.433211 16.047 0.383128 16.1221 0.3375 16.2C0.244093 16.3333 0.168457 16.4783 0.1125 16.6312C0.1125 16.6312 0.1125 16.6312 0.1125 16.7437C0.103788 16.8435 0.103788 16.9439 0.1125 17.0437C0.1125 17.0437 0.1125 17.1562 0.1125 17.2125V42.7687C0.0613239 42.8827 0.0235706 43.0023 0 43.125L0 43.3875C0.142582 43.8604 0.466002 44.2579 0.9 44.4937L29.025 59.8312H29.1375H29.2875C29.5116 59.9337 29.7537 59.9911 30 60C30.2245 59.9926 30.4462 59.9482 30.6563 59.8687H30.7875H30.9L59.025 44.5312C59.3209 44.3693 59.5676 44.1306 59.7392 43.8402C59.9108 43.5498 60.0009 43.2185 60 42.8812V17.2125C59.9937 16.9939 59.9493 16.7782 59.8688 16.575C59.8516 16.5155 59.8264 16.4588 59.7937 16.4062ZM28.125 54.975L3.75 41.6625V20.3812L28.125 33.75V54.975ZM30 30.4125L5.79375 17.2875L30 4.01246L54.2062 17.1375L30 30.4125ZM56.25 41.6625L31.875 54.975V33.75L56.25 20.4562V41.6625Z"/></svg></div>Modules</button> <button type="button" name="button" class="btn-tab tab" data-tab="4"><div class="tab-icon"><svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M16 10.5V5.5H10V7.25H5.75V6.5H8V1.5H2V6.5H4.25V14.75H10V16.5H16V11.5H10V13.25H5.75V8.75H10V10.5H16ZM11.5 7H14.5V9H11.5V7ZM11.5 13H14.5V15H11.5V13ZM3.5 5V3H6.5V5H3.5Z"/></svg></div>Directories</button></div></div></div><div class="frame relative col-span-5 frame-right"><canvas id="monitorGrid"></canvas><div id="splashMessageContainer" class="splash-message"><svg width="133" height="105" viewBox="0 0 133 105" fill="none" xmlns="http://www.w3.org/2000/svg" class="logo"><path fill-rule="evenodd" clip-rule="evenodd" d="M81.697 105H55.0693L0.5 0.5H77.9598C108.079 0.554913 132.484 24.7711 132.5 54.6451C132.452 82.485 109.73 105 81.697 105Z" fill="#FCFFFD"/></svg><h1 class="text-center">Welcome to Netdata</h1><p id="msgSignIn">Please sign-in to continue</p><a id="btnSignIn" href="javascript:loadDashboard(true);" class="button button-primary">Sign-in</a><div class="tagline skip-link"><a class="opt-out-link" href="javascript:loadDashboard();">Skip and use the dashboard anonymously.</a> <span class="no-anonymous-access"></span></div></div><div id="claimingContentsContainer" class="claim-message" style="display:none;"><div class="welcome"><svg width="133" height="105" viewBox="0 0 133 105" fill="none" xmlns="http://www.w3.org/2000/svg" class="logo"><path fill-rule="evenodd" clip-rule="evenodd" d="M81.697 105H55.0693L0.5 0.5H77.9598C108.079 0.554913 132.484 24.7711 132.5 54.6451C132.452 82.485 109.73 105 81.697 105Z" fill="#FCFFFD"/></svg><h1 class="text-center">Welcome to Netdata</h1><span>Please connect your agent to continue.</span></div><div class="connection-modal"><div id="connectionStep-1"><div class="connection-step"><span class="text-small">Please select the space you want this agent to join:</span> <span class="loader">Loading spaces...</span><ul id="spacesList" class="list-options"></ul></div></div><div id="connectionStep-2" style="display:none;"><div class="connection-step"><div class="dropdown-custom" data-target="claimMessage"><div class="dropdown-custom-input flex space-between align-center"><span class="text-small">Select room(s)</span><button class="text-small button button-ghost clear-button">Clear</button></div><div id="roomsSelector" class="dropdown"><div class="dropdown-toggle"><span id="selectedItems" class="selected-items">Select room</span> <span>▼</span></div><div id="roomsSelectorOptionsContainer" class="checkbox-container"></div></div></div><div id="claimMessage" class="selected-message"></div><div class="">Please run the command below in your terminal:</div><code id="claimCommand"></code><div class="">and paste the generated private key in the field below:</div><input id="claimingPrivateKey" name="claimingPrivateKey" value="" placeholder="Private Key"/></div><div id="claimTip" class="text-padding text-small">Tip: If the command doesn’t work out-of-the-box, locate the {keyFilename} file, open it in your favourite text editor, and copy it to your clipboard.</div><div id="claimErrorMessage" class="text-padding error" style="display:none;"></div></div><div class="modal-footer flex-col"><div class="flex space-between"><button id="btnConnectionStepPrev" class="button button-ghost">&#8592; Back</button> <button id="btnConnectionStepNext" class="button button-primary">Next</button> <button id="btnClaim" class="button button-primary">Claim</button></div><div class="skip-link"><a class="signout-link" href="javascript:signout()">Sign out to switch user</a></div></div></div></div></div><div id="tooltip"></div></div></body><script>const initPrimaryButtonHover = () => {
2025-04-15T08:07:18.2094072Z     const button = document.getElementById("btnSignIn");
2025-04-15T08:07:18.2094208Z     const canvas = document.getElementById("monitorGrid");
2025-04-15T08:07:18.2094214Z 
2025-04-15T08:07:18.2094284Z     if (button) {
2025-04-15T08:07:18.2094394Z       button.addEventListener("mouseover", () => {
2025-04-15T08:07:18.2094489Z         canvas.classList.add("hovered");
2025-04-15T08:07:18.2094550Z       });
2025-04-15T08:07:18.2094614Z     }
2025-04-15T08:07:18.2094618Z 
2025-04-15T08:07:18.2094682Z     if (canvas) {
2025-04-15T08:07:18.2094784Z       button.addEventListener("mouseout", () => {
2025-04-15T08:07:18.2094886Z         canvas.classList.remove("hovered");
2025-04-15T08:07:18.2094947Z       });
2025-04-15T08:07:18.2095008Z     }
2025-04-15T08:07:18.2095068Z   }
2025-04-15T08:07:18.2095072Z 
2025-04-15T08:07:18.2095152Z   const initTabs = () => {
2025-04-15T08:07:18.2095284Z     const btnTabs = document.querySelectorAll(".btn-tab");
2025-04-15T08:07:18.2095362Z     btnTabs.forEach(btn => {
2025-04-15T08:07:18.2095457Z       btn.addEventListener("click", e => {
2025-04-15T08:07:18.2095554Z         const tab = e.currentTarget?.dataset?.tab;
2025-04-15T08:07:18.2095622Z         if (tab) {
2025-04-15T08:07:18.2095693Z           toggleTab(tab);
2025-04-15T08:07:18.2095752Z         }
2025-04-15T08:07:18.2095816Z       })
2025-04-15T08:07:18.2095876Z     })
2025-04-15T08:07:18.2095938Z   }
2025-04-15T08:07:18.2095942Z 
2025-04-15T08:07:18.2096024Z   // =============================================== //
2025-04-15T08:07:18.2096028Z 
2025-04-15T08:07:18.2096193Z   const status = {
2025-04-15T08:07:18.2096272Z     TIMEOUT: 'timeout',
2025-04-15T08:07:18.2096463Z     SUCCESS: 'success',
2025-04-15T08:07:18.2096540Z     SKIPPED: 'skipped'
2025-04-15T08:07:18.2096603Z   };
2025-04-15T08:07:18.2096607Z 
2025-04-15T08:07:18.2096690Z   const getSessionId = () => {
2025-04-15T08:07:18.2096785Z     const key = "telemetrySessionId"
2025-04-15T08:07:18.2096878Z     if (!sessionStorage.getItem(key)) {
2025-04-15T08:07:18.2097220Z       sessionStorage.setItem(key, self.crypto && self.crypto.randomUUID ? self.crypto.randomUUID() : new Date().getTime());
2025-04-15T08:07:18.2097282Z     }
2025-04-15T08:07:18.2097386Z     return sessionStorage.getItem(key) || "";
2025-04-15T08:07:18.2097447Z   }
2025-04-15T08:07:18.2097451Z 
2025-04-15T08:07:18.2097571Z   const defaultErrorMessage = "Something went wrong."
2025-04-15T08:07:18.2097828Z   const agentUri = window.location.origin + window.location.pathname.replace(pathsRegex, "");
2025-04-15T08:07:18.2097928Z   const telemetrySessionId = getSessionId();
2025-04-15T08:07:18.2098098Z   const ensureOneSlash = urlStr => urlStr.replace(/([^:]\/)\/+/g, "$1");
2025-04-15T08:07:18.2098107Z 
2025-04-15T08:07:18.2098218Z   // Utils =============================================================================== //
2025-04-15T08:07:18.2098226Z 
2025-04-15T08:07:18.2098316Z   const createElem = (tag, attrs) => {
2025-04-15T08:07:18.2098390Z     if (!tag) return null
2025-04-15T08:07:18.2098491Z     const elem = document.createElement(tag);
2025-04-15T08:07:18.2098579Z     if (Object.keys(attrs || {}).length) {
2025-04-15T08:07:18.2098678Z       Object.entries(attrs).forEach(([k, v]) => {
2025-04-15T08:07:18.2098749Z         elem[k] = v;
2025-04-15T08:07:18.2098813Z       })
2025-04-15T08:07:18.2098877Z     }
2025-04-15T08:07:18.2098944Z     return elem
2025-04-15T08:07:18.2099004Z   }
2025-04-15T08:07:18.2099009Z 
2025-04-15T08:07:18.2099147Z   const getDOM = ({ tag = "div", children = [], ...rest } = {}) => {
2025-04-15T08:07:18.2099251Z     const element = document.createElement(tag);
2025-04-15T08:07:18.2099260Z 
2025-04-15T08:07:18.2099368Z     Object.entries(rest || {}).forEach(([k, v]) => {
2025-04-15T08:07:18.2099450Z       if (element[k] !== undefined) {
2025-04-15T08:07:18.2099562Z         if (k == "dataset" && Object.keys(v).length == 1) {
2025-04-15T08:07:18.2099771Z           const dataPair = Object.entries(v)[0]
2025-04-15T08:07:18.2099863Z           element[k][dataPair[0]] = dataPair[1]
2025-04-15T08:07:18.2099932Z         } else {
2025-04-15T08:07:18.2100002Z           element[k] = v;
2025-04-15T08:07:18.2100066Z         }
2025-04-15T08:07:18.2100128Z       }
2025-04-15T08:07:18.2100191Z     })
2025-04-15T08:07:18.2100195Z 
2025-04-15T08:07:18.2100271Z     if (!!children?.length) {
2025-04-15T08:07:18.2100466Z       children.filter(({ condition = true }) => !!condition).forEach(childStructure => {
2025-04-15T08:07:18.2100580Z         element.appendChild(getDOM(childStructure));
2025-04-15T08:07:18.2100641Z       });
2025-04-15T08:07:18.2100704Z     }
2025-04-15T08:07:18.2100708Z 
2025-04-15T08:07:18.2100780Z     return element;
2025-04-15T08:07:18.2100840Z   }
2025-04-15T08:07:18.2100848Z 
2025-04-15T08:07:18.2100938Z   // ===================================================================================== //
2025-04-15T08:07:18.2100948Z 
2025-04-15T08:07:18.2101013Z   // Agent info
2025-04-15T08:07:18.2101188Z   const AGENT_INFO_KEY = `agentInfo:${window.envSettings.agentApiUrl}`
2025-04-15T08:07:18.2101266Z   const getAgentInfo = () => {
2025-04-15T08:07:18.2101397Z     const agentInfo = localStorage.getItem(AGENT_INFO_KEY)
2025-04-15T08:07:18.2101465Z     if (agentInfo) {
2025-04-15T08:07:18.2101529Z       try {
2025-04-15T08:07:18.2101643Z         return Promise.resolve(JSON.parse(agentInfo))
2025-04-15T08:07:18.2101708Z       } catch (err) {
2025-04-15T08:07:18.2101795Z         return Promise.resolve()
2025-04-15T08:07:18.2101856Z       }
2025-04-15T08:07:18.2101922Z     }
2025-04-15T08:07:18.2101926Z 
2025-04-15T08:07:18.2102274Z     return fetch(ensureOneSlash(`${window.envSettings.agentApiUrl}/api/v3/info`)).then(response => response.json()).then(data => {
2025-04-15T08:07:18.2102447Z       if (CONFIG.cache.agentInfo) {
2025-04-15T08:07:18.2102613Z         localStorage.setItem(AGENT_INFO_KEY, JSON.stringify(data || {}))
2025-04-15T08:07:18.2102681Z       }
2025-04-15T08:07:18.2102752Z       return data
2025-04-15T08:07:18.2102837Z     }).catch(() => Promise.resolve())
2025-04-15T08:07:18.2102898Z   }
2025-04-15T08:07:18.2102907Z 
2025-04-15T08:07:18.2103131Z   const loadStyle = (url, { media, insertAfter: aref, insertBefore: bref, rel, type } = {}) => {
2025-04-15T08:07:18.2103210Z     rel = rel || 'stylesheet'
2025-04-15T08:07:18.2103289Z     type = type || 'text/css'
2025-04-15T08:07:18.2103400Z     return new Promise(function (resolve, reject) {
2025-04-15T08:07:18.2103504Z       let link = document.createElement('link');
2025-04-15T08:07:18.2103578Z       link.type = type;
2025-04-15T08:07:18.2103648Z       link.rel = rel;
2025-04-15T08:07:18.2103723Z       link.href = url;
2025-04-15T08:07:18.2103808Z       link.media = media || 'all';
2025-04-15T08:07:18.2103813Z 
2025-04-15T08:07:18.2103897Z       link.onerror = function (err) {
2025-04-15T08:07:18.2104113Z         reject(new URIError(`loadStyle: the stylesheet ${err.target.src} is not accessible.`));
2025-04-15T08:07:18.2104183Z       };
2025-04-15T08:07:18.2104188Z 
2025-04-15T08:07:18.2104270Z       link.onload = function () {
2025-04-15T08:07:18.2104336Z         resolve();
2025-04-15T08:07:18.2104403Z       };
2025-04-15T08:07:18.2104407Z 
2025-04-15T08:07:18.2104470Z       if (aref) {
2025-04-15T08:07:18.2104615Z         aref.parentNode.insertBefore(link, aref.nextSibling);
2025-04-15T08:07:18.2104680Z         return;
2025-04-15T08:07:18.2104746Z       }
2025-04-15T08:07:18.2104750Z 
2025-04-15T08:07:18.2104813Z       if (bref) {
2025-04-15T08:07:18.2104918Z         bref.parentNode.insertBefore(link, bref);
2025-04-15T08:07:18.2104987Z         return;
2025-04-15T08:07:18.2105048Z       }
2025-04-15T08:07:18.2105052Z 
2025-04-15T08:07:18.2105152Z       document.head.appendChild(link);
2025-04-15T08:07:18.2105213Z     });
2025-04-15T08:07:18.2105272Z   }
2025-04-15T08:07:18.2105276Z 
2025-04-15T08:07:18.2105615Z   const loadScript = (url, { async = true, defer = false, insertAfter: aref, insertBefore: bref, timeout = 5000, attrs, skipIf } = {}) => {
2025-04-15T08:07:18.2105814Z     return new Promise(function (resolve, reject) {
2025-04-15T08:07:18.2105919Z       if (typeof skipIf === 'function' && skipIf()) {
2025-04-15T08:07:18.2106001Z         resolve(status.SKIPPED);
2025-04-15T08:07:18.2106217Z         return;
2025-04-15T08:07:18.2106330Z       }
2025-04-15T08:07:18.2106337Z 
2025-04-15T08:07:18.2106682Z       let rejectWithTimeout = setTimeout(function () { reject(status.TIMEOUT) }, timeout);
2025-04-15T08:07:18.2106698Z 
2025-04-15T08:07:18.2106874Z       let script = document.createElement('script');
2025-04-15T08:07:18.2107016Z       script.type = 'text/javascript';
2025-04-15T08:07:18.2107153Z       script.src = url;
2025-04-15T08:07:18.2107243Z       script.async = async;
2025-04-15T08:07:18.2107322Z       script.defer = defer;
2025-04-15T08:07:18.2107326Z 
2025-04-15T08:07:18.2107390Z       if (attrs) {
2025-04-15T08:07:18.2107467Z         for (let attr in attrs) {
2025-04-15T08:07:18.2107578Z           script.setAttribute(attr, attrs[attr]);
2025-04-15T08:07:18.2107638Z         }
2025-04-15T08:07:18.2107701Z       }
2025-04-15T08:07:18.2107705Z 
2025-04-15T08:07:18.2107790Z       script.onerror = function (err) {
2025-04-15T08:07:18.2108005Z         reject(new URIError(`loadScript: the script ${err.target.src} is not accessible.`));
2025-04-15T08:07:18.2108066Z       };
2025-04-15T08:07:18.2108070Z 
2025-04-15T08:07:18.2108150Z       script.onload = function () {
2025-04-15T08:07:18.2108248Z         clearTimeout(rejectWithTimeout);
2025-04-15T08:07:18.2108326Z         resolve(status.SUCCESS);
2025-04-15T08:07:18.2108391Z       };
2025-04-15T08:07:18.2108395Z 
2025-04-15T08:07:18.2108457Z       if (aref) {
2025-04-15T08:07:18.2108752Z         aref.parentNode.insertBefore(script, aref.nextSibling);
2025-04-15T08:07:18.2108816Z         return;
2025-04-15T08:07:18.2108876Z       }
2025-04-15T08:07:18.2108881Z 
2025-04-15T08:07:18.2108946Z       if (bref) {
2025-04-15T08:07:18.2109061Z         bref.parentNode.insertBefore(script, bref);
2025-04-15T08:07:18.2109129Z         return;
2025-04-15T08:07:18.2109189Z       }
2025-04-15T08:07:18.2109192Z 
2025-04-15T08:07:18.2109287Z       document.body.appendChild(script);
2025-04-15T08:07:18.2109354Z     });
2025-04-15T08:07:18.2109416Z   }
2025-04-15T08:07:18.2109420Z 
2025-04-15T08:07:18.2109930Z   __webpack_public_path__ = ensureOneSlash(window.envSettings.webpackPublicPath ? (window.envSettings.webpackPublicPath + "/") : (window.envSettings.agentApiUrl + "/v3/"))
2025-04-15T08:07:18.2109936Z 
2025-04-15T08:07:18.2110017Z   const loadLatestUI = () => {
2025-04-15T08:07:18.2110387Z     return fetch(__webpack_public_path__ + "bundlesManifest." + window.envSettings.version.toString().replace(/(\d+)\..+/, "$1") + ".json")
2025-04-15T08:07:18.2110516Z       .then(function (response) { return response.json() })
2025-04-15T08:07:18.2110601Z       .catch(() => goToOld('/v3'))
2025-04-15T08:07:18.2110676Z       .then(function (data) {
2025-04-15T08:07:18.2110776Z         Object.keys(data).forEach(function (k) {
2025-04-15T08:07:18.2110879Z           if (/\.(map|ico|html)$/.test(data[k])) return
2025-04-15T08:07:18.2110967Z           if (/static\//.test(data[k])) return
2025-04-15T08:07:18.2110971Z 
2025-04-15T08:07:18.2111054Z           if (/\.css.*$/.test(data[k])) {
2025-04-15T08:07:18.2111204Z             loadStyle(ensureOneSlash(__webpack_public_path__ + data[k]))
2025-04-15T08:07:18.2111271Z             return
2025-04-15T08:07:18.2111332Z           }
2025-04-15T08:07:18.2111337Z 
2025-04-15T08:07:18.2111412Z           if (/\.js.*$/.test(data[k])) {
2025-04-15T08:07:18.2111573Z             loadScript(ensureOneSlash(__webpack_public_path__ + data[k]), {
2025-04-15T08:07:18.2111642Z               async: false,
2025-04-15T08:07:18.2111712Z             });
2025-04-15T08:07:18.2111772Z           }
2025-04-15T08:07:18.2111832Z         })
2025-04-15T08:07:18.2111920Z         return Promise.resolve()
2025-04-15T08:07:18.2112117Z       })
2025-04-15T08:07:18.2112182Z   }
2025-04-15T08:07:18.2112186Z 
2025-04-15T08:07:18.2112269Z   const loadDashboard = signIn => {
2025-04-15T08:07:18.2112351Z     loadLatestUI().then(() => {
2025-04-15T08:07:18.2112416Z       if (signIn) {
2025-04-15T08:07:18.2112513Z         window.location.href = ensureOneSlash(
2025-04-15T08:07:18.2112707Z           `${window.envSettings.cloudUrl}/trust?redirect_uri=${encodeURIComponent(
2025-04-15T08:07:18.2112789Z             window.location.href
2025-04-15T08:07:18.2112882Z           )}&agent_uri=${encodeURIComponent(
2025-04-15T08:07:18.2112991Z             agentUri || window.envSettings.agentApiUrl
2025-04-15T08:07:18.2113097Z           )}&telemetry_session_id=${telemetrySessionId}`
2025-04-15T08:07:18.2113162Z         )
2025-04-15T08:07:18.2113227Z       }
2025-04-15T08:07:18.2113291Z     })
2025-04-15T08:07:18.2113352Z   }
2025-04-15T08:07:18.2113356Z 
2025-04-15T08:07:18.2113430Z   const signout = () => {
2025-04-15T08:07:18.2113530Z     localStorage.removeItem(CLOUD_TOKEN_KEY)
2025-04-15T08:07:18.2113616Z     window.location.reload()
2025-04-15T08:07:18.2113679Z   }
2025-04-15T08:07:18.2113683Z 
2025-04-15T08:07:18.2113764Z   const fetchRegistryInfo = () => {
2025-04-15T08:07:18.2113912Z     if (window.localNetdataRegistry) return Promise.resolve()
2025-04-15T08:07:18.2113917Z 
2025-04-15T08:07:18.2114311Z     return fetch(ensureOneSlash(window.envSettings.agentApiUrl + "/api/v1/registry?action=hello"), { cache: "no-cache", credentials: "include" })
2025-04-15T08:07:18.2114388Z       .then(response => {
2025-04-15T08:07:18.2114566Z         if (!response.ok) return Promise.reject({ message: defaultErrorMessage })
2025-04-15T08:07:18.2114647Z         return response.json()
2025-04-15T08:07:18.2114711Z       })
2025-04-15T08:07:18.2114778Z       .then(data => {
2025-04-15T08:07:18.2115065Z         if (!data) return Promise.reject({ message: "No registry data available." })
2025-04-15T08:07:18.2115071Z 
2025-04-15T08:07:18.2115174Z         let to = data.cloud_base_url.lastIndexOf('/');
2025-04-15T08:07:18.2115371Z         to = (to == -1 || to < data.cloud_base_url.length - 2) ? data.cloud_base_url.length : to;
2025-04-15T08:07:18.2115496Z         let cloudUrl = data.cloud_base_url.substring(0, to);
2025-04-15T08:07:18.2115501Z 
2025-04-15T08:07:18.2115595Z         let withoutNodes = btoa(JSON.stringify({
2025-04-15T08:07:18.2115678Z           registry: data.registry,
2025-04-15T08:07:18.2115764Z           machine_guid: data.machine_guid,
2025-04-15T08:07:18.2115846Z           hostname: data.hostname,
2025-04-15T08:07:18.2115919Z           agent: data.agent,
2025-04-15T08:07:18.2115984Z           nodes: []
2025-04-15T08:07:18.2116048Z         }))
2025-04-15T08:07:18.2116278Z         let iframe = document.createElement('iframe');
2025-04-15T08:07:18.2116606Z         iframe.src = data.registry + "/registry-access.html?x=" + withoutNodes + "&originUrl=" + window.envSettings.agentApiUrl;
2025-04-15T08:07:18.2116746Z         iframe.style = { position: "absolute", left: "-99999999px" };
2025-04-15T08:07:18.2116826Z         iframe.width = 0;
2025-04-15T08:07:18.2116900Z         iframe.height = 0;
2025-04-15T08:07:18.2116979Z         iframe.tabindex = -1;
2025-04-15T08:07:18.2117059Z         iframe.title = "empty";
2025-04-15T08:07:18.2117145Z         iframe.classList.add("hidden");
2025-04-15T08:07:18.2117240Z         document.body.appendChild(iframe);
2025-04-15T08:07:18.2117245Z 
2025-04-15T08:07:18.2117322Z         setTimeout(function () {
2025-04-15T08:07:18.2117468Z           document.title = data.hostname + ': Netdata Agent Console';
2025-04-15T08:07:18.2117749Z           iframe.contentWindow.postMessage(["netdata-registry", window.envSettings.agentApiUrl, data], "*")
2025-04-15T08:07:18.2117814Z         }, 300);
2025-04-15T08:07:18.2117818Z 
2025-04-15T08:07:18.2117955Z         window.addEventListener('message', function (event) {
2025-04-15T08:07:18.2118070Z           if (event.source !== iframe.contentWindow) return;
2025-04-15T08:07:18.2118075Z 
2025-04-15T08:07:18.2118489Z           if (event.data.status === "disabled") console.error("Your netdata registry is disabled! Check your configuration.")
2025-04-15T08:07:18.2118495Z 
2025-04-15T08:07:18.2118565Z           if (event.data) {
2025-04-15T08:07:18.2118665Z             if (!window.localNetdataRegistry) {
2025-04-15T08:07:18.2118759Z               window.localNetdataRegistry = {}
2025-04-15T08:07:18.2118822Z             }
2025-04-15T08:07:18.2118830Z 
2025-04-15T08:07:18.2118978Z             window.localNetdataRegistry.pg = event.data.person_guid
2025-04-15T08:07:18.2118983Z 
2025-04-15T08:07:18.2119065Z             if (!window.envSettings) {
2025-04-15T08:07:18.2119151Z               window.envSettings = {}
2025-04-15T08:07:18.2119213Z             }
2025-04-15T08:07:18.2119217Z 
2025-04-15T08:07:18.2119353Z             window.envSettings.visitor = event.data.person_guid
2025-04-15T08:07:18.2119357Z 
2025-04-15T08:07:18.2119420Z             try {
2025-04-15T08:07:18.2119622Z               var visitedNodesByName = event.data.urls.reduce(function (vn, visitedUrl) {
2025-04-15T08:07:18.2119728Z                 vn[visitedUrl[4]] = vn[visitedUrl[4]] || {}
2025-04-15T08:07:18.2119819Z                 vn[visitedUrl[4]].id = visitedUrl[0]
2025-04-15T08:07:18.2119910Z                 vn[visitedUrl[4]].name = visitedUrl[4]
2025-04-15T08:07:18.2120022Z                 vn[visitedUrl[4]].lastAccessTime = visitedUrl[2]
2025-04-15T08:07:18.2120142Z                 vn[visitedUrl[4]].urls = vn[visitedUrl[4]].urls || []
2025-04-15T08:07:18.2120241Z                 vn[visitedUrl[4]].urls.push(visitedUrl[1])
2025-04-15T08:07:18.2120246Z 
2025-04-15T08:07:18.2120315Z                 return vn
2025-04-15T08:07:18.2120378Z               }, {})
2025-04-15T08:07:18.2120382Z 
2025-04-15T08:07:18.2120569Z               window.visitedNodes = Object.keys(visitedNodesByName).map(function (vn) {
2025-04-15T08:07:18.2120784Z                 return visitedNodesByName[vn]
2025-04-15T08:07:18.2120846Z               })
2025-04-15T08:07:18.2120920Z             } catch (e) {
2025-04-15T08:07:18.2120991Z               // do nothing
2025-04-15T08:07:18.2121053Z             }
2025-04-15T08:07:18.2121114Z           }
2025-04-15T08:07:18.2121177Z         });
2025-04-15T08:07:18.2121180Z 
2025-04-15T08:07:18.2121264Z         return Promise.resolve()
2025-04-15T08:07:18.2121328Z       })
2025-04-15T08:07:18.2121391Z   }
2025-04-15T08:07:18.2121395Z 
2025-04-15T08:07:18.2121597Z   const cloudRequest = async (endpoint, {allowAnonymous = false, ...options} = {}) => {
2025-04-15T08:07:18.2121736Z     const cloudToken = localStorage.getItem(CLOUD_TOKEN_KEY)
2025-04-15T08:07:18.2121919Z     if (!allowAnonymous && !cloudToken) return Promise.reject("No cloud token")
2025-04-15T08:07:18.2121924Z 
2025-04-15T08:07:18.2122297Z     options = { ...options, headers: { ...(options?.headers || {}), ...(!!cloudToken && {Authorization: `*** } }
2025-04-15T08:07:18.2122308Z 
2025-04-15T08:07:18.2122522Z     return fetch(ensureOneSlash(`${window.envSettings.apiUrl}/${endpoint}`), options)
2025-04-15T08:07:18.2122596Z   }
2025-04-15T08:07:18.2122600Z 
2025-04-15T08:07:18.2122677Z   const sleep = (ms) => {
2025-04-15T08:07:18.2122812Z     return new Promise(resolve => setTimeout(resolve, ms));
2025-04-15T08:07:18.2122880Z   }
2025-04-15T08:07:18.2122884Z 
2025-04-15T08:07:18.2122996Z   const claimAgent = ({ key, token, rooms } = {}) => {
2025-04-15T08:07:18.2123099Z     const url = window.envSettings.apiUrl;
2025-04-15T08:07:18.2123264Z     let query = new URLSearchParams({ key, rooms, token, url }).toString()
2025-04-15T08:07:18.2123397Z     query = key && rooms && token && url && query ? `?${query}` : ""
2025-04-15T08:07:18.2123683Z     return fetch(ensureOneSlash(`${window.envSettings.agentApiUrl}/api/v3/claim${query}`)).then(response => {
2025-04-15T08:07:18.2123827Z       const contentType = response.headers.get("content-type");
2025-04-15T08:07:18.2123836Z 
2025-04-15T08:07:18.2123959Z       if (contentType && contentType.includes("text")) {
2025-04-15T08:07:18.2124040Z         throw response.text();
2025-04-15T08:07:18.2124192Z       }
2025-04-15T08:07:18.2124196Z 
2025-04-15T08:07:18.2124308Z       if (contentType && contentType.includes("json")) {
2025-04-15T08:07:18.2124389Z         return response.json();
2025-04-15T08:07:18.2124451Z       }
2025-04-15T08:07:18.2124455Z 
2025-04-15T08:07:18.2124597Z       throw new Error('Unsupported content type: ' + contentType);
2025-04-15T08:07:18.2124671Z     }).then(data => {
2025-04-15T08:07:18.2124752Z       if (data.success === false) {
2025-04-15T08:07:18.2124829Z         throw data.message
2025-04-15T08:07:18.2124890Z       }
2025-04-15T08:07:18.2124894Z 
2025-04-15T08:07:18.2125027Z       if (key && data.can_be_claimed === false && !data.agent.nd) {
2025-04-15T08:07:18.2125116Z         return sleep(1000).then(claimAgent);
2025-04-15T08:07:18.2125182Z       }
2025-04-15T08:07:18.2125186Z 
2025-04-15T08:07:18.2125255Z       return data
2025-04-15T08:07:18.2125317Z     });
2025-04-15T08:07:18.2125379Z   }
2025-04-15T08:07:18.2125384Z 
2025-04-15T08:07:18.2125463Z   const checkMe = mg => {
2025-04-15T08:07:18.2125668Z     return fetch(ensureOneSlash(`${window.envSettings.agentApiUrl}/api/v3/me`), {
2025-04-15T08:07:18.2125739Z       headers: {
2025-04-15T08:07:18.2125953Z         "X-Netdata-Auth": `***
2025-04-15T08:07:18.2126021Z       }
2025-04-15T08:07:18.2126187Z     })
2025-04-15T08:07:18.2126285Z       .then(response => response.json())
2025-04-15T08:07:18.2126356Z       .catch(() => ({
2025-04-15T08:07:18.2126424Z         auth: "none",
2025-04-15T08:07:18.2126505Z         cloud_account_id: null,
2025-04-15T08:07:18.2126577Z         client_name: "",
2025-04-15T08:07:18.2126663Z         access: ["anonymous-data"],
2025-04-15T08:07:18.2126734Z         user_role: "any",
2025-04-15T08:07:18.2126800Z       }))
2025-04-15T08:07:18.2126982Z   }
2025-04-15T08:07:18.2126986Z 
2025-04-15T08:07:18.2127073Z   const fetchUserAccess = (mg, nd) => {
2025-04-15T08:07:18.2127494Z     return cloudRequest(`/api/v1/agents/${mg}/user_agent_node_access${nd ? `?nodeID=${nd}` : ""}`, {allowAnonymous: true}).then(response => response.json()).then(data => {
2025-04-15T08:07:18.2128446Z       window.localNetdataRegistry.limitations = data.limitations ? {limit: data.limitations.limit || 99999999, customDashboardsLimit: data.limitations.custom_dashboards_limit || 99999999, windowsSupport: data.limitations.windows_support || false} : {limit: 99999999, customDashboardsLimit: 99999999, windowsSupport: true}
2025-04-15T08:07:18.2128452Z 
2025-04-15T08:07:18.2128554Z       if (data.user_node_status === "noAccess") {
2025-04-15T08:07:18.2128622Z         return data
2025-04-15T08:07:18.2128688Z       }
2025-04-15T08:07:18.2128821Z       window.localNetdataRegistry.spaceId = data.space_id
2025-04-15T08:07:18.2128826Z 
2025-04-15T08:07:18.2128938Z       const room = data.rooms.find(r => r.untouchable)
2025-04-15T08:07:18.2128947Z 
2025-04-15T08:07:18.2129061Z       window.localNetdataRegistry.roomId = room.id
2025-04-15T08:07:18.2129164Z       window.localNetdataRegistry.room = room
2025-04-15T08:07:18.2129176Z 
2025-04-15T08:07:18.2129242Z       return data
2025-04-15T08:07:18.2129312Z     }).catch((err) => { })
2025-04-15T08:07:18.2129376Z   }
2025-04-15T08:07:18.2129381Z 
2025-04-15T08:07:18.2129503Z   const getAgentToken = ({ mg, nd, claimId }, agent) => {
2025-04-15T08:07:18.2129811Z     return cloudRequest(`/api/v2/bearer_get_token?node_id=${nd}&claim_id=${claimId}&machine_guid=${mg}`).then(response => {
2025-04-15T08:07:18.2129896Z       if (response.status === 401) {
2025-04-15T08:07:18.2129960Z         signout()
2025-04-15T08:07:18.2130027Z         return
2025-04-15T08:07:18.2130086Z       }
2025-04-15T08:07:18.2130161Z       if (!response.ok) {
2025-04-15T08:07:18.2130273Z         // Parse the error response to extract the message
2025-04-15T08:07:18.2130373Z         return response.json().then(errorData => {
2025-04-15T08:07:18.2130490Z           const error = new Error(errorData.errorMessage);
2025-04-15T08:07:18.2130582Z           error.data = errorData.errorContext
2025-04-15T08:07:18.2130766Z           throw error
2025-04-15T08:07:18.2130829Z         });
2025-04-15T08:07:18.2130901Z       }
2025-04-15T08:07:18.2130978Z       return response.json();
2025-04-15T08:07:18.2131045Z     }).then(data => {
2025-04-15T08:07:18.2131125Z       if (data && data.token) {
2025-04-15T08:07:18.2131246Z         localStorage.setItem(`agentJWT:${mg}`, data?.token)
2025-04-15T08:07:18.2131395Z         localStorage.setItem(`agentJWTExp:${mg}`, data?.expiration)
2025-04-15T08:07:18.2131457Z       }
2025-04-15T08:07:18.2131521Z       return data
2025-04-15T08:07:18.2131593Z     }).catch((err) => {
2025-04-15T08:07:18.2131661Z       stopLoading()
2025-04-15T08:07:18.2131665Z 
2025-04-15T08:07:18.2131789Z       let message = "Something went wrong. Please try again."
2025-04-15T08:07:18.2131895Z       if (err.data && err.data.state === "created") {
2025-04-15T08:07:18.2132160Z         message = "The node is claimed and is syncing with Netdata Cloud. Please wait a few seconds and try again."
2025-04-15T08:07:18.2132229Z       } else {
2025-04-15T08:07:18.2132320Z         message = (err && err.message) || message
2025-04-15T08:07:18.2132382Z       }
2025-04-15T08:07:18.2132386Z 
2025-04-15T08:07:18.2132390Z 
2025-04-15T08:07:18.2132520Z       const msgSignIn = document.getElementById("msgSignIn");
2025-04-15T08:07:18.2132613Z       msgSignIn.textContent = message
2025-04-15T08:07:18.2132617Z 
2025-04-15T08:07:18.2132743Z       const btnSignIn = document.getElementById("btnSignIn");
2025-04-15T08:07:18.2132836Z       btnSignIn.style.display = "none"
2025-04-15T08:07:18.2132841Z 
2025-04-15T08:07:18.2132922Z       setupOptOutMessage(agent)
2025-04-15T08:07:18.2132986Z     })
2025-04-15T08:07:18.2133045Z   }
2025-04-15T08:07:18.2133049Z 
2025-04-15T08:07:18.2133140Z   const setupOptOutMessage = agent => {
2025-04-15T08:07:18.2133378Z     const bearerProtection = agent.api.bearer_protection;
2025-04-15T08:07:18.2133383Z 
2025-04-15T08:07:18.2133590Z     const isWindows = (agent.application.os.kernel || "").toLowerCase() === "windows"
2025-04-15T08:07:18.2134037Z     const lockWindows = isWindows && (!window.localNetdataRegistry.limitation || window.localNetdataRegistry.limitations.windowsSupport === false);
2025-04-15T08:07:18.2134042Z 
2025-04-15T08:07:18.2134190Z     const denyAnonymousAccess = bearerProtection || lockWindows;
2025-04-15T08:07:18.2134195Z 
2025-04-15T08:07:18.2134303Z     // Get all elements with the "opt-out-link" class
2025-04-15T08:07:18.2134497Z     const optOutLinkElems = document.getElementsByClassName("opt-out-link");
2025-04-15T08:07:18.2134603Z     if (optOutLinkElems.length > 0) {
2025-04-15T08:07:18.2134720Z       for (let i = 0; i < optOutLinkElems.length; i++) {
2025-04-15T08:07:18.2134913Z         optOutLinkElems[i].style.display = denyAnonymousAccess ? "none" : "inline";
2025-04-15T08:07:18.2134984Z       }
2025-04-15T08:07:18.2135044Z     }
2025-04-15T08:07:18.2135048Z 
2025-04-15T08:07:18.2135178Z     // Get all elements with the "no-anonymous-access" class
2025-04-15T08:07:18.2135443Z     const anonymousAccessDeniedElems = document.getElementsByClassName("no-anonymous-access");
2025-04-15T08:07:18.2135557Z     if (anonymousAccessDeniedElems.length > 0) {
2025-04-15T08:07:18.2135696Z       for (let i = 0; i < anonymousAccessDeniedElems.length; i++) {
2025-04-15T08:07:18.2135829Z         if (anonymousAccessDeniedElems[i].textContent === "") {
2025-04-15T08:07:18.2136686Z           anonymousAccessDeniedElems[i].innerHTML = bearerProtection ? "Anonymous access is not allowed. *** is enabled.<br />Please sign in to continue." : "Anonymous access to the dashboard of Windows nodes is not allowed.<br />Please sign in to continue.";
2025-04-15T08:07:18.2136756Z         }
2025-04-15T08:07:18.2136987Z         anonymousAccessDeniedElems[i].style.display = denyAnonymousAccess ? "inline" : "none";
2025-04-15T08:07:18.2137056Z       }
2025-04-15T08:07:18.2137114Z     }
2025-04-15T08:07:18.2137176Z   }
2025-04-15T08:07:18.2137180Z 
2025-04-15T08:07:18.2137279Z   const createClaimingToken = spaceId => {
2025-04-15T08:07:18.2137497Z     if (!spaceId) return Promise.resolve();
2025-04-15T08:07:18.2137599Z     toggleClaimingTokenLoadingState(true);
2025-04-15T08:07:18.2137782Z     return cloudRequest(`/api/v1/spaces/${spaceId}/token`).then(response => {
2025-04-15T08:07:18.2137884Z       toggleClaimingTokenLoadingState(false);
2025-04-15T08:07:18.2137965Z       return response.json();
2025-04-15T08:07:18.2138026Z     });
2025-04-15T08:07:18.2138087Z   }
2025-04-15T08:07:18.2138091Z 
2025-04-15T08:07:18.2138188Z   const getClaimingToken = async spaceId => {
2025-04-15T08:07:18.2138285Z     if (!spaceId) return Promise.resolve();
2025-04-15T08:07:18.2138454Z     const cachedToken = state.cache.claimingTokensPerSpace[spaceId];
2025-04-15T08:07:18.2138574Z     if (cachedToken) return Promise.resolve(cachedToken);
2025-04-15T08:07:18.2138695Z     const token = await createClaimingToken(spaceId);
2025-04-15T08:07:18.2138784Z     cacheClaimingToken(spaceId, token);
2025-04-15T08:07:18.2138875Z     return Promise.resolve(token);
2025-04-15T08:07:18.2138939Z   }
2025-04-15T08:07:18.2138943Z 
2025-04-15T08:07:18.2139025Z   const fetchSpaces = () => {
2025-04-15T08:07:18.2139115Z     toggleSpacesLoadingState(true);
2025-04-15T08:07:18.2139247Z     return cloudRequest("/api/v3/spaces").then(response => {
2025-04-15T08:07:18.2139341Z       toggleSpacesLoadingState(false);
2025-04-15T08:07:18.2139417Z       return response.json();
2025-04-15T08:07:18.2139482Z     });
2025-04-15T08:07:18.2139542Z   }
2025-04-15T08:07:18.2139546Z 
2025-04-15T08:07:18.2139625Z   const getSpaces = async () => {
2025-04-15T08:07:18.2139724Z     const cachedSpaces = state.cache.spaces;
2025-04-15T08:07:18.2139851Z     if (cachedSpaces) return Promise.resolve(cachedSpaces);
2025-04-15T08:07:18.2139938Z     const spaces = await fetchSpaces();
2025-04-15T08:07:18.2140130Z     cacheSpaces(spaces);
2025-04-15T08:07:18.2140216Z     return Promise.resolve(spaces);
2025-04-15T08:07:18.2140276Z   }
2025-04-15T08:07:18.2140279Z 
2025-04-15T08:07:18.2140364Z   const fetchSpaceRooms = spaceId => {
2025-04-15T08:07:18.2140465Z     if (!spaceId) return Promise.resolve([])
2025-04-15T08:07:18.2140551Z     toggleRoomsLoadingState(true);
2025-04-15T08:07:18.2140815Z     return cloudRequest(`/api/v2/spaces/${spaceId}/rooms?show_all=true&default=false`).then(response => {
2025-04-15T08:07:18.2140904Z       toggleRoomsLoadingState(false);
2025-04-15T08:07:18.2140979Z       return response.json();
2025-04-15T08:07:18.2141041Z     })
2025-04-15T08:07:18.2141101Z   }
2025-04-15T08:07:18.2141105Z 
2025-04-15T08:07:18.2141198Z   const getSpaceRooms = async spaceId => {
2025-04-15T08:07:18.2141291Z     if (!spaceId) return Promise.resolve([]);
2025-04-15T08:07:18.2141405Z     const cachedRooms = state.cache.rooms[spaceId];
2025-04-15T08:07:18.2141529Z     if (cachedRooms) return Promise.resolve(cachedRooms);
2025-04-15T08:07:18.2141642Z     const rooms = await fetchSpaceRooms(spaceId);
2025-04-15T08:07:18.2141727Z     cacheRooms(spaceId, rooms);
2025-04-15T08:07:18.2141810Z     return Promise.resolve(rooms);
2025-04-15T08:07:18.2141882Z   }
2025-04-15T08:07:18.2141885Z 
2025-04-15T08:07:18.2141980Z   const updateSelectedOptions = root => {
2025-04-15T08:07:18.2142053Z     if (!root) return;
2025-04-15T08:07:18.2142320Z     const checkboxes = root.querySelectorAll('.dropdown > .checkbox-container input[type="checkbox"]');
2025-04-15T08:07:18.2142412Z     const selected = Array.from(checkboxes)
2025-04-15T08:07:18.2142508Z       .filter((checkbox) => checkbox.checked)
2025-04-15T08:07:18.2142683Z       .map((checkbox) => ({ value: checkbox.value, name: checkbox.dataset.name }));
2025-04-15T08:07:18.2142687Z 
2025-04-15T08:07:18.2142816Z     const selectedNames = selected.map(({ name }) => name);
2025-04-15T08:07:18.2142950Z     const selectedValues = selected.map(({ value }) => value);
2025-04-15T08:07:18.2142959Z 
2025-04-15T08:07:18.2143097Z     const selectedSpaceIds = state.claim.selectedSpaceIds;
2025-04-15T08:07:18.2143188Z     const spaces = state.cache.spaces;
2025-04-15T08:07:18.2143584Z     const selectedSpaceName = selectedSpaceIds.length ? spaces.find(({ id }) => id == selectedSpaceIds[0])?.name : null;
2025-04-15T08:07:18.2143594Z 
2025-04-15T08:07:18.2143866Z     const dropdownChangeEvent = new CustomEvent("dropdownChange", { detail: { values: selectedValues } });
2025-04-15T08:07:18.2143967Z     root.dispatchEvent(dropdownChangeEvent);
2025-04-15T08:07:18.2143971Z 
2025-04-15T08:07:18.2144092Z     root.querySelector("#selectedItems").textContent =
2025-04-15T08:07:18.2144262Z       selectedNames.length > 0 ? selectedNames.join(", ") : "Select Rooms";
2025-04-15T08:07:18.2144267Z 
2025-04-15T08:07:18.2144417Z     const target = document.getElementById(root.dataset.target);
2025-04-15T08:07:18.2144493Z     target.textContent =
2025-04-15T08:07:18.2144576Z       selected.length > 0
2025-04-15T08:07:18.2144746Z         ? `You are ready to connect your agent to room(s): ${selectedNames.join(
2025-04-15T08:07:18.2144810Z           ", "
2025-04-15T08:07:18.2144996Z         )}${selectedSpaceName ? ` of ${selectedSpaceName} space` : ""}`
2025-04-15T08:07:18.2145068Z         : "";
2025-04-15T08:07:18.2145133Z   }
2025-04-15T08:07:18.2145137Z 
2025-04-15T08:07:18.2145227Z   const bindDropdownOptions = () => {
2025-04-15T08:07:18.2145393Z     document.querySelectorAll(".dropdown-custom").forEach(root => {
2025-04-15T08:07:18.2145564Z       root.querySelectorAll(".nd-checkbox > input").forEach(input => {
2025-04-15T08:07:18.2145741Z         input.addEventListener("change", () => updateSelectedOptions(root));
2025-04-15T08:07:18.2145808Z       });
2025-04-15T08:07:18.2145870Z     });
2025-04-15T08:07:18.2145935Z   }
2025-04-15T08:07:18.2145938Z 
2025-04-15T08:07:18.2146027Z   const buildRoomsList = (rooms = []) => {
2025-04-15T08:07:18.2146322Z     const container = document.getElementById("roomsSelectorOptionsContainer");
2025-04-15T08:07:18.2146516Z     if (container) {
2025-04-15T08:07:18.2146597Z       container.innerHTML = "";
2025-04-15T08:07:18.2146681Z       rooms.forEach(({ id, name }) => {
2025-04-15T08:07:18.2146792Z         const isDefaultSelected = name === "All nodes"
2025-04-15T08:07:18.2146797Z 
2025-04-15T08:07:18.2146884Z         if (isDefaultSelected) {
2025-04-15T08:07:18.2146968Z           setSelectedRoomsStatus(id)
2025-04-15T08:07:18.2147029Z         }
2025-04-15T08:07:18.2147033Z 
2025-04-15T08:07:18.2147186Z         const label = createElem("label", { classList: "nd-checkbox" });
2025-04-15T08:07:18.2147412Z         const input = createElem("input", { type: "checkbox", value: id, checked: isDefaultSelected });
2025-04-15T08:07:18.2147498Z         input.dataset.name = name;
2025-04-15T08:07:18.2147574Z         input.onchange = e => {
2025-04-15T08:07:18.2147667Z           setSelectedRoomsStatus(prev => {
2025-04-15T08:07:18.2147769Z             if (e.target.checked) return [...prev, id];
2025-04-15T08:07:18.2147862Z             return prev.filter(r => r != id);
2025-04-15T08:07:18.2147926Z           });
2025-04-15T08:07:18.2147989Z         }
2025-04-15T08:07:18.2147993Z 
2025-04-15T08:07:18.2148136Z         const span = createElem("span", { classList: "checkmark" });
2025-04-15T08:07:18.2148237Z         const text = document.createTextNode(name);
2025-04-15T08:07:18.2148241Z 
2025-04-15T08:07:18.2148327Z         label.appendChild(input);
2025-04-15T08:07:18.2148407Z         label.appendChild(span);
2025-04-15T08:07:18.2148485Z         label.appendChild(text);
2025-04-15T08:07:18.2148575Z         container.appendChild(label);
2025-04-15T08:07:18.2148635Z       });
2025-04-15T08:07:18.2148639Z 
2025-04-15T08:07:18.2148722Z       bindDropdownOptions();
2025-04-15T08:07:18.2148782Z     }
2025-04-15T08:07:18.2148842Z   }
2025-04-15T08:07:18.2148849Z 
2025-04-15T08:07:18.2148943Z   const buildSpacesList = (spaces = []) => {
2025-04-15T08:07:18.2149079Z     const container = document.getElementById("spacesList");
2025-04-15T08:07:18.2149156Z     if (container) {
2025-04-15T08:07:18.2149234Z       container.innerHTML = "";
2025-04-15T08:07:18.2149355Z       spaces.forEach(({ id, name, permissions = [] }) => {
2025-04-15T08:07:18.2149584Z         if (!permissions.includes("node:Create")) return
2025-04-15T08:07:18.2149588Z 
2025-04-15T08:07:18.2149673Z         const listItem = createElem("li");
2025-04-15T08:07:18.2149758Z         listItem.innerText = name;
2025-04-15T08:07:18.2149845Z         listItem.className = "space-item";
2025-04-15T08:07:18.2149927Z         listItem.dataset.id = id;
2025-04-15T08:07:18.2150009Z         listItem.onclick = async () => {
2025-04-15T08:07:18.2150257Z           document.querySelectorAll(".space-item").forEach(item => item.classList.remove("selected"));
2025-04-15T08:07:18.2150349Z           listItem.classList.add("selected");
2025-04-15T08:07:18.2150438Z           setSelectedSpacesStatus([id]);
2025-04-15T08:07:18.2150502Z         };
2025-04-15T08:07:18.2150596Z         container.appendChild(listItem);
2025-04-15T08:07:18.2150660Z       });
2025-04-15T08:07:18.2150719Z     }
2025-04-15T08:07:18.2150798Z     return Promise.resolve();
2025-04-15T08:07:18.2150866Z   }
2025-04-15T08:07:18.2150870Z 
2025-04-15T08:07:18.2150953Z   const initCustomDropdown = () => {
2025-04-15T08:07:18.2151035Z     const toggleDropdown = e => {
2025-04-15T08:07:18.2151113Z       if (!e.currentTarget) return;
2025-04-15T08:07:18.2151330Z       const checkboxContainer = e.currentTarget.querySelector(".checkbox-container");
2025-04-15T08:07:18.2151408Z       if (checkboxContainer) {
2025-04-15T08:07:18.2151686Z         checkboxContainer.style.display = checkboxContainer.style.display === "block" ? "none" : "block";
2025-04-15T08:07:18.2151752Z       }
2025-04-15T08:07:18.2151813Z     }
2025-04-15T08:07:18.2151817Z 
2025-04-15T08:07:18.2151900Z     const clearSelection = e => {
2025-04-15T08:07:18.2151981Z       if (!e.currentTarget) return;
2025-04-15T08:07:18.2152206Z       const root = e.currentTarget.closest(".dropdown-custom");
2025-04-15T08:07:18.2152271Z       if (root) {
2025-04-15T08:07:18.2152537Z         const checkboxes = root.querySelectorAll('.dropdown > .checkbox-container input[type="checkbox"]');
2025-04-15T08:07:18.2152701Z         checkboxes.forEach((checkbox) => (checkbox.checked = false));
2025-04-15T08:07:18.2152786Z         updateSelectedOptions(root);
2025-04-15T08:07:18.2152851Z       }
2025-04-15T08:07:18.2152910Z     }
2025-04-15T08:07:18.2152914Z 
2025-04-15T08:07:18.2153076Z     document.querySelectorAll(".dropdown-custom").forEach(root => {
2025-04-15T08:07:18.2153206Z       const btnClear = root.querySelector(".clear-button");
2025-04-15T08:07:18.2153318Z       const dropdown = root.querySelector(".dropdown");
2025-04-15T08:07:18.2153391Z       if (dropdown) {
2025-04-15T08:07:18.2153458Z         if (btnClear) {
2025-04-15T08:07:18.2153589Z           btnClear.addEventListener("click", clearSelection);
2025-04-15T08:07:18.2153649Z         }
2025-04-15T08:07:18.2153776Z         dropdown.addEventListener("click", toggleDropdown);
2025-04-15T08:07:18.2153839Z       }
2025-04-15T08:07:18.2153898Z     });
2025-04-15T08:07:18.2153902Z 
2025-04-15T08:07:18.2154005Z     document.addEventListener("click", (e) => {
2025-04-15T08:07:18.2154186Z       document.querySelectorAll(".dropdown-custom").forEach(dropdown => {
2025-04-15T08:07:18.2154380Z         const checkboxContainer = dropdown.querySelector(".checkbox-container");
2025-04-15T08:07:18.2154540Z         if (dropdown && checkboxContainer && !dropdown.contains(e.target)) {
2025-04-15T08:07:18.2154647Z           checkboxContainer.style.display = "none";
2025-04-15T08:07:18.2154711Z         }
2025-04-15T08:07:18.2154771Z       });
2025-04-15T08:07:18.2154835Z     });
2025-04-15T08:07:18.2154840Z 
2025-04-15T08:07:18.2154918Z     return Promise.resolve();
2025-04-15T08:07:18.2154979Z   }
2025-04-15T08:07:18.2154989Z 
2025-04-15T08:07:18.2155081Z   const initClaimingElements = () => {
2025-04-15T08:07:18.2155238Z     const claimCommand = document.getElementById("claimCommand");
2025-04-15T08:07:18.2155368Z     const claimTip = document.getElementById("claimTip");
2025-04-15T08:07:18.2155534Z     const btnPrev = document.getElementById("btnConnectionStepPrev");
2025-04-15T08:07:18.2155784Z     const btnNext = document.getElementById("btnConnectionStepNext");
2025-04-15T08:07:18.2155906Z     const btnClaim = document.getElementById("btnClaim");
2025-04-15T08:07:18.2156193Z     const claimingPrivateKey = document.getElementById("claimingPrivateKey");
2025-04-15T08:07:18.2156202Z 
2025-04-15T08:07:18.2156315Z     if (claimCommand && !!state.claim?.status?.command) {
2025-04-15T08:07:18.2156448Z       claimCommand.innerText = state.claim.status.command;
2025-04-15T08:07:18.2156512Z     }
2025-04-15T08:07:18.2156516Z 
2025-04-15T08:07:18.2156628Z     if (claimTip && !!state.claim?.status?.key_filename) {
2025-04-15T08:07:18.2157304Z       claimTip.innerText = `Tip: If the command doesn’t work out-of-the-box, locate the ${state.claim.status.key_filename} file, open it in your favourite text editor, and copy it to your clipboard.`;
2025-04-15T08:07:18.2157372Z     }
2025-04-15T08:07:18.2157377Z 
2025-04-15T08:07:18.2157448Z     if (btnPrev) {
2025-04-15T08:07:18.2157557Z       btnPrev.addEventListener("click", () => {
2025-04-15T08:07:18.2157646Z         setClaimingStep(prev => prev - 1);
2025-04-15T08:07:18.2157710Z       });
2025-04-15T08:07:18.2157769Z     }
2025-04-15T08:07:18.2157773Z 
2025-04-15T08:07:18.2157843Z     if (btnNext) {
2025-04-15T08:07:18.2157957Z       btnNext.addEventListener("click", async () => {
2025-04-15T08:07:18.2158094Z         const newStep = await setClaimingStep(prev => prev + 1);
2025-04-15T08:07:18.2158231Z         if (newStep == 2 && !!state.claim.selectedSpaceIds.length) {
2025-04-15T08:07:18.2158346Z           const spaceId = state.claim.selectedSpaceIds[0];
2025-04-15T08:07:18.2158449Z           const rooms = await getSpaceRooms(spaceId);
2025-04-15T08:07:18.2158529Z           buildRoomsList(rooms);
2025-04-15T08:07:18.2158762Z           await getClaimingToken(spaceId);
2025-04-15T08:07:18.2158824Z         }
2025-04-15T08:07:18.2158885Z       });
2025-04-15T08:07:18.2158949Z     }
2025-04-15T08:07:18.2158957Z 
2025-04-15T08:07:18.2159023Z     if (btnClaim) {
2025-04-15T08:07:18.2159143Z       btnClaim.addEventListener("click", async () => {
2025-04-15T08:07:18.2159248Z         toggleClaimingAgentLoadingState(true);
2025-04-15T08:07:18.2159341Z         await setClaimResponseState({});
2025-04-15T08:07:18.2159520Z         const { selectedSpaceIds, selectedRoomIds, privateKey } = state.claim;
2025-04-15T08:07:18.2159826Z         const { token } = selectedSpaceIds.length ? state.cache.claimingTokensPerSpace[selectedSpaceIds[0]] || {} : {};
2025-04-15T08:07:18.2159832Z 
2025-04-15T08:07:18.2159912Z         let didCatch = false;
2025-04-15T08:07:18.2160148Z         const data = await claimAgent({ key: privateKey, token, rooms: selectedRoomIds }).catch(err => {
2025-04-15T08:07:18.2160225Z           didCatch = true;
2025-04-15T08:07:18.2160344Z           setClaimResponseState({ error: err.message });
2025-04-15T08:07:18.2160409Z         })
2025-04-15T08:07:18.2160413Z 
2025-04-15T08:07:18.2160493Z         if (data === "invalid key") {
2025-04-15T08:07:18.2160570Z           didCatch = true;
2025-04-15T08:07:18.2160686Z           setClaimResponseState({ error: "Invalid key" });
2025-04-15T08:07:18.2160746Z         }
2025-04-15T08:07:18.2160855Z         toggleClaimingAgentLoadingState(false);
2025-04-15T08:07:18.2160860Z 
2025-04-15T08:07:18.2160930Z         if (didCatch) return;
2025-04-15T08:07:18.2160935Z 
2025-04-15T08:07:18.2161000Z         if (data) {
2025-04-15T08:07:18.2161070Z           if (data.success) {
2025-04-15T08:07:18.2161154Z             window.location.reload();
2025-04-15T08:07:18.2161219Z           } else {
2025-04-15T08:07:18.2161306Z             setClaimResponseState(data);
2025-04-15T08:07:18.2161370Z           }
2025-04-15T08:07:18.2161430Z         }
2025-04-15T08:07:18.2161497Z       });
2025-04-15T08:07:18.2161558Z     }
2025-04-15T08:07:18.2161563Z 
2025-04-15T08:07:18.2161640Z     if (claimingPrivateKey) {
2025-04-15T08:07:18.2161911Z       claimingPrivateKey.addEventListener("input", e => setClaimingPrivateKeyState(e.target.value));
2025-04-15T08:07:18.2162089Z     }
2025-04-15T08:07:18.2162152Z   }
2025-04-15T08:07:18.2162156Z 
2025-04-15T08:07:18.2162241Z   const setClaimStatus = async () => {
2025-04-15T08:07:18.2162323Z     const status = await claimAgent();
2025-04-15T08:07:18.2162402Z     const claimStatus = {
2025-04-15T08:07:18.2162535Z       command: status.cmd || `sudo cat ${status.key_filename}`,
2025-04-15T08:07:18.2162602Z       ...status
2025-04-15T08:07:18.2162665Z     };
2025-04-15T08:07:18.2162764Z     await setClaimStatusState(claimStatus);
2025-04-15T08:07:18.2162846Z     return Promise.resolve();
2025-04-15T08:07:18.2162906Z   }
2025-04-15T08:07:18.2162909Z 
2025-04-15T08:07:18.2163004Z   const prepareClaiming = async agent => {
2025-04-15T08:07:18.2163090Z     await setClaimStatus();
2025-04-15T08:07:18.2163173Z     setupOptOutMessage(agent)
2025-04-15T08:07:18.2163256Z     const spaces = await getSpaces();
2025-04-15T08:07:18.2163341Z     await buildSpacesList(spaces);
2025-04-15T08:07:18.2163426Z     initCustomDropdown();
2025-04-15T08:07:18.2163505Z     initClaimingElements();
2025-04-15T08:07:18.2163572Z     syncUI();
2025-04-15T08:07:18.2163630Z   }
2025-04-15T08:07:18.2163634Z 
2025-04-15T08:07:18.2163710Z   const startLoading = () => {
2025-04-15T08:07:18.2163793Z     const body = document.body;
2025-04-15T08:07:18.2163858Z     if (body) {
2025-04-15T08:07:18.2163945Z       body.classList.add("loading");
2025-04-15T08:07:18.2164005Z     }
2025-04-15T08:07:18.2164067Z   }
2025-04-15T08:07:18.2164071Z 
2025-04-15T08:07:18.2164148Z   const stopLoading = () => {
2025-04-15T08:07:18.2164223Z     const body = document.body;
2025-04-15T08:07:18.2164290Z     if (body) {
2025-04-15T08:07:18.2164378Z       body.classList.remove("loading");
2025-04-15T08:07:18.2164572Z       window.dispatchEvent(new Event("resize"));
2025-04-15T08:07:18.2164632Z     }
2025-04-15T08:07:18.2164691Z   }
2025-04-15T08:07:18.2164695Z 
2025-04-15T08:07:18.2164849Z   const showErrorMessage = (message = defaultErrorMessage) => {
2025-04-15T08:07:18.2165028Z     const messageContainer = document.getElementById("loadingMessage");
2025-04-15T08:07:18.2165109Z     if (messageContainer) {
2025-04-15T08:07:18.2165203Z       messageContainer.innerHTML = message;
2025-04-15T08:07:18.2165274Z       startLoading();
2025-04-15T08:07:18.2165334Z     }
2025-04-15T08:07:18.2165392Z   }
2025-04-15T08:07:18.2165395Z 
2025-04-15T08:07:18.2165475Z   const initMetrics = data => {
2025-04-15T08:07:18.2165671Z     if (!data?.agents?.[0]) return Promise.reject({ message: "No agent data available." })
2025-04-15T08:07:18.2165676Z 
2025-04-15T08:07:18.2165818Z     const setPercentageBarWidth = (containerId, percent) => {
2025-04-15T08:07:18.2165953Z       const container = document.getElementById(containerId);
2025-04-15T08:07:18.2166031Z       if (container) {
2025-04-15T08:07:18.2166276Z         const percentageContainer = document.createElement("div");
2025-04-15T08:07:18.2166423Z         percentageContainer.className = "percentage-container";
2025-04-15T08:07:18.2166432Z 
2025-04-15T08:07:18.2166561Z         const percentageBar = document.createElement("div");
2025-04-15T08:07:18.2166670Z         percentageBar.className = "percentage-bar";
2025-04-15T08:07:18.2166781Z         percentageBar.style.width = percent + "%";
2025-04-15T08:07:18.2166785Z 
2025-04-15T08:07:18.2166910Z         const percentageText = document.createElement("div");
2025-04-15T08:07:18.2167025Z         percentageText.className = "percentage-text";
2025-04-15T08:07:18.2167253Z         percentageText.innerText = percent + "%"; // Display the rounded percentage value with "%"
2025-04-15T08:07:18.2167258Z 
2025-04-15T08:07:18.2167394Z         // Calculate the right position dynamically, capped at 96%
2025-04-15T08:07:18.2167531Z         const rightPosition = Math.min(100 - percent, 96) + "%";
2025-04-15T08:07:18.2167645Z         percentageText.style.right = rightPosition;
2025-04-15T08:07:18.2167649Z 
2025-04-15T08:07:18.2167776Z         percentageContainer.appendChild(percentageBar);
2025-04-15T08:07:18.2168112Z         percentageContainer.appendChild(percentageText); // Append the percentage text
2025-04-15T08:07:18.2168117Z 
2025-04-15T08:07:18.2168227Z         container.appendChild(percentageContainer);
2025-04-15T08:07:18.2168295Z       }
2025-04-15T08:07:18.2168358Z     }
2025-04-15T08:07:18.2168363Z 
2025-04-15T08:07:18.2168459Z     const units = ["", "K", "M", "B", "T", "P", "E"]
2025-04-15T08:07:18.2168463Z 
2025-04-15T08:07:18.2168550Z     const abbreviateNumber = number => {
2025-04-15T08:07:18.2168625Z       if (!number) return 0
2025-04-15T08:07:18.2168690Z     
2025-04-15T08:07:18.2168802Z       const tier = (Math.log10(Math.abs(number)) / 3) | 0
2025-04-15T08:07:18.2168865Z     
2025-04-15T08:07:18.2168940Z       if (!tier) return number
2025-04-15T08:07:18.2169009Z     
2025-04-15T08:07:18.2169088Z       const suffix = units[tier]
2025-04-15T08:07:18.2169178Z       const scale = Math.pow(10, tier * 3)
2025-04-15T08:07:18.2169257Z       const scaled = number / scale
2025-04-15T08:07:18.2169349Z       return scaled.toFixed(1) + suffix
2025-04-15T08:07:18.2169410Z     }
2025-04-15T08:07:18.2169414Z 
2025-04-15T08:07:18.2169495Z     const formatBytes = (bytes) => {
2025-04-15T08:07:18.2169581Z       if (bytes === 0) return "0 Bytes";
2025-04-15T08:07:18.2169649Z       const k = 1024,
2025-04-15T08:07:18.2169783Z         sizes = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"],
2025-04-15T08:07:18.2169884Z         i = Math.floor(Math.log(bytes) / Math.log(k));
2025-04-15T08:07:18.2169948Z       return (
2025-04-15T08:07:18.2170102Z         parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i]
2025-04-15T08:07:18.2170164Z       );
2025-04-15T08:07:18.2170228Z     }
2025-04-15T08:07:18.2170232Z 
2025-04-15T08:07:18.2170326Z     const formatLargeNumbers = (number) => {
2025-04-15T08:07:18.2170532Z       return number.toLocaleString();
2025-04-15T08:07:18.2170595Z     }
2025-04-15T08:07:18.2170599Z 
2025-04-15T08:07:18.2170694Z     const formatTimestamp = (timestamp) => {
2025-04-15T08:07:18.2170794Z       const date = new Date(timestamp * 1000);
2025-04-15T08:07:18.2170866Z       const months = [
2025-04-15T08:07:18.2170937Z         "Jan",
2025-04-15T08:07:18.2171001Z         "Feb",
2025-04-15T08:07:18.2171062Z         "Mar",
2025-04-15T08:07:18.2171128Z         "Apr",
2025-04-15T08:07:18.2171191Z         "May",
2025-04-15T08:07:18.2171255Z         "Jun",
2025-04-15T08:07:18.2171317Z         "Jul",
2025-04-15T08:07:18.2171384Z         "Aug",
2025-04-15T08:07:18.2171444Z         "Sep",
2025-04-15T08:07:18.2171505Z         "Oct",
2025-04-15T08:07:18.2171569Z         "Nov",
2025-04-15T08:07:18.2171628Z         "Dec",
2025-04-15T08:07:18.2171694Z       ];
2025-04-15T08:07:18.2171821Z       const days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
2025-04-15T08:07:18.2171910Z       const day = days[date.getUTCDay()];
2025-04-15T08:07:18.2172010Z       const month = months[date.getUTCMonth()];
2025-04-15T08:07:18.2172096Z       const year = date.getUTCFullYear();
2025-04-15T08:07:18.2172244Z       const hours = date.getUTCHours().toString().padStart(2, "0");
2025-04-15T08:07:18.2172398Z       const minutes = date.getUTCMinutes().toString().padStart(2, "0");
2025-04-15T08:07:18.2172544Z       const seconds = date.getUTCSeconds().toString().padStart(2, "0");
2025-04-15T08:07:18.2172554Z 
2025-04-15T08:07:18.2172727Z       return `${month} ${date.getUTCDate()}, ${year} ${hours}:${minutes}:${seconds}`;
2025-04-15T08:07:18.2172787Z     }
2025-04-15T08:07:18.2172791Z 
2025-04-15T08:07:18.2172912Z     const formatDuration = (seconds, short = false) => {
2025-04-15T08:07:18.2172994Z       if (seconds <= 0) return "0 seconds";
2025-04-15T08:07:18.2173099Z       const days = Math.floor(seconds / (24 * 3600));
2025-04-15T08:07:18.2173217Z       const hours = Math.floor((seconds % (24 * 3600)) / 3600);
2025-04-15T08:07:18.2173333Z       const minutes = Math.floor((seconds % 3600) / 60);
2025-04-15T08:07:18.2173421Z       const remainingSeconds = seconds % 60;
2025-04-15T08:07:18.2173509Z 
2025-04-15T08:07:18.2173576Z       if (short) {
2025-04-15T08:07:18.2173646Z         if (days > 3) {
2025-04-15T08:07:18.2173720Z           return days + " days";
2025-04-15T08:07:18.2173798Z         } else if (days > 0) {
2025-04-15T08:07:18.2173880Z           return days * 24 + hours + " hours";
2025-04-15T08:07:18.2173942Z         }
2025-04-15T08:07:18.2174006Z       }
2025-04-15T08:07:18.2174010Z 
2025-04-15T08:07:18.2174080Z       const parts = [];
2025-04-15T08:07:18.2174215Z       if (days > 0) parts.push(days + " day" + (days > 1 ? "s" : ""));
2025-04-15T08:07:18.2174352Z       if (hours > 0) parts.push(hours + " hour" + (hours > 1 ? "s" : ""));
2025-04-15T08:07:18.2174422Z       if (minutes > 0)
2025-04-15T08:07:18.2174552Z         parts.push(minutes + " minute" + (minutes > 1 ? "s" : ""));
2025-04-15T08:07:18.2174638Z       if (remainingSeconds > 0)
2025-04-15T08:07:18.2174709Z         parts.push(
2025-04-15T08:07:18.2174860Z           remainingSeconds + " second" + (remainingSeconds > 1 ? "s" : "")
2025-04-15T08:07:18.2174928Z         );
2025-04-15T08:07:18.2175043Z       return parts.join(" • ");
2025-04-15T08:07:18.2175103Z     }
2025-04-15T08:07:18.2175110Z 
2025-04-15T08:07:18.2175193Z     const createKeyValuePairs = (
2025-04-15T08:07:18.2175261Z       containerId,
2025-04-15T08:07:18.2175328Z       dataObject,
2025-04-15T08:07:18.2175392Z       keys = null,
2025-04-15T08:07:18.2175467Z       shortFormat = false,
2025-04-15T08:07:18.2175546Z       usePercentageBar = false
2025-04-15T08:07:18.2175614Z     ) => {
2025-04-15T08:07:18.2175750Z       const container = document.getElementById(containerId);
2025-04-15T08:07:18.2175824Z       if (!container) return;
2025-04-15T08:07:18.2175967Z       if (dataObject === null || typeof dataObject !== "object") return
2025-04-15T08:07:18.2176179Z 
2025-04-15T08:07:18.2176301Z       container.innerHTML = ""; // Clear the container
2025-04-15T08:07:18.2176305Z 
2025-04-15T08:07:18.2176422Z       const keysToUse = keys || Object.keys(dataObject);
2025-04-15T08:07:18.2176433Z 
2025-04-15T08:07:18.2176523Z       keysToUse.forEach(function (key) {
2025-04-15T08:07:18.2176622Z         if (dataObject.hasOwnProperty(key)) {
2025-04-15T08:07:18.2176718Z           let value = dataObject[key].toString();
2025-04-15T08:07:18.2176800Z           if (value === "false") return;
2025-04-15T08:07:18.2176804Z 
2025-04-15T08:07:18.2176885Z           if (key === "cpu_frequency") {
2025-04-15T08:07:18.2176996Z             value = (dataObject[key] / 1e9).toFixed(2) + " GHz";
2025-04-15T08:07:18.2177065Z           } else if (
2025-04-15T08:07:18.2177135Z             key === "ram" ||
2025-04-15T08:07:18.2177202Z             key === "disk" ||
2025-04-15T08:07:18.2177278Z             key === "disk_used" ||
2025-04-15T08:07:18.2177347Z             key === "disk_max"
2025-04-15T08:07:18.2177416Z           ) {
2025-04-15T08:07:18.2177509Z             value = formatBytes(dataObject[key]);
2025-04-15T08:07:18.2177574Z           } else if (
2025-04-15T08:07:18.2177650Z             key === "samples" ||
2025-04-15T08:07:18.2177742Z             key === "currently_collected_metrics"
2025-04-15T08:07:18.2177806Z           ) {
2025-04-15T08:07:18.2177911Z             value = formatLargeNumbers(dataObject[key]);
2025-04-15T08:07:18.2178005Z           } else if (key === "from" || key === "to") {
2025-04-15T08:07:18.2178105Z             value = formatTimestamp(dataObject[key]);
2025-04-15T08:07:18.2178170Z           } else if (
2025-04-15T08:07:18.2178246Z             key === "retention" ||
2025-04-15T08:07:18.2178328Z             key === "expected_retention" ||
2025-04-15T08:07:18.2178410Z             key === "requested_retention"
2025-04-15T08:07:18.2178471Z           ) {
2025-04-15T08:07:18.2178596Z             value = formatDuration(dataObject[key], shortFormat);
2025-04-15T08:07:18.2178689Z           } else if (key === "disk_percent") {
2025-04-15T08:07:18.2178887Z             const roundedValue = Math.round(dataObject[key]); // Round the percentage value
2025-04-15T08:07:18.2179114Z             if (usePercentageBar) {
2025-04-15T08:07:18.2179242Z               setPercentageBarWidth(containerId, roundedValue);
2025-04-15T08:07:18.2179388Z               return; // No need to create key-value pair for percentage bar
2025-04-15T08:07:18.2179452Z             } else {
2025-04-15T08:07:18.2179591Z               value = roundedValue + "%"; // Append "%" to the rounded value
2025-04-15T08:07:18.2179654Z             }
2025-04-15T08:07:18.2179713Z           }
2025-04-15T08:07:18.2179718Z 
2025-04-15T08:07:18.2179796Z           const div = getDOM({
2025-04-15T08:07:18.2179864Z             tag: "div",
2025-04-15T08:07:18.2179946Z             classList: "key-value",
2025-04-15T08:07:18.2180014Z             children: [
2025-04-15T08:07:18.2180076Z               {
2025-04-15T08:07:18.2180155Z                 tag: "span",
2025-04-15T08:07:18.2180333Z                 innerText: key.charAt(0).toUpperCase() + key.slice(1).replace(/_/g, " ")
2025-04-15T08:07:18.2180401Z               },
2025-04-15T08:07:18.2180469Z               {
2025-04-15T08:07:18.2180538Z                 tag: "span",
2025-04-15T08:07:18.2180616Z                 innerText: value,
2025-04-15T08:07:18.2180698Z                 condition: value !== "true"
2025-04-15T08:07:18.2180764Z               }
2025-04-15T08:07:18.2180825Z             ]
2025-04-15T08:07:18.2180884Z           });
2025-04-15T08:07:18.2180888Z 
2025-04-15T08:07:18.2180979Z           container.appendChild(div);
2025-04-15T08:07:18.2181040Z         }
2025-04-15T08:07:18.2181103Z       });
2025-04-15T08:07:18.2181164Z     }
2025-04-15T08:07:18.2181168Z 
2025-04-15T08:07:18.2181270Z     const setupCollectedMetrics = data => {
2025-04-15T08:07:18.2181351Z       const agent = data?.agents?.[0]
2025-04-15T08:07:18.2181538Z       const metricsFromDbSize = agent?.db_size?.[0]?.currently_collected_metrics
2025-04-15T08:07:18.2181946Z       const collectedMetrics = metricsFromDbSize !== undefined ? metricsFromDbSize : agent?.metrics?.collected;
2025-04-15T08:07:18.2182100Z       const container = document.getElementById("collectedMetrics");
2025-04-15T08:07:18.2193216Z       if (collectedMetrics === undefined || !container) return;
2025-04-15T08:07:18.2193249Z 
2025-04-15T08:07:18.2193397Z       const div = getDOM({
2025-04-15T08:07:18.2193475Z         tag: "div",
2025-04-15T08:07:18.2193589Z         classList: "key-value",
2025-04-15T08:07:18.2193658Z         children: [
2025-04-15T08:07:18.2193728Z           {
2025-04-15T08:07:18.2193799Z             tag: "span",
2025-04-15T08:07:18.2193932Z             innerText: "Currently Collected Metrics"
2025-04-15T08:07:18.2193997Z           },
2025-04-15T08:07:18.2194059Z           {
2025-04-15T08:07:18.2194133Z             tag: "span",
2025-04-15T08:07:18.2194486Z             innerText: collectedMetrics > 99999 ? abbreviateNumber(collectedMetrics) : formatLargeNumbers(collectedMetrics),
2025-04-15T08:07:18.2194760Z             // ...(collectedMetrics > 99999 ? { dataset: { tooltip: formatLargeNumbers(collectedMetrics) } } : {})
2025-04-15T08:07:18.2194827Z           }
2025-04-15T08:07:18.2194892Z         ]
2025-04-15T08:07:18.2194953Z       });
2025-04-15T08:07:18.2194957Z 
2025-04-15T08:07:18.2195048Z       container.appendChild(div);
2025-04-15T08:07:18.2195113Z     }
2025-04-15T08:07:18.2195117Z 
2025-04-15T08:07:18.2195189Z     const buildTier = ({
2025-04-15T08:07:18.2195260Z       tier: index,
2025-04-15T08:07:18.2195329Z       granularity,
2025-04-15T08:07:18.2195391Z       metrics,
2025-04-15T08:07:18.2195463Z       samples,
2025-04-15T08:07:18.2195534Z       retention_human,
2025-04-15T08:07:18.2195617Z       expected_retention_human,
2025-04-15T08:07:18.2195697Z       requested_retention_human,
2025-04-15T08:07:18.2195764Z       disk_used,
2025-04-15T08:07:18.2195832Z       disk_percent,
2025-04-15T08:07:18.2195896Z       disk_max,
2025-04-15T08:07:18.2195966Z       ...rest
2025-04-15T08:07:18.2196025Z     }) => {
2025-04-15T08:07:18.2196330Z       const disk_used_exists = disk_used !== null && !isNaN(disk_used)
2025-04-15T08:07:18.2196659Z       const disk_max_exists = disk_max !== null && !isNaN(disk_max)
2025-04-15T08:07:18.2196665Z 
2025-04-15T08:07:18.2196750Z       const contentsStructure = {
2025-04-15T08:07:18.2196821Z         tag: "tr",
2025-04-15T08:07:18.2196897Z         children: [
2025-04-15T08:07:18.2196977Z           {
2025-04-15T08:07:18.2197051Z             tag: "td",
2025-04-15T08:07:18.2197133Z             classList: "cell-data",
2025-04-15T08:07:18.2197214Z             textContent: index
2025-04-15T08:07:18.2197275Z           },
2025-04-15T08:07:18.2197338Z           {
2025-04-15T08:07:18.2197404Z             tag: "td",
2025-04-15T08:07:18.2197488Z             classList: "cell-data",
2025-04-15T08:07:18.2197571Z             textContent: granularity
2025-04-15T08:07:18.2197635Z           },
2025-04-15T08:07:18.2197705Z           {
2025-04-15T08:07:18.2197770Z             tag: "td",
2025-04-15T08:07:18.2197872Z             classList: "cell-data section-start",
2025-04-15T08:07:18.2197940Z             children: [
2025-04-15T08:07:18.2198011Z               {
2025-04-15T08:07:18.2198088Z                 tag: "span",
2025-04-15T08:07:18.2198219Z                 textContent: abbreviateNumber(metrics),
2025-04-15T08:07:18.2198354Z                 // dataset: { tooltip: formatLargeNumbers(metrics) }
2025-04-15T08:07:18.2198432Z               }
2025-04-15T08:07:18.2198494Z             ]
2025-04-15T08:07:18.2198557Z           },
2025-04-15T08:07:18.2198617Z           {
2025-04-15T08:07:18.2198685Z             tag: "td",
2025-04-15T08:07:18.2198764Z             classList: "cell-data",
2025-04-15T08:07:18.2198832Z             children: [
2025-04-15T08:07:18.2198896Z               {
2025-04-15T08:07:18.2198964Z                 tag: "span",
2025-04-15T08:07:18.2199069Z                 textContent: abbreviateNumber(samples),
2025-04-15T08:07:18.2199310Z                 // dataset: { tooltip: formatLargeNumbers(samples) }
2025-04-15T08:07:18.2199380Z               }
2025-04-15T08:07:18.2199442Z             ]
2025-04-15T08:07:18.2199503Z           },
2025-04-15T08:07:18.2199576Z           {
2025-04-15T08:07:18.2199643Z             tag: "td",
2025-04-15T08:07:18.2199743Z             classList: "cell-data section-start",
2025-04-15T08:07:18.2199838Z             textContent: retention_human || "-"
2025-04-15T08:07:18.2199898Z           },
2025-04-15T08:07:18.2199963Z           {
2025-04-15T08:07:18.2200029Z             tag: "td",
2025-04-15T08:07:18.2200112Z             classList: "cell-data",
2025-04-15T08:07:18.2200224Z             textContent: expected_retention_human || "-"
2025-04-15T08:07:18.2200286Z           },
2025-04-15T08:07:18.2200351Z           {
2025-04-15T08:07:18.2200419Z             tag: "td",
2025-04-15T08:07:18.2200501Z             classList: "cell-data",
2025-04-15T08:07:18.2200612Z             textContent: requested_retention_human || "-"
2025-04-15T08:07:18.2200689Z           },
2025-04-15T08:07:18.2200751Z           {
2025-04-15T08:07:18.2200816Z             tag: "td",
2025-04-15T08:07:18.2200912Z             classList: "cell-data section-start",
2025-04-15T08:07:18.2200988Z             children: [
2025-04-15T08:07:18.2201052Z               {
2025-04-15T08:07:18.2201177Z                 className: "progress-indicator flex flex-col",
2025-04-15T08:07:18.2201248Z                 children: [
2025-04-15T08:07:18.2201315Z                   {
2025-04-15T08:07:18.2201389Z                     tag: "span",
2025-04-15T08:07:18.2201551Z                     textContent: disk_used_exists ? formatBytes(disk_used) : "-"
2025-04-15T08:07:18.2201617Z                   },
2025-04-15T08:07:18.2201700Z                   ...(disk_used_exists ? [{
2025-04-15T08:07:18.2201814Z                     className: "progress-bar-container",
2025-04-15T08:07:18.2201888Z                     children: [
2025-04-15T08:07:18.2201958Z                       {
2025-04-15T08:07:18.2222685Z                         className: "progress-bar",
2025-04-15T08:07:18.2222782Z                         dataset: {
2025-04-15T08:07:18.2222873Z                           fill: disk_percent
2025-04-15T08:07:18.2223083Z                         }
2025-04-15T08:07:18.2223151Z                       }
2025-04-15T08:07:18.2223213Z                     ]
2025-04-15T08:07:18.2223279Z                   }] : [])
2025-04-15T08:07:18.2223340Z                 ]
2025-04-15T08:07:18.2223398Z               }
2025-04-15T08:07:18.2223461Z             ]
2025-04-15T08:07:18.2223519Z           },
2025-04-15T08:07:18.2223579Z           {
2025-04-15T08:07:18.2223647Z             tag: "td",
2025-04-15T08:07:18.2223727Z             classList: "cell-data",
2025-04-15T08:07:18.2223877Z             textContent: disk_max_exists ? formatBytes(disk_max) : "-"
2025-04-15T08:07:18.2223939Z           }
2025-04-15T08:07:18.2224000Z         ]
2025-04-15T08:07:18.2224061Z       }
2025-04-15T08:07:18.2224065Z 
2025-04-15T08:07:18.2224163Z       return getDOM(contentsStructure);
2025-04-15T08:07:18.2224222Z     }
2025-04-15T08:07:18.2224226Z 
2025-04-15T08:07:18.2224302Z     const buildTiers = () => {
2025-04-15T08:07:18.2224403Z       const tiers = data.agents[0].db_size || [];
2025-04-15T08:07:18.2224622Z       const placeholder = document.getElementById("tiers-table-data-placeholder");
2025-04-15T08:07:18.2224717Z       if (placeholder && !!tiers.length) {
2025-04-15T08:07:18.2224801Z         const rows = tiers.map(buildTier)
2025-04-15T08:07:18.2224887Z         placeholder.replaceWith(...rows);
2025-04-15T08:07:18.2224949Z       }
2025-04-15T08:07:18.2224953Z 
2025-04-15T08:07:18.2225032Z       return Promise.resolve()
2025-04-15T08:07:18.2225094Z     }
2025-04-15T08:07:18.2225099Z 
2025-04-15T08:07:18.2225185Z     const setupProgressBars = () => {
2025-04-15T08:07:18.2225338Z       document.querySelectorAll(".progress-bar").forEach(el => {
2025-04-15T08:07:18.2225417Z         const fill = el.dataset.fill
2025-04-15T08:07:18.2225612Z         el.style.width = `${fill}%`
2025-04-15T08:07:18.2225682Z       })
2025-04-15T08:07:18.2225738Z     }
2025-04-15T08:07:18.2225743Z 
2025-04-15T08:07:18.2225912Z     createKeyValuePairs("kernel", data.agents[0].application.os, [
2025-04-15T08:07:18.2225980Z       "kernel",
2025-04-15T08:07:18.2226041Z     ]);
2025-04-15T08:07:18.2226493Z     createKeyValuePairs("kernelVersion", data.agents[0].application.os, [
2025-04-15T08:07:18.2226569Z       "kernel_version",
2025-04-15T08:07:18.2226632Z     ]);
2025-04-15T08:07:18.2226797Z     createKeyValuePairs("id", data.agents[0].application.os, ["id"]);
2025-04-15T08:07:18.2226956Z     createKeyValuePairs("os", data.agents[0].application.os, ["os"]);
2025-04-15T08:07:18.2226964Z 
2025-04-15T08:07:18.2227141Z     createKeyValuePairs("package", data.agents[0].application.package, [
2025-04-15T08:07:18.2227204Z       "version",
2025-04-15T08:07:18.2227263Z     ]);
2025-04-15T08:07:18.2227340Z     createKeyValuePairs(
2025-04-15T08:07:18.2227414Z       "directories",
2025-04-15T08:07:18.2227510Z       data.agents[0].application.directories
2025-04-15T08:07:18.2227571Z     );
2025-04-15T08:07:18.2227698Z     createKeyValuePairs("server", data.agents[0], ["nm"]);
2025-04-15T08:07:18.2227860Z     createKeyValuePairs("cpuCores", data.agents[0].application.hw, [
2025-04-15T08:07:18.2227928Z       "cpu_cores",
2025-04-15T08:07:18.2227986Z     ]);
2025-04-15T08:07:18.2228159Z     createKeyValuePairs("cpuFrequency", data.agents[0].application.hw, [
2025-04-15T08:07:18.2228226Z       "cpu_frequency",
2025-04-15T08:07:18.2228283Z     ]);
2025-04-15T08:07:18.2228447Z     createKeyValuePairs("ram", data.agents[0].application.hw, ["ram"]);
2025-04-15T08:07:18.2228615Z     createKeyValuePairs("disk", data.agents[0].application.hw, ["disk"]);
2025-04-15T08:07:18.2228801Z     createKeyValuePairs("cpuArchitecture", data.agents[0].application.hw, [
2025-04-15T08:07:18.2228874Z       "cpu_architecture",
2025-04-15T08:07:18.2228935Z     ]);
2025-04-15T08:07:18.2229114Z     createKeyValuePairs("virtualization", data.agents[0].application.hw, [
2025-04-15T08:07:18.2229185Z       "virtualization",
2025-04-15T08:07:18.2229245Z     ]);
2025-04-15T08:07:18.2229409Z     createKeyValuePairs("cloud_status", data.agents[0].cloud, ["status"]);
2025-04-15T08:07:18.2229690Z     createKeyValuePairs("nodes_streaming", data.agents[0].nodes);
2025-04-15T08:07:18.2229862Z     createKeyValuePairs("plugins", data.agents[0].application.plugins);
2025-04-15T08:07:18.2230007Z     createKeyValuePairs("libs", data.agents[0].application.libs);
2025-04-15T08:07:18.2230188Z     createKeyValuePairs("exporters", data.agents[0].application.exporters);
2025-04-15T08:07:18.2230277Z     setupCollectedMetrics(data);
2025-04-15T08:07:18.2230282Z 
2025-04-15T08:07:18.2230386Z     buildTiers().then(() => setupProgressBars())
2025-04-15T08:07:18.2230390Z 
2025-04-15T08:07:18.2230468Z     return Promise.resolve();
2025-04-15T08:07:18.2230529Z   }
2025-04-15T08:07:18.2230533Z 
2025-04-15T08:07:18.2230609Z   const initTooltips = () => {
2025-04-15T08:07:18.2230743Z     const tooltip = document.getElementById("tooltip");
2025-04-15T08:07:18.2230813Z     if (!tooltip) return;
2025-04-15T08:07:18.2230818Z 
2025-04-15T08:07:18.2231175Z     document.querySelectorAll("[data-tooltip]").forEach(elem => {
2025-04-15T08:07:18.2231326Z       elem.addEventListener("mouseenter", () => {
2025-04-15T08:07:18.2231423Z         const content = elem.dataset.tooltip;
2025-04-15T08:07:18.2231529Z         const rect = elem.getBoundingClientRect();
2025-04-15T08:07:18.2231611Z         const top = rect.bottom + 10;
2025-04-15T08:07:18.2231684Z         const left = rect.x;
2025-04-15T08:07:18.2231769Z         tooltip.textContent = content;
2025-04-15T08:07:18.2231853Z         tooltip.style.top = `${top}px`;
2025-04-15T08:07:18.2231940Z         tooltip.style.left = `${left}px`;
2025-04-15T08:07:18.2232027Z         tooltip.style.display = "block";
2025-04-15T08:07:18.2232089Z       });
2025-04-15T08:07:18.2232093Z 
2025-04-15T08:07:18.2232326Z       elem.addEventListener("mouseleave", () => {
2025-04-15T08:07:18.2232406Z         tooltip.textContent = "";
2025-04-15T08:07:18.2232492Z         tooltip.style.display = "none";
2025-04-15T08:07:18.2232549Z       })
2025-04-15T08:07:18.2232615Z     })
2025-04-15T08:07:18.2232675Z   }
2025-04-15T08:07:18.2232679Z 
2025-04-15T08:07:18.2232737Z   /**
2025-04-15T08:07:18.2232835Z    * Get agent info and initialize splash screen
2025-04-15T08:07:18.2232892Z    */
2025-04-15T08:07:18.2232979Z   const initSplashScreen = async () => {
2025-04-15T08:07:18.2233117Z     const msgSignIn = document.getElementById("msgSignIn");
2025-04-15T08:07:18.2233242Z     const btnSignIn = document.getElementById("btnSignIn");
2025-04-15T08:07:18.2233341Z     msgSignIn.textContent = "Please wait..."
2025-04-15T08:07:18.2233427Z     btnSignIn.style.display = "none"
2025-04-15T08:07:18.2233432Z 
2025-04-15T08:07:18.2233523Z     const agentInfo = await getAgentInfo()
2025-04-15T08:07:18.2233528Z 
2025-04-15T08:07:18.2233881Z     if (!agentInfo || !Array.isArray(agentInfo.agents) || !agentInfo.agents[0]) return Promise.reject({ message: "No agent data available." })
2025-04-15T08:07:18.2233891Z 
2025-04-15T08:07:18.2234002Z     const agent = (agentInfo?.agents || [])[0] || {}
2025-04-15T08:07:18.2234113Z     const status = agent.cloud && agent.cloud.status
2025-04-15T08:07:18.2234225Z     const claimId = agent.cloud && agent.cloud.claim_id
2025-04-15T08:07:18.2234335Z     const cloudUrl = agent.cloud && agent.cloud.url
2025-04-15T08:07:18.2234339Z 
2025-04-15T08:07:18.2234429Z     window.localNetdataRegistry = {
2025-04-15T08:07:18.2234505Z       hostname: agent.nm,
2025-04-15T08:07:18.2234570Z       mg: agent.mg,
2025-04-15T08:07:18.2234636Z       nd: agent.nd,
2025-04-15T08:07:18.2234705Z       claimId: claimId,
2025-04-15T08:07:18.2234784Z       xNetdataAuthHeader: true
2025-04-15T08:07:18.2234847Z     }
2025-04-15T08:07:18.2234851Z 
2025-04-15T08:07:18.2235033Z     window.envSettings.cloudUrl = cloudUrl || window.envSettings.cloudUrl
2025-04-15T08:07:18.2235208Z     window.envSettings.apiUrl = cloudUrl || window.envSettings.apiUrl
2025-04-15T08:07:18.2235212Z 
2025-04-15T08:07:18.2235363Z     const isCloudSignedIn = !!localStorage.getItem(CLOUD_TOKEN_KEY)
2025-04-15T08:07:18.2235451Z 
2025-04-15T08:07:18.2235532Z     if (!isCloudSignedIn) {
2025-04-15T08:07:18.2235619Z       msgSignIn.style.display = "inline"
2025-04-15T08:07:18.2235744Z       msgSignIn.textContent = "Please sign-in to continue"
2025-04-15T08:07:18.2235836Z       btnSignIn.style.display = "block"
2025-04-15T08:07:18.2235898Z     }
2025-04-15T08:07:18.2235905Z 
2025-04-15T08:07:18.2235988Z     initMetrics(agentInfo)
2025-04-15T08:07:18.2235992Z 
2025-04-15T08:07:18.2236403Z     if (!claimId && isCloudSignedIn && !window.envSettings.isLocal) {
2025-04-15T08:07:18.2236503Z       setShouldClaimStatus(true);
2025-04-15T08:07:18.2236583Z       prepareClaiming(agent)
2025-04-15T08:07:18.2236687Z       return Promise.resolve({ stopLoading: true })
2025-04-15T08:07:18.2236758Z     }
2025-04-15T08:07:18.2236762Z 
2025-04-15T08:07:18.2236842Z     let me = await checkMe(agent.mg)
2025-04-15T08:07:18.2236846Z 
2025-04-15T08:07:18.2237028Z     if (isCloudSignedIn && agent.nd && (me.auth === "none" || me.auth === "god")) {
2025-04-15T08:07:18.2237243Z       await getAgentToken({ mg: agent.mg, nd: agent.nd, claimId: agent.cloud.claim_id }, agent)
2025-04-15T08:07:18.2237326Z       me = await checkMe(agent.mg)
2025-04-15T08:07:18.2237385Z     }
2025-04-15T08:07:18.2237389Z 
2025-04-15T08:07:18.2237546Z     const claimStatusesToProceed = ["online", "indirect", "offline"]
2025-04-15T08:07:18.2237555Z 
2025-04-15T08:07:18.2237742Z     if ((me.auth === "bearer" || me.auth === "god") && claimStatusesToProceed.includes(status)) {
2025-04-15T08:07:18.2237842Z       await fetchUserAccess(agent.mg, agent.nd)
2025-04-15T08:07:18.2237931Z       return loadDashboard()
2025-04-15T08:07:18.2238026Z     } else if (window.envSettings.isLocal) {
2025-04-15T08:07:18.2238109Z       return loadDashboard()
2025-04-15T08:07:18.2238328Z     } else {
2025-04-15T08:07:18.2238425Z       await fetchUserAccess(agent.mg, agent.nd)
2025-04-15T08:07:18.2238488Z     }
2025-04-15T08:07:18.2238492Z 
2025-04-15T08:07:18.2238566Z     if (!isCloudSignedIn) {
2025-04-15T08:07:18.2238657Z       setupOptOutMessage(agent)
2025-04-15T08:07:18.2238762Z       return Promise.resolve({ stopLoading: true })
2025-04-15T08:07:18.2238825Z     }
2025-04-15T08:07:18.2238829Z 
2025-04-15T08:07:18.2238905Z     return Promise.resolve()
2025-04-15T08:07:18.2238965Z   }
2025-04-15T08:07:18.2238969Z 
2025-04-15T08:07:18.2239053Z   // =============================================== //
2025-04-15T08:07:18.2239058Z 
2025-04-15T08:07:18.2239181Z   document.addEventListener("DOMContentLoaded", () => {
2025-04-15T08:07:18.2239249Z     initGrid();
2025-04-15T08:07:18.2239336Z     initPrimaryButtonHover();
2025-04-15T08:07:18.2239405Z     toggleTab(1);
2025-04-15T08:07:18.2239470Z     initTabs();
2025-04-15T08:07:18.2239475Z 
2025-04-15T08:07:18.2239617Z     fetchRegistryInfo().then(initSplashScreen).then(data => {
2025-04-15T08:07:18.2239703Z       if (data?.stopLoading) {
2025-04-15T08:07:18.2239773Z         stopLoading()
2025-04-15T08:07:18.2239838Z       }
2025-04-15T08:07:18.2239909Z       initTooltips()
2025-04-15T08:07:18.2239977Z     }).catch(err => {
2025-04-15T08:07:18.2240064Z       showErrorMessage(err?.message)
2025-04-15T08:07:18.2240125Z     })
2025-04-15T08:07:18.2241019Z   });</script></html><!doctype html><html lang="en" dir="ltr"><head><meta charset="utf-8"/><title>Netdata</title><script>const CONFIG = {
2025-04-15T08:07:18.2241086Z       cache: {
2025-04-15T08:07:18.2241164Z         agentInfo: false,
2025-04-15T08:07:18.2241235Z         cloudToken: true,
2025-04-15T08:07:18.2241304Z         agentToken: true,
2025-04-15T08:07:18.2241368Z       }
2025-04-15T08:07:18.2241427Z     }
2025-04-15T08:07:18.2241430Z 
2025-04-15T08:07:18.2241583Z     // STATE MANAGEMENT ======================================================================== //
2025-04-15T08:07:18.2241656Z     const state = {
2025-04-15T08:07:18.2241724Z       loading: {
2025-04-15T08:07:18.2241792Z         spaces: false,
2025-04-15T08:07:18.2241857Z         rooms: false,
2025-04-15T08:07:18.2241938Z         claimingToken: false,
2025-04-15T08:07:18.2242133Z         claimingAgent: false
2025-04-15T08:07:18.2242198Z       },
2025-04-15T08:07:18.2242262Z       claim: {
2025-04-15T08:07:18.2242327Z         status: {},
2025-04-15T08:07:18.2242398Z         response: {},
2025-04-15T08:07:18.2242470Z         shouldClaim: false,
2025-04-15T08:07:18.2242539Z         step: 1,
2025-04-15T08:07:18.2242615Z         selectedSpaceIds: [],
2025-04-15T08:07:18.2242686Z         selectedRoomIds: [],
2025-04-15T08:07:18.2242761Z         privateKey: ""
2025-04-15T08:07:18.2242821Z       },
2025-04-15T08:07:18.2242887Z       cache: {
2025-04-15T08:07:18.2242959Z         spaces: undefined,
2025-04-15T08:07:18.2243023Z         rooms: {},
2025-04-15T08:07:18.2243113Z         claimingTokensPerSpace: {}
2025-04-15T08:07:18.2243182Z       }
2025-04-15T08:07:18.2243245Z     }
2025-04-15T08:07:18.2243249Z 
2025-04-15T08:07:18.2243336Z     const getSelectedRooms = state => {
2025-04-15T08:07:18.2243593Z       const spaceId = state.claim.selectedSpaceIds.length ? state.claim.selectedSpaceIds[0] : null;
2025-04-15T08:07:18.2243674Z       if (!spaceId) return [];
2025-04-15T08:07:18.2243780Z       if (state.claim.selectedRoomIds.length) {
2025-04-15T08:07:18.2244042Z         return state.cache?.rooms?.[spaceId]?.filter(({ id }) => state.claim.selectedRoomIds.includes(id)) || [];
2025-04-15T08:07:18.2244104Z       }
2025-04-15T08:07:18.2244172Z       return [];
2025-04-15T08:07:18.2244231Z     }
2025-04-15T08:07:18.2244235Z 
2025-04-15T08:07:18.2244305Z     const syncUI = () => {
2025-04-15T08:07:18.2244372Z       // Elements
2025-04-15T08:07:18.2244562Z       const splashMessage = document.getElementById("splashMessageContainer");
2025-04-15T08:07:18.2244742Z       const claiming = document.getElementById("claimingContentsContainer");
2025-04-15T08:07:18.2244972Z       const step1 = document.getElementById("connectionStep-1");
2025-04-15T08:07:18.2245112Z       const step2 = document.getElementById("connectionStep-2");
2025-04-15T08:07:18.2245283Z       const btnPrev = document.getElementById("btnConnectionStepPrev");
2025-04-15T08:07:18.2245441Z       const btnNext = document.getElementById("btnConnectionStepNext");
2025-04-15T08:07:18.2245570Z       const btnClaim = document.getElementById("btnClaim");
2025-04-15T08:07:18.2245727Z       const roomsSelector = document.getElementById("roomsSelector");
2025-04-15T08:07:18.2245910Z       const claimErrorMessage = document.getElementById("claimErrorMessage");
2025-04-15T08:07:18.2245914Z 
2025-04-15T08:07:18.2245979Z       // State
2025-04-15T08:07:18.2246523Z       const { spaces: spacesLoading, rooms: roomsLoading, claimingToken: claimingTokenLoading, claimingAgent: claimingAgentLoading } = state.loading;
2025-04-15T08:07:18.2246750Z       const { shouldClaim, step, selectedSpaceIds, selectedRoomIds, privateKey } = state.claim;
2025-04-15T08:07:18.2247190Z       const claimingTokenExists = state.claim.selectedSpaceIds.length ? !!state.cache.claimingTokensPerSpace[state.claim.selectedSpaceIds[0]] : false;
2025-04-15T08:07:18.2247200Z 
2025-04-15T08:07:18.2247361Z       splashMessage.style.display = !shouldClaim ? "initial" : "none";
2025-04-15T08:07:18.2247499Z       claiming.style.display = shouldClaim ? "initial" : "none";
2025-04-15T08:07:18.2247508Z 
2025-04-15T08:07:18.2247578Z       // Loading spaces
2025-04-15T08:07:18.2247643Z       if (step1) {
2025-04-15T08:07:18.2247771Z         const spacesLoader = step1.querySelector(".loader");
2025-04-15T08:07:18.2247842Z         if (spacesLoader) {
2025-04-15T08:07:18.2248007Z           spacesLoader.style.display = spacesLoading ? "initial" : "none";
2025-04-15T08:07:18.2248067Z         }
2025-04-15T08:07:18.2248128Z       }
2025-04-15T08:07:18.2248132Z 
2025-04-15T08:07:18.2248202Z       // Loading rooms
2025-04-15T08:07:18.2248275Z       if (roomsSelector) {
2025-04-15T08:07:18.2248437Z         const message = roomsSelector.querySelector(".selected-items");
2025-04-15T08:07:18.2248653Z         const selectedRoomNames = getSelectedRooms(state).map(({ name }) => name).join(", ");
2025-04-15T08:07:18.2248850Z         if (message) {
2025-04-15T08:07:18.2249088Z           message.innerText = roomsLoading ? "Loading rooms..." : (selectedRoomNames || "Select room");
2025-04-15T08:07:18.2249150Z         }
2025-04-15T08:07:18.2249214Z       }
2025-04-15T08:07:18.2249218Z 
2025-04-15T08:07:18.2249288Z       // Steps visibility
2025-04-15T08:07:18.2249413Z       step1.style.display = step == 1 ? "initial" : "none";
2025-04-15T08:07:18.2249525Z       step2.style.display = step == 2 ? "initial" : "none";
2025-04-15T08:07:18.2249528Z 
2025-04-15T08:07:18.2249593Z       // Rooms
2025-04-15T08:07:18.2249659Z       if (step == 1) {
2025-04-15T08:07:18.2249723Z         // Reset rooms
2025-04-15T08:07:18.2250077Z         const checkboxes = document.getElementById("roomsSelectorOptionsContainer").querySelectorAll('input[type="checkbox"]');
2025-04-15T08:07:18.2250173Z         checkboxes.forEach((checkbox) => {
2025-04-15T08:07:18.2250256Z           if (checkbox.checked) {
2025-04-15T08:07:18.2250343Z             checkbox.checked = false;
2025-04-15T08:07:18.2250453Z             checkbox.dispatchEvent(new Event("change"));
2025-04-15T08:07:18.2250519Z           }
2025-04-15T08:07:18.2250579Z         });
2025-04-15T08:07:18.2250644Z       }
2025-04-15T08:07:18.2250648Z 
2025-04-15T08:07:18.2250727Z       if (claimErrorMessage) {
2025-04-15T08:07:18.2250953Z         claimErrorMessage.style.display = state.claim?.response?.error ? "initial" : "none";
2025-04-15T08:07:18.2251207Z         claimErrorMessage.innerText = state.claim?.response?.error ? state.claim.response.error : "";
2025-04-15T08:07:18.2251269Z       }
2025-04-15T08:07:18.2251272Z 
2025-04-15T08:07:18.2251340Z       // Footer
2025-04-15T08:07:18.2251447Z       btnPrev.style.opacity = step == 1 ? "0" : "1";
2025-04-15T08:07:18.2251704Z       btnPrev.style.cursor = step == 1 ? "default" : "pointer";
2025-04-15T08:07:18.2251787Z       btnPrev.disabled = step == 1;
2025-04-15T08:07:18.2251920Z       btnNext.style.display = step == 1 ? "initial" : "none";
2025-04-15T08:07:18.2252036Z       btnNext.disabled = !selectedSpaceIds.length;
2025-04-15T08:07:18.2252166Z       btnClaim.style.display = step == 2 ? "initial" : "none";
2025-04-15T08:07:18.2252537Z       btnClaim.disabled = !selectedRoomIds.length || !privateKey || !claimingTokenExists || claimingTokenLoading || claimingAgentLoading;
2025-04-15T08:07:18.2252713Z       btnClaim.textContent = claimingAgentLoading ? "Claiming..." : "Claim";
2025-04-15T08:07:18.2252717Z 
2025-04-15T08:07:18.2252803Z       return Promise.resolve();
2025-04-15T08:07:18.2252862Z     }
2025-04-15T08:07:18.2252867Z 
2025-04-15T08:07:18.2252983Z     const toggleSpacesLoadingState = isLoading => {
2025-04-15T08:07:18.2253106Z       state.loading = { ...state.loading, spaces: isLoading };
2025-04-15T08:07:18.2253178Z       return syncUI();
2025-04-15T08:07:18.2253244Z     }
2025-04-15T08:07:18.2253248Z 
2025-04-15T08:07:18.2253357Z     const toggleRoomsLoadingState = isLoading => {
2025-04-15T08:07:18.2253485Z       state.loading = { ...state.loading, rooms: isLoading };
2025-04-15T08:07:18.2253553Z       return syncUI();
2025-04-15T08:07:18.2253615Z     }
2025-04-15T08:07:18.2253618Z 
2025-04-15T08:07:18.2253755Z     const toggleClaimingTokenLoadingState = isLoading => {
2025-04-15T08:07:18.2253899Z       state.loading = { ...state.loading, claimingToken: isLoading };
2025-04-15T08:07:18.2253973Z       return syncUI();
2025-04-15T08:07:18.2254033Z     }
2025-04-15T08:07:18.2254036Z 
2025-04-15T08:07:18.2254171Z     const toggleClaimingAgentLoadingState = isLoading => {
2025-04-15T08:07:18.2254308Z       state.loading = { ...state.loading, claimingAgent: isLoading };
2025-04-15T08:07:18.2254380Z       return syncUI();
2025-04-15T08:07:18.2254440Z     }
2025-04-15T08:07:18.2254444Z 
2025-04-15T08:07:18.2254557Z     const setShouldClaimStatus = shouldClaim => {
2025-04-15T08:07:18.2254664Z       state.claim = { ...state.claim, shouldClaim };
2025-04-15T08:07:18.2254732Z       return syncUI();
2025-04-15T08:07:18.2254880Z     }
2025-04-15T08:07:18.2254883Z 
2025-04-15T08:07:18.2254977Z     const setClaimStatusState = status => {
2025-04-15T08:07:18.2255074Z       state.claim = { ...state.claim, status };
2025-04-15T08:07:18.2255141Z       return syncUI();
2025-04-15T08:07:18.2255199Z     }
2025-04-15T08:07:18.2255203Z 
2025-04-15T08:07:18.2255305Z     const setClaimResponseState = response => {
2025-04-15T08:07:18.2255398Z       state.claim = { ...state.claim, response };
2025-04-15T08:07:18.2255468Z       return syncUI();
2025-04-15T08:07:18.2255527Z     }
2025-04-15T08:07:18.2255531Z 
2025-04-15T08:07:18.2255621Z     const setClaimingStep = async arg => {
2025-04-15T08:07:18.2255788Z       const nextStep = typeof arg == "function" ? arg(state.claim.step) : arg;
2025-04-15T08:07:18.2256046Z       state.claim = { ...state.claim, step: nextStep, ...(nextStep == 1 ? { selectedRoomIds: [], privateKey: "" } : {}) };
2025-04-15T08:07:18.2256226Z       await syncUI();
2025-04-15T08:07:18.2256316Z       return Promise.resolve(nextStep);
2025-04-15T08:07:18.2256383Z     }
2025-04-15T08:07:18.2256387Z 
2025-04-15T08:07:18.2256483Z     const setSelectedSpacesStatus = arg => {
2025-04-15T08:07:18.2256766Z       const spaceIds = typeof arg == "function" ? arg(state.claim.selectedSpaceIds) : Array.isArray(arg) ? arg : [arg];
2025-04-15T08:07:18.2257006Z       state.claim = { ...state.claim, selectedSpaceIds: spaceIds, selectedRoomIds: [], privateKey: "" };
2025-04-15T08:07:18.2257074Z       return syncUI();
2025-04-15T08:07:18.2257137Z     }
2025-04-15T08:07:18.2257141Z 
2025-04-15T08:07:18.2257234Z     const setSelectedRoomsStatus = arg => {
2025-04-15T08:07:18.2257506Z       const roomIds = typeof arg == "function" ? arg(state.claim.selectedRoomIds) : Array.isArray(arg) ? arg : [arg];
2025-04-15T08:07:18.2257776Z       state.claim = { ...state.claim, selectedRoomIds: roomIds };
2025-04-15T08:07:18.2257848Z       return syncUI();
2025-04-15T08:07:18.2257910Z     }
2025-04-15T08:07:18.2257913Z 
2025-04-15T08:07:18.2258037Z     const setClaimingPrivateKeyState = (value = "") => {
2025-04-15T08:07:18.2258159Z       state.claim = { ...state.claim, privateKey: value };
2025-04-15T08:07:18.2258225Z       return syncUI();
2025-04-15T08:07:18.2258290Z     }
2025-04-15T08:07:18.2258294Z 
2025-04-15T08:07:18.2258379Z     const cacheSpaces = (spaces) => {
2025-04-15T08:07:18.2258477Z       if (!spaces) return Promise.resolve([]);
2025-04-15T08:07:18.2258560Z       state.cache.spaces = spaces;
2025-04-15T08:07:18.2258644Z       return Promise.resolve(spaces);
2025-04-15T08:07:18.2258706Z     }
2025-04-15T08:07:18.2258709Z 
2025-04-15T08:07:18.2258798Z     const cacheRooms = (spaceId, rooms) => {
2025-04-15T08:07:18.2258892Z       if (!spaceId) return Promise.resolve([]);
2025-04-15T08:07:18.2259035Z       state.cache.rooms = { ...state.cache.rooms, [spaceId]: rooms };
2025-04-15T08:07:18.2259120Z       return Promise.resolve(rooms);
2025-04-15T08:07:18.2259182Z     }
2025-04-15T08:07:18.2259186Z 
2025-04-15T08:07:18.2259294Z     const cacheClaimingToken = (spaceId, token) => {
2025-04-15T08:07:18.2259409Z       if (!spaceId || !token) return Promise.resolve();
2025-04-15T08:07:18.2259677Z       state.cache.claimingTokensPerSpace = { ...state.cache.claimingTokensPerSpace, [spaceId]: token };
2025-04-15T08:07:18.2259766Z       return Promise.resolve(token);
2025-04-15T08:07:18.2259825Z     }
2025-04-15T08:07:18.2259829Z 
2025-04-15T08:07:18.2259924Z     // ========================================================================================= //
2025-04-15T08:07:18.2259933Z 
2025-04-15T08:07:18.2260172Z     const pathsRegex = /\/(spaces|nodes|overview|alerts|dashboards|anomalies|events|cloud|v3)\/?.*/;
2025-04-15T08:07:18.2260254Z     function getBasename() {
2025-04-15T08:07:18.2260477Z       return window.location.origin + window.location.pathname.replace(pathsRegex, "")
2025-04-15T08:07:18.2260544Z     }
2025-04-15T08:07:18.2260547Z 
2025-04-15T08:07:18.2260636Z     let goToOld = function(path) {
2025-04-15T08:07:18.2260723Z       let goToUrl = getBasename() + path;
2025-04-15T08:07:18.2260932Z       if (path !== "/v3") {
2025-04-15T08:07:18.2261173Z         let pathsRegex = /(\/(spaces|nodes|overview|alerts|dashboards|anomalies|events|cloud|v3)\/?.*)/
2025-04-15T08:07:18.2261368Z         if (pathsRegex.test(window.location.origin + window.location.pathname)) {
2025-04-15T08:07:18.2261611Z           goToUrl = (window.location.origin + window.location.pathname).replace(pathsRegex, "/v3$1")
2025-04-15T08:07:18.2261673Z         }
2025-04-15T08:07:18.2261737Z       }
2025-04-15T08:07:18.2261934Z       window.location.replace(ensureOneSlash(goToUrl + window.location.search))
2025-04-15T08:07:18.2261994Z     }
2025-04-15T08:07:18.2261998Z 
2025-04-15T08:07:18.2262142Z     const searchParams = new URLSearchParams(location.search);
2025-04-15T08:07:18.2262225Z     window.envSettings = {
2025-04-15T08:07:18.2262298Z       isAgent: true,
2025-04-15T08:07:18.2262401Z       apiUrl: "https://app.netdata.cloud",
2025-04-15T08:07:18.2262506Z       cloudUrl: "https://app.netdata.cloud",
2025-04-15T08:07:18.2262591Z       demoSlug: "netdata-demo",
2025-04-15T08:07:18.2264812Z       demoFavourites: {"postgresql":["Applications-0_Postgres-1"],"redis":["Applications-0_Redis-1"],"dns-query":["Applications-0_CoreDNS-1"],"http-endpoints":["Applications-0_HTTP_Checks-1"],"nginx":["Applications-0_web_log-1","Applications-0_Nginx-1"],"apache":["Applications-0_Apache-1"],"host-reachability":["Synthetic_Checks-0"],"cassandra":["Applications-0_Cassandra-1"],"coredns":["Applications-0_CoreDNS-1"],"logind":["Applications-0_systemd_LoginD-1"],"iis":["Applications-0_MS_IIS-1"],"active-directory":["Applications-0_MS_Active_Directory-1"],"windows":["Applications-0_Windows-1","Applications-0_MS_Active_Directory-1","Applications-0_MS_IIS-1","Applications-0_MS_SQL-1","Applications-0_MS_Exchange-1","Applications-0__NET_Framework-1"],"docker":["Containers___VMs-0"],"ups":["Hardware___Sensors-0_NUT_UPS-1"]},
2025-04-15T08:07:18.2265090Z       webpackPublicPath: "https://app.netdata.cloud" || (getBasename() + "/v3"),
2025-04-15T08:07:18.2265229Z       agentApiUrl: searchParams.get("agent") || getBasename(),
2025-04-15T08:07:18.2265406Z       posthogToken: "phc_hnhlqe6D2Q4IcQNrFItaqdXJAxQ8RcHkPAFAp74pubv",
2025-04-15T08:07:18.2265476Z       version: "7.48.0",
2025-04-15T08:07:18.2265549Z       tracking: !false,
2025-04-15T08:07:18.2265634Z       cookieDomain: ".netdata.cloud",
2025-04-15T08:07:18.2265706Z       onprem: false,
2025-04-15T08:07:18.2265775Z       isLocal: false,
2025-04-15T08:07:18.2265852Z       nodeEnv: "production"
2025-04-15T08:07:18.2265911Z     }
2025-04-15T08:07:18.2265915Z 
2025-04-15T08:07:18.2265993Z     window.visitedNodes = []
2025-04-15T08:07:18.2265998Z 
2025-04-15T08:07:18.2266182Z     const getHashValueByKey = key => {
2025-04-15T08:07:18.2266412Z       return location.hash.substr(1).split("&").find(pair => pair.split("=")[0] == key)?.split("=")[1]
2025-04-15T08:07:18.2266480Z     }
2025-04-15T08:07:18.2266484Z 
2025-04-15T08:07:18.2266552Z     // Check cloud token
2025-04-15T08:07:18.2266647Z     const CLOUD_TOKEN_KEY = "netdataJWT"
2025-04-15T08:07:18.2266772Z     const redirectUri = getHashValueByKey("redirect_uri")
2025-04-15T08:07:18.2266864Z     const token = getHashValueByKey("token")
2025-04-15T08:07:18.2266934Z     if (token) {
2025-04-15T08:07:18.2267038Z       localStorage.setItem(CLOUD_TOKEN_KEY, token)
2025-04-15T08:07:18.2267103Z     }
2025-04-15T08:07:18.2267171Z     if (redirectUri) {
2025-04-15T08:07:18.2267232Z       try {
2025-04-15T08:07:18.2267355Z         const decodedUrl = decodeURIComponent(redirectUri)
2025-04-15T08:07:18.2267503Z         const parsedUrl = new URL(decodedUrl, window.location.origin)
2025-04-15T08:07:18.2267507Z 
2025-04-15T08:07:18.2267624Z         if (parsedUrl.origin === window.location.origin) {
2025-04-15T08:07:18.2267726Z           window.location.href = parsedUrl.href
2025-04-15T08:07:18.2267793Z         } else {
2025-04-15T08:07:18.2267990Z           console.error("Blocked potentially unsafe redirect to: ", decodedUrl)
2025-04-15T08:07:18.2268191Z         }
2025-04-15T08:07:18.2268263Z       } catch (error) {
2025-04-15T08:07:18.2268386Z         console.error("Invalid URL detected: ", error.message)
2025-04-15T08:07:18.2268450Z       }
2025-04-15T08:07:18.2268541Z     }</script><style>body.netdata-splash {
2025-04-15T08:07:18.2268607Z       height: 100%;
2025-04-15T08:07:18.2268678Z       overflow: hidden;
2025-04-15T08:07:18.2268759Z       background: var(--main-bg);
2025-04-15T08:07:18.2268826Z       margin: 0;
2025-04-15T08:07:18.2268890Z       padding: 0;
2025-04-15T08:07:18.2268963Z       color: var(--text);
2025-04-15T08:07:18.2269134Z       font-family: system-ui, "Segoe UI", Roboto, Helvetica, Arial, sans-serif,
2025-04-15T08:07:18.2269265Z         "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
2025-04-15T08:07:18.2269335Z     }
2025-04-15T08:07:18.2269339Z 
2025-04-15T08:07:18.2269401Z     :root {
2025-04-15T08:07:18.2269486Z       --scrollbar-thumb: #fcfffd;
2025-04-15T08:07:18.2269559Z       --primary: #00ab44;
2025-04-15T08:07:18.2269633Z       --text: #93a4a4;
2025-04-15T08:07:18.2269710Z       --text-dark: #001107;
2025-04-15T08:07:18.2269784Z       --text-light: #fcfffd;
2025-04-15T08:07:18.2269859Z       --menu-item: #5b6c6c;
2025-04-15T08:07:18.2269928Z       --main-bg: #000;
2025-04-15T08:07:18.2269998Z       --highlight: #00ef5f;
2025-04-15T08:07:18.2270073Z       --tab-active: #ddffeb;
2025-04-15T08:07:18.2270143Z       --tab-hover: #d2d9d9;
2025-04-15T08:07:18.2270224Z       --panel-bg: transparent;
2025-04-15T08:07:18.2270298Z       --font-small: 14px;
2025-04-15T08:07:18.2270378Z       --font-medium: 16px;
2025-04-15T08:07:18.2270449Z       --row-2n: #101313;
2025-04-15T08:07:18.2270518Z       --border: #00ab4436;
2025-04-15T08:07:18.2270603Z       --border-neutral: #252c2c;
2025-04-15T08:07:18.2270798Z       --key-value-table: #93a4a4;
2025-04-15T08:07:18.2270874Z       --accent: #ddffeb;
2025-04-15T08:07:18.2270963Z       --module-height: 45vh;
2025-04-15T08:07:18.2271135Z       --list-option-bg: rgba(12, 15, 15, 0.5);
2025-04-15T08:07:18.2271300Z       --list-option-selected-bg: #000;
2025-04-15T08:07:18.2271467Z       --list-option-hover-bg: rgba(12, 15, 15, 1);
2025-04-15T08:07:18.2271603Z       --footer-height: 70px;
2025-04-15T08:07:18.2271727Z       --code-bg: #00220e;
2025-04-15T08:07:18.2271869Z       --progress-bar-height: 2px;
2025-04-15T08:07:18.2272020Z       background-color: var(--main-bg);
2025-04-15T08:07:18.2272123Z     }
2025-04-15T08:07:18.2272129Z 
2025-04-15T08:07:18.2272243Z     :root iframe {
2025-04-15T08:07:18.2272364Z       border-width: 0;
2025-04-15T08:07:18.2272474Z     }
2025-04-15T08:07:18.2272480Z 
2025-04-15T08:07:18.2272658Z     body.netdata-splash.loading .frame-right {
2025-04-15T08:07:18.2272775Z       display: none;
2025-04-15T08:07:18.2272879Z     }
2025-04-15T08:07:18.2272893Z 
2025-04-15T08:07:18.2273067Z     body.netdata-splash.loading .frame-left {
2025-04-15T08:07:18.2273209Z       grid-column: auto / span 12;
2025-04-15T08:07:18.2273310Z     }
2025-04-15T08:07:18.2273324Z 
2025-04-15T08:07:18.2273560Z     body.netdata-splash.loading .sphere-stats-container,
2025-04-15T08:07:18.2273738Z     body.netdata-splash.loading .head-summary,
2025-04-15T08:07:18.2273898Z     body.netdata-splash.loading .tabs {
2025-04-15T08:07:18.2274026Z       display: none;
2025-04-15T08:07:18.2274132Z     }
2025-04-15T08:07:18.2274140Z 
2025-04-15T08:07:18.2274338Z     body.netdata-splash.loading .loading-message {
2025-04-15T08:07:18.2274455Z       display: flex;
2025-04-15T08:07:18.2274578Z       position: absolute;
2025-04-15T08:07:18.2274696Z       inset: 0;
2025-04-15T08:07:18.2274809Z       margin: auto;
2025-04-15T08:07:18.2274939Z       align-items: center;
2025-04-15T08:07:18.2275073Z       justify-content: center;
2025-04-15T08:07:18.2275200Z       color: var(--accent);
2025-04-15T08:07:18.2275311Z     }
2025-04-15T08:07:18.2275317Z 
2025-04-15T08:07:18.2275458Z     body.netdata-splash .error {
2025-04-15T08:07:18.2275580Z       color: #DB162F;
2025-04-15T08:07:18.2275683Z     }
2025-04-15T08:07:18.2275817Z 
2025-04-15T08:07:18.2275988Z     body.netdata-splash .loading-message {
2025-04-15T08:07:18.2276292Z       display: none;
2025-04-15T08:07:18.2276402Z     }
2025-04-15T08:07:18.2276418Z 
2025-04-15T08:07:18.2276556Z     body.netdata-splash h1 {
2025-04-15T08:07:18.2276676Z       font-size: 36px;
2025-04-15T08:07:18.2276803Z       margin-top: 8px;
2025-04-15T08:07:18.2276930Z       margin-bottom: 8px;
2025-04-15T08:07:18.2277067Z       color: var(--text-light);
2025-04-15T08:07:18.2277190Z       filter: blur(0.6px);
2025-04-15T08:07:18.2277295Z     }
2025-04-15T08:07:18.2277302Z 
2025-04-15T08:07:18.2277441Z     body.netdata-splash h2 {
2025-04-15T08:07:18.2277564Z       font-size: 16px;
2025-04-15T08:07:18.2277672Z     }
2025-04-15T08:07:18.2277678Z 
2025-04-15T08:07:18.2277817Z     body.netdata-splash h4 {
2025-04-15T08:07:18.2277933Z       font-size: 12px;
2025-04-15T08:07:18.2278068Z       margin-bottom: 12px;
2025-04-15T08:07:18.2278190Z       margin-top: 8px;
2025-04-15T08:07:18.2278301Z     }
2025-04-15T08:07:18.2278307Z 
2025-04-15T08:07:18.2278441Z     body.netdata-splash a:link,
2025-04-15T08:07:18.2278594Z     body.netdata-splash a:visited,
2025-04-15T08:07:18.2278737Z     body.netdata-splash a:active {
2025-04-15T08:07:18.2278868Z       text-decoration: none;
2025-04-15T08:07:18.2279001Z       color: var(--primary);
2025-04-15T08:07:18.2279105Z     }
2025-04-15T08:07:18.2279112Z 
2025-04-15T08:07:18.2279259Z     body.netdata-splash a:hover {
2025-04-15T08:07:18.2279386Z       color: var(--highlight);
2025-04-15T08:07:18.2279487Z     }
2025-04-15T08:07:18.2279500Z 
2025-04-15T08:07:18.2279643Z     body.netdata-splash canvas {
2025-04-15T08:07:18.2279759Z       display: block;
2025-04-15T08:07:18.2279869Z     }
2025-04-15T08:07:18.2279875Z 
2025-04-15T08:07:18.2280395Z     body.netdata-splash code {
2025-04-15T08:07:18.2280537Z       background: var(--code-bg);
2025-04-15T08:07:18.2280665Z       color: var(--highlight);
2025-04-15T08:07:18.2280807Z       border: 1px solid var(--border);
2025-04-15T08:07:18.2280948Z       border-radius: 2px;
2025-04-15T08:07:18.2281065Z       padding: 12px;
2025-04-15T08:07:18.2281194Z       line-break: anywhere;
2025-04-15T08:07:18.2281322Z       word-break: break-all;
2025-04-15T08:07:18.2281421Z     }
2025-04-15T08:07:18.2281427Z 
2025-04-15T08:07:18.2281590Z     body.netdata-splash .text-small {
2025-04-15T08:07:18.2281710Z       font-size: 12px;
2025-04-15T08:07:18.2281820Z     }
2025-04-15T08:07:18.2281826Z 
2025-04-15T08:07:18.2281961Z     body.netdata-splash .logo {
2025-04-15T08:07:18.2282234Z       filter: drop-shadow(2px 2px 32px rgba(255, 255, 255, 0.7)) blur(1px);
2025-04-15T08:07:18.2282348Z       opacity: 0.9;
2025-04-15T08:07:18.2282461Z       width: 150px;
2025-04-15T08:07:18.2282580Z       height: 150px;
2025-04-15T08:07:18.2282692Z     }
2025-04-15T08:07:18.2282698Z 
2025-04-15T08:07:18.2282874Z     body.netdata-splash .claim-message .logo {
2025-04-15T08:07:18.2282989Z       width: 100px;
2025-04-15T08:07:18.2283103Z       height: 100px;
2025-04-15T08:07:18.2283219Z     }
2025-04-15T08:07:18.2283225Z 
2025-04-15T08:07:18.2283364Z     body.netdata-splash .grid {
2025-04-15T08:07:18.2283485Z       display: grid;
2025-04-15T08:07:18.2283617Z       grid-column-gap: 16px;
2025-04-15T08:07:18.2283748Z       grid-row-gap: 16px;
2025-04-15T08:07:18.2283909Z       grid-template-columns: repeat(12, 1fr);
2025-04-15T08:07:18.2284061Z       grid-template-rows: repeat(12, 1fr);
2025-04-15T08:07:18.2284206Z       grid-auto-rows: min-content;
2025-04-15T08:07:18.2284308Z     }
2025-04-15T08:07:18.2284314Z 
2025-04-15T08:07:18.2284483Z     body.netdata-splash .grid-columns-10 {
2025-04-15T08:07:18.2284601Z       display: grid;
2025-04-15T08:07:18.2284735Z       grid-column-gap: 16px;
2025-04-15T08:07:18.2284867Z       grid-row-gap: 16px;
2025-04-15T08:07:18.2285038Z       grid-template-columns: repeat(10, 1fr);
2025-04-15T08:07:18.2285150Z     }
2025-04-15T08:07:18.2285156Z 
2025-04-15T08:07:18.2285307Z     body.netdata-splash .col-span-1 {
2025-04-15T08:07:18.2285606Z       grid-column: auto / span 1;
2025-04-15T08:07:18.2285714Z     }
2025-04-15T08:07:18.2285720Z 
2025-04-15T08:07:18.2285860Z     body.netdata-splash .col-span-2 {
2025-04-15T08:07:18.2286009Z       grid-column: auto / span 2;
2025-04-15T08:07:18.2286248Z     }
2025-04-15T08:07:18.2286256Z 
2025-04-15T08:07:18.2286413Z     body.netdata-splash .col-span-3 {
2025-04-15T08:07:18.2286545Z       grid-column: auto / span 3;
2025-04-15T08:07:18.2286660Z     }
2025-04-15T08:07:18.2286667Z 
2025-04-15T08:07:18.2286812Z     body.netdata-splash .col-span-4 {
2025-04-15T08:07:18.2286944Z       grid-column: auto / span 4;
2025-04-15T08:07:18.2287057Z     }
2025-04-15T08:07:18.2287063Z 
2025-04-15T08:07:18.2287206Z     body.netdata-splash .col-span-5 {
2025-04-15T08:07:18.2287347Z       grid-column: auto / span 5;
2025-04-15T08:07:18.2287450Z     }
2025-04-15T08:07:18.2287457Z 
2025-04-15T08:07:18.2287606Z     body.netdata-splash .col-span-6 {
2025-04-15T08:07:18.2287736Z       grid-column: auto / span 6;
2025-04-15T08:07:18.2287849Z     }
2025-04-15T08:07:18.2287855Z 
2025-04-15T08:07:18.2288007Z     body.netdata-splash .col-span-7 {
2025-04-15T08:07:18.2288136Z       grid-column: auto / span 7;
2025-04-15T08:07:18.2288247Z     }
2025-04-15T08:07:18.2288253Z 
2025-04-15T08:07:18.2288400Z     body.netdata-splash .col-span-8 {
2025-04-15T08:07:18.2288533Z       grid-column: auto / span 8;
2025-04-15T08:07:18.2288639Z     }
2025-04-15T08:07:18.2288645Z 
2025-04-15T08:07:18.2288786Z     body.netdata-splash .col-span-9 {
2025-04-15T08:07:18.2288924Z       grid-column: auto / span 9;
2025-04-15T08:07:18.2289027Z     }
2025-04-15T08:07:18.2289033Z 
2025-04-15T08:07:18.2289191Z     body.netdata-splash .col-span-10 {
2025-04-15T08:07:18.2289324Z       grid-column: auto / span 10;
2025-04-15T08:07:18.2289597Z     }
2025-04-15T08:07:18.2289605Z 
2025-04-15T08:07:18.2289769Z     body.netdata-splash .col-span-11 {
2025-04-15T08:07:18.2289902Z       grid-column: auto / span 11;
2025-04-15T08:07:18.2290009Z     }
2025-04-15T08:07:18.2290022Z 
2025-04-15T08:07:18.2290168Z     body.netdata-splash .col-span-12 {
2025-04-15T08:07:18.2290305Z       grid-column: auto / span 12;
2025-04-15T08:07:18.2290409Z     }
2025-04-15T08:07:18.2290415Z 
2025-04-15T08:07:18.2290559Z     body.netdata-splash .col-start-1 {
2025-04-15T08:07:18.2290701Z       grid-column-start: 1;
2025-04-15T08:07:18.2290810Z     }
2025-04-15T08:07:18.2290817Z 
2025-04-15T08:07:18.2290971Z     body.netdata-splash .col-start-2 {
2025-04-15T08:07:18.2291103Z       grid-column-start: 2;
2025-04-15T08:07:18.2291212Z     }
2025-04-15T08:07:18.2291219Z 
2025-04-15T08:07:18.2291366Z     body.netdata-splash .col-start-3 {
2025-04-15T08:07:18.2291495Z       grid-column-start: 3;
2025-04-15T08:07:18.2291604Z     }
2025-04-15T08:07:18.2291609Z 
2025-04-15T08:07:18.2291762Z     body.netdata-splash .col-start-4 {
2025-04-15T08:07:18.2291897Z       grid-column-start: 4;
2025-04-15T08:07:18.2291999Z     }
2025-04-15T08:07:18.2292006Z 
2025-04-15T08:07:18.2292151Z     body.netdata-splash .col-start-5 {
2025-04-15T08:07:18.2292297Z       grid-column-start: 5;
2025-04-15T08:07:18.2292402Z     }
2025-04-15T08:07:18.2292408Z 
2025-04-15T08:07:18.2292558Z     body.netdata-splash .col-start-6 {
2025-04-15T08:07:18.2292688Z       grid-column-start: 6;
2025-04-15T08:07:18.2292800Z     }
2025-04-15T08:07:18.2292806Z 
2025-04-15T08:07:18.2292950Z     body.netdata-splash .col-start-7 {
2025-04-15T08:07:18.2293077Z       grid-column-start: 7;
2025-04-15T08:07:18.2293184Z     }
2025-04-15T08:07:18.2293190Z 
2025-04-15T08:07:18.2293335Z     body.netdata-splash .col-start-8 {
2025-04-15T08:07:18.2293465Z       grid-column-start: 8;
2025-04-15T08:07:18.2293568Z     }
2025-04-15T08:07:18.2293575Z 
2025-04-15T08:07:18.2293727Z     body.netdata-splash .col-start-9 {
2025-04-15T08:07:18.2293865Z       grid-column-start: 9;
2025-04-15T08:07:18.2293968Z     }
2025-04-15T08:07:18.2293975Z 
2025-04-15T08:07:18.2294133Z     body.netdata-splash .col-start-10 {
2025-04-15T08:07:18.2294268Z       grid-column-start: 10;
2025-04-15T08:07:18.2294562Z     }
2025-04-15T08:07:18.2294569Z 
2025-04-15T08:07:18.2294720Z     body.netdata-splash .col-start-12 {
2025-04-15T08:07:18.2294857Z       grid-column-start: 11;
2025-04-15T08:07:18.2294960Z     }
2025-04-15T08:07:18.2294968Z 
2025-04-15T08:07:18.2295119Z     body.netdata-splash .col-start-12 {
2025-04-15T08:07:18.2295255Z       grid-column-start: 12;
2025-04-15T08:07:18.2295360Z     }
2025-04-15T08:07:18.2295366Z 
2025-04-15T08:07:18.2295523Z     @media screen and (max-width: 1280px) {
2025-04-15T08:07:18.2295699Z       body.netdata-splash .md-grid-columns-12 {
2025-04-15T08:07:18.2295820Z         display: grid;
2025-04-15T08:07:18.2295960Z         grid-column-gap: 16px;
2025-04-15T08:07:18.2296235Z         grid-row-gap: 16px;
2025-04-15T08:07:18.2296420Z         grid-template-columns: repeat(12, 1fr);
2025-04-15T08:07:18.2296529Z       }
2025-04-15T08:07:18.2296537Z 
2025-04-15T08:07:18.2296704Z       body.netdata-splash .md-col-span-1 {
2025-04-15T08:07:18.2296848Z         grid-column: auto / span 1;
2025-04-15T08:07:18.2296953Z       }
2025-04-15T08:07:18.2296958Z 
2025-04-15T08:07:18.2297119Z       body.netdata-splash .md-col-span-2 {
2025-04-15T08:07:18.2297252Z         grid-column: auto / span 2;
2025-04-15T08:07:18.2297361Z       }
2025-04-15T08:07:18.2297369Z 
2025-04-15T08:07:18.2297519Z       body.netdata-splash .md-col-span-3 {
2025-04-15T08:07:18.2297652Z         grid-column: auto / span 3;
2025-04-15T08:07:18.2297755Z       }
2025-04-15T08:07:18.2297761Z 
2025-04-15T08:07:18.2297914Z       body.netdata-splash .md-col-span-4 {
2025-04-15T08:07:18.2298049Z         grid-column: auto / span 4;
2025-04-15T08:07:18.2298155Z       }
2025-04-15T08:07:18.2298163Z 
2025-04-15T08:07:18.2298321Z       body.netdata-splash .md-col-span-5 {
2025-04-15T08:07:18.2298625Z         grid-column: auto / span 5;
2025-04-15T08:07:18.2298734Z       }
2025-04-15T08:07:18.2298747Z 
2025-04-15T08:07:18.2298899Z       body.netdata-splash .md-col-span-6 {
2025-04-15T08:07:18.2299028Z         grid-column: auto / span 6;
2025-04-15T08:07:18.2299144Z       }
2025-04-15T08:07:18.2299150Z 
2025-04-15T08:07:18.2299303Z       body.netdata-splash .md-col-span-7 {
2025-04-15T08:07:18.2299438Z         grid-column: auto / span 7;
2025-04-15T08:07:18.2299542Z       }
2025-04-15T08:07:18.2299549Z 
2025-04-15T08:07:18.2299705Z       body.netdata-splash .md-col-span-8 {
2025-04-15T08:07:18.2299841Z         grid-column: auto / span 8;
2025-04-15T08:07:18.2299944Z       }
2025-04-15T08:07:18.2299951Z 
2025-04-15T08:07:18.2300112Z       body.netdata-splash .md-col-span-9 {
2025-04-15T08:07:18.2300245Z         grid-column: auto / span 9;
2025-04-15T08:07:18.2300354Z       }
2025-04-15T08:07:18.2300362Z 
2025-04-15T08:07:18.2300520Z       body.netdata-splash .md-col-span-10 {
2025-04-15T08:07:18.2300662Z         grid-column: auto / span 10;
2025-04-15T08:07:18.2300774Z       }
2025-04-15T08:07:18.2300781Z 
2025-04-15T08:07:18.2300934Z       body.netdata-splash .md-col-span-11 {
2025-04-15T08:07:18.2301076Z         grid-column: auto / span 11;
2025-04-15T08:07:18.2301192Z       }
2025-04-15T08:07:18.2301197Z 
2025-04-15T08:07:18.2301356Z       body.netdata-splash .md-col-span-12 {
2025-04-15T08:07:18.2301486Z         grid-column: auto / span 12;
2025-04-15T08:07:18.2301593Z       }
2025-04-15T08:07:18.2301702Z     }
2025-04-15T08:07:18.2301708Z 
2025-04-15T08:07:18.2301856Z     body.netdata-splash .row-span-1 {
2025-04-15T08:07:18.2301986Z       grid-row: auto / span 1;
2025-04-15T08:07:18.2302086Z     }
2025-04-15T08:07:18.2302093Z 
2025-04-15T08:07:18.2302252Z     body.netdata-splash .row-span-2 {
2025-04-15T08:07:18.2302374Z       grid-row: auto / span 2;
2025-04-15T08:07:18.2302478Z     }
2025-04-15T08:07:18.2302485Z 
2025-04-15T08:07:18.2302639Z     body.netdata-splash .row-span-3 {
2025-04-15T08:07:18.2302775Z       grid-row: auto / span 3;
2025-04-15T08:07:18.2302881Z     }
2025-04-15T08:07:18.2302887Z 
2025-04-15T08:07:18.2303036Z     body.netdata-splash .row-span-4 {
2025-04-15T08:07:18.2303159Z       grid-row: auto / span 4;
2025-04-15T08:07:18.2303432Z     }
2025-04-15T08:07:18.2303439Z 
2025-04-15T08:07:18.2303587Z     body.netdata-splash .row-span-5 {
2025-04-15T08:07:18.2303720Z       grid-row: auto / span 5;
2025-04-15T08:07:18.2303826Z     }
2025-04-15T08:07:18.2303832Z 
2025-04-15T08:07:18.2303982Z     body.netdata-splash .row-span-6 {
2025-04-15T08:07:18.2304112Z       grid-row: auto / span 6;
2025-04-15T08:07:18.2304215Z     }
2025-04-15T08:07:18.2304222Z 
2025-04-15T08:07:18.2304375Z     body.netdata-splash .row-span-7 {
2025-04-15T08:07:18.2304499Z       grid-row: auto / span 7;
2025-04-15T08:07:18.2304608Z     }
2025-04-15T08:07:18.2304614Z 
2025-04-15T08:07:18.2304760Z     body.netdata-splash .row-span-8 {
2025-04-15T08:07:18.2304889Z       grid-row: auto / span 8;
2025-04-15T08:07:18.2304999Z     }
2025-04-15T08:07:18.2305006Z 
2025-04-15T08:07:18.2305154Z     body.netdata-splash .row-span-9 {
2025-04-15T08:07:18.2305286Z       grid-row: auto / span 9;
2025-04-15T08:07:18.2305390Z     }
2025-04-15T08:07:18.2305407Z 
2025-04-15T08:07:18.2305570Z     body.netdata-splash .row-span-10 {
2025-04-15T08:07:18.2305699Z       grid-row: auto / span 10;
2025-04-15T08:07:18.2305800Z     }
2025-04-15T08:07:18.2305811Z 
2025-04-15T08:07:18.2305961Z     body.netdata-splash .row-span-11 {
2025-04-15T08:07:18.2306243Z       grid-row: auto / span 11;
2025-04-15T08:07:18.2306363Z     }
2025-04-15T08:07:18.2306370Z 
2025-04-15T08:07:18.2306518Z     body.netdata-splash .row-span-12 {
2025-04-15T08:07:18.2306647Z       grid-row: auto / span 12;
2025-04-15T08:07:18.2306752Z     }
2025-04-15T08:07:18.2306758Z 
2025-04-15T08:07:18.2306899Z     body.netdata-splash .relative {
2025-04-15T08:07:18.2307028Z       position: relative;
2025-04-15T08:07:18.2307134Z     }
2025-04-15T08:07:18.2307140Z 
2025-04-15T08:07:18.2307466Z     body.netdata-splash .absolute {
2025-04-15T08:07:18.2307597Z       position: absolute;
2025-04-15T08:07:18.2307708Z     }
2025-04-15T08:07:18.2307715Z 
2025-04-15T08:07:18.2307857Z     body.netdata-splash .index-10 {
2025-04-15T08:07:18.2307978Z       z-index: 10;
2025-04-15T08:07:18.2308086Z     }
2025-04-15T08:07:18.2308093Z 
2025-04-15T08:07:18.2308233Z     body.netdata-splash .m-auto {
2025-04-15T08:07:18.2308353Z       margin: auto;
2025-04-15T08:07:18.2308453Z     }
2025-04-15T08:07:18.2308459Z 
2025-04-15T08:07:18.2308607Z     body.netdata-splash .full-h {
2025-04-15T08:07:18.2308720Z       height: 100%;
2025-04-15T08:07:18.2308824Z     }
2025-04-15T08:07:18.2308830Z 
2025-04-15T08:07:18.2308973Z     body.netdata-splash .flex {
2025-04-15T08:07:18.2309087Z       display: flex;
2025-04-15T08:07:18.2309194Z     }
2025-04-15T08:07:18.2309201Z 
2025-04-15T08:07:18.2309341Z     body.netdata-splash .flex-col {
2025-04-15T08:07:18.2309478Z       flex-direction: column;
2025-04-15T08:07:18.2309595Z     }
2025-04-15T08:07:18.2309602Z 
2025-04-15T08:07:18.2309759Z     body.netdata-splash .space-between {
2025-04-15T08:07:18.2309911Z       justify-content: space-between;
2025-04-15T08:07:18.2310015Z     }
2025-04-15T08:07:18.2310029Z 
2025-04-15T08:07:18.2310187Z     body.netdata-splash .align-center {
2025-04-15T08:07:18.2310312Z       align-items: center;
2025-04-15T08:07:18.2310416Z     }
2025-04-15T08:07:18.2310423Z 
2025-04-15T08:07:18.2310573Z     body.netdata-splash .container {
2025-04-15T08:07:18.2310706Z       background: var(--main-bg);
2025-04-15T08:07:18.2310826Z       height: 100vh;
2025-04-15T08:07:18.2310941Z       column-gap: 0;
2025-04-15T08:07:18.2311042Z     }
2025-04-15T08:07:18.2311055Z 
2025-04-15T08:07:18.2311192Z     body.netdata-splash .frame {
2025-04-15T08:07:18.2311306Z       height: 100vh;
2025-04-15T08:07:18.2311415Z     }
2025-04-15T08:07:18.2311422Z 
2025-04-15T08:07:18.2311586Z     body.netdata-splash .light-beam:after {
2025-04-15T08:07:18.2311707Z       content: "";
2025-04-15T08:07:18.2311840Z       position: absolute;
2025-04-15T08:07:18.2311949Z       top: 0;
2025-04-15T08:07:18.2312066Z       bottom: 0;
2025-04-15T08:07:18.2312177Z       left: 0;
2025-04-15T08:07:18.2312293Z       width: 1px;
2025-04-15T08:07:18.2312646Z       box-shadow: 20px 0px 110px 55px rgb(0 255 100 / 10%);
2025-04-15T08:07:18.2312754Z     }
2025-04-15T08:07:18.2312768Z 
2025-04-15T08:07:18.2312916Z     body.netdata-splash #setupGrid {
2025-04-15T08:07:18.2313033Z       opacity: 0.15;
2025-04-15T08:07:18.2313162Z       position: absolute;
2025-04-15T08:07:18.2313272Z       inset: 0;
2025-04-15T08:07:18.2313382Z     }
2025-04-15T08:07:18.2313390Z 
2025-04-15T08:07:18.2313543Z     body.netdata-splash #monitorGrid {
2025-04-15T08:07:18.2313659Z       opacity: 0.4;
2025-04-15T08:07:18.2313787Z       transition: 1s ease;
2025-04-15T08:07:18.2313887Z     }
2025-04-15T08:07:18.2313893Z 
2025-04-15T08:07:18.2314074Z     body.netdata-splash #monitorGrid.hovered {
2025-04-15T08:07:18.2314178Z       opacity: 0.7;
2025-04-15T08:07:18.2314284Z     }
2025-04-15T08:07:18.2314296Z 
2025-04-15T08:07:18.2314447Z     body.netdata-splash #sphereContainer {
2025-04-15T08:07:18.2314561Z       height: calc(100vh);
2025-04-15T08:07:18.2314695Z       position: relative;
2025-04-15T08:07:18.2314796Z     }
2025-04-15T08:07:18.2314803Z 
2025-04-15T08:07:18.2314963Z     body.netdata-splash #sphereContainer h4 {
2025-04-15T08:07:18.2315073Z       display: none;
2025-04-15T08:07:18.2315170Z     }
2025-04-15T08:07:18.2315176Z 
2025-04-15T08:07:18.2315323Z     body.netdata-splash .setup {
2025-04-15T08:07:18.2315430Z       z-index: 10;
2025-04-15T08:07:18.2315555Z       position: relative;
2025-04-15T08:07:18.2315705Z       box-shadow: 20px 0px 160px 5px #012f13c2;
2025-04-15T08:07:18.2315857Z       background: linear-gradient(90deg,
2025-04-15T08:07:18.2315971Z           rgba(0, 0, 0, 1) 0%,
2025-04-15T08:07:18.2316242Z           rgb(0 19 7 / 76%) 100%);
2025-04-15T08:07:18.2316353Z     }
2025-04-15T08:07:18.2316360Z 
2025-04-15T08:07:18.2316770Z     body.netdata-splash .setup>.stats {
2025-04-15T08:07:18.2316892Z       padding: 16px;
2025-04-15T08:07:18.2317005Z       overflow: auto;
2025-04-15T08:07:18.2317119Z       height: 100%;
2025-04-15T08:07:18.2317257Z       position: absolute;
2025-04-15T08:07:18.2317367Z       top: 65px;
2025-04-15T08:07:18.2317478Z       left: 0;
2025-04-15T08:07:18.2317581Z       right: 0;
2025-04-15T08:07:18.2317683Z       bottom: 0;
2025-04-15T08:07:18.2317786Z     }
2025-04-15T08:07:18.2317792Z 
2025-04-15T08:07:18.2317945Z     body.netdata-splash .setup .header {
2025-04-15T08:07:18.2318066Z       position: sticky;
2025-04-15T08:07:18.2318167Z       top: 0;
2025-04-15T08:07:18.2318295Z       padding: 8px 16px;
2025-04-15T08:07:18.2318399Z       margin: 0;
2025-04-15T08:07:18.2318531Z       backdrop-filter: blur(8px);
2025-04-15T08:07:18.2318665Z       background: rgba(0, 0, 0, 0.1);
2025-04-15T08:07:18.2318830Z       /* border-bottom: 1px solid var(--border); */
2025-04-15T08:07:18.2318949Z       display: flex;
2025-04-15T08:07:18.2319081Z       align-items: center;
2025-04-15T08:07:18.2319223Z       justify-content: space-between;
2025-04-15T08:07:18.2319329Z     }
2025-04-15T08:07:18.2319335Z 
2025-04-15T08:07:18.2319480Z     body.netdata-splash .header .title {
2025-04-15T08:07:18.2319594Z       display: flex;
2025-04-15T08:07:18.2319709Z       align-items: center;
2025-04-15T08:07:18.2319819Z       gap: 8px;
2025-04-15T08:07:18.2319916Z     }
2025-04-15T08:07:18.2319922Z 
2025-04-15T08:07:18.2320057Z     body.netdata-splash .header .logo {
2025-04-15T08:07:18.2320170Z       width: 32px;
2025-04-15T08:07:18.2320276Z       height: auto;
2025-04-15T08:07:18.2320377Z     }
2025-04-15T08:07:18.2320383Z 
2025-04-15T08:07:18.2320531Z     body.netdata-splash .splash-message {
2025-04-15T08:07:18.2320647Z       position: absolute;
2025-04-15T08:07:18.2320754Z       inset: 0;
2025-04-15T08:07:18.2320861Z       margin: auto;
2025-04-15T08:07:18.2320976Z       display: flex;
2025-04-15T08:07:18.2321095Z       align-items: center;
2025-04-15T08:07:18.2321225Z       justify-content: center;
2025-04-15T08:07:18.2321353Z       flex-direction: column;
2025-04-15T08:07:18.2321465Z       overflow-y: auto;
2025-04-15T08:07:18.2321741Z     }
2025-04-15T08:07:18.2321747Z 
2025-04-15T08:07:18.2321900Z     body.netdata-splash .splash-message p {
2025-04-15T08:07:18.2322016Z       margin-top: 0;
2025-04-15T08:07:18.2322138Z       margin-bottom: 24px;
2025-04-15T08:07:18.2322258Z       color: var(--text-light);
2025-04-15T08:07:18.2322375Z       filter: blur(0.6px);
2025-04-15T08:07:18.2322473Z     }
2025-04-15T08:07:18.2322479Z 
2025-04-15T08:07:18.2322619Z     body.netdata-splash .tagline {
2025-04-15T08:07:18.2322737Z       position: absolute;
2025-04-15T08:07:18.2322845Z       bottom: 24px;
2025-04-15T08:07:18.2322964Z       font-size: 12px;
2025-04-15T08:07:18.2323083Z       color: var(--text-light);
2025-04-15T08:07:18.2323185Z     }
2025-04-15T08:07:18.2323191Z 
2025-04-15T08:07:18.2323329Z     body.netdata-splash .skip-link {
2025-04-15T08:07:18.2323460Z       font-size: 12px;
2025-04-15T08:07:18.2323582Z       color: var(--text-light);
2025-04-15T08:07:18.2323657Z       text-align: center;
2025-04-15T08:07:18.2323721Z     }
2025-04-15T08:07:18.2323730Z 
2025-04-15T08:07:18.2323821Z     body.netdata-splash .license-link {
2025-04-15T08:07:18.2323899Z       padding: 0 16px 4px;
2025-04-15T08:07:18.2323968Z       font-size: 12px;
2025-04-15T08:07:18.2324042Z       color: var(--text-light);
2025-04-15T08:07:18.2324105Z     }
2025-04-15T08:07:18.2324109Z 
2025-04-15T08:07:18.2324189Z     body.netdata-splash .button {
2025-04-15T08:07:18.2324266Z       padding: 8px 12px;
2025-04-15T08:07:18.2324338Z       border-radius: 2px;
2025-04-15T08:07:18.2324409Z       font-size: 16px;
2025-04-15T08:07:18.2324478Z       min-width: 88px;
2025-04-15T08:07:18.2324547Z       text-align: center;
2025-04-15T08:07:18.2324619Z       cursor: pointer;
2025-04-15T08:07:18.2324694Z       transition: 250ms ease;
2025-04-15T08:07:18.2324764Z       border: none;
2025-04-15T08:07:18.2324937Z     }
2025-04-15T08:07:18.2324941Z 
2025-04-15T08:07:18.2325034Z     body.netdata-splash .button-primary {
2025-04-15T08:07:18.2325119Z       background: var(--primary);
2025-04-15T08:07:18.2325196Z       color: var(--text-light);
2025-04-15T08:07:18.2325260Z     }
2025-04-15T08:07:18.2325263Z 
2025-04-15T08:07:18.2325365Z     body.netdata-splash .button-primary:hover {
2025-04-15T08:07:18.2325449Z       background: var(--highlight);
2025-04-15T08:07:18.2325511Z     }
2025-04-15T08:07:18.2325515Z 
2025-04-15T08:07:18.2325597Z     body.netdata-splash a.button {
2025-04-15T08:07:18.2325680Z       color: var(--text-dark);
2025-04-15T08:07:18.2325743Z     }
2025-04-15T08:07:18.2325746Z 
2025-04-15T08:07:18.2325838Z     body.netdata-splash .button-ghost {
2025-04-15T08:07:18.2325917Z       background: transparent;
2025-04-15T08:07:18.2325992Z       color: var(--primary);
2025-04-15T08:07:18.2326213Z     }
2025-04-15T08:07:18.2326219Z 
2025-04-15T08:07:18.2326323Z     body.netdata-splash .button-ghost:hover {
2025-04-15T08:07:18.2326405Z       color: var(--highlight);
2025-04-15T08:07:18.2326465Z     }
2025-04-15T08:07:18.2326469Z 
2025-04-15T08:07:18.2326556Z     body.netdata-splash .clear-button {
2025-04-15T08:07:18.2326629Z       font-size: 12px;
2025-04-15T08:07:18.2326699Z       padding: 0;
2025-04-15T08:07:18.2326769Z       min-width: auto;
2025-04-15T08:07:18.2326827Z     }
2025-04-15T08:07:18.2326831Z 
2025-04-15T08:07:18.2326912Z     body.netdata-splash .tabs {
2025-04-15T08:07:18.2326980Z       display: flex;
2025-04-15T08:07:18.2327059Z       align-items: center;
2025-04-15T08:07:18.2327135Z       justify-content: center;
2025-04-15T08:07:18.2327225Z       border-top: 1px solid var(--border);
2025-04-15T08:07:18.2327310Z       backdrop-filter: blur(4px);
2025-04-15T08:07:18.2327371Z     }
2025-04-15T08:07:18.2327375Z 
2025-04-15T08:07:18.2327464Z     body.netdata-splash button.tab {
2025-04-15T08:07:18.2327548Z       background: rgba(0, 0, 0, 0.2);
2025-04-15T08:07:18.2327620Z       border: none;
2025-04-15T08:07:18.2327701Z       color: var(--menu-item);
2025-04-15T08:07:18.2327777Z       padding: 8px 0 24px;
2025-04-15T08:07:18.2327852Z       border-left: 0;
2025-04-15T08:07:18.2328046Z       cursor: pointer;
2025-04-15T08:07:18.2328126Z       backdrop-filter: blur(2px);
2025-04-15T08:07:18.2328199Z       width: 100%;
2025-04-15T08:07:18.2328270Z       font-size: 12px;
2025-04-15T08:07:18.2328344Z       display: flex;
2025-04-15T08:07:18.2328420Z       flex-direction: column;
2025-04-15T08:07:18.2328497Z       align-items: center;
2025-04-15T08:07:18.2328564Z       gap: 8px;
2025-04-15T08:07:18.2328626Z     }
2025-04-15T08:07:18.2328629Z 
2025-04-15T08:07:18.2328742Z     body.netdata-splash button.tab:first-child {
2025-04-15T08:07:18.2328842Z       /* border-left: 1px solid var(--primary); */
2025-04-15T08:07:18.2328907Z     }
2025-04-15T08:07:18.2328911Z 
2025-04-15T08:07:18.2329037Z     body.netdata-splash button.tab:not(.active):hover {
2025-04-15T08:07:18.2329121Z       color: var(--tab-hover);
2025-04-15T08:07:18.2329199Z       transition: 100ms ease;
2025-04-15T08:07:18.2329261Z     }
2025-04-15T08:07:18.2329265Z 
2025-04-15T08:07:18.2329368Z     body.netdata-splash button.tab.active {
2025-04-15T08:07:18.2329451Z       background: transparent;
2025-04-15T08:07:18.2329551Z       /* border-bottom: 1px solid transparent; */
2025-04-15T08:07:18.2329628Z       backdrop-filter: blur(0);
2025-04-15T08:07:18.2329702Z       color: var(--tab-active);
2025-04-15T08:07:18.2329773Z       cursor: default;
2025-04-15T08:07:18.2329836Z     }
2025-04-15T08:07:18.2329840Z 
2025-04-15T08:07:18.2329928Z     body.netdata-splash .tab-icon {
2025-04-15T08:07:18.2329996Z       width: 24px;
2025-04-15T08:07:18.2330062Z       height: 24px;
2025-04-15T08:07:18.2330124Z     }
2025-04-15T08:07:18.2330128Z 
2025-04-15T08:07:18.2330213Z     body.netdata-splash .tab-icon svg {
2025-04-15T08:07:18.2330286Z       height: 100%;
2025-04-15T08:07:18.2330352Z       width: 100%;
2025-04-15T08:07:18.2330533Z     }
2025-04-15T08:07:18.2330537Z 
2025-04-15T08:07:18.2330638Z     body.netdata-splash .tab-icon svg path {
2025-04-15T08:07:18.2330715Z       fill: var(--menu-item);
2025-04-15T08:07:18.2330793Z       transition: 100ms ease;
2025-04-15T08:07:18.2330861Z     }
2025-04-15T08:07:18.2330864Z 
2025-04-15T08:07:18.2330998Z     body.netdata-splash .tab.active .tab-icon svg path {
2025-04-15T08:07:18.2331074Z       fill: var(--tab-active);
2025-04-15T08:07:18.2331142Z     }
2025-04-15T08:07:18.2331145Z 
2025-04-15T08:07:18.2331239Z     button.tab:not(.active):hover svg path {
2025-04-15T08:07:18.2331314Z       fill: var(--tab-hover);
2025-04-15T08:07:18.2331380Z     }
2025-04-15T08:07:18.2331384Z 
2025-04-15T08:07:18.2331471Z     body.netdata-splash .panel {
2025-04-15T08:07:18.2331558Z       background: var(--panel-bg);
2025-04-15T08:07:18.2331630Z       padding: 16px;
2025-04-15T08:07:18.2331708Z       border-radius: 4px;
2025-04-15T08:07:18.2331797Z       border: 1px solid var(--border);
2025-04-15T08:07:18.2331881Z       backdrop-filter: blur(0px);
2025-04-15T08:07:18.2331947Z     }
2025-04-15T08:07:18.2331951Z 
2025-04-15T08:07:18.2332039Z     body.netdata-splash .panel-tab {
2025-04-15T08:07:18.2332122Z       border-radius: 0 0 4px 4px;
2025-04-15T08:07:18.2332195Z       border-top: 0;
2025-04-15T08:07:18.2332287Z       border-left: 1px solid var(--primary);
2025-04-15T08:07:18.2332387Z       border-bottom: 1px solid var(--primary);
2025-04-15T08:07:18.2332480Z       border-right: 1px solid var(--primary);
2025-04-15T08:07:18.2332559Z       padding: 4px 24px;
2025-04-15T08:07:18.2332627Z       display: none;
2025-04-15T08:07:18.2332692Z       height: 70%;
2025-04-15T08:07:18.2332769Z       overflow: auto;
2025-04-15T08:07:18.2332830Z     }
2025-04-15T08:07:18.2332834Z 
2025-04-15T08:07:18.2332921Z     body.netdata-splash .data-tab {
2025-04-15T08:07:18.2332992Z       display: block;
2025-04-15T08:07:18.2333064Z       opacity: 0;
2025-04-15T08:07:18.2333138Z       transition: 800ms ease;
2025-04-15T08:07:18.2333220Z       pointer-events: none;
2025-04-15T08:07:18.2333286Z     }
2025-04-15T08:07:18.2333290Z 
2025-04-15T08:07:18.2333385Z     body.netdata-splash .data-tab.active {
2025-04-15T08:07:18.2333455Z       opacity: 1;
2025-04-15T08:07:18.2333621Z       pointer-events: all;
2025-04-15T08:07:18.2333683Z     }
2025-04-15T08:07:18.2333686Z 
2025-04-15T08:07:18.2333792Z     body.netdata-splash .data-tab-container {
2025-04-15T08:07:18.2333867Z       position: absolute;
2025-04-15T08:07:18.2333937Z       left: 0;
2025-04-15T08:07:18.2334002Z       right: 0;
2025-04-15T08:07:18.2334072Z       top: 45%;
2025-04-15T08:07:18.2334143Z       /* height: 40vh; */
2025-04-15T08:07:18.2334205Z     }
2025-04-15T08:07:18.2334209Z 
2025-04-15T08:07:18.2334308Z     body.netdata-splash .system-container {
2025-04-15T08:07:18.2334378Z       overflow: auto;
2025-04-15T08:07:18.2334462Z       height: calc(100% - 330px);
2025-04-15T08:07:18.2334535Z       padding: 0 24px 24px;
2025-04-15T08:07:18.2334605Z       margin: 0 -24px;
2025-04-15T08:07:18.2334734Z       scrollbar-color: var(--scrollbar-thumb) #293030;
2025-04-15T08:07:18.2334812Z       scrollbar-width: thin;
2025-04-15T08:07:18.2334877Z     }
2025-04-15T08:07:18.2334881Z 
2025-04-15T08:07:18.2335020Z     body.netdata-splash .data-tab-container .system>div {
2025-04-15T08:07:18.2335093Z       display: flex;
2025-04-15T08:07:18.2335174Z       /* margin-bottom: 24px; */
2025-04-15T08:07:18.2335262Z       /* backdrop-filter: blur(1px); */
2025-04-15T08:07:18.2335335Z       height: auto;
2025-04-15T08:07:18.2335406Z       min-height: 40px;
2025-04-15T08:07:18.2335483Z       overflow: hidden;
2025-04-15T08:07:18.2335546Z     }
2025-04-15T08:07:18.2335550Z 
2025-04-15T08:07:18.2335700Z     body.netdata-splash .data-tab-container .system .key-value {
2025-04-15T08:07:18.2335781Z       flex-direction: column;
2025-04-15T08:07:18.2335848Z       gap: 8px;
2025-04-15T08:07:18.2335932Z       align-items: flex-start;
2025-04-15T08:07:18.2336011Z       justify-content: start;
2025-04-15T08:07:18.2336290Z       width: 100%;
2025-04-15T08:07:18.2336363Z       padding: 0;
2025-04-15T08:07:18.2336425Z     }
2025-04-15T08:07:18.2336429Z 
2025-04-15T08:07:18.2336648Z     body.netdata-splash .data-tab-container .system .key-value span:nth-child(1) {
2025-04-15T08:07:18.2336729Z       padding: 8px 16px;
2025-04-15T08:07:18.2336828Z       border-bottom: 1px solid var(--border);
2025-04-15T08:07:18.2336896Z       width: 100%;
2025-04-15T08:07:18.2336965Z       color: #8eae9b;
2025-04-15T08:07:18.2337051Z       background: rgba(0, 0, 0, 0.8);
2025-04-15T08:07:18.2337113Z     }
2025-04-15T08:07:18.2337117Z 
2025-04-15T08:07:18.2337317Z     body.netdata-splash .data-tab-container .system .key-value span:nth-child(2) {
2025-04-15T08:07:18.2337394Z       /* font-size: 16px; */
2025-04-15T08:07:18.2337473Z       padding: 4px 16px 12px;
2025-04-15T08:07:18.2337548Z       text-align: left;
2025-04-15T08:07:18.2337620Z       color: var(--accent);
2025-04-15T08:07:18.2337687Z     }
2025-04-15T08:07:18.2337696Z 
2025-04-15T08:07:18.2337792Z     body.netdata-splash .panel:hover h4 {
2025-04-15T08:07:18.2337872Z       color: var(--highlight);
2025-04-15T08:07:18.2337934Z     }
2025-04-15T08:07:18.2337937Z 
2025-04-15T08:07:18.2338036Z     body.netdata-splash .hide-title h4 {
2025-04-15T08:07:18.2338114Z       visibility: hidden;
2025-04-15T08:07:18.2338176Z     }
2025-04-15T08:07:18.2338179Z 
2025-04-15T08:07:18.2338296Z     body.netdata-splash .no-key span:first-child {
2025-04-15T08:07:18.2338367Z       display: none;
2025-04-15T08:07:18.2338434Z     }
2025-04-15T08:07:18.2338438Z 
2025-04-15T08:07:18.2338527Z     body.netdata-splash .no-title h4 {
2025-04-15T08:07:18.2338598Z       display: none;
2025-04-15T08:07:18.2338665Z     }
2025-04-15T08:07:18.2338670Z 
2025-04-15T08:07:18.2338767Z     body.netdata-splash .absolute-center {
2025-04-15T08:07:18.2338849Z       position: absolute;
2025-04-15T08:07:18.2338916Z       inset: 0;
2025-04-15T08:07:18.2338983Z       margin: auto;
2025-04-15T08:07:18.2339049Z     }
2025-04-15T08:07:18.2339058Z 
2025-04-15T08:07:18.2339145Z     body.netdata-splash .align-end {
2025-04-15T08:07:18.2339230Z       align-content: flex-end;
2025-04-15T08:07:18.2339292Z     }
2025-04-15T08:07:18.2339295Z 
2025-04-15T08:07:18.2339521Z     body.netdata-splash .panel-tab .separator {
2025-04-15T08:07:18.2339616Z       border-bottom: 1px solid var(--border);
2025-04-15T08:07:18.2339694Z       margin: 8px -24px;
2025-04-15T08:07:18.2339760Z     }
2025-04-15T08:07:18.2339764Z 
2025-04-15T08:07:18.2339859Z     body.netdata-splash .section-image {
2025-04-15T08:07:18.2339930Z       height: 16px;
2025-04-15T08:07:18.2339998Z       width: 16px;
2025-04-15T08:07:18.2340064Z     }
2025-04-15T08:07:18.2340068Z 
2025-04-15T08:07:18.2340165Z     body.netdata-splash .section-image svg {
2025-04-15T08:07:18.2340232Z       width: 100%;
2025-04-15T08:07:18.2340303Z       height: 100%;
2025-04-15T08:07:18.2340365Z     }
2025-04-15T08:07:18.2340369Z 
2025-04-15T08:07:18.2340460Z     body.netdata-splash .section-title {
2025-04-15T08:07:18.2340535Z       font-size: 14px;
2025-04-15T08:07:18.2340611Z       font-weight: bold;
2025-04-15T08:07:18.2340682Z       margin: 8px 0;
2025-04-15T08:07:18.2340761Z       display: inline-block;
2025-04-15T08:07:18.2340830Z     }
2025-04-15T08:07:18.2340833Z 
2025-04-15T08:07:18.2340945Z     body.netdata-splash .sphere-stats-container {
2025-04-15T08:07:18.2341015Z       width: 80%;
2025-04-15T08:07:18.2341082Z       height: 100vh;
2025-04-15T08:07:18.2341149Z       display: flex;
2025-04-15T08:07:18.2341226Z       align-items: center;
2025-04-15T08:07:18.2341309Z       flex-direction: column;
2025-04-15T08:07:18.2341389Z       justify-content: center;
2025-04-15T08:07:18.2341461Z       margin-bottom: 10vmin;
2025-04-15T08:07:18.2341526Z       gap: 16px;
2025-04-15T08:07:18.2341591Z     }
2025-04-15T08:07:18.2341594Z 
2025-04-15T08:07:18.2341676Z     body.netdata-splash .key-value {
2025-04-15T08:07:18.2341761Z       font-size: var(--font-small);
2025-04-15T08:07:18.2341829Z       display: flex;
2025-04-15T08:07:18.2342022Z       justify-content: space-between;
2025-04-15T08:07:18.2342100Z       align-items: center;
2025-04-15T08:07:18.2342169Z       padding: 8px 0;
2025-04-15T08:07:18.2342254Z       color: var(--key-value-table);
2025-04-15T08:07:18.2342320Z     }
2025-04-15T08:07:18.2342324Z 
2025-04-15T08:07:18.2342406Z     /* .key-value:nth-child(2n) {
2025-04-15T08:07:18.2342483Z       background: var(--row-2n);
2025-04-15T08:07:18.2342545Z     } */
2025-04-15T08:07:18.2342640Z     body.netdata-splash .key-value:hover {
2025-04-15T08:07:18.2342714Z       color: var(--highlight);
2025-04-15T08:07:18.2342778Z     }
2025-04-15T08:07:18.2342782Z 
2025-04-15T08:07:18.2342899Z     body.netdata-splash .key-value span:nth-child(2) {
2025-04-15T08:07:18.2342971Z       text-align: right;
2025-04-15T08:07:18.2343035Z     }
2025-04-15T08:07:18.2343039Z 
2025-04-15T08:07:18.2343134Z     body.netdata-splash .metrics-container {
2025-04-15T08:07:18.2343215Z       position: absolute;
2025-04-15T08:07:18.2343285Z       top: 150px;
2025-04-15T08:07:18.2343352Z     }
2025-04-15T08:07:18.2343355Z 
2025-04-15T08:07:18.2343477Z     body.netdata-splash .collected-metrics .key-value {
2025-04-15T08:07:18.2343553Z       flex-direction: column;
2025-04-15T08:07:18.2343634Z       align-items: center;
2025-04-15T08:07:18.2343708Z       justify-content: center;
2025-04-15T08:07:18.2343781Z       background: none;
2025-04-15T08:07:18.2343852Z       text-align: center;
2025-04-15T08:07:18.2343930Z       text-transform: uppercase;
2025-04-15T08:07:18.2344006Z       font-size: 12px;
2025-04-15T08:07:18.2344075Z       color: var(--text);
2025-04-15T08:07:18.2344140Z     }
2025-04-15T08:07:18.2344144Z 
2025-04-15T08:07:18.2344322Z     body.netdata-splash .collected-metrics .key-value span:nth-child(2) {
2025-04-15T08:07:18.2344398Z       font-size: 7vmin;
2025-04-15T08:07:18.2344466Z       font-weight: 700;
2025-04-15T08:07:18.2344539Z       color: rgb(254 254 254 / 80%);
2025-04-15T08:07:18.2344614Z       filter: blur(0.8px);
2025-04-15T08:07:18.2344687Z       text-align: center;
2025-04-15T08:07:18.2344749Z     }
2025-04-15T08:07:18.2344752Z 
2025-04-15T08:07:18.2344838Z     #server .key-value span:first-child,
2025-04-15T08:07:18.2344942Z     #package .key-value span:first-child {
2025-04-15T08:07:18.2345134Z       display: none;
2025-04-15T08:07:18.2345194Z     }
2025-04-15T08:07:18.2345197Z 
2025-04-15T08:07:18.2345289Z     #server .key-value span:nth-child(2),
2025-04-15T08:07:18.2345379Z     #package .key-value span:nth-child(2) {
2025-04-15T08:07:18.2345455Z       font-size: 12px;
2025-04-15T08:07:18.2345530Z       color: var(--primary);
2025-04-15T08:07:18.2345607Z       font-family: monospace;
2025-04-15T08:07:18.2345671Z     }
2025-04-15T08:07:18.2345676Z 
2025-04-15T08:07:18.2345762Z     body.netdata-splash .head-summary {
2025-04-15T08:07:18.2345831Z       left: 0;
2025-04-15T08:07:18.2345899Z       padding: 16px;
2025-04-15T08:07:18.2345966Z       right: 0;
2025-04-15T08:07:18.2346033Z       display: flex;
2025-04-15T08:07:18.2346204Z       flex-direction: row;
2025-04-15T08:07:18.2346297Z       justify-content: space-between;
2025-04-15T08:07:18.2346356Z     }
2025-04-15T08:07:18.2346360Z 
2025-04-15T08:07:18.2346444Z     body.netdata-splash .module {
2025-04-15T08:07:18.2346530Z       border: 2px solid var(--border);
2025-04-15T08:07:18.2346603Z       border-radius: 16px;
2025-04-15T08:07:18.2346757Z       box-shadow: -1px 1px var(--main-bg), -2px 2px var(--main-bg),
2025-04-15T08:07:18.2346881Z         -3px 3px var(--border), -4px 4px 24px var(--border);
2025-04-15T08:07:18.2346967Z       height: var(--module-height);
2025-04-15T08:07:18.2347035Z       overflow: auto;
2025-04-15T08:07:18.2347149Z       scrollbar-color: var(--scrollbar-thumb) #293030;
2025-04-15T08:07:18.2347229Z       scrollbar-width: thin;
2025-04-15T08:07:18.2347313Z       /* backdrop-filter: blur(2px); */
2025-04-15T08:07:18.2347377Z     }
2025-04-15T08:07:18.2347381Z 
2025-04-15T08:07:18.2347469Z     body.netdata-splash .module-header {
2025-04-15T08:07:18.2347681Z       display: flex;
2025-04-15T08:07:18.2347751Z       align-items: center;
2025-04-15T08:07:18.2347818Z       gap: 4px;
2025-04-15T08:07:18.2347897Z       padding: 4px 16px;
2025-04-15T08:07:18.2347982Z       background: rgba(0, 0, 0, 0.8);
2025-04-15T08:07:18.2348069Z       border-radius: 16px 16px 0 0;
2025-04-15T08:07:18.2348135Z       color: #8eae9b;
2025-04-15T08:07:18.2348229Z       border-bottom: 1px solid var(--border);
2025-04-15T08:07:18.2348307Z       position: sticky;
2025-04-15T08:07:18.2348370Z       top: 0;
2025-04-15T08:07:18.2348433Z     }
2025-04-15T08:07:18.2348437Z 
2025-04-15T08:07:18.2348552Z     body.netdata-splash .module-header svg path {
2025-04-15T08:07:18.2348630Z       fill: var(--accent);
2025-04-15T08:07:18.2348691Z     }
2025-04-15T08:07:18.2348695Z 
2025-04-15T08:07:18.2348796Z     body.netdata-splash .modules-container {
2025-04-15T08:07:18.2348873Z       max-height: 100%;
2025-04-15T08:07:18.2348947Z       text-align: center;
2025-04-15T08:07:18.2349023Z       margin: auto;
2025-04-15T08:07:18.2349095Z       column-gap: 24px;
2025-04-15T08:07:18.2349155Z     }
2025-04-15T08:07:18.2349164Z 
2025-04-15T08:07:18.2349256Z     body.netdata-splash .module-content {
2025-04-15T08:07:18.2349334Z       padding: 4px 16px;
2025-04-15T08:07:18.2349400Z     }
2025-04-15T08:07:18.2349403Z 
2025-04-15T08:07:18.2349508Z     body.netdata-splash .db-metrics-container {
2025-04-15T08:07:18.2349580Z       display: flex;
2025-04-15T08:07:18.2349657Z       justify-content: center;
2025-04-15T08:07:18.2349723Z       gap: 16px;
2025-04-15T08:07:18.2349787Z     }
2025-04-15T08:07:18.2349791Z 
2025-04-15T08:07:18.2349885Z     body.netdata-splash .db-metrics-blocks {
2025-04-15T08:07:18.2349959Z       /* display: flex; */
2025-04-15T08:07:18.2350042Z       /* flex-direction: column; */
2025-04-15T08:07:18.2350116Z       /* align-items: center;
2025-04-15T08:07:18.2350195Z       justify-content: center;
2025-04-15T08:07:18.2350261Z       gap: 24px; */
2025-04-15T08:07:18.2350345Z       height: var(--module-height);
2025-04-15T08:07:18.2350416Z       width: 100%;
2025-04-15T08:07:18.2350482Z     }
2025-04-15T08:07:18.2350485Z 
2025-04-15T08:07:18.2350557Z     /* .db-metrics-block {
2025-04-15T08:07:18.2350741Z       display: flex;
2025-04-15T08:07:18.2350822Z       flex-direction: column;
2025-04-15T08:07:18.2350894Z       text-align: center;
2025-04-15T08:07:18.2350968Z       min-width: 15vmax;
2025-04-15T08:07:18.2351035Z       height: 150px;
2025-04-15T08:07:18.2351105Z       padding: 0 24px;
2025-04-15T08:07:18.2351171Z     } */
2025-04-15T08:07:18.2351310Z     body.netdata-splash .db-metrics-blocks .module-content {
2025-04-15T08:07:18.2351381Z       padding: 0;
2025-04-15T08:07:18.2351441Z     }
2025-04-15T08:07:18.2351444Z 
2025-04-15T08:07:18.2351541Z     /* .db-metrics-block:not(:last-child) {
2025-04-15T08:07:18.2351634Z       border-right: 1px solid var(--border);
2025-04-15T08:07:18.2351696Z     } */
2025-04-15T08:07:18.2351792Z     body.netdata-splash .db-metrics-title {
2025-04-15T08:07:18.2351869Z       font-size: 1.5vmin;
2025-04-15T08:07:18.2351934Z     }
2025-04-15T08:07:18.2351938Z 
2025-04-15T08:07:18.2352048Z     body.netdata-splash .db-metrics-block-title {
2025-04-15T08:07:18.2352121Z       font-size: 14px;
2025-04-15T08:07:18.2352202Z       padding: 8px 16px;
2025-04-15T08:07:18.2352271Z       z-index: 100;
2025-04-15T08:07:18.2352348Z       font-weight: bold;
2025-04-15T08:07:18.2352414Z       color: #fff;
2025-04-15T08:07:18.2352474Z     }
2025-04-15T08:07:18.2352482Z 
2025-04-15T08:07:18.2352585Z     body.netdata-splash .db-metrics .key-value {
2025-04-15T08:07:18.2352652Z       display: flex;
2025-04-15T08:07:18.2352730Z       flex-direction: column;
2025-04-15T08:07:18.2352807Z       align-items: flex-start;
2025-04-15T08:07:18.2352871Z     }
2025-04-15T08:07:18.2352875Z 
2025-04-15T08:07:18.2353028Z     body.netdata-splash .db-metrics .key-value span:nth-child(2) {
2025-04-15T08:07:18.2353099Z       font-size: 12px;
2025-04-15T08:07:18.2353175Z       color: var(--accent);
2025-04-15T08:07:18.2353336Z       filter: blur(0.5px);
2025-04-15T08:07:18.2353411Z       text-align: center;
2025-04-15T08:07:18.2353471Z     }
2025-04-15T08:07:18.2353475Z 
2025-04-15T08:07:18.2353568Z     body.netdata-splash .db-metrics {
2025-04-15T08:07:18.2353646Z       padding: 8px 16px;
2025-04-15T08:07:18.2353742Z       border-bottom: 1px solid var(--border);
2025-04-15T08:07:18.2353806Z     }
2025-04-15T08:07:18.2353810Z 
2025-04-15T08:07:18.2353894Z     body.netdata-splash .disk-stats {
2025-04-15T08:07:18.2353974Z       /* border-bottom: 0; */
2025-04-15T08:07:18.2354042Z       padding: 16px;
2025-04-15T08:07:18.2354101Z     }
2025-04-15T08:07:18.2354105Z 
2025-04-15T08:07:18.2354254Z     body.netdata-splash .module-content:last-child .disk-stats {
2025-04-15T08:07:18.2354334Z       padding-bottom: 112px;
2025-04-15T08:07:18.2354397Z     }
2025-04-15T08:07:18.2354401Z 
2025-04-15T08:07:18.2354499Z     body.netdata-splash .disk-max .key-value {
2025-04-15T08:07:18.2354578Z       flex-direction: row;
2025-04-15T08:07:18.2354652Z       font-size: 12px;
2025-04-15T08:07:18.2354736Z       justify-content: space-between;
2025-04-15T08:07:18.2354812Z       padding: 2px 0;
2025-04-15T08:07:18.2354876Z     }
2025-04-15T08:07:18.2354884Z 
2025-04-15T08:07:18.2355028Z     body.netdata-splash .disk-max .key-value span:nth-child(2) {
2025-04-15T08:07:18.2355098Z       font-size: 12px;
2025-04-15T08:07:18.2355166Z       display: flex;
2025-04-15T08:07:18.2355253Z       justify-content: space-between;
2025-04-15T08:07:18.2355319Z       width: 100%;
2025-04-15T08:07:18.2355384Z     }
2025-04-15T08:07:18.2355388Z 
2025-04-15T08:07:18.2355486Z     body.netdata-splash .disk-used .key-value {
2025-04-15T08:07:18.2355560Z       padding: 2px 0;
2025-04-15T08:07:18.2355620Z     }
2025-04-15T08:07:18.2355623Z 
2025-04-15T08:07:18.2355790Z     body.netdata-splash .disk-max .key-value span:nth-child(2):before {
2025-04-15T08:07:18.2355869Z       content: "Disk Size";
2025-04-15T08:07:18.2355929Z     }
2025-04-15T08:07:18.2355938Z 
2025-04-15T08:07:18.2356200Z     body.netdata-splash .disk-used .key-value span:nth-child(2):before {
2025-04-15T08:07:18.2356271Z       content: "Used ";
2025-04-15T08:07:18.2356335Z     }
2025-04-15T08:07:18.2356456Z 
2025-04-15T08:07:18.2356604Z     body.netdata-splash .disk-used .key-value span:nth-child(2) {
2025-04-15T08:07:18.2356673Z       font-size: 12px;
2025-04-15T08:07:18.2356746Z       display: flex;
2025-04-15T08:07:18.2356829Z       justify-content: space-between;
2025-04-15T08:07:18.2356897Z       width: 100%;
2025-04-15T08:07:18.2356958Z     }
2025-04-15T08:07:18.2356961Z 
2025-04-15T08:07:18.2357109Z     body.netdata-splash .db-metrics .key-value span:first-child {
2025-04-15T08:07:18.2357179Z       font-size: 12px;
2025-04-15T08:07:18.2357252Z       color: var(--text);
2025-04-15T08:07:18.2357316Z     }
2025-04-15T08:07:18.2357319Z 
2025-04-15T08:07:18.2357423Z     body.netdata-splash .percentage-container {
2025-04-15T08:07:18.2357491Z       width: 100%;
2025-04-15T08:07:18.2357573Z       background: transparent;
2025-04-15T08:07:18.2357659Z       border: 1px solid var(--primary);
2025-04-15T08:07:18.2357731Z       height: 16px;
2025-04-15T08:07:18.2357801Z       border-radius: 1px;
2025-04-15T08:07:18.2357884Z       position: relative;
2025-04-15T08:07:18.2357947Z     }
2025-04-15T08:07:18.2357951Z 
2025-04-15T08:07:18.2358050Z     body.netdata-splash .percentage-bar {
2025-04-15T08:07:18.2358123Z       background: #016a2b94;
2025-04-15T08:07:18.2358195Z       position: absolute;
2025-04-15T08:07:18.2358263Z       bottom: 0;
2025-04-15T08:07:18.2358326Z       top: 0;
2025-04-15T08:07:18.2358394Z       left: 0;
2025-04-15T08:07:18.2358475Z       backdrop-filter: blur(1px);
2025-04-15T08:07:18.2358534Z     }
2025-04-15T08:07:18.2358538Z 
2025-04-15T08:07:18.2358636Z     body.netdata-splash .percentage-text {
2025-04-15T08:07:18.2358708Z       position: absolute;
2025-04-15T08:07:18.2358781Z       font-size: 12px;
2025-04-15T08:07:18.2358843Z       top: 0;
2025-04-15T08:07:18.2359027Z       padding: 0 2px;
2025-04-15T08:07:18.2359104Z       color: var(--accent);
2025-04-15T08:07:18.2359164Z     }
2025-04-15T08:07:18.2359168Z 
2025-04-15T08:07:18.2359264Z     body.netdata-splash .data-tab-table {
2025-04-15T08:07:18.2359337Z       padding: 16px;
2025-04-15T08:07:18.2359407Z       width: 400px;
2025-04-15T08:07:18.2359486Z       height: var(--module-height);
2025-04-15T08:07:18.2359551Z       margin: auto;
2025-04-15T08:07:18.2359617Z     }
2025-04-15T08:07:18.2359620Z 
2025-04-15T08:07:18.2359720Z     body.netdata-splash .node-info-container {
2025-04-15T08:07:18.2359791Z       display: flex;
2025-04-15T08:07:18.2359864Z       flex-direction: column;
2025-04-15T08:07:18.2359927Z       width: 100%;
2025-04-15T08:07:18.2360005Z       justify-content: center;
2025-04-15T08:07:18.2360078Z       align-items: center;
2025-04-15T08:07:18.2360146Z       gap: 8px;
2025-04-15T08:07:18.2360206Z     }
2025-04-15T08:07:18.2360210Z 
2025-04-15T08:07:18.2360299Z     body.netdata-splash .node-info {
2025-04-15T08:07:18.2360372Z       display: flex;
2025-04-15T08:07:18.2360445Z       justify-content: center;
2025-04-15T08:07:18.2360516Z       width: 100%;
2025-04-15T08:07:18.2360580Z       gap: 8px;
2025-04-15T08:07:18.2360661Z       flex-direction: row;
2025-04-15T08:07:18.2360722Z     }
2025-04-15T08:07:18.2360725Z 
2025-04-15T08:07:18.2360841Z     body.netdata-splash .node-info-container .title {
2025-04-15T08:07:18.2360916Z       font-size: 12px;
2025-04-15T08:07:18.2360977Z     }
2025-04-15T08:07:18.2360980Z 
2025-04-15T08:07:18.2361082Z     body.netdata-splash .node-info .key-value {
2025-04-15T08:07:18.2361168Z       border: 1px solid var(--highlight);
2025-04-15T08:07:18.2361243Z       padding: 2px 8px;
2025-04-15T08:07:18.2361315Z       border-radius: 4px;
2025-04-15T08:07:18.2361386Z       font-size: 12px;
2025-04-15T08:07:18.2361472Z       color: var(--highlight);
2025-04-15T08:07:18.2361541Z       height: 20px;
2025-04-15T08:07:18.2361606Z     }
2025-04-15T08:07:18.2361610Z 
2025-04-15T08:07:18.2361768Z     body.netdata-splash .node-info .key-value span:first-child {
2025-04-15T08:07:18.2361845Z       margin-right: 4px;
2025-04-15T08:07:18.2361924Z       font-weight: normal;
2025-04-15T08:07:18.2361986Z     }
2025-04-15T08:07:18.2362074Z 
2025-04-15T08:07:18.2362177Z     body.netdata-splash .availability {
2025-04-15T08:07:18.2362251Z       text-align: right;
2025-04-15T08:07:18.2362332Z       font-family: monospace;
2025-04-15T08:07:18.2362401Z       display: flex;
2025-04-15T08:07:18.2362477Z       flex-direction: column;
2025-04-15T08:07:18.2362567Z       text-transform: capitalize;
2025-04-15T08:07:18.2362642Z       padding: 8px 16px;
2025-04-15T08:07:18.2362713Z       color: #fff;
2025-04-15T08:07:18.2362783Z       font-size: 12px;
2025-04-15T08:07:18.2362845Z     }
2025-04-15T08:07:18.2362848Z 
2025-04-15T08:07:18.2362964Z     body.netdata-splash .availability .key-valye {
2025-04-15T08:07:18.2363035Z       padding: 4px 0;
2025-04-15T08:07:18.2363100Z     }
2025-04-15T08:07:18.2363104Z 
2025-04-15T08:07:18.2363196Z     body.netdata-splash .sub-module {
2025-04-15T08:07:18.2363266Z       width: 100%;
2025-04-15T08:07:18.2363328Z     }
2025-04-15T08:07:18.2363331Z 
2025-04-15T08:07:18.2363414Z     body.netdata-splash .hardware {
2025-04-15T08:07:18.2363499Z       flex-direction: column;
2025-04-15T08:07:18.2363559Z     }
2025-04-15T08:07:18.2363563Z 
2025-04-15T08:07:18.2363676Z     body.netdata-splash .hardware .module-content {
2025-04-15T08:07:18.2363743Z       padding: 0;
2025-04-15T08:07:18.2363811Z       display: flex;
2025-04-15T08:07:18.2363876Z     }
2025-04-15T08:07:18.2363880Z 
2025-04-15T08:07:18.2364010Z     body.netdata-splash .module.has-title .section-title {
2025-04-15T08:07:18.2364091Z       padding-bottom: 12px;
2025-04-15T08:07:18.2364161Z       margin-bottom: 0;
2025-04-15T08:07:18.2364226Z     }
2025-04-15T08:07:18.2364229Z 
2025-04-15T08:07:18.2364310Z     body.netdata-splash .h-auto {
2025-04-15T08:07:18.2364377Z       height: auto;
2025-04-15T08:07:18.2364444Z     }
2025-04-15T08:07:18.2364532Z 
2025-04-15T08:07:18.2364619Z     body.netdata-splash .none {
2025-04-15T08:07:18.2364689Z       display: none;
2025-04-15T08:07:18.2364747Z     }
2025-04-15T08:07:18.2364751Z 
2025-04-15T08:07:18.2364849Z     body.netdata-splash .claim-message {
2025-04-15T08:07:18.2364921Z       position: absolute;
2025-04-15T08:07:18.2364986Z       top: 0;
2025-04-15T08:07:18.2365052Z       left: 0;
2025-04-15T08:07:18.2365115Z       right: 0;
2025-04-15T08:07:18.2365185Z       margin: auto;
2025-04-15T08:07:18.2365253Z       padding: 0 24px;
2025-04-15T08:07:18.2365324Z       overflow-y: auto;
2025-04-15T08:07:18.2365387Z     }
2025-04-15T08:07:18.2365390Z 
2025-04-15T08:07:18.2365495Z     body.netdata-splash .claim-message .welcome {
2025-04-15T08:07:18.2365569Z       padding: 16px 0;
2025-04-15T08:07:18.2365640Z       text-align: center;
2025-04-15T08:07:18.2365699Z     }
2025-04-15T08:07:18.2365702Z 
2025-04-15T08:07:18.2365793Z     body.netdata-splash .text-center {
2025-04-15T08:07:18.2365870Z       text-align: center;
2025-04-15T08:07:18.2365934Z     }
2025-04-15T08:07:18.2365937Z 
2025-04-15T08:07:18.2366030Z     body.netdata-splash .connection-modal {
2025-04-15T08:07:18.2366207Z       background: rgba(0, 0, 0, 0.4);
2025-04-15T08:07:18.2366296Z       border: 1px solid var(--border);
2025-04-15T08:07:18.2366368Z       padding: 16px 16px;
2025-04-15T08:07:18.2366440Z       display: flex;
2025-04-15T08:07:18.2366515Z       flex-direction: column;
2025-04-15T08:07:18.2366587Z       gap: 12px;
2025-04-15T08:07:18.2366659Z       position: relative;
2025-04-15T08:07:18.2366727Z       font-size: 14px;
2025-04-15T08:07:18.2366792Z     }
2025-04-15T08:07:18.2366795Z 
2025-04-15T08:07:18.2366889Z     body.netdata-splash .connection-step {
2025-04-15T08:07:18.2366961Z       display: flex;
2025-04-15T08:07:18.2367036Z       flex-direction: column;
2025-04-15T08:07:18.2367105Z       gap: 12px;
2025-04-15T08:07:18.2367174Z       position: relative;
2025-04-15T08:07:18.2367245Z       min-height: 300px;
2025-04-15T08:07:18.2367315Z     }
2025-04-15T08:07:18.2367319Z 
2025-04-15T08:07:18.2367408Z     body.netdata-splash .dropdown-custom {
2025-04-15T08:07:18.2367479Z       display: flex;
2025-04-15T08:07:18.2367553Z       flex-direction: column;
2025-04-15T08:07:18.2367756Z       gap: 12px;
2025-04-15T08:07:18.2367831Z       position: relative;
2025-04-15T08:07:18.2367920Z     }
2025-04-15T08:07:18.2367923Z 
2025-04-15T08:07:18.2368013Z     body.netdata-splash .modal-footer {
2025-04-15T08:07:18.2368093Z       height: var(--footer-height);
2025-04-15T08:07:18.2368168Z       padding: 10px 0 0;
2025-04-15T08:07:18.2368235Z       display: flex;
2025-04-15T08:07:18.2368318Z       justify-content: space-between;
2025-04-15T08:07:18.2368383Z     }
2025-04-15T08:07:18.2368387Z 
2025-04-15T08:07:18.2368485Z     body.netdata-splash .modal-footer .button {
2025-04-15T08:07:18.2368560Z       height: 32px;
2025-04-15T08:07:18.2368630Z       font-size: 14px;
2025-04-15T08:07:18.2368692Z     }
2025-04-15T08:07:18.2368695Z 
2025-04-15T08:07:18.2368794Z     body.netdata-splash .list-options {
2025-04-15T08:07:18.2368861Z       margin: 0;
2025-04-15T08:07:18.2374769Z       padding: 0;
2025-04-15T08:07:18.2374881Z       list-style: none;
2025-04-15T08:07:18.2374974Z       height: 300px;
2025-04-15T08:07:18.2375046Z       overflow: auto;
2025-04-15T08:07:18.2375176Z       scrollbar-color: var(--scrollbar-thumb) #293030;
2025-04-15T08:07:18.2375257Z       scrollbar-width: thin;
2025-04-15T08:07:18.2375318Z     }
2025-04-15T08:07:18.2375323Z 
2025-04-15T08:07:18.2375427Z     body.netdata-splash .list-options li {
2025-04-15T08:07:18.2375503Z       padding: 8px 12px;
2025-04-15T08:07:18.2375599Z       background: var(--list-option-bg);
2025-04-15T08:07:18.2375701Z       border: 1px solid var(--border-neutral);
2025-04-15T08:07:18.2375788Z       margin-bottom: 12px;
2025-04-15T08:07:18.2375859Z       cursor: pointer;
2025-04-15T08:07:18.2375919Z     }
2025-04-15T08:07:18.2375923Z 
2025-04-15T08:07:18.2376041Z     body.netdata-splash .list-options li:hover {
2025-04-15T08:07:18.2376454Z       background: var(--list-option-hover-bg);
2025-04-15T08:07:18.2376520Z     }
2025-04-15T08:07:18.2376524Z 
2025-04-15T08:07:18.2376644Z     body.netdata-splash .list-options li.selected {
2025-04-15T08:07:18.2376753Z       background: var(--list-option-selected-bg);
2025-04-15T08:07:18.2376835Z       color: var(--highlight);
2025-04-15T08:07:18.2376906Z       display: flex;
2025-04-15T08:07:18.2377001Z       justify-content: space-between;
2025-04-15T08:07:18.2377061Z     }
2025-04-15T08:07:18.2377065Z 
2025-04-15T08:07:18.2377202Z     body.netdata-splash .list-options li.selected:after {
2025-04-15T08:07:18.2377272Z       content: "\2713";
2025-04-15T08:07:18.2377343Z       margin-left: 2px;
2025-04-15T08:07:18.2377407Z     }
2025-04-15T08:07:18.2377411Z 
2025-04-15T08:07:18.2377510Z     body.netdata-splash input[type="text"] {
2025-04-15T08:07:18.2377586Z       background: #2d3535;
2025-04-15T08:07:18.2377657Z       padding: 4px 8px;
2025-04-15T08:07:18.2377733Z       border: 0;
2025-04-15T08:07:18.2377805Z       font-size: 14px;
2025-04-15T08:07:18.2377873Z       min-height: 28px;
2025-04-15T08:07:18.2377948Z       color: var(--text);
2025-04-15T08:07:18.2378019Z       border-radius: 2px;
2025-04-15T08:07:18.2378085Z     }
2025-04-15T08:07:18.2378089Z 
2025-04-15T08:07:18.2378195Z     body.netdata-splash input[type="text"]:focus {
2025-04-15T08:07:18.2378281Z       outline: 1px solid var(--border);
2025-04-15T08:07:18.2378343Z     }
2025-04-15T08:07:18.2378347Z 
2025-04-15T08:07:18.2378432Z     body.netdata-splash .dropdown {
2025-04-15T08:07:18.2378506Z       position: relative;
2025-04-15T08:07:18.2378571Z       width: auto;
2025-04-15T08:07:18.2378652Z       border: 1px solid var(--border);
2025-04-15T08:07:18.2378724Z       border-radius: 4px;
2025-04-15T08:07:18.2378792Z       padding: 8px;
2025-04-15T08:07:18.2378865Z       cursor: pointer;
2025-04-15T08:07:18.2378924Z     }
2025-04-15T08:07:18.2378928Z 
2025-04-15T08:07:18.2379025Z     body.netdata-splash .dropdown-toggle {
2025-04-15T08:07:18.2379099Z       display: flex;
2025-04-15T08:07:18.2379184Z       justify-content: space-between;
2025-04-15T08:07:18.2379259Z       align-items: center;
2025-04-15T08:07:18.2379318Z     }
2025-04-15T08:07:18.2379437Z 
2025-04-15T08:07:18.2379547Z     body.netdata-splash .checkbox-container {
2025-04-15T08:07:18.2379614Z       display: none;
2025-04-15T08:07:18.2379688Z       position: absolute;
2025-04-15T08:07:18.2379755Z       top: 100%;
2025-04-15T08:07:18.2379817Z       left: 0;
2025-04-15T08:07:18.2379881Z       width: 100%;
2025-04-15T08:07:18.2379958Z       border: 1px solid var(--border);
2025-04-15T08:07:18.2380046Z       background-color: var(--main-bg);
2025-04-15T08:07:18.2380110Z       z-index: 1;
2025-04-15T08:07:18.2380180Z       max-height: 150px;
2025-04-15T08:07:18.2380253Z       overflow-y: auto;
2025-04-15T08:07:18.2380320Z       padding: 8px;
2025-04-15T08:07:18.2380381Z     }
2025-04-15T08:07:18.2380384Z 
2025-04-15T08:07:18.2380496Z     body.netdata-splash .checkbox-container label {
2025-04-15T08:07:18.2380571Z       display: block;
2025-04-15T08:07:18.2380647Z       margin-bottom: 8px;
2025-04-15T08:07:18.2380705Z     }
2025-04-15T08:07:18.2380708Z 
2025-04-15T08:07:18.2380824Z     body.netdata-splash .checkbox-container input {
2025-04-15T08:07:18.2380896Z       margin-right: 5px;
2025-04-15T08:07:18.2380960Z     }
2025-04-15T08:07:18.2380964Z 
2025-04-15T08:07:18.2381053Z     body.netdata-splash .selected-rooms {
2025-04-15T08:07:18.2381122Z       font-size: 14px;
2025-04-15T08:07:18.2381189Z       color: #333;
2025-04-15T08:07:18.2381247Z     }
2025-04-15T08:07:18.2381251Z 
2025-04-15T08:07:18.2381341Z     body.netdata-splash .text-padding {
2025-04-15T08:07:18.2381415Z       padding: 8px 8px 16px;
2025-04-15T08:07:18.2381475Z     }
2025-04-15T08:07:18.2381478Z 
2025-04-15T08:07:18.2381566Z     body.netdata-splash .nd-radio,
2025-04-15T08:07:18.2381651Z     body.netdata-splash .nd-checkbox {
2025-04-15T08:07:18.2381721Z       display: block;
2025-04-15T08:07:18.2381884Z       position: relative;
2025-04-15T08:07:18.2381962Z       padding-left: 32px;
2025-04-15T08:07:18.2382033Z       cursor: pointer;
2025-04-15T08:07:18.2382100Z       font-size: 16px;
2025-04-15T08:07:18.2382194Z       -webkit-user-select: none;
2025-04-15T08:07:18.2382272Z       -moz-user-select: none;
2025-04-15T08:07:18.2382346Z       user-select: none;
2025-04-15T08:07:18.2382418Z       line-height: 20px;
2025-04-15T08:07:18.2382477Z     }
2025-04-15T08:07:18.2382481Z 
2025-04-15T08:07:18.2382580Z     body.netdata-splash .nd-checkbox input {
2025-04-15T08:07:18.2382650Z       position: absolute;
2025-04-15T08:07:18.2382720Z       opacity: 0;
2025-04-15T08:07:18.2382788Z       cursor: pointer;
2025-04-15T08:07:18.2382852Z       height: 0;
2025-04-15T08:07:18.2382918Z       width: 0;
2025-04-15T08:07:18.2382977Z     }
2025-04-15T08:07:18.2382980Z 
2025-04-15T08:07:18.2383088Z     body.netdata-splash .nd-checkbox .checkmark {
2025-04-15T08:07:18.2383160Z       position: absolute;
2025-04-15T08:07:18.2383233Z       top: 0;
2025-04-15T08:07:18.2383295Z       left: 0;
2025-04-15T08:07:18.2383362Z       height: 16px;
2025-04-15T08:07:18.2383431Z       width: 16px;
2025-04-15T08:07:18.2383518Z       background-color: var(--main-bg);
2025-04-15T08:07:18.2383611Z       border: 1px solid var(--primary);
2025-04-15T08:07:18.2383683Z       border-radius: 2px;
2025-04-15T08:07:18.2383742Z     }
2025-04-15T08:07:18.2383746Z 
2025-04-15T08:07:18.2383892Z     body.netdata-splash .nd-checkbox:hover input~.checkmark {
2025-04-15T08:07:18.2383977Z       background-color: var(--border);
2025-04-15T08:07:18.2384041Z     }
2025-04-15T08:07:18.2384045Z 
2025-04-15T08:07:18.2384181Z     body.netdata-splash .nd-checkbox :hover input~.checkmark {
2025-04-15T08:07:18.2384263Z       background-color: #ccc;
2025-04-15T08:07:18.2384324Z     }
2025-04-15T08:07:18.2384328Z 
2025-04-15T08:07:18.2384466Z     body.netdata-splash .nd-checkbox input:checked~.checkmark {
2025-04-15T08:07:18.2384557Z       background-color: var(--boder);
2025-04-15T08:07:18.2384624Z     }
2025-04-15T08:07:18.2384628Z 
2025-04-15T08:07:18.2384751Z     body.netdata-splash .nd-checkbox .checkmark:after {
2025-04-15T08:07:18.2384817Z       content: "";
2025-04-15T08:07:18.2384985Z       position: absolute;
2025-04-15T08:07:18.2385052Z       display: none;
2025-04-15T08:07:18.2385111Z     }
2025-04-15T08:07:18.2385114Z 
2025-04-15T08:07:18.2385278Z     body.netdata-splash .nd-checkbox input:checked~.checkmark:after {
2025-04-15T08:07:18.2385347Z       display: block;
2025-04-15T08:07:18.2385410Z     }
2025-04-15T08:07:18.2385414Z 
2025-04-15T08:07:18.2385529Z     body.netdata-splash .nd-checkbox .checkmark:after {
2025-04-15T08:07:18.2385603Z       inset: 0 0 2px 0;
2025-04-15T08:07:18.2385670Z       margin: auto;
2025-04-15T08:07:18.2385735Z       width: 2px;
2025-04-15T08:07:18.2385804Z       height: 8px;
2025-04-15T08:07:18.2385886Z       border: solid var(--highlight);
2025-04-15T08:07:18.2385970Z       border-width: 0 2px 2px 0;
2025-04-15T08:07:18.2386054Z       transform: rotate(45deg);
2025-04-15T08:07:18.2386218Z     }
2025-04-15T08:07:18.2386221Z 
2025-04-15T08:07:18.2386295Z     /* Retention table */
2025-04-15T08:07:18.2386367Z     #tiers-container {
2025-04-15T08:07:18.2386445Z       height: auto;
2025-04-15T08:07:18.2386503Z     }
2025-04-15T08:07:18.2386507Z 
2025-04-15T08:07:18.2386573Z     #tiers-table {
2025-04-15T08:07:18.2386643Z       width: 100%;
2025-04-15T08:07:18.2386723Z       border-collapse: collapse;
2025-04-15T08:07:18.2386785Z     }
2025-04-15T08:07:18.2386789Z 
2025-04-15T08:07:18.2386887Z     #tiers-table thead tr:nth-of-type(1) th {
2025-04-15T08:07:18.2386965Z       padding-top: 16px;
2025-04-15T08:07:18.2387023Z     }
2025-04-15T08:07:18.2387027Z 
2025-04-15T08:07:18.2387118Z     #tiers-table thead tr:nth-of-type(2) th {
2025-04-15T08:07:18.2387197Z       padding-bottom: 16px;
2025-04-15T08:07:18.2387256Z     }
2025-04-15T08:07:18.2387259Z 
2025-04-15T08:07:18.2387351Z     #tiers-table tbody tr:nth-of-type(1) td {
2025-04-15T08:07:18.2387568Z       border-top: 1px solid var(--border);
2025-04-15T08:07:18.2387647Z       padding-top: 16px;
2025-04-15T08:07:18.2387708Z     }
2025-04-15T08:07:18.2387712Z 
2025-04-15T08:07:18.2387801Z     #tiers-table tbody tr:last-of-type td {
2025-04-15T08:07:18.2387885Z       padding-bottom: 24px;
2025-04-15T08:07:18.2387948Z     }
2025-04-15T08:07:18.2387952Z 
2025-04-15T08:07:18.2388024Z     #tiers-table th {
2025-04-15T08:07:18.2388104Z       font-size: var(--font-small);
2025-04-15T08:07:18.2388176Z       padding: 8px 4px;
2025-04-15T08:07:18.2388240Z     }
2025-04-15T08:07:18.2388244Z 
2025-04-15T08:07:18.2388312Z     #tiers-table td {
2025-04-15T08:07:18.2388397Z       font-size: var(--font-medium);
2025-04-15T08:07:18.2388470Z       text-align: center;
2025-04-15T08:07:18.2388544Z       padding: 12px 4px;
2025-04-15T08:07:18.2388604Z     }
2025-04-15T08:07:18.2388607Z 
2025-04-15T08:07:18.2388689Z     #tiers-table th:first-of-type,
2025-04-15T08:07:18.2388774Z     #tiers-table td:first-of-type {
2025-04-15T08:07:18.2388849Z       padding-left: 12px;
2025-04-15T08:07:18.2388909Z     }
2025-04-15T08:07:18.2388970Z   
2025-04-15T08:07:18.2389048Z     #tiers-table th:last-of-type,  
2025-04-15T08:07:18.2389138Z     #tiers-table td:last-of-type {
2025-04-15T08:07:18.2389214Z       padding-right: 12px;
2025-04-15T08:07:18.2389279Z     }
2025-04-15T08:07:18.2389283Z 
2025-04-15T08:07:18.2389361Z     #tiers-table .section-start {
2025-04-15T08:07:18.2389452Z       border-left: 1px solid var(--border);
2025-04-15T08:07:18.2389512Z     }
2025-04-15T08:07:18.2389515Z 
2025-04-15T08:07:18.2389590Z     .progress-indicator {
2025-04-15T08:07:18.2389658Z       gap: 8px;
2025-04-15T08:07:18.2389728Z       padding: 0 8px;
2025-04-15T08:07:18.2389794Z     }
2025-04-15T08:07:18.2389798Z 
2025-04-15T08:07:18.2389880Z     .progress-bar-container {
2025-04-15T08:07:18.2389952Z       position: relative;
2025-04-15T08:07:18.2390022Z       width: 100%;
2025-04-15T08:07:18.2390113Z       height: var(--progress-bar-height);
2025-04-15T08:07:18.2390218Z       background-color: var(--border-neutral);
2025-04-15T08:07:18.2390292Z       overflow: hidden;
2025-04-15T08:07:18.2390368Z       border-radius: 2px;
2025-04-15T08:07:18.2390544Z     }
2025-04-15T08:07:18.2390548Z 
2025-04-15T08:07:18.2390618Z     .progress-bar {
2025-04-15T08:07:18.2390693Z       position: absolute;
2025-04-15T08:07:18.2390756Z       top: 0;
2025-04-15T08:07:18.2390822Z       left: 0;
2025-04-15T08:07:18.2390911Z       height: var(--progress-bar-height);
2025-04-15T08:07:18.2390997Z       background-color: var(--primary);
2025-04-15T08:07:18.2391061Z     }
2025-04-15T08:07:18.2391065Z 
2025-04-15T08:07:18.2391128Z     #tooltip {
2025-04-15T08:07:18.2391203Z       max-width: 300px;
2025-04-15T08:07:18.2391286Z       background-color: var(--accent);
2025-04-15T08:07:18.2391362Z       color: var(--text-dark);
2025-04-15T08:07:18.2391438Z       border-radius: 4px;
2025-04-15T08:07:18.2391512Z       padding: 8px 16px;
2025-04-15T08:07:18.2391585Z       position: fixed;
2025-04-15T08:07:18.2391669Z       font-size: var(--font-small);
2025-04-15T08:07:18.2391741Z       line-height: 1.5;
2025-04-15T08:07:18.2391808Z       z-index: 9999;
2025-04-15T08:07:18.2391874Z       display: none;
2025-04-15T08:07:18.2391977Z     }</style><script>const toggleTab = tab => {
2025-04-15T08:07:18.2392118Z       const factors = document.querySelectorAll(".data-tab");
2025-04-15T08:07:18.2392244Z       const tabs = document.querySelectorAll(".btn-tab");
2025-04-15T08:07:18.2392248Z 
2025-04-15T08:07:18.2392334Z       factors.forEach(function (factor) {
2025-04-15T08:07:18.2392470Z         let dataTab = parseInt(factor.getAttribute("data-tab"));
2025-04-15T08:07:18.2392563Z         if (dataTab == tab || dataTab === 0) {
2025-04-15T08:07:18.2392648Z           factor.classList.add("active");
2025-04-15T08:07:18.2392715Z         } else {
2025-04-15T08:07:18.2392806Z           factor.classList.remove("active");
2025-04-15T08:07:18.2392870Z         }
2025-04-15T08:07:18.2392930Z       });
2025-04-15T08:07:18.2393016Z 
2025-04-15T08:07:18.2393103Z       // Toggle active class on tab buttons
2025-04-15T08:07:18.2393192Z       tabs.forEach(tabButton => {
2025-04-15T08:07:18.2393281Z         if (tabButton.dataset?.tab == tab) {
2025-04-15T08:07:18.2393379Z           tabButton.classList.add("active");
2025-04-15T08:07:18.2393444Z         } else {
2025-04-15T08:07:18.2393539Z           tabButton.classList.remove("active");
2025-04-15T08:07:18.2393603Z         }
2025-04-15T08:07:18.2393663Z       });
2025-04-15T08:07:18.2393727Z     }
2025-04-15T08:07:18.2393731Z 
2025-04-15T08:07:18.2393813Z     const initGrid = () => {
2025-04-15T08:07:18.2393974Z       const canvas1 = document.getElementById("monitorGrid");
2025-04-15T08:07:18.2394085Z       const context1 = canvas1.getContext("2d");
2025-04-15T08:07:18.2394206Z       const frame = document.querySelector(".frame");
2025-04-15T08:07:18.2394284Z       const cellSize = 4;
2025-04-15T08:07:18.2394357Z       const gapSize = 2;
2025-04-15T08:07:18.2394504Z       const colors = ["#001107", "#003114", "#014420", "#047031", "#049846"];
2025-04-15T08:07:18.2394509Z 
2025-04-15T08:07:18.2394576Z       let grid = [];
2025-04-15T08:07:18.2394580Z 
2025-04-15T08:07:18.2394671Z       const getRandomColor = () => {
2025-04-15T08:07:18.2394809Z         return colors[Math.floor(Math.random() * colors.length)];
2025-04-15T08:07:18.2394873Z       }
2025-04-15T08:07:18.2394877Z 
2025-04-15T08:07:18.2394980Z       const resizeCanvas = (canvas, context) => {
2025-04-15T08:07:18.2395068Z         canvas.width = frame.clientWidth;
2025-04-15T08:07:18.2395165Z         canvas.height = frame.clientHeight;
2025-04-15T08:07:18.2395170Z 
2025-04-15T08:07:18.2395319Z         const cols = Math.floor(canvas.width / (cellSize + gapSize));
2025-04-15T08:07:18.2395469Z         const rows = Math.floor(canvas.height / (cellSize + gapSize));
2025-04-15T08:07:18.2395473Z 
2025-04-15T08:07:18.2395565Z         grid = Array.from({ length: rows }, () =>
2025-04-15T08:07:18.2395672Z           Array.from({ length: cols }, getRandomColor)
2025-04-15T08:07:18.2395744Z         );
2025-04-15T08:07:18.2395748Z 
2025-04-15T08:07:18.2395830Z         drawGrid(context, canvas);
2025-04-15T08:07:18.2395898Z       }
2025-04-15T08:07:18.2396006Z 
2025-04-15T08:07:18.2396193Z       const drawGrid = (context, canvas) => {
2025-04-15T08:07:18.2396331Z         context.clearRect(0, 0, canvas.width, canvas.height);
2025-04-15T08:07:18.2396471Z         const cols = Math.floor(canvas.width / (cellSize + gapSize));
2025-04-15T08:07:18.2396617Z         const rows = Math.floor(canvas.height / (cellSize + gapSize));
2025-04-15T08:07:18.2396625Z 
2025-04-15T08:07:18.2396711Z         for (let row = 0; row < rows; row++) {
2025-04-15T08:07:18.2396797Z           for (let col = 0; col < cols; col++) {
2025-04-15T08:07:18.2396884Z             if (grid[row] && grid[row][col]) {
2025-04-15T08:07:18.2396973Z               context.fillStyle = grid[row][col];
2025-04-15T08:07:18.2397054Z               context.fillRect(
2025-04-15T08:07:18.2397142Z                 col * (cellSize + gapSize),
2025-04-15T08:07:18.2397222Z                 row * (cellSize + gapSize),
2025-04-15T08:07:18.2397293Z                 cellSize,
2025-04-15T08:07:18.2397358Z                 cellSize
2025-04-15T08:07:18.2397428Z               );
2025-04-15T08:07:18.2397488Z             }
2025-04-15T08:07:18.2397552Z           }
2025-04-15T08:07:18.2397613Z         }
2025-04-15T08:07:18.2397673Z       }
2025-04-15T08:07:18.2397677Z 
2025-04-15T08:07:18.2397766Z       resizeCanvas(canvas1, context1);
2025-04-15T08:07:18.2397771Z 
2025-04-15T08:07:18.2397961Z       window.addEventListener("resize", () => resizeCanvas(canvas1, context1));
2025-04-15T08:07:18.2447338Z     }</script></head><body class="loading netdata-splash"><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-N6CBMJD" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="app" class="container grid"><div class="frame frame-left col-span-7 grid light-beam relative"><div class="head-summary absolute index-10"><div class="server"><div class="no-title" id="server"></div><div class="no-title" id="package"></div></div><div class="availability h-auto module"><div class="title">Cloud status</div><div class="no-key" id="cloud_status"></div></div></div><div class="col-span-12 row-span-11"><div id="sphereContainer"><div id="loadingMessage" class="loading-message">Loading...</div><div class="hide-title absolute-center sphere-stats-container"><div class="metrics-container"><div class="collected-metrics" id="collectedMetrics"></div><div class="node-info-container"><div class="title">NODES</div><div class="node-info" id="nodes_streaming"></div></div></div><div class="system-container data-tab data-tab-container" data-tab="2"><div class="system grid-columns-10 md-grid-columns-12"><div class="flex-col col-span-5 md-col-span-6"><div class="section-title">Kernel</div><div class="grid-columns-10"><div class="h-auto module col-span-5" id="kernel"></div><div class="h-auto module col-span-5" id="kernelVersion"></div></div></div><div class="flex-col col-span-5 md-col-span-6"><div class="section-title">OS</div><div class="grid-columns-10"><div id="os" class="h-auto module col-span-5"></div><div class="h-auto module col-span-5" id="id"></div></div></div><div class="hardware module-section col-span-10 md-col-span-12"><div class="section-title">Hardware</div><div class="grid-columns-10 md-grid-columns-12"><div class="module h-auto col-span-2 md-col-span-4" id="cpuCores"></div><div class="module h-auto col-span-2 md-col-span-4" id="cpuFrequency"></div><div class="module h-auto col-span-2 md-col-span-4" id="ram"></div><div class="module h-auto col-span-2 md-col-span-4" id="disk"></div><div class="module h-auto col-span-2 md-col-span-4" id="cpuArchitecture"></div><div class="module h-auto col-span-2 md-col-span-4" id="virtualization"></div></div></div></div></div><div class="data-tab data-tab-container" data-tab="1"><div class="db-metrics-container"><div id="tiers-container" class="db-metrics-blocks module"><table id="tiers-table"><thead><tr><th rowspan="2"><span data-tooltip="A database layer that stores metrics at a specific resolution.">Tier</span></th><th rowspan="2">Resolution</th><th colspan="2" class="section-start">Stored</th><th colspan="3" class="section-start">Retention</th><th colspan="2" class="section-start">Disk</th></tr><tr><th class="section-start">Metrics</th><th><span data-tooltip="The total number of measurements stored in the database across all metrics. Each sample represents a recorded value for a specific metric at a given time.">Samples</span></th><th class="section-start">Current</th><th><span data-tooltip="The maximum time data can be kept, based on the configured time and disk space limits.">Effective</span></th><th>Configured</th><th class="section-start">Used</th><th>Configured</th></tr></thead><tbody><tr id="tiers-table-data-placeholder"></tr></tbody></table></div></div></div><div class="data-tab data-tab-container" data-tab="3"><div class="modules-container grid"><div class="module col-span-4"><div class="module-header"><div class="section-image"><svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M16.5299 4.47019C16.2399 4.18019 15.7599 4.18019 15.4699 4.47019L13.5299 6.41019L11.5899 4.47019L13.5299 2.53019C13.8199 2.24019 13.8199 1.76019 13.5299 1.47019C13.2399 1.18019 12.7599 1.18019 12.4699 1.47019L10.5299 3.41019L8.99994 1.88019L5.74994 5.13019C4.93994 5.93019 4.49994 7.01019 4.49994 8.15019V8.38019L3.72994 9.15019C2.53994 10.3302 2.45994 12.2002 3.43994 13.5002L1.96994 14.9702C1.67994 15.2602 1.67994 15.7402 1.96994 16.0302C2.11994 16.1802 2.30994 16.2502 2.49994 16.2502C2.68994 16.2502 2.87994 16.1802 3.02994 16.0302L4.49994 14.5602C5.06994 15.0002 5.76994 15.2402 6.49994 15.2402C7.38994 15.2402 8.21994 14.8902 8.84994 14.2702L9.61994 13.5002H9.84994C10.9899 13.5002 12.0599 13.0602 12.8699 12.2502L16.1199 9.00019L14.5899 7.47019L16.5299 5.53019C16.8199 5.24019 16.8199 4.76019 16.5299 4.47019ZM11.8099 11.1902C11.2899 11.7102 10.5899 12.0002 9.84994 12.0002H8.99994L7.78994 13.2102C7.42994 13.5702 6.96994 13.7402 6.49994 13.7402C6.02994 13.7402 5.56994 13.5602 5.20994 13.2102L4.78994 12.7902C4.07994 12.0802 4.07994 10.9202 4.78994 10.2102L5.46994 9.53019L6.40994 10.4702C6.99994 11.0602 7.94994 11.0602 8.52994 10.4702L6.01994 7.96019C6.06994 7.30019 6.33994 6.67019 6.80994 6.19019L8.99994 4.00019L13.9999 9.00019L11.8099 11.1902Z" fill="var(--text)"/></svg></div><span class="section-title">Plugins</span></div><div class="module-content" id="plugins"></div></div><div class="module col-span-4"><div class="module-header"><div class="section-image"><svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M7 18C7.55 18 8 17.55 8 17C8 16.45 7.55 16 7 16C6.45 16 6 16.45 6 17C6 17.55 6.45 18 7 18ZM14 17.79C14.28 17.51 14.28 17.07 14 16.79C13.72 16.51 13.28 16.51 13 16.79C12.72 17.07 12.72 17.51 13 17.79C13.28 18.07 13.72 18.07 14 17.79ZM17 8V4H12V2H2V22H22V8H17ZM10 20H4V4H10V20ZM15 20H12V6H15V20ZM20 20H17V10H20V20ZM19 17.79C19.28 17.51 19.28 17.07 19 16.79C18.72 16.51 18.28 16.51 18 16.79C17.72 17.07 17.72 17.51 18 17.79C18.28 18.07 18.72 18.07 19 17.79Z" fill="var(--text)"/></svg></div><span class="section-title">Libraries</span></div><div class="module-content" id="libs"></div></div><div class="module col-span-4"><div class="module-header"><div class="section-image"><svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M4 16.0002H5V14.5002H4V16.0002ZM2 16.0002H3V14.5002H2V16.0002ZM15.28 6.97019L10.25 1.94019L5.22 6.97019C4.927 7.26319 4.927 7.73819 5.22 8.03119C5.513 8.32419 5.988 8.32419 6.281 8.03119L9.5 4.81119V11.8392C9.5 13.3062 8.306 14.5002 6.838 14.5002H6V16.0002H6.838C9.136 16.0002 11 14.1372 11 11.8382V4.81119L14.22 8.03119C14.366 8.17719 14.558 8.25119 14.75 8.25119C14.942 8.25119 15.134 8.17819 15.28 8.03119C15.573 7.73719 15.573 7.26319 15.28 6.97019Z" fill="var(--text)"/></svg></div><span class="section-title">Exporters</span></div><div class="module-content" id="exporters"></div></div></div></div><div class="data-tab data-tab-container" data-tab="4"><div class="module data-tab-table" id="directories"></div></div></div></div></div><div class="relative row-span-1 col-span-12 full-h"><div class="license-link"><a href="https://app.netdata.cloud/LICENSE.txt" target="_blank">Netdata UI License</a></div><div class="tabs full-h"><button type="button" name="button" class="btn-tab tab active" data-tab="1"><div class="tab-icon"><svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M9 10C14.153 10 16.5 7.927 16.5 6C16.5 4.073 14.153 2 9 2C3.847 2 1.5 4.073 1.5 6C1.5 7.927 3.847 10 9 10ZM9 3.5C12.313 3.5 15 4.619 15 6C15 7.381 12.313 8.5 9 8.5C5.687 8.5 3 7.381 3 6C3 4.619 5.687 3.5 9 3.5ZM14.566 12.931C13.68 13.85 11.523 14.5 9 14.5C6.477 14.5 4.32 13.85 3.434 12.931C2.639 12.547 2.01 12.081 1.545 11.563C1.518 11.708 1.5 11.854 1.5 12C1.5 13.927 3.847 16 9 16C14.153 16 16.5 13.927 16.5 12C16.5 11.854 16.482 11.708 16.455 11.562C15.99 12.081 15.361 12.546 14.566 12.931ZM14.566 9.931C13.68 10.85 11.523 11.5 9 11.5C6.477 11.5 4.32 10.85 3.434 9.931C2.639 9.547 2.01 9.081 1.545 8.563C1.518 8.708 1.5 8.854 1.5 9C1.5 10.927 3.847 13 9 13C14.153 13 16.5 10.927 16.5 9C16.5 8.854 16.482 8.708 16.455 8.562C15.99 9.081 15.361 9.546 14.566 9.931Z"/></svg></div>Database</button> <button type="button" name="button" class="btn-tab tab" data-tab="2"><div class="tab-icon"><svg width="60" height="60" viewBox="0 0 60 60" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M40.3125 18.75H19.6875C19.1697 18.75 18.75 19.1697 18.75 19.6875V40.3125C18.75 40.8303 19.1697 41.25 19.6875 41.25H40.3125C40.8303 41.25 41.25 40.8303 41.25 40.3125V19.6875C41.25 19.1697 40.8303 18.75 40.3125 18.75Z"/><path d="M54.375 22.5C54.8723 22.5 55.3492 22.3025 55.7008 21.9508C56.0525 21.5992 56.25 21.1223 56.25 20.625C56.25 20.1277 56.0525 19.6508 55.7008 19.2992C55.3492 18.9475 54.8723 18.75 54.375 18.75H52.5V15C52.4978 13.0115 51.707 11.1051 50.3009 9.6991C48.8949 8.29305 46.9885 7.50217 45 7.5H41.25V5.625C41.25 5.12772 41.0525 4.65081 40.7008 4.29917C40.3492 3.94754 39.8723 3.75 39.375 3.75C38.8777 3.75 38.4008 3.94754 38.0492 4.29917C37.6975 4.65081 37.5 5.12772 37.5 5.625V7.5H31.875V5.625C31.875 5.12772 31.6775 4.65081 31.3258 4.29917C30.9742 3.94754 30.4973 3.75 30 3.75C29.5027 3.75 29.0258 3.94754 28.6742 4.29917C28.3225 4.65081 28.125 5.12772 28.125 5.625V7.5H22.5V5.625C22.5 5.12772 22.3025 4.65081 21.9508 4.29917C21.5992 3.94754 21.1223 3.75 20.625 3.75C20.1277 3.75 19.6508 3.94754 19.2992 4.29917C18.9475 4.65081 18.75 5.12772 18.75 5.625V7.5H15C13.0115 7.50217 11.1051 8.29305 9.6991 9.6991C8.29305 11.1051 7.50217 13.0115 7.5 15V18.75H5.625C5.12772 18.75 4.65081 18.9475 4.29917 19.2992C3.94754 19.6508 3.75 20.1277 3.75 20.625C3.75 21.1223 3.94754 21.5992 4.29917 21.9508C4.65081 22.3025 5.12772 22.5 5.625 22.5H7.5V28.125H5.625C5.12772 28.125 4.65081 28.3225 4.29917 28.6742C3.94754 29.0258 3.75 29.5027 3.75 30C3.75 30.4973 3.94754 30.9742 4.29917 31.3258C4.65081 31.6775 5.12772 31.875 5.625 31.875H7.5V37.5H5.625C5.12772 37.5 4.65081 37.6975 4.29917 38.0492C3.94754 38.4008 3.75 38.8777 3.75 39.375C3.75 39.8723 3.94754 40.3492 4.29917 40.7008C4.65081 41.0525 5.12772 41.25 5.625 41.25H7.5V45C7.50217 46.9885 8.29305 48.8949 9.6991 50.3009C11.1051 51.707 13.0115 52.4978 15 52.5H18.75V54.375C18.75 54.8723 18.9475 55.3492 19.2992 55.7008C19.6508 56.0525 20.1277 56.25 20.625 56.25C21.1223 56.25 21.5992 56.0525 21.9508 55.7008C22.3025 55.3492 22.5 54.8723 22.5 54.375V52.5H28.125V54.375C28.125 54.8723 28.3225 55.3492 28.6742 55.7008C29.0258 56.0525 29.5027 56.25 30 56.25C30.4973 56.25 30.9742 56.0525 31.3258 55.7008C31.6775 55.3492 31.875 54.8723 31.875 54.375V52.5H37.5V54.375C37.5 54.8723 37.6975 55.3492 38.0492 55.7008C38.4008 56.0525 38.8777 56.25 39.375 56.25C39.8723 56.25 40.3492 56.0525 40.7008 55.7008C41.0525 55.3492 41.25 54.8723 41.25 54.375V52.5H45C46.9885 52.4978 48.8949 51.707 50.3009 50.3009C51.707 48.8949 52.4978 46.9885 52.5 45V41.25H54.375C54.8723 41.25 55.3492 41.0525 55.7008 40.7008C56.0525 40.3492 56.25 39.8723 56.25 39.375C56.25 38.8777 56.0525 38.4008 55.7008 38.0492C55.3492 37.6975 54.8723 37.5 54.375 37.5H52.5V31.875H54.375C54.8723 31.875 55.3492 31.6775 55.7008 31.3258C56.0525 30.9742 56.25 30.4973 56.25 30C56.25 29.5027 56.0525 29.0258 55.7008 28.6742C55.3492 28.3225 54.8723 28.125 54.375 28.125H52.5V22.5H54.375ZM45 41.25C45 42.2446 44.6049 43.1984 43.9016 43.9016C43.1984 44.6049 42.2446 45 41.25 45H18.75C17.7554 45 16.8016 44.6049 16.0984 43.9016C15.3951 43.1984 15 42.2446 15 41.25V18.75C15 17.7554 15.3951 16.8016 16.0984 16.0984C16.8016 15.3951 17.7554 15 18.75 15H41.25C42.2446 15 43.1984 15.3951 43.9016 16.0984C44.6049 16.8016 45 17.7554 45 18.75V41.25Z"/></svg></div>System</button> <button type="button" name="button" class="btn-tab tab" data-tab="3"><div class="tab-icon"><svg width="60" height="60" viewBox="0 0 60 60" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M59.7937 16.4062C59.7164 16.2322 59.6084 16.0734 59.475 15.9375C59.3495 15.8165 59.2112 15.7097 59.0625 15.6187L30.9 0.224957C30.615 0.0603916 30.2916 -0.0262451 29.9625 -0.0262451C29.6334 -0.0262451 29.31 0.0603916 29.025 0.224957L1.06875 15.525C1.06875 15.525 1.06875 15.6187 0.91875 15.6375C0.762779 15.7334 0.618116 15.8466 0.4875 15.975C0.433211 16.047 0.383128 16.1221 0.3375 16.2C0.244093 16.3333 0.168457 16.4783 0.1125 16.6312C0.1125 16.6312 0.1125 16.6312 0.1125 16.7437C0.103788 16.8435 0.103788 16.9439 0.1125 17.0437C0.1125 17.0437 0.1125 17.1562 0.1125 17.2125V42.7687C0.0613239 42.8827 0.0235706 43.0023 0 43.125L0 43.3875C0.142582 43.8604 0.466002 44.2579 0.9 44.4937L29.025 59.8312H29.1375H29.2875C29.5116 59.9337 29.7537 59.9911 30 60C30.2245 59.9926 30.4462 59.9482 30.6563 59.8687H30.7875H30.9L59.025 44.5312C59.3209 44.3693 59.5676 44.1306 59.7392 43.8402C59.9108 43.5498 60.0009 43.2185 60 42.8812V17.2125C59.9937 16.9939 59.9493 16.7782 59.8688 16.575C59.8516 16.5155 59.8264 16.4588 59.7937 16.4062ZM28.125 54.975L3.75 41.6625V20.3812L28.125 33.75V54.975ZM30 30.4125L5.79375 17.2875L30 4.01246L54.2062 17.1375L30 30.4125ZM56.25 41.6625L31.875 54.975V33.75L56.25 20.4562V41.6625Z"/></svg></div>Modules</button> <button type="button" name="button" class="btn-tab tab" data-tab="4"><div class="tab-icon"><svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M16 10.5V5.5H10V7.25H5.75V6.5H8V1.5H2V6.5H4.25V14.75H10V16.5H16V11.5H10V13.25H5.75V8.75H10V10.5H16ZM11.5 7H14.5V9H11.5V7ZM11.5 13H14.5V15H11.5V13ZM3.5 5V3H6.5V5H3.5Z"/></svg></div>Directories</button></div></div></div><div class="frame relative col-span-5 frame-right"><canvas id="monitorGrid"></canvas><div id="splashMessageContainer" class="splash-message"><svg width="133" height="105" viewBox="0 0 133 105" fill="none" xmlns="http://www.w3.org/2000/svg" class="logo"><path fill-rule="evenodd" clip-rule="evenodd" d="M81.697 105H55.0693L0.5 0.5H77.9598C108.079 0.554913 132.484 24.7711 132.5 54.6451C132.452 82.485 109.73 105 81.697 105Z" fill="#FCFFFD"/></svg><h1 class="text-center">Welcome to Netdata</h1><p id="msgSignIn">Please sign-in to continue</p><a id="btnSignIn" href="javascript:loadDashboard(true);" class="button button-primary">Sign-in</a><div class="tagline skip-link"><a class="opt-out-link" href="javascript:loadDashboard();">Skip and use the dashboard anonymously.</a> <span class="no-anonymous-access"></span></div></div><div id="claimingContentsContainer" class="claim-message" style="display:none;"><div class="welcome"><svg width="133" height="105" viewBox="0 0 133 105" fill="none" xmlns="http://www.w3.org/2000/svg" class="logo"><path fill-rule="evenodd" clip-rule="evenodd" d="M81.697 105H55.0693L0.5 0.5H77.9598C108.079 0.554913 132.484 24.7711 132.5 54.6451C132.452 82.485 109.73 105 81.697 105Z" fill="#FCFFFD"/></svg><h1 class="text-center">Welcome to Netdata</h1><span>Please connect your agent to continue.</span></div><div class="connection-modal"><div id="connectionStep-1"><div class="connection-step"><span class="text-small">Please select the space you want this agent to join:</span> <span class="loader">Loading spaces...</span><ul id="spacesList" class="list-options"></ul></div></div><div id="connectionStep-2" style="display:none;"><div class="connection-step"><div class="dropdown-custom" data-target="claimMessage"><div class="dropdown-custom-input flex space-between align-center"><span class="text-small">Select room(s)</span><button class="text-small button button-ghost clear-button">Clear</button></div><div id="roomsSelector" class="dropdown"><div class="dropdown-toggle"><span id="selectedItems" class="selected-items">Select room</span> <span>▼</span></div><div id="roomsSelectorOptionsContainer" class="checkbox-container"></div></div></div><div id="claimMessage" class="selected-message"></div><div class="">Please run the command below in your terminal:</div><code id="claimCommand"></code><div class="">and paste the generated private key in the field below:</div><input id="claimingPrivateKey" name="claimingPrivateKey" value="" placeholder="Private Key"/></div><div id="claimTip" class="text-padding text-small">Tip: If the command doesn’t work out-of-the-box, locate the {keyFilename} file, open it in your favourite text editor, and copy it to your clipboard.</div><div id="claimErrorMessage" class="text-padding error" style="display:none;"></div></div><div class="modal-footer flex-col"><div class="flex space-between"><button id="btnConnectionStepPrev" class="button button-ghost">&#8592; Back</button> <button id="btnConnectionStepNext" class="button button-primary">Next</button> <button id="btnClaim" class="button button-primary">Claim</button></div><div class="skip-link"><a class="signout-link" href="javascript:signout()">Sign out to switch user</a></div></div></div></div></div><div id="tooltip"></div></div></body><script>const initPrimaryButtonHover = () => {
2025-04-15T08:07:18.2448421Z     const button = document.getElementById("btnSignIn");
2025-04-15T08:07:18.2448557Z     const canvas = document.getElementById("monitorGrid");
2025-04-15T08:07:18.2448645Z 
2025-04-15T08:07:18.2448715Z     if (button) {
2025-04-15T08:07:18.2448821Z       button.addEventListener("mouseover", () => {
2025-04-15T08:07:18.2448916Z         canvas.classList.add("hovered");
2025-04-15T08:07:18.2448987Z       });
2025-04-15T08:07:18.2449055Z     }
2025-04-15T08:07:18.2449060Z 
2025-04-15T08:07:18.2449123Z     if (canvas) {
2025-04-15T08:07:18.2449223Z       button.addEventListener("mouseout", () => {
2025-04-15T08:07:18.2449319Z         canvas.classList.remove("hovered");
2025-04-15T08:07:18.2449381Z       });
2025-04-15T08:07:18.2449444Z     }
2025-04-15T08:07:18.2449504Z   }
2025-04-15T08:07:18.2449509Z 
2025-04-15T08:07:18.2449583Z   const initTabs = () => {
2025-04-15T08:07:18.2449715Z     const btnTabs = document.querySelectorAll(".btn-tab");
2025-04-15T08:07:18.2449795Z     btnTabs.forEach(btn => {
2025-04-15T08:07:18.2449890Z       btn.addEventListener("click", e => {
2025-04-15T08:07:18.2449988Z         const tab = e.currentTarget?.dataset?.tab;
2025-04-15T08:07:18.2450062Z         if (tab) {
2025-04-15T08:07:18.2450133Z           toggleTab(tab);
2025-04-15T08:07:18.2450193Z         }
2025-04-15T08:07:18.2450257Z       })
2025-04-15T08:07:18.2450317Z     })
2025-04-15T08:07:18.2450378Z   }
2025-04-15T08:07:18.2450386Z 
2025-04-15T08:07:18.2450467Z   // =============================================== //
2025-04-15T08:07:18.2450472Z 
2025-04-15T08:07:18.2450541Z   const status = {
2025-04-15T08:07:18.2450612Z     TIMEOUT: 'timeout',
2025-04-15T08:07:18.2450682Z     SUCCESS: 'success',
2025-04-15T08:07:18.2450757Z     SKIPPED: 'skipped'
2025-04-15T08:07:18.2450818Z   };
2025-04-15T08:07:18.2450822Z 
2025-04-15T08:07:18.2450904Z   const getSessionId = () => {
2025-04-15T08:07:18.2450991Z     const key = "telemetrySessionId"
2025-04-15T08:07:18.2451082Z     if (!sessionStorage.getItem(key)) {
2025-04-15T08:07:18.2451416Z       sessionStorage.setItem(key, self.crypto && self.crypto.randomUUID ? self.crypto.randomUUID() : new Date().getTime());
2025-04-15T08:07:18.2451481Z     }
2025-04-15T08:07:18.2451589Z     return sessionStorage.getItem(key) || "";
2025-04-15T08:07:18.2451652Z   }
2025-04-15T08:07:18.2451656Z 
2025-04-15T08:07:18.2451778Z   const defaultErrorMessage = "Something went wrong."
2025-04-15T08:07:18.2452115Z   const agentUri = window.location.origin + window.location.pathname.replace(pathsRegex, "");
2025-04-15T08:07:18.2452217Z   const telemetrySessionId = getSessionId();
2025-04-15T08:07:18.2452388Z   const ensureOneSlash = urlStr => urlStr.replace(/([^:]\/)\/+/g, "$1");
2025-04-15T08:07:18.2452393Z 
2025-04-15T08:07:18.2452503Z   // Utils =============================================================================== //
2025-04-15T08:07:18.2452507Z 
2025-04-15T08:07:18.2452593Z   const createElem = (tag, attrs) => {
2025-04-15T08:07:18.2452665Z     if (!tag) return null
2025-04-15T08:07:18.2452766Z     const elem = document.createElement(tag);
2025-04-15T08:07:18.2452850Z     if (Object.keys(attrs || {}).length) {
2025-04-15T08:07:18.2452946Z       Object.entries(attrs).forEach(([k, v]) => {
2025-04-15T08:07:18.2453024Z         elem[k] = v;
2025-04-15T08:07:18.2453084Z       })
2025-04-15T08:07:18.2453146Z     }
2025-04-15T08:07:18.2453214Z     return elem
2025-04-15T08:07:18.2453277Z   }
2025-04-15T08:07:18.2453284Z 
2025-04-15T08:07:18.2453418Z   const getDOM = ({ tag = "div", children = [], ...rest } = {}) => {
2025-04-15T08:07:18.2453522Z     const element = document.createElement(tag);
2025-04-15T08:07:18.2453526Z 
2025-04-15T08:07:18.2453637Z     Object.entries(rest || {}).forEach(([k, v]) => {
2025-04-15T08:07:18.2453718Z       if (element[k] !== undefined) {
2025-04-15T08:07:18.2453835Z         if (k == "dataset" && Object.keys(v).length == 1) {
2025-04-15T08:07:18.2453928Z           const dataPair = Object.entries(v)[0]
2025-04-15T08:07:18.2454018Z           element[k][dataPair[0]] = dataPair[1]
2025-04-15T08:07:18.2454081Z         } else {
2025-04-15T08:07:18.2454151Z           element[k] = v;
2025-04-15T08:07:18.2454216Z         }
2025-04-15T08:07:18.2454359Z       }
2025-04-15T08:07:18.2454425Z     })
2025-04-15T08:07:18.2454429Z 
2025-04-15T08:07:18.2454504Z     if (!!children?.length) {
2025-04-15T08:07:18.2454700Z       children.filter(({ condition = true }) => !!condition).forEach(childStructure => {
2025-04-15T08:07:18.2454818Z         element.appendChild(getDOM(childStructure));
2025-04-15T08:07:18.2454881Z       });
2025-04-15T08:07:18.2454942Z     }
2025-04-15T08:07:18.2454946Z 
2025-04-15T08:07:18.2455013Z     return element;
2025-04-15T08:07:18.2455072Z   }
2025-04-15T08:07:18.2455080Z 
2025-04-15T08:07:18.2455169Z   // ===================================================================================== //
2025-04-15T08:07:18.2455174Z 
2025-04-15T08:07:18.2455237Z   // Agent info
2025-04-15T08:07:18.2455408Z   const AGENT_INFO_KEY = `agentInfo:${window.envSettings.agentApiUrl}`
2025-04-15T08:07:18.2455487Z   const getAgentInfo = () => {
2025-04-15T08:07:18.2455617Z     const agentInfo = localStorage.getItem(AGENT_INFO_KEY)
2025-04-15T08:07:18.2455690Z     if (agentInfo) {
2025-04-15T08:07:18.2455756Z       try {
2025-04-15T08:07:18.2455866Z         return Promise.resolve(JSON.parse(agentInfo))
2025-04-15T08:07:18.2455933Z       } catch (err) {
2025-04-15T08:07:18.2456023Z         return Promise.resolve()
2025-04-15T08:07:18.2456176Z       }
2025-04-15T08:07:18.2456240Z     }
2025-04-15T08:07:18.2456244Z 
2025-04-15T08:07:18.2456596Z     return fetch(ensureOneSlash(`${window.envSettings.agentApiUrl}/api/v3/info`)).then(response => response.json()).then(data => {
2025-04-15T08:07:18.2456683Z       if (CONFIG.cache.agentInfo) {
2025-04-15T08:07:18.2456848Z         localStorage.setItem(AGENT_INFO_KEY, JSON.stringify(data || {}))
2025-04-15T08:07:18.2456913Z       }
2025-04-15T08:07:18.2456982Z       return data
2025-04-15T08:07:18.2457066Z     }).catch(() => Promise.resolve())
2025-04-15T08:07:18.2457130Z   }
2025-04-15T08:07:18.2457134Z 
2025-04-15T08:07:18.2457353Z   const loadStyle = (url, { media, insertAfter: aref, insertBefore: bref, rel, type } = {}) => {
2025-04-15T08:07:18.2457434Z     rel = rel || 'stylesheet'
2025-04-15T08:07:18.2457510Z     type = type || 'text/css'
2025-04-15T08:07:18.2457619Z     return new Promise(function (resolve, reject) {
2025-04-15T08:07:18.2457846Z       let link = document.createElement('link');
2025-04-15T08:07:18.2457923Z       link.type = type;
2025-04-15T08:07:18.2457990Z       link.rel = rel;
2025-04-15T08:07:18.2458062Z       link.href = url;
2025-04-15T08:07:18.2458140Z       link.media = media || 'all';
2025-04-15T08:07:18.2458145Z 
2025-04-15T08:07:18.2458229Z       link.onerror = function (err) {
2025-04-15T08:07:18.2458443Z         reject(new URIError(`loadStyle: the stylesheet ${err.target.src} is not accessible.`));
2025-04-15T08:07:18.2458508Z       };
2025-04-15T08:07:18.2458512Z 
2025-04-15T08:07:18.2458590Z       link.onload = function () {
2025-04-15T08:07:18.2458654Z         resolve();
2025-04-15T08:07:18.2458718Z       };
2025-04-15T08:07:18.2458722Z 
2025-04-15T08:07:18.2458785Z       if (aref) {
2025-04-15T08:07:18.2458935Z         aref.parentNode.insertBefore(link, aref.nextSibling);
2025-04-15T08:07:18.2458997Z         return;
2025-04-15T08:07:18.2459061Z       }
2025-04-15T08:07:18.2459065Z 
2025-04-15T08:07:18.2459132Z       if (bref) {
2025-04-15T08:07:18.2459234Z         bref.parentNode.insertBefore(link, bref);
2025-04-15T08:07:18.2459301Z         return;
2025-04-15T08:07:18.2459360Z       }
2025-04-15T08:07:18.2459364Z 
2025-04-15T08:07:18.2459457Z       document.head.appendChild(link);
2025-04-15T08:07:18.2459517Z     });
2025-04-15T08:07:18.2459577Z   }
2025-04-15T08:07:18.2459584Z 
2025-04-15T08:07:18.2459913Z   const loadScript = (url, { async = true, defer = false, insertAfter: aref, insertBefore: bref, timeout = 5000, attrs, skipIf } = {}) => {
2025-04-15T08:07:18.2460021Z     return new Promise(function (resolve, reject) {
2025-04-15T08:07:18.2460125Z       if (typeof skipIf === 'function' && skipIf()) {
2025-04-15T08:07:18.2460211Z         resolve(status.SKIPPED);
2025-04-15T08:07:18.2460399Z         return;
2025-04-15T08:07:18.2460460Z       }
2025-04-15T08:07:18.2460464Z 
2025-04-15T08:07:18.2460678Z       let rejectWithTimeout = setTimeout(function () { reject(status.TIMEOUT) }, timeout);
2025-04-15T08:07:18.2460691Z 
2025-04-15T08:07:18.2460799Z       let script = document.createElement('script');
2025-04-15T08:07:18.2460883Z       script.type = 'text/javascript';
2025-04-15T08:07:18.2460958Z       script.src = url;
2025-04-15T08:07:18.2461035Z       script.async = async;
2025-04-15T08:07:18.2461114Z       script.defer = defer;
2025-04-15T08:07:18.2461118Z 
2025-04-15T08:07:18.2461183Z       if (attrs) {
2025-04-15T08:07:18.2461261Z         for (let attr in attrs) {
2025-04-15T08:07:18.2461359Z           script.setAttribute(attr, attrs[attr]);
2025-04-15T08:07:18.2461423Z         }
2025-04-15T08:07:18.2461489Z       }
2025-04-15T08:07:18.2461492Z 
2025-04-15T08:07:18.2461576Z       script.onerror = function (err) {
2025-04-15T08:07:18.2461790Z         reject(new URIError(`loadScript: the script ${err.target.src} is not accessible.`));
2025-04-15T08:07:18.2461859Z       };
2025-04-15T08:07:18.2461863Z 
2025-04-15T08:07:18.2461944Z       script.onload = function () {
2025-04-15T08:07:18.2462039Z         clearTimeout(rejectWithTimeout);
2025-04-15T08:07:18.2462124Z         resolve(status.SUCCESS);
2025-04-15T08:07:18.2462190Z       };
2025-04-15T08:07:18.2462194Z 
2025-04-15T08:07:18.2462258Z       if (aref) {
2025-04-15T08:07:18.2462408Z         aref.parentNode.insertBefore(script, aref.nextSibling);
2025-04-15T08:07:18.2462472Z         return;
2025-04-15T08:07:18.2462533Z       }
2025-04-15T08:07:18.2462537Z 
2025-04-15T08:07:18.2462604Z       if (bref) {
2025-04-15T08:07:18.2462710Z         bref.parentNode.insertBefore(script, bref);
2025-04-15T08:07:18.2462776Z         return;
2025-04-15T08:07:18.2462835Z       }
2025-04-15T08:07:18.2462839Z 
2025-04-15T08:07:18.2462929Z       document.body.appendChild(script);
2025-04-15T08:07:18.2462994Z     });
2025-04-15T08:07:18.2463054Z   }
2025-04-15T08:07:18.2463062Z 
2025-04-15T08:07:18.2463570Z   __webpack_public_path__ = ensureOneSlash(window.envSettings.webpackPublicPath ? (window.envSettings.webpackPublicPath + "/") : (window.envSettings.agentApiUrl + "/v3/"))
2025-04-15T08:07:18.2463662Z 
2025-04-15T08:07:18.2463742Z   const loadLatestUI = () => {
2025-04-15T08:07:18.2464108Z     return fetch(__webpack_public_path__ + "bundlesManifest." + window.envSettings.version.toString().replace(/(\d+)\..+/, "$1") + ".json")
2025-04-15T08:07:18.2464230Z       .then(function (response) { return response.json() })
2025-04-15T08:07:18.2464312Z       .catch(() => goToOld('/v3'))
2025-04-15T08:07:18.2464389Z       .then(function (data) {
2025-04-15T08:07:18.2464484Z         Object.keys(data).forEach(function (k) {
2025-04-15T08:07:18.2464587Z           if (/\.(map|ico|html)$/.test(data[k])) return
2025-04-15T08:07:18.2464673Z           if (/static\//.test(data[k])) return
2025-04-15T08:07:18.2464677Z 
2025-04-15T08:07:18.2464761Z           if (/\.css.*$/.test(data[k])) {
2025-04-15T08:07:18.2464915Z             loadStyle(ensureOneSlash(__webpack_public_path__ + data[k]))
2025-04-15T08:07:18.2464980Z             return
2025-04-15T08:07:18.2465041Z           }
2025-04-15T08:07:18.2465049Z 
2025-04-15T08:07:18.2465124Z           if (/\.js.*$/.test(data[k])) {
2025-04-15T08:07:18.2465285Z             loadScript(ensureOneSlash(__webpack_public_path__ + data[k]), {
2025-04-15T08:07:18.2465355Z               async: false,
2025-04-15T08:07:18.2465418Z             });
2025-04-15T08:07:18.2465477Z           }
2025-04-15T08:07:18.2465536Z         })
2025-04-15T08:07:18.2465621Z         return Promise.resolve()
2025-04-15T08:07:18.2465682Z       })
2025-04-15T08:07:18.2465743Z   }
2025-04-15T08:07:18.2465747Z 
2025-04-15T08:07:18.2465826Z   const loadDashboard = signIn => {
2025-04-15T08:07:18.2465907Z     loadLatestUI().then(() => {
2025-04-15T08:07:18.2465972Z       if (signIn) {
2025-04-15T08:07:18.2466162Z         window.location.href = ensureOneSlash(
2025-04-15T08:07:18.2466499Z           `${window.envSettings.cloudUrl}/trust?redirect_uri=${encodeURIComponent(
2025-04-15T08:07:18.2466578Z             window.location.href
2025-04-15T08:07:18.2466669Z           )}&agent_uri=${encodeURIComponent(
2025-04-15T08:07:18.2466780Z             agentUri || window.envSettings.agentApiUrl
2025-04-15T08:07:18.2466883Z           )}&telemetry_session_id=${telemetrySessionId}`
2025-04-15T08:07:18.2466947Z         )
2025-04-15T08:07:18.2467006Z       }
2025-04-15T08:07:18.2467069Z     })
2025-04-15T08:07:18.2467128Z   }
2025-04-15T08:07:18.2467131Z 
2025-04-15T08:07:18.2467206Z   const signout = () => {
2025-04-15T08:07:18.2467302Z     localStorage.removeItem(CLOUD_TOKEN_KEY)
2025-04-15T08:07:18.2467383Z     window.location.reload()
2025-04-15T08:07:18.2467446Z   }
2025-04-15T08:07:18.2467450Z 
2025-04-15T08:07:18.2467530Z   const fetchRegistryInfo = () => {
2025-04-15T08:07:18.2467675Z     if (window.localNetdataRegistry) return Promise.resolve()
2025-04-15T08:07:18.2467679Z 
2025-04-15T08:07:18.2468103Z     return fetch(ensureOneSlash(window.envSettings.agentApiUrl + "/api/v1/registry?action=hello"), { cache: "no-cache", credentials: "include" })
2025-04-15T08:07:18.2468181Z       .then(response => {
2025-04-15T08:07:18.2468360Z         if (!response.ok) return Promise.reject({ message: defaultErrorMessage })
2025-04-15T08:07:18.2468438Z         return response.json()
2025-04-15T08:07:18.2468502Z       })
2025-04-15T08:07:18.2468567Z       .then(data => {
2025-04-15T08:07:18.2468742Z         if (!data) return Promise.reject({ message: "No registry data available." })
2025-04-15T08:07:18.2468747Z 
2025-04-15T08:07:18.2468853Z         let to = data.cloud_base_url.lastIndexOf('/');
2025-04-15T08:07:18.2469037Z         to = (to == -1 || to < data.cloud_base_url.length - 2) ? data.cloud_base_url.length : to;
2025-04-15T08:07:18.2469154Z         let cloudUrl = data.cloud_base_url.substring(0, to);
2025-04-15T08:07:18.2469159Z 
2025-04-15T08:07:18.2469252Z         let withoutNodes = btoa(JSON.stringify({
2025-04-15T08:07:18.2469340Z           registry: data.registry,
2025-04-15T08:07:18.2469424Z           machine_guid: data.machine_guid,
2025-04-15T08:07:18.2469502Z           hostname: data.hostname,
2025-04-15T08:07:18.2469709Z           agent: data.agent,
2025-04-15T08:07:18.2469776Z           nodes: []
2025-04-15T08:07:18.2469836Z         }))
2025-04-15T08:07:18.2469941Z         let iframe = document.createElement('iframe');
2025-04-15T08:07:18.2470260Z         iframe.src = data.registry + "/registry-access.html?x=" + withoutNodes + "&originUrl=" + window.envSettings.agentApiUrl;
2025-04-15T08:07:18.2470398Z         iframe.style = { position: "absolute", left: "-99999999px" };
2025-04-15T08:07:18.2470476Z         iframe.width = 0;
2025-04-15T08:07:18.2470548Z         iframe.height = 0;
2025-04-15T08:07:18.2470625Z         iframe.tabindex = -1;
2025-04-15T08:07:18.2470702Z         iframe.title = "empty";
2025-04-15T08:07:18.2470788Z         iframe.classList.add("hidden");
2025-04-15T08:07:18.2470883Z         document.body.appendChild(iframe);
2025-04-15T08:07:18.2470892Z 
2025-04-15T08:07:18.2470968Z         setTimeout(function () {
2025-04-15T08:07:18.2471111Z           document.title = data.hostname + ': Netdata Agent Console';
2025-04-15T08:07:18.2471400Z           iframe.contentWindow.postMessage(["netdata-registry", window.envSettings.agentApiUrl, data], "*")
2025-04-15T08:07:18.2471465Z         }, 300);
2025-04-15T08:07:18.2471469Z 
2025-04-15T08:07:18.2471600Z         window.addEventListener('message', function (event) {
2025-04-15T08:07:18.2471717Z           if (event.source !== iframe.contentWindow) return;
2025-04-15T08:07:18.2471721Z 
2025-04-15T08:07:18.2472012Z           if (event.data.status === "disabled") console.error("Your netdata registry is disabled! Check your configuration.")
2025-04-15T08:07:18.2472017Z 
2025-04-15T08:07:18.2472088Z           if (event.data) {
2025-04-15T08:07:18.2472193Z             if (!window.localNetdataRegistry) {
2025-04-15T08:07:18.2472288Z               window.localNetdataRegistry = {}
2025-04-15T08:07:18.2472441Z             }
2025-04-15T08:07:18.2472446Z 
2025-04-15T08:07:18.2472596Z             window.localNetdataRegistry.pg = event.data.person_guid
2025-04-15T08:07:18.2472601Z 
2025-04-15T08:07:18.2472690Z             if (!window.envSettings) {
2025-04-15T08:07:18.2472774Z               window.envSettings = {}
2025-04-15T08:07:18.2472834Z             }
2025-04-15T08:07:18.2472839Z 
2025-04-15T08:07:18.2472969Z             window.envSettings.visitor = event.data.person_guid
2025-04-15T08:07:18.2472974Z 
2025-04-15T08:07:18.2473038Z             try {
2025-04-15T08:07:18.2473239Z               var visitedNodesByName = event.data.urls.reduce(function (vn, visitedUrl) {
2025-04-15T08:07:18.2473341Z                 vn[visitedUrl[4]] = vn[visitedUrl[4]] || {}
2025-04-15T08:07:18.2473432Z                 vn[visitedUrl[4]].id = visitedUrl[0]
2025-04-15T08:07:18.2473527Z                 vn[visitedUrl[4]].name = visitedUrl[4]
2025-04-15T08:07:18.2473641Z                 vn[visitedUrl[4]].lastAccessTime = visitedUrl[2]
2025-04-15T08:07:18.2473763Z                 vn[visitedUrl[4]].urls = vn[visitedUrl[4]].urls || []
2025-04-15T08:07:18.2473864Z                 vn[visitedUrl[4]].urls.push(visitedUrl[1])
2025-04-15T08:07:18.2473873Z 
2025-04-15T08:07:18.2473941Z                 return vn
2025-04-15T08:07:18.2474004Z               }, {})
2025-04-15T08:07:18.2474009Z 
2025-04-15T08:07:18.2474199Z               window.visitedNodes = Object.keys(visitedNodesByName).map(function (vn) {
2025-04-15T08:07:18.2474292Z                 return visitedNodesByName[vn]
2025-04-15T08:07:18.2474354Z               })
2025-04-15T08:07:18.2474423Z             } catch (e) {
2025-04-15T08:07:18.2474489Z               // do nothing
2025-04-15T08:07:18.2474553Z             }
2025-04-15T08:07:18.2474613Z           }
2025-04-15T08:07:18.2474674Z         });
2025-04-15T08:07:18.2474678Z 
2025-04-15T08:07:18.2474758Z         return Promise.resolve()
2025-04-15T08:07:18.2474819Z       })
2025-04-15T08:07:18.2474888Z   }
2025-04-15T08:07:18.2474892Z 
2025-04-15T08:07:18.2475094Z   const cloudRequest = async (endpoint, {allowAnonymous = false, ...options} = {}) => {
2025-04-15T08:07:18.2475227Z     const cloudToken = localStorage.getItem(CLOUD_TOKEN_KEY)
2025-04-15T08:07:18.2475486Z     if (!allowAnonymous && !cloudToken) return Promise.reject("No cloud token")
2025-04-15T08:07:18.2475491Z 
2025-04-15T08:07:18.2475953Z     options = { ...options, headers: { ...(options?.headers || {}), ...(!!cloudToken && {Authorization: `*** } }
2025-04-15T08:07:18.2475959Z 
2025-04-15T08:07:18.2476273Z     return fetch(ensureOneSlash(`${window.envSettings.apiUrl}/${endpoint}`), options)
2025-04-15T08:07:18.2476341Z   }
2025-04-15T08:07:18.2476344Z 
2025-04-15T08:07:18.2476418Z   const sleep = (ms) => {
2025-04-15T08:07:18.2476548Z     return new Promise(resolve => setTimeout(resolve, ms));
2025-04-15T08:07:18.2476613Z   }
2025-04-15T08:07:18.2476617Z 
2025-04-15T08:07:18.2476731Z   const claimAgent = ({ key, token, rooms } = {}) => {
2025-04-15T08:07:18.2476837Z     const url = window.envSettings.apiUrl;
2025-04-15T08:07:18.2476999Z     let query = new URLSearchParams({ key, rooms, token, url }).toString()
2025-04-15T08:07:18.2477132Z     query = key && rooms && token && url && query ? `?${query}` : ""
2025-04-15T08:07:18.2477422Z     return fetch(ensureOneSlash(`${window.envSettings.agentApiUrl}/api/v3/claim${query}`)).then(response => {
2025-04-15T08:07:18.2477562Z       const contentType = response.headers.get("content-type");
2025-04-15T08:07:18.2477570Z 
2025-04-15T08:07:18.2477685Z       if (contentType && contentType.includes("text")) {
2025-04-15T08:07:18.2477763Z         throw response.text();
2025-04-15T08:07:18.2477828Z       }
2025-04-15T08:07:18.2477832Z 
2025-04-15T08:07:18.2477943Z       if (contentType && contentType.includes("json")) {
2025-04-15T08:07:18.2478026Z         return response.json();
2025-04-15T08:07:18.2478087Z       }
2025-04-15T08:07:18.2478091Z 
2025-04-15T08:07:18.2478231Z       throw new Error('Unsupported content type: ' + contentType);
2025-04-15T08:07:18.2478429Z     }).then(data => {
2025-04-15T08:07:18.2478510Z       if (data.success === false) {
2025-04-15T08:07:18.2478589Z         throw data.message
2025-04-15T08:07:18.2478654Z       }
2025-04-15T08:07:18.2478658Z 
2025-04-15T08:07:18.2478791Z       if (key && data.can_be_claimed === false && !data.agent.nd) {
2025-04-15T08:07:18.2478882Z         return sleep(1000).then(claimAgent);
2025-04-15T08:07:18.2478942Z       }
2025-04-15T08:07:18.2478946Z 
2025-04-15T08:07:18.2479017Z       return data
2025-04-15T08:07:18.2479077Z     });
2025-04-15T08:07:18.2479139Z   }
2025-04-15T08:07:18.2479143Z 
2025-04-15T08:07:18.2479215Z   const checkMe = mg => {
2025-04-15T08:07:18.2479422Z     return fetch(ensureOneSlash(`${window.envSettings.agentApiUrl}/api/v3/me`), {
2025-04-15T08:07:18.2479488Z       headers: {
2025-04-15T08:07:18.2479675Z         "X-Netdata-Auth": `***
2025-04-15T08:07:18.2479742Z       }
2025-04-15T08:07:18.2479803Z     })
2025-04-15T08:07:18.2479898Z       .then(response => response.json())
2025-04-15T08:07:18.2479965Z       .catch(() => ({
2025-04-15T08:07:18.2480033Z         auth: "none",
2025-04-15T08:07:18.2480107Z         cloud_account_id: null,
2025-04-15T08:07:18.2480182Z         client_name: "",
2025-04-15T08:07:18.2480265Z         access: ["anonymous-data"],
2025-04-15T08:07:18.2480334Z         user_role: "any",
2025-04-15T08:07:18.2480399Z       }))
2025-04-15T08:07:18.2480458Z   }
2025-04-15T08:07:18.2480462Z 
2025-04-15T08:07:18.2480546Z   const fetchUserAccess = (mg, nd) => {
2025-04-15T08:07:18.2480963Z     return cloudRequest(`/api/v1/agents/${mg}/user_agent_node_access${nd ? `?nodeID=${nd}` : ""}`, {allowAnonymous: true}).then(response => response.json()).then(data => {
2025-04-15T08:07:18.2481904Z       window.localNetdataRegistry.limitations = data.limitations ? {limit: data.limitations.limit || 99999999, customDashboardsLimit: data.limitations.custom_dashboards_limit || 99999999, windowsSupport: data.limitations.windows_support || false} : {limit: 99999999, customDashboardsLimit: 99999999, windowsSupport: true}
2025-04-15T08:07:18.2481918Z 
2025-04-15T08:07:18.2482014Z       if (data.user_node_status === "noAccess") {
2025-04-15T08:07:18.2482200Z         return data
2025-04-15T08:07:18.2482263Z       }
2025-04-15T08:07:18.2482395Z       window.localNetdataRegistry.spaceId = data.space_id
2025-04-15T08:07:18.2482399Z 
2025-04-15T08:07:18.2482512Z       const room = data.rooms.find(r => r.untouchable)
2025-04-15T08:07:18.2482517Z 
2025-04-15T08:07:18.2482629Z       window.localNetdataRegistry.roomId = room.id
2025-04-15T08:07:18.2482733Z       window.localNetdataRegistry.room = room
2025-04-15T08:07:18.2482742Z 
2025-04-15T08:07:18.2482805Z       return data
2025-04-15T08:07:18.2482876Z     }).catch((err) => { })
2025-04-15T08:07:18.2482940Z   }
2025-04-15T08:07:18.2482944Z 
2025-04-15T08:07:18.2483065Z   const getAgentToken = ({ mg, nd, claimId }, agent) => {
2025-04-15T08:07:18.2483372Z     return cloudRequest(`/api/v2/bearer_get_token?node_id=${nd}&claim_id=${claimId}&machine_guid=${mg}`).then(response => {
2025-04-15T08:07:18.2483461Z       if (response.status === 401) {
2025-04-15T08:07:18.2483530Z         signout()
2025-04-15T08:07:18.2483591Z         return
2025-04-15T08:07:18.2483655Z       }
2025-04-15T08:07:18.2483730Z       if (!response.ok) {
2025-04-15T08:07:18.2483841Z         // Parse the error response to extract the message
2025-04-15T08:07:18.2483941Z         return response.json().then(errorData => {
2025-04-15T08:07:18.2484052Z           const error = new Error(errorData.errorMessage);
2025-04-15T08:07:18.2484145Z           error.data = errorData.errorContext
2025-04-15T08:07:18.2484215Z           throw error
2025-04-15T08:07:18.2484277Z         });
2025-04-15T08:07:18.2484341Z       }
2025-04-15T08:07:18.2484419Z       return response.json();
2025-04-15T08:07:18.2484487Z     }).then(data => {
2025-04-15T08:07:18.2484565Z       if (data && data.token) {
2025-04-15T08:07:18.2484684Z         localStorage.setItem(`agentJWT:${mg}`, data?.token)
2025-04-15T08:07:18.2484922Z         localStorage.setItem(`agentJWTExp:${mg}`, data?.expiration)
2025-04-15T08:07:18.2484983Z       }
2025-04-15T08:07:18.2485050Z       return data
2025-04-15T08:07:18.2485123Z     }).catch((err) => {
2025-04-15T08:07:18.2485191Z       stopLoading()
2025-04-15T08:07:18.2485195Z 
2025-04-15T08:07:18.2485319Z       let message = "Something went wrong. Please try again."
2025-04-15T08:07:18.2485425Z       if (err.data && err.data.state === "created") {
2025-04-15T08:07:18.2485690Z         message = "The node is claimed and is syncing with Netdata Cloud. Please wait a few seconds and try again."
2025-04-15T08:07:18.2485754Z       } else {
2025-04-15T08:07:18.2485846Z         message = (err && err.message) || message
2025-04-15T08:07:18.2485913Z       }
2025-04-15T08:07:18.2485917Z 
2025-04-15T08:07:18.2485920Z 
2025-04-15T08:07:18.2486154Z       const msgSignIn = document.getElementById("msgSignIn");
2025-04-15T08:07:18.2486257Z       msgSignIn.textContent = message
2025-04-15T08:07:18.2486266Z 
2025-04-15T08:07:18.2486392Z       const btnSignIn = document.getElementById("btnSignIn");
2025-04-15T08:07:18.2486488Z       btnSignIn.style.display = "none"
2025-04-15T08:07:18.2486498Z 
2025-04-15T08:07:18.2486579Z       setupOptOutMessage(agent)
2025-04-15T08:07:18.2486648Z     })
2025-04-15T08:07:18.2486708Z   }
2025-04-15T08:07:18.2486712Z 
2025-04-15T08:07:18.2486801Z   const setupOptOutMessage = agent => {
2025-04-15T08:07:18.2486933Z     const bearerProtection = agent.api.bearer_protection;
2025-04-15T08:07:18.2486938Z 
2025-04-15T08:07:18.2487140Z     const isWindows = (agent.application.os.kernel || "").toLowerCase() === "windows"
2025-04-15T08:07:18.2487586Z     const lockWindows = isWindows && (!window.localNetdataRegistry.limitation || window.localNetdataRegistry.limitations.windowsSupport === false);
2025-04-15T08:07:18.2487590Z 
2025-04-15T08:07:18.2487737Z     const denyAnonymousAccess = bearerProtection || lockWindows;
2025-04-15T08:07:18.2487741Z 
2025-04-15T08:07:18.2487857Z     // Get all elements with the "opt-out-link" class
2025-04-15T08:07:18.2488048Z     const optOutLinkElems = document.getElementsByClassName("opt-out-link");
2025-04-15T08:07:18.2488142Z     if (optOutLinkElems.length > 0) {
2025-04-15T08:07:18.2488390Z       for (let i = 0; i < optOutLinkElems.length; i++) {
2025-04-15T08:07:18.2488581Z         optOutLinkElems[i].style.display = denyAnonymousAccess ? "none" : "inline";
2025-04-15T08:07:18.2488648Z       }
2025-04-15T08:07:18.2488709Z     }
2025-04-15T08:07:18.2488713Z 
2025-04-15T08:07:18.2488845Z     // Get all elements with the "no-anonymous-access" class
2025-04-15T08:07:18.2489106Z     const anonymousAccessDeniedElems = document.getElementsByClassName("no-anonymous-access");
2025-04-15T08:07:18.2489224Z     if (anonymousAccessDeniedElems.length > 0) {
2025-04-15T08:07:18.2489363Z       for (let i = 0; i < anonymousAccessDeniedElems.length; i++) {
2025-04-15T08:07:18.2489497Z         if (anonymousAccessDeniedElems[i].textContent === "") {
2025-04-15T08:07:18.2490273Z           anonymousAccessDeniedElems[i].innerHTML = bearerProtection ? "Anonymous access is not allowed. *** is enabled.<br />Please sign in to continue." : "Anonymous access to the dashboard of Windows nodes is not allowed.<br />Please sign in to continue.";
2025-04-15T08:07:18.2490350Z         }
2025-04-15T08:07:18.2490585Z         anonymousAccessDeniedElems[i].style.display = denyAnonymousAccess ? "inline" : "none";
2025-04-15T08:07:18.2490651Z       }
2025-04-15T08:07:18.2490711Z     }
2025-04-15T08:07:18.2490771Z   }
2025-04-15T08:07:18.2490775Z 
2025-04-15T08:07:18.2490877Z   const createClaimingToken = spaceId => {
2025-04-15T08:07:18.2490971Z     if (!spaceId) return Promise.resolve();
2025-04-15T08:07:18.2491076Z     toggleClaimingTokenLoadingState(true);
2025-04-15T08:07:18.2491258Z     return cloudRequest(`/api/v1/spaces/${spaceId}/token`).then(response => {
2025-04-15T08:07:18.2491364Z       toggleClaimingTokenLoadingState(false);
2025-04-15T08:07:18.2491583Z       return response.json();
2025-04-15T08:07:18.2491646Z     });
2025-04-15T08:07:18.2491710Z   }
2025-04-15T08:07:18.2491714Z 
2025-04-15T08:07:18.2491811Z   const getClaimingToken = async spaceId => {
2025-04-15T08:07:18.2491912Z     if (!spaceId) return Promise.resolve();
2025-04-15T08:07:18.2492084Z     const cachedToken = state.cache.claimingTokensPerSpace[spaceId];
2025-04-15T08:07:18.2492210Z     if (cachedToken) return Promise.resolve(cachedToken);
2025-04-15T08:07:18.2492329Z     const token = await createClaimingToken(spaceId);
2025-04-15T08:07:18.2492418Z     cacheClaimingToken(spaceId, token);
2025-04-15T08:07:18.2492511Z     return Promise.resolve(token);
2025-04-15T08:07:18.2492572Z   }
2025-04-15T08:07:18.2492576Z 
2025-04-15T08:07:18.2492656Z   const fetchSpaces = () => {
2025-04-15T08:07:18.2492746Z     toggleSpacesLoadingState(true);
2025-04-15T08:07:18.2492879Z     return cloudRequest("/api/v3/spaces").then(response => {
2025-04-15T08:07:18.2492977Z       toggleSpacesLoadingState(false);
2025-04-15T08:07:18.2493059Z       return response.json();
2025-04-15T08:07:18.2493124Z     });
2025-04-15T08:07:18.2493183Z   }
2025-04-15T08:07:18.2493187Z 
2025-04-15T08:07:18.2493265Z   const getSpaces = async () => {
2025-04-15T08:07:18.2493373Z     const cachedSpaces = state.cache.spaces;
2025-04-15T08:07:18.2493502Z     if (cachedSpaces) return Promise.resolve(cachedSpaces);
2025-04-15T08:07:18.2493591Z     const spaces = await fetchSpaces();
2025-04-15T08:07:18.2493667Z     cacheSpaces(spaces);
2025-04-15T08:07:18.2493757Z     return Promise.resolve(spaces);
2025-04-15T08:07:18.2493815Z   }
2025-04-15T08:07:18.2493819Z 
2025-04-15T08:07:18.2493906Z   const fetchSpaceRooms = spaceId => {
2025-04-15T08:07:18.2494003Z     if (!spaceId) return Promise.resolve([])
2025-04-15T08:07:18.2494094Z     toggleRoomsLoadingState(true);
2025-04-15T08:07:18.2494368Z     return cloudRequest(`/api/v2/spaces/${spaceId}/rooms?show_all=true&default=false`).then(response => {
2025-04-15T08:07:18.2494457Z       toggleRoomsLoadingState(false);
2025-04-15T08:07:18.2494540Z       return response.json();
2025-04-15T08:07:18.2494601Z     })
2025-04-15T08:07:18.2494660Z   }
2025-04-15T08:07:18.2494663Z 
2025-04-15T08:07:18.2494757Z   const getSpaceRooms = async spaceId => {
2025-04-15T08:07:18.2494937Z     if (!spaceId) return Promise.resolve([]);
2025-04-15T08:07:18.2495054Z     const cachedRooms = state.cache.rooms[spaceId];
2025-04-15T08:07:18.2495175Z     if (cachedRooms) return Promise.resolve(cachedRooms);
2025-04-15T08:07:18.2495277Z     const rooms = await fetchSpaceRooms(spaceId);
2025-04-15T08:07:18.2495361Z     cacheRooms(spaceId, rooms);
2025-04-15T08:07:18.2495445Z     return Promise.resolve(rooms);
2025-04-15T08:07:18.2495508Z   }
2025-04-15T08:07:18.2495512Z 
2025-04-15T08:07:18.2495605Z   const updateSelectedOptions = root => {
2025-04-15T08:07:18.2495677Z     if (!root) return;
2025-04-15T08:07:18.2495942Z     const checkboxes = root.querySelectorAll('.dropdown > .checkbox-container input[type="checkbox"]');
2025-04-15T08:07:18.2496037Z     const selected = Array.from(checkboxes)
2025-04-15T08:07:18.2496236Z       .filter((checkbox) => checkbox.checked)
2025-04-15T08:07:18.2496414Z       .map((checkbox) => ({ value: checkbox.value, name: checkbox.dataset.name }));
2025-04-15T08:07:18.2496423Z 
2025-04-15T08:07:18.2496549Z     const selectedNames = selected.map(({ name }) => name);
2025-04-15T08:07:18.2496685Z     const selectedValues = selected.map(({ value }) => value);
2025-04-15T08:07:18.2496690Z 
2025-04-15T08:07:18.2496831Z     const selectedSpaceIds = state.claim.selectedSpaceIds;
2025-04-15T08:07:18.2496917Z     const spaces = state.cache.spaces;
2025-04-15T08:07:18.2497226Z     const selectedSpaceName = selectedSpaceIds.length ? spaces.find(({ id }) => id == selectedSpaceIds[0])?.name : null;
2025-04-15T08:07:18.2497235Z 
2025-04-15T08:07:18.2497508Z     const dropdownChangeEvent = new CustomEvent("dropdownChange", { detail: { values: selectedValues } });
2025-04-15T08:07:18.2497610Z     root.dispatchEvent(dropdownChangeEvent);
2025-04-15T08:07:18.2497732Z 
2025-04-15T08:07:18.2497856Z     root.querySelector("#selectedItems").textContent =
2025-04-15T08:07:18.2498032Z       selectedNames.length > 0 ? selectedNames.join(", ") : "Select Rooms";
2025-04-15T08:07:18.2498041Z 
2025-04-15T08:07:18.2498192Z     const target = document.getElementById(root.dataset.target);
2025-04-15T08:07:18.2498271Z     target.textContent =
2025-04-15T08:07:18.2498353Z       selected.length > 0
2025-04-15T08:07:18.2498517Z         ? `You are ready to connect your agent to room(s): ${selectedNames.join(
2025-04-15T08:07:18.2498579Z           ", "
2025-04-15T08:07:18.2498737Z         )}${selectedSpaceName ? ` of ${selectedSpaceName} space` : ""}`
2025-04-15T08:07:18.2498802Z         : "";
2025-04-15T08:07:18.2498867Z   }
2025-04-15T08:07:18.2498870Z 
2025-04-15T08:07:18.2498961Z   const bindDropdownOptions = () => {
2025-04-15T08:07:18.2499127Z     document.querySelectorAll(".dropdown-custom").forEach(root => {
2025-04-15T08:07:18.2499294Z       root.querySelectorAll(".nd-checkbox > input").forEach(input => {
2025-04-15T08:07:18.2499473Z         input.addEventListener("change", () => updateSelectedOptions(root));
2025-04-15T08:07:18.2499539Z       });
2025-04-15T08:07:18.2499604Z     });
2025-04-15T08:07:18.2499667Z   }
2025-04-15T08:07:18.2499671Z 
2025-04-15T08:07:18.2499756Z   const buildRoomsList = (rooms = []) => {
2025-04-15T08:07:18.2499952Z     const container = document.getElementById("roomsSelectorOptionsContainer");
2025-04-15T08:07:18.2500026Z     if (container) {
2025-04-15T08:07:18.2500106Z       container.innerHTML = "";
2025-04-15T08:07:18.2500193Z       rooms.forEach(({ id, name }) => {
2025-04-15T08:07:18.2500297Z         const isDefaultSelected = name === "All nodes"
2025-04-15T08:07:18.2500301Z 
2025-04-15T08:07:18.2500387Z         if (isDefaultSelected) {
2025-04-15T08:07:18.2500471Z           setSelectedRoomsStatus(id)
2025-04-15T08:07:18.2500531Z         }
2025-04-15T08:07:18.2500536Z 
2025-04-15T08:07:18.2500687Z         const label = createElem("label", { classList: "nd-checkbox" });
2025-04-15T08:07:18.2500915Z         const input = createElem("input", { type: "checkbox", value: id, checked: isDefaultSelected });
2025-04-15T08:07:18.2501122Z         input.dataset.name = name;
2025-04-15T08:07:18.2501198Z         input.onchange = e => {
2025-04-15T08:07:18.2501293Z           setSelectedRoomsStatus(prev => {
2025-04-15T08:07:18.2501394Z             if (e.target.checked) return [...prev, id];
2025-04-15T08:07:18.2501480Z             return prev.filter(r => r != id);
2025-04-15T08:07:18.2501544Z           });
2025-04-15T08:07:18.2501604Z         }
2025-04-15T08:07:18.2501608Z 
2025-04-15T08:07:18.2501745Z         const span = createElem("span", { classList: "checkmark" });
2025-04-15T08:07:18.2501850Z         const text = document.createTextNode(name);
2025-04-15T08:07:18.2501854Z 
2025-04-15T08:07:18.2501939Z         label.appendChild(input);
2025-04-15T08:07:18.2502020Z         label.appendChild(span);
2025-04-15T08:07:18.2502104Z         label.appendChild(text);
2025-04-15T08:07:18.2502195Z         container.appendChild(label);
2025-04-15T08:07:18.2502256Z       });
2025-04-15T08:07:18.2502260Z 
2025-04-15T08:07:18.2502342Z       bindDropdownOptions();
2025-04-15T08:07:18.2502410Z     }
2025-04-15T08:07:18.2502472Z   }
2025-04-15T08:07:18.2502476Z 
2025-04-15T08:07:18.2502570Z   const buildSpacesList = (spaces = []) => {
2025-04-15T08:07:18.2502702Z     const container = document.getElementById("spacesList");
2025-04-15T08:07:18.2502774Z     if (container) {
2025-04-15T08:07:18.2502852Z       container.innerHTML = "";
2025-04-15T08:07:18.2502975Z       spaces.forEach(({ id, name, permissions = [] }) => {
2025-04-15T08:07:18.2503083Z         if (!permissions.includes("node:Create")) return
2025-04-15T08:07:18.2503087Z 
2025-04-15T08:07:18.2503172Z         const listItem = createElem("li");
2025-04-15T08:07:18.2503262Z         listItem.innerText = name;
2025-04-15T08:07:18.2503358Z         listItem.className = "space-item";
2025-04-15T08:07:18.2503534Z         listItem.dataset.id = id;
2025-04-15T08:07:18.2503619Z         listItem.onclick = async () => {
2025-04-15T08:07:18.2503876Z           document.querySelectorAll(".space-item").forEach(item => item.classList.remove("selected"));
2025-04-15T08:07:18.2503979Z           listItem.classList.add("selected");
2025-04-15T08:07:18.2504068Z           setSelectedSpacesStatus([id]);
2025-04-15T08:07:18.2504136Z         };
2025-04-15T08:07:18.2504223Z         container.appendChild(listItem);
2025-04-15T08:07:18.2504287Z       });
2025-04-15T08:07:18.2504348Z     }
2025-04-15T08:07:18.2504428Z     return Promise.resolve();
2025-04-15T08:07:18.2504496Z   }
2025-04-15T08:07:18.2504500Z 
2025-04-15T08:07:18.2504586Z   const initCustomDropdown = () => {
2025-04-15T08:07:18.2504672Z     const toggleDropdown = e => {
2025-04-15T08:07:18.2504753Z       if (!e.currentTarget) return;
2025-04-15T08:07:18.2504975Z       const checkboxContainer = e.currentTarget.querySelector(".checkbox-container");
2025-04-15T08:07:18.2505063Z       if (checkboxContainer) {
2025-04-15T08:07:18.2505344Z         checkboxContainer.style.display = checkboxContainer.style.display === "block" ? "none" : "block";
2025-04-15T08:07:18.2505414Z       }
2025-04-15T08:07:18.2505478Z     }
2025-04-15T08:07:18.2505482Z 
2025-04-15T08:07:18.2505567Z     const clearSelection = e => {
2025-04-15T08:07:18.2505647Z       if (!e.currentTarget) return;
2025-04-15T08:07:18.2505793Z       const root = e.currentTarget.closest(".dropdown-custom");
2025-04-15T08:07:18.2505859Z       if (root) {
2025-04-15T08:07:18.2506221Z         const checkboxes = root.querySelectorAll('.dropdown > .checkbox-container input[type="checkbox"]');
2025-04-15T08:07:18.2506383Z         checkboxes.forEach((checkbox) => (checkbox.checked = false));
2025-04-15T08:07:18.2506471Z         updateSelectedOptions(root);
2025-04-15T08:07:18.2506539Z       }
2025-04-15T08:07:18.2506608Z     }
2025-04-15T08:07:18.2506612Z 
2025-04-15T08:07:18.2506779Z     document.querySelectorAll(".dropdown-custom").forEach(root => {
2025-04-15T08:07:18.2506911Z       const btnClear = root.querySelector(".clear-button");
2025-04-15T08:07:18.2507026Z       const dropdown = root.querySelector(".dropdown");
2025-04-15T08:07:18.2507224Z       if (dropdown) {
2025-04-15T08:07:18.2507294Z         if (btnClear) {
2025-04-15T08:07:18.2507429Z           btnClear.addEventListener("click", clearSelection);
2025-04-15T08:07:18.2507491Z         }
2025-04-15T08:07:18.2507617Z         dropdown.addEventListener("click", toggleDropdown);
2025-04-15T08:07:18.2507681Z       }
2025-04-15T08:07:18.2507742Z     });
2025-04-15T08:07:18.2507745Z 
2025-04-15T08:07:18.2507852Z     document.addEventListener("click", (e) => {
2025-04-15T08:07:18.2508028Z       document.querySelectorAll(".dropdown-custom").forEach(dropdown => {
2025-04-15T08:07:18.2508222Z         const checkboxContainer = dropdown.querySelector(".checkbox-container");
2025-04-15T08:07:18.2508383Z         if (dropdown && checkboxContainer && !dropdown.contains(e.target)) {
2025-04-15T08:07:18.2508498Z           checkboxContainer.style.display = "none";
2025-04-15T08:07:18.2508565Z         }
2025-04-15T08:07:18.2508629Z       });
2025-04-15T08:07:18.2508692Z     });
2025-04-15T08:07:18.2508701Z 
2025-04-15T08:07:18.2508783Z     return Promise.resolve();
2025-04-15T08:07:18.2508843Z   }
2025-04-15T08:07:18.2508851Z 
2025-04-15T08:07:18.2508942Z   const initClaimingElements = () => {
2025-04-15T08:07:18.2509096Z     const claimCommand = document.getElementById("claimCommand");
2025-04-15T08:07:18.2509225Z     const claimTip = document.getElementById("claimTip");
2025-04-15T08:07:18.2509389Z     const btnPrev = document.getElementById("btnConnectionStepPrev");
2025-04-15T08:07:18.2509560Z     const btnNext = document.getElementById("btnConnectionStepNext");
2025-04-15T08:07:18.2509686Z     const btnClaim = document.getElementById("btnClaim");
2025-04-15T08:07:18.2509880Z     const claimingPrivateKey = document.getElementById("claimingPrivateKey");
2025-04-15T08:07:18.2509999Z 
2025-04-15T08:07:18.2510118Z     if (claimCommand && !!state.claim?.status?.command) {
2025-04-15T08:07:18.2510254Z       claimCommand.innerText = state.claim.status.command;
2025-04-15T08:07:18.2510319Z     }
2025-04-15T08:07:18.2510328Z 
2025-04-15T08:07:18.2510439Z     if (claimTip && !!state.claim?.status?.key_filename) {
2025-04-15T08:07:18.2511105Z       claimTip.innerText = `Tip: If the command doesn’t work out-of-the-box, locate the ${state.claim.status.key_filename} file, open it in your favourite text editor, and copy it to your clipboard.`;
2025-04-15T08:07:18.2511170Z     }
2025-04-15T08:07:18.2511174Z 
2025-04-15T08:07:18.2511244Z     if (btnPrev) {
2025-04-15T08:07:18.2511348Z       btnPrev.addEventListener("click", () => {
2025-04-15T08:07:18.2511443Z         setClaimingStep(prev => prev - 1);
2025-04-15T08:07:18.2511512Z       });
2025-04-15T08:07:18.2511572Z     }
2025-04-15T08:07:18.2511577Z 
2025-04-15T08:07:18.2511646Z     if (btnNext) {
2025-04-15T08:07:18.2511762Z       btnNext.addEventListener("click", async () => {
2025-04-15T08:07:18.2511909Z         const newStep = await setClaimingStep(prev => prev + 1);
2025-04-15T08:07:18.2512050Z         if (newStep == 2 && !!state.claim.selectedSpaceIds.length) {
2025-04-15T08:07:18.2512174Z           const spaceId = state.claim.selectedSpaceIds[0];
2025-04-15T08:07:18.2512280Z           const rooms = await getSpaceRooms(spaceId);
2025-04-15T08:07:18.2512362Z           buildRoomsList(rooms);
2025-04-15T08:07:18.2512457Z           await getClaimingToken(spaceId);
2025-04-15T08:07:18.2512520Z         }
2025-04-15T08:07:18.2512582Z       });
2025-04-15T08:07:18.2512648Z     }
2025-04-15T08:07:18.2512651Z 
2025-04-15T08:07:18.2512719Z     if (btnClaim) {
2025-04-15T08:07:18.2512841Z       btnClaim.addEventListener("click", async () => {
2025-04-15T08:07:18.2512946Z         toggleClaimingAgentLoadingState(true);
2025-04-15T08:07:18.2513041Z         await setClaimResponseState({});
2025-04-15T08:07:18.2513221Z         const { selectedSpaceIds, selectedRoomIds, privateKey } = state.claim;
2025-04-15T08:07:18.2513535Z         const { token } = selectedSpaceIds.length ? state.cache.claimingTokensPerSpace[selectedSpaceIds[0]] || {} : {};
2025-04-15T08:07:18.2513544Z 
2025-04-15T08:07:18.2513731Z         let didCatch = false;
2025-04-15T08:07:18.2513967Z         const data = await claimAgent({ key: privateKey, token, rooms: selectedRoomIds }).catch(err => {
2025-04-15T08:07:18.2514046Z           didCatch = true;
2025-04-15T08:07:18.2514161Z           setClaimResponseState({ error: err.message });
2025-04-15T08:07:18.2514228Z         })
2025-04-15T08:07:18.2514232Z 
2025-04-15T08:07:18.2514312Z         if (data === "invalid key") {
2025-04-15T08:07:18.2514384Z           didCatch = true;
2025-04-15T08:07:18.2514503Z           setClaimResponseState({ error: "Invalid key" });
2025-04-15T08:07:18.2514565Z         }
2025-04-15T08:07:18.2514675Z         toggleClaimingAgentLoadingState(false);
2025-04-15T08:07:18.2514679Z 
2025-04-15T08:07:18.2514753Z         if (didCatch) return;
2025-04-15T08:07:18.2514762Z 
2025-04-15T08:07:18.2514830Z         if (data) {
2025-04-15T08:07:18.2514903Z           if (data.success) {
2025-04-15T08:07:18.2514990Z             window.location.reload();
2025-04-15T08:07:18.2515062Z           } else {
2025-04-15T08:07:18.2515150Z             setClaimResponseState(data);
2025-04-15T08:07:18.2515215Z           }
2025-04-15T08:07:18.2515274Z         }
2025-04-15T08:07:18.2515335Z       });
2025-04-15T08:07:18.2515397Z     }
2025-04-15T08:07:18.2515401Z 
2025-04-15T08:07:18.2515478Z     if (claimingPrivateKey) {
2025-04-15T08:07:18.2515750Z       claimingPrivateKey.addEventListener("input", e => setClaimingPrivateKeyState(e.target.value));
2025-04-15T08:07:18.2515812Z     }
2025-04-15T08:07:18.2515877Z   }
2025-04-15T08:07:18.2515881Z 
2025-04-15T08:07:18.2515967Z   const setClaimStatus = async () => {
2025-04-15T08:07:18.2516155Z     const status = await claimAgent();
2025-04-15T08:07:18.2516240Z     const claimStatus = {
2025-04-15T08:07:18.2516499Z       command: status.cmd || `sudo cat ${status.key_filename}`,
2025-04-15T08:07:18.2516568Z       ...status
2025-04-15T08:07:18.2516628Z     };
2025-04-15T08:07:18.2516726Z     await setClaimStatusState(claimStatus);
2025-04-15T08:07:18.2516815Z     return Promise.resolve();
2025-04-15T08:07:18.2516877Z   }
2025-04-15T08:07:18.2516880Z 
2025-04-15T08:07:18.2516976Z   const prepareClaiming = async agent => {
2025-04-15T08:07:18.2517052Z     await setClaimStatus();
2025-04-15T08:07:18.2517137Z     setupOptOutMessage(agent)
2025-04-15T08:07:18.2517219Z     const spaces = await getSpaces();
2025-04-15T08:07:18.2517304Z     await buildSpacesList(spaces);
2025-04-15T08:07:18.2517391Z     initCustomDropdown();
2025-04-15T08:07:18.2517471Z     initClaimingElements();
2025-04-15T08:07:18.2517540Z     syncUI();
2025-04-15T08:07:18.2517600Z   }
2025-04-15T08:07:18.2517604Z 
2025-04-15T08:07:18.2517682Z   const startLoading = () => {
2025-04-15T08:07:18.2517771Z     const body = document.body;
2025-04-15T08:07:18.2517840Z     if (body) {
2025-04-15T08:07:18.2517927Z       body.classList.add("loading");
2025-04-15T08:07:18.2517988Z     }
2025-04-15T08:07:18.2518053Z   }
2025-04-15T08:07:18.2518057Z 
2025-04-15T08:07:18.2518132Z   const stopLoading = () => {
2025-04-15T08:07:18.2518215Z     const body = document.body;
2025-04-15T08:07:18.2518285Z     if (body) {
2025-04-15T08:07:18.2518376Z       body.classList.remove("loading");
2025-04-15T08:07:18.2518480Z       window.dispatchEvent(new Event("resize"));
2025-04-15T08:07:18.2518543Z     }
2025-04-15T08:07:18.2518603Z   }
2025-04-15T08:07:18.2518607Z 
2025-04-15T08:07:18.2518761Z   const showErrorMessage = (message = defaultErrorMessage) => {
2025-04-15T08:07:18.2518937Z     const messageContainer = document.getElementById("loadingMessage");
2025-04-15T08:07:18.2519019Z     if (messageContainer) {
2025-04-15T08:07:18.2519113Z       messageContainer.innerHTML = message;
2025-04-15T08:07:18.2519185Z       startLoading();
2025-04-15T08:07:18.2519245Z     }
2025-04-15T08:07:18.2519310Z   }
2025-04-15T08:07:18.2519314Z 
2025-04-15T08:07:18.2519396Z   const initMetrics = data => {
2025-04-15T08:07:18.2519591Z     if (!data?.agents?.[0]) return Promise.reject({ message: "No agent data available." })
2025-04-15T08:07:18.2519716Z 
2025-04-15T08:07:18.2519866Z     const setPercentageBarWidth = (containerId, percent) => {
2025-04-15T08:07:18.2519998Z       const container = document.getElementById(containerId);
2025-04-15T08:07:18.2520070Z       if (container) {
2025-04-15T08:07:18.2520221Z         const percentageContainer = document.createElement("div");
2025-04-15T08:07:18.2520365Z         percentageContainer.className = "percentage-container";
2025-04-15T08:07:18.2520369Z 
2025-04-15T08:07:18.2520496Z         const percentageBar = document.createElement("div");
2025-04-15T08:07:18.2520605Z         percentageBar.className = "percentage-bar";
2025-04-15T08:07:18.2520714Z         percentageBar.style.width = percent + "%";
2025-04-15T08:07:18.2520718Z 
2025-04-15T08:07:18.2520848Z         const percentageText = document.createElement("div");
2025-04-15T08:07:18.2520964Z         percentageText.className = "percentage-text";
2025-04-15T08:07:18.2521190Z         percentageText.innerText = percent + "%"; // Display the rounded percentage value with "%"
2025-04-15T08:07:18.2521200Z 
2025-04-15T08:07:18.2521337Z         // Calculate the right position dynamically, capped at 96%
2025-04-15T08:07:18.2521471Z         const rightPosition = Math.min(100 - percent, 96) + "%";
2025-04-15T08:07:18.2521580Z         percentageText.style.right = rightPosition;
2025-04-15T08:07:18.2521584Z 
2025-04-15T08:07:18.2521718Z         percentageContainer.appendChild(percentageBar);
2025-04-15T08:07:18.2521937Z         percentageContainer.appendChild(percentageText); // Append the percentage text
2025-04-15T08:07:18.2521942Z 
2025-04-15T08:07:18.2522051Z         container.appendChild(percentageContainer);
2025-04-15T08:07:18.2522114Z       }
2025-04-15T08:07:18.2522177Z     }
2025-04-15T08:07:18.2522181Z 
2025-04-15T08:07:18.2522363Z     const units = ["", "K", "M", "B", "T", "P", "E"]
2025-04-15T08:07:18.2522367Z 
2025-04-15T08:07:18.2522458Z     const abbreviateNumber = number => {
2025-04-15T08:07:18.2522534Z       if (!number) return 0
2025-04-15T08:07:18.2522601Z     
2025-04-15T08:07:18.2522715Z       const tier = (Math.log10(Math.abs(number)) / 3) | 0
2025-04-15T08:07:18.2522775Z     
2025-04-15T08:07:18.2522853Z       if (!tier) return number
2025-04-15T08:07:18.2522913Z     
2025-04-15T08:07:18.2522991Z       const suffix = units[tier]
2025-04-15T08:07:18.2523079Z       const scale = Math.pow(10, tier * 3)
2025-04-15T08:07:18.2523158Z       const scaled = number / scale
2025-04-15T08:07:18.2523245Z       return scaled.toFixed(1) + suffix
2025-04-15T08:07:18.2523306Z     }
2025-04-15T08:07:18.2523310Z 
2025-04-15T08:07:18.2523392Z     const formatBytes = (bytes) => {
2025-04-15T08:07:18.2523474Z       if (bytes === 0) return "0 Bytes";
2025-04-15T08:07:18.2523541Z       const k = 1024,
2025-04-15T08:07:18.2523678Z         sizes = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"],
2025-04-15T08:07:18.2523780Z         i = Math.floor(Math.log(bytes) / Math.log(k));
2025-04-15T08:07:18.2523848Z       return (
2025-04-15T08:07:18.2523999Z         parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i]
2025-04-15T08:07:18.2524061Z       );
2025-04-15T08:07:18.2524126Z     }
2025-04-15T08:07:18.2524129Z 
2025-04-15T08:07:18.2524225Z     const formatLargeNumbers = (number) => {
2025-04-15T08:07:18.2524319Z       return number.toLocaleString();
2025-04-15T08:07:18.2524380Z     }
2025-04-15T08:07:18.2524384Z 
2025-04-15T08:07:18.2524476Z     const formatTimestamp = (timestamp) => {
2025-04-15T08:07:18.2524572Z       const date = new Date(timestamp * 1000);
2025-04-15T08:07:18.2524642Z       const months = [
2025-04-15T08:07:18.2524709Z         "Jan",
2025-04-15T08:07:18.2524771Z         "Feb",
2025-04-15T08:07:18.2524837Z         "Mar",
2025-04-15T08:07:18.2524900Z         "Apr",
2025-04-15T08:07:18.2524968Z         "May",
2025-04-15T08:07:18.2525033Z         "Jun",
2025-04-15T08:07:18.2525094Z         "Jul",
2025-04-15T08:07:18.2525159Z         "Aug",
2025-04-15T08:07:18.2525220Z         "Sep",
2025-04-15T08:07:18.2525369Z         "Oct",
2025-04-15T08:07:18.2525434Z         "Nov",
2025-04-15T08:07:18.2525495Z         "Dec",
2025-04-15T08:07:18.2525560Z       ];
2025-04-15T08:07:18.2525690Z       const days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
2025-04-15T08:07:18.2525777Z       const day = days[date.getUTCDay()];
2025-04-15T08:07:18.2525877Z       const month = months[date.getUTCMonth()];
2025-04-15T08:07:18.2525964Z       const year = date.getUTCFullYear();
2025-04-15T08:07:18.2526215Z       const hours = date.getUTCHours().toString().padStart(2, "0");
2025-04-15T08:07:18.2526376Z       const minutes = date.getUTCMinutes().toString().padStart(2, "0");
2025-04-15T08:07:18.2526530Z       const seconds = date.getUTCSeconds().toString().padStart(2, "0");
2025-04-15T08:07:18.2526534Z 
2025-04-15T08:07:18.2526713Z       return `${month} ${date.getUTCDate()}, ${year} ${hours}:${minutes}:${seconds}`;
2025-04-15T08:07:18.2526778Z     }
2025-04-15T08:07:18.2526782Z 
2025-04-15T08:07:18.2526907Z     const formatDuration = (seconds, short = false) => {
2025-04-15T08:07:18.2527001Z       if (seconds <= 0) return "0 seconds";
2025-04-15T08:07:18.2527109Z       const days = Math.floor(seconds / (24 * 3600));
2025-04-15T08:07:18.2527229Z       const hours = Math.floor((seconds % (24 * 3600)) / 3600);
2025-04-15T08:07:18.2527340Z       const minutes = Math.floor((seconds % 3600) / 60);
2025-04-15T08:07:18.2527431Z       const remainingSeconds = seconds % 60;
2025-04-15T08:07:18.2527436Z 
2025-04-15T08:07:18.2527505Z       if (short) {
2025-04-15T08:07:18.2527580Z         if (days > 3) {
2025-04-15T08:07:18.2527656Z           return days + " days";
2025-04-15T08:07:18.2527733Z         } else if (days > 0) {
2025-04-15T08:07:18.2527819Z           return days * 24 + hours + " hours";
2025-04-15T08:07:18.2528001Z         }
2025-04-15T08:07:18.2528069Z       }
2025-04-15T08:07:18.2528073Z 
2025-04-15T08:07:18.2528145Z       const parts = [];
2025-04-15T08:07:18.2528280Z       if (days > 0) parts.push(days + " day" + (days > 1 ? "s" : ""));
2025-04-15T08:07:18.2528424Z       if (hours > 0) parts.push(hours + " hour" + (hours > 1 ? "s" : ""));
2025-04-15T08:07:18.2528498Z       if (minutes > 0)
2025-04-15T08:07:18.2528634Z         parts.push(minutes + " minute" + (minutes > 1 ? "s" : ""));
2025-04-15T08:07:18.2528713Z       if (remainingSeconds > 0)
2025-04-15T08:07:18.2528787Z         parts.push(
2025-04-15T08:07:18.2528941Z           remainingSeconds + " second" + (remainingSeconds > 1 ? "s" : "")
2025-04-15T08:07:18.2529009Z         );
2025-04-15T08:07:18.2529130Z       return parts.join(" • ");
2025-04-15T08:07:18.2529197Z     }
2025-04-15T08:07:18.2529201Z 
2025-04-15T08:07:18.2529288Z     const createKeyValuePairs = (
2025-04-15T08:07:18.2529355Z       containerId,
2025-04-15T08:07:18.2529424Z       dataObject,
2025-04-15T08:07:18.2529496Z       keys = null,
2025-04-15T08:07:18.2529574Z       shortFormat = false,
2025-04-15T08:07:18.2529654Z       usePercentageBar = false
2025-04-15T08:07:18.2529717Z     ) => {
2025-04-15T08:07:18.2529860Z       const container = document.getElementById(containerId);
2025-04-15T08:07:18.2529934Z       if (!container) return;
2025-04-15T08:07:18.2530074Z       if (dataObject === null || typeof dataObject !== "object") return
2025-04-15T08:07:18.2530079Z 
2025-04-15T08:07:18.2530188Z       container.innerHTML = ""; // Clear the container
2025-04-15T08:07:18.2530193Z 
2025-04-15T08:07:18.2530305Z       const keysToUse = keys || Object.keys(dataObject);
2025-04-15T08:07:18.2530309Z 
2025-04-15T08:07:18.2530397Z       keysToUse.forEach(function (key) {
2025-04-15T08:07:18.2530495Z         if (dataObject.hasOwnProperty(key)) {
2025-04-15T08:07:18.2530593Z           let value = dataObject[key].toString();
2025-04-15T08:07:18.2530673Z           if (value === "false") return;
2025-04-15T08:07:18.2530682Z 
2025-04-15T08:07:18.2530766Z           if (key === "cpu_frequency") {
2025-04-15T08:07:18.2530881Z             value = (dataObject[key] / 1e9).toFixed(2) + " GHz";
2025-04-15T08:07:18.2530952Z           } else if (
2025-04-15T08:07:18.2531141Z             key === "ram" ||
2025-04-15T08:07:18.2531211Z             key === "disk" ||
2025-04-15T08:07:18.2531291Z             key === "disk_used" ||
2025-04-15T08:07:18.2531362Z             key === "disk_max"
2025-04-15T08:07:18.2531426Z           ) {
2025-04-15T08:07:18.2531520Z             value = formatBytes(dataObject[key]);
2025-04-15T08:07:18.2531585Z           } else if (
2025-04-15T08:07:18.2531662Z             key === "samples" ||
2025-04-15T08:07:18.2531748Z             key === "currently_collected_metrics"
2025-04-15T08:07:18.2531812Z           ) {
2025-04-15T08:07:18.2531917Z             value = formatLargeNumbers(dataObject[key]);
2025-04-15T08:07:18.2532012Z           } else if (key === "from" || key === "to") {
2025-04-15T08:07:18.2532116Z             value = formatTimestamp(dataObject[key]);
2025-04-15T08:07:18.2532181Z           } else if (
2025-04-15T08:07:18.2532260Z             key === "retention" ||
2025-04-15T08:07:18.2532345Z             key === "expected_retention" ||
2025-04-15T08:07:18.2532432Z             key === "requested_retention"
2025-04-15T08:07:18.2532493Z           ) {
2025-04-15T08:07:18.2532623Z             value = formatDuration(dataObject[key], shortFormat);
2025-04-15T08:07:18.2532712Z           } else if (key === "disk_percent") {
2025-04-15T08:07:18.2532915Z             const roundedValue = Math.round(dataObject[key]); // Round the percentage value
2025-04-15T08:07:18.2532999Z             if (usePercentageBar) {
2025-04-15T08:07:18.2533123Z               setPercentageBarWidth(containerId, roundedValue);
2025-04-15T08:07:18.2533268Z               return; // No need to create key-value pair for percentage bar
2025-04-15T08:07:18.2533333Z             } else {
2025-04-15T08:07:18.2533471Z               value = roundedValue + "%"; // Append "%" to the rounded value
2025-04-15T08:07:18.2533647Z             }
2025-04-15T08:07:18.2533711Z           }
2025-04-15T08:07:18.2533715Z 
2025-04-15T08:07:18.2533792Z           const div = getDOM({
2025-04-15T08:07:18.2533865Z             tag: "div",
2025-04-15T08:07:18.2533948Z             classList: "key-value",
2025-04-15T08:07:18.2534017Z             children: [
2025-04-15T08:07:18.2534080Z               {
2025-04-15T08:07:18.2534156Z                 tag: "span",
2025-04-15T08:07:18.2534333Z                 innerText: key.charAt(0).toUpperCase() + key.slice(1).replace(/_/g, " ")
2025-04-15T08:07:18.2534401Z               },
2025-04-15T08:07:18.2534464Z               {
2025-04-15T08:07:18.2534534Z                 tag: "span",
2025-04-15T08:07:18.2534616Z                 innerText: value,
2025-04-15T08:07:18.2534699Z                 condition: value !== "true"
2025-04-15T08:07:18.2534766Z               }
2025-04-15T08:07:18.2534827Z             ]
2025-04-15T08:07:18.2534888Z           });
2025-04-15T08:07:18.2534900Z 
2025-04-15T08:07:18.2534988Z           container.appendChild(div);
2025-04-15T08:07:18.2535049Z         }
2025-04-15T08:07:18.2535114Z       });
2025-04-15T08:07:18.2535174Z     }
2025-04-15T08:07:18.2535182Z 
2025-04-15T08:07:18.2535279Z     const setupCollectedMetrics = data => {
2025-04-15T08:07:18.2535362Z       const agent = data?.agents?.[0]
2025-04-15T08:07:18.2535546Z       const metricsFromDbSize = agent?.db_size?.[0]?.currently_collected_metrics
2025-04-15T08:07:18.2535836Z       const collectedMetrics = metricsFromDbSize !== undefined ? metricsFromDbSize : agent?.metrics?.collected;
2025-04-15T08:07:18.2535994Z       const container = document.getElementById("collectedMetrics");
2025-04-15T08:07:18.2536227Z       if (collectedMetrics === undefined || !container) return;
2025-04-15T08:07:18.2536232Z 
2025-04-15T08:07:18.2536307Z       const div = getDOM({
2025-04-15T08:07:18.2536376Z         tag: "div",
2025-04-15T08:07:18.2536453Z         classList: "key-value",
2025-04-15T08:07:18.2536525Z         children: [
2025-04-15T08:07:18.2536594Z           {
2025-04-15T08:07:18.2536663Z             tag: "span",
2025-04-15T08:07:18.2536767Z             innerText: "Currently Collected Metrics"
2025-04-15T08:07:18.2536950Z           },
2025-04-15T08:07:18.2537012Z           {
2025-04-15T08:07:18.2537084Z             tag: "span",
2025-04-15T08:07:18.2537406Z             innerText: collectedMetrics > 99999 ? abbreviateNumber(collectedMetrics) : formatLargeNumbers(collectedMetrics),
2025-04-15T08:07:18.2537652Z             // ...(collectedMetrics > 99999 ? { dataset: { tooltip: formatLargeNumbers(collectedMetrics) } } : {})
2025-04-15T08:07:18.2537716Z           }
2025-04-15T08:07:18.2537781Z         ]
2025-04-15T08:07:18.2537841Z       });
2025-04-15T08:07:18.2537845Z 
2025-04-15T08:07:18.2537930Z       container.appendChild(div);
2025-04-15T08:07:18.2537995Z     }
2025-04-15T08:07:18.2537999Z 
2025-04-15T08:07:18.2538071Z     const buildTier = ({
2025-04-15T08:07:18.2538141Z       tier: index,
2025-04-15T08:07:18.2538213Z       granularity,
2025-04-15T08:07:18.2538276Z       metrics,
2025-04-15T08:07:18.2538344Z       samples,
2025-04-15T08:07:18.2538414Z       retention_human,
2025-04-15T08:07:18.2538500Z       expected_retention_human,
2025-04-15T08:07:18.2538578Z       requested_retention_human,
2025-04-15T08:07:18.2538648Z       disk_used,
2025-04-15T08:07:18.2538714Z       disk_percent,
2025-04-15T08:07:18.2538777Z       disk_max,
2025-04-15T08:07:18.2538844Z       ...rest
2025-04-15T08:07:18.2538905Z     }) => {
2025-04-15T08:07:18.2539056Z       const disk_used_exists = disk_used !== null && !isNaN(disk_used)
2025-04-15T08:07:18.2539190Z       const disk_max_exists = disk_max !== null && !isNaN(disk_max)
2025-04-15T08:07:18.2539195Z 
2025-04-15T08:07:18.2539279Z       const contentsStructure = {
2025-04-15T08:07:18.2539348Z         tag: "tr",
2025-04-15T08:07:18.2539415Z         children: [
2025-04-15T08:07:18.2539481Z           {
2025-04-15T08:07:18.2539548Z             tag: "td",
2025-04-15T08:07:18.2539746Z             classList: "cell-data",
2025-04-15T08:07:18.2539825Z             textContent: index
2025-04-15T08:07:18.2539887Z           },
2025-04-15T08:07:18.2539952Z           {
2025-04-15T08:07:18.2540022Z             tag: "td",
2025-04-15T08:07:18.2540103Z             classList: "cell-data",
2025-04-15T08:07:18.2540186Z             textContent: granularity
2025-04-15T08:07:18.2540248Z           },
2025-04-15T08:07:18.2540314Z           {
2025-04-15T08:07:18.2540378Z             tag: "td",
2025-04-15T08:07:18.2540477Z             classList: "cell-data section-start",
2025-04-15T08:07:18.2540545Z             children: [
2025-04-15T08:07:18.2540607Z               {
2025-04-15T08:07:18.2540682Z                 tag: "span",
2025-04-15T08:07:18.2540785Z                 textContent: abbreviateNumber(metrics),
2025-04-15T08:07:18.2540911Z                 // dataset: { tooltip: formatLargeNumbers(metrics) }
2025-04-15T08:07:18.2540972Z               }
2025-04-15T08:07:18.2541033Z             ]
2025-04-15T08:07:18.2541102Z           },
2025-04-15T08:07:18.2541162Z           {
2025-04-15T08:07:18.2541232Z             tag: "td",
2025-04-15T08:07:18.2541306Z             classList: "cell-data",
2025-04-15T08:07:18.2541377Z             children: [
2025-04-15T08:07:18.2541444Z               {
2025-04-15T08:07:18.2541513Z                 tag: "span",
2025-04-15T08:07:18.2541617Z                 textContent: abbreviateNumber(samples),
2025-04-15T08:07:18.2541735Z                 // dataset: { tooltip: formatLargeNumbers(samples) }
2025-04-15T08:07:18.2541801Z               }
2025-04-15T08:07:18.2541862Z             ]
2025-04-15T08:07:18.2541922Z           },
2025-04-15T08:07:18.2541988Z           {
2025-04-15T08:07:18.2542053Z             tag: "td",
2025-04-15T08:07:18.2542148Z             classList: "cell-data section-start",
2025-04-15T08:07:18.2542240Z             textContent: retention_human || "-"
2025-04-15T08:07:18.2542302Z           },
2025-04-15T08:07:18.2542367Z           {
2025-04-15T08:07:18.2542437Z             tag: "td",
2025-04-15T08:07:18.2542516Z             classList: "cell-data",
2025-04-15T08:07:18.2542623Z             textContent: expected_retention_human || "-"
2025-04-15T08:07:18.2542686Z           },
2025-04-15T08:07:18.2542841Z           {
2025-04-15T08:07:18.2542907Z             tag: "td",
2025-04-15T08:07:18.2542988Z             classList: "cell-data",
2025-04-15T08:07:18.2543096Z             textContent: requested_retention_human || "-"
2025-04-15T08:07:18.2543162Z           },
2025-04-15T08:07:18.2543222Z           {
2025-04-15T08:07:18.2543286Z             tag: "td",
2025-04-15T08:07:18.2543380Z             classList: "cell-data section-start",
2025-04-15T08:07:18.2543448Z             children: [
2025-04-15T08:07:18.2543513Z               {
2025-04-15T08:07:18.2543630Z                 className: "progress-indicator flex flex-col",
2025-04-15T08:07:18.2543701Z                 children: [
2025-04-15T08:07:18.2543769Z                   {
2025-04-15T08:07:18.2543840Z                     tag: "span",
2025-04-15T08:07:18.2544001Z                     textContent: disk_used_exists ? formatBytes(disk_used) : "-"
2025-04-15T08:07:18.2544063Z                   },
2025-04-15T08:07:18.2544144Z                   ...(disk_used_exists ? [{
2025-04-15T08:07:18.2544255Z                     className: "progress-bar-container",
2025-04-15T08:07:18.2544324Z                     children: [
2025-04-15T08:07:18.2544393Z                       {
2025-04-15T08:07:18.2544484Z                         className: "progress-bar",
2025-04-15T08:07:18.2544559Z                         dataset: {
2025-04-15T08:07:18.2544641Z                           fill: disk_percent
2025-04-15T08:07:18.2544706Z                         }
2025-04-15T08:07:18.2544772Z                       }
2025-04-15T08:07:18.2544834Z                     ]
2025-04-15T08:07:18.2544903Z                   }] : [])
2025-04-15T08:07:18.2544967Z                 ]
2025-04-15T08:07:18.2545028Z               }
2025-04-15T08:07:18.2545096Z             ]
2025-04-15T08:07:18.2545242Z           },
2025-04-15T08:07:18.2545306Z           {
2025-04-15T08:07:18.2545374Z             tag: "td",
2025-04-15T08:07:18.2545451Z             classList: "cell-data",
2025-04-15T08:07:18.2545599Z             textContent: disk_max_exists ? formatBytes(disk_max) : "-"
2025-04-15T08:07:18.2545663Z           }
2025-04-15T08:07:18.2545726Z         ]
2025-04-15T08:07:18.2545788Z       }
2025-04-15T08:07:18.2545792Z 
2025-04-15T08:07:18.2545885Z       return getDOM(contentsStructure);
2025-04-15T08:07:18.2545947Z     }
2025-04-15T08:07:18.2545951Z 
2025-04-15T08:07:18.2546028Z     const buildTiers = () => {
2025-04-15T08:07:18.2546223Z       const tiers = data.agents[0].db_size || [];
2025-04-15T08:07:18.2546433Z       const placeholder = document.getElementById("tiers-table-data-placeholder");
2025-04-15T08:07:18.2546526Z       if (placeholder && !!tiers.length) {
2025-04-15T08:07:18.2546612Z         const rows = tiers.map(buildTier)
2025-04-15T08:07:18.2546706Z         placeholder.replaceWith(...rows);
2025-04-15T08:07:18.2546777Z       }
2025-04-15T08:07:18.2546781Z 
2025-04-15T08:07:18.2546860Z       return Promise.resolve()
2025-04-15T08:07:18.2546927Z     }
2025-04-15T08:07:18.2546930Z 
2025-04-15T08:07:18.2547025Z     const setupProgressBars = () => {
2025-04-15T08:07:18.2547178Z       document.querySelectorAll(".progress-bar").forEach(el => {
2025-04-15T08:07:18.2547260Z         const fill = el.dataset.fill
2025-04-15T08:07:18.2547337Z         el.style.width = `${fill}%`
2025-04-15T08:07:18.2547404Z       })
2025-04-15T08:07:18.2547464Z     }
2025-04-15T08:07:18.2547467Z 
2025-04-15T08:07:18.2547631Z     createKeyValuePairs("kernel", data.agents[0].application.os, [
2025-04-15T08:07:18.2547698Z       "kernel",
2025-04-15T08:07:18.2547763Z     ]);
2025-04-15T08:07:18.2547944Z     createKeyValuePairs("kernelVersion", data.agents[0].application.os, [
2025-04-15T08:07:18.2548015Z       "kernel_version",
2025-04-15T08:07:18.2548080Z     ]);
2025-04-15T08:07:18.2548243Z     createKeyValuePairs("id", data.agents[0].application.os, ["id"]);
2025-04-15T08:07:18.2548410Z     createKeyValuePairs("os", data.agents[0].application.os, ["os"]);
2025-04-15T08:07:18.2548415Z 
2025-04-15T08:07:18.2548593Z     createKeyValuePairs("package", data.agents[0].application.package, [
2025-04-15T08:07:18.2548797Z       "version",
2025-04-15T08:07:18.2548860Z     ]);
2025-04-15T08:07:18.2548940Z     createKeyValuePairs(
2025-04-15T08:07:18.2549012Z       "directories",
2025-04-15T08:07:18.2549108Z       data.agents[0].application.directories
2025-04-15T08:07:18.2549172Z     );
2025-04-15T08:07:18.2549301Z     createKeyValuePairs("server", data.agents[0], ["nm"]);
2025-04-15T08:07:18.2549461Z     createKeyValuePairs("cpuCores", data.agents[0].application.hw, [
2025-04-15T08:07:18.2549531Z       "cpu_cores",
2025-04-15T08:07:18.2549593Z     ]);
2025-04-15T08:07:18.2549771Z     createKeyValuePairs("cpuFrequency", data.agents[0].application.hw, [
2025-04-15T08:07:18.2549842Z       "cpu_frequency",
2025-04-15T08:07:18.2549909Z     ]);
2025-04-15T08:07:18.2550079Z     createKeyValuePairs("ram", data.agents[0].application.hw, ["ram"]);
2025-04-15T08:07:18.2550254Z     createKeyValuePairs("disk", data.agents[0].application.hw, ["disk"]);
2025-04-15T08:07:18.2550461Z     createKeyValuePairs("cpuArchitecture", data.agents[0].application.hw, [
2025-04-15T08:07:18.2550538Z       "cpu_architecture",
2025-04-15T08:07:18.2550604Z     ]);
2025-04-15T08:07:18.2550783Z     createKeyValuePairs("virtualization", data.agents[0].application.hw, [
2025-04-15T08:07:18.2550860Z       "virtualization",
2025-04-15T08:07:18.2550925Z     ]);
2025-04-15T08:07:18.2551099Z     createKeyValuePairs("cloud_status", data.agents[0].cloud, ["status"]);
2025-04-15T08:07:18.2551260Z     createKeyValuePairs("nodes_streaming", data.agents[0].nodes);
2025-04-15T08:07:18.2551508Z     createKeyValuePairs("plugins", data.agents[0].application.plugins);
2025-04-15T08:07:18.2551798Z     createKeyValuePairs("libs", data.agents[0].application.libs);
2025-04-15T08:07:18.2552135Z     createKeyValuePairs("exporters", data.agents[0].application.exporters);
2025-04-15T08:07:18.2552228Z     setupCollectedMetrics(data);
2025-04-15T08:07:18.2552233Z 
2025-04-15T08:07:18.2552341Z     buildTiers().then(() => setupProgressBars())
2025-04-15T08:07:18.2552350Z 
2025-04-15T08:07:18.2552431Z     return Promise.resolve();
2025-04-15T08:07:18.2552496Z   }
2025-04-15T08:07:18.2552501Z 
2025-04-15T08:07:18.2552579Z   const initTooltips = () => {
2025-04-15T08:07:18.2552705Z     const tooltip = document.getElementById("tooltip");
2025-04-15T08:07:18.2552777Z     if (!tooltip) return;
2025-04-15T08:07:18.2552782Z 
2025-04-15T08:07:18.2552933Z     document.querySelectorAll("[data-tooltip]").forEach(elem => {
2025-04-15T08:07:18.2553039Z       elem.addEventListener("mouseenter", () => {
2025-04-15T08:07:18.2553136Z         const content = elem.dataset.tooltip;
2025-04-15T08:07:18.2553250Z         const rect = elem.getBoundingClientRect();
2025-04-15T08:07:18.2553331Z         const top = rect.bottom + 10;
2025-04-15T08:07:18.2553412Z         const left = rect.x;
2025-04-15T08:07:18.2553503Z         tooltip.textContent = content;
2025-04-15T08:07:18.2553592Z         tooltip.style.top = `${top}px`;
2025-04-15T08:07:18.2553688Z         tooltip.style.left = `${left}px`;
2025-04-15T08:07:18.2553775Z         tooltip.style.display = "block";
2025-04-15T08:07:18.2553840Z       });
2025-04-15T08:07:18.2553845Z 
2025-04-15T08:07:18.2553943Z       elem.addEventListener("mouseleave", () => {
2025-04-15T08:07:18.2554025Z         tooltip.textContent = "";
2025-04-15T08:07:18.2554220Z         tooltip.style.display = "none";
2025-04-15T08:07:18.2554285Z       })
2025-04-15T08:07:18.2554350Z     })
2025-04-15T08:07:18.2554410Z   }
2025-04-15T08:07:18.2554414Z 
2025-04-15T08:07:18.2554477Z   /**
2025-04-15T08:07:18.2554575Z    * Get agent info and initialize splash screen
2025-04-15T08:07:18.2554635Z    */
2025-04-15T08:07:18.2554729Z   const initSplashScreen = async () => {
2025-04-15T08:07:18.2554862Z     const msgSignIn = document.getElementById("msgSignIn");
2025-04-15T08:07:18.2555000Z     const btnSignIn = document.getElementById("btnSignIn");
2025-04-15T08:07:18.2555098Z     msgSignIn.textContent = "Please wait..."
2025-04-15T08:07:18.2555277Z     btnSignIn.style.display = "none"
2025-04-15T08:07:18.2555285Z 
2025-04-15T08:07:18.2555377Z     const agentInfo = await getAgentInfo()
2025-04-15T08:07:18.2555381Z 
2025-04-15T08:07:18.2555741Z     if (!agentInfo || !Array.isArray(agentInfo.agents) || !agentInfo.agents[0]) return Promise.reject({ message: "No agent data available." })
2025-04-15T08:07:18.2555746Z 
2025-04-15T08:07:18.2555854Z     const agent = (agentInfo?.agents || [])[0] || {}
2025-04-15T08:07:18.2555960Z     const status = agent.cloud && agent.cloud.status
2025-04-15T08:07:18.2556173Z     const claimId = agent.cloud && agent.cloud.claim_id
2025-04-15T08:07:18.2556281Z     const cloudUrl = agent.cloud && agent.cloud.url
2025-04-15T08:07:18.2556285Z 
2025-04-15T08:07:18.2556380Z     window.localNetdataRegistry = {
2025-04-15T08:07:18.2556460Z       hostname: agent.nm,
2025-04-15T08:07:18.2556526Z       mg: agent.mg,
2025-04-15T08:07:18.2556595Z       nd: agent.nd,
2025-04-15T08:07:18.2556664Z       claimId: claimId,
2025-04-15T08:07:18.2556752Z       xNetdataAuthHeader: true
2025-04-15T08:07:18.2556812Z     }
2025-04-15T08:07:18.2556816Z 
2025-04-15T08:07:18.2556998Z     window.envSettings.cloudUrl = cloudUrl || window.envSettings.cloudUrl
2025-04-15T08:07:18.2557173Z     window.envSettings.apiUrl = cloudUrl || window.envSettings.apiUrl
2025-04-15T08:07:18.2557178Z 
2025-04-15T08:07:18.2557332Z     const isCloudSignedIn = !!localStorage.getItem(CLOUD_TOKEN_KEY)
2025-04-15T08:07:18.2557337Z 
2025-04-15T08:07:18.2557416Z     if (!isCloudSignedIn) {
2025-04-15T08:07:18.2557504Z       msgSignIn.style.display = "inline"
2025-04-15T08:07:18.2557635Z       msgSignIn.textContent = "Please sign-in to continue"
2025-04-15T08:07:18.2557726Z       btnSignIn.style.display = "block"
2025-04-15T08:07:18.2557792Z     }
2025-04-15T08:07:18.2557932Z 
2025-04-15T08:07:18.2558011Z     initMetrics(agentInfo)
2025-04-15T08:07:18.2558016Z 
2025-04-15T08:07:18.2558163Z     if (!claimId && isCloudSignedIn && !window.envSettings.isLocal) {
2025-04-15T08:07:18.2558256Z       setShouldClaimStatus(true);
2025-04-15T08:07:18.2558336Z       prepareClaiming(agent)
2025-04-15T08:07:18.2558446Z       return Promise.resolve({ stopLoading: true })
2025-04-15T08:07:18.2558508Z     }
2025-04-15T08:07:18.2558512Z 
2025-04-15T08:07:18.2558597Z     let me = await checkMe(agent.mg)
2025-04-15T08:07:18.2558601Z 
2025-04-15T08:07:18.2558779Z     if (isCloudSignedIn && agent.nd && (me.auth === "none" || me.auth === "god")) {
2025-04-15T08:07:18.2558991Z       await getAgentToken({ mg: agent.mg, nd: agent.nd, claimId: agent.cloud.claim_id }, agent)
2025-04-15T08:07:18.2559076Z       me = await checkMe(agent.mg)
2025-04-15T08:07:18.2559138Z     }
2025-04-15T08:07:18.2559142Z 
2025-04-15T08:07:18.2559305Z     const claimStatusesToProceed = ["online", "indirect", "offline"]
2025-04-15T08:07:18.2559314Z 
2025-04-15T08:07:18.2559503Z     if ((me.auth === "bearer" || me.auth === "god") && claimStatusesToProceed.includes(status)) {
2025-04-15T08:07:18.2559606Z       await fetchUserAccess(agent.mg, agent.nd)
2025-04-15T08:07:18.2559689Z       return loadDashboard()
2025-04-15T08:07:18.2559784Z     } else if (window.envSettings.isLocal) {
2025-04-15T08:07:18.2559864Z       return loadDashboard()
2025-04-15T08:07:18.2559927Z     } else {
2025-04-15T08:07:18.2560026Z       await fetchUserAccess(agent.mg, agent.nd)
2025-04-15T08:07:18.2560087Z     }
2025-04-15T08:07:18.2560091Z 
2025-04-15T08:07:18.2560170Z     if (!isCloudSignedIn) {
2025-04-15T08:07:18.2560254Z       setupOptOutMessage(agent)
2025-04-15T08:07:18.2560362Z       return Promise.resolve({ stopLoading: true })
2025-04-15T08:07:18.2560430Z     }
2025-04-15T08:07:18.2560434Z 
2025-04-15T08:07:18.2560513Z     return Promise.resolve()
2025-04-15T08:07:18.2560581Z   }
2025-04-15T08:07:18.2560584Z 
2025-04-15T08:07:18.2560669Z   // =============================================== //
2025-04-15T08:07:18.2560673Z 
2025-04-15T08:07:18.2560807Z   document.addEventListener("DOMContentLoaded", () => {
2025-04-15T08:07:18.2560874Z     initGrid();
2025-04-15T08:07:18.2561080Z     initPrimaryButtonHover();
2025-04-15T08:07:18.2561152Z     toggleTab(1);
2025-04-15T08:07:18.2561219Z     initTabs();
2025-04-15T08:07:18.2561224Z 
2025-04-15T08:07:18.2561374Z     fetchRegistryInfo().then(initSplashScreen).then(data => {
2025-04-15T08:07:18.2561457Z       if (data?.stopLoading) {
2025-04-15T08:07:18.2561530Z         stopLoading()
2025-04-15T08:07:18.2561592Z       }
2025-04-15T08:07:18.2561662Z       initTooltips()
2025-04-15T08:07:18.2561734Z     }).catch(err => {
2025-04-15T08:07:18.2561819Z       showErrorMessage(err?.message)
2025-04-15T08:07:18.2561885Z     })
2025-04-15T08:07:18.2562202Z   });</script></html><!doctype html><html lang="en" dir="ltr"><head><meta charset="utf-8"/><title>Netdata</title><script>const CONFIG = {
2025-04-15T08:07:18.2562275Z       cache: {
2025-04-15T08:07:18.2562355Z         agentInfo: false,
2025-04-15T08:07:18.2562429Z         cloudToken: true,
2025-04-15T08:07:18.2562505Z         agentToken: true,
2025-04-15T08:07:18.2562574Z       }
2025-04-15T08:07:18.2562636Z     }
2025-04-15T08:07:18.2562640Z 
2025-04-15T08:07:18.2562795Z     // STATE MANAGEMENT ======================================================================== //
2025-04-15T08:07:18.2562866Z     const state = {
2025-04-15T08:07:18.2562936Z       loading: {
2025-04-15T08:07:18.2563006Z         spaces: false,
2025-04-15T08:07:18.2563081Z         rooms: false,
2025-04-15T08:07:18.2563159Z         claimingToken: false,
2025-04-15T08:07:18.2563233Z         claimingAgent: false
2025-04-15T08:07:18.2563300Z       },
2025-04-15T08:07:18.2563364Z       claim: {
2025-04-15T08:07:18.2563434Z         status: {},
2025-04-15T08:07:18.2563501Z         response: {},
2025-04-15T08:07:18.2563577Z         shouldClaim: false,
2025-04-15T08:07:18.2563733Z         step: 1,
2025-04-15T08:07:18.2563811Z         selectedSpaceIds: [],
2025-04-15T08:07:18.2563889Z         selectedRoomIds: [],
2025-04-15T08:07:18.2563960Z         privateKey: ""
2025-04-15T08:07:18.2564021Z       },
2025-04-15T08:07:18.2564092Z       cache: {
2025-04-15T08:07:18.2564166Z         spaces: undefined,
2025-04-15T08:07:18.2564235Z         rooms: {},
2025-04-15T08:07:18.2564323Z         claimingTokensPerSpace: {}
2025-04-15T08:07:18.2564385Z       }
2025-04-15T08:07:18.2564450Z     }
2025-04-15T08:07:18.2564454Z 
2025-04-15T08:07:18.2564542Z     const getSelectedRooms = state => {
2025-04-15T08:07:18.2564805Z       const spaceId = state.claim.selectedSpaceIds.length ? state.claim.selectedSpaceIds[0] : null;
2025-04-15T08:07:18.2564883Z       if (!spaceId) return [];
2025-04-15T08:07:18.2564994Z       if (state.claim.selectedRoomIds.length) {
2025-04-15T08:07:18.2565257Z         return state.cache?.rooms?.[spaceId]?.filter(({ id }) => state.claim.selectedRoomIds.includes(id)) || [];
2025-04-15T08:07:18.2565327Z       }
2025-04-15T08:07:18.2565394Z       return [];
2025-04-15T08:07:18.2565455Z     }
2025-04-15T08:07:18.2565458Z 
2025-04-15T08:07:18.2565534Z     const syncUI = () => {
2025-04-15T08:07:18.2565603Z       // Elements
2025-04-15T08:07:18.2565803Z       const splashMessage = document.getElementById("splashMessageContainer");
2025-04-15T08:07:18.2565988Z       const claiming = document.getElementById("claimingContentsContainer");
2025-04-15T08:07:18.2566219Z       const step1 = document.getElementById("connectionStep-1");
2025-04-15T08:07:18.2566361Z       const step2 = document.getElementById("connectionStep-2");
2025-04-15T08:07:18.2566528Z       const btnPrev = document.getElementById("btnConnectionStepPrev");
2025-04-15T08:07:18.2566694Z       const btnNext = document.getElementById("btnConnectionStepNext");
2025-04-15T08:07:18.2566820Z       const btnClaim = document.getElementById("btnClaim");
2025-04-15T08:07:18.2566976Z       const roomsSelector = document.getElementById("roomsSelector");
2025-04-15T08:07:18.2567167Z       const claimErrorMessage = document.getElementById("claimErrorMessage");
2025-04-15T08:07:18.2567171Z 
2025-04-15T08:07:18.2567236Z       // State
2025-04-15T08:07:18.2567646Z       const { spaces: spacesLoading, rooms: roomsLoading, claimingToken: claimingTokenLoading, claimingAgent: claimingAgentLoading } = state.loading;
2025-04-15T08:07:18.2568030Z       const { shouldClaim, step, selectedSpaceIds, selectedRoomIds, privateKey } = state.claim;
2025-04-15T08:07:18.2568473Z       const claimingTokenExists = state.claim.selectedSpaceIds.length ? !!state.cache.claimingTokensPerSpace[state.claim.selectedSpaceIds[0]] : false;
2025-04-15T08:07:18.2568478Z 
2025-04-15T08:07:18.2568643Z       splashMessage.style.display = !shouldClaim ? "initial" : "none";
2025-04-15T08:07:18.2568788Z       claiming.style.display = shouldClaim ? "initial" : "none";
2025-04-15T08:07:18.2568793Z 
2025-04-15T08:07:18.2568867Z       // Loading spaces
2025-04-15T08:07:18.2568938Z       if (step1) {
2025-04-15T08:07:18.2569070Z         const spacesLoader = step1.querySelector(".loader");
2025-04-15T08:07:18.2569149Z         if (spacesLoader) {
2025-04-15T08:07:18.2569321Z           spacesLoader.style.display = spacesLoading ? "initial" : "none";
2025-04-15T08:07:18.2569388Z         }
2025-04-15T08:07:18.2569452Z       }
2025-04-15T08:07:18.2569456Z 
2025-04-15T08:07:18.2569524Z       // Loading rooms
2025-04-15T08:07:18.2569603Z       if (roomsSelector) {
2025-04-15T08:07:18.2569760Z         const message = roomsSelector.querySelector(".selected-items");
2025-04-15T08:07:18.2569980Z         const selectedRoomNames = getSelectedRooms(state).map(({ name }) => name).join(", ");
2025-04-15T08:07:18.2570054Z         if (message) {
2025-04-15T08:07:18.2570294Z           message.innerText = roomsLoading ? "Loading rooms..." : (selectedRoomNames || "Select room");
2025-04-15T08:07:18.2570360Z         }
2025-04-15T08:07:18.2570421Z       }
2025-04-15T08:07:18.2570425Z 
2025-04-15T08:07:18.2570496Z       // Steps visibility
2025-04-15T08:07:18.2570737Z       step1.style.display = step == 1 ? "initial" : "none";
2025-04-15T08:07:18.2570853Z       step2.style.display = step == 2 ? "initial" : "none";
2025-04-15T08:07:18.2570862Z 
2025-04-15T08:07:18.2570938Z       // Rooms
2025-04-15T08:07:18.2571008Z       if (step == 1) {
2025-04-15T08:07:18.2571082Z         // Reset rooms
2025-04-15T08:07:18.2571436Z         const checkboxes = document.getElementById("roomsSelectorOptionsContainer").querySelectorAll('input[type="checkbox"]');
2025-04-15T08:07:18.2571534Z         checkboxes.forEach((checkbox) => {
2025-04-15T08:07:18.2571623Z           if (checkbox.checked) {
2025-04-15T08:07:18.2571710Z             checkbox.checked = false;
2025-04-15T08:07:18.2571829Z             checkbox.dispatchEvent(new Event("change"));
2025-04-15T08:07:18.2571894Z           }
2025-04-15T08:07:18.2571962Z         });
2025-04-15T08:07:18.2572026Z       }
2025-04-15T08:07:18.2572029Z 
2025-04-15T08:07:18.2572109Z       if (claimErrorMessage) {
2025-04-15T08:07:18.2572347Z         claimErrorMessage.style.display = state.claim?.response?.error ? "initial" : "none";
2025-04-15T08:07:18.2572605Z         claimErrorMessage.innerText = state.claim?.response?.error ? state.claim.response.error : "";
2025-04-15T08:07:18.2572682Z       }
2025-04-15T08:07:18.2572686Z 
2025-04-15T08:07:18.2572751Z       // Footer
2025-04-15T08:07:18.2572865Z       btnPrev.style.opacity = step == 1 ? "0" : "1";
2025-04-15T08:07:18.2573003Z       btnPrev.style.cursor = step == 1 ? "default" : "pointer";
2025-04-15T08:07:18.2573091Z       btnPrev.disabled = step == 1;
2025-04-15T08:07:18.2573228Z       btnNext.style.display = step == 1 ? "initial" : "none";
2025-04-15T08:07:18.2573340Z       btnNext.disabled = !selectedSpaceIds.length;
2025-04-15T08:07:18.2573481Z       btnClaim.style.display = step == 2 ? "initial" : "none";
2025-04-15T08:07:18.2573849Z       btnClaim.disabled = !selectedRoomIds.length || !privateKey || !claimingTokenExists || claimingTokenLoading || claimingAgentLoading;
2025-04-15T08:07:18.2574041Z       btnClaim.textContent = claimingAgentLoading ? "Claiming..." : "Claim";
2025-04-15T08:07:18.2574046Z 
2025-04-15T08:07:18.2574129Z       return Promise.resolve();
2025-04-15T08:07:18.2574279Z     }
2025-04-15T08:07:18.2574283Z 
2025-04-15T08:07:18.2574403Z     const toggleSpacesLoadingState = isLoading => {
2025-04-15T08:07:18.2574531Z       state.loading = { ...state.loading, spaces: isLoading };
2025-04-15T08:07:18.2574611Z       return syncUI();
2025-04-15T08:07:18.2613509Z     }
2025-04-15T08:07:18.2613533Z 
2025-04-15T08:07:18.2613710Z     const toggleRoomsLoadingState = isLoading => {
2025-04-15T08:07:18.2613885Z       state.loading = { ...state.loading, rooms: isLoading };
2025-04-15T08:07:18.2613962Z       return syncUI();
2025-04-15T08:07:18.2614030Z     }
2025-04-15T08:07:18.2614034Z 
2025-04-15T08:07:18.2614215Z     const toggleClaimingTokenLoadingState = isLoading => {
2025-04-15T08:07:18.2614376Z       state.loading = { ...state.loading, claimingToken: isLoading };
2025-04-15T08:07:18.2614462Z       return syncUI();
2025-04-15T08:07:18.2614529Z     }
2025-04-15T08:07:18.2614533Z 
2025-04-15T08:07:18.2614669Z     const toggleClaimingAgentLoadingState = isLoading => {
2025-04-15T08:07:18.2614823Z       state.loading = { ...state.loading, claimingAgent: isLoading };
2025-04-15T08:07:18.2614898Z       return syncUI();
2025-04-15T08:07:18.2614958Z     }
2025-04-15T08:07:18.2614963Z 
2025-04-15T08:07:18.2615076Z     const setShouldClaimStatus = shouldClaim => {
2025-04-15T08:07:18.2615183Z       state.claim = { ...state.claim, shouldClaim };
2025-04-15T08:07:18.2615260Z       return syncUI();
2025-04-15T08:07:18.2615322Z     }
2025-04-15T08:07:18.2615326Z 
2025-04-15T08:07:18.2615420Z     const setClaimStatusState = status => {
2025-04-15T08:07:18.2615521Z       state.claim = { ...state.claim, status };
2025-04-15T08:07:18.2615591Z       return syncUI();
2025-04-15T08:07:18.2615656Z     }
2025-04-15T08:07:18.2615660Z 
2025-04-15T08:07:18.2615762Z     const setClaimResponseState = response => {
2025-04-15T08:07:18.2616041Z       state.claim = { ...state.claim, response };
2025-04-15T08:07:18.2616236Z       return syncUI();
2025-04-15T08:07:18.2616299Z     }
2025-04-15T08:07:18.2616308Z 
2025-04-15T08:07:18.2616404Z     const setClaimingStep = async arg => {
2025-04-15T08:07:18.2616577Z       const nextStep = typeof arg == "function" ? arg(state.claim.step) : arg;
2025-04-15T08:07:18.2616857Z       state.claim = { ...state.claim, step: nextStep, ...(nextStep == 1 ? { selectedRoomIds: [], privateKey: "" } : {}) };
2025-04-15T08:07:18.2616931Z       await syncUI();
2025-04-15T08:07:18.2617025Z       return Promise.resolve(nextStep);
2025-04-15T08:07:18.2617092Z     }
2025-04-15T08:07:18.2617096Z 
2025-04-15T08:07:18.2617197Z     const setSelectedSpacesStatus = arg => {
2025-04-15T08:07:18.2617489Z       const spaceIds = typeof arg == "function" ? arg(state.claim.selectedSpaceIds) : Array.isArray(arg) ? arg : [arg];
2025-04-15T08:07:18.2617739Z       state.claim = { ...state.claim, selectedSpaceIds: spaceIds, selectedRoomIds: [], privateKey: "" };
2025-04-15T08:07:18.2617819Z       return syncUI();
2025-04-15T08:07:18.2617881Z     }
2025-04-15T08:07:18.2617885Z 
2025-04-15T08:07:18.2617988Z     const setSelectedRoomsStatus = arg => {
2025-04-15T08:07:18.2618264Z       const roomIds = typeof arg == "function" ? arg(state.claim.selectedRoomIds) : Array.isArray(arg) ? arg : [arg];
2025-04-15T08:07:18.2618402Z       state.claim = { ...state.claim, selectedRoomIds: roomIds };
2025-04-15T08:07:18.2618479Z       return syncUI();
2025-04-15T08:07:18.2618542Z     }
2025-04-15T08:07:18.2618546Z 
2025-04-15T08:07:18.2618676Z     const setClaimingPrivateKeyState = (value = "") => {
2025-04-15T08:07:18.2618796Z       state.claim = { ...state.claim, privateKey: value };
2025-04-15T08:07:18.2618867Z       return syncUI();
2025-04-15T08:07:18.2618934Z     }
2025-04-15T08:07:18.2618938Z 
2025-04-15T08:07:18.2619026Z     const cacheSpaces = (spaces) => {
2025-04-15T08:07:18.2619130Z       if (!spaces) return Promise.resolve([]);
2025-04-15T08:07:18.2619220Z       state.cache.spaces = spaces;
2025-04-15T08:07:18.2619313Z       return Promise.resolve(spaces);
2025-04-15T08:07:18.2619374Z     }
2025-04-15T08:07:18.2619495Z 
2025-04-15T08:07:18.2619591Z     const cacheRooms = (spaceId, rooms) => {
2025-04-15T08:07:18.2619697Z       if (!spaceId) return Promise.resolve([]);
2025-04-15T08:07:18.2619848Z       state.cache.rooms = { ...state.cache.rooms, [spaceId]: rooms };
2025-04-15T08:07:18.2619935Z       return Promise.resolve(rooms);
2025-04-15T08:07:18.2620037Z     }
2025-04-15T08:07:18.2620044Z 
2025-04-15T08:07:18.2620239Z     const cacheClaimingToken = (spaceId, token) => {
2025-04-15T08:07:18.2620415Z       if (!spaceId || !token) return Promise.resolve();
2025-04-15T08:07:18.2620692Z       state.cache.claimingTokensPerSpace = { ...state.cache.claimingTokensPerSpace, [spaceId]: token };
2025-04-15T08:07:18.2620781Z       return Promise.resolve(token);
2025-04-15T08:07:18.2620841Z     }
2025-04-15T08:07:18.2620852Z 
2025-04-15T08:07:18.2620954Z     // ========================================================================================= //
2025-04-15T08:07:18.2620959Z 
2025-04-15T08:07:18.2621318Z     const pathsRegex = /\/(spaces|nodes|overview|alerts|dashboards|anomalies|events|cloud|v3)\/?.*/;
2025-04-15T08:07:18.2621417Z     function getBasename() {
2025-04-15T08:07:18.2621639Z       return window.location.origin + window.location.pathname.replace(pathsRegex, "")
2025-04-15T08:07:18.2621700Z     }
2025-04-15T08:07:18.2621708Z 
2025-04-15T08:07:18.2621790Z     let goToOld = function(path) {
2025-04-15T08:07:18.2621880Z       let goToUrl = getBasename() + path;
2025-04-15T08:07:18.2621960Z       if (path !== "/v3") {
2025-04-15T08:07:18.2622194Z         let pathsRegex = /(\/(spaces|nodes|overview|alerts|dashboards|anomalies|events|cloud|v3)\/?.*)/
2025-04-15T08:07:18.2622391Z         if (pathsRegex.test(window.location.origin + window.location.pathname)) {
2025-04-15T08:07:18.2622626Z           goToUrl = (window.location.origin + window.location.pathname).replace(pathsRegex, "/v3$1")
2025-04-15T08:07:18.2622825Z         }
2025-04-15T08:07:18.2622892Z       }
2025-04-15T08:07:18.2623087Z       window.location.replace(ensureOneSlash(goToUrl + window.location.search))
2025-04-15T08:07:18.2623157Z     }
2025-04-15T08:07:18.2623161Z 
2025-04-15T08:07:18.2623308Z     const searchParams = new URLSearchParams(location.search);
2025-04-15T08:07:18.2623392Z     window.envSettings = {
2025-04-15T08:07:18.2623465Z       isAgent: true,
2025-04-15T08:07:18.2623569Z       apiUrl: "https://app.netdata.cloud",
2025-04-15T08:07:18.2623674Z       cloudUrl: "https://app.netdata.cloud",
2025-04-15T08:07:18.2623758Z       demoSlug: "netdata-demo",
2025-04-15T08:07:18.2625981Z       demoFavourites: {"postgresql":["Applications-0_Postgres-1"],"redis":["Applications-0_Redis-1"],"dns-query":["Applications-0_CoreDNS-1"],"http-endpoints":["Applications-0_HTTP_Checks-1"],"nginx":["Applications-0_web_log-1","Applications-0_Nginx-1"],"apache":["Applications-0_Apache-1"],"host-reachability":["Synthetic_Checks-0"],"cassandra":["Applications-0_Cassandra-1"],"coredns":["Applications-0_CoreDNS-1"],"logind":["Applications-0_systemd_LoginD-1"],"iis":["Applications-0_MS_IIS-1"],"active-directory":["Applications-0_MS_Active_Directory-1"],"windows":["Applications-0_Windows-1","Applications-0_MS_Active_Directory-1","Applications-0_MS_IIS-1","Applications-0_MS_SQL-1","Applications-0_MS_Exchange-1","Applications-0__NET_Framework-1"],"docker":["Containers___VMs-0"],"ups":["Hardware___Sensors-0_NUT_UPS-1"]},
2025-04-15T08:07:18.2626306Z       webpackPublicPath: "https://app.netdata.cloud" || (getBasename() + "/v3"),
2025-04-15T08:07:18.2626444Z       agentApiUrl: searchParams.get("agent") || getBasename(),
2025-04-15T08:07:18.2626625Z       posthogToken: "phc_hnhlqe6D2Q4IcQNrFItaqdXJAxQ8RcHkPAFAp74pubv",
2025-04-15T08:07:18.2626702Z       version: "7.48.0",
2025-04-15T08:07:18.2626775Z       tracking: !false,
2025-04-15T08:07:18.2626868Z       cookieDomain: ".netdata.cloud",
2025-04-15T08:07:18.2626944Z       onprem: false,
2025-04-15T08:07:18.2627012Z       isLocal: false,
2025-04-15T08:07:18.2627093Z       nodeEnv: "production"
2025-04-15T08:07:18.2627153Z     }
2025-04-15T08:07:18.2627274Z 
2025-04-15T08:07:18.2627362Z     window.visitedNodes = []
2025-04-15T08:07:18.2627366Z 
2025-04-15T08:07:18.2627456Z     const getHashValueByKey = key => {
2025-04-15T08:07:18.2627700Z       return location.hash.substr(1).split("&").find(pair => pair.split("=")[0] == key)?.split("=")[1]
2025-04-15T08:07:18.2627761Z     }
2025-04-15T08:07:18.2627765Z 
2025-04-15T08:07:18.2627838Z     // Check cloud token
2025-04-15T08:07:18.2627929Z     const CLOUD_TOKEN_KEY = "netdataJWT"
2025-04-15T08:07:18.2628060Z     const redirectUri = getHashValueByKey("redirect_uri")
2025-04-15T08:07:18.2628160Z     const token = getHashValueByKey("token")
2025-04-15T08:07:18.2628225Z     if (token) {
2025-04-15T08:07:18.2628333Z       localStorage.setItem(CLOUD_TOKEN_KEY, token)
2025-04-15T08:07:18.2628402Z     }
2025-04-15T08:07:18.2628472Z     if (redirectUri) {
2025-04-15T08:07:18.2628539Z       try {
2025-04-15T08:07:18.2628663Z         const decodedUrl = decodeURIComponent(redirectUri)
2025-04-15T08:07:18.2628824Z         const parsedUrl = new URL(decodedUrl, window.location.origin)
2025-04-15T08:07:18.2628830Z 
2025-04-15T08:07:18.2628946Z         if (parsedUrl.origin === window.location.origin) {
2025-04-15T08:07:18.2629045Z           window.location.href = parsedUrl.href
2025-04-15T08:07:18.2629111Z         } else {
2025-04-15T08:07:18.2629285Z           console.error("Blocked potentially unsafe redirect to: ", decodedUrl)
2025-04-15T08:07:18.2629352Z         }
2025-04-15T08:07:18.2629421Z       } catch (error) {
2025-04-15T08:07:18.2629552Z         console.error("Invalid URL detected: ", error.message)
2025-04-15T08:07:18.2629617Z       }
2025-04-15T08:07:18.2629713Z     }</script><style>body.netdata-splash {
2025-04-15T08:07:18.2629786Z       height: 100%;
2025-04-15T08:07:18.2629977Z       overflow: hidden;
2025-04-15T08:07:18.2630063Z       background: var(--main-bg);
2025-04-15T08:07:18.2630130Z       margin: 0;
2025-04-15T08:07:18.2630198Z       padding: 0;
2025-04-15T08:07:18.2630277Z       color: var(--text);
2025-04-15T08:07:18.2630459Z       font-family: system-ui, "Segoe UI", Roboto, Helvetica, Arial, sans-serif,
2025-04-15T08:07:18.2630596Z         "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
2025-04-15T08:07:18.2630657Z     }
2025-04-15T08:07:18.2630661Z 
2025-04-15T08:07:18.2630725Z     :root {
2025-04-15T08:07:18.2630809Z       --scrollbar-thumb: #fcfffd;
2025-04-15T08:07:18.2630886Z       --primary: #00ab44;
2025-04-15T08:07:18.2630961Z       --text: #93a4a4;
2025-04-15T08:07:18.2631035Z       --text-dark: #001107;
2025-04-15T08:07:18.2631114Z       --text-light: #fcfffd;
2025-04-15T08:07:18.2631186Z       --menu-item: #5b6c6c;
2025-04-15T08:07:18.2631256Z       --main-bg: #000;
2025-04-15T08:07:18.2631334Z       --highlight: #00ef5f;
2025-04-15T08:07:18.2631413Z       --tab-active: #ddffeb;
2025-04-15T08:07:18.2631487Z       --tab-hover: #d2d9d9;
2025-04-15T08:07:18.2631570Z       --panel-bg: transparent;
2025-04-15T08:07:18.2631645Z       --font-small: 14px;
2025-04-15T08:07:18.2631729Z       --font-medium: 16px;
2025-04-15T08:07:18.2631846Z       --row-2n: #101313;
2025-04-15T08:07:18.2631977Z       --border: #00ab4436;
2025-04-15T08:07:18.2632111Z       --border-neutral: #252c2c;
2025-04-15T08:07:18.2632194Z       --key-value-table: #93a4a4;
2025-04-15T08:07:18.2632267Z       --accent: #ddffeb;
2025-04-15T08:07:18.2632342Z       --module-height: 45vh;
2025-04-15T08:07:18.2632441Z       --list-option-bg: rgba(12, 15, 15, 0.5);
2025-04-15T08:07:18.2632531Z       --list-option-selected-bg: #000;
2025-04-15T08:07:18.2632633Z       --list-option-hover-bg: rgba(12, 15, 15, 1);
2025-04-15T08:07:18.2632709Z       --footer-height: 70px;
2025-04-15T08:07:18.2632783Z       --code-bg: #00220e;
2025-04-15T08:07:18.2632871Z       --progress-bar-height: 2px;
2025-04-15T08:07:18.2632964Z       background-color: var(--main-bg);
2025-04-15T08:07:18.2633025Z     }
2025-04-15T08:07:18.2633029Z 
2025-04-15T08:07:18.2633095Z     :root iframe {
2025-04-15T08:07:18.2633164Z       border-width: 0;
2025-04-15T08:07:18.2633329Z     }
2025-04-15T08:07:18.2633333Z 
2025-04-15T08:07:18.2633438Z     body.netdata-splash.loading .frame-right {
2025-04-15T08:07:18.2633509Z       display: none;
2025-04-15T08:07:18.2633569Z     }
2025-04-15T08:07:18.2633573Z 
2025-04-15T08:07:18.2633675Z     body.netdata-splash.loading .frame-left {
2025-04-15T08:07:18.2633755Z       grid-column: auto / span 12;
2025-04-15T08:07:18.2633815Z     }
2025-04-15T08:07:18.2633820Z 
2025-04-15T08:07:18.2633955Z     body.netdata-splash.loading .sphere-stats-container,
2025-04-15T08:07:18.2634056Z     body.netdata-splash.loading .head-summary,
2025-04-15T08:07:18.2634148Z     body.netdata-splash.loading .tabs {
2025-04-15T08:07:18.2634217Z       display: none;
2025-04-15T08:07:18.2634279Z     }
2025-04-15T08:07:18.2634289Z 
2025-04-15T08:07:18.2634400Z     body.netdata-splash.loading .loading-message {
2025-04-15T08:07:18.2634467Z       display: flex;
2025-04-15T08:07:18.2634543Z       position: absolute;
2025-04-15T08:07:18.2634607Z       inset: 0;
2025-04-15T08:07:18.2634682Z       margin: auto;
2025-04-15T08:07:18.2634754Z       align-items: center;
2025-04-15T08:07:18.2634830Z       justify-content: center;
2025-04-15T08:07:18.2634906Z       color: var(--accent);
2025-04-15T08:07:18.2634965Z     }
2025-04-15T08:07:18.2634969Z 
2025-04-15T08:07:18.2635052Z     body.netdata-splash .error {
2025-04-15T08:07:18.2635121Z       color: #DB162F;
2025-04-15T08:07:18.2635180Z     }
2025-04-15T08:07:18.2635188Z 
2025-04-15T08:07:18.2635281Z     body.netdata-splash .loading-message {
2025-04-15T08:07:18.2635348Z       display: none;
2025-04-15T08:07:18.2635411Z     }
2025-04-15T08:07:18.2635415Z 
2025-04-15T08:07:18.2635492Z     body.netdata-splash h1 {
2025-04-15T08:07:18.2635565Z       font-size: 36px;
2025-04-15T08:07:18.2635743Z       margin-top: 8px;
2025-04-15T08:07:18.2635816Z       margin-bottom: 8px;
2025-04-15T08:07:18.2635896Z       color: var(--text-light);
2025-04-15T08:07:18.2635969Z       filter: blur(0.6px);
2025-04-15T08:07:18.2636038Z     }
2025-04-15T08:07:18.2636041Z 
2025-04-15T08:07:18.2636227Z     body.netdata-splash h2 {
2025-04-15T08:07:18.2636302Z       font-size: 16px;
2025-04-15T08:07:18.2636362Z     }
2025-04-15T08:07:18.2636366Z 
2025-04-15T08:07:18.2636441Z     body.netdata-splash h4 {
2025-04-15T08:07:18.2636519Z       font-size: 12px;
2025-04-15T08:07:18.2636592Z       margin-bottom: 12px;
2025-04-15T08:07:18.2636665Z       margin-top: 8px;
2025-04-15T08:07:18.2636725Z     }
2025-04-15T08:07:18.2636729Z 
2025-04-15T08:07:18.2636808Z     body.netdata-splash a:link,
2025-04-15T08:07:18.2636897Z     body.netdata-splash a:visited,
2025-04-15T08:07:18.2636980Z     body.netdata-splash a:active {
2025-04-15T08:07:18.2637060Z       text-decoration: none;
2025-04-15T08:07:18.2637135Z       color: var(--primary);
2025-04-15T08:07:18.2637201Z     }
2025-04-15T08:07:18.2637208Z 
2025-04-15T08:07:18.2637288Z     body.netdata-splash a:hover {
2025-04-15T08:07:18.2637369Z       color: var(--highlight);
2025-04-15T08:07:18.2637431Z     }
2025-04-15T08:07:18.2637439Z 
2025-04-15T08:07:18.2637523Z     body.netdata-splash canvas {
2025-04-15T08:07:18.2637597Z       display: block;
2025-04-15T08:07:18.2637659Z     }
2025-04-15T08:07:18.2637663Z 
2025-04-15T08:07:18.2637742Z     body.netdata-splash code {
2025-04-15T08:07:18.2637825Z       background: var(--code-bg);
2025-04-15T08:07:18.2637901Z       color: var(--highlight);
2025-04-15T08:07:18.2637988Z       border: 1px solid var(--border);
2025-04-15T08:07:18.2638066Z       border-radius: 2px;
2025-04-15T08:07:18.2638139Z       padding: 12px;
2025-04-15T08:07:18.2638217Z       line-break: anywhere;
2025-04-15T08:07:18.2638292Z       word-break: break-all;
2025-04-15T08:07:18.2638356Z     }
2025-04-15T08:07:18.2638360Z 
2025-04-15T08:07:18.2638448Z     body.netdata-splash .text-small {
2025-04-15T08:07:18.2638526Z       font-size: 12px;
2025-04-15T08:07:18.2638586Z     }
2025-04-15T08:07:18.2638590Z 
2025-04-15T08:07:18.2638669Z     body.netdata-splash .logo {
2025-04-15T08:07:18.2638834Z       filter: drop-shadow(2px 2px 32px rgba(255, 255, 255, 0.7)) blur(1px);
2025-04-15T08:07:18.2639115Z       opacity: 0.9;
2025-04-15T08:07:18.2639240Z       width: 150px;
2025-04-15T08:07:18.2639341Z       height: 150px;
2025-04-15T08:07:18.2639406Z     }
2025-04-15T08:07:18.2639410Z 
2025-04-15T08:07:18.2639513Z     body.netdata-splash .claim-message .logo {
2025-04-15T08:07:18.2639579Z       width: 100px;
2025-04-15T08:07:18.2639650Z       height: 100px;
2025-04-15T08:07:18.2639710Z     }
2025-04-15T08:07:18.2639713Z 
2025-04-15T08:07:18.2639795Z     body.netdata-splash .grid {
2025-04-15T08:07:18.2639865Z       display: grid;
2025-04-15T08:07:18.2639943Z       grid-column-gap: 16px;
2025-04-15T08:07:18.2640022Z       grid-row-gap: 16px;
2025-04-15T08:07:18.2640120Z       grid-template-columns: repeat(12, 1fr);
2025-04-15T08:07:18.2640225Z       grid-template-rows: repeat(12, 1fr);
2025-04-15T08:07:18.2640308Z       grid-auto-rows: min-content;
2025-04-15T08:07:18.2640372Z     }
2025-04-15T08:07:18.2640376Z 
2025-04-15T08:07:18.2640475Z     body.netdata-splash .grid-columns-10 {
2025-04-15T08:07:18.2640543Z       display: grid;
2025-04-15T08:07:18.2640625Z       grid-column-gap: 16px;
2025-04-15T08:07:18.2640698Z       grid-row-gap: 16px;
2025-04-15T08:07:18.2640797Z       grid-template-columns: repeat(10, 1fr);
2025-04-15T08:07:18.2640857Z     }
2025-04-15T08:07:18.2640861Z 
2025-04-15T08:07:18.2640949Z     body.netdata-splash .col-span-1 {
2025-04-15T08:07:18.2641032Z       grid-column: auto / span 1;
2025-04-15T08:07:18.2641094Z     }
2025-04-15T08:07:18.2641098Z 
2025-04-15T08:07:18.2641185Z     body.netdata-splash .col-span-2 {
2025-04-15T08:07:18.2641263Z       grid-column: auto / span 2;
2025-04-15T08:07:18.2641328Z     }
2025-04-15T08:07:18.2641332Z 
2025-04-15T08:07:18.2641419Z     body.netdata-splash .col-span-3 {
2025-04-15T08:07:18.2641628Z       grid-column: auto / span 3;
2025-04-15T08:07:18.2641695Z     }
2025-04-15T08:07:18.2641699Z 
2025-04-15T08:07:18.2641782Z     body.netdata-splash .col-span-4 {
2025-04-15T08:07:18.2641866Z       grid-column: auto / span 4;
2025-04-15T08:07:18.2641925Z     }
2025-04-15T08:07:18.2641929Z 
2025-04-15T08:07:18.2642015Z     body.netdata-splash .col-span-5 {
2025-04-15T08:07:18.2642090Z       grid-column: auto / span 5;
2025-04-15T08:07:18.2642150Z     }
2025-04-15T08:07:18.2642154Z 
2025-04-15T08:07:18.2642242Z     body.netdata-splash .col-span-6 {
2025-04-15T08:07:18.2642320Z       grid-column: auto / span 6;
2025-04-15T08:07:18.2642385Z     }
2025-04-15T08:07:18.2642388Z 
2025-04-15T08:07:18.2642469Z     body.netdata-splash .col-span-7 {
2025-04-15T08:07:18.2642546Z       grid-column: auto / span 7;
2025-04-15T08:07:18.2642605Z     }
2025-04-15T08:07:18.2642608Z 
2025-04-15T08:07:18.2642690Z     body.netdata-splash .col-span-8 {
2025-04-15T08:07:18.2642773Z       grid-column: auto / span 8;
2025-04-15T08:07:18.2642832Z     }
2025-04-15T08:07:18.2642836Z 
2025-04-15T08:07:18.2642922Z     body.netdata-splash .col-span-9 {
2025-04-15T08:07:18.2642997Z       grid-column: auto / span 9;
2025-04-15T08:07:18.2643061Z     }
2025-04-15T08:07:18.2643067Z 
2025-04-15T08:07:18.2643153Z     body.netdata-splash .col-span-10 {
2025-04-15T08:07:18.2643229Z       grid-column: auto / span 10;
2025-04-15T08:07:18.2643292Z     }
2025-04-15T08:07:18.2643296Z 
2025-04-15T08:07:18.2643378Z     body.netdata-splash .col-span-11 {
2025-04-15T08:07:18.2643459Z       grid-column: auto / span 11;
2025-04-15T08:07:18.2643517Z     }
2025-04-15T08:07:18.2643521Z 
2025-04-15T08:07:18.2643607Z     body.netdata-splash .col-span-12 {
2025-04-15T08:07:18.2643685Z       grid-column: auto / span 12;
2025-04-15T08:07:18.2643746Z     }
2025-04-15T08:07:18.2643750Z 
2025-04-15T08:07:18.2643837Z     body.netdata-splash .col-start-1 {
2025-04-15T08:07:18.2643915Z       grid-column-start: 1;
2025-04-15T08:07:18.2643985Z     }
2025-04-15T08:07:18.2643989Z 
2025-04-15T08:07:18.2644073Z     body.netdata-splash .col-start-2 {
2025-04-15T08:07:18.2644151Z       grid-column-start: 2;
2025-04-15T08:07:18.2644215Z     }
2025-04-15T08:07:18.2644302Z 
2025-04-15T08:07:18.2644388Z     body.netdata-splash .col-start-3 {
2025-04-15T08:07:18.2644467Z       grid-column-start: 3;
2025-04-15T08:07:18.2644530Z     }
2025-04-15T08:07:18.2644534Z 
2025-04-15T08:07:18.2644620Z     body.netdata-splash .col-start-4 {
2025-04-15T08:07:18.2644694Z       grid-column-start: 4;
2025-04-15T08:07:18.2644755Z     }
2025-04-15T08:07:18.2644759Z 
2025-04-15T08:07:18.2644846Z     body.netdata-splash .col-start-5 {
2025-04-15T08:07:18.2644925Z       grid-column-start: 5;
2025-04-15T08:07:18.2644988Z     }
2025-04-15T08:07:18.2644991Z 
2025-04-15T08:07:18.2645078Z     body.netdata-splash .col-start-6 {
2025-04-15T08:07:18.2645152Z       grid-column-start: 6;
2025-04-15T08:07:18.2645216Z     }
2025-04-15T08:07:18.2645220Z 
2025-04-15T08:07:18.2645308Z     body.netdata-splash .col-start-7 {
2025-04-15T08:07:18.2645385Z       grid-column-start: 7;
2025-04-15T08:07:18.2645446Z     }
2025-04-15T08:07:18.2645450Z 
2025-04-15T08:07:18.2645536Z     body.netdata-splash .col-start-8 {
2025-04-15T08:07:18.2645618Z       grid-column-start: 8;
2025-04-15T08:07:18.2645679Z     }
2025-04-15T08:07:18.2645682Z 
2025-04-15T08:07:18.2645769Z     body.netdata-splash .col-start-9 {
2025-04-15T08:07:18.2645842Z       grid-column-start: 9;
2025-04-15T08:07:18.2645906Z     }
2025-04-15T08:07:18.2645910Z 
2025-04-15T08:07:18.2646001Z     body.netdata-splash .col-start-10 {
2025-04-15T08:07:18.2646322Z       grid-column-start: 10;
2025-04-15T08:07:18.2646386Z     }
2025-04-15T08:07:18.2646390Z 
2025-04-15T08:07:18.2646478Z     body.netdata-splash .col-start-12 {
2025-04-15T08:07:18.2646559Z       grid-column-start: 11;
2025-04-15T08:07:18.2646619Z     }
2025-04-15T08:07:18.2646623Z 
2025-04-15T08:07:18.2646719Z     body.netdata-splash .col-start-12 {
2025-04-15T08:07:18.2646916Z       grid-column-start: 12;
2025-04-15T08:07:18.2646974Z     }
2025-04-15T08:07:18.2646980Z 
2025-04-15T08:07:18.2647072Z     @media screen and (max-width: 1280px) {
2025-04-15T08:07:18.2647178Z       body.netdata-splash .md-grid-columns-12 {
2025-04-15T08:07:18.2647258Z         display: grid;
2025-04-15T08:07:18.2647338Z         grid-column-gap: 16px;
2025-04-15T08:07:18.2647414Z         grid-row-gap: 16px;
2025-04-15T08:07:18.2647510Z         grid-template-columns: repeat(12, 1fr);
2025-04-15T08:07:18.2647574Z       }
2025-04-15T08:07:18.2647578Z 
2025-04-15T08:07:18.2647674Z       body.netdata-splash .md-col-span-1 {
2025-04-15T08:07:18.2647755Z         grid-column: auto / span 1;
2025-04-15T08:07:18.2647821Z       }
2025-04-15T08:07:18.2647826Z 
2025-04-15T08:07:18.2647915Z       body.netdata-splash .md-col-span-2 {
2025-04-15T08:07:18.2647994Z         grid-column: auto / span 2;
2025-04-15T08:07:18.2648056Z       }
2025-04-15T08:07:18.2648060Z 
2025-04-15T08:07:18.2648148Z       body.netdata-splash .md-col-span-3 {
2025-04-15T08:07:18.2648235Z         grid-column: auto / span 3;
2025-04-15T08:07:18.2648296Z       }
2025-04-15T08:07:18.2648300Z 
2025-04-15T08:07:18.2648389Z       body.netdata-splash .md-col-span-4 {
2025-04-15T08:07:18.2648469Z         grid-column: auto / span 4;
2025-04-15T08:07:18.2648534Z       }
2025-04-15T08:07:18.2648538Z 
2025-04-15T08:07:18.2648625Z       body.netdata-splash .md-col-span-5 {
2025-04-15T08:07:18.2648704Z         grid-column: auto / span 5;
2025-04-15T08:07:18.2648768Z       }
2025-04-15T08:07:18.2648772Z 
2025-04-15T08:07:18.2648858Z       body.netdata-splash .md-col-span-6 {
2025-04-15T08:07:18.2648939Z         grid-column: auto / span 6;
2025-04-15T08:07:18.2649000Z       }
2025-04-15T08:07:18.2649004Z 
2025-04-15T08:07:18.2649090Z       body.netdata-splash .md-col-span-7 {
2025-04-15T08:07:18.2649171Z         grid-column: auto / span 7;
2025-04-15T08:07:18.2649232Z       }
2025-04-15T08:07:18.2649236Z 
2025-04-15T08:07:18.2649327Z       body.netdata-splash .md-col-span-8 {
2025-04-15T08:07:18.2649408Z         grid-column: auto / span 8;
2025-04-15T08:07:18.2649476Z       }
2025-04-15T08:07:18.2649481Z 
2025-04-15T08:07:18.2649567Z       body.netdata-splash .md-col-span-9 {
2025-04-15T08:07:18.2649777Z         grid-column: auto / span 9;
2025-04-15T08:07:18.2649842Z       }
2025-04-15T08:07:18.2649846Z 
2025-04-15T08:07:18.2649939Z       body.netdata-splash .md-col-span-10 {
2025-04-15T08:07:18.2650022Z         grid-column: auto / span 10;
2025-04-15T08:07:18.2650084Z       }
2025-04-15T08:07:18.2650088Z 
2025-04-15T08:07:18.2650179Z       body.netdata-splash .md-col-span-11 {
2025-04-15T08:07:18.2650257Z         grid-column: auto / span 11;
2025-04-15T08:07:18.2650318Z       }
2025-04-15T08:07:18.2650322Z 
2025-04-15T08:07:18.2650414Z       body.netdata-splash .md-col-span-12 {
2025-04-15T08:07:18.2650498Z         grid-column: auto / span 12;
2025-04-15T08:07:18.2650565Z       }
2025-04-15T08:07:18.2650627Z     }
2025-04-15T08:07:18.2650630Z 
2025-04-15T08:07:18.2650728Z     body.netdata-splash .row-span-1 {
2025-04-15T08:07:18.2650804Z       grid-row: auto / span 1;
2025-04-15T08:07:18.2650866Z     }
2025-04-15T08:07:18.2650870Z 
2025-04-15T08:07:18.2650960Z     body.netdata-splash .row-span-2 {
2025-04-15T08:07:18.2651046Z       grid-row: auto / span 2;
2025-04-15T08:07:18.2651112Z     }
2025-04-15T08:07:18.2651115Z 
2025-04-15T08:07:18.2651200Z     body.netdata-splash .row-span-3 {
2025-04-15T08:07:18.2651273Z       grid-row: auto / span 3;
2025-04-15T08:07:18.2651342Z     }
2025-04-15T08:07:18.2651346Z 
2025-04-15T08:07:18.2651429Z     body.netdata-splash .row-span-4 {
2025-04-15T08:07:18.2651505Z       grid-row: auto / span 4;
2025-04-15T08:07:18.2651566Z     }
2025-04-15T08:07:18.2651570Z 
2025-04-15T08:07:18.2651657Z     body.netdata-splash .row-span-5 {
2025-04-15T08:07:18.2651732Z       grid-row: auto / span 5;
2025-04-15T08:07:18.2651793Z     }
2025-04-15T08:07:18.2651797Z 
2025-04-15T08:07:18.2651885Z     body.netdata-splash .row-span-6 {
2025-04-15T08:07:18.2652045Z       grid-row: auto / span 6;
2025-04-15T08:07:18.2652109Z     }
2025-04-15T08:07:18.2652113Z 
2025-04-15T08:07:18.2652197Z     body.netdata-splash .row-span-7 {
2025-04-15T08:07:18.2652275Z       grid-row: auto / span 7;
2025-04-15T08:07:18.2652341Z     }
2025-04-15T08:07:18.2652345Z 
2025-04-15T08:07:18.2652428Z     body.netdata-splash .row-span-8 {
2025-04-15T08:07:18.2652504Z       grid-row: auto / span 8;
2025-04-15T08:07:18.2652565Z     }
2025-04-15T08:07:18.2652569Z 
2025-04-15T08:07:18.2652657Z     body.netdata-splash .row-span-9 {
2025-04-15T08:07:18.2652731Z       grid-row: auto / span 9;
2025-04-15T08:07:18.2652799Z     }
2025-04-15T08:07:18.2652803Z 
2025-04-15T08:07:18.2652890Z     body.netdata-splash .row-span-10 {
2025-04-15T08:07:18.2652965Z       grid-row: auto / span 10;
2025-04-15T08:07:18.2653028Z     }
2025-04-15T08:07:18.2653032Z 
2025-04-15T08:07:18.2653116Z     body.netdata-splash .row-span-11 {
2025-04-15T08:07:18.2653192Z       grid-row: auto / span 11;
2025-04-15T08:07:18.2653258Z     }
2025-04-15T08:07:18.2653261Z 
2025-04-15T08:07:18.2653344Z     body.netdata-splash .row-span-12 {
2025-04-15T08:07:18.2653419Z       grid-row: auto / span 12;
2025-04-15T08:07:18.2653479Z     }
2025-04-15T08:07:18.2653486Z 
2025-04-15T08:07:18.2653572Z     body.netdata-splash .relative {
2025-04-15T08:07:18.2653645Z       position: relative;
2025-04-15T08:07:18.2653707Z     }
2025-04-15T08:07:18.2653711Z 
2025-04-15T08:07:18.2653792Z     body.netdata-splash .absolute {
2025-04-15T08:07:18.2653865Z       position: absolute;
2025-04-15T08:07:18.2653929Z     }
2025-04-15T08:07:18.2653932Z 
2025-04-15T08:07:18.2654010Z     body.netdata-splash .index-10 {
2025-04-15T08:07:18.2654081Z       z-index: 10;
2025-04-15T08:07:18.2654142Z     }
2025-04-15T08:07:18.2654146Z 
2025-04-15T08:07:18.2654231Z     body.netdata-splash .m-auto {
2025-04-15T08:07:18.2654301Z       margin: auto;
2025-04-15T08:07:18.2654363Z     }
2025-04-15T08:07:18.2654367Z 
2025-04-15T08:07:18.2654456Z     body.netdata-splash .full-h {
2025-04-15T08:07:18.2654530Z       height: 100%;
2025-04-15T08:07:18.2654594Z     }
2025-04-15T08:07:18.2654598Z 
2025-04-15T08:07:18.2654676Z     body.netdata-splash .flex {
2025-04-15T08:07:18.2654744Z       display: flex;
2025-04-15T08:07:18.2654917Z     }
2025-04-15T08:07:18.2654921Z 
2025-04-15T08:07:18.2655003Z     body.netdata-splash .flex-col {
2025-04-15T08:07:18.2655090Z       flex-direction: column;
2025-04-15T08:07:18.2655151Z     }
2025-04-15T08:07:18.2655155Z 
2025-04-15T08:07:18.2655249Z     body.netdata-splash .space-between {
2025-04-15T08:07:18.2655336Z       justify-content: space-between;
2025-04-15T08:07:18.2655398Z     }
2025-04-15T08:07:18.2655401Z 
2025-04-15T08:07:18.2655491Z     body.netdata-splash .align-center {
2025-04-15T08:07:18.2655565Z       align-items: center;
2025-04-15T08:07:18.2655629Z     }
2025-04-15T08:07:18.2655633Z 
2025-04-15T08:07:18.2655717Z     body.netdata-splash .container {
2025-04-15T08:07:18.2655801Z       background: var(--main-bg);
2025-04-15T08:07:18.2655875Z       height: 100vh;
2025-04-15T08:07:18.2655945Z       column-gap: 0;
2025-04-15T08:07:18.2656011Z     }
2025-04-15T08:07:18.2656014Z 
2025-04-15T08:07:18.2656195Z     body.netdata-splash .frame {
2025-04-15T08:07:18.2656275Z       height: 100vh;
2025-04-15T08:07:18.2656336Z     }
2025-04-15T08:07:18.2656339Z 
2025-04-15T08:07:18.2656435Z     body.netdata-splash .light-beam:after {
2025-04-15T08:07:18.2656506Z       content: "";
2025-04-15T08:07:18.2656582Z       position: absolute;
2025-04-15T08:07:18.2656652Z       top: 0;
2025-04-15T08:07:18.2656720Z       bottom: 0;
2025-04-15T08:07:18.2656789Z       left: 0;
2025-04-15T08:07:18.2656855Z       width: 1px;
2025-04-15T08:07:18.2656976Z       box-shadow: 20px 0px 110px 55px rgb(0 255 100 / 10%);
2025-04-15T08:07:18.2657046Z     }
2025-04-15T08:07:18.2657050Z 
2025-04-15T08:07:18.2657135Z     body.netdata-splash #setupGrid {
2025-04-15T08:07:18.2657210Z       opacity: 0.15;
2025-04-15T08:07:18.2657282Z       position: absolute;
2025-04-15T08:07:18.2657472Z       inset: 0;
2025-04-15T08:07:18.2657537Z     }
2025-04-15T08:07:18.2657541Z 
2025-04-15T08:07:18.2657627Z     body.netdata-splash #monitorGrid {
2025-04-15T08:07:18.2657699Z       opacity: 0.4;
2025-04-15T08:07:18.2657778Z       transition: 1s ease;
2025-04-15T08:07:18.2657842Z     }
2025-04-15T08:07:18.2657845Z 
2025-04-15T08:07:18.2657949Z     body.netdata-splash #monitorGrid.hovered {
2025-04-15T08:07:18.2658016Z       opacity: 0.7;
2025-04-15T08:07:18.2658081Z     }
2025-04-15T08:07:18.2658085Z 
2025-04-15T08:07:18.2658177Z     body.netdata-splash #sphereContainer {
2025-04-15T08:07:18.2658251Z       height: calc(100vh);
2025-04-15T08:07:18.2658322Z       position: relative;
2025-04-15T08:07:18.2658380Z     }
2025-04-15T08:07:18.2658388Z 
2025-04-15T08:07:18.2658485Z     body.netdata-splash #sphereContainer h4 {
2025-04-15T08:07:18.2658554Z       display: none;
2025-04-15T08:07:18.2658616Z     }
2025-04-15T08:07:18.2658619Z 
2025-04-15T08:07:18.2658700Z     body.netdata-splash .setup {
2025-04-15T08:07:18.2658774Z       z-index: 10;
2025-04-15T08:07:18.2658847Z       position: relative;
2025-04-15T08:07:18.2658937Z       box-shadow: 20px 0px 160px 5px #012f13c2;
2025-04-15T08:07:18.2659029Z       background: linear-gradient(90deg,
2025-04-15T08:07:18.2659103Z           rgba(0, 0, 0, 1) 0%,
2025-04-15T08:07:18.2659177Z           rgb(0 19 7 / 76%) 100%);
2025-04-15T08:07:18.2659237Z     }
2025-04-15T08:07:18.2659240Z 
2025-04-15T08:07:18.2659324Z     body.netdata-splash .setup>.stats {
2025-04-15T08:07:18.2659396Z       padding: 16px;
2025-04-15T08:07:18.2659466Z       overflow: auto;
2025-04-15T08:07:18.2659533Z       height: 100%;
2025-04-15T08:07:18.2659604Z       position: absolute;
2025-04-15T08:07:18.2659675Z       top: 65px;
2025-04-15T08:07:18.2659737Z       left: 0;
2025-04-15T08:07:18.2659799Z       right: 0;
2025-04-15T08:07:18.2659866Z       bottom: 0;
2025-04-15T08:07:18.2659928Z     }
2025-04-15T08:07:18.2659932Z 
2025-04-15T08:07:18.2660024Z     body.netdata-splash .setup .header {
2025-04-15T08:07:18.2660098Z       position: sticky;
2025-04-15T08:07:18.2660163Z       top: 0;
2025-04-15T08:07:18.2660242Z       padding: 8px 16px;
2025-04-15T08:07:18.2660306Z       margin: 0;
2025-04-15T08:07:18.2660506Z       backdrop-filter: blur(8px);
2025-04-15T08:07:18.2660586Z       background: rgba(0, 0, 0, 0.1);
2025-04-15T08:07:18.2660691Z       /* border-bottom: 1px solid var(--border); */
2025-04-15T08:07:18.2660767Z       display: flex;
2025-04-15T08:07:18.2660840Z       align-items: center;
2025-04-15T08:07:18.2660930Z       justify-content: space-between;
2025-04-15T08:07:18.2660993Z     }
2025-04-15T08:07:18.2660997Z 
2025-04-15T08:07:18.2661087Z     body.netdata-splash .header .title {
2025-04-15T08:07:18.2661155Z       display: flex;
2025-04-15T08:07:18.2661227Z       align-items: center;
2025-04-15T08:07:18.2661296Z       gap: 8px;
2025-04-15T08:07:18.2661355Z     }
2025-04-15T08:07:18.2661359Z 
2025-04-15T08:07:18.2661445Z     body.netdata-splash .header .logo {
2025-04-15T08:07:18.2661517Z       width: 32px;
2025-04-15T08:07:18.2661583Z       height: auto;
2025-04-15T08:07:18.2661644Z     }
2025-04-15T08:07:18.2661648Z 
2025-04-15T08:07:18.2661738Z     body.netdata-splash .splash-message {
2025-04-15T08:07:18.2661819Z       position: absolute;
2025-04-15T08:07:18.2661882Z       inset: 0;
2025-04-15T08:07:18.2661951Z       margin: auto;
2025-04-15T08:07:18.2662018Z       display: flex;
2025-04-15T08:07:18.2662090Z       align-items: center;
2025-04-15T08:07:18.2662170Z       justify-content: center;
2025-04-15T08:07:18.2662248Z       flex-direction: column;
2025-04-15T08:07:18.2662324Z       overflow-y: auto;
2025-04-15T08:07:18.2662385Z     }
2025-04-15T08:07:18.2662389Z 
2025-04-15T08:07:18.2662483Z     body.netdata-splash .splash-message p {
2025-04-15T08:07:18.2662556Z       margin-top: 0;
2025-04-15T08:07:18.2662632Z       margin-bottom: 24px;
2025-04-15T08:07:18.2662712Z       color: var(--text-light);
2025-04-15T08:07:18.2662786Z       filter: blur(0.6px);
2025-04-15T08:07:18.2662934Z     }
2025-04-15T08:07:18.2662942Z 
2025-04-15T08:07:18.2663028Z     body.netdata-splash .tagline {
2025-04-15T08:07:18.2663103Z       position: absolute;
2025-04-15T08:07:18.2663176Z       bottom: 24px;
2025-04-15T08:07:18.2663253Z       font-size: 12px;
2025-04-15T08:07:18.2663333Z       color: var(--text-light);
2025-04-15T08:07:18.2663394Z     }
2025-04-15T08:07:18.2663399Z 
2025-04-15T08:07:18.2663486Z     body.netdata-splash .skip-link {
2025-04-15T08:07:18.2663559Z       font-size: 12px;
2025-04-15T08:07:18.2663637Z       color: var(--text-light);
2025-04-15T08:07:18.2663713Z       text-align: center;
2025-04-15T08:07:18.2663774Z     }
2025-04-15T08:07:18.2663777Z 
2025-04-15T08:07:18.2663871Z     body.netdata-splash .license-link {
2025-04-15T08:07:18.2663945Z       padding: 0 16px 4px;
2025-04-15T08:07:18.2664015Z       font-size: 12px;
2025-04-15T08:07:18.2664093Z       color: var(--text-light);
2025-04-15T08:07:18.2664155Z     }
2025-04-15T08:07:18.2664159Z 
2025-04-15T08:07:18.2664253Z     body.netdata-splash .button {
2025-04-15T08:07:18.2664325Z       padding: 8px 12px;
2025-04-15T08:07:18.2664397Z       border-radius: 2px;
2025-04-15T08:07:18.2664469Z       font-size: 16px;
2025-04-15T08:07:18.2664543Z       min-width: 88px;
2025-04-15T08:07:18.2664618Z       text-align: center;
2025-04-15T08:07:18.2664688Z       cursor: pointer;
2025-04-15T08:07:18.2664764Z       transition: 250ms ease;
2025-04-15T08:07:18.2664837Z       border: none;
2025-04-15T08:07:18.2664898Z     }
2025-04-15T08:07:18.2664901Z 
2025-04-15T08:07:18.2665001Z     body.netdata-splash .button-primary {
2025-04-15T08:07:18.2665081Z       background: var(--primary);
2025-04-15T08:07:18.2665163Z       color: var(--text-light);
2025-04-15T08:07:18.2665225Z     }
2025-04-15T08:07:18.2665228Z 
2025-04-15T08:07:18.2665330Z     body.netdata-splash .button-primary:hover {
2025-04-15T08:07:18.2665415Z       background: var(--highlight);
2025-04-15T08:07:18.2665476Z     }
2025-04-15T08:07:18.2665480Z 
2025-04-15T08:07:18.2665573Z     body.netdata-splash a.button {
2025-04-15T08:07:18.2665646Z       color: var(--text-dark);
2025-04-15T08:07:18.2665710Z     }
2025-04-15T08:07:18.2665714Z 
2025-04-15T08:07:18.2665800Z     body.netdata-splash .button-ghost {
2025-04-15T08:07:18.2665972Z       background: transparent;
2025-04-15T08:07:18.2666052Z       color: var(--primary);
2025-04-15T08:07:18.2666209Z     }
2025-04-15T08:07:18.2666213Z 
2025-04-15T08:07:18.2666321Z     body.netdata-splash .button-ghost:hover {
2025-04-15T08:07:18.2666396Z       color: var(--highlight);
2025-04-15T08:07:18.2666456Z     }
2025-04-15T08:07:18.2666464Z 
2025-04-15T08:07:18.2666549Z     body.netdata-splash .clear-button {
2025-04-15T08:07:18.2666619Z       font-size: 12px;
2025-04-15T08:07:18.2666690Z       padding: 0;
2025-04-15T08:07:18.2666758Z       min-width: auto;
2025-04-15T08:07:18.2666825Z     }
2025-04-15T08:07:18.2666828Z 
2025-04-15T08:07:18.2666909Z     body.netdata-splash .tabs {
2025-04-15T08:07:18.2666977Z       display: flex;
2025-04-15T08:07:18.2667060Z       align-items: center;
2025-04-15T08:07:18.2667134Z       justify-content: center;
2025-04-15T08:07:18.2667226Z       border-top: 1px solid var(--border);
2025-04-15T08:07:18.2667306Z       backdrop-filter: blur(4px);
2025-04-15T08:07:18.2667373Z     }
2025-04-15T08:07:18.2667376Z 
2025-04-15T08:07:18.2667465Z     body.netdata-splash button.tab {
2025-04-15T08:07:18.2667546Z       background: rgba(0, 0, 0, 0.2);
2025-04-15T08:07:18.2667616Z       border: none;
2025-04-15T08:07:18.2667689Z       color: var(--menu-item);
2025-04-15T08:07:18.2667765Z       padding: 8px 0 24px;
2025-04-15T08:07:18.2667835Z       border-left: 0;
2025-04-15T08:07:18.2667930Z       cursor: pointer;
2025-04-15T08:07:18.2668011Z       backdrop-filter: blur(2px);
2025-04-15T08:07:18.2668079Z       width: 100%;
2025-04-15T08:07:18.2668153Z       font-size: 12px;
2025-04-15T08:07:18.2668219Z       display: flex;
2025-04-15T08:07:18.2668295Z       flex-direction: column;
2025-04-15T08:07:18.2668370Z       align-items: center;
2025-04-15T08:07:18.2668556Z       gap: 8px;
2025-04-15T08:07:18.2668619Z     }
2025-04-15T08:07:18.2668624Z 
2025-04-15T08:07:18.2668733Z     body.netdata-splash button.tab:first-child {
2025-04-15T08:07:18.2668833Z       /* border-left: 1px solid var(--primary); */
2025-04-15T08:07:18.2668903Z     }
2025-04-15T08:07:18.2668907Z 
2025-04-15T08:07:18.2669031Z     body.netdata-splash button.tab:not(.active):hover {
2025-04-15T08:07:18.2669110Z       color: var(--tab-hover);
2025-04-15T08:07:18.2669183Z       transition: 100ms ease;
2025-04-15T08:07:18.2669246Z     }
2025-04-15T08:07:18.2669250Z 
2025-04-15T08:07:18.2669344Z     body.netdata-splash button.tab.active {
2025-04-15T08:07:18.2669421Z       background: transparent;
2025-04-15T08:07:18.2669521Z       /* border-bottom: 1px solid transparent; */
2025-04-15T08:07:18.2669599Z       backdrop-filter: blur(0);
2025-04-15T08:07:18.2669676Z       color: var(--tab-active);
2025-04-15T08:07:18.2669744Z       cursor: default;
2025-04-15T08:07:18.2669814Z     }
2025-04-15T08:07:18.2669818Z 
2025-04-15T08:07:18.2669900Z     body.netdata-splash .tab-icon {
2025-04-15T08:07:18.2669967Z       width: 24px;
2025-04-15T08:07:18.2670039Z       height: 24px;
2025-04-15T08:07:18.2670104Z     }
2025-04-15T08:07:18.2670108Z 
2025-04-15T08:07:18.2670196Z     body.netdata-splash .tab-icon svg {
2025-04-15T08:07:18.2670264Z       height: 100%;
2025-04-15T08:07:18.2670329Z       width: 100%;
2025-04-15T08:07:18.2670393Z     }
2025-04-15T08:07:18.2670397Z 
2025-04-15T08:07:18.2670495Z     body.netdata-splash .tab-icon svg path {
2025-04-15T08:07:18.2670576Z       fill: var(--menu-item);
2025-04-15T08:07:18.2670649Z       transition: 100ms ease;
2025-04-15T08:07:18.2670713Z     }
2025-04-15T08:07:18.2670717Z 
2025-04-15T08:07:18.2670843Z     body.netdata-splash .tab.active .tab-icon svg path {
2025-04-15T08:07:18.2670918Z       fill: var(--tab-active);
2025-04-15T08:07:18.2670981Z     }
2025-04-15T08:07:18.2670985Z 
2025-04-15T08:07:18.2671075Z     button.tab:not(.active):hover svg path {
2025-04-15T08:07:18.2671158Z       fill: var(--tab-hover);
2025-04-15T08:07:18.2671218Z     }
2025-04-15T08:07:18.2671222Z 
2025-04-15T08:07:18.2671308Z     body.netdata-splash .panel {
2025-04-15T08:07:18.2671505Z       background: var(--panel-bg);
2025-04-15T08:07:18.2671576Z       padding: 16px;
2025-04-15T08:07:18.2671654Z       border-radius: 4px;
2025-04-15T08:07:18.2671736Z       border: 1px solid var(--border);
2025-04-15T08:07:18.2671817Z       backdrop-filter: blur(0px);
2025-04-15T08:07:18.2671877Z     }
2025-04-15T08:07:18.2671881Z 
2025-04-15T08:07:18.2671964Z     body.netdata-splash .panel-tab {
2025-04-15T08:07:18.2672043Z       border-radius: 0 0 4px 4px;
2025-04-15T08:07:18.2672111Z       border-top: 0;
2025-04-15T08:07:18.2672202Z       border-left: 1px solid var(--primary);
2025-04-15T08:07:18.2672291Z       border-bottom: 1px solid var(--primary);
2025-04-15T08:07:18.2672385Z       border-right: 1px solid var(--primary);
2025-04-15T08:07:18.2672459Z       padding: 4px 24px;
2025-04-15T08:07:18.2672533Z       display: none;
2025-04-15T08:07:18.2672604Z       height: 70%;
2025-04-15T08:07:18.2672673Z       overflow: auto;
2025-04-15T08:07:18.2672736Z     }
2025-04-15T08:07:18.2672739Z 
2025-04-15T08:07:18.2672827Z     body.netdata-splash .data-tab {
2025-04-15T08:07:18.2672896Z       display: block;
2025-04-15T08:07:18.2672969Z       opacity: 0;
2025-04-15T08:07:18.2673041Z       transition: 800ms ease;
2025-04-15T08:07:18.2673121Z       pointer-events: none;
2025-04-15T08:07:18.2673181Z     }
2025-04-15T08:07:18.2673185Z 
2025-04-15T08:07:18.2673276Z     body.netdata-splash .data-tab.active {
2025-04-15T08:07:18.2673348Z       opacity: 1;
2025-04-15T08:07:18.2673422Z       pointer-events: all;
2025-04-15T08:07:18.2673486Z     }
2025-04-15T08:07:18.2673490Z 
2025-04-15T08:07:18.2673588Z     body.netdata-splash .data-tab-container {
2025-04-15T08:07:18.2673665Z       position: absolute;
2025-04-15T08:07:18.2673728Z       left: 0;
2025-04-15T08:07:18.2673791Z       right: 0;
2025-04-15T08:07:18.2673950Z       top: 45%;
2025-04-15T08:07:18.2674018Z       /* height: 40vh; */
2025-04-15T08:07:18.2674080Z     }
2025-04-15T08:07:18.2674084Z 
2025-04-15T08:07:18.2674176Z     body.netdata-splash .system-container {
2025-04-15T08:07:18.2674248Z       overflow: auto;
2025-04-15T08:07:18.2674328Z       height: calc(100% - 330px);
2025-04-15T08:07:18.2674401Z       padding: 0 24px 24px;
2025-04-15T08:07:18.2674477Z       margin: 0 -24px;
2025-04-15T08:07:18.2674591Z       scrollbar-color: var(--scrollbar-thumb) #293030;
2025-04-15T08:07:18.2674674Z       scrollbar-width: thin;
2025-04-15T08:07:18.2674735Z     }
2025-04-15T08:07:18.2674739Z 
2025-04-15T08:07:18.2674873Z     body.netdata-splash .data-tab-container .system>div {
2025-04-15T08:07:18.2674947Z       display: flex;
2025-04-15T08:07:18.2675024Z       /* margin-bottom: 24px; */
2025-04-15T08:07:18.2675111Z       /* backdrop-filter: blur(1px); */
2025-04-15T08:07:18.2675178Z       height: auto;
2025-04-15T08:07:18.2675250Z       min-height: 40px;
2025-04-15T08:07:18.2675329Z       overflow: hidden;
2025-04-15T08:07:18.2675388Z     }
2025-04-15T08:07:18.2675392Z 
2025-04-15T08:07:18.2675546Z     body.netdata-splash .data-tab-container .system .key-value {
2025-04-15T08:07:18.2675627Z       flex-direction: column;
2025-04-15T08:07:18.2675695Z       gap: 8px;
2025-04-15T08:07:18.2675772Z       align-items: flex-start;
2025-04-15T08:07:18.2675849Z       justify-content: start;
2025-04-15T08:07:18.2675917Z       width: 100%;
2025-04-15T08:07:18.2675984Z       padding: 0;
2025-04-15T08:07:18.2676047Z     }
2025-04-15T08:07:18.2676051Z 
2025-04-15T08:07:18.2676349Z     body.netdata-splash .data-tab-container .system .key-value span:nth-child(1) {
2025-04-15T08:07:18.2676426Z       padding: 8px 16px;
2025-04-15T08:07:18.2676520Z       border-bottom: 1px solid var(--border);
2025-04-15T08:07:18.2676585Z       width: 100%;
2025-04-15T08:07:18.2676656Z       color: #8eae9b;
2025-04-15T08:07:18.2676735Z       background: rgba(0, 0, 0, 0.8);
2025-04-15T08:07:18.2676805Z     }
2025-04-15T08:07:18.2676809Z 
2025-04-15T08:07:18.2677000Z     body.netdata-splash .data-tab-container .system .key-value span:nth-child(2) {
2025-04-15T08:07:18.2677074Z       /* font-size: 16px; */
2025-04-15T08:07:18.2677293Z       padding: 4px 16px 12px;
2025-04-15T08:07:18.2677366Z       text-align: left;
2025-04-15T08:07:18.2677441Z       color: var(--accent);
2025-04-15T08:07:18.2677501Z     }
2025-04-15T08:07:18.2677505Z 
2025-04-15T08:07:18.2677597Z     body.netdata-splash .panel:hover h4 {
2025-04-15T08:07:18.2677676Z       color: var(--highlight);
2025-04-15T08:07:18.2677736Z     }
2025-04-15T08:07:18.2677740Z 
2025-04-15T08:07:18.2677833Z     body.netdata-splash .hide-title h4 {
2025-04-15T08:07:18.2677905Z       visibility: hidden;
2025-04-15T08:07:18.2677968Z     }
2025-04-15T08:07:18.2677972Z 
2025-04-15T08:07:18.2678081Z     body.netdata-splash .no-key span:first-child {
2025-04-15T08:07:18.2678148Z       display: none;
2025-04-15T08:07:18.2678212Z     }
2025-04-15T08:07:18.2678221Z 
2025-04-15T08:07:18.2678307Z     body.netdata-splash .no-title h4 {
2025-04-15T08:07:18.2678377Z       display: none;
2025-04-15T08:07:18.2678439Z     }
2025-04-15T08:07:18.2678443Z 
2025-04-15T08:07:18.2678537Z     body.netdata-splash .absolute-center {
2025-04-15T08:07:18.2678615Z       position: absolute;
2025-04-15T08:07:18.2678679Z       inset: 0;
2025-04-15T08:07:18.2678751Z       margin: auto;
2025-04-15T08:07:18.2678812Z     }
2025-04-15T08:07:18.2678816Z 
2025-04-15T08:07:18.2678904Z     body.netdata-splash .align-end {
2025-04-15T08:07:18.2678981Z       align-content: flex-end;
2025-04-15T08:07:18.2679040Z     }
2025-04-15T08:07:18.2679047Z 
2025-04-15T08:07:18.2679150Z     body.netdata-splash .panel-tab .separator {
2025-04-15T08:07:18.2679239Z       border-bottom: 1px solid var(--border);
2025-04-15T08:07:18.2679317Z       margin: 8px -24px;
2025-04-15T08:07:18.2679377Z     }
2025-04-15T08:07:18.2679381Z 
2025-04-15T08:07:18.2679470Z     body.netdata-splash .section-image {
2025-04-15T08:07:18.2679653Z       height: 16px;
2025-04-15T08:07:18.2679719Z       width: 16px;
2025-04-15T08:07:18.2679782Z     }
2025-04-15T08:07:18.2679785Z 
2025-04-15T08:07:18.2679880Z     body.netdata-splash .section-image svg {
2025-04-15T08:07:18.2679957Z       width: 100%;
2025-04-15T08:07:18.2680025Z       height: 100%;
2025-04-15T08:07:18.2680087Z     }
2025-04-15T08:07:18.2680094Z 
2025-04-15T08:07:18.2680184Z     body.netdata-splash .section-title {
2025-04-15T08:07:18.2680258Z       font-size: 14px;
2025-04-15T08:07:18.2680336Z       font-weight: bold;
2025-04-15T08:07:18.2680404Z       margin: 8px 0;
2025-04-15T08:07:18.2680487Z       display: inline-block;
2025-04-15T08:07:18.2680548Z     }
2025-04-15T08:07:18.2680552Z 
2025-04-15T08:07:18.2680664Z     body.netdata-splash .sphere-stats-container {
2025-04-15T08:07:18.2680732Z       width: 80%;
2025-04-15T08:07:18.2680799Z       height: 100vh;
2025-04-15T08:07:18.2680869Z       display: flex;
2025-04-15T08:07:18.2680943Z       align-items: center;
2025-04-15T08:07:18.2681022Z       flex-direction: column;
2025-04-15T08:07:18.2681102Z       justify-content: center;
2025-04-15T08:07:18.2681177Z       margin-bottom: 10vmin;
2025-04-15T08:07:18.2681246Z       gap: 16px;
2025-04-15T08:07:18.2681312Z     }
2025-04-15T08:07:18.2681315Z 
2025-04-15T08:07:18.2681402Z     body.netdata-splash .key-value {
2025-04-15T08:07:18.2681482Z       font-size: var(--font-small);
2025-04-15T08:07:18.2681550Z       display: flex;
2025-04-15T08:07:18.2681639Z       justify-content: space-between;
2025-04-15T08:07:18.2681711Z       align-items: center;
2025-04-15T08:07:18.2681787Z       padding: 8px 0;
2025-04-15T08:07:18.2681866Z       color: var(--key-value-table);
2025-04-15T08:07:18.2681926Z     }
2025-04-15T08:07:18.2681930Z 
2025-04-15T08:07:18.2682011Z     /* .key-value:nth-child(2n) {
2025-04-15T08:07:18.2682089Z       background: var(--row-2n);
2025-04-15T08:07:18.2682156Z     } */
2025-04-15T08:07:18.2682248Z     body.netdata-splash .key-value:hover {
2025-04-15T08:07:18.2682334Z       color: var(--highlight);
2025-04-15T08:07:18.2682394Z     }
2025-04-15T08:07:18.2682398Z 
2025-04-15T08:07:18.2682512Z     body.netdata-splash .key-value span:nth-child(2) {
2025-04-15T08:07:18.2682588Z       text-align: right;
2025-04-15T08:07:18.2682735Z     }
2025-04-15T08:07:18.2682739Z 
2025-04-15T08:07:18.2682839Z     body.netdata-splash .metrics-container {
2025-04-15T08:07:18.2682910Z       position: absolute;
2025-04-15T08:07:18.2682975Z       top: 150px;
2025-04-15T08:07:18.2683039Z     }
2025-04-15T08:07:18.2683043Z 
2025-04-15T08:07:18.2683163Z     body.netdata-splash .collected-metrics .key-value {
2025-04-15T08:07:18.2683242Z       flex-direction: column;
2025-04-15T08:07:18.2683315Z       align-items: center;
2025-04-15T08:07:18.2683393Z       justify-content: center;
2025-04-15T08:07:18.2683466Z       background: none;
2025-04-15T08:07:18.2683538Z       text-align: center;
2025-04-15T08:07:18.2683622Z       text-transform: uppercase;
2025-04-15T08:07:18.2683693Z       font-size: 12px;
2025-04-15T08:07:18.2683773Z       color: var(--text);
2025-04-15T08:07:18.2683833Z     }
2025-04-15T08:07:18.2683837Z 
2025-04-15T08:07:18.2684013Z     body.netdata-splash .collected-metrics .key-value span:nth-child(2) {
2025-04-15T08:07:18.2684092Z       font-size: 7vmin;
2025-04-15T08:07:18.2684162Z       font-weight: 700;
2025-04-15T08:07:18.2684239Z       color: rgb(254 254 254 / 80%);
2025-04-15T08:07:18.2684310Z       filter: blur(0.8px);
2025-04-15T08:07:18.2684382Z       text-align: center;
2025-04-15T08:07:18.2684442Z     }
2025-04-15T08:07:18.2684445Z 
2025-04-15T08:07:18.2684532Z     #server .key-value span:first-child,
2025-04-15T08:07:18.2684626Z     #package .key-value span:first-child {
2025-04-15T08:07:18.2684694Z       display: none;
2025-04-15T08:07:18.2684756Z     }
2025-04-15T08:07:18.2684760Z 
2025-04-15T08:07:18.2684844Z     #server .key-value span:nth-child(2),
2025-04-15T08:07:18.2684932Z     #package .key-value span:nth-child(2) {
2025-04-15T08:07:18.2685008Z       font-size: 12px;
2025-04-15T08:07:18.2685169Z       color: var(--primary);
2025-04-15T08:07:18.2685248Z       font-family: monospace;
2025-04-15T08:07:18.2685310Z     }
2025-04-15T08:07:18.2685314Z 
2025-04-15T08:07:18.2685406Z     body.netdata-splash .head-summary {
2025-04-15T08:07:18.2685477Z       left: 0;
2025-04-15T08:07:18.2685545Z       padding: 16px;
2025-04-15T08:07:18.2685616Z       right: 0;
2025-04-15T08:07:18.2685682Z       display: flex;
2025-04-15T08:07:18.2685759Z       flex-direction: row;
2025-04-15T08:07:18.2685844Z       justify-content: space-between;
2025-04-15T08:07:18.2685903Z     }
2025-04-15T08:07:18.2685907Z 
2025-04-15T08:07:18.2685992Z     body.netdata-splash .module {
2025-04-15T08:07:18.2686171Z       border: 2px solid var(--border);
2025-04-15T08:07:18.2686251Z       border-radius: 16px;
2025-04-15T08:07:18.2686404Z       box-shadow: -1px 1px var(--main-bg), -2px 2px var(--main-bg),
2025-04-15T08:07:18.2686523Z         -3px 3px var(--border), -4px 4px 24px var(--border);
2025-04-15T08:07:18.2686611Z       height: var(--module-height);
2025-04-15T08:07:18.2686684Z       overflow: auto;
2025-04-15T08:07:18.2686803Z       scrollbar-color: var(--scrollbar-thumb) #293030;
2025-04-15T08:07:18.2686880Z       scrollbar-width: thin;
2025-04-15T08:07:18.2686973Z       /* backdrop-filter: blur(2px); */
2025-04-15T08:07:18.2687033Z     }
2025-04-15T08:07:18.2687036Z 
2025-04-15T08:07:18.2687128Z     body.netdata-splash .module-header {
2025-04-15T08:07:18.2687199Z       display: flex;
2025-04-15T08:07:18.2687270Z       align-items: center;
2025-04-15T08:07:18.2687339Z       gap: 4px;
2025-04-15T08:07:18.2687412Z       padding: 4px 16px;
2025-04-15T08:07:18.2687496Z       background: rgba(0, 0, 0, 0.8);
2025-04-15T08:07:18.2687574Z       border-radius: 16px 16px 0 0;
2025-04-15T08:07:18.2687642Z       color: #8eae9b;
2025-04-15T08:07:18.2687737Z       border-bottom: 1px solid var(--border);
2025-04-15T08:07:18.2687809Z       position: sticky;
2025-04-15T08:07:18.2687876Z       top: 0;
2025-04-15T08:07:18.2687942Z     }
2025-04-15T08:07:18.2687946Z 
2025-04-15T08:07:18.2688054Z     body.netdata-splash .module-header svg path {
2025-04-15T08:07:18.2688132Z       fill: var(--accent);
2025-04-15T08:07:18.2688193Z     }
2025-04-15T08:07:18.2688314Z 
2025-04-15T08:07:18.2688421Z     body.netdata-splash .modules-container {
2025-04-15T08:07:18.2688494Z       max-height: 100%;
2025-04-15T08:07:18.2688570Z       text-align: center;
2025-04-15T08:07:18.2688639Z       margin: auto;
2025-04-15T08:07:18.2688712Z       column-gap: 24px;
2025-04-15T08:07:18.2688776Z     }
2025-04-15T08:07:18.2688780Z 
2025-04-15T08:07:18.2688873Z     body.netdata-splash .module-content {
2025-04-15T08:07:18.2688950Z       padding: 4px 16px;
2025-04-15T08:07:18.2689011Z     }
2025-04-15T08:07:18.2689015Z 
2025-04-15T08:07:18.2689119Z     body.netdata-splash .db-metrics-container {
2025-04-15T08:07:18.2689192Z       display: flex;
2025-04-15T08:07:18.2689268Z       justify-content: center;
2025-04-15T08:07:18.2689341Z       gap: 16px;
2025-04-15T08:07:18.2689406Z     }
2025-04-15T08:07:18.2689410Z 
2025-04-15T08:07:18.2689509Z     body.netdata-splash .db-metrics-blocks {
2025-04-15T08:07:18.2689581Z       /* display: flex; */
2025-04-15T08:07:18.2689660Z       /* flex-direction: column; */
2025-04-15T08:07:18.2689745Z       /* align-items: center;
2025-04-15T08:07:18.2689823Z       justify-content: center;
2025-04-15T08:07:18.2689895Z       gap: 24px; */
2025-04-15T08:07:18.2689976Z       height: var(--module-height);
2025-04-15T08:07:18.2690044Z       width: 100%;
2025-04-15T08:07:18.2690109Z     }
2025-04-15T08:07:18.2690113Z 
2025-04-15T08:07:18.2690188Z     /* .db-metrics-block {
2025-04-15T08:07:18.2690261Z       display: flex;
2025-04-15T08:07:18.2690337Z       flex-direction: column;
2025-04-15T08:07:18.2690413Z       text-align: center;
2025-04-15T08:07:18.2690484Z       min-width: 15vmax;
2025-04-15T08:07:18.2690554Z       height: 150px;
2025-04-15T08:07:18.2690632Z       padding: 0 24px;
2025-04-15T08:07:18.2690695Z     } */
2025-04-15T08:07:18.2690950Z     body.netdata-splash .db-metrics-blocks .module-content {
2025-04-15T08:07:18.2691021Z       padding: 0;
2025-04-15T08:07:18.2691082Z     }
2025-04-15T08:07:18.2691086Z 
2025-04-15T08:07:18.2691179Z     /* .db-metrics-block:not(:last-child) {
2025-04-15T08:07:18.2691274Z       border-right: 1px solid var(--border);
2025-04-15T08:07:18.2691337Z     } */
2025-04-15T08:07:18.2691431Z     body.netdata-splash .db-metrics-title {
2025-04-15T08:07:18.2691502Z       font-size: 1.5vmin;
2025-04-15T08:07:18.2691570Z     }
2025-04-15T08:07:18.2691574Z 
2025-04-15T08:07:18.2691681Z     body.netdata-splash .db-metrics-block-title {
2025-04-15T08:07:18.2691754Z       font-size: 14px;
2025-04-15T08:07:18.2691827Z       padding: 8px 16px;
2025-04-15T08:07:18.2691896Z       z-index: 100;
2025-04-15T08:07:18.2691967Z       font-weight: bold;
2025-04-15T08:07:18.2692035Z       color: #fff;
2025-04-15T08:07:18.2692100Z     }
2025-04-15T08:07:18.2692104Z 
2025-04-15T08:07:18.2692205Z     body.netdata-splash .db-metrics .key-value {
2025-04-15T08:07:18.2692283Z       display: flex;
2025-04-15T08:07:18.2692359Z       flex-direction: column;
2025-04-15T08:07:18.2692437Z       align-items: flex-start;
2025-04-15T08:07:18.2692503Z     }
2025-04-15T08:07:18.2692511Z 
2025-04-15T08:07:18.2692665Z     body.netdata-splash .db-metrics .key-value span:nth-child(2) {
2025-04-15T08:07:18.2692740Z       font-size: 12px;
2025-04-15T08:07:18.2692814Z       color: var(--accent);
2025-04-15T08:07:18.2692896Z       filter: blur(0.5px);
2025-04-15T08:07:18.2692969Z       text-align: center;
2025-04-15T08:07:18.2693029Z     }
2025-04-15T08:07:18.2693033Z 
2025-04-15T08:07:18.2693124Z     body.netdata-splash .db-metrics {
2025-04-15T08:07:18.2693198Z       padding: 8px 16px;
2025-04-15T08:07:18.2693291Z       border-bottom: 1px solid var(--border);
2025-04-15T08:07:18.2693354Z     }
2025-04-15T08:07:18.2693358Z 
2025-04-15T08:07:18.2693443Z     body.netdata-splash .disk-stats {
2025-04-15T08:07:18.2693521Z       /* border-bottom: 0; */
2025-04-15T08:07:18.2693595Z       padding: 16px;
2025-04-15T08:07:18.2693660Z     }
2025-04-15T08:07:18.2693664Z 
2025-04-15T08:07:18.2693810Z     body.netdata-splash .module-content:last-child .disk-stats {
2025-04-15T08:07:18.2693986Z       padding-bottom: 112px;
2025-04-15T08:07:18.2694048Z     }
2025-04-15T08:07:18.2694052Z 
2025-04-15T08:07:18.2694149Z     body.netdata-splash .disk-max .key-value {
2025-04-15T08:07:18.2694231Z       flex-direction: row;
2025-04-15T08:07:18.2694302Z       font-size: 12px;
2025-04-15T08:07:18.2694390Z       justify-content: space-between;
2025-04-15T08:07:18.2694461Z       padding: 2px 0;
2025-04-15T08:07:18.2694522Z     }
2025-04-15T08:07:18.2694526Z 
2025-04-15T08:07:18.2694668Z     body.netdata-splash .disk-max .key-value span:nth-child(2) {
2025-04-15T08:07:18.2694738Z       font-size: 12px;
2025-04-15T08:07:18.2694810Z       display: flex;
2025-04-15T08:07:18.2694893Z       justify-content: space-between;
2025-04-15T08:07:18.2694963Z       width: 100%;
2025-04-15T08:07:18.2695033Z     }
2025-04-15T08:07:18.2695037Z 
2025-04-15T08:07:18.2695138Z     body.netdata-splash .disk-used .key-value {
2025-04-15T08:07:18.2695213Z       padding: 2px 0;
2025-04-15T08:07:18.2695278Z     }
2025-04-15T08:07:18.2695286Z 
2025-04-15T08:07:18.2695458Z     body.netdata-splash .disk-max .key-value span:nth-child(2):before {
2025-04-15T08:07:18.2695536Z       content: "Disk Size";
2025-04-15T08:07:18.2695605Z     }
2025-04-15T08:07:18.2695608Z 
2025-04-15T08:07:18.2695773Z     body.netdata-splash .disk-used .key-value span:nth-child(2):before {
2025-04-15T08:07:18.2695846Z       content: "Used ";
2025-04-15T08:07:18.2695912Z     }
2025-04-15T08:07:18.2695916Z 
2025-04-15T08:07:18.2696161Z     body.netdata-splash .disk-used .key-value span:nth-child(2) {
2025-04-15T08:07:18.2696240Z       font-size: 12px;
2025-04-15T08:07:18.2696308Z       display: flex;
2025-04-15T08:07:18.2696397Z       justify-content: space-between;
2025-04-15T08:07:18.2696464Z       width: 100%;
2025-04-15T08:07:18.2696662Z     }
2025-04-15T08:07:18.2696666Z 
2025-04-15T08:07:18.2696825Z     body.netdata-splash .db-metrics .key-value span:first-child {
2025-04-15T08:07:18.2696897Z       font-size: 12px;
2025-04-15T08:07:18.2696976Z       color: var(--text);
2025-04-15T08:07:18.2697043Z     }
2025-04-15T08:07:18.2697047Z 
2025-04-15T08:07:18.2697154Z     body.netdata-splash .percentage-container {
2025-04-15T08:07:18.2697225Z       width: 100%;
2025-04-15T08:07:18.2697303Z       background: transparent;
2025-04-15T08:07:18.2697391Z       border: 1px solid var(--primary);
2025-04-15T08:07:18.2697463Z       height: 16px;
2025-04-15T08:07:18.2697542Z       border-radius: 1px;
2025-04-15T08:07:18.2697616Z       position: relative;
2025-04-15T08:07:18.2697677Z     }
2025-04-15T08:07:18.2697681Z 
2025-04-15T08:07:18.2697780Z     body.netdata-splash .percentage-bar {
2025-04-15T08:07:18.2697856Z       background: #016a2b94;
2025-04-15T08:07:18.2697934Z       position: absolute;
2025-04-15T08:07:18.2698000Z       bottom: 0;
2025-04-15T08:07:18.2698069Z       top: 0;
2025-04-15T08:07:18.2698138Z       left: 0;
2025-04-15T08:07:18.2698220Z       backdrop-filter: blur(1px);
2025-04-15T08:07:18.2698283Z     }
2025-04-15T08:07:18.2698287Z 
2025-04-15T08:07:18.2698386Z     body.netdata-splash .percentage-text {
2025-04-15T08:07:18.2698459Z       position: absolute;
2025-04-15T08:07:18.2698529Z       font-size: 12px;
2025-04-15T08:07:18.2698592Z       top: 0;
2025-04-15T08:07:18.2698665Z       padding: 0 2px;
2025-04-15T08:07:18.2698737Z       color: var(--accent);
2025-04-15T08:07:18.2698800Z     }
2025-04-15T08:07:18.2698804Z 
2025-04-15T08:07:18.2698893Z     body.netdata-splash .data-tab-table {
2025-04-15T08:07:18.2698961Z       padding: 16px;
2025-04-15T08:07:18.2699031Z       width: 400px;
2025-04-15T08:07:18.2699114Z       height: var(--module-height);
2025-04-15T08:07:18.2699188Z       margin: auto;
2025-04-15T08:07:18.2699249Z     }
2025-04-15T08:07:18.2699253Z 
2025-04-15T08:07:18.2699365Z     body.netdata-splash .node-info-container {
2025-04-15T08:07:18.2699441Z       display: flex;
2025-04-15T08:07:18.2699520Z       flex-direction: column;
2025-04-15T08:07:18.2699591Z       width: 100%;
2025-04-15T08:07:18.2699670Z       justify-content: center;
2025-04-15T08:07:18.2699866Z       align-items: center;
2025-04-15T08:07:18.2699933Z       gap: 8px;
2025-04-15T08:07:18.2699997Z     }
2025-04-15T08:07:18.2700001Z 
2025-04-15T08:07:18.2700095Z     body.netdata-splash .node-info {
2025-04-15T08:07:18.2700164Z       display: flex;
2025-04-15T08:07:18.2700243Z       justify-content: center;
2025-04-15T08:07:18.2700308Z       width: 100%;
2025-04-15T08:07:18.2700373Z       gap: 8px;
2025-04-15T08:07:18.2700450Z       flex-direction: row;
2025-04-15T08:07:18.2700512Z     }
2025-04-15T08:07:18.2700516Z 
2025-04-15T08:07:18.2700641Z     body.netdata-splash .node-info-container .title {
2025-04-15T08:07:18.2700714Z       font-size: 12px;
2025-04-15T08:07:18.2700778Z     }
2025-04-15T08:07:18.2700782Z 
2025-04-15T08:07:18.2700883Z     body.netdata-splash .node-info .key-value {
2025-04-15T08:07:18.2700977Z       border: 1px solid var(--highlight);
2025-04-15T08:07:18.2701052Z       padding: 2px 8px;
2025-04-15T08:07:18.2701126Z       border-radius: 4px;
2025-04-15T08:07:18.2701206Z       font-size: 12px;
2025-04-15T08:07:18.2701281Z       color: var(--highlight);
2025-04-15T08:07:18.2701348Z       height: 20px;
2025-04-15T08:07:18.2701411Z     }
2025-04-15T08:07:18.2701415Z 
2025-04-15T08:07:18.2701563Z     body.netdata-splash .node-info .key-value span:first-child {
2025-04-15T08:07:18.2701642Z       margin-right: 4px;
2025-04-15T08:07:18.2701715Z       font-weight: normal;
2025-04-15T08:07:18.2701778Z     }
2025-04-15T08:07:18.2701782Z 
2025-04-15T08:07:18.2701871Z     body.netdata-splash .availability {
2025-04-15T08:07:18.2701944Z       text-align: right;
2025-04-15T08:07:18.2702025Z       font-family: monospace;
2025-04-15T08:07:18.2702095Z       display: flex;
2025-04-15T08:07:18.2702176Z       flex-direction: column;
2025-04-15T08:07:18.2702260Z       text-transform: capitalize;
2025-04-15T08:07:18.2702436Z       padding: 8px 16px;
2025-04-15T08:07:18.2702508Z       color: #fff;
2025-04-15T08:07:18.2702580Z       font-size: 12px;
2025-04-15T08:07:18.2702646Z     }
2025-04-15T08:07:18.2702655Z 
2025-04-15T08:07:18.2702765Z     body.netdata-splash .availability .key-valye {
2025-04-15T08:07:18.2702839Z       padding: 4px 0;
2025-04-15T08:07:18.2702899Z     }
2025-04-15T08:07:18.2702903Z 
2025-04-15T08:07:18.2702991Z     body.netdata-splash .sub-module {
2025-04-15T08:07:18.2703061Z       width: 100%;
2025-04-15T08:07:18.2703122Z     }
2025-04-15T08:07:18.2703126Z 
2025-04-15T08:07:18.2703214Z     body.netdata-splash .hardware {
2025-04-15T08:07:18.2703289Z       flex-direction: column;
2025-04-15T08:07:18.2703349Z     }
2025-04-15T08:07:18.2703360Z 
2025-04-15T08:07:18.2703471Z     body.netdata-splash .hardware .module-content {
2025-04-15T08:07:18.2703540Z       padding: 0;
2025-04-15T08:07:18.2703611Z       display: flex;
2025-04-15T08:07:18.2703671Z     }
2025-04-15T08:07:18.2703680Z 
2025-04-15T08:07:18.2703816Z     body.netdata-splash .module.has-title .section-title {
2025-04-15T08:07:18.2703893Z       padding-bottom: 12px;
2025-04-15T08:07:18.2703965Z       margin-bottom: 0;
2025-04-15T08:07:18.2704037Z     }
2025-04-15T08:07:18.2704041Z 
2025-04-15T08:07:18.2704124Z     body.netdata-splash .h-auto {
2025-04-15T08:07:18.2704195Z       height: auto;
2025-04-15T08:07:18.2704256Z     }
2025-04-15T08:07:18.2704260Z 
2025-04-15T08:07:18.2704344Z     body.netdata-splash .none {
2025-04-15T08:07:18.2704413Z       display: none;
2025-04-15T08:07:18.2704472Z     }
2025-04-15T08:07:18.2704476Z 
2025-04-15T08:07:18.2704572Z     body.netdata-splash .claim-message {
2025-04-15T08:07:18.2704646Z       position: absolute;
2025-04-15T08:07:18.2704713Z       top: 0;
2025-04-15T08:07:18.2704779Z       left: 0;
2025-04-15T08:07:18.2704846Z       right: 0;
2025-04-15T08:07:18.2704921Z       margin: auto;
2025-04-15T08:07:18.2704992Z       padding: 0 24px;
2025-04-15T08:07:18.2705076Z       overflow-y: auto;
2025-04-15T08:07:18.2705138Z     }
2025-04-15T08:07:18.2705142Z 
2025-04-15T08:07:18.2705251Z     body.netdata-splash .claim-message .welcome {
2025-04-15T08:07:18.2705328Z       padding: 16px 0;
2025-04-15T08:07:18.2705489Z       text-align: center;
2025-04-15T08:07:18.2705558Z     }
2025-04-15T08:07:18.2705561Z 
2025-04-15T08:07:18.2705653Z     body.netdata-splash .text-center {
2025-04-15T08:07:18.2705730Z       text-align: center;
2025-04-15T08:07:18.2705792Z     }
2025-04-15T08:07:18.2705796Z 
2025-04-15T08:07:18.2705894Z     body.netdata-splash .connection-modal {
2025-04-15T08:07:18.2705981Z       background: rgba(0, 0, 0, 0.4);
2025-04-15T08:07:18.2706155Z       border: 1px solid var(--border);
2025-04-15T08:07:18.2706236Z       padding: 16px 16px;
2025-04-15T08:07:18.2706307Z       display: flex;
2025-04-15T08:07:18.2706397Z       flex-direction: column;
2025-04-15T08:07:18.2706470Z       gap: 12px;
2025-04-15T08:07:18.2706546Z       position: relative;
2025-04-15T08:07:18.2706629Z       font-size: 14px;
2025-04-15T08:07:18.2706690Z     }
2025-04-15T08:07:18.2706694Z 
2025-04-15T08:07:18.2706793Z     body.netdata-splash .connection-step {
2025-04-15T08:07:18.2706862Z       display: flex;
2025-04-15T08:07:18.2706944Z       flex-direction: column;
2025-04-15T08:07:18.2707015Z       gap: 12px;
2025-04-15T08:07:18.2707087Z       position: relative;
2025-04-15T08:07:18.2707163Z       min-height: 300px;
2025-04-15T08:07:18.2707224Z     }
2025-04-15T08:07:18.2707227Z 
2025-04-15T08:07:18.2707320Z     body.netdata-splash .dropdown-custom {
2025-04-15T08:07:18.2707393Z       display: flex;
2025-04-15T08:07:18.2707471Z       flex-direction: column;
2025-04-15T08:07:18.2707542Z       gap: 12px;
2025-04-15T08:07:18.2707617Z       position: relative;
2025-04-15T08:07:18.2707683Z     }
2025-04-15T08:07:18.2707686Z 
2025-04-15T08:07:18.2707777Z     body.netdata-splash .modal-footer {
2025-04-15T08:07:18.2707859Z       height: var(--footer-height);
2025-04-15T08:07:18.2707938Z       padding: 10px 0 0;
2025-04-15T08:07:18.2708130Z       display: flex;
2025-04-15T08:07:18.2708222Z       justify-content: space-between;
2025-04-15T08:07:18.2708284Z     }
2025-04-15T08:07:18.2708287Z 
2025-04-15T08:07:18.2708394Z     body.netdata-splash .modal-footer .button {
2025-04-15T08:07:18.2708468Z       height: 32px;
2025-04-15T08:07:18.2708540Z       font-size: 14px;
2025-04-15T08:07:18.2708608Z     }
2025-04-15T08:07:18.2708612Z 
2025-04-15T08:07:18.2708702Z     body.netdata-splash .list-options {
2025-04-15T08:07:18.2708771Z       margin: 0;
2025-04-15T08:07:18.2708840Z       padding: 0;
2025-04-15T08:07:18.2708912Z       list-style: none;
2025-04-15T08:07:18.2708988Z       height: 300px;
2025-04-15T08:07:18.2709059Z       overflow: auto;
2025-04-15T08:07:18.2709179Z       scrollbar-color: var(--scrollbar-thumb) #293030;
2025-04-15T08:07:18.2709259Z       scrollbar-width: thin;
2025-04-15T08:07:18.2709322Z     }
2025-04-15T08:07:18.2709326Z 
2025-04-15T08:07:18.2709423Z     body.netdata-splash .list-options li {
2025-04-15T08:07:18.2709500Z       padding: 8px 12px;
2025-04-15T08:07:18.2709592Z       background: var(--list-option-bg);
2025-04-15T08:07:18.2709686Z       border: 1px solid var(--border-neutral);
2025-04-15T08:07:18.2709771Z       margin-bottom: 12px;
2025-04-15T08:07:18.2709842Z       cursor: pointer;
2025-04-15T08:07:18.2709903Z     }
2025-04-15T08:07:18.2709907Z 
2025-04-15T08:07:18.2710017Z     body.netdata-splash .list-options li:hover {
2025-04-15T08:07:18.2710116Z       background: var(--list-option-hover-bg);
2025-04-15T08:07:18.2710186Z     }
2025-04-15T08:07:18.2710190Z 
2025-04-15T08:07:18.2710300Z     body.netdata-splash .list-options li.selected {
2025-04-15T08:07:18.2710411Z       background: var(--list-option-selected-bg);
2025-04-15T08:07:18.2710490Z       color: var(--highlight);
2025-04-15T08:07:18.2710559Z       display: flex;
2025-04-15T08:07:18.2710651Z       justify-content: space-between;
2025-04-15T08:07:18.2710714Z     }
2025-04-15T08:07:18.2710717Z 
2025-04-15T08:07:18.2710855Z     body.netdata-splash .list-options li.selected:after {
2025-04-15T08:07:18.2710929Z       content: "\2713";
2025-04-15T08:07:18.2711004Z       margin-left: 2px;
2025-04-15T08:07:18.2711074Z     }
2025-04-15T08:07:18.2711191Z 
2025-04-15T08:07:18.2711291Z     body.netdata-splash input[type="text"] {
2025-04-15T08:07:18.2711371Z       background: #2d3535;
2025-04-15T08:07:18.2711444Z       padding: 4px 8px;
2025-04-15T08:07:18.2711514Z       border: 0;
2025-04-15T08:07:18.2711586Z       font-size: 14px;
2025-04-15T08:07:18.2711659Z       min-height: 28px;
2025-04-15T08:07:18.2711736Z       color: var(--text);
2025-04-15T08:07:18.2711811Z       border-radius: 2px;
2025-04-15T08:07:18.2711881Z     }
2025-04-15T08:07:18.2711885Z 
2025-04-15T08:07:18.2711993Z     body.netdata-splash input[type="text"]:focus {
2025-04-15T08:07:18.2712077Z       outline: 1px solid var(--border);
2025-04-15T08:07:18.2712144Z     }
2025-04-15T08:07:18.2712148Z 
2025-04-15T08:07:18.2712233Z     body.netdata-splash .dropdown {
2025-04-15T08:07:18.2712318Z       position: relative;
2025-04-15T08:07:18.2712386Z       width: auto;
2025-04-15T08:07:18.2712469Z       border: 1px solid var(--border);
2025-04-15T08:07:18.2712544Z       border-radius: 4px;
2025-04-15T08:07:18.2712619Z       padding: 8px;
2025-04-15T08:07:18.2712697Z       cursor: pointer;
2025-04-15T08:07:18.2712762Z     }
2025-04-15T08:07:18.2712765Z 
2025-04-15T08:07:18.2712865Z     body.netdata-splash .dropdown-toggle {
2025-04-15T08:07:18.2712936Z       display: flex;
2025-04-15T08:07:18.2713021Z       justify-content: space-between;
2025-04-15T08:07:18.2713101Z       align-items: center;
2025-04-15T08:07:18.2713164Z     }
2025-04-15T08:07:18.2713167Z 
2025-04-15T08:07:18.2713274Z     body.netdata-splash .checkbox-container {
2025-04-15T08:07:18.2713345Z       display: none;
2025-04-15T08:07:18.2713422Z       position: absolute;
2025-04-15T08:07:18.2713489Z       top: 100%;
2025-04-15T08:07:18.2713556Z       left: 0;
2025-04-15T08:07:18.2713631Z       width: 100%;
2025-04-15T08:07:18.2713803Z       border: 1px solid var(--border);
2025-04-15T08:07:18.2713897Z       background-color: var(--main-bg);
2025-04-15T08:07:18.2713967Z       z-index: 1;
2025-04-15T08:07:18.2714043Z       max-height: 150px;
2025-04-15T08:07:18.2714127Z       overflow-y: auto;
2025-04-15T08:07:18.2714200Z       padding: 8px;
2025-04-15T08:07:18.2714268Z     }
2025-04-15T08:07:18.2714271Z 
2025-04-15T08:07:18.2714383Z     body.netdata-splash .checkbox-container label {
2025-04-15T08:07:18.2714454Z       display: block;
2025-04-15T08:07:18.2714536Z       margin-bottom: 8px;
2025-04-15T08:07:18.2714599Z     }
2025-04-15T08:07:18.2714603Z 
2025-04-15T08:07:18.2714722Z     body.netdata-splash .checkbox-container input {
2025-04-15T08:07:18.2714797Z       margin-right: 5px;
2025-04-15T08:07:18.2714868Z     }
2025-04-15T08:07:18.2714872Z 
2025-04-15T08:07:18.2714966Z     body.netdata-splash .selected-rooms {
2025-04-15T08:07:18.2715039Z       font-size: 14px;
2025-04-15T08:07:18.2715116Z       color: #333;
2025-04-15T08:07:18.2715185Z     }
2025-04-15T08:07:18.2715188Z 
2025-04-15T08:07:18.2715285Z     body.netdata-splash .text-padding {
2025-04-15T08:07:18.2715367Z       padding: 8px 8px 16px;
2025-04-15T08:07:18.2715434Z     }
2025-04-15T08:07:18.2715444Z 
2025-04-15T08:07:18.2715533Z     body.netdata-splash .nd-radio,
2025-04-15T08:07:18.2715624Z     body.netdata-splash .nd-checkbox {
2025-04-15T08:07:18.2715703Z       display: block;
2025-04-15T08:07:18.2715779Z       position: relative;
2025-04-15T08:07:18.2715864Z       padding-left: 32px;
2025-04-15T08:07:18.2715936Z       cursor: pointer;
2025-04-15T08:07:18.2716011Z       font-size: 16px;
2025-04-15T08:07:18.2716201Z       -webkit-user-select: none;
2025-04-15T08:07:18.2716285Z       -moz-user-select: none;
2025-04-15T08:07:18.2716367Z       user-select: none;
2025-04-15T08:07:18.2716442Z       line-height: 20px;
2025-04-15T08:07:18.2716505Z     }
2025-04-15T08:07:18.2716509Z 
2025-04-15T08:07:18.2716613Z     body.netdata-splash .nd-checkbox input {
2025-04-15T08:07:18.2716693Z       position: absolute;
2025-04-15T08:07:18.2716768Z       opacity: 0;
2025-04-15T08:07:18.2716842Z       cursor: pointer;
2025-04-15T08:07:18.2716915Z       height: 0;
2025-04-15T08:07:18.2717103Z       width: 0;
2025-04-15T08:07:18.2717166Z     }
2025-04-15T08:07:18.2717170Z 
2025-04-15T08:07:18.2717285Z     body.netdata-splash .nd-checkbox .checkmark {
2025-04-15T08:07:18.2717360Z       position: absolute;
2025-04-15T08:07:18.2717431Z       top: 0;
2025-04-15T08:07:18.2717496Z       left: 0;
2025-04-15T08:07:18.2717566Z       height: 16px;
2025-04-15T08:07:18.2717712Z       width: 16px;
2025-04-15T08:07:18.2717833Z       background-color: var(--main-bg);
2025-04-15T08:07:18.2717987Z       border: 1px solid var(--primary);
2025-04-15T08:07:18.2718186Z       border-radius: 2px;
2025-04-15T08:07:18.2718298Z     }
2025-04-15T08:07:18.2718341Z 
2025-04-15T08:07:18.2718541Z     body.netdata-splash .nd-checkbox:hover input~.checkmark {
2025-04-15T08:07:18.2718661Z       background-color: var(--border);
2025-04-15T08:07:18.2718800Z     }
2025-04-15T08:07:18.2718804Z 
2025-04-15T08:07:18.2718962Z     body.netdata-splash .nd-checkbox :hover input~.checkmark {
2025-04-15T08:07:18.2719183Z       background-color: #ccc;
2025-04-15T08:07:18.2719302Z     }
2025-04-15T08:07:18.2719306Z 
2025-04-15T08:07:18.2719517Z     body.netdata-splash .nd-checkbox input:checked~.checkmark {
2025-04-15T08:07:18.2719642Z       background-color: var(--boder);
2025-04-15T08:07:18.2719735Z     }
2025-04-15T08:07:18.2719740Z 
2025-04-15T08:07:18.2719957Z     body.netdata-splash .nd-checkbox .checkmark:after {
2025-04-15T08:07:18.2720074Z       content: "";
2025-04-15T08:07:18.2720234Z       position: absolute;
2025-04-15T08:07:18.2720338Z       display: none;
2025-04-15T08:07:18.2720436Z     }
2025-04-15T08:07:18.2720475Z 
2025-04-15T08:07:18.2720653Z     body.netdata-splash .nd-checkbox input:checked~.checkmark:after {
2025-04-15T08:07:18.2720806Z       display: block;
2025-04-15T08:07:18.2720973Z     }
2025-04-15T08:07:18.2721098Z 
2025-04-15T08:07:18.2721262Z     body.netdata-splash .nd-checkbox .checkmark:after {
2025-04-15T08:07:18.2721401Z       inset: 0 0 2px 0;
2025-04-15T08:07:18.2721503Z       margin: auto;
2025-04-15T08:07:18.2721594Z       width: 2px;
2025-04-15T08:07:18.2721817Z       height: 8px;
2025-04-15T08:07:18.2721934Z       border: solid var(--highlight);
2025-04-15T08:07:18.2722084Z       border-width: 0 2px 2px 0;
2025-04-15T08:07:18.2722197Z       transform: rotate(45deg);
2025-04-15T08:07:18.2722311Z     }
2025-04-15T08:07:18.2722315Z 
2025-04-15T08:07:18.2722488Z     /* Retention table */
2025-04-15T08:07:18.2722612Z     #tiers-container {
2025-04-15T08:07:18.2722750Z       height: auto;
2025-04-15T08:07:18.2722847Z     }
2025-04-15T08:07:18.2722851Z 
2025-04-15T08:07:18.2722989Z     #tiers-table {
2025-04-15T08:07:18.2723089Z       width: 100%;
2025-04-15T08:07:18.2723306Z       border-collapse: collapse;
2025-04-15T08:07:18.2723401Z     }
2025-04-15T08:07:18.2723405Z 
2025-04-15T08:07:18.2723544Z     #tiers-table thead tr:nth-of-type(1) th {
2025-04-15T08:07:18.2723692Z       padding-top: 16px;
2025-04-15T08:07:18.2723805Z     }
2025-04-15T08:07:18.2723809Z 
2025-04-15T08:07:18.2724007Z     #tiers-table thead tr:nth-of-type(2) th {
2025-04-15T08:07:18.2724143Z       padding-bottom: 16px;
2025-04-15T08:07:18.2724271Z     }
2025-04-15T08:07:18.2724276Z 
2025-04-15T08:07:18.2724400Z     #tiers-table tbody tr:nth-of-type(1) td {
2025-04-15T08:07:18.2724522Z       border-top: 1px solid var(--border);
2025-04-15T08:07:18.2724667Z       padding-top: 16px;
2025-04-15T08:07:18.2724809Z     }
2025-04-15T08:07:18.2724814Z 
2025-04-15T08:07:18.2724987Z     #tiers-table tbody tr:last-of-type td {
2025-04-15T08:07:18.2725102Z       padding-bottom: 24px;
2025-04-15T08:07:18.2725196Z     }
2025-04-15T08:07:18.2725252Z 
2025-04-15T08:07:18.2725358Z     #tiers-table th {
2025-04-15T08:07:18.2725460Z       font-size: var(--font-small);
2025-04-15T08:07:18.2725667Z       padding: 8px 4px;
2025-04-15T08:07:18.2725766Z     }
2025-04-15T08:07:18.2725770Z 
2025-04-15T08:07:18.2725908Z     #tiers-table td {
2025-04-15T08:07:18.2726042Z       font-size: var(--font-medium);
2025-04-15T08:07:18.2726304Z       text-align: center;
2025-04-15T08:07:18.2726622Z       padding: 12px 4px;
2025-04-15T08:07:18.2726734Z     }
2025-04-15T08:07:18.2726739Z 
2025-04-15T08:07:18.2726913Z     #tiers-table th:first-of-type,
2025-04-15T08:07:18.2727034Z     #tiers-table td:first-of-type {
2025-04-15T08:07:18.2727179Z       padding-left: 12px;
2025-04-15T08:07:18.2727257Z     }
2025-04-15T08:07:18.2727406Z   
2025-04-15T08:07:18.2727576Z     #tiers-table th:last-of-type,  
2025-04-15T08:07:18.2727708Z     #tiers-table td:last-of-type {
2025-04-15T08:07:18.2727854Z       padding-right: 12px;
2025-04-15T08:07:18.2727948Z     }
2025-04-15T08:07:18.2727952Z 
2025-04-15T08:07:18.2728134Z     #tiers-table .section-start {
2025-04-15T08:07:18.2728274Z       border-left: 1px solid var(--border);
2025-04-15T08:07:18.2728385Z     }
2025-04-15T08:07:18.2728395Z 
2025-04-15T08:07:18.2728546Z     .progress-indicator {
2025-04-15T08:07:18.2728645Z       gap: 8px;
2025-04-15T08:07:18.2728770Z       padding: 0 8px;
2025-04-15T08:07:18.2728912Z     }
2025-04-15T08:07:18.2728923Z 
2025-04-15T08:07:18.2729057Z     .progress-bar-container {
2025-04-15T08:07:18.2729219Z       position: relative;
2025-04-15T08:07:18.2729318Z       width: 100%;
2025-04-15T08:07:18.2729480Z       height: var(--progress-bar-height);
2025-04-15T08:07:18.2729598Z       background-color: var(--border-neutral);
2025-04-15T08:07:18.2729821Z       overflow: hidden;
2025-04-15T08:07:18.2729930Z       border-radius: 2px;
2025-04-15T08:07:18.2730025Z     }
2025-04-15T08:07:18.2730029Z 
2025-04-15T08:07:18.2730168Z     .progress-bar {
2025-04-15T08:07:18.2730277Z       position: absolute;
2025-04-15T08:07:18.2730449Z       top: 0;
2025-04-15T08:07:18.2730581Z       left: 0;
2025-04-15T08:07:18.2730705Z       height: var(--progress-bar-height);
2025-04-15T08:07:18.2730861Z       background-color: var(--primary);
2025-04-15T08:07:18.2731136Z     }
2025-04-15T08:07:18.2731140Z 
2025-04-15T08:07:18.2731280Z     #tooltip {
2025-04-15T08:07:18.2731460Z       max-width: 300px;
2025-04-15T08:07:18.2731636Z       background-color: var(--accent);
2025-04-15T08:07:18.2731754Z       color: var(--text-dark);
2025-04-15T08:07:18.2731863Z       border-radius: 4px;
2025-04-15T08:07:18.2732005Z       padding: 8px 16px;
2025-04-15T08:07:18.2732110Z       position: fixed;
2025-04-15T08:07:18.2732326Z       font-size: var(--font-small);
2025-04-15T08:07:18.2732434Z       line-height: 1.5;
2025-04-15T08:07:18.2732571Z       z-index: 9999;
2025-04-15T08:07:18.2732674Z       display: none;
2025-04-15T08:07:18.2732820Z     }</style><script>const toggleTab = tab => {
2025-04-15T08:07:18.2733064Z       const factors = document.querySelectorAll(".data-tab");
2025-04-15T08:07:18.2733235Z       const tabs = document.querySelectorAll(".btn-tab");
2025-04-15T08:07:18.2733241Z 
2025-04-15T08:07:18.2733398Z       factors.forEach(function (factor) {
2025-04-15T08:07:18.2733572Z         let dataTab = parseInt(factor.getAttribute("data-tab"));
2025-04-15T08:07:18.2733749Z         if (dataTab == tab || dataTab === 0) {
2025-04-15T08:07:18.2733856Z           factor.classList.add("active");
2025-04-15T08:07:18.2734016Z         } else {
2025-04-15T08:07:18.2734194Z           factor.classList.remove("active");
2025-04-15T08:07:18.2734289Z         }
2025-04-15T08:07:18.2734434Z       });
2025-04-15T08:07:18.2734439Z 
2025-04-15T08:07:18.2734557Z       // Toggle active class on tab buttons
2025-04-15T08:07:18.2734743Z       tabs.forEach(tabButton => {
2025-04-15T08:07:18.2734881Z         if (tabButton.dataset?.tab == tab) {
2025-04-15T08:07:18.2735003Z           tabButton.classList.add("active");
2025-04-15T08:07:18.2735135Z         } else {
2025-04-15T08:07:18.2735280Z           tabButton.classList.remove("active");
2025-04-15T08:07:18.2735395Z         }
2025-04-15T08:07:18.2735537Z       });
2025-04-15T08:07:18.2735647Z     }
2025-04-15T08:07:18.2735656Z 
2025-04-15T08:07:18.2736260Z     const initGrid = () => {
2025-04-15T08:07:18.2736447Z       const canvas1 = document.getElementById("monitorGrid");
2025-04-15T08:07:18.2736618Z       const context1 = canvas1.getContext("2d");
2025-04-15T08:07:18.2736877Z       const frame = document.querySelector(".frame");
2025-04-15T08:07:18.2737093Z       const cellSize = 4;
2025-04-15T08:07:18.2737202Z       const gapSize = 2;
2025-04-15T08:07:18.2737390Z       const colors = ["#001107", "#003114", "#014420", "#047031", "#049846"];
2025-04-15T08:07:18.2737395Z 
2025-04-15T08:07:18.2737531Z       let grid = [];
2025-04-15T08:07:18.2737536Z 
2025-04-15T08:07:18.2737651Z       const getRandomColor = () => {
2025-04-15T08:07:18.2737906Z         return colors[Math.floor(Math.random() * colors.length)];
2025-04-15T08:07:18.2738018Z       }
2025-04-15T08:07:18.2738022Z 
2025-04-15T08:07:18.2738205Z       const resizeCanvas = (canvas, context) => {
2025-04-15T08:07:18.2738327Z         canvas.width = frame.clientWidth;
2025-04-15T08:07:18.2738456Z         canvas.height = frame.clientHeight;
2025-04-15T08:07:18.2738496Z 
2025-04-15T08:07:18.2738654Z         const cols = Math.floor(canvas.width / (cellSize + gapSize));
2025-04-15T08:07:18.2738887Z         const rows = Math.floor(canvas.height / (cellSize + gapSize));
2025-04-15T08:07:18.2738892Z 
2025-04-15T08:07:18.2739085Z         grid = Array.from({ length: rows }, () =>
2025-04-15T08:07:18.2739224Z           Array.from({ length: cols }, getRandomColor)
2025-04-15T08:07:18.2739354Z         );
2025-04-15T08:07:18.2739359Z 
2025-04-15T08:07:18.2739472Z         drawGrid(context, canvas);
2025-04-15T08:07:18.2739633Z       }
2025-04-15T08:07:18.2739638Z 
2025-04-15T08:07:18.2739792Z       const drawGrid = (context, canvas) => {
2025-04-15T08:07:18.2739950Z         context.clearRect(0, 0, canvas.width, canvas.height);
2025-04-15T08:07:18.2740151Z         const cols = Math.floor(canvas.width / (cellSize + gapSize));
2025-04-15T08:07:18.2740323Z         const rows = Math.floor(canvas.height / (cellSize + gapSize));
2025-04-15T08:07:18.2740441Z 
2025-04-15T08:07:18.2740582Z         for (let row = 0; row < rows; row++) {
2025-04-15T08:07:18.2740768Z           for (let col = 0; col < cols; col++) {
2025-04-15T08:07:18.2740939Z             if (grid[row] && grid[row][col]) {
2025-04-15T08:07:18.2741062Z               context.fillStyle = grid[row][col];
2025-04-15T08:07:18.2741207Z               context.fillRect(
2025-04-15T08:07:18.2741322Z                 col * (cellSize + gapSize),
2025-04-15T08:07:18.2741419Z                 row * (cellSize + gapSize),
2025-04-15T08:07:18.2741635Z                 cellSize,
2025-04-15T08:07:18.2741735Z                 cellSize
2025-04-15T08:07:18.2741863Z               );
2025-04-15T08:07:18.2741958Z             }
2025-04-15T08:07:18.2742052Z           }
2025-04-15T08:07:18.2742230Z         }
2025-04-15T08:07:18.2742343Z       }
2025-04-15T08:07:18.2742348Z 
2025-04-15T08:07:18.2742499Z       resizeCanvas(canvas1, context1);
2025-04-15T08:07:18.2742509Z 
2025-04-15T08:07:18.2742732Z       window.addEventListener("resize", () => resizeCanvas(canvas1, context1));
2025-04-15T08:07:18.2792543Z     }</script></head><body class="loading netdata-splash"><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-N6CBMJD" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="app" class="container grid"><div class="frame frame-left col-span-7 grid light-beam relative"><div class="head-summary absolute index-10"><div class="server"><div class="no-title" id="server"></div><div class="no-title" id="package"></div></div><div class="availability h-auto module"><div class="title">Cloud status</div><div class="no-key" id="cloud_status"></div></div></div><div class="col-span-12 row-span-11"><div id="sphereContainer"><div id="loadingMessage" class="loading-message">Loading...</div><div class="hide-title absolute-center sphere-stats-container"><div class="metrics-container"><div class="collected-metrics" id="collectedMetrics"></div><div class="node-info-container"><div class="title">NODES</div><div class="node-info" id="nodes_streaming"></div></div></div><div class="system-container data-tab data-tab-container" data-tab="2"><div class="system grid-columns-10 md-grid-columns-12"><div class="flex-col col-span-5 md-col-span-6"><div class="section-title">Kernel</div><div class="grid-columns-10"><div class="h-auto module col-span-5" id="kernel"></div><div class="h-auto module col-span-5" id="kernelVersion"></div></div></div><div class="flex-col col-span-5 md-col-span-6"><div class="section-title">OS</div><div class="grid-columns-10"><div id="os" class="h-auto module col-span-5"></div><div class="h-auto module col-span-5" id="id"></div></div></div><div class="hardware module-section col-span-10 md-col-span-12"><div class="section-title">Hardware</div><div class="grid-columns-10 md-grid-columns-12"><div class="module h-auto col-span-2 md-col-span-4" id="cpuCores"></div><div class="module h-auto col-span-2 md-col-span-4" id="cpuFrequency"></div><div class="module h-auto col-span-2 md-col-span-4" id="ram"></div><div class="module h-auto col-span-2 md-col-span-4" id="disk"></div><div class="module h-auto col-span-2 md-col-span-4" id="cpuArchitecture"></div><div class="module h-auto col-span-2 md-col-span-4" id="virtualization"></div></div></div></div></div><div class="data-tab data-tab-container" data-tab="1"><div class="db-metrics-container"><div id="tiers-container" class="db-metrics-blocks module"><table id="tiers-table"><thead><tr><th rowspan="2"><span data-tooltip="A database layer that stores metrics at a specific resolution.">Tier</span></th><th rowspan="2">Resolution</th><th colspan="2" class="section-start">Stored</th><th colspan="3" class="section-start">Retention</th><th colspan="2" class="section-start">Disk</th></tr><tr><th class="section-start">Metrics</th><th><span data-tooltip="The total number of measurements stored in the database across all metrics. Each sample represents a recorded value for a specific metric at a given time.">Samples</span></th><th class="section-start">Current</th><th><span data-tooltip="The maximum time data can be kept, based on the configured time and disk space limits.">Effective</span></th><th>Configured</th><th class="section-start">Used</th><th>Configured</th></tr></thead><tbody><tr id="tiers-table-data-placeholder"></tr></tbody></table></div></div></div><div class="data-tab data-tab-container" data-tab="3"><div class="modules-container grid"><div class="module col-span-4"><div class="module-header"><div class="section-image"><svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M16.5299 4.47019C16.2399 4.18019 15.7599 4.18019 15.4699 4.47019L13.5299 6.41019L11.5899 4.47019L13.5299 2.53019C13.8199 2.24019 13.8199 1.76019 13.5299 1.47019C13.2399 1.18019 12.7599 1.18019 12.4699 1.47019L10.5299 3.41019L8.99994 1.88019L5.74994 5.13019C4.93994 5.93019 4.49994 7.01019 4.49994 8.15019V8.38019L3.72994 9.15019C2.53994 10.3302 2.45994 12.2002 3.43994 13.5002L1.96994 14.9702C1.67994 15.2602 1.67994 15.7402 1.96994 16.0302C2.11994 16.1802 2.30994 16.2502 2.49994 16.2502C2.68994 16.2502 2.87994 16.1802 3.02994 16.0302L4.49994 14.5602C5.06994 15.0002 5.76994 15.2402 6.49994 15.2402C7.38994 15.2402 8.21994 14.8902 8.84994 14.2702L9.61994 13.5002H9.84994C10.9899 13.5002 12.0599 13.0602 12.8699 12.2502L16.1199 9.00019L14.5899 7.47019L16.5299 5.53019C16.8199 5.24019 16.8199 4.76019 16.5299 4.47019ZM11.8099 11.1902C11.2899 11.7102 10.5899 12.0002 9.84994 12.0002H8.99994L7.78994 13.2102C7.42994 13.5702 6.96994 13.7402 6.49994 13.7402C6.02994 13.7402 5.56994 13.5602 5.20994 13.2102L4.78994 12.7902C4.07994 12.0802 4.07994 10.9202 4.78994 10.2102L5.46994 9.53019L6.40994 10.4702C6.99994 11.0602 7.94994 11.0602 8.52994 10.4702L6.01994 7.96019C6.06994 7.30019 6.33994 6.67019 6.80994 6.19019L8.99994 4.00019L13.9999 9.00019L11.8099 11.1902Z" fill="var(--text)"/></svg></div><span class="section-title">Plugins</span></div><div class="module-content" id="plugins"></div></div><div class="module col-span-4"><div class="module-header"><div class="section-image"><svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M7 18C7.55 18 8 17.55 8 17C8 16.45 7.55 16 7 16C6.45 16 6 16.45 6 17C6 17.55 6.45 18 7 18ZM14 17.79C14.28 17.51 14.28 17.07 14 16.79C13.72 16.51 13.28 16.51 13 16.79C12.72 17.07 12.72 17.51 13 17.79C13.28 18.07 13.72 18.07 14 17.79ZM17 8V4H12V2H2V22H22V8H17ZM10 20H4V4H10V20ZM15 20H12V6H15V20ZM20 20H17V10H20V20ZM19 17.79C19.28 17.51 19.28 17.07 19 16.79C18.72 16.51 18.28 16.51 18 16.79C17.72 17.07 17.72 17.51 18 17.79C18.28 18.07 18.72 18.07 19 17.79Z" fill="var(--text)"/></svg></div><span class="section-title">Libraries</span></div><div class="module-content" id="libs"></div></div><div class="module col-span-4"><div class="module-header"><div class="section-image"><svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M4 16.0002H5V14.5002H4V16.0002ZM2 16.0002H3V14.5002H2V16.0002ZM15.28 6.97019L10.25 1.94019L5.22 6.97019C4.927 7.26319 4.927 7.73819 5.22 8.03119C5.513 8.32419 5.988 8.32419 6.281 8.03119L9.5 4.81119V11.8392C9.5 13.3062 8.306 14.5002 6.838 14.5002H6V16.0002H6.838C9.136 16.0002 11 14.1372 11 11.8382V4.81119L14.22 8.03119C14.366 8.17719 14.558 8.25119 14.75 8.25119C14.942 8.25119 15.134 8.17819 15.28 8.03119C15.573 7.73719 15.573 7.26319 15.28 6.97019Z" fill="var(--text)"/></svg></div><span class="section-title">Exporters</span></div><div class="module-content" id="exporters"></div></div></div></div><div class="data-tab data-tab-container" data-tab="4"><div class="module data-tab-table" id="directories"></div></div></div></div></div><div class="relative row-span-1 col-span-12 full-h"><div class="license-link"><a href="https://app.netdata.cloud/LICENSE.txt" target="_blank">Netdata UI License</a></div><div class="tabs full-h"><button type="button" name="button" class="btn-tab tab active" data-tab="1"><div class="tab-icon"><svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M9 10C14.153 10 16.5 7.927 16.5 6C16.5 4.073 14.153 2 9 2C3.847 2 1.5 4.073 1.5 6C1.5 7.927 3.847 10 9 10ZM9 3.5C12.313 3.5 15 4.619 15 6C15 7.381 12.313 8.5 9 8.5C5.687 8.5 3 7.381 3 6C3 4.619 5.687 3.5 9 3.5ZM14.566 12.931C13.68 13.85 11.523 14.5 9 14.5C6.477 14.5 4.32 13.85 3.434 12.931C2.639 12.547 2.01 12.081 1.545 11.563C1.518 11.708 1.5 11.854 1.5 12C1.5 13.927 3.847 16 9 16C14.153 16 16.5 13.927 16.5 12C16.5 11.854 16.482 11.708 16.455 11.562C15.99 12.081 15.361 12.546 14.566 12.931ZM14.566 9.931C13.68 10.85 11.523 11.5 9 11.5C6.477 11.5 4.32 10.85 3.434 9.931C2.639 9.547 2.01 9.081 1.545 8.563C1.518 8.708 1.5 8.854 1.5 9C1.5 10.927 3.847 13 9 13C14.153 13 16.5 10.927 16.5 9C16.5 8.854 16.482 8.708 16.455 8.562C15.99 9.081 15.361 9.546 14.566 9.931Z"/></svg></div>Database</button> <button type="button" name="button" class="btn-tab tab" data-tab="2"><div class="tab-icon"><svg width="60" height="60" viewBox="0 0 60 60" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M40.3125 18.75H19.6875C19.1697 18.75 18.75 19.1697 18.75 19.6875V40.3125C18.75 40.8303 19.1697 41.25 19.6875 41.25H40.3125C40.8303 41.25 41.25 40.8303 41.25 40.3125V19.6875C41.25 19.1697 40.8303 18.75 40.3125 18.75Z"/><path d="M54.375 22.5C54.8723 22.5 55.3492 22.3025 55.7008 21.9508C56.0525 21.5992 56.25 21.1223 56.25 20.625C56.25 20.1277 56.0525 19.6508 55.7008 19.2992C55.3492 18.9475 54.8723 18.75 54.375 18.75H52.5V15C52.4978 13.0115 51.707 11.1051 50.3009 9.6991C48.8949 8.29305 46.9885 7.50217 45 7.5H41.25V5.625C41.25 5.12772 41.0525 4.65081 40.7008 4.29917C40.3492 3.94754 39.8723 3.75 39.375 3.75C38.8777 3.75 38.4008 3.94754 38.0492 4.29917C37.6975 4.65081 37.5 5.12772 37.5 5.625V7.5H31.875V5.625C31.875 5.12772 31.6775 4.65081 31.3258 4.29917C30.9742 3.94754 30.4973 3.75 30 3.75C29.5027 3.75 29.0258 3.94754 28.6742 4.29917C28.3225 4.65081 28.125 5.12772 28.125 5.625V7.5H22.5V5.625C22.5 5.12772 22.3025 4.65081 21.9508 4.29917C21.5992 3.94754 21.1223 3.75 20.625 3.75C20.1277 3.75 19.6508 3.94754 19.2992 4.29917C18.9475 4.65081 18.75 5.12772 18.75 5.625V7.5H15C13.0115 7.50217 11.1051 8.29305 9.6991 9.6991C8.29305 11.1051 7.50217 13.0115 7.5 15V18.75H5.625C5.12772 18.75 4.65081 18.9475 4.29917 19.2992C3.94754 19.6508 3.75 20.1277 3.75 20.625C3.75 21.1223 3.94754 21.5992 4.29917 21.9508C4.65081 22.3025 5.12772 22.5 5.625 22.5H7.5V28.125H5.625C5.12772 28.125 4.65081 28.3225 4.29917 28.6742C3.94754 29.0258 3.75 29.5027 3.75 30C3.75 30.4973 3.94754 30.9742 4.29917 31.3258C4.65081 31.6775 5.12772 31.875 5.625 31.875H7.5V37.5H5.625C5.12772 37.5 4.65081 37.6975 4.29917 38.0492C3.94754 38.4008 3.75 38.8777 3.75 39.375C3.75 39.8723 3.94754 40.3492 4.29917 40.7008C4.65081 41.0525 5.12772 41.25 5.625 41.25H7.5V45C7.50217 46.9885 8.29305 48.8949 9.6991 50.3009C11.1051 51.707 13.0115 52.4978 15 52.5H18.75V54.375C18.75 54.8723 18.9475 55.3492 19.2992 55.7008C19.6508 56.0525 20.1277 56.25 20.625 56.25C21.1223 56.25 21.5992 56.0525 21.9508 55.7008C22.3025 55.3492 22.5 54.8723 22.5 54.375V52.5H28.125V54.375C28.125 54.8723 28.3225 55.3492 28.6742 55.7008C29.0258 56.0525 29.5027 56.25 30 56.25C30.4973 56.25 30.9742 56.0525 31.3258 55.7008C31.6775 55.3492 31.875 54.8723 31.875 54.375V52.5H37.5V54.375C37.5 54.8723 37.6975 55.3492 38.0492 55.7008C38.4008 56.0525 38.8777 56.25 39.375 56.25C39.8723 56.25 40.3492 56.0525 40.7008 55.7008C41.0525 55.3492 41.25 54.8723 41.25 54.375V52.5H45C46.9885 52.4978 48.8949 51.707 50.3009 50.3009C51.707 48.8949 52.4978 46.9885 52.5 45V41.25H54.375C54.8723 41.25 55.3492 41.0525 55.7008 40.7008C56.0525 40.3492 56.25 39.8723 56.25 39.375C56.25 38.8777 56.0525 38.4008 55.7008 38.0492C55.3492 37.6975 54.8723 37.5 54.375 37.5H52.5V31.875H54.375C54.8723 31.875 55.3492 31.6775 55.7008 31.3258C56.0525 30.9742 56.25 30.4973 56.25 30C56.25 29.5027 56.0525 29.0258 55.7008 28.6742C55.3492 28.3225 54.8723 28.125 54.375 28.125H52.5V22.5H54.375ZM45 41.25C45 42.2446 44.6049 43.1984 43.9016 43.9016C43.1984 44.6049 42.2446 45 41.25 45H18.75C17.7554 45 16.8016 44.6049 16.0984 43.9016C15.3951 43.1984 15 42.2446 15 41.25V18.75C15 17.7554 15.3951 16.8016 16.0984 16.0984C16.8016 15.3951 17.7554 15 18.75 15H41.25C42.2446 15 43.1984 15.3951 43.9016 16.0984C44.6049 16.8016 45 17.7554 45 18.75V41.25Z"/></svg></div>System</button> <button type="button" name="button" class="btn-tab tab" data-tab="3"><div class="tab-icon"><svg width="60" height="60" viewBox="0 0 60 60" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M59.7937 16.4062C59.7164 16.2322 59.6084 16.0734 59.475 15.9375C59.3495 15.8165 59.2112 15.7097 59.0625 15.6187L30.9 0.224957C30.615 0.0603916 30.2916 -0.0262451 29.9625 -0.0262451C29.6334 -0.0262451 29.31 0.0603916 29.025 0.224957L1.06875 15.525C1.06875 15.525 1.06875 15.6187 0.91875 15.6375C0.762779 15.7334 0.618116 15.8466 0.4875 15.975C0.433211 16.047 0.383128 16.1221 0.3375 16.2C0.244093 16.3333 0.168457 16.4783 0.1125 16.6312C0.1125 16.6312 0.1125 16.6312 0.1125 16.7437C0.103788 16.8435 0.103788 16.9439 0.1125 17.0437C0.1125 17.0437 0.1125 17.1562 0.1125 17.2125V42.7687C0.0613239 42.8827 0.0235706 43.0023 0 43.125L0 43.3875C0.142582 43.8604 0.466002 44.2579 0.9 44.4937L29.025 59.8312H29.1375H29.2875C29.5116 59.9337 29.7537 59.9911 30 60C30.2245 59.9926 30.4462 59.9482 30.6563 59.8687H30.7875H30.9L59.025 44.5312C59.3209 44.3693 59.5676 44.1306 59.7392 43.8402C59.9108 43.5498 60.0009 43.2185 60 42.8812V17.2125C59.9937 16.9939 59.9493 16.7782 59.8688 16.575C59.8516 16.5155 59.8264 16.4588 59.7937 16.4062ZM28.125 54.975L3.75 41.6625V20.3812L28.125 33.75V54.975ZM30 30.4125L5.79375 17.2875L30 4.01246L54.2062 17.1375L30 30.4125ZM56.25 41.6625L31.875 54.975V33.75L56.25 20.4562V41.6625Z"/></svg></div>Modules</button> <button type="button" name="button" class="btn-tab tab" data-tab="4"><div class="tab-icon"><svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M16 10.5V5.5H10V7.25H5.75V6.5H8V1.5H2V6.5H4.25V14.75H10V16.5H16V11.5H10V13.25H5.75V8.75H10V10.5H16ZM11.5 7H14.5V9H11.5V7ZM11.5 13H14.5V15H11.5V13ZM3.5 5V3H6.5V5H3.5Z"/></svg></div>Directories</button></div></div></div><div class="frame relative col-span-5 frame-right"><canvas id="monitorGrid"></canvas><div id="splashMessageContainer" class="splash-message"><svg width="133" height="105" viewBox="0 0 133 105" fill="none" xmlns="http://www.w3.org/2000/svg" class="logo"><path fill-rule="evenodd" clip-rule="evenodd" d="M81.697 105H55.0693L0.5 0.5H77.9598C108.079 0.554913 132.484 24.7711 132.5 54.6451C132.452 82.485 109.73 105 81.697 105Z" fill="#FCFFFD"/></svg><h1 class="text-center">Welcome to Netdata</h1><p id="msgSignIn">Please sign-in to continue</p><a id="btnSignIn" href="javascript:loadDashboard(true);" class="button button-primary">Sign-in</a><div class="tagline skip-link"><a class="opt-out-link" href="javascript:loadDashboard();">Skip and use the dashboard anonymously.</a> <span class="no-anonymous-access"></span></div></div><div id="claimingContentsContainer" class="claim-message" style="display:none;"><div class="welcome"><svg width="133" height="105" viewBox="0 0 133 105" fill="none" xmlns="http://www.w3.org/2000/svg" class="logo"><path fill-rule="evenodd" clip-rule="evenodd" d="M81.697 105H55.0693L0.5 0.5H77.9598C108.079 0.554913 132.484 24.7711 132.5 54.6451C132.452 82.485 109.73 105 81.697 105Z" fill="#FCFFFD"/></svg><h1 class="text-center">Welcome to Netdata</h1><span>Please connect your agent to continue.</span></div><div class="connection-modal"><div id="connectionStep-1"><div class="connection-step"><span class="text-small">Please select the space you want this agent to join:</span> <span class="loader">Loading spaces...</span><ul id="spacesList" class="list-options"></ul></div></div><div id="connectionStep-2" style="display:none;"><div class="connection-step"><div class="dropdown-custom" data-target="claimMessage"><div class="dropdown-custom-input flex space-between align-center"><span class="text-small">Select room(s)</span><button class="text-small button button-ghost clear-button">Clear</button></div><div id="roomsSelector" class="dropdown"><div class="dropdown-toggle"><span id="selectedItems" class="selected-items">Select room</span> <span>▼</span></div><div id="roomsSelectorOptionsContainer" class="checkbox-container"></div></div></div><div id="claimMessage" class="selected-message"></div><div class="">Please run the command below in your terminal:</div><code id="claimCommand"></code><div class="">and paste the generated private key in the field below:</div><input id="claimingPrivateKey" name="claimingPrivateKey" value="" placeholder="Private Key"/></div><div id="claimTip" class="text-padding text-small">Tip: If the command doesn’t work out-of-the-box, locate the {keyFilename} file, open it in your favourite text editor, and copy it to your clipboard.</div><div id="claimErrorMessage" class="text-padding error" style="display:none;"></div></div><div class="modal-footer flex-col"><div class="flex space-between"><button id="btnConnectionStepPrev" class="button button-ghost">&#8592; Back</button> <button id="btnConnectionStepNext" class="button button-primary">Next</button> <button id="btnClaim" class="button button-primary">Claim</button></div><div class="skip-link"><a class="signout-link" href="javascript:signout()">Sign out to switch user</a></div></div></div></div></div><div id="tooltip"></div></div></body><script>const initPrimaryButtonHover = () => {
2025-04-15T08:07:18.2793832Z     const button = document.getElementById("btnSignIn");
2025-04-15T08:07:18.2794058Z     const canvas = document.getElementById("monitorGrid");
2025-04-15T08:07:18.2794114Z 
2025-04-15T08:07:18.2794217Z     if (button) {
2025-04-15T08:07:18.2794360Z       button.addEventListener("mouseover", () => {
2025-04-15T08:07:18.2794538Z         canvas.classList.add("hovered");
2025-04-15T08:07:18.2794635Z       });
2025-04-15T08:07:18.2794798Z     }
2025-04-15T08:07:18.2794803Z 
2025-04-15T08:07:18.2794917Z     if (canvas) {
2025-04-15T08:07:18.2795053Z       button.addEventListener("mouseout", () => {
2025-04-15T08:07:18.2795231Z         canvas.classList.remove("hovered");
2025-04-15T08:07:18.2795326Z       });
2025-04-15T08:07:18.2795448Z     }
2025-04-15T08:07:18.2795596Z   }
2025-04-15T08:07:18.2795602Z 
2025-04-15T08:07:18.2795760Z   const initTabs = () => {
2025-04-15T08:07:18.2795927Z     const btnTabs = document.querySelectorAll(".btn-tab");
2025-04-15T08:07:18.2796250Z     btnTabs.forEach(btn => {
2025-04-15T08:07:18.2796417Z       btn.addEventListener("click", e => {
2025-04-15T08:07:18.2796535Z         const tab = e.currentTarget?.dataset?.tab;
2025-04-15T08:07:18.2796743Z         if (tab) {
2025-04-15T08:07:18.2796879Z           toggleTab(tab);
2025-04-15T08:07:18.2797013Z         }
2025-04-15T08:07:18.2797109Z       })
2025-04-15T08:07:18.2797203Z     })
2025-04-15T08:07:18.2797365Z   }
2025-04-15T08:07:18.2797370Z 
2025-04-15T08:07:18.2797501Z   // =============================================== //
2025-04-15T08:07:18.2797506Z 
2025-04-15T08:07:18.2797659Z   const status = {
2025-04-15T08:07:18.2797765Z     TIMEOUT: 'timeout',
2025-04-15T08:07:18.2797867Z     SUCCESS: 'success',
2025-04-15T08:07:18.2797991Z     SKIPPED: 'skipped'
2025-04-15T08:07:18.2798136Z   };
2025-04-15T08:07:18.2798140Z 
2025-04-15T08:07:18.2798318Z   const getSessionId = () => {
2025-04-15T08:07:18.2798441Z     const key = "telemetrySessionId"
2025-04-15T08:07:18.2798599Z     if (!sessionStorage.getItem(key)) {
2025-04-15T08:07:18.2798968Z       sessionStorage.setItem(key, self.crypto && self.crypto.randomUUID ? self.crypto.randomUUID() : new Date().getTime());
2025-04-15T08:07:18.2799045Z     }
2025-04-15T08:07:18.2799297Z     return sessionStorage.getItem(key) || "";
2025-04-15T08:07:18.2799390Z   }
2025-04-15T08:07:18.2799395Z 
2025-04-15T08:07:18.2799582Z   const defaultErrorMessage = "Something went wrong."
2025-04-15T08:07:18.2799866Z   const agentUri = window.location.origin + window.location.pathname.replace(pathsRegex, "");
2025-04-15T08:07:18.2800019Z   const telemetrySessionId = getSessionId();
2025-04-15T08:07:18.2800267Z   const ensureOneSlash = urlStr => urlStr.replace(/([^:]\/)\/+/g, "$1");
2025-04-15T08:07:18.2800272Z 
2025-04-15T08:07:18.2800627Z   // Utils =============================================================================== //
2025-04-15T08:07:18.2800633Z 
2025-04-15T08:07:18.2800753Z   const createElem = (tag, attrs) => {
2025-04-15T08:07:18.2800867Z     if (!tag) return null
2025-04-15T08:07:18.2801035Z     const elem = document.createElement(tag);
2025-04-15T08:07:18.2801158Z     if (Object.keys(attrs || {}).length) {
2025-04-15T08:07:18.2801397Z       Object.entries(attrs).forEach(([k, v]) => {
2025-04-15T08:07:18.2801498Z         elem[k] = v;
2025-04-15T08:07:18.2801627Z       })
2025-04-15T08:07:18.2801720Z     }
2025-04-15T08:07:18.2801835Z     return elem
2025-04-15T08:07:18.2801999Z   }
2025-04-15T08:07:18.2802004Z 
2025-04-15T08:07:18.2802190Z   const getDOM = ({ tag = "div", children = [], ...rest } = {}) => {
2025-04-15T08:07:18.2802367Z     const element = document.createElement(tag);
2025-04-15T08:07:18.2802371Z 
2025-04-15T08:07:18.2802512Z     Object.entries(rest || {}).forEach(([k, v]) => {
2025-04-15T08:07:18.2802687Z       if (element[k] !== undefined) {
2025-04-15T08:07:18.2802818Z         if (k == "dataset" && Object.keys(v).length == 1) {
2025-04-15T08:07:18.2802996Z           const dataPair = Object.entries(v)[0]
2025-04-15T08:07:18.2803173Z           element[k][dataPair[0]] = dataPair[1]
2025-04-15T08:07:18.2803272Z         } else {
2025-04-15T08:07:18.2803427Z           element[k] = v;
2025-04-15T08:07:18.2803522Z         }
2025-04-15T08:07:18.2803603Z       }
2025-04-15T08:07:18.2803807Z     })
2025-04-15T08:07:18.2803812Z 
2025-04-15T08:07:18.2803921Z     if (!!children?.length) {
2025-04-15T08:07:18.2804185Z       children.filter(({ condition = true }) => !!condition).forEach(childStructure => {
2025-04-15T08:07:18.2804346Z         element.appendChild(getDOM(childStructure));
2025-04-15T08:07:18.2804462Z       });
2025-04-15T08:07:18.2804604Z     }
2025-04-15T08:07:18.2804608Z 
2025-04-15T08:07:18.2804724Z     return element;
2025-04-15T08:07:18.2804856Z   }
2025-04-15T08:07:18.2804860Z 
2025-04-15T08:07:18.2805007Z   // ===================================================================================== //
2025-04-15T08:07:18.2805012Z 
2025-04-15T08:07:18.2805148Z   // Agent info
2025-04-15T08:07:18.2805334Z   const AGENT_INFO_KEY = `agentInfo:${window.envSettings.agentApiUrl}`
2025-04-15T08:07:18.2805667Z   const getAgentInfo = () => {
2025-04-15T08:07:18.2805832Z     const agentInfo = localStorage.getItem(AGENT_INFO_KEY)
2025-04-15T08:07:18.2805986Z     if (agentInfo) {
2025-04-15T08:07:18.2806190Z       try {
2025-04-15T08:07:18.2806346Z         return Promise.resolve(JSON.parse(agentInfo))
2025-04-15T08:07:18.2806525Z       } catch (err) {
2025-04-15T08:07:18.2806663Z         return Promise.resolve()
2025-04-15T08:07:18.2806811Z       }
2025-04-15T08:07:18.2806904Z     }
2025-04-15T08:07:18.2806908Z 
2025-04-15T08:07:18.2807303Z     return fetch(ensureOneSlash(`${window.envSettings.agentApiUrl}/api/v3/info`)).then(response => response.json()).then(data => {
2025-04-15T08:07:18.2807445Z       if (CONFIG.cache.agentInfo) {
2025-04-15T08:07:18.2807709Z         localStorage.setItem(AGENT_INFO_KEY, JSON.stringify(data || {}))
2025-04-15T08:07:18.2807873Z       }
2025-04-15T08:07:18.2807976Z       return data
2025-04-15T08:07:18.2808133Z     }).catch(() => Promise.resolve())
2025-04-15T08:07:18.2808225Z   }
2025-04-15T08:07:18.2808230Z 
2025-04-15T08:07:18.2808466Z   const loadStyle = (url, { media, insertAfter: aref, insertBefore: bref, rel, type } = {}) => {
2025-04-15T08:07:18.2808695Z     rel = rel || 'stylesheet'
2025-04-15T08:07:18.2808805Z     type = type || 'text/css'
2025-04-15T08:07:18.2808980Z     return new Promise(function (resolve, reject) {
2025-04-15T08:07:18.2809114Z       let link = document.createElement('link');
2025-04-15T08:07:18.2809242Z       link.type = type;
2025-04-15T08:07:18.2809438Z       link.rel = rel;
2025-04-15T08:07:18.2809576Z       link.href = url;
2025-04-15T08:07:18.2809724Z       link.media = media || 'all';
2025-04-15T08:07:18.2809729Z 
2025-04-15T08:07:18.2809843Z       link.onerror = function (err) {
2025-04-15T08:07:18.2810253Z         reject(new URIError(`loadStyle: the stylesheet ${err.target.src} is not accessible.`));
2025-04-15T08:07:18.2813611Z       };
2025-04-15T08:07:18.2813629Z 
2025-04-15T08:07:18.2813754Z       link.onload = function () {
2025-04-15T08:07:18.2813825Z         resolve();
2025-04-15T08:07:18.2813891Z       };
2025-04-15T08:07:18.2813899Z 
2025-04-15T08:07:18.2813977Z       if (aref) {
2025-04-15T08:07:18.2814162Z         aref.parentNode.insertBefore(link, aref.nextSibling);
2025-04-15T08:07:18.2814226Z         return;
2025-04-15T08:07:18.2814294Z       }
2025-04-15T08:07:18.2814298Z 
2025-04-15T08:07:18.2814362Z       if (bref) {
2025-04-15T08:07:18.2814476Z         bref.parentNode.insertBefore(link, bref);
2025-04-15T08:07:18.2814541Z         return;
2025-04-15T08:07:18.2814601Z       }
2025-04-15T08:07:18.2814605Z 
2025-04-15T08:07:18.2814706Z       document.head.appendChild(link);
2025-04-15T08:07:18.2814766Z     });
2025-04-15T08:07:18.2814829Z   }
2025-04-15T08:07:18.2814838Z 
2025-04-15T08:07:18.2815169Z   const loadScript = (url, { async = true, defer = false, insertAfter: aref, insertBefore: bref, timeout = 5000, attrs, skipIf } = {}) => {
2025-04-15T08:07:18.2815288Z     return new Promise(function (resolve, reject) {
2025-04-15T08:07:18.2815398Z       if (typeof skipIf === 'function' && skipIf()) {
2025-04-15T08:07:18.2815481Z         resolve(status.SKIPPED);
2025-04-15T08:07:18.2815550Z         return;
2025-04-15T08:07:18.2815610Z       }
2025-04-15T08:07:18.2815614Z 
2025-04-15T08:07:18.2815837Z       let rejectWithTimeout = setTimeout(function () { reject(status.TIMEOUT) }, timeout);
2025-04-15T08:07:18.2815842Z 
2025-04-15T08:07:18.2815954Z       let script = document.createElement('script');
2025-04-15T08:07:18.2816041Z       script.type = 'text/javascript';
2025-04-15T08:07:18.2816424Z       script.src = url;
2025-04-15T08:07:18.2816503Z       script.async = async;
2025-04-15T08:07:18.2816579Z       script.defer = defer;
2025-04-15T08:07:18.2816589Z 
2025-04-15T08:07:18.2816651Z       if (attrs) {
2025-04-15T08:07:18.2816732Z         for (let attr in attrs) {
2025-04-15T08:07:18.2816831Z           script.setAttribute(attr, attrs[attr]);
2025-04-15T08:07:18.2817059Z         }
2025-04-15T08:07:18.2817122Z       }
2025-04-15T08:07:18.2817126Z 
2025-04-15T08:07:18.2817209Z       script.onerror = function (err) {
2025-04-15T08:07:18.2817428Z         reject(new URIError(`loadScript: the script ${err.target.src} is not accessible.`));
2025-04-15T08:07:18.2817491Z       };
2025-04-15T08:07:18.2817495Z 
2025-04-15T08:07:18.2817578Z       script.onload = function () {
2025-04-15T08:07:18.2817677Z         clearTimeout(rejectWithTimeout);
2025-04-15T08:07:18.2817756Z         resolve(status.SUCCESS);
2025-04-15T08:07:18.2817820Z       };
2025-04-15T08:07:18.2817824Z 
2025-04-15T08:07:18.2817886Z       if (aref) {
2025-04-15T08:07:18.2818043Z         aref.parentNode.insertBefore(script, aref.nextSibling);
2025-04-15T08:07:18.2818106Z         return;
2025-04-15T08:07:18.2818172Z       }
2025-04-15T08:07:18.2818177Z 
2025-04-15T08:07:18.2818243Z       if (bref) {
2025-04-15T08:07:18.2818357Z         bref.parentNode.insertBefore(script, bref);
2025-04-15T08:07:18.2818423Z         return;
2025-04-15T08:07:18.2818490Z       }
2025-04-15T08:07:18.2818494Z 
2025-04-15T08:07:18.2818589Z       document.body.appendChild(script);
2025-04-15T08:07:18.2818648Z     });
2025-04-15T08:07:18.2818707Z   }
2025-04-15T08:07:18.2818712Z 
2025-04-15T08:07:18.2819224Z   __webpack_public_path__ = ensureOneSlash(window.envSettings.webpackPublicPath ? (window.envSettings.webpackPublicPath + "/") : (window.envSettings.agentApiUrl + "/v3/"))
2025-04-15T08:07:18.2819230Z 
2025-04-15T08:07:18.2819308Z   const loadLatestUI = () => {
2025-04-15T08:07:18.2819679Z     return fetch(__webpack_public_path__ + "bundlesManifest." + window.envSettings.version.toString().replace(/(\d+)\..+/, "$1") + ".json")
2025-04-15T08:07:18.2819803Z       .then(function (response) { return response.json() })
2025-04-15T08:07:18.2820002Z       .catch(() => goToOld('/v3'))
2025-04-15T08:07:18.2820080Z       .then(function (data) {
2025-04-15T08:07:18.2820180Z         Object.keys(data).forEach(function (k) {
2025-04-15T08:07:18.2820288Z           if (/\.(map|ico|html)$/.test(data[k])) return
2025-04-15T08:07:18.2820381Z           if (/static\//.test(data[k])) return
2025-04-15T08:07:18.2820385Z 
2025-04-15T08:07:18.2820470Z           if (/\.css.*$/.test(data[k])) {
2025-04-15T08:07:18.2820626Z             loadStyle(ensureOneSlash(__webpack_public_path__ + data[k]))
2025-04-15T08:07:18.2820697Z             return
2025-04-15T08:07:18.2820761Z           }
2025-04-15T08:07:18.2820765Z 
2025-04-15T08:07:18.2820843Z           if (/\.js.*$/.test(data[k])) {
2025-04-15T08:07:18.2821006Z             loadScript(ensureOneSlash(__webpack_public_path__ + data[k]), {
2025-04-15T08:07:18.2821079Z               async: false,
2025-04-15T08:07:18.2821149Z             });
2025-04-15T08:07:18.2821212Z           }
2025-04-15T08:07:18.2821279Z         })
2025-04-15T08:07:18.2821371Z         return Promise.resolve()
2025-04-15T08:07:18.2821434Z       })
2025-04-15T08:07:18.2821502Z   }
2025-04-15T08:07:18.2821506Z 
2025-04-15T08:07:18.2821590Z   const loadDashboard = signIn => {
2025-04-15T08:07:18.2821676Z     loadLatestUI().then(() => {
2025-04-15T08:07:18.2821743Z       if (signIn) {
2025-04-15T08:07:18.2821841Z         window.location.href = ensureOneSlash(
2025-04-15T08:07:18.2822036Z           `${window.envSettings.cloudUrl}/trust?redirect_uri=${encodeURIComponent(
2025-04-15T08:07:18.2822119Z             window.location.href
2025-04-15T08:07:18.2822215Z           )}&agent_uri=${encodeURIComponent(
2025-04-15T08:07:18.2822325Z             agentUri || window.envSettings.agentApiUrl
2025-04-15T08:07:18.2822432Z           )}&telemetry_session_id=${telemetrySessionId}`
2025-04-15T08:07:18.2822501Z         )
2025-04-15T08:07:18.2822564Z       }
2025-04-15T08:07:18.2822629Z     })
2025-04-15T08:07:18.2822690Z   }
2025-04-15T08:07:18.2822694Z 
2025-04-15T08:07:18.2822777Z   const signout = () => {
2025-04-15T08:07:18.2822880Z     localStorage.removeItem(CLOUD_TOKEN_KEY)
2025-04-15T08:07:18.2822963Z     window.location.reload()
2025-04-15T08:07:18.2823028Z   }
2025-04-15T08:07:18.2823168Z 
2025-04-15T08:07:18.2823254Z   const fetchRegistryInfo = () => {
2025-04-15T08:07:18.2823404Z     if (window.localNetdataRegistry) return Promise.resolve()
2025-04-15T08:07:18.2823410Z 
2025-04-15T08:07:18.2823801Z     return fetch(ensureOneSlash(window.envSettings.agentApiUrl + "/api/v1/registry?action=hello"), { cache: "no-cache", credentials: "include" })
2025-04-15T08:07:18.2823880Z       .then(response => {
2025-04-15T08:07:18.2824057Z         if (!response.ok) return Promise.reject({ message: defaultErrorMessage })
2025-04-15T08:07:18.2824139Z         return response.json()
2025-04-15T08:07:18.2824208Z       })
2025-04-15T08:07:18.2824276Z       .then(data => {
2025-04-15T08:07:18.2824451Z         if (!data) return Promise.reject({ message: "No registry data available." })
2025-04-15T08:07:18.2824461Z 
2025-04-15T08:07:18.2824568Z         let to = data.cloud_base_url.lastIndexOf('/');
2025-04-15T08:07:18.2824767Z         to = (to == -1 || to < data.cloud_base_url.length - 2) ? data.cloud_base_url.length : to;
2025-04-15T08:07:18.2824896Z         let cloudUrl = data.cloud_base_url.substring(0, to);
2025-04-15T08:07:18.2824900Z 
2025-04-15T08:07:18.2825001Z         let withoutNodes = btoa(JSON.stringify({
2025-04-15T08:07:18.2825085Z           registry: data.registry,
2025-04-15T08:07:18.2825173Z           machine_guid: data.machine_guid,
2025-04-15T08:07:18.2825257Z           hostname: data.hostname,
2025-04-15T08:07:18.2825330Z           agent: data.agent,
2025-04-15T08:07:18.2825396Z           nodes: []
2025-04-15T08:07:18.2825456Z         }))
2025-04-15T08:07:18.2825562Z         let iframe = document.createElement('iframe');
2025-04-15T08:07:18.2825890Z         iframe.src = data.registry + "/registry-access.html?x=" + withoutNodes + "&originUrl=" + window.envSettings.agentApiUrl;
2025-04-15T08:07:18.2826231Z         iframe.style = { position: "absolute", left: "-99999999px" };
2025-04-15T08:07:18.2826310Z         iframe.width = 0;
2025-04-15T08:07:18.2826384Z         iframe.height = 0;
2025-04-15T08:07:18.2826470Z         iframe.tabindex = -1;
2025-04-15T08:07:18.2826549Z         iframe.title = "empty";
2025-04-15T08:07:18.2826636Z         iframe.classList.add("hidden");
2025-04-15T08:07:18.2826734Z         document.body.appendChild(iframe);
2025-04-15T08:07:18.2826739Z 
2025-04-15T08:07:18.2826816Z         setTimeout(function () {
2025-04-15T08:07:18.2826960Z           document.title = data.hostname + ': Netdata Agent Console';
2025-04-15T08:07:18.2827244Z           iframe.contentWindow.postMessage(["netdata-registry", window.envSettings.agentApiUrl, data], "*")
2025-04-15T08:07:18.2827305Z         }, 300);
2025-04-15T08:07:18.2827313Z 
2025-04-15T08:07:18.2827439Z         window.addEventListener('message', function (event) {
2025-04-15T08:07:18.2827554Z           if (event.source !== iframe.contentWindow) return;
2025-04-15T08:07:18.2827563Z 
2025-04-15T08:07:18.2827858Z           if (event.data.status === "disabled") console.error("Your netdata registry is disabled! Check your configuration.")
2025-04-15T08:07:18.2827866Z 
2025-04-15T08:07:18.2827939Z           if (event.data) {
2025-04-15T08:07:18.2828039Z             if (!window.localNetdataRegistry) {
2025-04-15T08:07:18.2828134Z               window.localNetdataRegistry = {}
2025-04-15T08:07:18.2828200Z             }
2025-04-15T08:07:18.2828204Z 
2025-04-15T08:07:18.2828350Z             window.localNetdataRegistry.pg = event.data.person_guid
2025-04-15T08:07:18.2828354Z 
2025-04-15T08:07:18.2828438Z             if (!window.envSettings) {
2025-04-15T08:07:18.2828524Z               window.envSettings = {}
2025-04-15T08:07:18.2828585Z             }
2025-04-15T08:07:18.2828589Z 
2025-04-15T08:07:18.2828724Z             window.envSettings.visitor = event.data.person_guid
2025-04-15T08:07:18.2828729Z 
2025-04-15T08:07:18.2828794Z             try {
2025-04-15T08:07:18.2828996Z               var visitedNodesByName = event.data.urls.reduce(function (vn, visitedUrl) {
2025-04-15T08:07:18.2829098Z                 vn[visitedUrl[4]] = vn[visitedUrl[4]] || {}
2025-04-15T08:07:18.2829308Z                 vn[visitedUrl[4]].id = visitedUrl[0]
2025-04-15T08:07:18.2829402Z                 vn[visitedUrl[4]].name = visitedUrl[4]
2025-04-15T08:07:18.2829516Z                 vn[visitedUrl[4]].lastAccessTime = visitedUrl[2]
2025-04-15T08:07:18.2829638Z                 vn[visitedUrl[4]].urls = vn[visitedUrl[4]].urls || []
2025-04-15T08:07:18.2829741Z                 vn[visitedUrl[4]].urls.push(visitedUrl[1])
2025-04-15T08:07:18.2829745Z 
2025-04-15T08:07:18.2829815Z                 return vn
2025-04-15T08:07:18.2829878Z               }, {})
2025-04-15T08:07:18.2829883Z 
2025-04-15T08:07:18.2830077Z               window.visitedNodes = Object.keys(visitedNodesByName).map(function (vn) {
2025-04-15T08:07:18.2830167Z                 return visitedNodesByName[vn]
2025-04-15T08:07:18.2830233Z               })
2025-04-15T08:07:18.2830308Z             } catch (e) {
2025-04-15T08:07:18.2830375Z               // do nothing
2025-04-15T08:07:18.2830439Z             }
2025-04-15T08:07:18.2830504Z           }
2025-04-15T08:07:18.2830564Z         });
2025-04-15T08:07:18.2830569Z 
2025-04-15T08:07:18.2830653Z         return Promise.resolve()
2025-04-15T08:07:18.2830712Z       })
2025-04-15T08:07:18.2830775Z   }
2025-04-15T08:07:18.2830779Z 
2025-04-15T08:07:18.2830985Z   const cloudRequest = async (endpoint, {allowAnonymous = false, ...options} = {}) => {
2025-04-15T08:07:18.2831123Z     const cloudToken = localStorage.getItem(CLOUD_TOKEN_KEY)
2025-04-15T08:07:18.2831298Z     if (!allowAnonymous && !cloudToken) return Promise.reject("No cloud token")
2025-04-15T08:07:18.2831303Z 
2025-04-15T08:07:18.2831710Z     options = { ...options, headers: { ...(options?.headers || {}), ...(!!cloudToken && {Authorization: `*** } }
2025-04-15T08:07:18.2831716Z 
2025-04-15T08:07:18.2832046Z     return fetch(ensureOneSlash(`${window.envSettings.apiUrl}/${endpoint}`), options)
2025-04-15T08:07:18.2832113Z   }
2025-04-15T08:07:18.2832118Z 
2025-04-15T08:07:18.2832192Z   const sleep = (ms) => {
2025-04-15T08:07:18.2832328Z     return new Promise(resolve => setTimeout(resolve, ms));
2025-04-15T08:07:18.2832393Z   }
2025-04-15T08:07:18.2832397Z 
2025-04-15T08:07:18.2832511Z   const claimAgent = ({ key, token, rooms } = {}) => {
2025-04-15T08:07:18.2832614Z     const url = window.envSettings.apiUrl;
2025-04-15T08:07:18.2832776Z     let query = new URLSearchParams({ key, rooms, token, url }).toString()
2025-04-15T08:07:18.2832911Z     query = key && rooms && token && url && query ? `?${query}` : ""
2025-04-15T08:07:18.2833196Z     return fetch(ensureOneSlash(`${window.envSettings.agentApiUrl}/api/v3/claim${query}`)).then(response => {
2025-04-15T08:07:18.2833336Z       const contentType = response.headers.get("content-type");
2025-04-15T08:07:18.2833347Z 
2025-04-15T08:07:18.2833463Z       if (contentType && contentType.includes("text")) {
2025-04-15T08:07:18.2833547Z         throw response.text();
2025-04-15T08:07:18.2833614Z       }
2025-04-15T08:07:18.2833618Z 
2025-04-15T08:07:18.2833729Z       if (contentType && contentType.includes("json")) {
2025-04-15T08:07:18.2833814Z         return response.json();
2025-04-15T08:07:18.2833875Z       }
2025-04-15T08:07:18.2833879Z 
2025-04-15T08:07:18.2834023Z       throw new Error('Unsupported content type: ' + contentType);
2025-04-15T08:07:18.2834092Z     }).then(data => {
2025-04-15T08:07:18.2834170Z       if (data.success === false) {
2025-04-15T08:07:18.2834251Z         throw data.message
2025-04-15T08:07:18.2834312Z       }
2025-04-15T08:07:18.2834316Z 
2025-04-15T08:07:18.2834450Z       if (key && data.can_be_claimed === false && !data.agent.nd) {
2025-04-15T08:07:18.2834540Z         return sleep(1000).then(claimAgent);
2025-04-15T08:07:18.2834601Z       }
2025-04-15T08:07:18.2834607Z 
2025-04-15T08:07:18.2834673Z       return data
2025-04-15T08:07:18.2834738Z     });
2025-04-15T08:07:18.2834801Z   }
2025-04-15T08:07:18.2834805Z 
2025-04-15T08:07:18.2834877Z   const checkMe = mg => {
2025-04-15T08:07:18.2835087Z     return fetch(ensureOneSlash(`${window.envSettings.agentApiUrl}/api/v3/me`), {
2025-04-15T08:07:18.2835240Z       headers: {
2025-04-15T08:07:18.2835430Z         "X-Netdata-Auth": `***
2025-04-15T08:07:18.2835494Z       }
2025-04-15T08:07:18.2835554Z     })
2025-04-15T08:07:18.2835644Z       .then(response => response.json())
2025-04-15T08:07:18.2835712Z       .catch(() => ({
2025-04-15T08:07:18.2835780Z         auth: "none",
2025-04-15T08:07:18.2835857Z         cloud_account_id: null,
2025-04-15T08:07:18.2835930Z         client_name: "",
2025-04-15T08:07:18.2836013Z         access: ["anonymous-data"],
2025-04-15T08:07:18.2836227Z         user_role: "any",
2025-04-15T08:07:18.2836299Z       }))
2025-04-15T08:07:18.2836360Z   }
2025-04-15T08:07:18.2836364Z 
2025-04-15T08:07:18.2836450Z   const fetchUserAccess = (mg, nd) => {
2025-04-15T08:07:18.2836870Z     return cloudRequest(`/api/v1/agents/${mg}/user_agent_node_access${nd ? `?nodeID=${nd}` : ""}`, {allowAnonymous: true}).then(response => response.json()).then(data => {
2025-04-15T08:07:18.2837807Z       window.localNetdataRegistry.limitations = data.limitations ? {limit: data.limitations.limit || 99999999, customDashboardsLimit: data.limitations.custom_dashboards_limit || 99999999, windowsSupport: data.limitations.windows_support || false} : {limit: 99999999, customDashboardsLimit: 99999999, windowsSupport: true}
2025-04-15T08:07:18.2837823Z 
2025-04-15T08:07:18.2837920Z       if (data.user_node_status === "noAccess") {
2025-04-15T08:07:18.2837986Z         return data
2025-04-15T08:07:18.2838051Z       }
2025-04-15T08:07:18.2838184Z       window.localNetdataRegistry.spaceId = data.space_id
2025-04-15T08:07:18.2838189Z 
2025-04-15T08:07:18.2838302Z       const room = data.rooms.find(r => r.untouchable)
2025-04-15T08:07:18.2838307Z 
2025-04-15T08:07:18.2838419Z       window.localNetdataRegistry.roomId = room.id
2025-04-15T08:07:18.2838672Z       window.localNetdataRegistry.room = room
2025-04-15T08:07:18.2838677Z 
2025-04-15T08:07:18.2838742Z       return data
2025-04-15T08:07:18.2838815Z     }).catch((err) => { })
2025-04-15T08:07:18.2838881Z   }
2025-04-15T08:07:18.2838885Z 
2025-04-15T08:07:18.2839005Z   const getAgentToken = ({ mg, nd, claimId }, agent) => {
2025-04-15T08:07:18.2839312Z     return cloudRequest(`/api/v2/bearer_get_token?node_id=${nd}&claim_id=${claimId}&machine_guid=${mg}`).then(response => {
2025-04-15T08:07:18.2839396Z       if (response.status === 401) {
2025-04-15T08:07:18.2839463Z         signout()
2025-04-15T08:07:18.2839527Z         return
2025-04-15T08:07:18.2839587Z       }
2025-04-15T08:07:18.2839663Z       if (!response.ok) {
2025-04-15T08:07:18.2839779Z         // Parse the error response to extract the message
2025-04-15T08:07:18.2839882Z         return response.json().then(errorData => {
2025-04-15T08:07:18.2839994Z           const error = new Error(errorData.errorMessage);
2025-04-15T08:07:18.2840092Z           error.data = errorData.errorContext
2025-04-15T08:07:18.2840163Z           throw error
2025-04-15T08:07:18.2840225Z         });
2025-04-15T08:07:18.2840290Z       }
2025-04-15T08:07:18.2840373Z       return response.json();
2025-04-15T08:07:18.2840442Z     }).then(data => {
2025-04-15T08:07:18.2840524Z       if (data && data.token) {
2025-04-15T08:07:18.2840643Z         localStorage.setItem(`agentJWT:${mg}`, data?.token)
2025-04-15T08:07:18.2840793Z         localStorage.setItem(`agentJWTExp:${mg}`, data?.expiration)
2025-04-15T08:07:18.2840855Z       }
2025-04-15T08:07:18.2840922Z       return data
2025-04-15T08:07:18.2840991Z     }).catch((err) => {
2025-04-15T08:07:18.2841058Z       stopLoading()
2025-04-15T08:07:18.2841062Z 
2025-04-15T08:07:18.2841189Z       let message = "Something went wrong. Please try again."
2025-04-15T08:07:18.2841291Z       if (err.data && err.data.state === "created") {
2025-04-15T08:07:18.2841553Z         message = "The node is claimed and is syncing with Netdata Cloud. Please wait a few seconds and try again."
2025-04-15T08:07:18.2841620Z       } else {
2025-04-15T08:07:18.2841714Z         message = (err && err.message) || message
2025-04-15T08:07:18.2841887Z       }
2025-04-15T08:07:18.2841892Z 
2025-04-15T08:07:18.2841896Z 
2025-04-15T08:07:18.2842026Z       const msgSignIn = document.getElementById("msgSignIn");
2025-04-15T08:07:18.2842117Z       msgSignIn.textContent = message
2025-04-15T08:07:18.2842121Z 
2025-04-15T08:07:18.2842245Z       const btnSignIn = document.getElementById("btnSignIn");
2025-04-15T08:07:18.2842337Z       btnSignIn.style.display = "none"
2025-04-15T08:07:18.2842341Z 
2025-04-15T08:07:18.2842423Z       setupOptOutMessage(agent)
2025-04-15T08:07:18.2842487Z     })
2025-04-15T08:07:18.2842546Z   }
2025-04-15T08:07:18.2842550Z 
2025-04-15T08:07:18.2842638Z   const setupOptOutMessage = agent => {
2025-04-15T08:07:18.2842769Z     const bearerProtection = agent.api.bearer_protection;
2025-04-15T08:07:18.2842782Z 
2025-04-15T08:07:18.2842983Z     const isWindows = (agent.application.os.kernel || "").toLowerCase() === "windows"
2025-04-15T08:07:18.2843428Z     const lockWindows = isWindows && (!window.localNetdataRegistry.limitation || window.localNetdataRegistry.limitations.windowsSupport === false);
2025-04-15T08:07:18.2843438Z 
2025-04-15T08:07:18.2843587Z     const denyAnonymousAccess = bearerProtection || lockWindows;
2025-04-15T08:07:18.2843592Z 
2025-04-15T08:07:18.2843706Z     // Get all elements with the "opt-out-link" class
2025-04-15T08:07:18.2843900Z     const optOutLinkElems = document.getElementsByClassName("opt-out-link");
2025-04-15T08:07:18.2843995Z     if (optOutLinkElems.length > 0) {
2025-04-15T08:07:18.2844108Z       for (let i = 0; i < optOutLinkElems.length; i++) {
2025-04-15T08:07:18.2844302Z         optOutLinkElems[i].style.display = denyAnonymousAccess ? "none" : "inline";
2025-04-15T08:07:18.2844369Z       }
2025-04-15T08:07:18.2844431Z     }
2025-04-15T08:07:18.2844435Z 
2025-04-15T08:07:18.2844648Z     // Get all elements with the "no-anonymous-access" class
2025-04-15T08:07:18.2844906Z     const anonymousAccessDeniedElems = document.getElementsByClassName("no-anonymous-access");
2025-04-15T08:07:18.2845027Z     if (anonymousAccessDeniedElems.length > 0) {
2025-04-15T08:07:18.2845167Z       for (let i = 0; i < anonymousAccessDeniedElems.length; i++) {
2025-04-15T08:07:18.2845299Z         if (anonymousAccessDeniedElems[i].textContent === "") {
2025-04-15T08:07:18.2846050Z           anonymousAccessDeniedElems[i].innerHTML = bearerProtection ? "Anonymous access is not allowed. *** is enabled.<br />Please sign in to continue." : "Anonymous access to the dashboard of Windows nodes is not allowed.<br />Please sign in to continue.";
2025-04-15T08:07:18.2846224Z         }
2025-04-15T08:07:18.2846457Z         anonymousAccessDeniedElems[i].style.display = denyAnonymousAccess ? "inline" : "none";
2025-04-15T08:07:18.2846525Z       }
2025-04-15T08:07:18.2846587Z     }
2025-04-15T08:07:18.2846650Z   }
2025-04-15T08:07:18.2846659Z 
2025-04-15T08:07:18.2846763Z   const createClaimingToken = spaceId => {
2025-04-15T08:07:18.2846860Z     if (!spaceId) return Promise.resolve();
2025-04-15T08:07:18.2846963Z     toggleClaimingTokenLoadingState(true);
2025-04-15T08:07:18.2847153Z     return cloudRequest(`/api/v1/spaces/${spaceId}/token`).then(response => {
2025-04-15T08:07:18.2847261Z       toggleClaimingTokenLoadingState(false);
2025-04-15T08:07:18.2847341Z       return response.json();
2025-04-15T08:07:18.2847404Z     });
2025-04-15T08:07:18.2847468Z   }
2025-04-15T08:07:18.2847472Z 
2025-04-15T08:07:18.2847567Z   const getClaimingToken = async spaceId => {
2025-04-15T08:07:18.2847661Z     if (!spaceId) return Promise.resolve();
2025-04-15T08:07:18.2847830Z     const cachedToken = state.cache.claimingTokensPerSpace[spaceId];
2025-04-15T08:07:18.2847955Z     if (cachedToken) return Promise.resolve(cachedToken);
2025-04-15T08:07:18.2848072Z     const token = await createClaimingToken(spaceId);
2025-04-15T08:07:18.2848166Z     cacheClaimingToken(spaceId, token);
2025-04-15T08:07:18.2848254Z     return Promise.resolve(token);
2025-04-15T08:07:18.2848314Z   }
2025-04-15T08:07:18.2848318Z 
2025-04-15T08:07:18.2848396Z   const fetchSpaces = () => {
2025-04-15T08:07:18.2848607Z     toggleSpacesLoadingState(true);
2025-04-15T08:07:18.2848746Z     return cloudRequest("/api/v3/spaces").then(response => {
2025-04-15T08:07:18.2848846Z       toggleSpacesLoadingState(false);
2025-04-15T08:07:18.2848924Z       return response.json();
2025-04-15T08:07:18.2848988Z     });
2025-04-15T08:07:18.2849047Z   }
2025-04-15T08:07:18.2849051Z 
2025-04-15T08:07:18.2849129Z   const getSpaces = async () => {
2025-04-15T08:07:18.2849229Z     const cachedSpaces = state.cache.spaces;
2025-04-15T08:07:18.2849358Z     if (cachedSpaces) return Promise.resolve(cachedSpaces);
2025-04-15T08:07:18.2849444Z     const spaces = await fetchSpaces();
2025-04-15T08:07:18.2849521Z     cacheSpaces(spaces);
2025-04-15T08:07:18.2849606Z     return Promise.resolve(spaces);
2025-04-15T08:07:18.2849670Z   }
2025-04-15T08:07:18.2849674Z 
2025-04-15T08:07:18.2849758Z   const fetchSpaceRooms = spaceId => {
2025-04-15T08:07:18.2849855Z     if (!spaceId) return Promise.resolve([])
2025-04-15T08:07:18.2849950Z     toggleRoomsLoadingState(true);
2025-04-15T08:07:18.2850220Z     return cloudRequest(`/api/v2/spaces/${spaceId}/rooms?show_all=true&default=false`).then(response => {
2025-04-15T08:07:18.2850310Z       toggleRoomsLoadingState(false);
2025-04-15T08:07:18.2850390Z       return response.json();
2025-04-15T08:07:18.2850454Z     })
2025-04-15T08:07:18.2850515Z   }
2025-04-15T08:07:18.2850519Z 
2025-04-15T08:07:18.2850614Z   const getSpaceRooms = async spaceId => {
2025-04-15T08:07:18.2850709Z     if (!spaceId) return Promise.resolve([]);
2025-04-15T08:07:18.2850822Z     const cachedRooms = state.cache.rooms[spaceId];
2025-04-15T08:07:18.2850946Z     if (cachedRooms) return Promise.resolve(cachedRooms);
2025-04-15T08:07:18.2851051Z     const rooms = await fetchSpaceRooms(spaceId);
2025-04-15T08:07:18.2851251Z     cacheRooms(spaceId, rooms);
2025-04-15T08:07:18.2851336Z     return Promise.resolve(rooms);
2025-04-15T08:07:18.2851401Z   }
2025-04-15T08:07:18.2851405Z 
2025-04-15T08:07:18.2851501Z   const updateSelectedOptions = root => {
2025-04-15T08:07:18.2851578Z     if (!root) return;
2025-04-15T08:07:18.2851840Z     const checkboxes = root.querySelectorAll('.dropdown > .checkbox-container input[type="checkbox"]');
2025-04-15T08:07:18.2851932Z     const selected = Array.from(checkboxes)
2025-04-15T08:07:18.2852029Z       .filter((checkbox) => checkbox.checked)
2025-04-15T08:07:18.2852205Z       .map((checkbox) => ({ value: checkbox.value, name: checkbox.dataset.name }));
2025-04-15T08:07:18.2852210Z 
2025-04-15T08:07:18.2852336Z     const selectedNames = selected.map(({ name }) => name);
2025-04-15T08:07:18.2852471Z     const selectedValues = selected.map(({ value }) => value);
2025-04-15T08:07:18.2852476Z 
2025-04-15T08:07:18.2852612Z     const selectedSpaceIds = state.claim.selectedSpaceIds;
2025-04-15T08:07:18.2852703Z     const spaces = state.cache.spaces;
2025-04-15T08:07:18.2853010Z     const selectedSpaceName = selectedSpaceIds.length ? spaces.find(({ id }) => id == selectedSpaceIds[0])?.name : null;
2025-04-15T08:07:18.2853024Z 
2025-04-15T08:07:18.2853292Z     const dropdownChangeEvent = new CustomEvent("dropdownChange", { detail: { values: selectedValues } });
2025-04-15T08:07:18.2853392Z     root.dispatchEvent(dropdownChangeEvent);
2025-04-15T08:07:18.2853396Z 
2025-04-15T08:07:18.2853517Z     root.querySelector("#selectedItems").textContent =
2025-04-15T08:07:18.2853687Z       selectedNames.length > 0 ? selectedNames.join(", ") : "Select Rooms";
2025-04-15T08:07:18.2853691Z 
2025-04-15T08:07:18.2853844Z     const target = document.getElementById(root.dataset.target);
2025-04-15T08:07:18.2853924Z     target.textContent =
2025-04-15T08:07:18.2854002Z       selected.length > 0
2025-04-15T08:07:18.2854164Z         ? `You are ready to connect your agent to room(s): ${selectedNames.join(
2025-04-15T08:07:18.2854232Z           ", "
2025-04-15T08:07:18.2854384Z         )}${selectedSpaceName ? ` of ${selectedSpaceName} space` : ""}`
2025-04-15T08:07:18.2854447Z         : "";
2025-04-15T08:07:18.2854595Z   }
2025-04-15T08:07:18.2854599Z 
2025-04-15T08:07:18.2854688Z   const bindDropdownOptions = () => {
2025-04-15T08:07:18.2854855Z     document.querySelectorAll(".dropdown-custom").forEach(root => {
2025-04-15T08:07:18.2855016Z       root.querySelectorAll(".nd-checkbox > input").forEach(input => {
2025-04-15T08:07:18.2855192Z         input.addEventListener("change", () => updateSelectedOptions(root));
2025-04-15T08:07:18.2855258Z       });
2025-04-15T08:07:18.2855318Z     });
2025-04-15T08:07:18.2855382Z   }
2025-04-15T08:07:18.2855386Z 
2025-04-15T08:07:18.2855473Z   const buildRoomsList = (rooms = []) => {
2025-04-15T08:07:18.2855673Z     const container = document.getElementById("roomsSelectorOptionsContainer");
2025-04-15T08:07:18.2855745Z     if (container) {
2025-04-15T08:07:18.2855833Z       container.innerHTML = "";
2025-04-15T08:07:18.2855918Z       rooms.forEach(({ id, name }) => {
2025-04-15T08:07:18.2856025Z         const isDefaultSelected = name === "All nodes"
2025-04-15T08:07:18.2856029Z 
2025-04-15T08:07:18.2856213Z         if (isDefaultSelected) {
2025-04-15T08:07:18.2856301Z           setSelectedRoomsStatus(id)
2025-04-15T08:07:18.2856361Z         }
2025-04-15T08:07:18.2856374Z 
2025-04-15T08:07:18.2856518Z         const label = createElem("label", { classList: "nd-checkbox" });
2025-04-15T08:07:18.2856741Z         const input = createElem("input", { type: "checkbox", value: id, checked: isDefaultSelected });
2025-04-15T08:07:18.2856828Z         input.dataset.name = name;
2025-04-15T08:07:18.2856903Z         input.onchange = e => {
2025-04-15T08:07:18.2856998Z           setSelectedRoomsStatus(prev => {
2025-04-15T08:07:18.2857099Z             if (e.target.checked) return [...prev, id];
2025-04-15T08:07:18.2857185Z             return prev.filter(r => r != id);
2025-04-15T08:07:18.2857370Z           });
2025-04-15T08:07:18.2857432Z         }
2025-04-15T08:07:18.2857436Z 
2025-04-15T08:07:18.2857574Z         const span = createElem("span", { classList: "checkmark" });
2025-04-15T08:07:18.2857677Z         const text = document.createTextNode(name);
2025-04-15T08:07:18.2857686Z 
2025-04-15T08:07:18.2857770Z         label.appendChild(input);
2025-04-15T08:07:18.2857852Z         label.appendChild(span);
2025-04-15T08:07:18.2857931Z         label.appendChild(text);
2025-04-15T08:07:18.2858022Z         container.appendChild(label);
2025-04-15T08:07:18.2858084Z       });
2025-04-15T08:07:18.2858088Z 
2025-04-15T08:07:18.2858171Z       bindDropdownOptions();
2025-04-15T08:07:18.2858231Z     }
2025-04-15T08:07:18.2858294Z   }
2025-04-15T08:07:18.2858299Z 
2025-04-15T08:07:18.2858391Z   const buildSpacesList = (spaces = []) => {
2025-04-15T08:07:18.2858527Z     const container = document.getElementById("spacesList");
2025-04-15T08:07:18.2858600Z     if (container) {
2025-04-15T08:07:18.2858684Z       container.innerHTML = "";
2025-04-15T08:07:18.2858804Z       spaces.forEach(({ id, name, permissions = [] }) => {
2025-04-15T08:07:18.2858913Z         if (!permissions.includes("node:Create")) return
2025-04-15T08:07:18.2858921Z 
2025-04-15T08:07:18.2859009Z         const listItem = createElem("li");
2025-04-15T08:07:18.2859090Z         listItem.innerText = name;
2025-04-15T08:07:18.2859178Z         listItem.className = "space-item";
2025-04-15T08:07:18.2859263Z         listItem.dataset.id = id;
2025-04-15T08:07:18.2859349Z         listItem.onclick = async () => {
2025-04-15T08:07:18.2859599Z           document.querySelectorAll(".space-item").forEach(item => item.classList.remove("selected"));
2025-04-15T08:07:18.2859692Z           listItem.classList.add("selected");
2025-04-15T08:07:18.2859780Z           setSelectedSpacesStatus([id]);
2025-04-15T08:07:18.2859845Z         };
2025-04-15T08:07:18.2859933Z         container.appendChild(listItem);
2025-04-15T08:07:18.2860001Z       });
2025-04-15T08:07:18.2860066Z     }
2025-04-15T08:07:18.2860190Z     return Promise.resolve();
2025-04-15T08:07:18.2860298Z   }
2025-04-15T08:07:18.2860306Z 
2025-04-15T08:07:18.2860442Z   const initCustomDropdown = () => {
2025-04-15T08:07:18.2860768Z     const toggleDropdown = e => {
2025-04-15T08:07:18.2860897Z       if (!e.currentTarget) return;
2025-04-15T08:07:18.2861118Z       const checkboxContainer = e.currentTarget.querySelector(".checkbox-container");
2025-04-15T08:07:18.2861198Z       if (checkboxContainer) {
2025-04-15T08:07:18.2861474Z         checkboxContainer.style.display = checkboxContainer.style.display === "block" ? "none" : "block";
2025-04-15T08:07:18.2861541Z       }
2025-04-15T08:07:18.2861600Z     }
2025-04-15T08:07:18.2861605Z 
2025-04-15T08:07:18.2861686Z     const clearSelection = e => {
2025-04-15T08:07:18.2861765Z       if (!e.currentTarget) return;
2025-04-15T08:07:18.2861904Z       const root = e.currentTarget.closest(".dropdown-custom");
2025-04-15T08:07:18.2861968Z       if (root) {
2025-04-15T08:07:18.2862238Z         const checkboxes = root.querySelectorAll('.dropdown > .checkbox-container input[type="checkbox"]');
2025-04-15T08:07:18.2862392Z         checkboxes.forEach((checkbox) => (checkbox.checked = false));
2025-04-15T08:07:18.2862487Z         updateSelectedOptions(root);
2025-04-15T08:07:18.2862557Z       }
2025-04-15T08:07:18.2862619Z     }
2025-04-15T08:07:18.2862623Z 
2025-04-15T08:07:18.2862786Z     document.querySelectorAll(".dropdown-custom").forEach(root => {
2025-04-15T08:07:18.2862911Z       const btnClear = root.querySelector(".clear-button");
2025-04-15T08:07:18.2863025Z       const dropdown = root.querySelector(".dropdown");
2025-04-15T08:07:18.2863101Z       if (dropdown) {
2025-04-15T08:07:18.2863170Z         if (btnClear) {
2025-04-15T08:07:18.2863300Z           btnClear.addEventListener("click", clearSelection);
2025-04-15T08:07:18.2863361Z         }
2025-04-15T08:07:18.2863484Z         dropdown.addEventListener("click", toggleDropdown);
2025-04-15T08:07:18.2863548Z       }
2025-04-15T08:07:18.2863699Z     });
2025-04-15T08:07:18.2863703Z 
2025-04-15T08:07:18.2863808Z     document.addEventListener("click", (e) => {
2025-04-15T08:07:18.2863983Z       document.querySelectorAll(".dropdown-custom").forEach(dropdown => {
2025-04-15T08:07:18.2864177Z         const checkboxContainer = dropdown.querySelector(".checkbox-container");
2025-04-15T08:07:18.2864336Z         if (dropdown && checkboxContainer && !dropdown.contains(e.target)) {
2025-04-15T08:07:18.2864442Z           checkboxContainer.style.display = "none";
2025-04-15T08:07:18.2864507Z         }
2025-04-15T08:07:18.2864566Z       });
2025-04-15T08:07:18.2864628Z     });
2025-04-15T08:07:18.2864632Z 
2025-04-15T08:07:18.2864712Z     return Promise.resolve();
2025-04-15T08:07:18.2864776Z   }
2025-04-15T08:07:18.2864779Z 
2025-04-15T08:07:18.2864867Z   const initClaimingElements = () => {
2025-04-15T08:07:18.2865019Z     const claimCommand = document.getElementById("claimCommand");
2025-04-15T08:07:18.2865146Z     const claimTip = document.getElementById("claimTip");
2025-04-15T08:07:18.2865313Z     const btnPrev = document.getElementById("btnConnectionStepPrev");
2025-04-15T08:07:18.2865473Z     const btnNext = document.getElementById("btnConnectionStepNext");
2025-04-15T08:07:18.2865598Z     const btnClaim = document.getElementById("btnClaim");
2025-04-15T08:07:18.2865791Z     const claimingPrivateKey = document.getElementById("claimingPrivateKey");
2025-04-15T08:07:18.2865795Z 
2025-04-15T08:07:18.2865905Z     if (claimCommand && !!state.claim?.status?.command) {
2025-04-15T08:07:18.2866036Z       claimCommand.innerText = state.claim.status.command;
2025-04-15T08:07:18.2866344Z     }
2025-04-15T08:07:18.2866349Z 
2025-04-15T08:07:18.2866459Z     if (claimTip && !!state.claim?.status?.key_filename) {
2025-04-15T08:07:18.2867172Z       claimTip.innerText = `Tip: If the command doesn’t work out-of-the-box, locate the ${state.claim.status.key_filename} file, open it in your favourite text editor, and copy it to your clipboard.`;
2025-04-15T08:07:18.2867247Z     }
2025-04-15T08:07:18.2867251Z 
2025-04-15T08:07:18.2867328Z     if (btnPrev) {
2025-04-15T08:07:18.2867431Z       btnPrev.addEventListener("click", () => {
2025-04-15T08:07:18.2867526Z         setClaimingStep(prev => prev - 1);
2025-04-15T08:07:18.2867741Z       });
2025-04-15T08:07:18.2867802Z     }
2025-04-15T08:07:18.2867807Z 
2025-04-15T08:07:18.2867877Z     if (btnNext) {
2025-04-15T08:07:18.2868020Z       btnNext.addEventListener("click", async () => {
2025-04-15T08:07:18.2868157Z         const newStep = await setClaimingStep(prev => prev + 1);
2025-04-15T08:07:18.2868299Z         if (newStep == 2 && !!state.claim.selectedSpaceIds.length) {
2025-04-15T08:07:18.2868414Z           const spaceId = state.claim.selectedSpaceIds[0];
2025-04-15T08:07:18.2868519Z           const rooms = await getSpaceRooms(spaceId);
2025-04-15T08:07:18.2868600Z           buildRoomsList(rooms);
2025-04-15T08:07:18.2868694Z           await getClaimingToken(spaceId);
2025-04-15T08:07:18.2868755Z         }
2025-04-15T08:07:18.2868826Z       });
2025-04-15T08:07:18.2868885Z     }
2025-04-15T08:07:18.2868889Z 
2025-04-15T08:07:18.2868956Z     if (btnClaim) {
2025-04-15T08:07:18.2869073Z       btnClaim.addEventListener("click", async () => {
2025-04-15T08:07:18.2869183Z         toggleClaimingAgentLoadingState(true);
2025-04-15T08:07:18.2869275Z         await setClaimResponseState({});
2025-04-15T08:07:18.2869455Z         const { selectedSpaceIds, selectedRoomIds, privateKey } = state.claim;
2025-04-15T08:07:18.2869759Z         const { token } = selectedSpaceIds.length ? state.cache.claimingTokensPerSpace[selectedSpaceIds[0]] || {} : {};
2025-04-15T08:07:18.2869768Z 
2025-04-15T08:07:18.2869841Z         let didCatch = false;
2025-04-15T08:07:18.2870076Z         const data = await claimAgent({ key: privateKey, token, rooms: selectedRoomIds }).catch(err => {
2025-04-15T08:07:18.2870152Z           didCatch = true;
2025-04-15T08:07:18.2870265Z           setClaimResponseState({ error: err.message });
2025-04-15T08:07:18.2870447Z         })
2025-04-15T08:07:18.2870452Z 
2025-04-15T08:07:18.2870536Z         if (data === "invalid key") {
2025-04-15T08:07:18.2870611Z           didCatch = true;
2025-04-15T08:07:18.2870723Z           setClaimResponseState({ error: "Invalid key" });
2025-04-15T08:07:18.2870789Z         }
2025-04-15T08:07:18.2870894Z         toggleClaimingAgentLoadingState(false);
2025-04-15T08:07:18.2870898Z 
2025-04-15T08:07:18.2870970Z         if (didCatch) return;
2025-04-15T08:07:18.2870975Z 
2025-04-15T08:07:18.2871042Z         if (data) {
2025-04-15T08:07:18.2871113Z           if (data.success) {
2025-04-15T08:07:18.2871199Z             window.location.reload();
2025-04-15T08:07:18.2871265Z           } else {
2025-04-15T08:07:18.2871351Z             setClaimResponseState(data);
2025-04-15T08:07:18.2871417Z           }
2025-04-15T08:07:18.2871478Z         }
2025-04-15T08:07:18.2871543Z       });
2025-04-15T08:07:18.2871602Z     }
2025-04-15T08:07:18.2871606Z 
2025-04-15T08:07:18.2871683Z     if (claimingPrivateKey) {
2025-04-15T08:07:18.2871963Z       claimingPrivateKey.addEventListener("input", e => setClaimingPrivateKeyState(e.target.value));
2025-04-15T08:07:18.2872025Z     }
2025-04-15T08:07:18.2872087Z   }
2025-04-15T08:07:18.2872095Z 
2025-04-15T08:07:18.2872179Z   const setClaimStatus = async () => {
2025-04-15T08:07:18.2872259Z     const status = await claimAgent();
2025-04-15T08:07:18.2872339Z     const claimStatus = {
2025-04-15T08:07:18.2872473Z       command: status.cmd || `sudo cat ${status.key_filename}`,
2025-04-15T08:07:18.2872542Z       ...status
2025-04-15T08:07:18.2872601Z     };
2025-04-15T08:07:18.2872699Z     await setClaimStatusState(claimStatus);
2025-04-15T08:07:18.2872778Z     return Promise.resolve();
2025-04-15T08:07:18.2872837Z   }
2025-04-15T08:07:18.2872840Z 
2025-04-15T08:07:18.2872933Z   const prepareClaiming = async agent => {
2025-04-15T08:07:18.2873012Z     await setClaimStatus();
2025-04-15T08:07:18.2873096Z     setupOptOutMessage(agent)
2025-04-15T08:07:18.2873177Z     const spaces = await getSpaces();
2025-04-15T08:07:18.2873266Z     await buildSpacesList(spaces);
2025-04-15T08:07:18.2873347Z     initCustomDropdown();
2025-04-15T08:07:18.2873425Z     initClaimingElements();
2025-04-15T08:07:18.2873580Z     syncUI();
2025-04-15T08:07:18.2873640Z   }
2025-04-15T08:07:18.2873645Z 
2025-04-15T08:07:18.2873724Z   const startLoading = () => {
2025-04-15T08:07:18.2873803Z     const body = document.body;
2025-04-15T08:07:18.2873870Z     if (body) {
2025-04-15T08:07:18.2873958Z       body.classList.add("loading");
2025-04-15T08:07:18.2874019Z     }
2025-04-15T08:07:18.2874081Z   }
2025-04-15T08:07:18.2874085Z 
2025-04-15T08:07:18.2874159Z   const stopLoading = () => {
2025-04-15T08:07:18.2874235Z     const body = document.body;
2025-04-15T08:07:18.2874301Z     if (body) {
2025-04-15T08:07:18.2874391Z       body.classList.remove("loading");
2025-04-15T08:07:18.2874495Z       window.dispatchEvent(new Event("resize"));
2025-04-15T08:07:18.2874555Z     }
2025-04-15T08:07:18.2874614Z   }
2025-04-15T08:07:18.2874626Z 
2025-04-15T08:07:18.2874774Z   const showErrorMessage = (message = defaultErrorMessage) => {
2025-04-15T08:07:18.2874949Z     const messageContainer = document.getElementById("loadingMessage");
2025-04-15T08:07:18.2875033Z     if (messageContainer) {
2025-04-15T08:07:18.2875126Z       messageContainer.innerHTML = message;
2025-04-15T08:07:18.2875199Z       startLoading();
2025-04-15T08:07:18.2875259Z     }
2025-04-15T08:07:18.2875317Z   }
2025-04-15T08:07:18.2875321Z 
2025-04-15T08:07:18.2875400Z   const initMetrics = data => {
2025-04-15T08:07:18.2875594Z     if (!data?.agents?.[0]) return Promise.reject({ message: "No agent data available." })
2025-04-15T08:07:18.2875599Z 
2025-04-15T08:07:18.2875742Z     const setPercentageBarWidth = (containerId, percent) => {
2025-04-15T08:07:18.2875873Z       const container = document.getElementById(containerId);
2025-04-15T08:07:18.2875943Z       if (container) {
2025-04-15T08:07:18.2876194Z         const percentageContainer = document.createElement("div");
2025-04-15T08:07:18.2876465Z         percentageContainer.className = "percentage-container";
2025-04-15T08:07:18.2876475Z 
2025-04-15T08:07:18.2876599Z         const percentageBar = document.createElement("div");
2025-04-15T08:07:18.2876714Z         percentageBar.className = "percentage-bar";
2025-04-15T08:07:18.2876823Z         percentageBar.style.width = percent + "%";
2025-04-15T08:07:18.2876827Z 
2025-04-15T08:07:18.2876953Z         const percentageText = document.createElement("div");
2025-04-15T08:07:18.2877070Z         percentageText.className = "percentage-text";
2025-04-15T08:07:18.2877298Z         percentageText.innerText = percent + "%"; // Display the rounded percentage value with "%"
2025-04-15T08:07:18.2877303Z 
2025-04-15T08:07:18.2877440Z         // Calculate the right position dynamically, capped at 96%
2025-04-15T08:07:18.2877572Z         const rightPosition = Math.min(100 - percent, 96) + "%";
2025-04-15T08:07:18.2877678Z         percentageText.style.right = rightPosition;
2025-04-15T08:07:18.2877687Z 
2025-04-15T08:07:18.2877813Z         percentageContainer.appendChild(percentageBar);
2025-04-15T08:07:18.2878031Z         percentageContainer.appendChild(percentageText); // Append the percentage text
2025-04-15T08:07:18.2878040Z 
2025-04-15T08:07:18.2878148Z         container.appendChild(percentageContainer);
2025-04-15T08:07:18.2878210Z       }
2025-04-15T08:07:18.2878273Z     }
2025-04-15T08:07:18.2878277Z 
2025-04-15T08:07:18.2878382Z     const units = ["", "K", "M", "B", "T", "P", "E"]
2025-04-15T08:07:18.2878387Z 
2025-04-15T08:07:18.2878479Z     const abbreviateNumber = number => {
2025-04-15T08:07:18.2878551Z       if (!number) return 0
2025-04-15T08:07:18.2878612Z     
2025-04-15T08:07:18.2878724Z       const tier = (Math.log10(Math.abs(number)) / 3) | 0
2025-04-15T08:07:18.2878784Z     
2025-04-15T08:07:18.2878863Z       if (!tier) return number
2025-04-15T08:07:18.2878923Z     
2025-04-15T08:07:18.2879000Z       const suffix = units[tier]
2025-04-15T08:07:18.2879092Z       const scale = Math.pow(10, tier * 3)
2025-04-15T08:07:18.2879171Z       const scaled = number / scale
2025-04-15T08:07:18.2879257Z       return scaled.toFixed(1) + suffix
2025-04-15T08:07:18.2879318Z     }
2025-04-15T08:07:18.2879432Z 
2025-04-15T08:07:18.2879516Z     const formatBytes = (bytes) => {
2025-04-15T08:07:18.2879597Z       if (bytes === 0) return "0 Bytes";
2025-04-15T08:07:18.2879667Z       const k = 1024,
2025-04-15T08:07:18.2879796Z         sizes = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"],
2025-04-15T08:07:18.2879898Z         i = Math.floor(Math.log(bytes) / Math.log(k));
2025-04-15T08:07:18.2879965Z       return (
2025-04-15T08:07:18.2880113Z         parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i]
2025-04-15T08:07:18.2880175Z       );
2025-04-15T08:07:18.2880237Z     }
2025-04-15T08:07:18.2880241Z 
2025-04-15T08:07:18.2880334Z     const formatLargeNumbers = (number) => {
2025-04-15T08:07:18.2880424Z       return number.toLocaleString();
2025-04-15T08:07:18.2880489Z     }
2025-04-15T08:07:18.2880493Z 
2025-04-15T08:07:18.2880591Z     const formatTimestamp = (timestamp) => {
2025-04-15T08:07:18.2880683Z       const date = new Date(timestamp * 1000);
2025-04-15T08:07:18.2880791Z       const months = [
2025-04-15T08:07:18.2880913Z         "Jan",
2025-04-15T08:07:18.2881021Z         "Feb",
2025-04-15T08:07:18.2881138Z         "Mar",
2025-04-15T08:07:18.2881243Z         "Apr",
2025-04-15T08:07:18.2881309Z         "May",
2025-04-15T08:07:18.2881441Z         "Jun",
2025-04-15T08:07:18.2881559Z         "Jul",
2025-04-15T08:07:18.2881639Z         "Aug",
2025-04-15T08:07:18.2881705Z         "Sep",
2025-04-15T08:07:18.2881768Z         "Oct",
2025-04-15T08:07:18.2881834Z         "Nov",
2025-04-15T08:07:18.2881895Z         "Dec",
2025-04-15T08:07:18.2881960Z       ];
2025-04-15T08:07:18.2882095Z       const days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
2025-04-15T08:07:18.2882188Z       const day = days[date.getUTCDay()];
2025-04-15T08:07:18.2882290Z       const month = months[date.getUTCMonth()];
2025-04-15T08:07:18.2882486Z       const year = date.getUTCFullYear();
2025-04-15T08:07:18.2882644Z       const hours = date.getUTCHours().toString().padStart(2, "0");
2025-04-15T08:07:18.2882809Z       const minutes = date.getUTCMinutes().toString().padStart(2, "0");
2025-04-15T08:07:18.2882964Z       const seconds = date.getUTCSeconds().toString().padStart(2, "0");
2025-04-15T08:07:18.2882969Z 
2025-04-15T08:07:18.2883145Z       return `${month} ${date.getUTCDate()}, ${year} ${hours}:${minutes}:${seconds}`;
2025-04-15T08:07:18.2883209Z     }
2025-04-15T08:07:18.2883217Z 
2025-04-15T08:07:18.2883340Z     const formatDuration = (seconds, short = false) => {
2025-04-15T08:07:18.2883428Z       if (seconds <= 0) return "0 seconds";
2025-04-15T08:07:18.2883537Z       const days = Math.floor(seconds / (24 * 3600));
2025-04-15T08:07:18.2883659Z       const hours = Math.floor((seconds % (24 * 3600)) / 3600);
2025-04-15T08:07:18.2883770Z       const minutes = Math.floor((seconds % 3600) / 60);
2025-04-15T08:07:18.2883870Z       const remainingSeconds = seconds % 60;
2025-04-15T08:07:18.2883874Z 
2025-04-15T08:07:18.2883942Z       if (short) {
2025-04-15T08:07:18.2884017Z         if (days > 3) {
2025-04-15T08:07:18.2884100Z           return days + " days";
2025-04-15T08:07:18.2884179Z         } else if (days > 0) {
2025-04-15T08:07:18.2884266Z           return days * 24 + hours + " hours";
2025-04-15T08:07:18.2884333Z         }
2025-04-15T08:07:18.2884395Z       }
2025-04-15T08:07:18.2884399Z 
2025-04-15T08:07:18.2884471Z       const parts = [];
2025-04-15T08:07:18.2884608Z       if (days > 0) parts.push(days + " day" + (days > 1 ? "s" : ""));
2025-04-15T08:07:18.2884747Z       if (hours > 0) parts.push(hours + " hour" + (hours > 1 ? "s" : ""));
2025-04-15T08:07:18.2884822Z       if (minutes > 0)
2025-04-15T08:07:18.2884956Z         parts.push(minutes + " minute" + (minutes > 1 ? "s" : ""));
2025-04-15T08:07:18.2885041Z       if (remainingSeconds > 0)
2025-04-15T08:07:18.2885114Z         parts.push(
2025-04-15T08:07:18.2885272Z           remainingSeconds + " second" + (remainingSeconds > 1 ? "s" : "")
2025-04-15T08:07:18.2885337Z         );
2025-04-15T08:07:18.2885470Z       return parts.join(" • ");
2025-04-15T08:07:18.2885642Z     }
2025-04-15T08:07:18.2885646Z 
2025-04-15T08:07:18.2885735Z     const createKeyValuePairs = (
2025-04-15T08:07:18.2885804Z       containerId,
2025-04-15T08:07:18.2885872Z       dataObject,
2025-04-15T08:07:18.2885937Z       keys = null,
2025-04-15T08:07:18.2886014Z       shortFormat = false,
2025-04-15T08:07:18.2886211Z       usePercentageBar = false
2025-04-15T08:07:18.2886275Z     ) => {
2025-04-15T08:07:18.2886415Z       const container = document.getElementById(containerId);
2025-04-15T08:07:18.2886490Z       if (!container) return;
2025-04-15T08:07:18.2886635Z       if (dataObject === null || typeof dataObject !== "object") return
2025-04-15T08:07:18.2886640Z 
2025-04-15T08:07:18.2886750Z       container.innerHTML = ""; // Clear the container
2025-04-15T08:07:18.2886763Z 
2025-04-15T08:07:18.2886878Z       const keysToUse = keys || Object.keys(dataObject);
2025-04-15T08:07:18.2886882Z 
2025-04-15T08:07:18.2886971Z       keysToUse.forEach(function (key) {
2025-04-15T08:07:18.2887081Z         if (dataObject.hasOwnProperty(key)) {
2025-04-15T08:07:18.2887174Z           let value = dataObject[key].toString();
2025-04-15T08:07:18.2887252Z           if (value === "false") return;
2025-04-15T08:07:18.2887257Z 
2025-04-15T08:07:18.2887340Z           if (key === "cpu_frequency") {
2025-04-15T08:07:18.2887456Z             value = (dataObject[key] / 1e9).toFixed(2) + " GHz";
2025-04-15T08:07:18.2887530Z           } else if (
2025-04-15T08:07:18.2887601Z             key === "ram" ||
2025-04-15T08:07:18.2887670Z             key === "disk" ||
2025-04-15T08:07:18.2887751Z             key === "disk_used" ||
2025-04-15T08:07:18.2887821Z             key === "disk_max"
2025-04-15T08:07:18.2887885Z           ) {
2025-04-15T08:07:18.2887977Z             value = formatBytes(dataObject[key]);
2025-04-15T08:07:18.2888177Z           } else if (
2025-04-15T08:07:18.2888253Z             key === "samples" ||
2025-04-15T08:07:18.2888342Z             key === "currently_collected_metrics"
2025-04-15T08:07:18.2888412Z           ) {
2025-04-15T08:07:18.2888519Z             value = formatLargeNumbers(dataObject[key]);
2025-04-15T08:07:18.2888619Z           } else if (key === "from" || key === "to") {
2025-04-15T08:07:18.2888722Z             value = formatTimestamp(dataObject[key]);
2025-04-15T08:07:18.2888788Z           } else if (
2025-04-15T08:07:18.2888867Z             key === "retention" ||
2025-04-15T08:07:18.2888952Z             key === "expected_retention" ||
2025-04-15T08:07:18.2889038Z             key === "requested_retention"
2025-04-15T08:07:18.2889101Z           ) {
2025-04-15T08:07:18.2889233Z             value = formatDuration(dataObject[key], shortFormat);
2025-04-15T08:07:18.2889321Z           } else if (key === "disk_percent") {
2025-04-15T08:07:18.2889523Z             const roundedValue = Math.round(dataObject[key]); // Round the percentage value
2025-04-15T08:07:18.2889614Z             if (usePercentageBar) {
2025-04-15T08:07:18.2889741Z               setPercentageBarWidth(containerId, roundedValue);
2025-04-15T08:07:18.2889899Z               return; // No need to create key-value pair for percentage bar
2025-04-15T08:07:18.2889966Z             } else {
2025-04-15T08:07:18.2890108Z               value = roundedValue + "%"; // Append "%" to the rounded value
2025-04-15T08:07:18.2890175Z             }
2025-04-15T08:07:18.2890237Z           }
2025-04-15T08:07:18.2890241Z 
2025-04-15T08:07:18.2890319Z           const div = getDOM({
2025-04-15T08:07:18.2890389Z             tag: "div",
2025-04-15T08:07:18.2890471Z             classList: "key-value",
2025-04-15T08:07:18.2890540Z             children: [
2025-04-15T08:07:18.2890601Z               {
2025-04-15T08:07:18.2890676Z                 tag: "span",
2025-04-15T08:07:18.2890853Z                 innerText: key.charAt(0).toUpperCase() + key.slice(1).replace(/_/g, " ")
2025-04-15T08:07:18.2890923Z               },
2025-04-15T08:07:18.2890986Z               {
2025-04-15T08:07:18.2891057Z                 tag: "span",
2025-04-15T08:07:18.2891135Z                 innerText: value,
2025-04-15T08:07:18.2891334Z                 condition: value !== "true"
2025-04-15T08:07:18.2891400Z               }
2025-04-15T08:07:18.2891464Z             ]
2025-04-15T08:07:18.2891529Z           });
2025-04-15T08:07:18.2891533Z 
2025-04-15T08:07:18.2891621Z           container.appendChild(div);
2025-04-15T08:07:18.2891685Z         }
2025-04-15T08:07:18.2891749Z       });
2025-04-15T08:07:18.2891810Z     }
2025-04-15T08:07:18.2891814Z 
2025-04-15T08:07:18.2891914Z     const setupCollectedMetrics = data => {
2025-04-15T08:07:18.2891997Z       const agent = data?.agents?.[0]
2025-04-15T08:07:18.2892185Z       const metricsFromDbSize = agent?.db_size?.[0]?.currently_collected_metrics
2025-04-15T08:07:18.2892470Z       const collectedMetrics = metricsFromDbSize !== undefined ? metricsFromDbSize : agent?.metrics?.collected;
2025-04-15T08:07:18.2892637Z       const container = document.getElementById("collectedMetrics");
2025-04-15T08:07:18.2892769Z       if (collectedMetrics === undefined || !container) return;
2025-04-15T08:07:18.2892779Z 
2025-04-15T08:07:18.2892852Z       const div = getDOM({
2025-04-15T08:07:18.2892922Z         tag: "div",
2025-04-15T08:07:18.2892999Z         classList: "key-value",
2025-04-15T08:07:18.2893066Z         children: [
2025-04-15T08:07:18.2893132Z           {
2025-04-15T08:07:18.2893202Z             tag: "span",
2025-04-15T08:07:18.2893306Z             innerText: "Currently Collected Metrics"
2025-04-15T08:07:18.2893367Z           },
2025-04-15T08:07:18.2893429Z           {
2025-04-15T08:07:18.2893501Z             tag: "span",
2025-04-15T08:07:18.2893818Z             innerText: collectedMetrics > 99999 ? abbreviateNumber(collectedMetrics) : formatLargeNumbers(collectedMetrics),
2025-04-15T08:07:18.2894064Z             // ...(collectedMetrics > 99999 ? { dataset: { tooltip: formatLargeNumbers(collectedMetrics) } } : {})
2025-04-15T08:07:18.2894215Z           }
2025-04-15T08:07:18.2894278Z         ]
2025-04-15T08:07:18.2894337Z       });
2025-04-15T08:07:18.2894346Z 
2025-04-15T08:07:18.2894430Z       container.appendChild(div);
2025-04-15T08:07:18.2894498Z     }
2025-04-15T08:07:18.2894502Z 
2025-04-15T08:07:18.2894572Z     const buildTier = ({
2025-04-15T08:07:18.2894649Z       tier: index,
2025-04-15T08:07:18.2894716Z       granularity,
2025-04-15T08:07:18.2894784Z       metrics,
2025-04-15T08:07:18.2894848Z       samples,
2025-04-15T08:07:18.2894918Z       retention_human,
2025-04-15T08:07:18.2895001Z       expected_retention_human,
2025-04-15T08:07:18.2895081Z       requested_retention_human,
2025-04-15T08:07:18.2895150Z       disk_used,
2025-04-15T08:07:18.2895217Z       disk_percent,
2025-04-15T08:07:18.2895283Z       disk_max,
2025-04-15T08:07:18.2895350Z       ...rest
2025-04-15T08:07:18.2895411Z     }) => {
2025-04-15T08:07:18.2895569Z       const disk_used_exists = disk_used !== null && !isNaN(disk_used)
2025-04-15T08:07:18.2895704Z       const disk_max_exists = disk_max !== null && !isNaN(disk_max)
2025-04-15T08:07:18.2895709Z 
2025-04-15T08:07:18.2895795Z       const contentsStructure = {
2025-04-15T08:07:18.2895866Z         tag: "tr",
2025-04-15T08:07:18.2895934Z         children: [
2025-04-15T08:07:18.2896000Z           {
2025-04-15T08:07:18.2896162Z             tag: "td",
2025-04-15T08:07:18.2896245Z             classList: "cell-data",
2025-04-15T08:07:18.2896321Z             textContent: index
2025-04-15T08:07:18.2896382Z           },
2025-04-15T08:07:18.2896448Z           {
2025-04-15T08:07:18.2896515Z             tag: "td",
2025-04-15T08:07:18.2896591Z             classList: "cell-data",
2025-04-15T08:07:18.2896671Z             textContent: granularity
2025-04-15T08:07:18.2896732Z           },
2025-04-15T08:07:18.2896796Z           {
2025-04-15T08:07:18.2896861Z             tag: "td",
2025-04-15T08:07:18.2896965Z             classList: "cell-data section-start",
2025-04-15T08:07:18.2897038Z             children: [
2025-04-15T08:07:18.2897100Z               {
2025-04-15T08:07:18.2897174Z                 tag: "span",
2025-04-15T08:07:18.2897276Z                 textContent: abbreviateNumber(metrics),
2025-04-15T08:07:18.2897521Z                 // dataset: { tooltip: formatLargeNumbers(metrics) }
2025-04-15T08:07:18.2897583Z               }
2025-04-15T08:07:18.2897648Z             ]
2025-04-15T08:07:18.2897708Z           },
2025-04-15T08:07:18.2897769Z           {
2025-04-15T08:07:18.2897839Z             tag: "td",
2025-04-15T08:07:18.2897915Z             classList: "cell-data",
2025-04-15T08:07:18.2897983Z             children: [
2025-04-15T08:07:18.2898045Z               {
2025-04-15T08:07:18.2898114Z                 tag: "span",
2025-04-15T08:07:18.2898222Z                 textContent: abbreviateNumber(samples),
2025-04-15T08:07:18.2898340Z                 // dataset: { tooltip: formatLargeNumbers(samples) }
2025-04-15T08:07:18.2898416Z               }
2025-04-15T08:07:18.2898477Z             ]
2025-04-15T08:07:18.2898538Z           },
2025-04-15T08:07:18.2898604Z           {
2025-04-15T08:07:18.2898670Z             tag: "td",
2025-04-15T08:07:18.2898771Z             classList: "cell-data section-start",
2025-04-15T08:07:18.2898866Z             textContent: retention_human || "-"
2025-04-15T08:07:18.2898928Z           },
2025-04-15T08:07:18.2898992Z           {
2025-04-15T08:07:18.2899057Z             tag: "td",
2025-04-15T08:07:18.2899138Z             classList: "cell-data",
2025-04-15T08:07:18.2899247Z             textContent: expected_retention_human || "-"
2025-04-15T08:07:18.2899313Z           },
2025-04-15T08:07:18.2899374Z           {
2025-04-15T08:07:18.2899439Z             tag: "td",
2025-04-15T08:07:18.2899520Z             classList: "cell-data",
2025-04-15T08:07:18.2899628Z             textContent: requested_retention_human || "-"
2025-04-15T08:07:18.2899693Z           },
2025-04-15T08:07:18.2899752Z           {
2025-04-15T08:07:18.2899934Z             tag: "td",
2025-04-15T08:07:18.2900029Z             classList: "cell-data section-start",
2025-04-15T08:07:18.2900095Z             children: [
2025-04-15T08:07:18.2900159Z               {
2025-04-15T08:07:18.2900284Z                 className: "progress-indicator flex flex-col",
2025-04-15T08:07:18.2900356Z                 children: [
2025-04-15T08:07:18.2900422Z                   {
2025-04-15T08:07:18.2900496Z                     tag: "span",
2025-04-15T08:07:18.2900650Z                     textContent: disk_used_exists ? formatBytes(disk_used) : "-"
2025-04-15T08:07:18.2900716Z                   },
2025-04-15T08:07:18.2900801Z                   ...(disk_used_exists ? [{
2025-04-15T08:07:18.2900906Z                     className: "progress-bar-container",
2025-04-15T08:07:18.2900980Z                     children: [
2025-04-15T08:07:18.2901051Z                       {
2025-04-15T08:07:18.2901141Z                         className: "progress-bar",
2025-04-15T08:07:18.2901216Z                         dataset: {
2025-04-15T08:07:18.2901303Z                           fill: disk_percent
2025-04-15T08:07:18.2901373Z                         }
2025-04-15T08:07:18.2901441Z                       }
2025-04-15T08:07:18.2901509Z                     ]
2025-04-15T08:07:18.2901580Z                   }] : [])
2025-04-15T08:07:18.2901643Z                 ]
2025-04-15T08:07:18.2901706Z               }
2025-04-15T08:07:18.2901774Z             ]
2025-04-15T08:07:18.2901837Z           },
2025-04-15T08:07:18.2901901Z           {
2025-04-15T08:07:18.2901968Z             tag: "td",
2025-04-15T08:07:18.2902045Z             classList: "cell-data",
2025-04-15T08:07:18.2902193Z             textContent: disk_max_exists ? formatBytes(disk_max) : "-"
2025-04-15T08:07:18.2902256Z           }
2025-04-15T08:07:18.2902322Z         ]
2025-04-15T08:07:18.2902384Z       }
2025-04-15T08:07:18.2902388Z 
2025-04-15T08:07:18.2902479Z       return getDOM(contentsStructure);
2025-04-15T08:07:18.2902540Z     }
2025-04-15T08:07:18.2902550Z 
2025-04-15T08:07:18.2902627Z     const buildTiers = () => {
2025-04-15T08:07:18.2902726Z       const tiers = data.agents[0].db_size || [];
2025-04-15T08:07:18.2902935Z       const placeholder = document.getElementById("tiers-table-data-placeholder");
2025-04-15T08:07:18.2903130Z       if (placeholder && !!tiers.length) {
2025-04-15T08:07:18.2903219Z         const rows = tiers.map(buildTier)
2025-04-15T08:07:18.2903317Z         placeholder.replaceWith(...rows);
2025-04-15T08:07:18.2903380Z       }
2025-04-15T08:07:18.2903384Z 
2025-04-15T08:07:18.2903464Z       return Promise.resolve()
2025-04-15T08:07:18.2903531Z     }
2025-04-15T08:07:18.2903535Z 
2025-04-15T08:07:18.2903623Z     const setupProgressBars = () => {
2025-04-15T08:07:18.2903774Z       document.querySelectorAll(".progress-bar").forEach(el => {
2025-04-15T08:07:18.2903857Z         const fill = el.dataset.fill
2025-04-15T08:07:18.2903938Z         el.style.width = `${fill}%`
2025-04-15T08:07:18.2904003Z       })
2025-04-15T08:07:18.2904070Z     }
2025-04-15T08:07:18.2904074Z 
2025-04-15T08:07:18.2904246Z     createKeyValuePairs("kernel", data.agents[0].application.os, [
2025-04-15T08:07:18.2904319Z       "kernel",
2025-04-15T08:07:18.2904394Z     ]);
2025-04-15T08:07:18.2904582Z     createKeyValuePairs("kernelVersion", data.agents[0].application.os, [
2025-04-15T08:07:18.2904653Z       "kernel_version",
2025-04-15T08:07:18.2904719Z     ]);
2025-04-15T08:07:18.2904882Z     createKeyValuePairs("id", data.agents[0].application.os, ["id"]);
2025-04-15T08:07:18.2905043Z     createKeyValuePairs("os", data.agents[0].application.os, ["os"]);
2025-04-15T08:07:18.2905048Z 
2025-04-15T08:07:18.2905228Z     createKeyValuePairs("package", data.agents[0].application.package, [
2025-04-15T08:07:18.2905298Z       "version",
2025-04-15T08:07:18.2905358Z     ]);
2025-04-15T08:07:18.2905436Z     createKeyValuePairs(
2025-04-15T08:07:18.2905508Z       "directories",
2025-04-15T08:07:18.2905602Z       data.agents[0].application.directories
2025-04-15T08:07:18.2905771Z     );
2025-04-15T08:07:18.2905900Z     createKeyValuePairs("server", data.agents[0], ["nm"]);
2025-04-15T08:07:18.2906156Z     createKeyValuePairs("cpuCores", data.agents[0].application.hw, [
2025-04-15T08:07:18.2906236Z       "cpu_cores",
2025-04-15T08:07:18.2906298Z     ]);
2025-04-15T08:07:18.2906473Z     createKeyValuePairs("cpuFrequency", data.agents[0].application.hw, [
2025-04-15T08:07:18.2906543Z       "cpu_frequency",
2025-04-15T08:07:18.2906607Z     ]);
2025-04-15T08:07:18.2906776Z     createKeyValuePairs("ram", data.agents[0].application.hw, ["ram"]);
2025-04-15T08:07:18.2906948Z     createKeyValuePairs("disk", data.agents[0].application.hw, ["disk"]);
2025-04-15T08:07:18.2907138Z     createKeyValuePairs("cpuArchitecture", data.agents[0].application.hw, [
2025-04-15T08:07:18.2907213Z       "cpu_architecture",
2025-04-15T08:07:18.2907275Z     ]);
2025-04-15T08:07:18.2907455Z     createKeyValuePairs("virtualization", data.agents[0].application.hw, [
2025-04-15T08:07:18.2907526Z       "virtualization",
2025-04-15T08:07:18.2907593Z     ]);
2025-04-15T08:07:18.2907762Z     createKeyValuePairs("cloud_status", data.agents[0].cloud, ["status"]);
2025-04-15T08:07:18.2907914Z     createKeyValuePairs("nodes_streaming", data.agents[0].nodes);
2025-04-15T08:07:18.2908092Z     createKeyValuePairs("plugins", data.agents[0].application.plugins);
2025-04-15T08:07:18.2908245Z     createKeyValuePairs("libs", data.agents[0].application.libs);
2025-04-15T08:07:18.2908426Z     createKeyValuePairs("exporters", data.agents[0].application.exporters);
2025-04-15T08:07:18.2908512Z     setupCollectedMetrics(data);
2025-04-15T08:07:18.2908516Z 
2025-04-15T08:07:18.2908621Z     buildTiers().then(() => setupProgressBars())
2025-04-15T08:07:18.2908625Z 
2025-04-15T08:07:18.2908705Z     return Promise.resolve();
2025-04-15T08:07:18.2908771Z   }
2025-04-15T08:07:18.2908775Z 
2025-04-15T08:07:18.2908852Z   const initTooltips = () => {
2025-04-15T08:07:18.2908979Z     const tooltip = document.getElementById("tooltip");
2025-04-15T08:07:18.2909055Z     if (!tooltip) return;
2025-04-15T08:07:18.2909059Z 
2025-04-15T08:07:18.2909210Z     document.querySelectorAll("[data-tooltip]").forEach(elem => {
2025-04-15T08:07:18.2909315Z       elem.addEventListener("mouseenter", () => {
2025-04-15T08:07:18.2909527Z         const content = elem.dataset.tooltip;
2025-04-15T08:07:18.2909635Z         const rect = elem.getBoundingClientRect();
2025-04-15T08:07:18.2909718Z         const top = rect.bottom + 10;
2025-04-15T08:07:18.2909796Z         const left = rect.x;
2025-04-15T08:07:18.2909883Z         tooltip.textContent = content;
2025-04-15T08:07:18.2909971Z         tooltip.style.top = `${top}px`;
2025-04-15T08:07:18.2910063Z         tooltip.style.left = `${left}px`;
2025-04-15T08:07:18.2910151Z         tooltip.style.display = "block";
2025-04-15T08:07:18.2910218Z       });
2025-04-15T08:07:18.2910222Z 
2025-04-15T08:07:18.2910320Z       elem.addEventListener("mouseleave", () => {
2025-04-15T08:07:18.2910405Z         tooltip.textContent = "";
2025-04-15T08:07:18.2910495Z         tooltip.style.display = "none";
2025-04-15T08:07:18.2910556Z       })
2025-04-15T08:07:18.2910620Z     })
2025-04-15T08:07:18.2910679Z   }
2025-04-15T08:07:18.2910684Z 
2025-04-15T08:07:18.2910751Z   /**
2025-04-15T08:07:18.2910847Z    * Get agent info and initialize splash screen
2025-04-15T08:07:18.2910906Z    */
2025-04-15T08:07:18.2910998Z   const initSplashScreen = async () => {
2025-04-15T08:07:18.2911133Z     const msgSignIn = document.getElementById("msgSignIn");
2025-04-15T08:07:18.2911266Z     const btnSignIn = document.getElementById("btnSignIn");
2025-04-15T08:07:18.2911362Z     msgSignIn.textContent = "Please wait..."
2025-04-15T08:07:18.2911451Z     btnSignIn.style.display = "none"
2025-04-15T08:07:18.2911460Z 
2025-04-15T08:07:18.2911549Z     const agentInfo = await getAgentInfo()
2025-04-15T08:07:18.2911553Z 
2025-04-15T08:07:18.2911908Z     if (!agentInfo || !Array.isArray(agentInfo.agents) || !agentInfo.agents[0]) return Promise.reject({ message: "No agent data available." })
2025-04-15T08:07:18.2912028Z 
2025-04-15T08:07:18.2912143Z     const agent = (agentInfo?.agents || [])[0] || {}
2025-04-15T08:07:18.2912253Z     const status = agent.cloud && agent.cloud.status
2025-04-15T08:07:18.2912378Z     const claimId = agent.cloud && agent.cloud.claim_id
2025-04-15T08:07:18.2912482Z     const cloudUrl = agent.cloud && agent.cloud.url
2025-04-15T08:07:18.2912486Z 
2025-04-15T08:07:18.2912582Z     window.localNetdataRegistry = {
2025-04-15T08:07:18.2912655Z       hostname: agent.nm,
2025-04-15T08:07:18.2912721Z       mg: agent.mg,
2025-04-15T08:07:18.2912790Z       nd: agent.nd,
2025-04-15T08:07:18.2912860Z       claimId: claimId,
2025-04-15T08:07:18.2912943Z       xNetdataAuthHeader: true
2025-04-15T08:07:18.2913003Z     }
2025-04-15T08:07:18.2913007Z 
2025-04-15T08:07:18.2913196Z     window.envSettings.cloudUrl = cloudUrl || window.envSettings.cloudUrl
2025-04-15T08:07:18.2913366Z     window.envSettings.apiUrl = cloudUrl || window.envSettings.apiUrl
2025-04-15T08:07:18.2913375Z 
2025-04-15T08:07:18.2913529Z     const isCloudSignedIn = !!localStorage.getItem(CLOUD_TOKEN_KEY)
2025-04-15T08:07:18.2913538Z 
2025-04-15T08:07:18.2913616Z     if (!isCloudSignedIn) {
2025-04-15T08:07:18.2913706Z       msgSignIn.style.display = "inline"
2025-04-15T08:07:18.2913839Z       msgSignIn.textContent = "Please sign-in to continue"
2025-04-15T08:07:18.2913927Z       btnSignIn.style.display = "block"
2025-04-15T08:07:18.2913991Z     }
2025-04-15T08:07:18.2913995Z 
2025-04-15T08:07:18.2914069Z     initMetrics(agentInfo)
2025-04-15T08:07:18.2914073Z 
2025-04-15T08:07:18.2914224Z     if (!claimId && isCloudSignedIn && !window.envSettings.isLocal) {
2025-04-15T08:07:18.2914317Z       setShouldClaimStatus(true);
2025-04-15T08:07:18.2914397Z       prepareClaiming(agent)
2025-04-15T08:07:18.2914504Z       return Promise.resolve({ stopLoading: true })
2025-04-15T08:07:18.2914568Z     }
2025-04-15T08:07:18.2914572Z 
2025-04-15T08:07:18.2914656Z     let me = await checkMe(agent.mg)
2025-04-15T08:07:18.2914664Z 
2025-04-15T08:07:18.2914840Z     if (isCloudSignedIn && agent.nd && (me.auth === "none" || me.auth === "god")) {
2025-04-15T08:07:18.2915055Z       await getAgentToken({ mg: agent.mg, nd: agent.nd, claimId: agent.cloud.claim_id }, agent)
2025-04-15T08:07:18.2915227Z       me = await checkMe(agent.mg)
2025-04-15T08:07:18.2915289Z     }
2025-04-15T08:07:18.2915293Z 
2025-04-15T08:07:18.2915458Z     const claimStatusesToProceed = ["online", "indirect", "offline"]
2025-04-15T08:07:18.2915462Z 
2025-04-15T08:07:18.2915651Z     if ((me.auth === "bearer" || me.auth === "god") && claimStatusesToProceed.includes(status)) {
2025-04-15T08:07:18.2915753Z       await fetchUserAccess(agent.mg, agent.nd)
2025-04-15T08:07:18.2915829Z       return loadDashboard()
2025-04-15T08:07:18.2915928Z     } else if (window.envSettings.isLocal) {
2025-04-15T08:07:18.2916003Z       return loadDashboard()
2025-04-15T08:07:18.2916161Z     } else {
2025-04-15T08:07:18.2916266Z       await fetchUserAccess(agent.mg, agent.nd)
2025-04-15T08:07:18.2916333Z     }
2025-04-15T08:07:18.2916337Z 
2025-04-15T08:07:18.2916416Z     if (!isCloudSignedIn) {
2025-04-15T08:07:18.2916502Z       setupOptOutMessage(agent)
2025-04-15T08:07:18.2916609Z       return Promise.resolve({ stopLoading: true })
2025-04-15T08:07:18.2916678Z     }
2025-04-15T08:07:18.2916682Z 
2025-04-15T08:07:18.2916762Z     return Promise.resolve()
2025-04-15T08:07:18.2916827Z   }
2025-04-15T08:07:18.2916830Z 
2025-04-15T08:07:18.2916910Z   // =============================================== //
2025-04-15T08:07:18.2916914Z 
2025-04-15T08:07:18.2917045Z   document.addEventListener("DOMContentLoaded", () => {
2025-04-15T08:07:18.2917112Z     initGrid();
2025-04-15T08:07:18.2917197Z     initPrimaryButtonHover();
2025-04-15T08:07:18.2917267Z     toggleTab(1);
2025-04-15T08:07:18.2917335Z     initTabs();
2025-04-15T08:07:18.2917339Z 
2025-04-15T08:07:18.2917488Z     fetchRegistryInfo().then(initSplashScreen).then(data => {
2025-04-15T08:07:18.2917567Z       if (data?.stopLoading) {
2025-04-15T08:07:18.2917760Z         stopLoading()
2025-04-15T08:07:18.2917824Z       }
2025-04-15T08:07:18.2917894Z       initTooltips()
2025-04-15T08:07:18.2917966Z     }).catch(err => {
2025-04-15T08:07:18.2918051Z       showErrorMessage(err?.message)
2025-04-15T08:07:18.2918121Z     })
2025-04-15T08:07:18.2918191Z   });</script></html>
