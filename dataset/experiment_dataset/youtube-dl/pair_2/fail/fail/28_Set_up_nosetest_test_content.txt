##[group]Run # set PYTHON_VER
[36;1m# set PYTHON_VER[0m
[36;1mPYTHON_VER=3.2[0m
[36;1m[ "${PYTHON_VER#*-}" != "$PYTHON_VER" ] || PYTHON_VER="cpython-${PYTHON_VER}"[0m
[36;1mecho "PYTHON_VER=$PYTHON_VER" >> "$GITHUB_ENV"[0m
[36;1mecho "PYTHON_IMPL=cpython" >> "$GITHUB_ENV"[0m
[36;1m# define a test to validate the Python version used by nosetests[0m
[36;1mprintf '%s\n' \[0m
[36;1m  'from __future__ import unicode_literals' \[0m
[36;1m  'import sys, os, platform' \[0m
[36;1m  'try:' \[0m
[36;1m  '    import unittest2 as unittest' \[0m
[36;1m  'except ImportError:' \[0m
[36;1m  '    import unittest' \[0m
[36;1m  'class TestPython(unittest.TestCase):' \[0m
[36;1m  '    def setUp(self):' \[0m
[36;1m  '        self.ver = os.environ["PYTHON_VER"].split("-")' \[0m
[36;1m  '    def test_python_ver(self):' \[0m
[36;1m  '        self.assertEqual(["%d" % v for v in sys.version_info[:2]], self.ver[-1].split(".")[:2])' \[0m
[36;1m  '        self.assertTrue(sys.version.startswith(self.ver[-1]))' \[0m
[36;1m  '        self.assertIn(self.ver[0], ",".join((sys.version, platform.python_implementation())).lower())' \[0m
[36;1m  '    def test_python_impl(self):' \[0m
[36;1m  '        self.assertIn(platform.python_implementation().lower(), (os.environ["PYTHON_IMPL"], self.ver[0]))' \[0m
[36;1m  > test/test_python.py[0m
0

all-cpython-versions: 2.6, 2.7, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 3.10, 3.11, 3.12
main-cpython-versions: 2.7, 3.2, 3.5, 3.9, 3.11
pypy-versions: pypy-2.7, pypy-3.6, pypy-3.7
cpython-versions: main
test-set: core
next: 3.13
PIP: python -m pip
PIP_DISABLE_PIP_VERSION_CHECK: true
PIP_NO_PYTHON_VERSION_WARNING: true
3 2 6
3 2 6
3 2 6
Python2 3 2 6
Python3 3 2 6
3 2 6
PYTHONHOME: /opt/hostedtoolcache/Python/3.2.6/x64
##[endgroup]
